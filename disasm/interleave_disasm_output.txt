BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x3e028, which lies outside .bss
BOLT-WARNING: split function detected on input : _GLOBAL__sub_I_results.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x3dff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x1410
  Size        : 0x143
  MaxSize     : 0x150
  Offset      : 0x1410
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	testl	%edi, %edi
    0000000e: 	jle	.Ltmp1 # Offset: 14
    00000014: 	leal	-0x1(%rdi), %eax
    00000017: 	movl	%edi, %r13d
    0000001a: 	movq	%rsi, %r14
    0000001d: 	movq	%rsi, %rbx
    00000020: 	leaq	0x8(%rsi,%rax,8), %r12
    00000025: 	leaq	DATAat0x37150(%rip), %rbp
    0000002c: 	nopl	(%rax) # Size: 4
.Ltmp2:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%r12, %rbx
    00000049: 	jne	.Ltmp2 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0x37136(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp3 # Offset: 98
.Ltmp4:
    00000068: 	callq	_Z11TestOneTypeIhEvv # Offset: 104
    0000006d: 	movl	iterations(%rip), %edx
    00000073: 	movl	%edx, %eax
    00000075: 	shrl	$0x1f, %eax
    00000078: 	addl	%edx, %eax
    0000007a: 	sarl	%eax
    0000007c: 	movl	%eax, iterations(%rip)
    00000082: 	callq	_Z11TestOneTypeItEvv # Offset: 130
    00000087: 	movl	iterations(%rip), %edx
    0000008d: 	movl	%edx, %eax
    0000008f: 	shrl	$0x1f, %eax
    00000092: 	addl	%edx, %eax
    00000094: 	sarl	%eax
    00000096: 	movl	%eax, iterations(%rip)
    0000009c: 	callq	_Z11TestOneTypeIjEvv # Offset: 156
    000000a1: 	movl	iterations(%rip), %edx
    000000a7: 	movl	%edx, %eax
    000000a9: 	shrl	$0x1f, %eax
    000000ac: 	addl	%edx, %eax
    000000ae: 	sarl	%eax
    000000b0: 	movl	%eax, iterations(%rip)
    000000b6: 	callq	_Z11TestOneTypeImEvv # Offset: 182
    000000bb: 	shll	iterations(%rip)
    000000c1: 	callq	_Z11TestOneTypeIfEvv # Offset: 193
    000000c6: 	movl	iterations(%rip), %edx
    000000cc: 	movl	%edx, %eax
    000000ce: 	shrl	$0x1f, %eax
    000000d1: 	addl	%edx, %eax
    000000d3: 	sarl	%eax
    000000d5: 	movl	%eax, iterations(%rip)
    000000db: 	callq	_Z11TestOneTypeIdEvv # Offset: 219
    000000e0: 	callq	_Z11TestOneTypeIeEvv # Offset: 224
    000000e5: 	popq	%rbx
    000000e6: 	xorl	%eax, %eax
    000000e8: 	popq	%rbp
    000000e9: 	popq	%r12
    000000eb: 	popq	%r13
    000000ed: 	popq	%r14
    000000ef: 	retq # Offset: 239
.Ltmp3:
    000000f0: 	movq	0x8(%r14), %rdi
    000000f4: 	movl	$0xa, %edx
    000000f9: 	xorl	%esi, %esi
    000000fb: 	callq	strtol@PLT # Offset: 251
    00000100: 	movl	%eax, iterations(%rip)
    00000106: 	cmpl	$0x2, %r13d
    0000010a: 	jle	.Ltmp4 # Offset: 266
    00000110: 	movq	0x10(%r14), %rdi
    00000114: 	movl	$0xa, %edx
    00000119: 	xorl	%esi, %esi
    0000011b: 	callq	strtol@PLT # Offset: 283
    00000120: 	movb	%al, init_value(%rip)
    00000126: 	jmp	.Ltmp4 # Offset: 294
.Ltmp1:
    0000012b: 	leaq	DATAat0x37136(%rip), %rsi
    00000132: 	movl	$0x1, %edi
    00000137: 	xorl	%eax, %eax
    00000139: 	callq	__printf_chk@PLT # Offset: 313
    0000013e: 	jmp	.Ltmp4 # Offset: 318
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 5
  State       : disassembled
  Address     : 0x1640
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x1640
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x3dfe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x1670
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x1670
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp5 # Offset: 17
    00000013: 	movq	DATAat0x3dfe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp5 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp5:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x16a0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x16a0
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp6 # Offset: 34
    00000024: 	movq	DATAat0x3dff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp6 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp6:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x16e0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x16e0
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp7 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp8 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp8:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp7:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x1720
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x1720
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_Z23interleave2to2_version7IhEvPT_PKS0_S3_i" after disassembly {
  Number      : 10
  State       : disassembled
  Address     : 0x1730
  Size        : 0x3da
  MaxSize     : 0x3e0
  Offset      : 0x1730
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version7IhEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	leal	-0x3(%rcx), %r11d
    00000008: 	pushq	%r12
    0000000a: 	movq	%rsi, %r8
    0000000d: 	movl	%ecx, %r10d
    00000010: 	pushq	%rbp
    00000011: 	movq	%rdx, %rsi
    00000014: 	pushq	%rbx
    00000015: 	testl	%r11d, %r11d
    00000018: 	jle	.Ltmp9 # Offset: 24
    0000001e: 	leal	-0x4(%rcx), %ebx
    00000021: 	movl	%ebx, %ecx
    00000023: 	shrl	$0x2, %ecx
    00000026: 	leal	0x1(%rcx), %edx
    00000029: 	leaq	(,%rdx,4), %rax
    00000031: 	leaq	(%rdi,%rdx,8), %rbp
    00000035: 	movq	%rdx, %r9
    00000038: 	leaq	(%rsi,%rax), %rdx
    0000003c: 	cmpq	%rdx, %rdi
    0000003f: 	setae	%dl
    00000042: 	cmpq	%rbp, %rsi
    00000045: 	setae	%r12b
    00000049: 	addq	%r8, %rax
    0000004c: 	orl	%r12d, %edx
    0000004f: 	cmpq	%rax, %rdi
    00000052: 	setae	%al
    00000055: 	cmpq	%rbp, %r8
    00000058: 	setae	%bpl
    0000005c: 	orl	%ebp, %eax
    0000005e: 	testb	%al, %dl
    00000060: 	je	.Ltmp10 # Offset: 96
    00000066: 	cmpl	$0x3, %ebx
    00000069: 	jbe	.Ltmp10 # Offset: 105
    0000006f: 	cmpl	$0xb, %ebx
    00000072: 	jbe	.Ltmp11 # Offset: 114
    00000078: 	movl	%r9d, %edx
    0000007b: 	movdqa	DATAat0x373f0(%rip), %xmm6
    00000083: 	movdqa	DATAat0x373e0(%rip), %xmm8
    0000008c: 	xorl	%eax, %eax
    0000008e: 	shrl	$0x2, %edx
    00000091: 	movdqa	DATAat0x37400(%rip), %xmm5
    00000099: 	movdqa	DATAat0x37410(%rip), %xmm4
    000000a1: 	movdqa	DATAat0x37420(%rip), %xmm7
    000000a9: 	shlq	$0x4, %rdx
    000000ad: 	nopl	(%rax) # Size: 3
.Ltmp12:
    000000b0: 	movdqu	(%r8,%rax), %xmm1
    000000b6: 	movdqu	(%rsi,%rax), %xmm3
    000000bb: 	movdqa	%xmm1, %xmm2
    000000bf: 	movdqa	%xmm3, %xmm0
    000000c3: 	movdqa	%xmm1, %xmm9
    000000c8: 	pslld	$0x8, %xmm0
    000000cd: 	pslld	$0x8, %xmm2
    000000d2: 	pand	%xmm4, %xmm9
    000000d7: 	pand	%xmm6, %xmm2
    000000db: 	pand	%xmm8, %xmm0
    000000e0: 	por	%xmm2, %xmm0
    000000e4: 	movdqa	%xmm3, %xmm2
    000000e8: 	pslld	$0x10, %xmm2
    000000ed: 	pand	%xmm5, %xmm2
    000000f1: 	por	%xmm9, %xmm2
    000000f6: 	movdqa	%xmm3, %xmm9
    000000fb: 	pand	%xmm5, %xmm3
    000000ff: 	por	%xmm2, %xmm0
    00000103: 	psrld	$0x8, %xmm9
    00000109: 	movdqa	%xmm1, %xmm2
    0000010d: 	psrld	$0x10, %xmm2
    00000112: 	psrld	$0x8, %xmm1
    00000117: 	pand	%xmm7, %xmm9
    0000011c: 	pand	%xmm4, %xmm2
    00000120: 	pand	%xmm6, %xmm1
    00000124: 	por	%xmm9, %xmm2
    00000129: 	por	%xmm3, %xmm1
    0000012d: 	por	%xmm2, %xmm1
    00000131: 	movdqa	%xmm0, %xmm2
    00000135: 	punpckldq	%xmm1, %xmm2
    00000139: 	punpckhdq	%xmm1, %xmm0
    0000013d: 	movups	%xmm2, (%rdi,%rax,2)
    00000141: 	movups	%xmm0, 0x10(%rdi,%rax,2)
    00000146: 	addq	$0x10, %rax
    0000014a: 	cmpq	%rax, %rdx
    0000014d: 	jne	.Ltmp12 # Offset: 333
    00000153: 	movl	%r9d, %eax
    00000156: 	andl	$-0x4, %eax
    00000159: 	leal	(,%rax,4), %r11d
    00000161: 	cmpl	%eax, %r9d
    00000164: 	je	.Ltmp13 # Offset: 356
.Ltmp18:
    0000016a: 	movl	%r9d, %edx
    0000016d: 	subl	%eax, %edx
    0000016f: 	cmpl	%eax, %ecx
    00000171: 	je	.Ltmp14 # Offset: 369
    00000177: 	movq	DATAat0x373e0(%rip), %xmm2
    0000017f: 	movl	%eax, %ecx
    00000181: 	movq	DATAat0x373f0(%rip), %xmm6
    00000189: 	movq	(%rsi,%rcx,4), %xmm3
    0000018e: 	movq	(%r8,%rcx,4), %xmm1
    00000194: 	leaq	(%rdi,%rcx,8), %rax
    00000198: 	movq	DATAat0x37410(%rip), %xmm4
    000001a0: 	movq	DATAat0x37400(%rip), %xmm5
    000001a8: 	movdqa	%xmm3, %xmm0
    000001ac: 	movdqa	%xmm1, %xmm7
    000001b0: 	pslld	$0x8, %xmm0
    000001b5: 	pand	%xmm4, %xmm7
    000001b9: 	pand	%xmm2, %xmm0
    000001bd: 	movdqa	%xmm1, %xmm2
    000001c1: 	pslld	$0x8, %xmm2
    000001c6: 	pand	%xmm6, %xmm2
    000001ca: 	por	%xmm2, %xmm0
    000001ce: 	movdqa	%xmm3, %xmm2
    000001d2: 	pslld	$0x10, %xmm2
    000001d7: 	pand	%xmm5, %xmm2
    000001db: 	por	%xmm7, %xmm2
    000001df: 	movq	DATAat0x37420(%rip), %xmm7
    000001e7: 	por	%xmm2, %xmm0
    000001eb: 	movdqa	%xmm1, %xmm2
    000001ef: 	psrld	$0x10, %xmm2
    000001f4: 	psrld	$0x8, %xmm1
    000001f9: 	pand	%xmm4, %xmm2
    000001fd: 	movdqa	%xmm3, %xmm4
    00000201: 	pand	%xmm6, %xmm1
    00000205: 	psrld	$0x8, %xmm4
    0000020a: 	pand	%xmm5, %xmm3
    0000020e: 	pand	%xmm7, %xmm4
    00000212: 	por	%xmm3, %xmm1
    00000216: 	por	%xmm4, %xmm2
    0000021a: 	por	%xmm2, %xmm1
    0000021e: 	movdqa	%xmm0, %xmm2
    00000222: 	punpckldq	%xmm1, %xmm0
    00000226: 	punpckldq	%xmm1, %xmm2
    0000022a: 	pshufd	$0xe, %xmm0, %xmm0
    0000022f: 	movq	%xmm2, (%rax)
    00000233: 	movq	%xmm0, 0x8(%rax)
    00000238: 	movl	%edx, %eax
    0000023a: 	andl	$-0x2, %eax
    0000023d: 	leal	(%r11,%rax,4), %r11d
    00000241: 	cmpl	%eax, %edx
    00000243: 	je	.Ltmp13 # Offset: 579
.Ltmp14:
    00000245: 	movslq	%r11d, %rdx
    00000248: 	addl	%r11d, %r11d
    0000024b: 	movl	(%r8,%rdx), %eax
    0000024f: 	movl	(%rsi,%rdx), %edx
    00000252: 	movslq	%r11d, %r11
    00000255: 	movl	%edx, %ebx
    00000257: 	movl	%eax, %ecx
    00000259: 	movzbl	%al, %ebp
    0000025c: 	shll	$0x8, %ebx
    0000025f: 	shll	$0x8, %ecx
    00000262: 	andl	$0xff0000, %ecx
    00000268: 	movzwl	%bx, %ebx
    0000026b: 	orl	%ecx, %ebx
    0000026d: 	movl	%eax, %ecx
    0000026f: 	shrl	$0x8, %eax
    00000272: 	orl	%ebp, %ebx
    00000274: 	movl	%edx, %ebp
    00000276: 	shrl	$0x10, %ecx
    00000279: 	andl	$0xff0000, %eax
    0000027e: 	shrl	$0x8, %ebp
    00000281: 	movzbl	%cl, %ecx
    00000284: 	andl	$0xff00, %ebp
    0000028a: 	orl	%ebp, %ecx
    0000028c: 	movl	%edx, %ebp
    0000028e: 	shll	$0x10, %edx
    00000291: 	andl	$0xff000000, %ebp
    00000297: 	andl	$0xff000000, %edx
    0000029d: 	orl	%ebp, %ecx
    0000029f: 	orl	%ebx, %edx
    000002a1: 	orl	%ecx, %eax
    000002a3: 	movl	%edx, (%rdi,%r11)
    000002a7: 	movl	%eax, 0x4(%rdi,%r11)
.Ltmp13:
    000002ac: 	shll	$0x2, %r9d
.Ltmp17:
    000002b0: 	cmpl	%r9d, %r10d
    000002b3: 	jle	.Ltmp15 # Offset: 691
    000002b9: 	movslq	%r9d, %rcx
    000002bc: 	leal	(%r9,%r9), %eax
    000002c0: 	movzbl	(%r8,%rcx), %r11d
    000002c5: 	movslq	%eax, %rdx
    000002c8: 	movb	%r11b, (%rdi,%rdx)
    000002cc: 	movzbl	(%rsi,%rcx), %ecx
    000002d0: 	movb	%cl, 0x1(%rdi,%rdx)
    000002d4: 	leal	0x1(%r9), %edx
    000002d8: 	cmpl	%r10d, %edx
    000002db: 	jge	.Ltmp15 # Offset: 731
    000002dd: 	movslq	%edx, %rdx
    000002e0: 	leal	0x2(%rax), %ecx
    000002e3: 	movzbl	(%r8,%rdx), %r11d
    000002e8: 	movslq	%ecx, %rcx
    000002eb: 	movb	%r11b, (%rdi,%rcx)
    000002ef: 	movzbl	(%rsi,%rdx), %edx
    000002f3: 	movb	%dl, 0x1(%rdi,%rcx)
    000002f7: 	leal	0x2(%r9), %edx
    000002fb: 	cmpl	%r10d, %edx
    000002fe: 	jge	.Ltmp15 # Offset: 766
    00000300: 	movslq	%edx, %rdx
    00000303: 	leal	0x4(%rax), %ecx
    00000306: 	addl	$0x3, %r9d
    0000030a: 	movzbl	(%r8,%rdx), %r11d
    0000030f: 	movslq	%ecx, %rcx
    00000312: 	movb	%r11b, (%rdi,%rcx)
    00000316: 	movzbl	(%rsi,%rdx), %edx
    0000031a: 	movb	%dl, 0x1(%rdi,%rcx)
    0000031e: 	cmpl	%r9d, %r10d
    00000321: 	jle	.Ltmp15 # Offset: 801
    00000323: 	movslq	%r9d, %r9
    00000326: 	addl	$0x6, %eax
    00000329: 	movzbl	(%r8,%r9), %edx
    0000032e: 	cltq
    00000330: 	movb	%dl, (%rdi,%rax)
    00000333: 	movzbl	(%rsi,%r9), %edx
    00000338: 	movb	%dl, 0x1(%rdi,%rax)
.Ltmp15:
    0000033c: 	popq	%rbx
    0000033d: 	popq	%rbp
    0000033e: 	popq	%r12
    00000340: 	retq # Offset: 832
    00000341: 	nopl	(%rax) # Size: 7
.Ltmp10:
    00000348: 	xorl	%ecx, %ecx
    0000034a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp16:
    00000350: 	movl	(%r8,%rcx), %eax
    00000354: 	movl	(%rsi,%rcx), %edx
    00000357: 	movl	%eax, %ebp
    00000359: 	movl	%edx, %ebx
    0000035b: 	movzbl	%al, %r12d
    0000035f: 	shll	$0x8, %ebp
    00000362: 	shll	$0x8, %ebx
    00000365: 	movzwl	%bx, %ebx
    00000368: 	andl	$0xff0000, %ebp
    0000036e: 	orl	%ebx, %ebp
    00000370: 	movl	%eax, %ebx
    00000372: 	shrl	$0x8, %eax
    00000375: 	orl	%r12d, %ebp
    00000378: 	movl	%edx, %r12d
    0000037b: 	shrl	$0x10, %ebx
    0000037e: 	andl	$0xff0000, %eax
    00000383: 	shrl	$0x8, %r12d
    00000387: 	movzbl	%bl, %ebx
    0000038a: 	andl	$0xff00, %r12d
    00000391: 	orl	%r12d, %ebx
    00000394: 	movl	%edx, %r12d
    00000397: 	shll	$0x10, %edx
    0000039a: 	andl	$0xff000000, %r12d
    000003a1: 	andl	$0xff000000, %edx
    000003a7: 	orl	%r12d, %ebx
    000003aa: 	orl	%ebp, %edx
    000003ac: 	orl	%ebx, %eax
    000003ae: 	movl	%edx, (%rdi,%rcx,2)
    000003b1: 	movl	%eax, 0x4(%rdi,%rcx,2)
    000003b5: 	addq	$0x4, %rcx
    000003b9: 	cmpl	%ecx, %r11d
    000003bc: 	jg	.Ltmp16 # Offset: 956
    000003be: 	jmp	.Ltmp13 # Offset: 958
    000003c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp9:
    000003c8: 	xorl	%r9d, %r9d
    000003cb: 	jmp	.Ltmp17 # Offset: 971
.Ltmp11:
    000003d0: 	xorl	%eax, %eax
    000003d2: 	xorl	%r11d, %r11d
    000003d5: 	jmp	.Ltmp18 # Offset: 981
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version7IhEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version7ItEvPT_PKS0_S3_i" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x1b10
  Size        : 0x20e
  MaxSize     : 0x210
  Offset      : 0x1b10
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version7ItEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rsi, %r9
    00000009: 	movq	%rdx, %r8
    0000000c: 	movl	%ecx, %r11d
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	leal	-0x1(%rcx), %ebx
    00000014: 	testl	%ebx, %ebx
    00000016: 	jle	.Ltmp19 # Offset: 22
    0000001c: 	leal	-0x2(%rcx), %ecx
    0000001f: 	movl	%ecx, %esi
    00000021: 	shrl	%esi
    00000023: 	leal	0x1(%rsi), %edx
    00000026: 	leaq	(,%rdx,4), %rax
    0000002e: 	leaq	(%rdi,%rdx,8), %rbp
    00000032: 	movq	%rdx, %r10
    00000035: 	leaq	(%r9,%rax), %rdx
    00000039: 	cmpq	%rdx, %rdi
    0000003c: 	setae	%dl
    0000003f: 	cmpq	%rbp, %r9
    00000042: 	setae	%r12b
    00000046: 	addq	%r8, %rax
    00000049: 	orl	%r12d, %edx
    0000004c: 	cmpq	%rax, %rdi
    0000004f: 	setae	%al
    00000052: 	cmpq	%rbp, %r8
    00000055: 	setae	%bpl
    00000059: 	orl	%ebp, %eax
    0000005b: 	testb	%al, %dl
    0000005d: 	je	.Ltmp20 # Offset: 93
    00000063: 	cmpl	$0x1, %ecx
    00000066: 	jbe	.Ltmp20 # Offset: 102
    0000006c: 	cmpl	$0x5, %ecx
    0000006f: 	jbe	.Ltmp21 # Offset: 111
    00000075: 	movl	%r10d, %edx
    00000078: 	movdqa	DATAat0x373e0(%rip), %xmm4
    00000080: 	movdqa	DATAat0x37430(%rip), %xmm3
    00000088: 	xorl	%eax, %eax
    0000008a: 	shrl	$0x2, %edx
    0000008d: 	shlq	$0x4, %rdx
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp22:
    00000098: 	movdqu	(%r8,%rax), %xmm2
    0000009e: 	movdqu	(%r9,%rax), %xmm1
    000000a4: 	movdqa	%xmm2, %xmm0
    000000a8: 	pand	%xmm4, %xmm1
    000000ac: 	pand	%xmm3, %xmm2
    000000b0: 	pslld	$0x10, %xmm0
    000000b5: 	por	%xmm0, %xmm1
    000000b9: 	movdqu	(%r9,%rax), %xmm0
    000000bf: 	psrld	$0x10, %xmm0
    000000c4: 	por	%xmm2, %xmm0
    000000c8: 	movdqa	%xmm1, %xmm2
    000000cc: 	punpckldq	%xmm0, %xmm2
    000000d0: 	punpckhdq	%xmm0, %xmm1
    000000d4: 	movups	%xmm2, (%rdi,%rax,2)
    000000d8: 	movups	%xmm1, 0x10(%rdi,%rax,2)
    000000dd: 	addq	$0x10, %rax
    000000e1: 	cmpq	%rax, %rdx
    000000e4: 	jne	.Ltmp22 # Offset: 228
    000000e6: 	movl	%r10d, %eax
    000000e9: 	andl	$-0x4, %eax
    000000ec: 	leal	(%rax,%rax), %ecx
    000000ef: 	cmpl	%eax, %r10d
    000000f2: 	je	.Ltmp23 # Offset: 242
.Ltmp28:
    000000f8: 	movl	%r10d, %edx
    000000fb: 	subl	%eax, %edx
    000000fd: 	cmpl	%eax, %esi
    000000ff: 	je	.Ltmp24 # Offset: 255
    00000101: 	movq	(%r8,%rax,4), %xmm2
    00000107: 	movq	(%r9,%rax,4), %xmm1
    0000010d: 	leaq	(%rdi,%rax,8), %rsi
    00000111: 	movl	%edx, %eax
    00000113: 	movq	DATAat0x373e0(%rip), %xmm0
    0000011b: 	andl	$-0x2, %eax
    0000011e: 	movdqa	%xmm2, %xmm3
    00000122: 	leal	(%rcx,%rax,2), %ecx
    00000125: 	pand	%xmm1, %xmm0
    00000129: 	pslld	$0x10, %xmm3
    0000012e: 	por	%xmm3, %xmm0
    00000132: 	psrld	$0x10, %xmm1
    00000137: 	movq	DATAat0x37430(%rip), %xmm3
    0000013f: 	pand	%xmm3, %xmm2
    00000143: 	por	%xmm2, %xmm1
    00000147: 	movdqa	%xmm0, %xmm2
    0000014b: 	punpckldq	%xmm1, %xmm0
    0000014f: 	punpckldq	%xmm1, %xmm2
    00000153: 	pshufd	$0xe, %xmm0, %xmm0
    00000158: 	movq	%xmm2, (%rsi)
    0000015c: 	movq	%xmm0, 0x8(%rsi)
    00000161: 	cmpl	%eax, %edx
    00000163: 	je	.Ltmp23 # Offset: 355
.Ltmp24:
    00000165: 	movslq	%ecx, %rcx
    00000168: 	movl	(%r8,%rcx,2), %esi
    0000016c: 	movl	(%r9,%rcx,2), %eax
    00000170: 	movl	%esi, %ebx
    00000172: 	movzwl	%ax, %edx
    00000175: 	xorw	%si, %si
    00000178: 	shrl	$0x10, %eax
    0000017b: 	shll	$0x10, %ebx
    0000017e: 	orl	%esi, %eax
    00000180: 	orl	%ebx, %edx
    00000182: 	movd	%eax, %xmm5
    00000186: 	movd	%edx, %xmm0
    0000018a: 	punpckldq	%xmm5, %xmm0
    0000018e: 	movq	%xmm0, (%rdi,%rcx,4)
.Ltmp23:
    00000193: 	addl	%r10d, %r10d
.Ltmp27:
    00000196: 	cmpl	%r11d, %r10d
    00000199: 	jge	.Ltmp25 # Offset: 409
    0000019b: 	movslq	%r10d, %r10
    0000019e: 	movzwl	(%r9,%r10,2), %eax
    000001a3: 	movw	%ax, (%rdi,%r10,4)
    000001a8: 	movzwl	(%r8,%r10,2), %eax
    000001ad: 	movw	%ax, 0x2(%rdi,%r10,4)
.Ltmp25:
    000001b3: 	popq	%rbx
    000001b4: 	popq	%rbp
    000001b5: 	popq	%r12
    000001b7: 	retq # Offset: 439
    000001b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp20:
    000001c0: 	xorl	%edx, %edx
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp26:
    000001c8: 	movl	(%r8,%rdx,2), %esi
    000001cc: 	movl	(%r9,%rdx,2), %eax
    000001d0: 	movl	%esi, %ebp
    000001d2: 	movzwl	%ax, %ecx
    000001d5: 	xorw	%si, %si
    000001d8: 	shrl	$0x10, %eax
    000001db: 	shll	$0x10, %ebp
    000001de: 	orl	%esi, %eax
    000001e0: 	orl	%ebp, %ecx
    000001e2: 	movd	%eax, %xmm6
    000001e6: 	movd	%ecx, %xmm0
    000001ea: 	punpckldq	%xmm6, %xmm0
    000001ee: 	movq	%xmm0, (%rdi,%rdx,4)
    000001f3: 	addq	$0x2, %rdx
    000001f7: 	cmpl	%edx, %ebx
    000001f9: 	jg	.Ltmp26 # Offset: 505
    000001fb: 	jmp	.Ltmp23 # Offset: 507
    000001fd: 	nopl	(%rax) # Size: 3
.Ltmp19:
    00000200: 	xorl	%r10d, %r10d
    00000203: 	jmp	.Ltmp27 # Offset: 515
.Ltmp21:
    00000205: 	xorl	%eax, %eax
    00000207: 	xorl	%ecx, %ecx
    00000209: 	jmp	.Ltmp28 # Offset: 521
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version7ItEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version7IfEvPT_PKS0_S3_i" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x1d20
  Size        : 0x13b
  MaxSize     : 0x140
  Offset      : 0x1d20
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version7IfEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp29 # Offset: 6
    0000000c: 	movslq	%ecx, %r8
    0000000f: 	pushq	%rbx
    00000010: 	movl	%ecx, %r9d
    00000013: 	leaq	(,%r8,4), %rax
    0000001b: 	leaq	(%rdi,%r8,8), %r11
    0000001f: 	leaq	(%rsi,%rax), %r10
    00000023: 	cmpq	%r10, %rdi
    00000026: 	setae	%r10b
    0000002a: 	cmpq	%r11, %rsi
    0000002d: 	setae	%bl
    00000030: 	addq	%rdx, %rax
    00000033: 	orl	%ebx, %r10d
    00000036: 	cmpq	%rax, %rdi
    00000039: 	setae	%al
    0000003c: 	cmpq	%r11, %rdx
    0000003f: 	setae	%r11b
    00000043: 	orl	%r11d, %eax
    00000046: 	testb	%al, %r10b
    00000049: 	je	.Ltmp30 # Offset: 73
    0000004f: 	cmpl	$0x1, %ecx
    00000052: 	je	.Ltmp30 # Offset: 82
    00000058: 	leal	-0x1(%rcx), %eax
    0000005b: 	cmpl	$0x2, %eax
    0000005e: 	jbe	.Ltmp31 # Offset: 94
    00000064: 	movl	%ecx, %r8d
    00000067: 	xorl	%eax, %eax
    00000069: 	shrl	$0x2, %r8d
    0000006d: 	shlq	$0x4, %r8
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp32:
    00000078: 	movdqu	(%rsi,%rax), %xmm0
    0000007d: 	movdqu	(%rdx,%rax), %xmm1
    00000082: 	movdqa	%xmm0, %xmm2
    00000086: 	punpckhdq	%xmm1, %xmm0
    0000008a: 	punpckldq	%xmm1, %xmm2
    0000008e: 	movups	%xmm0, 0x10(%rdi,%rax,2)
    00000093: 	movups	%xmm2, (%rdi,%rax,2)
    00000097: 	addq	$0x10, %rax
    0000009b: 	cmpq	%rax, %r8
    0000009e: 	jne	.Ltmp32 # Offset: 158
    000000a0: 	movl	%ecx, %r8d
    000000a3: 	andl	$-0x4, %r8d
    000000a7: 	movl	%r8d, %eax
    000000aa: 	cmpl	%r8d, %ecx
    000000ad: 	je	.Ltmp33 # Offset: 173
    000000af: 	subl	%r8d, %ecx
    000000b2: 	movl	%ecx, %r9d
    000000b5: 	cmpl	$0x1, %ecx
    000000b8: 	je	.Ltmp34 # Offset: 184
.Ltmp36:
    000000ba: 	movl	%r8d, %ecx
    000000bd: 	movq	(%rsi,%rcx,4), %xmm0
    000000c2: 	movq	(%rdx,%rcx,4), %xmm1
    000000c7: 	leaq	(%rdi,%rcx,8), %r8
    000000cb: 	movl	%r9d, %ecx
    000000ce: 	andl	$-0x2, %ecx
    000000d1: 	movdqa	%xmm0, %xmm2
    000000d5: 	punpckldq	%xmm1, %xmm0
    000000d9: 	addl	%ecx, %eax
    000000db: 	punpckldq	%xmm1, %xmm2
    000000df: 	pshufd	$0xe, %xmm0, %xmm0
    000000e4: 	movq	%xmm2, (%r8)
    000000e9: 	movq	%xmm0, 0x8(%r8)
    000000ef: 	cmpl	%ecx, %r9d
    000000f2: 	je	.Ltmp33 # Offset: 242
.Ltmp34:
    000000f4: 	movslq	%eax, %rcx
    000000f7: 	addl	%eax, %eax
    000000f9: 	movl	(%rsi,%rcx,4), %esi
    000000fc: 	cltq
    000000fe: 	movl	%esi, (%rdi,%rax,4)
    00000101: 	movl	(%rdx,%rcx,4), %edx
    00000104: 	movl	%edx, 0x4(%rdi,%rax,4)
.Ltmp33:
    00000108: 	popq	%rbx
    00000109: 	retq # Offset: 265
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp30:
    00000110: 	xorl	%eax, %eax
    00000112: 	nopw	(%rax,%rax) # Size: 6
.Ltmp35:
    00000118: 	movl	(%rsi,%rax,4), %ecx
    0000011b: 	movl	%ecx, (%rdi,%rax,8)
    0000011e: 	movl	(%rdx,%rax,4), %ecx
    00000121: 	movl	%ecx, 0x4(%rdi,%rax,8)
    00000125: 	addq	$0x1, %rax
    00000129: 	cmpq	%rax, %r8
    0000012c: 	jne	.Ltmp35 # Offset: 300
    0000012e: 	popq	%rbx
    0000012f: 	retq # Offset: 303
.Ltmp29:
    00000130: 	retq # Offset: 304
.Ltmp31:
    00000131: 	xorl	%r8d, %r8d
    00000134: 	xorl	%eax, %eax
    00000136: 	jmp	.Ltmp36 # Offset: 310
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version7IfEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version7IdEvPT_PKS0_S3_i" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x1e60
  Size        : 0xdb
  MaxSize     : 0xe0
  Offset      : 0x1e60
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version7IdEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp37 # Offset: 6
    0000000c: 	movslq	%ecx, %rax
    0000000f: 	leaq	(,%rax,8), %r8
    00000017: 	shlq	$0x4, %rax
    0000001b: 	leaq	(%rsi,%r8), %r9
    0000001f: 	addq	%rdi, %rax
    00000022: 	cmpq	%r9, %rdi
    00000025: 	setae	%r9b
    00000029: 	cmpq	%rax, %rsi
    0000002c: 	setae	%r10b
    00000030: 	addq	%rdx, %r8
    00000033: 	orl	%r10d, %r9d
    00000036: 	cmpq	%r8, %rdi
    00000039: 	setae	%r8b
    0000003d: 	cmpq	%rax, %rdx
    00000040: 	setae	%al
    00000043: 	orl	%r8d, %eax
    00000046: 	testb	%al, %r9b
    00000049: 	je	.Ltmp38 # Offset: 73
    0000004b: 	leal	-0x1(%rcx), %eax
    0000004e: 	cmpl	$0x1, %eax
    00000051: 	jbe	.Ltmp38 # Offset: 81
    00000053: 	movl	%ecx, %r8d
    00000056: 	xorl	%eax, %eax
    00000058: 	shrl	%r8d
    0000005b: 	shlq	$0x4, %r8
    0000005f: 	nop # Size: 1
.Ltmp39:
    00000060: 	movdqu	(%rsi,%rax), %xmm0
    00000065: 	movdqu	(%rdx,%rax), %xmm1
    0000006a: 	movdqa	%xmm0, %xmm2
    0000006e: 	punpckhqdq	%xmm1, %xmm0
    00000072: 	punpcklqdq	%xmm1, %xmm2
    00000076: 	movups	%xmm0, 0x10(%rdi,%rax,2)
    0000007b: 	movups	%xmm2, (%rdi,%rax,2)
    0000007f: 	addq	$0x10, %rax
    00000083: 	cmpq	%r8, %rax
    00000086: 	jne	.Ltmp39 # Offset: 134
    00000088: 	movl	%ecx, %eax
    0000008a: 	andl	$-0x2, %eax
    0000008d: 	andl	$0x1, %ecx
    00000090: 	je	.Ltmp37 # Offset: 144
    00000092: 	movl	%eax, %ecx
    00000094: 	addl	%eax, %eax
    00000096: 	movq	(%rsi,%rcx,8), %rsi
    0000009a: 	cltq
    0000009c: 	movq	%rsi, (%rdi,%rax,8)
    000000a0: 	movq	(%rdx,%rcx,8), %rdx
    000000a4: 	movq	%rdx, 0x8(%rdi,%rax,8)
    000000a9: 	retq # Offset: 169
    000000aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp38:
    000000b0: 	movl	%ecx, %ecx
    000000b2: 	xorl	%eax, %eax
    000000b4: 	shlq	$0x3, %rcx
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp40:
    000000c0: 	movq	(%rsi,%rax), %r8
    000000c4: 	movq	%r8, (%rdi,%rax,2)
    000000c8: 	movq	(%rdx,%rax), %r8
    000000cc: 	movq	%r8, 0x8(%rdi,%rax,2)
    000000d1: 	addq	$0x8, %rax
    000000d5: 	cmpq	%rax, %rcx
    000000d8: 	jne	.Ltmp40 # Offset: 216
.Ltmp37:
    000000da: 	retq # Offset: 218
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version7IdEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version8IhEvPT_PKS0_S3_i" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x1f40
  Size        : 0x5b8
  MaxSize     : 0x5c0
  Offset      : 0x1f40
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version8IhEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %rax
    00000009: 	movq	%rsi, %r8
    0000000c: 	movq	%rdx, %rdi
    0000000f: 	pushq	%r14
    00000011: 	movl	%ecx, %r11d
    00000014: 	pushq	%r13
    00000016: 	pushq	%r12
    00000018: 	pushq	%rbp
    00000019: 	leal	-0x7(%rcx), %ebp
    0000001c: 	pushq	%rbx
    0000001d: 	testl	%ebp, %ebp
    0000001f: 	jle	.Ltmp41 # Offset: 31
    00000025: 	leal	-0x8(%rcx), %r10d
    00000029: 	movl	%r10d, %r9d
    0000002c: 	shrl	$0x3, %r9d
    00000030: 	leal	0x1(%r9), %edx
    00000034: 	leaq	(,%rdx,8), %rcx
    0000003c: 	movq	%rdx, %r9
    0000003f: 	shlq	$0x4, %rdx
    00000043: 	leaq	(%rdi,%rcx), %rsi
    00000047: 	addq	%rax, %rdx
    0000004a: 	cmpq	%rsi, %rax
    0000004d: 	setae	%sil
    00000051: 	cmpq	%rdx, %rdi
    00000054: 	setae	%bl
    00000057: 	addq	%r8, %rcx
    0000005a: 	orl	%ebx, %esi
    0000005c: 	cmpq	%rcx, %rax
    0000005f: 	setae	%cl
    00000062: 	cmpq	%rdx, %r8
    00000065: 	setae	%dl
    00000068: 	orl	%ecx, %edx
    0000006a: 	testb	%dl, %sil
    0000006d: 	je	.Ltmp42 # Offset: 109
    00000073: 	cmpl	$0x7, %r10d
    00000077: 	jbe	.Ltmp42 # Offset: 119
    0000007d: 	movl	%r9d, %ecx
    00000080: 	xorl	%edx, %edx
    00000082: 	movdqa	DATAat0x37440(%rip), %xmm10
    0000008b: 	movdqa	DATAat0x37450(%rip), %xmm9
    00000094: 	shrl	%ecx
    00000096: 	movdqa	DATAat0x37480(%rip), %xmm7
    0000009e: 	movdqa	DATAat0x37460(%rip), %xmm12
    000000a7: 	movdqa	DATAat0x37470(%rip), %xmm8
    000000b0: 	movdqa	DATAat0x37490(%rip), %xmm6
    000000b8: 	shlq	$0x4, %rcx
    000000bc: 	movdqa	DATAat0x374a0(%rip), %xmm5
    000000c4: 	movdqa	DATAat0x374b0(%rip), %xmm4
    000000cc: 	movdqa	DATAat0x374c0(%rip), %xmm11
    000000d5: 	nopl	(%rax) # Size: 3
.Ltmp43:
    000000d8: 	movdqu	(%r8,%rdx), %xmm1
    000000de: 	movdqu	(%rdi,%rdx), %xmm2
    000000e3: 	movdqa	%xmm1, %xmm3
    000000e7: 	movdqa	%xmm2, %xmm0
    000000eb: 	movdqa	%xmm1, %xmm13
    000000f0: 	psllq	$0x10, %xmm0
    000000f5: 	psllq	$0x10, %xmm3
    000000fa: 	movdqa	%xmm2, %xmm14
    000000ff: 	pand	%xmm9, %xmm3
    00000104: 	pand	%xmm10, %xmm0
    00000109: 	psllq	$0x8, %xmm13
    0000010f: 	psrlq	$0x18, %xmm14
    00000115: 	por	%xmm3, %xmm0
    00000119: 	movdqa	%xmm2, %xmm3
    0000011d: 	pand	%xmm8, %xmm13
    00000122: 	pand	%xmm11, %xmm14
    00000127: 	psllq	$0x8, %xmm3
    0000012c: 	pand	%xmm12, %xmm3
    00000131: 	por	%xmm13, %xmm3
    00000136: 	movdqa	%xmm1, %xmm13
    0000013b: 	por	%xmm3, %xmm0
    0000013f: 	psllq	$0x18, %xmm13
    00000145: 	movdqa	%xmm2, %xmm3
    00000149: 	psllq	$0x18, %xmm3
    0000014e: 	pand	%xmm6, %xmm13
    00000153: 	pand	%xmm7, %xmm3
    00000157: 	por	%xmm13, %xmm3
    0000015c: 	movdqa	%xmm1, %xmm13
    00000161: 	por	%xmm3, %xmm0
    00000165: 	movdqa	%xmm2, %xmm3
    00000169: 	pand	%xmm4, %xmm13
    0000016e: 	psllq	$0x20, %xmm3
    00000173: 	pand	%xmm5, %xmm3
    00000177: 	por	%xmm13, %xmm3
    0000017c: 	movdqa	%xmm2, %xmm13
    00000181: 	por	%xmm3, %xmm0
    00000185: 	psrlq	$0x10, %xmm13
    0000018b: 	movdqa	%xmm1, %xmm3
    0000018f: 	psrlq	$0x18, %xmm3
    00000194: 	pand	%xmm10, %xmm13
    00000199: 	pand	%xmm8, %xmm3
    0000019e: 	por	%xmm13, %xmm3
    000001a3: 	movdqa	%xmm1, %xmm13
    000001a8: 	psrlq	$0x20, %xmm13
    000001ae: 	pand	%xmm4, %xmm13
    000001b3: 	por	%xmm14, %xmm13
    000001b8: 	movdqa	%xmm2, %xmm14
    000001bd: 	pand	%xmm5, %xmm2
    000001c1: 	por	%xmm13, %xmm3
    000001c6: 	psrlq	$0x8, %xmm14
    000001cc: 	movdqa	%xmm1, %xmm13
    000001d1: 	psrlq	$0x10, %xmm13
    000001d7: 	psrlq	$0x8, %xmm1
    000001dc: 	pand	%xmm7, %xmm14
    000001e1: 	pand	%xmm9, %xmm13
    000001e6: 	pand	%xmm6, %xmm1
    000001ea: 	por	%xmm14, %xmm13
    000001ef: 	por	%xmm2, %xmm1
    000001f3: 	por	%xmm13, %xmm3
    000001f8: 	por	%xmm1, %xmm3
    000001fc: 	movdqa	%xmm0, %xmm1
    00000200: 	punpcklqdq	%xmm3, %xmm1
    00000204: 	punpckhqdq	%xmm3, %xmm0
    00000208: 	movups	%xmm1, (%rax,%rdx,2)
    0000020c: 	movups	%xmm0, 0x10(%rax,%rdx,2)
    00000211: 	addq	$0x10, %rdx
    00000215: 	cmpq	%rdx, %rcx
    00000218: 	jne	.Ltmp43 # Offset: 536
    0000021e: 	movl	%r9d, %ebp
    00000221: 	andl	$-0x2, %ebp
    00000224: 	leal	(,%rbp,8), %edx
    0000022b: 	cmpl	%ebp, %r9d
    0000022e: 	je	.Ltmp44 # Offset: 558
    00000234: 	movabsq	$0xff00000000, %r15
    0000023e: 	movslq	%edx, %rdx
    00000241: 	movabsq	$0xff0000000000, %r14
    0000024b: 	movabsq	$-0x100000000000000, %r13
    00000255: 	movq	(%r8,%rdx), %rcx
    00000259: 	movq	(%rdi,%rdx), %rsi
    0000025d: 	movq	%rcx, %r10
    00000260: 	movq	%rsi, %rdx
    00000263: 	movzbl	%cl, %ebx
    00000266: 	movq	%rcx, %r12
    00000269: 	shlq	$0x8, %rdx
    0000026d: 	shlq	$0x8, %r10
    00000271: 	andl	$0xff0000, %r10d
    00000278: 	movzwl	%dx, %edx
    0000027b: 	shlq	$0x18, %r12
    0000027f: 	orq	%r10, %rdx
    00000282: 	movq	%rsi, %r10
    00000285: 	shlq	$0x10, %r10
    00000289: 	orq	%rbx, %rdx
    0000028c: 	movabsq	$0xff000000000000, %rbx
    00000296: 	andl	$0xff000000, %r10d
    0000029d: 	andq	%rbx, %r12
    000002a0: 	orq	%r10, %rdx
    000002a3: 	movq	%rcx, %r10
    000002a6: 	shlq	$0x10, %r10
    000002aa: 	andq	%r15, %r10
    000002ad: 	orq	%rdx, %r10
    000002b0: 	movq	%rsi, %rdx
    000002b3: 	shlq	$0x18, %rdx
    000002b7: 	andq	%r14, %rdx
    000002ba: 	orq	%r10, %rdx
    000002bd: 	movq	%rcx, %r10
    000002c0: 	orq	%rdx, %r12
    000002c3: 	movq	%rsi, %rdx
    000002c6: 	shrq	$0x20, %r10
    000002ca: 	shrq	$0x18, %rdx
    000002ce: 	movzbl	%r10b, %r10d
    000002d2: 	andl	$0xff00, %edx
    000002d8: 	orq	%rdx, %r10
    000002db: 	movq	%rsi, %rdx
    000002de: 	andq	%r13, %rdx
    000002e1: 	orq	%rdx, %r10
    000002e4: 	movq	%rcx, %rdx
    000002e7: 	shrq	$0x18, %rdx
    000002eb: 	andl	$0xff0000, %edx
    000002f1: 	orq	%rdx, %r10
    000002f4: 	movq	%rsi, %rdx
    000002f7: 	shrq	$0x10, %rdx
    000002fb: 	andl	$0xff000000, %edx
    00000301: 	orq	%r10, %rdx
    00000304: 	movq	%rcx, %r10
    00000307: 	shrq	$0x10, %r10
    0000030b: 	andq	%r15, %r10
    0000030e: 	movq	%rsi, %r15
    00000311: 	orq	%r10, %rdx
    00000314: 	shrq	$0x8, %r15
    00000318: 	shlq	$0x20, %rsi
    0000031c: 	andq	%r15, %r14
    0000031f: 	shrq	$0x8, %rcx
    00000323: 	orq	%r14, %rdx
    00000326: 	shll	$0x4, %ebp
    00000329: 	andq	%r13, %rsi
    0000032c: 	andq	%rbx, %rcx
    0000032f: 	movslq	%ebp, %r10
    00000332: 	orq	%r12, %rsi
    00000335: 	orq	%rcx, %rdx
    00000338: 	movq	%rsi, (%rax,%r10)
    0000033c: 	movq	%rdx, 0x8(%rax,%r10)
.Ltmp44:
    00000341: 	shll	$0x3, %r9d
.Ltmp47:
    00000345: 	cmpl	%r9d, %r11d
    00000348: 	jle	.Ltmp45 # Offset: 840
    0000034e: 	movslq	%r9d, %rsi
    00000351: 	leal	(%r9,%r9), %edx
    00000355: 	movzbl	(%r8,%rsi), %r10d
    0000035a: 	movslq	%edx, %rcx
    0000035d: 	movb	%r10b, (%rax,%rcx)
    00000361: 	movzbl	(%rdi,%rsi), %esi
    00000365: 	movb	%sil, 0x1(%rax,%rcx)
    0000036a: 	leal	0x1(%r9), %ecx
    0000036e: 	cmpl	%r11d, %ecx
    00000371: 	jge	.Ltmp45 # Offset: 881
    00000377: 	movslq	%ecx, %rcx
    0000037a: 	leal	0x2(%rdx), %esi
    0000037d: 	movzbl	(%r8,%rcx), %r10d
    00000382: 	movslq	%esi, %rsi
    00000385: 	movb	%r10b, (%rax,%rsi)
    00000389: 	movzbl	(%rdi,%rcx), %ecx
    0000038d: 	movb	%cl, 0x1(%rax,%rsi)
    00000391: 	leal	0x2(%r9), %ecx
    00000395: 	cmpl	%ecx, %r11d
    00000398: 	jle	.Ltmp45 # Offset: 920
    0000039e: 	movslq	%ecx, %rcx
    000003a1: 	leal	0x4(%rdx), %esi
    000003a4: 	movzbl	(%r8,%rcx), %r10d
    000003a9: 	movslq	%esi, %rsi
    000003ac: 	movb	%r10b, (%rax,%rsi)
    000003b0: 	movzbl	(%rdi,%rcx), %ecx
    000003b4: 	movb	%cl, 0x1(%rax,%rsi)
    000003b8: 	leal	0x3(%r9), %ecx
    000003bc: 	cmpl	%ecx, %r11d
    000003bf: 	jle	.Ltmp45 # Offset: 959
    000003c5: 	movslq	%ecx, %rcx
    000003c8: 	leal	0x6(%rdx), %esi
    000003cb: 	movzbl	(%r8,%rcx), %r10d
    000003d0: 	movslq	%esi, %rsi
    000003d3: 	movb	%r10b, (%rax,%rsi)
    000003d7: 	movzbl	(%rdi,%rcx), %ecx
    000003db: 	movb	%cl, 0x1(%rax,%rsi)
    000003df: 	leal	0x4(%r9), %ecx
    000003e3: 	cmpl	%ecx, %r11d
    000003e6: 	jle	.Ltmp45 # Offset: 998
    000003ec: 	movslq	%ecx, %rcx
    000003ef: 	leal	0x8(%rdx), %esi
    000003f2: 	movzbl	(%r8,%rcx), %r10d
    000003f7: 	movslq	%esi, %rsi
    000003fa: 	movb	%r10b, (%rax,%rsi)
    000003fe: 	movzbl	(%rdi,%rcx), %ecx
    00000402: 	movb	%cl, 0x1(%rax,%rsi)
    00000406: 	leal	0x5(%r9), %ecx
    0000040a: 	cmpl	%ecx, %r11d
    0000040d: 	jle	.Ltmp45 # Offset: 1037
    0000040f: 	movslq	%ecx, %rcx
    00000412: 	leal	0xa(%rdx), %esi
    00000415: 	movzbl	(%r8,%rcx), %r10d
    0000041a: 	movslq	%esi, %rsi
    0000041d: 	movb	%r10b, (%rax,%rsi)
    00000421: 	movzbl	(%rdi,%rcx), %ecx
    00000425: 	movb	%cl, 0x1(%rax,%rsi)
    00000429: 	leal	0x6(%r9), %ecx
    0000042d: 	cmpl	%ecx, %r11d
    00000430: 	jle	.Ltmp45 # Offset: 1072
    00000432: 	movslq	%ecx, %rcx
    00000435: 	leal	0xc(%rdx), %esi
    00000438: 	addl	$0x7, %r9d
    0000043c: 	movzbl	(%r8,%rcx), %r10d
    00000441: 	movslq	%esi, %rsi
    00000444: 	movb	%r10b, (%rax,%rsi)
    00000448: 	movzbl	(%rdi,%rcx), %ecx
    0000044c: 	movb	%cl, 0x1(%rax,%rsi)
    00000450: 	cmpl	%r9d, %r11d
    00000453: 	jle	.Ltmp45 # Offset: 1107
    00000455: 	movslq	%r9d, %r9
    00000458: 	addl	$0xe, %edx
    0000045b: 	movzbl	(%r8,%r9), %ecx
    00000460: 	movslq	%edx, %rdx
    00000463: 	movb	%cl, (%rax,%rdx)
    00000466: 	movzbl	(%rdi,%r9), %ecx
    0000046b: 	movb	%cl, 0x1(%rax,%rdx)
.Ltmp45:
    0000046f: 	popq	%rbx
    00000470: 	popq	%rbp
    00000471: 	popq	%r12
    00000473: 	popq	%r13
    00000475: 	popq	%r14
    00000477: 	popq	%r15
    00000479: 	retq # Offset: 1145
    0000047a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp42:
    00000480: 	movabsq	$0xff00000000, %r14
    0000048a: 	xorl	%r10d, %r10d
    0000048d: 	movabsq	$0xff0000000000, %r13
    00000497: 	movabsq	$0xff000000000000, %r12
    000004a1: 	nopl	(%rax) # Size: 7
.Ltmp46:
    000004a8: 	movq	(%r8,%r10), %rcx
    000004ac: 	movq	(%rdi,%r10), %rsi
    000004b0: 	movq	%rcx, %rbx
    000004b3: 	movq	%rsi, %r15
    000004b6: 	movzbl	%cl, %edx
    000004b9: 	shlq	$0x8, %rbx
    000004bd: 	shlq	$0x8, %r15
    000004c1: 	andl	$0xff0000, %ebx
    000004c7: 	movzwl	%r15w, %r15d
    000004cb: 	orq	%r15, %rbx
    000004ce: 	movq	%rcx, %r15
    000004d1: 	orq	%rdx, %rbx
    000004d4: 	movq	%rsi, %rdx
    000004d7: 	shrq	$0x20, %r15
    000004db: 	shlq	$0x10, %rdx
    000004df: 	movzbl	%r15b, %r15d
    000004e3: 	andl	$0xff000000, %edx
    000004e9: 	orq	%rbx, %rdx
    000004ec: 	movq	%rcx, %rbx
    000004ef: 	shlq	$0x10, %rbx
    000004f3: 	andq	%r14, %rbx
    000004f6: 	orq	%rdx, %rbx
    000004f9: 	movq	%rsi, %rdx
    000004fc: 	shlq	$0x18, %rdx
    00000500: 	andq	%r13, %rdx
    00000503: 	orq	%rbx, %rdx
    00000506: 	movq	%rcx, %rbx
    00000509: 	shlq	$0x18, %rbx
    0000050d: 	andq	%r12, %rbx
    00000510: 	orq	%rdx, %rbx
    00000513: 	movq	%rsi, %rdx
    00000516: 	shrq	$0x18, %rdx
    0000051a: 	andl	$0xff00, %edx
    00000520: 	orq	%r15, %rdx
    00000523: 	movabsq	$-0x100000000000000, %r15
    0000052d: 	andq	%rsi, %r15
    00000530: 	orq	%r15, %rdx
    00000533: 	movq	%rcx, %r15
    00000536: 	shrq	$0x18, %r15
    0000053a: 	andl	$0xff0000, %r15d
    00000541: 	orq	%r15, %rdx
    00000544: 	movq	%rsi, %r15
    00000547: 	shrq	$0x10, %r15
    0000054b: 	andl	$0xff000000, %r15d
    00000552: 	orq	%r15, %rdx
    00000555: 	movq	%rcx, %r15
    00000558: 	shrq	$0x10, %r15
    0000055c: 	andq	%r14, %r15
    0000055f: 	orq	%r15, %rdx
    00000562: 	movq	%rsi, %r15
    00000565: 	shrq	$0x8, %r15
    00000569: 	shlq	$0x20, %rsi
    0000056d: 	andq	%r13, %r15
    00000570: 	shrq	$0x8, %rcx
    00000574: 	orq	%r15, %rdx
    00000577: 	andq	%r12, %rcx
    0000057a: 	movabsq	$-0x100000000000000, %r15
    00000584: 	andq	%r15, %rsi
    00000587: 	orq	%rdx, %rcx
    0000058a: 	orq	%rbx, %rsi
    0000058d: 	movq	%rcx, 0x8(%rax,%r10,2)
    00000592: 	movq	%rsi, (%rax,%r10,2)
    00000596: 	addq	$0x8, %r10
    0000059a: 	cmpl	%r10d, %ebp
    0000059d: 	jg	.Ltmp46 # Offset: 1437
    000005a3: 	jmp	.Ltmp44 # Offset: 1443
    000005a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp41:
    000005b0: 	xorl	%r9d, %r9d
    000005b3: 	jmp	.Ltmp47 # Offset: 1459
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version8IhEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version8ItEvPT_PKS0_S3_i" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x2500
  Size        : 0x418
  MaxSize     : 0x420
  Offset      : 0x2500
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version8ItEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r9
    00000007: 	leal	-0x3(%rcx), %esi
    0000000a: 	pushq	%r15
    0000000c: 	movq	%rdx, %r8
    0000000f: 	pushq	%r14
    00000011: 	movl	%ecx, %r11d
    00000014: 	pushq	%r13
    00000016: 	pushq	%r12
    00000018: 	pushq	%rbp
    00000019: 	pushq	%rbx
    0000001a: 	testl	%esi, %esi
    0000001c: 	jle	.Ltmp48 # Offset: 28
    00000022: 	leal	-0x4(%rcx), %ebx
    00000025: 	movl	%ebx, %r10d
    00000028: 	shrl	$0x2, %r10d
    0000002c: 	leal	0x1(%r10), %eax
    00000030: 	leaq	(,%rax,8), %rdx
    00000038: 	movq	%rax, %r10
    0000003b: 	shlq	$0x4, %rax
    0000003f: 	leaq	(%r9,%rdx), %rcx
    00000043: 	addq	%rdi, %rax
    00000046: 	cmpq	%rcx, %rdi
    00000049: 	setae	%cl
    0000004c: 	cmpq	%rax, %r9
    0000004f: 	setae	%bpl
    00000053: 	addq	%r8, %rdx
    00000056: 	orl	%ebp, %ecx
    00000058: 	cmpq	%rdx, %rdi
    0000005b: 	setae	%dl
    0000005e: 	cmpq	%rax, %r8
    00000061: 	setae	%al
    00000064: 	orl	%edx, %eax
    00000066: 	testb	%al, %cl
    00000068: 	je	.Ltmp49 # Offset: 104
    0000006e: 	cmpl	$0x7, %ebx
    00000071: 	jbe	.Ltmp49 # Offset: 113
    00000077: 	movl	%r10d, %edx
    0000007a: 	movdqa	DATAat0x374e0(%rip), %xmm6
    00000082: 	movdqa	DATAat0x374d0(%rip), %xmm8
    0000008b: 	xorl	%eax, %eax
    0000008d: 	shrl	%edx
    0000008f: 	movdqa	DATAat0x374f0(%rip), %xmm5
    00000097: 	movdqa	DATAat0x37460(%rip), %xmm4
    0000009f: 	movdqa	DATAat0x37500(%rip), %xmm7
    000000a7: 	shlq	$0x4, %rdx
    000000ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp50:
    000000b0: 	movdqu	(%r9,%rax), %xmm1
    000000b6: 	movdqu	(%r8,%rax), %xmm3
    000000bc: 	movdqa	%xmm1, %xmm2
    000000c0: 	movdqa	%xmm3, %xmm0
    000000c4: 	movdqa	%xmm1, %xmm9
    000000c9: 	psllq	$0x10, %xmm0
    000000ce: 	psllq	$0x10, %xmm2
    000000d3: 	pand	%xmm4, %xmm9
    000000d8: 	pand	%xmm6, %xmm2
    000000dc: 	pand	%xmm8, %xmm0
    000000e1: 	por	%xmm2, %xmm0
    000000e5: 	movdqa	%xmm3, %xmm2
    000000e9: 	psllq	$0x20, %xmm2
    000000ee: 	pand	%xmm5, %xmm2
    000000f2: 	por	%xmm9, %xmm2
    000000f7: 	movdqa	%xmm3, %xmm9
    000000fc: 	pand	%xmm5, %xmm3
    00000100: 	por	%xmm2, %xmm0
    00000104: 	psrlq	$0x10, %xmm9
    0000010a: 	movdqa	%xmm1, %xmm2
    0000010e: 	psrlq	$0x20, %xmm2
    00000113: 	psrlq	$0x10, %xmm1
    00000118: 	pand	%xmm7, %xmm9
    0000011d: 	pand	%xmm4, %xmm2
    00000121: 	pand	%xmm6, %xmm1
    00000125: 	por	%xmm9, %xmm2
    0000012a: 	por	%xmm3, %xmm1
    0000012e: 	por	%xmm2, %xmm1
    00000132: 	movdqa	%xmm0, %xmm2
    00000136: 	punpcklqdq	%xmm1, %xmm2
    0000013a: 	punpckhqdq	%xmm1, %xmm0
    0000013e: 	movups	%xmm2, (%rdi,%rax,2)
    00000142: 	movups	%xmm0, 0x10(%rdi,%rax,2)
    00000147: 	addq	$0x10, %rax
    0000014b: 	cmpq	%rdx, %rax
    0000014e: 	jne	.Ltmp50 # Offset: 334
    00000154: 	movl	%r10d, %eax
    00000157: 	andl	$-0x2, %eax
    0000015a: 	leal	(,%rax,4), %esi
    00000161: 	cmpl	%eax, %r10d
    00000164: 	je	.Ltmp51 # Offset: 356
    00000166: 	movabsq	$0xffff00000000, %rbp
    00000170: 	movslq	%esi, %rsi
    00000173: 	movq	(%r9,%rsi,2), %rax
    00000177: 	movq	(%r8,%rsi,2), %rdx
    0000017b: 	movq	%rax, %rcx
    0000017e: 	movq	%rdx, %rbx
    00000181: 	movzwl	%ax, %r12d
    00000185: 	movq	%rdx, %r13
    00000188: 	shlq	$0x10, %rbx
    0000018c: 	shlq	$0x10, %rcx
    00000190: 	andq	%rbp, %rcx
    00000193: 	movl	%ebx, %ebx
    00000195: 	orq	%rcx, %rbx
    00000198: 	movq	%rax, %rcx
    0000019b: 	shrq	$0x10, %rax
    0000019f: 	orq	%r12, %rbx
    000001a2: 	movq	%rdx, %r12
    000001a5: 	shrq	$0x20, %rcx
    000001a9: 	andq	%rbp, %rax
    000001ac: 	shrq	$0x10, %r12
    000001b0: 	movzwl	%cx, %ecx
    000001b3: 	shlq	$0x20, %rdx
    000001b7: 	andl	$0xffff0000, %r12d
    000001be: 	orq	%r12, %rcx
    000001c1: 	movabsq	$-0x1000000000000, %r12
    000001cb: 	andq	%r12, %r13
    000001ce: 	andq	%r12, %rdx
    000001d1: 	orq	%r13, %rcx
    000001d4: 	orq	%rbx, %rdx
    000001d7: 	orq	%rcx, %rax
    000001da: 	movq	%rdx, (%rdi,%rsi,4)
    000001de: 	movq	%rax, 0x8(%rdi,%rsi,4)
.Ltmp51:
    000001e3: 	shll	$0x2, %r10d
.Ltmp55:
    000001e7: 	cmpl	%r10d, %r11d
    000001ea: 	jle	.Ltmp52 # Offset: 490
    000001f0: 	movl	%r11d, %ebx
    000001f3: 	movslq	%r10d, %rax
    000001f6: 	subl	%r10d, %ebx
    000001f9: 	leaq	(,%rax,4), %rbp
    00000201: 	movl	%ebx, %ecx
    00000203: 	leaq	(%rdi,%rbp), %rsi
    00000207: 	addq	%rax, %rcx
    0000020a: 	addq	%rax, %rax
    0000020d: 	leaq	(%rcx,%rcx), %rdx
    00000211: 	leaq	(%rdi,%rcx,4), %r13
    00000215: 	leaq	(%r8,%rdx), %rcx
    00000219: 	leaq	(%r8,%rax), %r12
    0000021d: 	cmpq	%rcx, %rsi
    00000220: 	leaq	(%r9,%rax), %r14
    00000224: 	setae	%cl
    00000227: 	cmpq	%r13, %r12
    0000022a: 	setae	%r15b
    0000022e: 	addq	%r9, %rdx
    00000231: 	orl	%r15d, %ecx
    00000234: 	cmpq	%rdx, %rsi
    00000237: 	setae	%dl
    0000023a: 	cmpq	%r13, %r14
    0000023d: 	setae	%r13b
    00000241: 	orl	%r13d, %edx
    00000244: 	testb	%dl, %cl
    00000246: 	je	.Ltmp53 # Offset: 582
    0000024c: 	leal	-0x1(%rbx), %edx
    0000024f: 	cmpl	$0x2, %edx
    00000252: 	jbe	.Ltmp53 # Offset: 594
    00000258: 	movq	(%r14), %xmm0
    0000025d: 	movq	(%r12), %xmm1
    00000263: 	movl	%ebx, %eax
    00000265: 	andl	$-0x4, %eax
    00000268: 	movdqa	%xmm0, %xmm2
    0000026c: 	punpcklwd	%xmm1, %xmm0
    00000270: 	addl	%eax, %r10d
    00000273: 	punpcklwd	%xmm1, %xmm2
    00000277: 	pshufd	$0xe, %xmm0, %xmm0
    0000027c: 	movq	%xmm2, (%rsi)
    00000280: 	movq	%xmm0, 0x8(%rsi)
    00000285: 	cmpl	%eax, %ebx
    00000287: 	je	.Ltmp52 # Offset: 647
    00000289: 	movslq	%r10d, %rax
    0000028c: 	movzwl	(%r9,%rax,2), %edx
    00000291: 	movw	%dx, (%rdi,%rax,4)
    00000295: 	movzwl	(%r8,%rax,2), %edx
    0000029a: 	movw	%dx, 0x2(%rdi,%rax,4)
    0000029f: 	leal	0x1(%r10), %eax
    000002a3: 	cmpl	%eax, %r11d
    000002a6: 	jle	.Ltmp52 # Offset: 678
    000002a8: 	cltq
    000002aa: 	addl	$0x2, %r10d
    000002ae: 	movzwl	(%r9,%rax,2), %ecx
    000002b3: 	leaq	(%rax,%rax), %rdx
    000002b7: 	leaq	(,%rax,4), %rsi
    000002bf: 	movw	%cx, (%rdi,%rax,4)
    000002c3: 	movzwl	(%r8,%rax,2), %eax
    000002c8: 	movw	%ax, 0x2(%rdi,%rdx,2)
    000002cd: 	cmpl	%r10d, %r11d
    000002d0: 	jle	.Ltmp52 # Offset: 720
    000002d2: 	movzwl	0x2(%r9,%rdx), %eax
    000002d8: 	movw	%ax, 0x4(%rdi,%rsi)
    000002dd: 	movzwl	0x2(%r8,%rdx), %eax
    000002e3: 	movw	%ax, 0x6(%rdi,%rdx,2)
.Ltmp52:
    000002e8: 	popq	%rbx
    000002e9: 	popq	%rbp
    000002ea: 	popq	%r12
    000002ec: 	popq	%r13
    000002ee: 	popq	%r14
    000002f0: 	popq	%r15
    000002f2: 	retq # Offset: 754
    000002f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp49:
    000002f8: 	movabsq	$0xffff00000000, %rbp
    00000302: 	xorl	%ecx, %ecx
    00000304: 	movabsq	$-0x1000000000000, %rbx
    0000030e: 	nop # Size: 2
.Ltmp54:
    00000310: 	movq	(%r9,%rcx,2), %rax
    00000314: 	movq	(%r8,%rcx,2), %rdx
    00000318: 	movq	%rax, %r14
    0000031b: 	movq	%rdx, %r13
    0000031e: 	movzwl	%ax, %r12d
    00000322: 	shlq	$0x10, %r13
    00000326: 	shlq	$0x10, %r14
    0000032a: 	andq	%rbp, %r14
    0000032d: 	movl	%r13d, %r13d
    00000330: 	orq	%r14, %r13
    00000333: 	movq	%rdx, %r14
    00000336: 	orq	%r12, %r13
    00000339: 	movq	%rax, %r12
    0000033c: 	shrq	$0x10, %r14
    00000340: 	shrq	$0x20, %r12
    00000344: 	andl	$0xffff0000, %r14d
    0000034b: 	shrq	$0x10, %rax
    0000034f: 	movzwl	%r12w, %r12d
    00000353: 	andq	%rbp, %rax
    00000356: 	orq	%r14, %r12
    00000359: 	movq	%rdx, %r14
    0000035c: 	shlq	$0x20, %rdx
    00000360: 	andq	%rbx, %r14
    00000363: 	andq	%rbx, %rdx
    00000366: 	orq	%r14, %r12
    00000369: 	orq	%r13, %rdx
    0000036c: 	orq	%r12, %rax
    0000036f: 	movq	%rdx, (%rdi,%rcx,4)
    00000373: 	movq	%rax, 0x8(%rdi,%rcx,4)
    00000378: 	addq	$0x4, %rcx
    0000037c: 	cmpl	%ecx, %esi
    0000037e: 	jg	.Ltmp54 # Offset: 894
    00000380: 	jmp	.Ltmp51 # Offset: 896
    00000385: 	nopl	(%rax) # Size: 3
.Ltmp53:
    00000388: 	movzwl	(%r14), %edx
    0000038c: 	movw	%dx, (%rsi)
    0000038f: 	movzwl	(%r12), %edx
    00000394: 	movw	%dx, 0x2(%rdi,%rax,2)
    00000399: 	leal	0x1(%r10), %edx
    0000039d: 	cmpl	%r11d, %edx
    000003a0: 	jge	.Ltmp52 # Offset: 928
    000003a6: 	movzwl	0x2(%r9,%rax), %edx
    000003ac: 	movw	%dx, 0x4(%rdi,%rbp)
    000003b1: 	movzwl	0x2(%r8,%rax), %edx
    000003b7: 	movw	%dx, 0x6(%rdi,%rax,2)
    000003bc: 	leal	0x2(%r10), %edx
    000003c0: 	cmpl	%r11d, %edx
    000003c3: 	jge	.Ltmp52 # Offset: 963
    000003c9: 	movzwl	0x4(%r9,%rax), %edx
    000003cf: 	movw	%dx, 0x8(%rdi,%rbp)
    000003d4: 	movzwl	0x4(%r8,%rax), %edx
    000003da: 	movw	%dx, 0xa(%rdi,%rax,2)
    000003df: 	leal	0x3(%r10), %edx
    000003e3: 	cmpl	%edx, %r11d
    000003e6: 	jle	.Ltmp52 # Offset: 998
    000003ec: 	movzwl	0x6(%r9,%rax), %edx
    000003f2: 	movw	%dx, 0xc(%rdi,%rbp)
    000003f7: 	movzwl	0x6(%r8,%rax), %edx
    000003fd: 	movw	%dx, 0xe(%rdi,%rax,2)
    00000402: 	jmp	.Ltmp52 # Offset: 1026
    00000407: 	nopw	(%rax,%rax) # Size: 9
.Ltmp48:
    00000410: 	xorl	%r10d, %r10d
    00000413: 	jmp	.Ltmp55 # Offset: 1043
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version8ItEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version8IjEvPT_PKS0_S3_i" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x2920
  Size        : 0x41e
  MaxSize     : 0x420
  Offset      : 0x2920
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version8IjEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %rax
    00000009: 	movl	%ecx, %edi
    0000000b: 	pushq	%r14
    0000000d: 	pushq	%r13
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	leal	-0x3(%rcx), %ebx
    00000016: 	testl	%ebx, %ebx
    00000018: 	jle	.Ltmp56 # Offset: 24
    0000001e: 	leal	-0x4(%rcx), %r11d
    00000022: 	movl	%r11d, %ecx
    00000025: 	shrl	$0x2, %ecx
    00000028: 	leal	0x1(%rcx), %r8d
    0000002c: 	movq	%r8, %r9
    0000002f: 	movq	%r8, %rcx
    00000032: 	shlq	$0x5, %r8
    00000036: 	shlq	$0x4, %r9
    0000003a: 	addq	%rax, %r8
    0000003d: 	leaq	(%rsi,%r9), %r10
    00000041: 	cmpq	%r10, %rax
    00000044: 	setae	%r10b
    00000048: 	cmpq	%r8, %rsi
    0000004b: 	setae	%bpl
    0000004f: 	addq	%rdx, %r9
    00000052: 	orl	%ebp, %r10d
    00000055: 	cmpq	%r9, %rax
    00000058: 	setae	%r9b
    0000005c: 	cmpq	%r8, %rdx
    0000005f: 	setae	%r8b
    00000063: 	orl	%r9d, %r8d
    00000066: 	testb	%r8b, %r10b
    00000069: 	je	.Ltmp57 # Offset: 105
    0000006f: 	cmpl	$0x7, %r11d
    00000073: 	jbe	.Ltmp57 # Offset: 115
    00000079: 	movl	%ecx, %r9d
    0000007c: 	movdqa	DATAat0x374d0(%rip), %xmm5
    00000084: 	movdqa	DATAat0x37510(%rip), %xmm4
    0000008c: 	xorl	%r8d, %r8d
    0000008f: 	shrl	%r9d
    00000092: 	shlq	$0x5, %r9
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp58:
    000000a0: 	movdqu	(%rsi,%r8), %xmm1
    000000a6: 	movdqu	(%rdx,%r8), %xmm3
    000000ac: 	movdqu	0x10(%rsi,%r8), %xmm7
    000000b3: 	movdqu	0x10(%rdx,%r8), %xmm2
    000000ba: 	movdqa	%xmm1, %xmm0
    000000be: 	movdqa	%xmm3, %xmm6
    000000c2: 	punpcklqdq	%xmm7, %xmm0
    000000c6: 	punpcklqdq	%xmm2, %xmm6
    000000ca: 	punpckhqdq	%xmm7, %xmm1
    000000ce: 	punpckhqdq	%xmm2, %xmm3
    000000d2: 	movdqa	%xmm6, %xmm7
    000000d6: 	movdqa	%xmm0, %xmm2
    000000da: 	psllq	$0x20, %xmm7
    000000df: 	pand	%xmm4, %xmm6
    000000e3: 	pand	%xmm5, %xmm2
    000000e7: 	psrlq	$0x20, %xmm0
    000000ec: 	por	%xmm7, %xmm2
    000000f0: 	movdqa	%xmm3, %xmm7
    000000f4: 	por	%xmm6, %xmm0
    000000f8: 	movdqa	%xmm1, %xmm6
    000000fc: 	pand	%xmm4, %xmm3
    00000100: 	psllq	$0x20, %xmm7
    00000105: 	psrlq	$0x20, %xmm1
    0000010a: 	pand	%xmm5, %xmm6
    0000010e: 	por	%xmm3, %xmm1
    00000112: 	por	%xmm7, %xmm6
    00000116: 	movdqa	%xmm2, %xmm3
    0000011a: 	punpcklqdq	%xmm6, %xmm3
    0000011e: 	punpckhqdq	%xmm6, %xmm2
    00000122: 	movdqa	%xmm0, %xmm6
    00000126: 	punpcklqdq	%xmm1, %xmm6
    0000012a: 	punpckhqdq	%xmm1, %xmm0
    0000012e: 	movdqa	%xmm3, %xmm1
    00000132: 	punpcklqdq	%xmm6, %xmm1
    00000136: 	punpckhqdq	%xmm6, %xmm3
    0000013a: 	movups	%xmm1, (%rax,%r8,2)
    0000013f: 	movdqa	%xmm2, %xmm1
    00000143: 	punpckhqdq	%xmm0, %xmm2
    00000147: 	punpcklqdq	%xmm0, %xmm1
    0000014b: 	movups	%xmm3, 0x10(%rax,%r8,2)
    00000151: 	movups	%xmm1, 0x20(%rax,%r8,2)
    00000157: 	movups	%xmm2, 0x30(%rax,%r8,2)
    0000015d: 	addq	$0x20, %r8
    00000161: 	cmpq	%r8, %r9
    00000164: 	jne	.Ltmp58 # Offset: 356
    0000016a: 	movl	%ecx, %r8d
    0000016d: 	andl	$-0x2, %r8d
    00000171: 	leal	(,%r8,4), %r9d
    00000179: 	cmpl	%r8d, %ecx
    0000017c: 	je	.Ltmp59 # Offset: 380
    0000017e: 	movslq	%r9d, %r9
    00000181: 	shll	$0x3, %r8d
    00000185: 	movq	(%rdx,%r9,4), %r10
    00000189: 	movq	(%rsi,%r9,4), %rbx
    0000018d: 	addq	$0x2, %r9
    00000191: 	movslq	%r8d, %r8
    00000194: 	movq	(%rsi,%r9,4), %r11
    00000198: 	movq	(%rdx,%r9,4), %r9
    0000019c: 	movq	%r10, %r12
    0000019f: 	movl	%ebx, %r13d
    000001a2: 	shrq	$0x20, %rbx
    000001a6: 	shlq	$0x20, %r12
    000001aa: 	movl	%r11d, %ebp
    000001ad: 	shrq	$0x20, %r11
    000001b1: 	orq	%r13, %r12
    000001b4: 	movabsq	$-0x100000000, %r13
    000001be: 	andq	%r13, %r10
    000001c1: 	movq	%r12, (%rax,%r8,4)
    000001c5: 	addq	$0x2, %r8
    000001c9: 	orq	%rbx, %r10
    000001cc: 	leaq	(,%r8,4), %r12
    000001d4: 	movq	%r10, (%rax,%r8,4)
    000001d8: 	movq	%r9, %r8
    000001db: 	andq	%r13, %r9
    000001de: 	shlq	$0x20, %r8
    000001e2: 	orq	%r11, %r9
    000001e5: 	orq	%rbp, %r8
    000001e8: 	movq	%r9, 0x10(%rax,%r12)
    000001ed: 	movq	%r8, 0x8(%rax,%r12)
.Ltmp59:
    000001f2: 	shll	$0x2, %ecx
.Ltmp65:
    000001f5: 	cmpl	%ecx, %edi
    000001f7: 	jle	.Ltmp60 # Offset: 503
    000001fd: 	movl	%edi, %r8d
    00000200: 	movslq	%ecx, %r9
    00000203: 	subl	%ecx, %r8d
    00000206: 	leaq	(,%r9,8), %r15
    0000020e: 	leaq	(,%r9,4), %rbp
    00000216: 	movl	%r8d, %ebx
    00000219: 	leaq	(%rax,%r15), %r11
    0000021d: 	leaq	(%rdx,%rbp), %r13
    00000221: 	addq	%r9, %rbx
    00000224: 	leaq	(%rsi,%rbp), %r14
    00000228: 	leaq	(,%rbx,4), %r10
    00000230: 	leaq	(%rax,%rbx,8), %r12
    00000234: 	leaq	(%rdx,%r10), %rbx
    00000238: 	cmpq	%rbx, %r11
    0000023b: 	setae	%bl
    0000023e: 	cmpq	%r12, %r13
    00000241: 	setae	-0x9(%rsp)
    00000246: 	addq	%rsi, %r10
    00000249: 	orb	-0x9(%rsp), %bl
    0000024d: 	cmpq	%r10, %r11
    00000250: 	setae	%r10b
    00000254: 	cmpq	%r12, %r14
    00000257: 	setae	%r12b
    0000025b: 	orl	%r12d, %r10d
    0000025e: 	testb	%r10b, %bl
    00000261: 	je	.Ltmp61 # Offset: 609
    00000267: 	cmpl	$0x1, %r8d
    0000026b: 	je	.Ltmp61 # Offset: 619
    00000271: 	leal	-0x1(%r8), %edi
    00000275: 	cmpl	$0x2, %edi
    00000278: 	jbe	.Ltmp62 # Offset: 632
    0000027e: 	movdqu	(%r14), %xmm0
    00000283: 	movdqu	(%r13), %xmm1
    00000289: 	movl	%r8d, %edi
    0000028c: 	andl	$-0x4, %edi
    0000028f: 	movdqa	%xmm0, %xmm2
    00000293: 	punpckhdq	%xmm1, %xmm0
    00000297: 	addl	%edi, %ecx
    00000299: 	punpckldq	%xmm1, %xmm2
    0000029d: 	movups	%xmm0, 0x10(%r11)
    000002a2: 	movups	%xmm2, (%r11)
    000002a6: 	cmpl	%edi, %r8d
    000002a9: 	je	.Ltmp60 # Offset: 681
    000002ab: 	subl	%edi, %r8d
    000002ae: 	cmpl	$0x1, %r8d
    000002b2: 	je	.Ltmp63 # Offset: 690
.Ltmp66:
    000002b4: 	addq	%r9, %rdi
    000002b7: 	movq	(%rsi,%rdi,4), %xmm0
    000002bc: 	movq	(%rdx,%rdi,4), %xmm1
    000002c1: 	leaq	(%rax,%rdi,8), %r9
    000002c5: 	movl	%r8d, %edi
    000002c8: 	andl	$-0x2, %edi
    000002cb: 	movdqa	%xmm0, %xmm2
    000002cf: 	punpckldq	%xmm1, %xmm0
    000002d3: 	addl	%edi, %ecx
    000002d5: 	punpckldq	%xmm1, %xmm2
    000002d9: 	pshufd	$0xe, %xmm0, %xmm0
    000002de: 	movq	%xmm2, (%r9)
    000002e3: 	movq	%xmm0, 0x8(%r9)
    000002e9: 	cmpl	%r8d, %edi
    000002ec: 	je	.Ltmp60 # Offset: 748
.Ltmp63:
    000002ee: 	movslq	%ecx, %rdi
    000002f1: 	addl	%ecx, %ecx
    000002f3: 	movl	(%rsi,%rdi,4), %esi
    000002f6: 	movslq	%ecx, %rcx
    000002f9: 	movl	%esi, (%rax,%rcx,4)
    000002fc: 	movl	(%rdx,%rdi,4), %edx
    000002ff: 	movl	%edx, 0x4(%rax,%rcx,4)
.Ltmp60:
    00000303: 	popq	%rbx
    00000304: 	popq	%rbp
    00000305: 	popq	%r12
    00000307: 	popq	%r13
    00000309: 	popq	%r14
    0000030b: 	popq	%r15
    0000030d: 	retq # Offset: 781
    0000030e: 	nop # Size: 2
.Ltmp57:
    00000310: 	movabsq	$-0x100000000, %rbp
    0000031a: 	xorl	%r8d, %r8d
    0000031d: 	nopl	(%rax) # Size: 3
.Ltmp64:
    00000320: 	movq	(%rsi,%r8,4), %r12
    00000324: 	movq	(%rdx,%r8,4), %r10
    00000328: 	movq	0x8(%rdx,%r8,4), %r9
    0000032d: 	movq	0x8(%rsi,%r8,4), %r11
    00000332: 	movl	%r12d, %r15d
    00000335: 	movq	%r10, %r14
    00000338: 	shrq	$0x20, %r12
    0000033c: 	andq	%rbp, %r10
    0000033f: 	orq	%r12, %r10
    00000342: 	movl	%r11d, %r13d
    00000345: 	shlq	$0x20, %r14
    00000349: 	movq	%r10, 0x8(%rax,%r8,8)
    0000034e: 	movq	%r9, %r10
    00000351: 	shrq	$0x20, %r11
    00000355: 	andq	%rbp, %r9
    00000358: 	shlq	$0x20, %r10
    0000035c: 	orq	%r15, %r14
    0000035f: 	orq	%r11, %r9
    00000362: 	orq	%r13, %r10
    00000365: 	movq	%r14, (%rax,%r8,8)
    00000369: 	movq	%r10, 0x10(%rax,%r8,8)
    0000036e: 	movq	%r9, 0x18(%rax,%r8,8)
    00000373: 	addq	$0x4, %r8
    00000377: 	cmpl	%r8d, %ebx
    0000037a: 	jg	.Ltmp64 # Offset: 890
    0000037c: 	jmp	.Ltmp59 # Offset: 892
    00000381: 	nopl	(%rax) # Size: 7
.Ltmp61:
    00000388: 	movl	(%r14), %r9d
    0000038b: 	leal	(%rcx,%rcx), %r8d
    0000038f: 	movl	%r9d, (%r11)
    00000392: 	movl	(%r13), %r10d
    00000396: 	movslq	%r8d, %r9
    00000399: 	movl	%r10d, 0x4(%rax,%r9,4)
    0000039e: 	leal	0x1(%rcx), %r9d
    000003a2: 	cmpl	%edi, %r9d
    000003a5: 	jge	.Ltmp60 # Offset: 933
    000003ab: 	movl	0x4(%rsi,%rbp), %r9d
    000003b0: 	movl	%r9d, 0x8(%rax,%r15)
    000003b5: 	leal	0x2(%r8), %r9d
    000003b9: 	movl	0x4(%rdx,%rbp), %r10d
    000003be: 	movslq	%r9d, %r9
    000003c1: 	movl	%r10d, 0x4(%rax,%r9,4)
    000003c6: 	leal	0x2(%rcx), %r9d
    000003ca: 	cmpl	%edi, %r9d
    000003cd: 	jge	.Ltmp60 # Offset: 973
    000003d3: 	movl	0x8(%rsi,%rbp), %r9d
    000003d8: 	addl	$0x4, %r8d
    000003dc: 	addl	$0x3, %ecx
    000003df: 	movslq	%r8d, %r8
    000003e2: 	movl	%r9d, 0x10(%rax,%r15)
    000003e7: 	movl	0x8(%rdx,%rbp), %r9d
    000003ec: 	movl	%r9d, 0x4(%rax,%r8,4)
    000003f1: 	cmpl	%edi, %ecx
    000003f3: 	jge	.Ltmp60 # Offset: 1011
    000003f9: 	movl	0xc(%rsi,%rbp), %ecx
    000003fd: 	movl	%ecx, 0x18(%rax,%r15)
    00000402: 	movl	0xc(%rdx,%rbp), %edx
    00000406: 	movl	%edx, 0xc(%rax,%r8,4)
    0000040b: 	jmp	.Ltmp60 # Offset: 1035
.Ltmp56:
    00000410: 	xorl	%ecx, %ecx
    00000412: 	jmp	.Ltmp65 # Offset: 1042
.Ltmp62:
    00000417: 	xorl	%edi, %edi
    00000419: 	jmp	.Ltmp66 # Offset: 1049
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version8IjEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version8IfEvPT_PKS0_S3_i" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x2d40
  Size        : 0x9
  MaxSize     : 0x10
  Offset      : 0x2d40
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version8IfEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	jmp	_Z23interleave2to2_version8IjEvPT_PKS0_S3_i # TAILCALL  # Offset: 4
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version8IfEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version8IdEvPT_PKS0_S3_i" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x2d50
  Size        : 0xdb
  MaxSize     : 0xe0
  Offset      : 0x2d50
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version8IdEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp67 # Offset: 6
    0000000c: 	movslq	%ecx, %rax
    0000000f: 	leaq	(,%rax,8), %r8
    00000017: 	shlq	$0x4, %rax
    0000001b: 	leaq	(%rsi,%r8), %r9
    0000001f: 	addq	%rdi, %rax
    00000022: 	cmpq	%r9, %rdi
    00000025: 	setae	%r9b
    00000029: 	cmpq	%rax, %rsi
    0000002c: 	setae	%r10b
    00000030: 	addq	%rdx, %r8
    00000033: 	orl	%r10d, %r9d
    00000036: 	cmpq	%r8, %rdi
    00000039: 	setae	%r8b
    0000003d: 	cmpq	%rax, %rdx
    00000040: 	setae	%al
    00000043: 	orl	%r8d, %eax
    00000046: 	testb	%al, %r9b
    00000049: 	je	.Ltmp68 # Offset: 73
    0000004b: 	leal	-0x1(%rcx), %eax
    0000004e: 	cmpl	$0x1, %eax
    00000051: 	jbe	.Ltmp68 # Offset: 81
    00000053: 	movl	%ecx, %r8d
    00000056: 	xorl	%eax, %eax
    00000058: 	shrl	%r8d
    0000005b: 	shlq	$0x4, %r8
    0000005f: 	nop # Size: 1
.Ltmp69:
    00000060: 	movdqu	(%rsi,%rax), %xmm0
    00000065: 	movdqu	(%rdx,%rax), %xmm1
    0000006a: 	movdqa	%xmm0, %xmm2
    0000006e: 	punpckhqdq	%xmm1, %xmm0
    00000072: 	punpcklqdq	%xmm1, %xmm2
    00000076: 	movups	%xmm0, 0x10(%rdi,%rax,2)
    0000007b: 	movups	%xmm2, (%rdi,%rax,2)
    0000007f: 	addq	$0x10, %rax
    00000083: 	cmpq	%r8, %rax
    00000086: 	jne	.Ltmp69 # Offset: 134
    00000088: 	movl	%ecx, %eax
    0000008a: 	andl	$-0x2, %eax
    0000008d: 	andl	$0x1, %ecx
    00000090: 	je	.Ltmp67 # Offset: 144
    00000092: 	movl	%eax, %ecx
    00000094: 	addl	%eax, %eax
    00000096: 	movq	(%rsi,%rcx,8), %rsi
    0000009a: 	cltq
    0000009c: 	movq	%rsi, (%rdi,%rax,8)
    000000a0: 	movq	(%rdx,%rcx,8), %rdx
    000000a4: 	movq	%rdx, 0x8(%rdi,%rax,8)
    000000a9: 	retq # Offset: 169
    000000aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp68:
    000000b0: 	movl	%ecx, %ecx
    000000b2: 	xorl	%eax, %eax
    000000b4: 	shlq	$0x3, %rcx
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp70:
    000000c0: 	movq	(%rsi,%rax), %r8
    000000c4: 	movq	%r8, (%rdi,%rax,2)
    000000c8: 	movq	(%rdx,%rax), %r8
    000000cc: 	movq	%r8, 0x8(%rdi,%rax,2)
    000000d1: 	addq	$0x8, %rax
    000000d5: 	cmpq	%rax, %rcx
    000000d8: 	jne	.Ltmp70 # Offset: 216
.Ltmp67:
    000000da: 	retq # Offset: 218
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version8IdEvPT_PKS0_S3_i"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x2e30
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x2e30
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp71 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp72 # Offset: 38
.Ltmp71:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp73 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp72:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp73:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x37008(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x2ed0
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x2ed0
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp74 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp75 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp76:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp76 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp89:
    00000069: 	leaq	DATAat0x37152(%rip), %rbp
    00000070: 	leaq	DATAat0x37028(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x37068(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp77 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x37538(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x37098(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x37530(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp78 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp82:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp79 # Offset: 244
    000000fa: 	movq	DATAat0x37520(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp83:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x37520(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp80 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp80:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x37137(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x37538(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp81 # Offset: 398
.Ltmp78:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp82 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp83 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp79:
    000001c8: 	movq	DATAat0x37528(%rip), %rsi
    000001cf: 	movq	DATAat0x37520(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp80 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp81:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp77 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp84 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp85:
    00000210: 	addq	$0x10, %rax
.Ltmp84:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp85 # Offset: 542
.Ltmp90:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x370c8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp86 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp87 # Offset: 592
.Ltmp86:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp74:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp87:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp88:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp88 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x37112(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp74 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp75:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp89 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp77:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp90 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x3200
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x3200
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp91 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp92 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp93:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp93 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp98:
    0000006a: 	leaq	DATAat0x37152(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x370f0(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x37138(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x37152(%rip), %r8
    000000a1: 	leaq	DATAat0x37126(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp94 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp95:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x37137(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp95 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp94 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp96 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp97:
    00000140: 	addq	$0x10, %rax
.Ltmp96:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp97 # Offset: 334
.Ltmp99:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x370c8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp91:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp92:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp98 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp94:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp99 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x33b0
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x33b0
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x33d0
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x33d0
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x37530(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x3410
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x3410
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x3420
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x3420
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x3470
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x3470
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x34c0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x34c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x34f0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x34f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x3520
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3520
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x3550
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3550
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x3580
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x3580
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x35b0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x35b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x35e0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x35e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x3610
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x3610
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x3640
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x3640
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x3670
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x3670
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x36a0
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x36a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x36d0
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x36d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x3710
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3710
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x3740
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x3740
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x3770
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x3770
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x37a0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x37a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x37d0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x37d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x3800
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3800
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x3830
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3830
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x3860
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3860
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x3890
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x3890
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x38c0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x38c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x38f0
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x38f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_Z14isLittleEndianv" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x3920
  Size        : 0xa
  MaxSize     : 0x10
  Offset      : 0x3920
  Section     : .text
  Orc Section : .local.text._Z14isLittleEndianv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	movl	$0x1, %eax
    00000009: 	retq # Offset: 9
DWARF CFI Instructions:
    <empty>
End of Function "_Z14isLittleEndianv"

Binary Function "_Z11isBigEndianv" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x3930
  Size        : 0x7
  MaxSize     : 0x10
  Offset      : 0x3930
  Section     : .text
  Orc Section : .local.text._Z11isBigEndianv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	xorl	%eax, %eax
    00000006: 	retq # Offset: 6
DWARF CFI Instructions:
    <empty>
End of Function "_Z11isBigEndianv"

Binary Function "_Z23interleave2to2_version7IjEvPT_PKS0_S3_i" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x3940
  Size        : 0x138
  MaxSize     : 0x140
  Offset      : 0x3940
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version7IjEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp100 # Offset: 6
    0000000c: 	movslq	%ecx, %r8
    0000000f: 	pushq	%rbx
    00000010: 	movl	%ecx, %r9d
    00000013: 	leaq	(,%r8,4), %rax
    0000001b: 	leaq	(%rdi,%r8,8), %r11
    0000001f: 	leaq	(%rsi,%rax), %r10
    00000023: 	cmpq	%r10, %rdi
    00000026: 	setae	%r10b
    0000002a: 	cmpq	%r11, %rsi
    0000002d: 	setae	%bl
    00000030: 	addq	%rdx, %rax
    00000033: 	orl	%ebx, %r10d
    00000036: 	cmpq	%rax, %rdi
    00000039: 	setae	%al
    0000003c: 	cmpq	%r11, %rdx
    0000003f: 	setae	%r11b
    00000043: 	orl	%r11d, %eax
    00000046: 	testb	%al, %r10b
    00000049: 	je	.Ltmp101 # Offset: 73
    0000004f: 	cmpl	$0x1, %ecx
    00000052: 	je	.Ltmp101 # Offset: 82
    00000058: 	leal	-0x1(%rcx), %eax
    0000005b: 	cmpl	$0x2, %eax
    0000005e: 	jbe	.Ltmp102 # Offset: 94
    00000064: 	movl	%ecx, %r8d
    00000067: 	xorl	%eax, %eax
    00000069: 	shrl	$0x2, %r8d
    0000006d: 	shlq	$0x4, %r8
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp103:
    00000078: 	movdqu	(%rsi,%rax), %xmm0
    0000007d: 	movdqu	(%rdx,%rax), %xmm1
    00000082: 	movdqa	%xmm0, %xmm2
    00000086: 	punpckhdq	%xmm1, %xmm0
    0000008a: 	punpckldq	%xmm1, %xmm2
    0000008e: 	movups	%xmm0, 0x10(%rdi,%rax,2)
    00000093: 	movups	%xmm2, (%rdi,%rax,2)
    00000097: 	addq	$0x10, %rax
    0000009b: 	cmpq	%rax, %r8
    0000009e: 	jne	.Ltmp103 # Offset: 158
    000000a0: 	movl	%ecx, %r8d
    000000a3: 	andl	$-0x4, %r8d
    000000a7: 	movl	%r8d, %eax
    000000aa: 	cmpl	%r8d, %ecx
    000000ad: 	je	.Ltmp104 # Offset: 173
    000000af: 	subl	%r8d, %ecx
    000000b2: 	movl	%ecx, %r9d
    000000b5: 	cmpl	$0x1, %ecx
    000000b8: 	je	.Ltmp105 # Offset: 184
.Ltmp107:
    000000ba: 	movl	%r8d, %ecx
    000000bd: 	movq	(%rsi,%rcx,4), %xmm0
    000000c2: 	movq	(%rdx,%rcx,4), %xmm1
    000000c7: 	leaq	(%rdi,%rcx,8), %r8
    000000cb: 	movl	%r9d, %ecx
    000000ce: 	andl	$-0x2, %ecx
    000000d1: 	movdqa	%xmm0, %xmm2
    000000d5: 	punpckldq	%xmm1, %xmm0
    000000d9: 	addl	%ecx, %eax
    000000db: 	punpckldq	%xmm1, %xmm2
    000000df: 	pshufd	$0xe, %xmm0, %xmm0
    000000e4: 	movq	%xmm2, (%r8)
    000000e9: 	movq	%xmm0, 0x8(%r8)
    000000ef: 	cmpl	%ecx, %r9d
    000000f2: 	je	.Ltmp104 # Offset: 242
.Ltmp105:
    000000f4: 	movslq	%eax, %rcx
    000000f7: 	addl	%eax, %eax
    000000f9: 	movl	(%rsi,%rcx,4), %esi
    000000fc: 	cltq
    000000fe: 	movl	%esi, (%rdi,%rax,4)
    00000101: 	movl	(%rdx,%rcx,4), %edx
    00000104: 	movl	%edx, 0x4(%rdi,%rax,4)
.Ltmp104:
    00000108: 	popq	%rbx
    00000109: 	retq # Offset: 265
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp101:
    00000110: 	xorl	%eax, %eax
    00000112: 	nopw	(%rax,%rax) # Size: 6
.Ltmp106:
    00000118: 	movl	(%rsi,%rax,4), %ecx
    0000011b: 	movl	%ecx, (%rdi,%rax,8)
    0000011e: 	movl	(%rdx,%rax,4), %ecx
    00000121: 	movl	%ecx, 0x4(%rdi,%rax,8)
    00000125: 	addq	$0x1, %rax
    00000129: 	cmpq	%rax, %r8
    0000012c: 	jne	.Ltmp106 # Offset: 300
    0000012e: 	popq	%rbx
    0000012f: 	retq # Offset: 303
.Ltmp100:
    00000130: 	retq # Offset: 304
.Ltmp102:
    00000131: 	xorl	%r8d, %r8d
    00000134: 	xorl	%eax, %eax
    00000136: 	jmp	.Ltmp107 # Offset: 310
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version7IjEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version7ImEvPT_PKS0_S3_i" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x3a80
  Size        : 0xdb
  MaxSize     : 0xe0
  Offset      : 0x3a80
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version7ImEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp108 # Offset: 6
    0000000c: 	movslq	%ecx, %rax
    0000000f: 	leaq	(,%rax,8), %r8
    00000017: 	shlq	$0x4, %rax
    0000001b: 	leaq	(%rsi,%r8), %r9
    0000001f: 	addq	%rdi, %rax
    00000022: 	cmpq	%r9, %rdi
    00000025: 	setae	%r9b
    00000029: 	cmpq	%rax, %rsi
    0000002c: 	setae	%r10b
    00000030: 	addq	%rdx, %r8
    00000033: 	orl	%r10d, %r9d
    00000036: 	cmpq	%r8, %rdi
    00000039: 	setae	%r8b
    0000003d: 	cmpq	%rax, %rdx
    00000040: 	setae	%al
    00000043: 	orl	%r8d, %eax
    00000046: 	testb	%al, %r9b
    00000049: 	je	.Ltmp109 # Offset: 73
    0000004b: 	leal	-0x1(%rcx), %eax
    0000004e: 	cmpl	$0x1, %eax
    00000051: 	jbe	.Ltmp109 # Offset: 81
    00000053: 	movl	%ecx, %r8d
    00000056: 	xorl	%eax, %eax
    00000058: 	shrl	%r8d
    0000005b: 	shlq	$0x4, %r8
    0000005f: 	nop # Size: 1
.Ltmp110:
    00000060: 	movdqu	(%rsi,%rax), %xmm0
    00000065: 	movdqu	(%rdx,%rax), %xmm1
    0000006a: 	movdqa	%xmm0, %xmm2
    0000006e: 	punpckhqdq	%xmm1, %xmm0
    00000072: 	punpcklqdq	%xmm1, %xmm2
    00000076: 	movups	%xmm0, 0x10(%rdi,%rax,2)
    0000007b: 	movups	%xmm2, (%rdi,%rax,2)
    0000007f: 	addq	$0x10, %rax
    00000083: 	cmpq	%r8, %rax
    00000086: 	jne	.Ltmp110 # Offset: 134
    00000088: 	movl	%ecx, %eax
    0000008a: 	andl	$-0x2, %eax
    0000008d: 	andl	$0x1, %ecx
    00000090: 	je	.Ltmp108 # Offset: 144
    00000092: 	movl	%eax, %ecx
    00000094: 	addl	%eax, %eax
    00000096: 	movq	(%rsi,%rcx,8), %rsi
    0000009a: 	cltq
    0000009c: 	movq	%rsi, (%rdi,%rax,8)
    000000a0: 	movq	(%rdx,%rcx,8), %rdx
    000000a4: 	movq	%rdx, 0x8(%rdi,%rax,8)
    000000a9: 	retq # Offset: 169
    000000aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp109:
    000000b0: 	movl	%ecx, %ecx
    000000b2: 	xorl	%eax, %eax
    000000b4: 	shlq	$0x3, %rcx
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp111:
    000000c0: 	movq	(%rsi,%rax), %r8
    000000c4: 	movq	%r8, (%rdi,%rax,2)
    000000c8: 	movq	(%rdx,%rax), %r8
    000000cc: 	movq	%r8, 0x8(%rdi,%rax,2)
    000000d1: 	addq	$0x8, %rax
    000000d5: 	cmpq	%rax, %rcx
    000000d8: 	jne	.Ltmp111 # Offset: 216
.Ltmp108:
    000000da: 	retq # Offset: 218
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version7ImEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version8ImEvPT_PKS0_S3_i" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x3b60
  Size        : 0xdb
  MaxSize     : 0xe0
  Offset      : 0x3b60
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version8ImEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp112 # Offset: 6
    0000000c: 	movslq	%ecx, %rax
    0000000f: 	leaq	(,%rax,8), %r8
    00000017: 	shlq	$0x4, %rax
    0000001b: 	leaq	(%rsi,%r8), %r9
    0000001f: 	addq	%rdi, %rax
    00000022: 	cmpq	%r9, %rdi
    00000025: 	setae	%r9b
    00000029: 	cmpq	%rax, %rsi
    0000002c: 	setae	%r10b
    00000030: 	addq	%rdx, %r8
    00000033: 	orl	%r10d, %r9d
    00000036: 	cmpq	%r8, %rdi
    00000039: 	setae	%r8b
    0000003d: 	cmpq	%rax, %rdx
    00000040: 	setae	%al
    00000043: 	orl	%r8d, %eax
    00000046: 	testb	%al, %r9b
    00000049: 	je	.Ltmp113 # Offset: 73
    0000004b: 	leal	-0x1(%rcx), %eax
    0000004e: 	cmpl	$0x1, %eax
    00000051: 	jbe	.Ltmp113 # Offset: 81
    00000053: 	movl	%ecx, %r8d
    00000056: 	xorl	%eax, %eax
    00000058: 	shrl	%r8d
    0000005b: 	shlq	$0x4, %r8
    0000005f: 	nop # Size: 1
.Ltmp114:
    00000060: 	movdqu	(%rsi,%rax), %xmm0
    00000065: 	movdqu	(%rdx,%rax), %xmm1
    0000006a: 	movdqa	%xmm0, %xmm2
    0000006e: 	punpckhqdq	%xmm1, %xmm0
    00000072: 	punpcklqdq	%xmm1, %xmm2
    00000076: 	movups	%xmm0, 0x10(%rdi,%rax,2)
    0000007b: 	movups	%xmm2, (%rdi,%rax,2)
    0000007f: 	addq	$0x10, %rax
    00000083: 	cmpq	%r8, %rax
    00000086: 	jne	.Ltmp114 # Offset: 134
    00000088: 	movl	%ecx, %eax
    0000008a: 	andl	$-0x2, %eax
    0000008d: 	andl	$0x1, %ecx
    00000090: 	je	.Ltmp112 # Offset: 144
    00000092: 	movl	%eax, %ecx
    00000094: 	addl	%eax, %eax
    00000096: 	movq	(%rsi,%rcx,8), %rsi
    0000009a: 	cltq
    0000009c: 	movq	%rsi, (%rdi,%rax,8)
    000000a0: 	movq	(%rdx,%rcx,8), %rdx
    000000a4: 	movq	%rdx, 0x8(%rdi,%rax,8)
    000000a9: 	retq # Offset: 169
    000000aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp113:
    000000b0: 	movl	%ecx, %ecx
    000000b2: 	xorl	%eax, %eax
    000000b4: 	shlq	$0x3, %rcx
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp115:
    000000c0: 	movq	(%rsi,%rax), %r8
    000000c4: 	movq	%r8, (%rdi,%rax,2)
    000000c8: 	movq	(%rdx,%rax), %r8
    000000cc: 	movq	%r8, 0x8(%rdi,%rax,2)
    000000d1: 	addq	$0x8, %rax
    000000d5: 	cmpq	%rax, %rcx
    000000d8: 	jne	.Ltmp115 # Offset: 216
.Ltmp112:
    000000da: 	retq # Offset: 218
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version8ImEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version1IhEvPT_PKS0_S3_i" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x3c40
  Size        : 0x31d
  MaxSize     : 0x320
  Offset      : 0x3c40
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version1IhEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp116 # Offset: 6
    0000000c: 	movslq	%ecx, %rax
    0000000f: 	leaq	(%rsi,%rax), %r8
    00000013: 	leaq	(%rdi,%rax,2), %r9
    00000017: 	cmpq	%r8, %rdi
    0000001a: 	setae	%r8b
    0000001e: 	cmpq	%r9, %rsi
    00000021: 	setae	%r10b
    00000025: 	addq	%rdx, %rax
    00000028: 	orl	%r10d, %r8d
    0000002b: 	cmpq	%rax, %rdi
    0000002e: 	setae	%al
    00000031: 	cmpq	%r9, %rdx
    00000034: 	setae	%r9b
    00000038: 	orl	%r9d, %eax
    0000003b: 	testb	%al, %r8b
    0000003e: 	je	.Ltmp117 # Offset: 62
    00000044: 	leal	-0x1(%rcx), %eax
    00000047: 	cmpl	$0xe, %eax
    0000004a: 	jbe	.Ltmp117 # Offset: 74
    00000050: 	movl	%ecx, %r8d
    00000053: 	xorl	%eax, %eax
    00000055: 	shrl	$0x4, %r8d
    00000059: 	shlq	$0x4, %r8
    0000005d: 	nopl	(%rax) # Size: 3
.Ltmp118:
    00000060: 	movdqu	(%rsi,%rax), %xmm0
    00000065: 	movdqu	(%rdx,%rax), %xmm1
    0000006a: 	movdqa	%xmm0, %xmm2
    0000006e: 	punpckhbw	%xmm1, %xmm0
    00000072: 	punpcklbw	%xmm1, %xmm2
    00000076: 	movups	%xmm0, 0x10(%rdi,%rax,2)
    0000007b: 	movups	%xmm2, (%rdi,%rax,2)
    0000007f: 	addq	$0x10, %rax
    00000083: 	cmpq	%rax, %r8
    00000086: 	jne	.Ltmp118 # Offset: 134
    00000088: 	movl	%ecx, %eax
    0000008a: 	andl	$-0x10, %eax
    0000008d: 	testb	$0xf, %cl
    00000090: 	je	.Ltmp116 # Offset: 144
    00000096: 	movl	%eax, %r10d
    00000099: 	leal	(%rax,%rax), %r8d
    0000009d: 	movzbl	(%rsi,%r10), %r11d
    000000a2: 	movslq	%r8d, %r9
    000000a5: 	movb	%r11b, (%rdi,%r9)
    000000a9: 	movzbl	(%rdx,%r10), %r10d
    000000ae: 	movb	%r10b, 0x1(%rdi,%r9)
    000000b3: 	leal	0x1(%rax), %r9d
    000000b7: 	cmpl	%r9d, %ecx
    000000ba: 	jle	.Ltmp116 # Offset: 186
    000000c0: 	movslq	%r9d, %r9
    000000c3: 	leal	0x2(%r8), %r10d
    000000c7: 	movzbl	(%rsi,%r9), %r11d
    000000cc: 	movslq	%r10d, %r10
    000000cf: 	movb	%r11b, (%rdi,%r10)
    000000d3: 	movzbl	(%rdx,%r9), %r9d
    000000d8: 	movb	%r9b, 0x1(%rdi,%r10)
    000000dd: 	leal	0x2(%rax), %r9d
    000000e1: 	cmpl	%r9d, %ecx
    000000e4: 	jle	.Ltmp116 # Offset: 228
    000000ea: 	movslq	%r9d, %r9
    000000ed: 	leal	0x4(%r8), %r10d
    000000f1: 	movzbl	(%rsi,%r9), %r11d
    000000f6: 	movslq	%r10d, %r10
    000000f9: 	movb	%r11b, (%rdi,%r10)
    000000fd: 	movzbl	(%rdx,%r9), %r9d
    00000102: 	movb	%r9b, 0x1(%rdi,%r10)
    00000107: 	leal	0x3(%rax), %r9d
    0000010b: 	cmpl	%r9d, %ecx
    0000010e: 	jle	.Ltmp116 # Offset: 270
    00000114: 	movslq	%r9d, %r9
    00000117: 	leal	0x6(%r8), %r10d
    0000011b: 	movzbl	(%rsi,%r9), %r11d
    00000120: 	movslq	%r10d, %r10
    00000123: 	movb	%r11b, (%rdi,%r10)
    00000127: 	movzbl	(%rdx,%r9), %r9d
    0000012c: 	movb	%r9b, 0x1(%rdi,%r10)
    00000131: 	leal	0x4(%rax), %r9d
    00000135: 	cmpl	%r9d, %ecx
    00000138: 	jle	.Ltmp116 # Offset: 312
    0000013e: 	movslq	%r9d, %r9
    00000141: 	leal	0x8(%r8), %r10d
    00000145: 	movzbl	(%rsi,%r9), %r11d
    0000014a: 	movslq	%r10d, %r10
    0000014d: 	movb	%r11b, (%rdi,%r10)
    00000151: 	movzbl	(%rdx,%r9), %r9d
    00000156: 	movb	%r9b, 0x1(%rdi,%r10)
    0000015b: 	leal	0x5(%rax), %r9d
    0000015f: 	cmpl	%r9d, %ecx
    00000162: 	jle	.Ltmp116 # Offset: 354
    00000168: 	movslq	%r9d, %r9
    0000016b: 	leal	0xa(%r8), %r10d
    0000016f: 	movzbl	(%rsi,%r9), %r11d
    00000174: 	movslq	%r10d, %r10
    00000177: 	movb	%r11b, (%rdi,%r10)
    0000017b: 	movzbl	(%rdx,%r9), %r9d
    00000180: 	movb	%r9b, 0x1(%rdi,%r10)
    00000185: 	leal	0x6(%rax), %r9d
    00000189: 	cmpl	%r9d, %ecx
    0000018c: 	jle	.Ltmp116 # Offset: 396
    00000192: 	movslq	%r9d, %r9
    00000195: 	leal	0xc(%r8), %r10d
    00000199: 	movzbl	(%rsi,%r9), %r11d
    0000019e: 	movslq	%r10d, %r10
    000001a1: 	movb	%r11b, (%rdi,%r10)
    000001a5: 	movzbl	(%rdx,%r9), %r9d
    000001aa: 	movb	%r9b, 0x1(%rdi,%r10)
    000001af: 	leal	0x7(%rax), %r9d
    000001b3: 	cmpl	%r9d, %ecx
    000001b6: 	jle	.Ltmp116 # Offset: 438
    000001bc: 	movslq	%r9d, %r9
    000001bf: 	leal	0xe(%r8), %r10d
    000001c3: 	movzbl	(%rsi,%r9), %r11d
    000001c8: 	movslq	%r10d, %r10
    000001cb: 	movb	%r11b, (%rdi,%r10)
    000001cf: 	movzbl	(%rdx,%r9), %r9d
    000001d4: 	movb	%r9b, 0x1(%rdi,%r10)
    000001d9: 	leal	0x8(%rax), %r9d
    000001dd: 	cmpl	%r9d, %ecx
    000001e0: 	jle	.Ltmp116 # Offset: 480
    000001e6: 	movslq	%r9d, %r9
    000001e9: 	leal	0x10(%r8), %r10d
    000001ed: 	movzbl	(%rsi,%r9), %r11d
    000001f2: 	movslq	%r10d, %r10
    000001f5: 	movb	%r11b, (%rdi,%r10)
    000001f9: 	movzbl	(%rdx,%r9), %r9d
    000001fe: 	movb	%r9b, 0x1(%rdi,%r10)
    00000203: 	leal	0x9(%rax), %r9d
    00000207: 	cmpl	%r9d, %ecx
    0000020a: 	jle	.Ltmp116 # Offset: 522
    00000210: 	movslq	%r9d, %r9
    00000213: 	leal	0x12(%r8), %r10d
    00000217: 	movzbl	(%rsi,%r9), %r11d
    0000021c: 	movslq	%r10d, %r10
    0000021f: 	movb	%r11b, (%rdi,%r10)
    00000223: 	movzbl	(%rdx,%r9), %r9d
    00000228: 	movb	%r9b, 0x1(%rdi,%r10)
    0000022d: 	leal	0xa(%rax), %r9d
    00000231: 	cmpl	%r9d, %ecx
    00000234: 	jle	.Ltmp116 # Offset: 564
    0000023a: 	movslq	%r9d, %r9
    0000023d: 	leal	0x14(%r8), %r10d
    00000241: 	movzbl	(%rsi,%r9), %r11d
    00000246: 	movslq	%r10d, %r10
    00000249: 	movb	%r11b, (%rdi,%r10)
    0000024d: 	movzbl	(%rdx,%r9), %r9d
    00000252: 	movb	%r9b, 0x1(%rdi,%r10)
    00000257: 	leal	0xb(%rax), %r9d
    0000025b: 	cmpl	%r9d, %ecx
    0000025e: 	jle	.Ltmp116 # Offset: 606
    00000264: 	movslq	%r9d, %r9
    00000267: 	leal	0x16(%r8), %r10d
    0000026b: 	movzbl	(%rsi,%r9), %r11d
    00000270: 	movslq	%r10d, %r10
    00000273: 	movb	%r11b, (%rdi,%r10)
    00000277: 	movzbl	(%rdx,%r9), %r9d
    0000027c: 	movb	%r9b, 0x1(%rdi,%r10)
    00000281: 	leal	0xc(%rax), %r9d
    00000285: 	cmpl	%r9d, %ecx
    00000288: 	jle	.Ltmp116 # Offset: 648
    0000028e: 	movslq	%r9d, %r9
    00000291: 	leal	0x18(%r8), %r10d
    00000295: 	movzbl	(%rsi,%r9), %r11d
    0000029a: 	movslq	%r10d, %r10
    0000029d: 	movb	%r11b, (%rdi,%r10)
    000002a1: 	movzbl	(%rdx,%r9), %r9d
    000002a6: 	movb	%r9b, 0x1(%rdi,%r10)
    000002ab: 	leal	0xd(%rax), %r9d
    000002af: 	cmpl	%r9d, %ecx
    000002b2: 	jle	.Ltmp116 # Offset: 690
    000002b4: 	movslq	%r9d, %r9
    000002b7: 	leal	0x1a(%r8), %r10d
    000002bb: 	addl	$0xe, %eax
    000002be: 	movzbl	(%rsi,%r9), %r11d
    000002c3: 	movslq	%r10d, %r10
    000002c6: 	movb	%r11b, (%rdi,%r10)
    000002ca: 	movzbl	(%rdx,%r9), %r9d
    000002cf: 	movb	%r9b, 0x1(%rdi,%r10)
    000002d4: 	cmpl	%eax, %ecx
    000002d6: 	jle	.Ltmp116 # Offset: 726
    000002d8: 	cltq
    000002da: 	leal	0x1c(%r8), %ecx
    000002de: 	movzbl	(%rsi,%rax), %esi
    000002e2: 	movslq	%ecx, %rcx
    000002e5: 	movb	%sil, (%rdi,%rcx)
    000002e9: 	movzbl	(%rdx,%rax), %eax
    000002ed: 	movb	%al, 0x1(%rdi,%rcx)
    000002f1: 	retq # Offset: 753
    000002f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp117:
    000002f8: 	movl	%ecx, %ecx
    000002fa: 	xorl	%eax, %eax
    000002fc: 	nopl	(%rax) # Size: 4
.Ltmp119:
    00000300: 	movzbl	(%rsi,%rax), %r8d
    00000305: 	movb	%r8b, (%rdi,%rax,2)
    00000309: 	movzbl	(%rdx,%rax), %r8d
    0000030e: 	movb	%r8b, 0x1(%rdi,%rax,2)
    00000313: 	addq	$0x1, %rax
    00000317: 	cmpq	%rax, %rcx
    0000031a: 	jne	.Ltmp119 # Offset: 794
.Ltmp116:
    0000031c: 	retq # Offset: 796
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version1IhEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version2IhEvPT_PKS0_S3_i" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x3f60
  Size        : 0x252
  MaxSize     : 0x260
  Offset      : 0x3f60
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version2IhEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	movl	%ecx, %edx
    00000009: 	testl	%ecx, %ecx
    0000000b: 	jle	.Ltmp120 # Offset: 11
    00000011: 	movslq	%ecx, %rax
    00000014: 	leaq	(%rsi,%rax), %rcx
    00000018: 	leaq	(%rdi,%rax,2), %r9
    0000001c: 	cmpq	%rcx, %rdi
    0000001f: 	setae	%cl
    00000022: 	cmpq	%r9, %rsi
    00000025: 	setae	%r10b
    00000029: 	addq	%r8, %rax
    0000002c: 	orl	%r10d, %ecx
    0000002f: 	cmpq	%rax, %rdi
    00000032: 	setae	%al
    00000035: 	cmpq	%r9, %r8
    00000038: 	setae	%r9b
    0000003c: 	orl	%r9d, %eax
    0000003f: 	testb	%al, %cl
    00000041: 	je	.Ltmp121 # Offset: 65
    00000047: 	leal	-0x1(%rdx), %eax
    0000004a: 	cmpl	$0xe, %eax
    0000004d: 	jbe	.Ltmp121 # Offset: 77
    00000053: 	movl	%edx, %ecx
    00000055: 	xorl	%eax, %eax
    00000057: 	shrl	$0x4, %ecx
    0000005a: 	shlq	$0x4, %rcx
    0000005e: 	nop # Size: 2
.Ltmp122:
    00000060: 	movdqu	(%rsi,%rax), %xmm0
    00000065: 	movdqu	(%r8,%rax), %xmm1
    0000006b: 	movdqa	%xmm0, %xmm2
    0000006f: 	punpckhbw	%xmm1, %xmm0
    00000073: 	punpcklbw	%xmm1, %xmm2
    00000077: 	movups	%xmm0, 0x10(%rdi,%rax,2)
    0000007c: 	movups	%xmm2, (%rdi,%rax,2)
    00000080: 	addq	$0x10, %rax
    00000084: 	cmpq	%rcx, %rax
    00000087: 	jne	.Ltmp122 # Offset: 135
    00000089: 	movl	%edx, %r9d
    0000008c: 	andl	$-0x10, %r9d
    00000090: 	movl	%r9d, %ecx
    00000093: 	leaq	(%rdi,%rcx,2), %rax
    00000097: 	addq	%rcx, %rsi
    0000009a: 	addq	%r8, %rcx
    0000009d: 	cmpl	%r9d, %edx
    000000a0: 	je	.Ltmp120 # Offset: 160
    000000a6: 	movzbl	(%rsi), %edi
    000000a9: 	movb	%dil, (%rax)
    000000ac: 	movzbl	(%rcx), %edi
    000000af: 	movb	%dil, 0x1(%rax)
    000000b3: 	leal	0x1(%r9), %edi
    000000b7: 	cmpl	%edi, %edx
    000000b9: 	jle	.Ltmp120 # Offset: 185
    000000bf: 	movzbl	0x1(%rsi), %edi
    000000c3: 	movb	%dil, 0x2(%rax)
    000000c7: 	movzbl	0x1(%rcx), %edi
    000000cb: 	movb	%dil, 0x3(%rax)
    000000cf: 	leal	0x2(%r9), %edi
    000000d3: 	cmpl	%edi, %edx
    000000d5: 	jle	.Ltmp120 # Offset: 213
    000000db: 	movzbl	0x2(%rsi), %edi
    000000df: 	movb	%dil, 0x4(%rax)
    000000e3: 	movzbl	0x2(%rcx), %edi
    000000e7: 	movb	%dil, 0x5(%rax)
    000000eb: 	leal	0x3(%r9), %edi
    000000ef: 	cmpl	%edi, %edx
    000000f1: 	jle	.Ltmp120 # Offset: 241
    000000f7: 	movzbl	0x3(%rsi), %edi
    000000fb: 	movb	%dil, 0x6(%rax)
    000000ff: 	movzbl	0x3(%rcx), %edi
    00000103: 	movb	%dil, 0x7(%rax)
    00000107: 	leal	0x4(%r9), %edi
    0000010b: 	cmpl	%edi, %edx
    0000010d: 	jle	.Ltmp120 # Offset: 269
    00000113: 	movzbl	0x4(%rsi), %edi
    00000117: 	movb	%dil, 0x8(%rax)
    0000011b: 	movzbl	0x4(%rcx), %edi
    0000011f: 	movb	%dil, 0x9(%rax)
    00000123: 	leal	0x5(%r9), %edi
    00000127: 	cmpl	%edi, %edx
    00000129: 	jle	.Ltmp120 # Offset: 297
    0000012f: 	movzbl	0x5(%rsi), %edi
    00000133: 	movb	%dil, 0xa(%rax)
    00000137: 	movzbl	0x5(%rcx), %edi
    0000013b: 	movb	%dil, 0xb(%rax)
    0000013f: 	leal	0x6(%r9), %edi
    00000143: 	cmpl	%edi, %edx
    00000145: 	jle	.Ltmp120 # Offset: 325
    0000014b: 	movzbl	0x6(%rsi), %edi
    0000014f: 	movb	%dil, 0xc(%rax)
    00000153: 	movzbl	0x6(%rcx), %edi
    00000157: 	movb	%dil, 0xd(%rax)
    0000015b: 	leal	0x7(%r9), %edi
    0000015f: 	cmpl	%edi, %edx
    00000161: 	jle	.Ltmp120 # Offset: 353
    00000167: 	movzbl	0x7(%rsi), %edi
    0000016b: 	movb	%dil, 0xe(%rax)
    0000016f: 	movzbl	0x7(%rcx), %edi
    00000173: 	movb	%dil, 0xf(%rax)
    00000177: 	leal	0x8(%r9), %edi
    0000017b: 	cmpl	%edi, %edx
    0000017d: 	jle	.Ltmp120 # Offset: 381
    00000183: 	movzbl	0x8(%rsi), %edi
    00000187: 	movb	%dil, 0x10(%rax)
    0000018b: 	movzbl	0x8(%rcx), %edi
    0000018f: 	movb	%dil, 0x11(%rax)
    00000193: 	leal	0x9(%r9), %edi
    00000197: 	cmpl	%edi, %edx
    00000199: 	jle	.Ltmp120 # Offset: 409
    0000019f: 	movzbl	0x9(%rsi), %edi
    000001a3: 	movb	%dil, 0x12(%rax)
    000001a7: 	movzbl	0x9(%rcx), %edi
    000001ab: 	movb	%dil, 0x13(%rax)
    000001af: 	leal	0xa(%r9), %edi
    000001b3: 	cmpl	%edi, %edx
    000001b5: 	jle	.Ltmp120 # Offset: 437
    000001bb: 	movzbl	0xa(%rsi), %edi
    000001bf: 	movb	%dil, 0x14(%rax)
    000001c3: 	movzbl	0xa(%rcx), %edi
    000001c7: 	movb	%dil, 0x15(%rax)
    000001cb: 	leal	0xb(%r9), %edi
    000001cf: 	cmpl	%edi, %edx
    000001d1: 	jle	.Ltmp120 # Offset: 465
    000001d3: 	movzbl	0xb(%rsi), %edi
    000001d7: 	movb	%dil, 0x16(%rax)
    000001db: 	movzbl	0xb(%rcx), %edi
    000001df: 	movb	%dil, 0x17(%rax)
    000001e3: 	leal	0xc(%r9), %edi
    000001e7: 	cmpl	%edi, %edx
    000001e9: 	jle	.Ltmp120 # Offset: 489
    000001eb: 	movzbl	0xc(%rsi), %edi
    000001ef: 	movb	%dil, 0x18(%rax)
    000001f3: 	movzbl	0xc(%rcx), %edi
    000001f7: 	movb	%dil, 0x19(%rax)
    000001fb: 	leal	0xd(%r9), %edi
    000001ff: 	cmpl	%edi, %edx
    00000201: 	jle	.Ltmp120 # Offset: 513
    00000203: 	movzbl	0xd(%rsi), %edi
    00000207: 	movb	%dil, 0x1a(%rax)
    0000020b: 	movzbl	0xd(%rcx), %edi
    0000020f: 	movb	%dil, 0x1b(%rax)
    00000213: 	leal	0xe(%r9), %edi
    00000217: 	cmpl	%edi, %edx
    00000219: 	jle	.Ltmp120 # Offset: 537
    0000021b: 	movzbl	0xe(%rsi), %edx
    0000021f: 	movb	%dl, 0x1c(%rax)
    00000222: 	movzbl	0xe(%rcx), %edx
    00000226: 	movb	%dl, 0x1d(%rax)
    00000229: 	retq # Offset: 553
    0000022a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp121:
    00000230: 	movl	%edx, %edx
    00000232: 	xorl	%eax, %eax
    00000234: 	nopl	(%rax) # Size: 4
.Ltmp123:
    00000238: 	movzbl	(%rsi,%rax), %ecx
    0000023c: 	movb	%cl, (%rdi,%rax,2)
    0000023f: 	movzbl	(%r8,%rax), %ecx
    00000244: 	movb	%cl, 0x1(%rdi,%rax,2)
    00000248: 	addq	$0x1, %rax
    0000024c: 	cmpq	%rax, %rdx
    0000024f: 	jne	.Ltmp123 # Offset: 591
.Ltmp120:
    00000251: 	retq # Offset: 593
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version2IhEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version3IhEvPT_PKS0_S3_i" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x41c0
  Size        : 0x55e
  MaxSize     : 0x560
  Offset      : 0x41c0
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version3IhEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	movq	%rdx, %r8
    00000007: 	movslq	%ecx, %rdx
    0000000a: 	testq	%rdx, %rdx
    0000000d: 	je	.Ltmp124 # Offset: 13
    00000013: 	pushq	%r14
    00000015: 	leaq	-0x1(%rdx), %r10
    00000019: 	leaq	(%rsi,%rdx), %rcx
    0000001d: 	movq	%rsi, %r9
    00000020: 	pushq	%r12
    00000022: 	leaq	0x1(%rdi,%r10,2), %rax
    00000027: 	pushq	%rbp
    00000028: 	pushq	%rbx
    00000029: 	subq	$0x1f0, %rsp
    00000030: 	cmpq	$0x6, %r10
    00000034: 	seta	%r11b
    00000038: 	cmpq	%rax, %rsi
    0000003b: 	setae	%al
    0000003e: 	cmpq	%rcx, %rdi
    00000041: 	setae	%cl
    00000044: 	orb	%cl, %al
    00000046: 	je	.Ltmp125 # Offset: 70
    0000004c: 	testb	%r11b, %r11b
    0000004f: 	je	.Ltmp125 # Offset: 79
    00000055: 	cmpq	$0xe, %r10
    00000059: 	jbe	.Ltmp126 # Offset: 89
    0000005f: 	movq	%rdx, %rbx
    00000062: 	movq	%rsi, %rcx
    00000065: 	movq	%rdi, %rax
    00000068: 	andq	$-0x10, %rbx
    0000006c: 	addq	%rsi, %rbx
    0000006f: 	nop # Size: 1
.Ltmp127:
    00000070: 	movdqu	(%rcx), %xmm0
    00000074: 	addq	$0x10, %rcx
    00000078: 	addq	$0x20, %rax
    0000007c: 	movd	%xmm0, %esi
    00000080: 	movb	%sil, -0x20(%rax)
    00000084: 	movaps	%xmm0, 0x1d8(%rsp)
    0000008c: 	movzbl	0x1d9(%rsp), %esi
    00000094: 	movb	%sil, -0x1e(%rax)
    00000098: 	movaps	%xmm0, 0x1c8(%rsp)
    000000a0: 	movzbl	0x1ca(%rsp), %esi
    000000a8: 	movb	%sil, -0x1c(%rax)
    000000ac: 	movaps	%xmm0, 0x1b8(%rsp)
    000000b4: 	movzbl	0x1bb(%rsp), %esi
    000000bc: 	movb	%sil, -0x1a(%rax)
    000000c0: 	movaps	%xmm0, 0x1a8(%rsp)
    000000c8: 	movzbl	0x1ac(%rsp), %esi
    000000d0: 	movb	%sil, -0x18(%rax)
    000000d4: 	movaps	%xmm0, 0x198(%rsp)
    000000dc: 	movzbl	0x19d(%rsp), %esi
    000000e4: 	movb	%sil, -0x16(%rax)
    000000e8: 	movaps	%xmm0, 0x188(%rsp)
    000000f0: 	movzbl	0x18e(%rsp), %esi
    000000f8: 	movb	%sil, -0x14(%rax)
    000000fc: 	movaps	%xmm0, 0x178(%rsp)
    00000104: 	movzbl	0x17f(%rsp), %esi
    0000010c: 	movb	%sil, -0x12(%rax)
    00000110: 	movaps	%xmm0, 0x168(%rsp)
    00000118: 	movzbl	0x170(%rsp), %esi
    00000120: 	movb	%sil, -0x10(%rax)
    00000124: 	movaps	%xmm0, 0x158(%rsp)
    0000012c: 	movzbl	0x161(%rsp), %esi
    00000134: 	movb	%sil, -0xe(%rax)
    00000138: 	movaps	%xmm0, 0x148(%rsp)
    00000140: 	movzbl	0x152(%rsp), %esi
    00000148: 	movb	%sil, -0xc(%rax)
    0000014c: 	movaps	%xmm0, 0x138(%rsp)
    00000154: 	movzbl	0x143(%rsp), %esi
    0000015c: 	movb	%sil, -0xa(%rax)
    00000160: 	movaps	%xmm0, 0x128(%rsp)
    00000168: 	movzbl	0x134(%rsp), %esi
    00000170: 	movb	%sil, -0x8(%rax)
    00000174: 	movaps	%xmm0, 0x118(%rsp)
    0000017c: 	movzbl	0x125(%rsp), %esi
    00000184: 	movb	%sil, -0x6(%rax)
    00000188: 	movaps	%xmm0, 0x108(%rsp)
    00000190: 	movzbl	0x116(%rsp), %esi
    00000198: 	movb	%sil, -0x4(%rax)
    0000019c: 	movaps	%xmm0, 0xf8(%rsp)
    000001a4: 	movzbl	0x107(%rsp), %esi
    000001ac: 	movb	%sil, -0x2(%rax)
    000001b0: 	cmpq	%rcx, %rbx
    000001b3: 	jne	.Ltmp127 # Offset: 435
    000001b9: 	movq	%rdx, %rcx
    000001bc: 	andq	$-0x10, %rcx
    000001c0: 	leaq	(%r9,%rcx), %rbp
    000001c4: 	leaq	(%rdi,%rcx,2), %r14
    000001c8: 	cmpq	%rcx, %rdx
    000001cb: 	je	.Ltmp128 # Offset: 459
    000001d1: 	movq	%rdx, %r12
    000001d4: 	subq	%rcx, %r12
    000001d7: 	leaq	-0x1(%r12), %rax
    000001dc: 	cmpq	$0x6, %rax
    000001e0: 	jbe	.Ltmp129 # Offset: 480
.Ltmp138:
    000001e2: 	movq	(%r9,%rcx), %rax
    000001e6: 	leaq	(%rdi,%rcx,2), %rsi
    000001ea: 	movq	%rax, %r9
    000001ed: 	movb	%al, (%rsi)
    000001ef: 	shrq	$0x10, %r9
    000001f3: 	movb	%ah, 0x2(%rsi)
    000001f6: 	movb	%r9b, 0x4(%rsi)
    000001fa: 	movq	%rax, %r9
    000001fd: 	shrq	$0x18, %r9
    00000201: 	movb	%r9b, 0x6(%rsi)
    00000205: 	movq	%rax, %r9
    00000208: 	shrq	$0x20, %r9
    0000020c: 	movb	%r9b, 0x8(%rsi)
    00000210: 	movq	%rax, %r9
    00000213: 	shrq	$0x28, %r9
    00000217: 	movb	%r9b, 0xa(%rsi)
    0000021b: 	movq	%rax, %r9
    0000021e: 	shrq	$0x38, %rax
    00000222: 	movb	%al, 0xe(%rsi)
    00000225: 	movq	%r12, %rax
    00000228: 	shrq	$0x30, %r9
    0000022c: 	andq	$-0x8, %rax
    00000230: 	movb	%r9b, 0xc(%rsi)
    00000234: 	addq	%rax, %rbp
    00000237: 	leaq	(%r14,%rax,2), %r14
    0000023b: 	addq	%rax, %rcx
    0000023e: 	cmpq	%rax, %r12
    00000241: 	je	.Ltmp128 # Offset: 577
.Ltmp129:
    00000243: 	movzbl	(%rbp), %eax
    00000247: 	movb	%al, (%r14)
    0000024a: 	leaq	0x1(%rcx), %rax
    0000024e: 	cmpq	%rax, %rdx
    00000251: 	jbe	.Ltmp128 # Offset: 593
    00000253: 	movzbl	0x1(%rbp), %eax
    00000257: 	movb	%al, 0x2(%r14)
    0000025b: 	leaq	0x2(%rcx), %rax
    0000025f: 	cmpq	%rax, %rdx
    00000262: 	jbe	.Ltmp128 # Offset: 610
    00000264: 	movzbl	0x2(%rbp), %eax
    00000268: 	movb	%al, 0x4(%r14)
    0000026c: 	leaq	0x3(%rcx), %rax
    00000270: 	cmpq	%rax, %rdx
    00000273: 	jbe	.Ltmp128 # Offset: 627
    00000275: 	movzbl	0x3(%rbp), %eax
    00000279: 	movb	%al, 0x6(%r14)
    0000027d: 	leaq	0x4(%rcx), %rax
    00000281: 	cmpq	%rax, %rdx
    00000284: 	jbe	.Ltmp128 # Offset: 644
    00000286: 	movzbl	0x4(%rbp), %eax
    0000028a: 	movb	%al, 0x8(%r14)
    0000028e: 	leaq	0x5(%rcx), %rax
    00000292: 	cmpq	%rax, %rdx
    00000295: 	jbe	.Ltmp128 # Offset: 661
    00000297: 	movzbl	0x5(%rbp), %eax
    0000029b: 	addq	$0x6, %rcx
    0000029f: 	movb	%al, 0xa(%r14)
    000002a3: 	cmpq	%rcx, %rdx
    000002a6: 	jbe	.Ltmp128 # Offset: 678
    000002a8: 	movzbl	0x6(%rbp), %eax
    000002ac: 	movb	%al, 0xc(%r14)
.Ltmp128:
    000002b0: 	leaq	(%rdi,%rdx,2), %rax
    000002b4: 	leaq	(%r8,%rdx), %rcx
    000002b8: 	cmpq	%rax, %r8
    000002bb: 	leaq	0x1(%rdi), %r9
    000002bf: 	setae	%al
    000002c2: 	cmpq	%rcx, %r9
    000002c5: 	setae	%cl
    000002c8: 	orb	%cl, %al
    000002ca: 	je	.Ltmp130 # Offset: 714
    000002d0: 	testb	%r11b, %r11b
    000002d3: 	je	.Ltmp130 # Offset: 723
    000002d9: 	cmpq	$0xe, %r10
    000002dd: 	jbe	.Ltmp131 # Offset: 733
    000002e3: 	movq	%rdx, %r10
    000002e6: 	movq	%r8, %rcx
    000002e9: 	movq	%r9, %rax
    000002ec: 	andq	$-0x10, %r10
    000002f0: 	addq	%r8, %r10
    000002f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp132:
    000002f8: 	movdqu	(%rcx), %xmm0
    000002fc: 	addq	$0x10, %rcx
    00000300: 	addq	$0x20, %rax
    00000304: 	movd	%xmm0, %esi
    00000308: 	movb	%sil, -0x20(%rax)
    0000030c: 	movaps	%xmm0, 0x68(%rsp)
    00000311: 	movzbl	0x69(%rsp), %esi
    00000316: 	movb	%sil, -0x1e(%rax)
    0000031a: 	movaps	%xmm0, 0x58(%rsp)
    0000031f: 	movzbl	0x5a(%rsp), %esi
    00000324: 	movb	%sil, -0x1c(%rax)
    00000328: 	movaps	%xmm0, 0x48(%rsp)
    0000032d: 	movzbl	0x4b(%rsp), %esi
    00000332: 	movb	%sil, -0x1a(%rax)
    00000336: 	movaps	%xmm0, 0x38(%rsp)
    0000033b: 	movzbl	0x3c(%rsp), %esi
    00000340: 	movb	%sil, -0x18(%rax)
    00000344: 	movaps	%xmm0, 0x28(%rsp)
    00000349: 	movzbl	0x2d(%rsp), %esi
    0000034e: 	movb	%sil, -0x16(%rax)
    00000352: 	movaps	%xmm0, 0x18(%rsp)
    00000357: 	movzbl	0x1e(%rsp), %esi
    0000035c: 	movb	%sil, -0x14(%rax)
    00000360: 	movaps	%xmm0, 0x8(%rsp)
    00000365: 	movzbl	0xf(%rsp), %esi
    0000036a: 	movb	%sil, -0x12(%rax)
    0000036e: 	movaps	%xmm0, -0x8(%rsp)
    00000373: 	movzbl	(%rsp), %esi
    00000377: 	movb	%sil, -0x10(%rax)
    0000037b: 	movaps	%xmm0, -0x18(%rsp)
    00000380: 	movzbl	-0xf(%rsp), %esi
    00000385: 	movb	%sil, -0xe(%rax)
    00000389: 	movaps	%xmm0, -0x28(%rsp)
    0000038e: 	movzbl	-0x1e(%rsp), %esi
    00000393: 	movb	%sil, -0xc(%rax)
    00000397: 	movaps	%xmm0, -0x38(%rsp)
    0000039c: 	movzbl	-0x2d(%rsp), %esi
    000003a1: 	movb	%sil, -0xa(%rax)
    000003a5: 	movaps	%xmm0, -0x48(%rsp)
    000003aa: 	movzbl	-0x3c(%rsp), %esi
    000003af: 	movb	%sil, -0x8(%rax)
    000003b3: 	movaps	%xmm0, -0x58(%rsp)
    000003b8: 	movzbl	-0x4b(%rsp), %esi
    000003bd: 	movb	%sil, -0x6(%rax)
    000003c1: 	movaps	%xmm0, -0x68(%rsp)
    000003c6: 	movzbl	-0x5a(%rsp), %esi
    000003cb: 	movb	%sil, -0x4(%rax)
    000003cf: 	movaps	%xmm0, -0x78(%rsp)
    000003d4: 	movzbl	-0x69(%rsp), %esi
    000003d9: 	movb	%sil, -0x2(%rax)
    000003dd: 	cmpq	%r10, %rcx
    000003e0: 	jne	.Ltmp132 # Offset: 992
    000003e6: 	movq	%rdx, %rcx
    000003e9: 	andq	$-0x10, %rcx
    000003ed: 	leaq	(%r8,%rcx), %r10
    000003f1: 	leaq	(%r9,%rcx,2), %r9
    000003f5: 	cmpq	%rcx, %rdx
    000003f8: 	je	.Ltmp133 # Offset: 1016
    000003fe: 	movq	%rdx, %r11
    00000401: 	subq	%rcx, %r11
    00000404: 	leaq	-0x1(%r11), %rax
    00000408: 	cmpq	$0x6, %rax
    0000040c: 	jbe	.Ltmp134 # Offset: 1036
.Ltmp137:
    0000040e: 	movq	(%r8,%rcx), %rax
    00000412: 	leaq	0x1(%rdi,%rcx,2), %rsi
    00000417: 	movq	%rax, %rdi
    0000041a: 	movb	%al, (%rsi)
    0000041c: 	shrq	$0x10, %rdi
    00000420: 	movb	%ah, 0x2(%rsi)
    00000423: 	movb	%dil, 0x4(%rsi)
    00000427: 	movq	%rax, %rdi
    0000042a: 	shrq	$0x18, %rdi
    0000042e: 	movb	%dil, 0x6(%rsi)
    00000432: 	movq	%rax, %rdi
    00000435: 	shrq	$0x20, %rdi
    00000439: 	movb	%dil, 0x8(%rsi)
    0000043d: 	movq	%rax, %rdi
    00000440: 	shrq	$0x28, %rdi
    00000444: 	movb	%dil, 0xa(%rsi)
    00000448: 	movq	%rax, %rdi
    0000044b: 	shrq	$0x38, %rax
    0000044f: 	movb	%al, 0xe(%rsi)
    00000452: 	movq	%r11, %rax
    00000455: 	shrq	$0x30, %rdi
    00000459: 	andq	$-0x8, %rax
    0000045d: 	movb	%dil, 0xc(%rsi)
    00000461: 	addq	%rax, %r10
    00000464: 	leaq	(%r9,%rax,2), %r9
    00000468: 	addq	%rax, %rcx
    0000046b: 	cmpq	%r11, %rax
    0000046e: 	je	.Ltmp133 # Offset: 1134
.Ltmp134:
    00000470: 	movzbl	(%r10), %eax
    00000474: 	movb	%al, (%r9)
    00000477: 	leaq	0x1(%rcx), %rax
    0000047b: 	cmpq	%rax, %rdx
    0000047e: 	jbe	.Ltmp133 # Offset: 1150
    00000480: 	movzbl	0x1(%r10), %eax
    00000485: 	movb	%al, 0x2(%r9)
    00000489: 	leaq	0x2(%rcx), %rax
    0000048d: 	cmpq	%rax, %rdx
    00000490: 	jbe	.Ltmp133 # Offset: 1168
    00000492: 	movzbl	0x2(%r10), %eax
    00000497: 	movb	%al, 0x4(%r9)
    0000049b: 	leaq	0x3(%rcx), %rax
    0000049f: 	cmpq	%rax, %rdx
    000004a2: 	jbe	.Ltmp133 # Offset: 1186
    000004a4: 	movzbl	0x3(%r10), %eax
    000004a9: 	movb	%al, 0x6(%r9)
    000004ad: 	leaq	0x4(%rcx), %rax
    000004b1: 	cmpq	%rax, %rdx
    000004b4: 	jbe	.Ltmp133 # Offset: 1204
    000004b6: 	movzbl	0x4(%r10), %eax
    000004bb: 	movb	%al, 0x8(%r9)
    000004bf: 	leaq	0x5(%rcx), %rax
    000004c3: 	cmpq	%rax, %rdx
    000004c6: 	jbe	.Ltmp133 # Offset: 1222
    000004c8: 	movzbl	0x5(%r10), %eax
    000004cd: 	addq	$0x6, %rcx
    000004d1: 	movb	%al, 0xa(%r9)
    000004d5: 	cmpq	%rcx, %rdx
    000004d8: 	jbe	.Ltmp133 # Offset: 1240
    000004da: 	movzbl	0x6(%r10), %eax
    000004df: 	movb	%al, 0xc(%r9)
.Ltmp133:
    000004e3: 	addq	$0x1f0, %rsp
    000004ea: 	popq	%rbx
    000004eb: 	popq	%rbp
    000004ec: 	popq	%r12
    000004ee: 	popq	%r14
    000004f0: 	retq # Offset: 1264
    000004f1: 	nopl	(%rax) # Size: 7
.Ltmp130:
    000004f8: 	xorl	%eax, %eax
    000004fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp135:
    00000500: 	movzbl	(%r8,%rax), %ecx
    00000505: 	movb	%cl, 0x1(%rdi,%rax,2)
    00000509: 	addq	$0x1, %rax
    0000050d: 	cmpq	%rax, %rdx
    00000510: 	jne	.Ltmp135 # Offset: 1296
    00000512: 	addq	$0x1f0, %rsp
    00000519: 	popq	%rbx
    0000051a: 	popq	%rbp
    0000051b: 	popq	%r12
    0000051d: 	popq	%r14
    0000051f: 	retq # Offset: 1311
.Ltmp125:
    00000520: 	xorl	%eax, %eax
    00000522: 	nopw	(%rax,%rax) # Size: 6
.Ltmp136:
    00000528: 	movzbl	(%r9,%rax), %ecx
    0000052d: 	movb	%cl, (%rdi,%rax,2)
    00000530: 	addq	$0x1, %rax
    00000534: 	cmpq	%rax, %rdx
    00000537: 	jne	.Ltmp136 # Offset: 1335
    00000539: 	jmp	.Ltmp128 # Offset: 1337
    0000053e: 	nop # Size: 2
.Ltmp124:
    00000540: 	retq # Offset: 1344
.Ltmp131:
    00000541: 	movq	%rdx, %r11
    00000544: 	movq	%r8, %r10
    00000547: 	xorl	%ecx, %ecx
    00000549: 	jmp	.Ltmp137 # Offset: 1353
.Ltmp126:
    0000054e: 	movq	%rdx, %r12
    00000551: 	movq	%rdi, %r14
    00000554: 	movq	%rsi, %rbp
    00000557: 	xorl	%ecx, %ecx
    00000559: 	jmp	.Ltmp138 # Offset: 1369
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version3IhEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version4IhEvPT_PKS0_S3_i" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x4720
  Size        : 0x6d5
  MaxSize     : 0x6e0
  Offset      : 0x4720
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version4IhEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r9
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x200, %rsp
    00000018: 	movl	%ecx, -0x6c(%rsp)
    0000001c: 	testl	%ecx, %ecx
    0000001e: 	jle	.Ltmp139 # Offset: 30
    00000024: 	xorl	%ebx, %ebx
    00000026: 	movq	%rsi, %rax
    00000029: 	movl	%ecx, %r13d
    0000002c: 	movl	%ebx, -0x70(%rsp)
.Ltmp151:
    00000030: 	addl	$0x800, -0x70(%rsp)
    00000038: 	movl	-0x6c(%rsp), %edx
    0000003c: 	movl	-0x70(%rsp), %ebx
    00000040: 	cmpl	%edx, %ebx
    00000042: 	jg	.Ltmp140 # Offset: 66
    00000048: 	leaq	0x800(%rax), %rbp
    0000004f: 	movl	$0x800, %r8d
    00000055: 	cmpq	%rbp, %rdi
    00000058: 	jae	.Ltmp141 # Offset: 88
    0000005a: 	leaq	0xfff(%rdi), %rdx
    00000061: 	cmpq	%rdx, %rax
    00000064: 	jb	.Ltmp142 # Offset: 100
.Ltmp141:
    0000006a: 	movl	$0x800, %edx
    0000006f: 	movl	$0x1000, %r14d
    00000075: 	leaq	0x800(%rax), %rbp
.Ltmp153:
    0000007c: 	movq	%r8, %r11
    0000007f: 	movl	-0x70(%rsp), %ebx
    00000083: 	movq	%rax, %rsi
    00000086: 	movq	%rdi, %rcx
    00000089: 	andq	$-0x10, %r11
    0000008d: 	addq	%rax, %r11
.Ltmp143:
    00000090: 	movdqu	(%rsi), %xmm0
    00000094: 	addq	$0x10, %rsi
    00000098: 	addq	$0x20, %rcx
    0000009c: 	movd	%xmm0, %r10d
    000000a1: 	movb	%r10b, -0x20(%rcx)
    000000a5: 	movaps	%xmm0, 0x1e8(%rsp)
    000000ad: 	movzbl	0x1e9(%rsp), %r10d
    000000b6: 	movb	%r10b, -0x1e(%rcx)
    000000ba: 	movaps	%xmm0, 0x1d8(%rsp)
    000000c2: 	movzbl	0x1da(%rsp), %r10d
    000000cb: 	movb	%r10b, -0x1c(%rcx)
    000000cf: 	movaps	%xmm0, 0x1c8(%rsp)
    000000d7: 	movzbl	0x1cb(%rsp), %r10d
    000000e0: 	movb	%r10b, -0x1a(%rcx)
    000000e4: 	movaps	%xmm0, 0x1b8(%rsp)
    000000ec: 	movzbl	0x1bc(%rsp), %r10d
    000000f5: 	movb	%r10b, -0x18(%rcx)
    000000f9: 	movaps	%xmm0, 0x1a8(%rsp)
    00000101: 	movzbl	0x1ad(%rsp), %r10d
    0000010a: 	movb	%r10b, -0x16(%rcx)
    0000010e: 	movaps	%xmm0, 0x198(%rsp)
    00000116: 	movzbl	0x19e(%rsp), %r10d
    0000011f: 	movb	%r10b, -0x14(%rcx)
    00000123: 	movaps	%xmm0, 0x188(%rsp)
    0000012b: 	movzbl	0x18f(%rsp), %r10d
    00000134: 	movb	%r10b, -0x12(%rcx)
    00000138: 	movaps	%xmm0, 0x178(%rsp)
    00000140: 	movzbl	0x180(%rsp), %r10d
    00000149: 	movb	%r10b, -0x10(%rcx)
    0000014d: 	movaps	%xmm0, 0x168(%rsp)
    00000155: 	movzbl	0x171(%rsp), %r10d
    0000015e: 	movb	%r10b, -0xe(%rcx)
    00000162: 	movaps	%xmm0, 0x158(%rsp)
    0000016a: 	movzbl	0x162(%rsp), %r10d
    00000173: 	movb	%r10b, -0xc(%rcx)
    00000177: 	movaps	%xmm0, 0x148(%rsp)
    0000017f: 	movzbl	0x153(%rsp), %r10d
    00000188: 	movb	%r10b, -0xa(%rcx)
    0000018c: 	movaps	%xmm0, 0x138(%rsp)
    00000194: 	movzbl	0x144(%rsp), %r10d
    0000019d: 	movb	%r10b, -0x8(%rcx)
    000001a1: 	movaps	%xmm0, 0x128(%rsp)
    000001a9: 	movzbl	0x135(%rsp), %r10d
    000001b2: 	movb	%r10b, -0x6(%rcx)
    000001b6: 	movaps	%xmm0, 0x118(%rsp)
    000001be: 	movzbl	0x126(%rsp), %r10d
    000001c7: 	movb	%r10b, -0x4(%rcx)
    000001cb: 	movaps	%xmm0, 0x108(%rsp)
    000001d3: 	movzbl	0x117(%rsp), %r10d
    000001dc: 	movb	%r10b, -0x2(%rcx)
    000001e0: 	cmpq	%rsi, %r11
    000001e3: 	jne	.Ltmp143 # Offset: 483
    000001e9: 	movq	%r8, %rcx
    000001ec: 	movl	%ebx, -0x70(%rsp)
    000001f0: 	andq	$-0x10, %rcx
    000001f4: 	leaq	(%rax,%rcx), %r11
    000001f8: 	leaq	(%rdi,%rcx,2), %r10
    000001fc: 	cmpq	%r8, %rcx
    000001ff: 	je	.Ltmp144 # Offset: 511
.Ltmp154:
    00000205: 	movq	%r8, %r12
    00000208: 	subq	%rcx, %r12
    0000020b: 	leaq	-0x1(%r12), %rsi
    00000210: 	cmpq	$0x6, %rsi
    00000214: 	jbe	.Ltmp145 # Offset: 532
    0000021a: 	movq	(%rax,%rcx), %rax
    0000021e: 	leaq	(%rdi,%rcx,2), %rsi
    00000222: 	movq	%rax, %r15
    00000225: 	movq	%rax, 0x100(%rsp)
    0000022d: 	movq	%rax, %rbx
    00000230: 	shrq	$0x10, %r15
    00000234: 	movb	%al, (%rsi)
    00000236: 	shrq	$0x38, %rbx
    0000023a: 	movq	%rax, 0xf8(%rsp)
    00000242: 	movb	%ah, 0x2(%rsi)
    00000245: 	movq	%rax, 0xf0(%rsp)
    0000024d: 	movb	%r15b, 0x4(%rsi)
    00000251: 	movq	%rax, %r15
    00000254: 	shrq	$0x18, %r15
    00000258: 	movq	%rax, 0xe8(%rsp)
    00000260: 	movb	%r15b, 0x6(%rsi)
    00000264: 	movq	%rax, %r15
    00000267: 	shrq	$0x20, %r15
    0000026b: 	movq	%rax, 0xe0(%rsp)
    00000273: 	movb	%r15b, 0x8(%rsi)
    00000277: 	movq	%rax, %r15
    0000027a: 	shrq	$0x28, %r15
    0000027e: 	movq	%rax, 0xd8(%rsp)
    00000286: 	movb	%r15b, 0xa(%rsi)
    0000028a: 	movq	%rax, %r15
    0000028d: 	shrq	$0x30, %r15
    00000291: 	movq	%rax, 0xd0(%rsp)
    00000299: 	movb	%r15b, 0xc(%rsi)
    0000029d: 	movq	%rax, 0xc8(%rsp)
    000002a5: 	movq	%r12, %rax
    000002a8: 	andq	$-0x8, %rax
    000002ac: 	movb	%bl, 0xe(%rsi)
    000002af: 	addq	%rax, %r11
    000002b2: 	leaq	(%r10,%rax,2), %r10
    000002b6: 	addq	%rax, %rcx
    000002b9: 	cmpq	%rax, %r12
    000002bc: 	je	.Ltmp144 # Offset: 700
.Ltmp145:
    000002be: 	movzbl	(%r11), %eax
    000002c2: 	movb	%al, (%r10)
    000002c5: 	leaq	0x1(%rcx), %rax
    000002c9: 	cmpq	%rax, %rdx
    000002cc: 	jbe	.Ltmp144 # Offset: 716
    000002ce: 	movzbl	0x1(%r11), %eax
    000002d3: 	movb	%al, 0x2(%r10)
    000002d7: 	leaq	0x2(%rcx), %rax
    000002db: 	cmpq	%rax, %rdx
    000002de: 	jbe	.Ltmp144 # Offset: 734
    000002e0: 	movzbl	0x2(%r11), %eax
    000002e5: 	movb	%al, 0x4(%r10)
    000002e9: 	leaq	0x3(%rcx), %rax
    000002ed: 	cmpq	%rax, %rdx
    000002f0: 	jbe	.Ltmp144 # Offset: 752
    000002f2: 	movzbl	0x3(%r11), %eax
    000002f7: 	movb	%al, 0x6(%r10)
    000002fb: 	leaq	0x4(%rcx), %rax
    000002ff: 	cmpq	%rax, %rdx
    00000302: 	jbe	.Ltmp144 # Offset: 770
    00000304: 	movzbl	0x4(%r11), %eax
    00000309: 	movb	%al, 0x8(%r10)
    0000030d: 	leaq	0x5(%rcx), %rax
    00000311: 	cmpq	%rax, %rdx
    00000314: 	jbe	.Ltmp144 # Offset: 788
    00000316: 	movzbl	0x5(%r11), %eax
    0000031b: 	addq	$0x6, %rcx
    0000031f: 	movb	%al, 0xa(%r10)
    00000323: 	cmpq	%rcx, %rdx
    00000326: 	jbe	.Ltmp144 # Offset: 806
    00000328: 	movzbl	0x6(%r11), %eax
    0000032d: 	movb	%al, 0xc(%r10)
.Ltmp144:
    00000331: 	movl	$0x1, %r10d
.Ltmp156:
    00000337: 	testq	%rdx, %rdx
    0000033a: 	leaq	(%rdx,%rdx), %rax
    0000033e: 	leaq	(%r9,%r8), %rcx
    00000342: 	movl	$0x2, %ebx
    00000347: 	cmoveq	%rbx, %rax
    0000034b: 	leaq	0x1(%rdi), %rsi
    0000034f: 	addq	%rdi, %rax
    00000352: 	cmpq	%rax, %r9
    00000355: 	setae	%al
    00000358: 	cmpq	%rcx, %rsi
    0000035b: 	setae	%cl
    0000035e: 	orb	%cl, %al
    00000360: 	je	.Ltmp146 # Offset: 864
    00000366: 	testb	%r10b, %r10b
    00000369: 	je	.Ltmp146 # Offset: 873
    0000036f: 	cmpq	$0xf, %rdx
    00000373: 	jbe	.Ltmp147 # Offset: 883
    00000379: 	movq	%r8, %r11
    0000037c: 	movl	-0x70(%rsp), %ebx
    00000380: 	movq	%r9, %rcx
    00000383: 	movq	%rsi, %rax
    00000386: 	andq	$-0x10, %r11
    0000038a: 	addq	%r9, %r11
    0000038d: 	nopl	(%rax) # Size: 3
.Ltmp148:
    00000390: 	movdqu	(%rcx), %xmm0
    00000394: 	addq	$0x10, %rcx
    00000398: 	addq	$0x20, %rax
    0000039c: 	movd	%xmm0, %r10d
    000003a1: 	movb	%r10b, -0x20(%rax)
    000003a5: 	movaps	%xmm0, 0x78(%rsp)
    000003aa: 	movzbl	0x79(%rsp), %r10d
    000003b0: 	movb	%r10b, -0x1e(%rax)
    000003b4: 	movaps	%xmm0, 0x68(%rsp)
    000003b9: 	movzbl	0x6a(%rsp), %r10d
    000003bf: 	movb	%r10b, -0x1c(%rax)
    000003c3: 	movaps	%xmm0, 0x58(%rsp)
    000003c8: 	movzbl	0x5b(%rsp), %r10d
    000003ce: 	movb	%r10b, -0x1a(%rax)
    000003d2: 	movaps	%xmm0, 0x48(%rsp)
    000003d7: 	movzbl	0x4c(%rsp), %r10d
    000003dd: 	movb	%r10b, -0x18(%rax)
    000003e1: 	movaps	%xmm0, 0x38(%rsp)
    000003e6: 	movzbl	0x3d(%rsp), %r10d
    000003ec: 	movb	%r10b, -0x16(%rax)
    000003f0: 	movaps	%xmm0, 0x28(%rsp)
    000003f5: 	movzbl	0x2e(%rsp), %r10d
    000003fb: 	movb	%r10b, -0x14(%rax)
    000003ff: 	movaps	%xmm0, 0x18(%rsp)
    00000404: 	movzbl	0x1f(%rsp), %r10d
    0000040a: 	movb	%r10b, -0x12(%rax)
    0000040e: 	movaps	%xmm0, 0x8(%rsp)
    00000413: 	movzbl	0x10(%rsp), %r10d
    00000419: 	movb	%r10b, -0x10(%rax)
    0000041d: 	movaps	%xmm0, -0x8(%rsp)
    00000422: 	movzbl	0x1(%rsp), %r10d
    00000428: 	movb	%r10b, -0xe(%rax)
    0000042c: 	movaps	%xmm0, -0x18(%rsp)
    00000431: 	movzbl	-0xe(%rsp), %r10d
    00000437: 	movb	%r10b, -0xc(%rax)
    0000043b: 	movaps	%xmm0, -0x28(%rsp)
    00000440: 	movzbl	-0x1d(%rsp), %r10d
    00000446: 	movb	%r10b, -0xa(%rax)
    0000044a: 	movaps	%xmm0, -0x38(%rsp)
    0000044f: 	movzbl	-0x2c(%rsp), %r10d
    00000455: 	movb	%r10b, -0x8(%rax)
    00000459: 	movaps	%xmm0, -0x48(%rsp)
    0000045e: 	movzbl	-0x3b(%rsp), %r10d
    00000464: 	movb	%r10b, -0x6(%rax)
    00000468: 	movaps	%xmm0, -0x58(%rsp)
    0000046d: 	movzbl	-0x4a(%rsp), %r10d
    00000473: 	movb	%r10b, -0x4(%rax)
    00000477: 	movaps	%xmm0, -0x68(%rsp)
    0000047c: 	movzbl	-0x59(%rsp), %r10d
    00000482: 	movb	%r10b, -0x2(%rax)
    00000486: 	cmpq	%r11, %rcx
    00000489: 	jne	.Ltmp148 # Offset: 1161
    0000048f: 	movq	%r8, %rcx
    00000492: 	movl	%ebx, -0x70(%rsp)
    00000496: 	andq	$-0x10, %rcx
    0000049a: 	leaq	(%r9,%rcx), %r11
    0000049e: 	leaq	(%rsi,%rcx,2), %rsi
    000004a2: 	cmpq	%r8, %rcx
    000004a5: 	je	.Ltmp149 # Offset: 1189
.Ltmp158:
    000004ab: 	subq	%rcx, %r8
    000004ae: 	leaq	-0x1(%r8), %rax
    000004b2: 	cmpq	$0x6, %rax
    000004b6: 	jbe	.Ltmp150 # Offset: 1206
    000004bc: 	movq	(%r9,%rcx), %rax
    000004c0: 	leaq	0x1(%rdi,%rcx,2), %r10
    000004c5: 	movq	%rax, %r12
    000004c8: 	movzbl	%ah, %ebx
    000004cb: 	movq	%rax, 0xc0(%rsp)
    000004d3: 	shrq	$0x10, %r12
    000004d7: 	movb	%al, (%r10)
    000004da: 	movq	%rax, 0xb8(%rsp)
    000004e2: 	movb	%bl, 0x2(%r10)
    000004e6: 	movq	%rax, %rbx
    000004e9: 	movq	%rax, 0xb0(%rsp)
    000004f1: 	shrq	$0x38, %rbx
    000004f5: 	movb	%r12b, 0x4(%r10)
    000004f9: 	movq	%rax, %r12
    000004fc: 	shrq	$0x18, %r12
    00000500: 	movq	%rax, 0xa8(%rsp)
    00000508: 	movb	%r12b, 0x6(%r10)
    0000050c: 	movq	%rax, %r12
    0000050f: 	shrq	$0x20, %r12
    00000513: 	movq	%rax, 0xa0(%rsp)
    0000051b: 	movb	%r12b, 0x8(%r10)
    0000051f: 	movq	%rax, %r12
    00000522: 	shrq	$0x28, %r12
    00000526: 	movq	%rax, 0x98(%rsp)
    0000052e: 	movb	%r12b, 0xa(%r10)
    00000532: 	movq	%rax, %r12
    00000535: 	shrq	$0x30, %r12
    00000539: 	movq	%rax, 0x90(%rsp)
    00000541: 	movb	%r12b, 0xc(%r10)
    00000545: 	movq	%rax, 0x88(%rsp)
    0000054d: 	movq	%r8, %rax
    00000550: 	andq	$-0x8, %rax
    00000554: 	movb	%bl, 0xe(%r10)
    00000558: 	addq	%rax, %r11
    0000055b: 	leaq	(%rsi,%rax,2), %rsi
    0000055f: 	addq	%rax, %rcx
    00000562: 	cmpq	%rax, %r8
    00000565: 	je	.Ltmp149 # Offset: 1381
.Ltmp150:
    00000567: 	movzbl	(%r11), %eax
    0000056b: 	movb	%al, (%rsi)
    0000056d: 	leaq	0x1(%rcx), %rax
    00000571: 	cmpq	%rdx, %rax
    00000574: 	jae	.Ltmp149 # Offset: 1396
    00000576: 	movzbl	0x1(%r11), %eax
    0000057b: 	movb	%al, 0x2(%rsi)
    0000057e: 	leaq	0x2(%rcx), %rax
    00000582: 	cmpq	%rdx, %rax
    00000585: 	jae	.Ltmp149 # Offset: 1413
    00000587: 	movzbl	0x2(%r11), %eax
    0000058c: 	movb	%al, 0x4(%rsi)
    0000058f: 	leaq	0x3(%rcx), %rax
    00000593: 	cmpq	%rdx, %rax
    00000596: 	jae	.Ltmp149 # Offset: 1430
    00000598: 	movzbl	0x3(%r11), %eax
    0000059d: 	movb	%al, 0x6(%rsi)
    000005a0: 	leaq	0x4(%rcx), %rax
    000005a4: 	cmpq	%rdx, %rax
    000005a7: 	jae	.Ltmp149 # Offset: 1447
    000005a9: 	movzbl	0x4(%r11), %eax
    000005ae: 	movb	%al, 0x8(%rsi)
    000005b1: 	leaq	0x5(%rcx), %rax
    000005b5: 	cmpq	%rdx, %rax
    000005b8: 	jae	.Ltmp149 # Offset: 1464
    000005ba: 	movzbl	0x5(%r11), %eax
    000005bf: 	addq	$0x6, %rcx
    000005c3: 	movb	%al, 0xa(%rsi)
    000005c6: 	cmpq	%rcx, %rdx
    000005c9: 	jbe	.Ltmp149 # Offset: 1481
    000005cb: 	movzbl	0x6(%r11), %eax
    000005d0: 	movb	%al, 0xc(%rsi)
.Ltmp149:
    000005d3: 	movl	-0x6c(%rsp), %ebx
    000005d7: 	addq	%r14, %rdi
    000005da: 	movq	%rbp, %rax
    000005dd: 	addq	%rdx, %r9
    000005e0: 	subl	$0x800, %r13d
    000005e7: 	cmpl	%ebx, -0x70(%rsp)
    000005eb: 	jl	.Ltmp151 # Offset: 1515
.Ltmp139:
    000005f1: 	addq	$0x200, %rsp
    000005f8: 	popq	%rbx
    000005f9: 	popq	%rbp
    000005fa: 	popq	%r12
    000005fc: 	popq	%r13
    000005fe: 	popq	%r14
    00000600: 	popq	%r15
    00000602: 	retq # Offset: 1538
    00000603: 	nopl	(%rax,%rax) # Size: 5
.Ltmp140:
    00000608: 	leal	(%r13,%r13), %r14d
    0000060d: 	movslq	%r13d, %rdx
    00000610: 	movq	%rax, %rbp
    00000613: 	movslq	%r14d, %r14
    00000616: 	testq	%rdx, %rdx
    00000619: 	je	.Ltmp149 # Offset: 1561
    0000061b: 	cmpq	$0x7, %rdx
    0000061f: 	leaq	-0x1(%rdi,%rdx,2), %rcx
    00000624: 	leaq	(%rax,%rdx), %rbp
    00000628: 	movq	%rdx, %r8
    0000062b: 	seta	%sil
    0000062f: 	cmpq	%rcx, %rax
    00000632: 	setae	%cl
    00000635: 	cmpq	%rbp, %rdi
    00000638: 	movl	%esi, %r10d
    0000063b: 	setae	%r11b
    0000063f: 	orb	%r11b, %cl
    00000642: 	je	.Ltmp152 # Offset: 1602
    00000644: 	testb	%sil, %sil
    00000647: 	je	.Ltmp152 # Offset: 1607
    00000649: 	cmpq	$0xf, %rdx
    0000064d: 	ja	.Ltmp153 # Offset: 1613
    00000653: 	movq	%rdi, %r10
    00000656: 	movq	%rax, %r11
    00000659: 	xorl	%ecx, %ecx
    0000065b: 	jmp	.Ltmp154 # Offset: 1627
.Ltmp142:
    00000660: 	movl	$0x1, %r10d
    00000666: 	movl	$0x800, %edx
    0000066b: 	movl	$0x1000, %r14d
.Ltmp152:
    00000671: 	movl	-0x70(%rsp), %ebx
    00000675: 	xorl	%ecx, %ecx
    00000677: 	nopw	(%rax,%rax) # Size: 9
.Ltmp155:
    00000680: 	movzbl	(%rax,%rcx), %esi
    00000684: 	movb	%sil, (%rdi,%rcx,2)
    00000688: 	addq	$0x1, %rcx
    0000068c: 	cmpq	%rdx, %rcx
    0000068f: 	jb	.Ltmp155 # Offset: 1679
    00000691: 	movl	%ebx, -0x70(%rsp)
    00000695: 	jmp	.Ltmp156 # Offset: 1685
    0000069a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp146:
    000006a0: 	movl	-0x70(%rsp), %ebx
    000006a4: 	xorl	%eax, %eax
    000006a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp157:
    000006b0: 	movzbl	(%r9,%rax), %ecx
    000006b5: 	movb	%cl, 0x1(%rdi,%rax,2)
    000006b9: 	addq	$0x1, %rax
    000006bd: 	cmpq	%rdx, %rax
    000006c0: 	jb	.Ltmp157 # Offset: 1728
    000006c2: 	movl	%ebx, -0x70(%rsp)
    000006c6: 	jmp	.Ltmp149 # Offset: 1734
.Ltmp147:
    000006cb: 	movq	%r9, %r11
    000006ce: 	xorl	%ecx, %ecx
    000006d0: 	jmp	.Ltmp158 # Offset: 1744
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version4IhEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version5IhEvPT_PKS0_S3_i" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x4e00
  Size        : 0x6bd
  MaxSize     : 0x6c0
  Offset      : 0x4e00
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version5IhEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x200, %rsp
    00000015: 	movl	%ecx, -0x6c(%rsp)
    00000019: 	testl	%ecx, %ecx
    0000001b: 	jle	.Ltmp159 # Offset: 27
    00000021: 	xorl	%ebx, %ebx
    00000023: 	movq	%rsi, %r8
    00000026: 	movl	%ecx, %ebp
    00000028: 	movq	%rdx, %rsi
    0000002b: 	movl	%ebx, -0x70(%rsp)
    0000002f: 	nop # Size: 1
.Ltmp171:
    00000030: 	addl	$0x800, -0x70(%rsp)
    00000038: 	movl	-0x6c(%rsp), %ebx
    0000003c: 	movl	-0x70(%rsp), %eax
    00000040: 	cmpl	%ebx, %eax
    00000042: 	jg	.Ltmp160 # Offset: 66
    00000048: 	movl	$0x800, %r12d
    0000004e: 	movl	$0x1000, %r13d
    00000054: 	movl	$0x800, %edx
.Ltmp172:
    00000059: 	movslq	%edx, %r10
    0000005c: 	testl	%edx, %edx
    0000005e: 	movl	$0x1, %ebx
    00000063: 	movl	%edx, %r11d
    00000066: 	leaq	-0x1(%r10,%r10), %rax
    0000006b: 	cmovleq	%rbx, %rax
    0000006f: 	addq	%rdi, %rax
    00000072: 	cmpq	%rax, %r8
    00000075: 	movl	$0x1, %eax
    0000007a: 	setae	%cl
    0000007d: 	testl	%edx, %edx
    0000007f: 	cmovgq	%r10, %rax
    00000083: 	addq	%r8, %rax
    00000086: 	cmpq	%rax, %rdi
    00000089: 	setae	%al
    0000008c: 	orb	%al, %cl
    0000008e: 	je	.Ltmp161 # Offset: 142
    00000094: 	cmpl	$0x7, %edx
    00000097: 	jle	.Ltmp161 # Offset: 151
    0000009d: 	testl	%edx, %edx
    0000009f: 	movl	$0x1, %r14d
    000000a5: 	cmovgl	%edx, %r14d
    000000a9: 	cmpl	$0xf, %edx
    000000ac: 	jle	.Ltmp162 # Offset: 172
    000000b2: 	movl	%r14d, %r9d
    000000b5: 	movl	-0x70(%rsp), %ebx
    000000b9: 	movq	%r8, %rcx
    000000bc: 	movq	%rdi, %rax
    000000bf: 	shrl	$0x4, %r9d
    000000c3: 	subl	$0x1, %r9d
    000000c7: 	shlq	$0x4, %r9
    000000cb: 	leaq	0x10(%r8,%r9), %r15
.Ltmp163:
    000000d0: 	movdqu	(%rcx), %xmm0
    000000d4: 	addq	$0x10, %rcx
    000000d8: 	addq	$0x20, %rax
    000000dc: 	movd	%xmm0, %r9d
    000000e1: 	movb	%r9b, -0x20(%rax)
    000000e5: 	movaps	%xmm0, 0x1e8(%rsp)
    000000ed: 	movzbl	0x1e9(%rsp), %r9d
    000000f6: 	movb	%r9b, -0x1e(%rax)
    000000fa: 	movaps	%xmm0, 0x1d8(%rsp)
    00000102: 	movzbl	0x1da(%rsp), %r9d
    0000010b: 	movb	%r9b, -0x1c(%rax)
    0000010f: 	movaps	%xmm0, 0x1c8(%rsp)
    00000117: 	movzbl	0x1cb(%rsp), %r9d
    00000120: 	movb	%r9b, -0x1a(%rax)
    00000124: 	movaps	%xmm0, 0x1b8(%rsp)
    0000012c: 	movzbl	0x1bc(%rsp), %r9d
    00000135: 	movb	%r9b, -0x18(%rax)
    00000139: 	movaps	%xmm0, 0x1a8(%rsp)
    00000141: 	movzbl	0x1ad(%rsp), %r9d
    0000014a: 	movb	%r9b, -0x16(%rax)
    0000014e: 	movaps	%xmm0, 0x198(%rsp)
    00000156: 	movzbl	0x19e(%rsp), %r9d
    0000015f: 	movb	%r9b, -0x14(%rax)
    00000163: 	movaps	%xmm0, 0x188(%rsp)
    0000016b: 	movzbl	0x18f(%rsp), %r9d
    00000174: 	movb	%r9b, -0x12(%rax)
    00000178: 	movaps	%xmm0, 0x178(%rsp)
    00000180: 	movzbl	0x180(%rsp), %r9d
    00000189: 	movb	%r9b, -0x10(%rax)
    0000018d: 	movaps	%xmm0, 0x168(%rsp)
    00000195: 	movzbl	0x171(%rsp), %r9d
    0000019e: 	movb	%r9b, -0xe(%rax)
    000001a2: 	movaps	%xmm0, 0x158(%rsp)
    000001aa: 	movzbl	0x162(%rsp), %r9d
    000001b3: 	movb	%r9b, -0xc(%rax)
    000001b7: 	movaps	%xmm0, 0x148(%rsp)
    000001bf: 	movzbl	0x153(%rsp), %r9d
    000001c8: 	movb	%r9b, -0xa(%rax)
    000001cc: 	movaps	%xmm0, 0x138(%rsp)
    000001d4: 	movzbl	0x144(%rsp), %r9d
    000001dd: 	movb	%r9b, -0x8(%rax)
    000001e1: 	movaps	%xmm0, 0x128(%rsp)
    000001e9: 	movzbl	0x135(%rsp), %r9d
    000001f2: 	movb	%r9b, -0x6(%rax)
    000001f6: 	movaps	%xmm0, 0x118(%rsp)
    000001fe: 	movzbl	0x126(%rsp), %r9d
    00000207: 	movb	%r9b, -0x4(%rax)
    0000020b: 	movaps	%xmm0, 0x108(%rsp)
    00000213: 	movzbl	0x117(%rsp), %r9d
    0000021c: 	movb	%r9b, -0x2(%rax)
    00000220: 	cmpq	%r15, %rcx
    00000223: 	jne	.Ltmp163 # Offset: 547
    00000229: 	movl	%r14d, %eax
    0000022c: 	movl	%ebx, -0x70(%rsp)
    00000230: 	andl	$-0x10, %eax
    00000233: 	movl	%eax, %r9d
    00000236: 	cmpl	%eax, %r14d
    00000239: 	je	.Ltmp164 # Offset: 569
.Ltmp176:
    0000023f: 	subl	%eax, %r14d
    00000242: 	leal	-0x1(%r14), %ecx
    00000246: 	cmpl	$0x6, %ecx
    00000249: 	jbe	.Ltmp165 # Offset: 585
    0000024b: 	leaq	(%rdi,%rax,2), %rcx
    0000024f: 	movq	(%r8,%rax), %rax
    00000253: 	movq	%rax, %r15
    00000256: 	movb	%al, (%rcx)
    00000258: 	shrq	$0x10, %r15
    0000025c: 	movb	%ah, 0x2(%rcx)
    0000025f: 	movb	%r15b, 0x4(%rcx)
    00000263: 	movq	%rax, %r15
    00000266: 	shrq	$0x18, %r15
    0000026a: 	movb	%r15b, 0x6(%rcx)
    0000026e: 	movq	%rax, %r15
    00000271: 	shrq	$0x20, %r15
    00000275: 	movb	%r15b, 0x8(%rcx)
    00000279: 	movq	%rax, %r15
    0000027c: 	shrq	$0x28, %r15
    00000280: 	movb	%r15b, 0xa(%rcx)
    00000284: 	movq	%rax, %r15
    00000287: 	shrq	$0x38, %rax
    0000028b: 	movb	%al, 0xe(%rcx)
    0000028e: 	movl	%r14d, %eax
    00000291: 	shrq	$0x30, %r15
    00000295: 	andl	$-0x8, %eax
    00000298: 	movb	%r15b, 0xc(%rcx)
    0000029c: 	addl	%eax, %r9d
    0000029f: 	cmpl	%eax, %r14d
    000002a2: 	je	.Ltmp164 # Offset: 674
.Ltmp165:
    000002a8: 	movslq	%r9d, %rcx
    000002ab: 	leal	(%r9,%r9), %eax
    000002af: 	movzbl	(%r8,%rcx), %r14d
    000002b4: 	movslq	%eax, %rcx
    000002b7: 	movb	%r14b, (%rdi,%rcx)
    000002bb: 	leal	0x1(%r9), %ecx
    000002bf: 	cmpl	%ecx, %edx
    000002c1: 	jle	.Ltmp164 # Offset: 705
    000002c7: 	movslq	%ecx, %rcx
    000002ca: 	movzbl	(%r8,%rcx), %r14d
    000002cf: 	leal	0x2(%rax), %ecx
    000002d2: 	movslq	%ecx, %rcx
    000002d5: 	movb	%r14b, (%rdi,%rcx)
    000002d9: 	leal	0x2(%r9), %ecx
    000002dd: 	cmpl	%ecx, %edx
    000002df: 	jle	.Ltmp164 # Offset: 735
    000002e1: 	movslq	%ecx, %rcx
    000002e4: 	movzbl	(%r8,%rcx), %r14d
    000002e9: 	leal	0x4(%rax), %ecx
    000002ec: 	movslq	%ecx, %rcx
    000002ef: 	movb	%r14b, (%rdi,%rcx)
    000002f3: 	leal	0x3(%r9), %ecx
    000002f7: 	cmpl	%ecx, %edx
    000002f9: 	jle	.Ltmp164 # Offset: 761
    000002fb: 	movslq	%ecx, %rcx
    000002fe: 	movzbl	(%r8,%rcx), %r14d
    00000303: 	leal	0x6(%rax), %ecx
    00000306: 	movslq	%ecx, %rcx
    00000309: 	movb	%r14b, (%rdi,%rcx)
    0000030d: 	leal	0x4(%r9), %ecx
    00000311: 	cmpl	%ecx, %edx
    00000313: 	jle	.Ltmp164 # Offset: 787
    00000315: 	movslq	%ecx, %rcx
    00000318: 	movzbl	(%r8,%rcx), %r14d
    0000031d: 	leal	0x8(%rax), %ecx
    00000320: 	movslq	%ecx, %rcx
    00000323: 	movb	%r14b, (%rdi,%rcx)
    00000327: 	leal	0x5(%r9), %ecx
    0000032b: 	cmpl	%ecx, %edx
    0000032d: 	jle	.Ltmp164 # Offset: 813
    0000032f: 	movslq	%ecx, %rcx
    00000332: 	addl	$0x6, %r9d
    00000336: 	movzbl	(%r8,%rcx), %r14d
    0000033b: 	leal	0xa(%rax), %ecx
    0000033e: 	movslq	%ecx, %rcx
    00000341: 	movb	%r14b, (%rdi,%rcx)
    00000345: 	cmpl	%r9d, %edx
    00000348: 	jle	.Ltmp164 # Offset: 840
    0000034a: 	movslq	%r9d, %r9
    0000034d: 	addl	$0xc, %eax
    00000350: 	movzbl	(%r8,%r9), %ecx
    00000355: 	cltq
    00000357: 	movb	%cl, (%rdi,%rax)
.Ltmp164:
    0000035a: 	leaq	(%rdi,%r10,2), %r9
    0000035e: 	leaq	0x1(%rdi), %rax
    00000362: 	cmpq	%r9, %rsi
    00000365: 	leal	-0x1(%rdx), %ecx
    00000368: 	setae	%r9b
    0000036c: 	addq	%rsi, %r10
    0000036f: 	cmpq	%r10, %rax
    00000372: 	setae	%r10b
    00000376: 	orb	%r9b, %r10b
    00000379: 	je	.Ltmp166 # Offset: 889
    0000037f: 	cmpl	$0x6, %ecx
    00000382: 	jbe	.Ltmp166 # Offset: 898
    00000388: 	cmpl	$0xe, %ecx
    0000038b: 	jbe	.Ltmp167 # Offset: 907
    00000391: 	movl	%edx, %r9d
    00000394: 	movl	-0x70(%rsp), %ebx
    00000398: 	movq	%rsi, %rcx
    0000039b: 	shrl	$0x4, %r9d
    0000039f: 	subl	$0x1, %r9d
    000003a3: 	shlq	$0x4, %r9
    000003a7: 	leaq	0x10(%rsi,%r9), %r10
    000003ac: 	nopl	(%rax) # Size: 4
.Ltmp168:
    000003b0: 	movdqu	(%rcx), %xmm0
    000003b4: 	addq	$0x10, %rcx
    000003b8: 	addq	$0x20, %rax
    000003bc: 	movd	%xmm0, %r9d
    000003c1: 	movb	%r9b, -0x20(%rax)
    000003c5: 	movaps	%xmm0, 0xb8(%rsp)
    000003cd: 	movzbl	0xb9(%rsp), %r9d
    000003d6: 	movb	%r9b, -0x1e(%rax)
    000003da: 	movaps	%xmm0, 0xa8(%rsp)
    000003e2: 	movzbl	0xaa(%rsp), %r9d
    000003eb: 	movb	%r9b, -0x1c(%rax)
    000003ef: 	movaps	%xmm0, 0x98(%rsp)
    000003f7: 	movzbl	0x9b(%rsp), %r9d
    00000400: 	movb	%r9b, -0x1a(%rax)
    00000404: 	movaps	%xmm0, 0x88(%rsp)
    0000040c: 	movzbl	0x8c(%rsp), %r9d
    00000415: 	movb	%r9b, -0x18(%rax)
    00000419: 	movaps	%xmm0, 0x78(%rsp)
    0000041e: 	movzbl	0x7d(%rsp), %r9d
    00000424: 	movb	%r9b, -0x16(%rax)
    00000428: 	movaps	%xmm0, 0x68(%rsp)
    0000042d: 	movzbl	0x6e(%rsp), %r9d
    00000433: 	movb	%r9b, -0x14(%rax)
    00000437: 	movaps	%xmm0, 0x58(%rsp)
    0000043c: 	movzbl	0x5f(%rsp), %r9d
    00000442: 	movb	%r9b, -0x12(%rax)
    00000446: 	movaps	%xmm0, 0x48(%rsp)
    0000044b: 	movzbl	0x50(%rsp), %r9d
    00000451: 	movb	%r9b, -0x10(%rax)
    00000455: 	movaps	%xmm0, 0x38(%rsp)
    0000045a: 	movzbl	0x41(%rsp), %r9d
    00000460: 	movb	%r9b, -0xe(%rax)
    00000464: 	movaps	%xmm0, 0x28(%rsp)
    00000469: 	movzbl	0x32(%rsp), %r9d
    0000046f: 	movb	%r9b, -0xc(%rax)
    00000473: 	movaps	%xmm0, 0x18(%rsp)
    00000478: 	movzbl	0x23(%rsp), %r9d
    0000047e: 	movb	%r9b, -0xa(%rax)
    00000482: 	movaps	%xmm0, 0x8(%rsp)
    00000487: 	movzbl	0x14(%rsp), %r9d
    0000048d: 	movb	%r9b, -0x8(%rax)
    00000491: 	movaps	%xmm0, -0x8(%rsp)
    00000496: 	movzbl	0x5(%rsp), %r9d
    0000049c: 	movb	%r9b, -0x6(%rax)
    000004a0: 	movaps	%xmm0, -0x18(%rsp)
    000004a5: 	movzbl	-0xa(%rsp), %r9d
    000004ab: 	movb	%r9b, -0x4(%rax)
    000004af: 	movaps	%xmm0, -0x28(%rsp)
    000004b4: 	movzbl	-0x19(%rsp), %r9d
    000004ba: 	movb	%r9b, -0x2(%rax)
    000004be: 	cmpq	%rcx, %r10
    000004c1: 	jne	.Ltmp168 # Offset: 1217
    000004c7: 	movl	%edx, %eax
    000004c9: 	movl	%ebx, -0x70(%rsp)
    000004cd: 	andl	$-0x10, %eax
    000004d0: 	movl	%eax, %r9d
    000004d3: 	cmpl	%edx, %eax
    000004d5: 	je	.Ltmp169 # Offset: 1237
    000004db: 	movl	%edx, %r11d
    000004de: 	subl	%eax, %r11d
    000004e1: 	leal	-0x1(%r11), %ecx
    000004e5: 	cmpl	$0x6, %ecx
    000004e8: 	jbe	.Ltmp170 # Offset: 1256
.Ltmp175:
    000004ea: 	leaq	0x1(%rdi,%rax,2), %rcx
    000004ef: 	movq	(%rsi,%rax), %rax
    000004f3: 	movq	%rax, %r10
    000004f6: 	movb	%al, (%rcx)
    000004f8: 	shrq	$0x10, %r10
    000004fc: 	movb	%ah, 0x2(%rcx)
    000004ff: 	movb	%r10b, 0x4(%rcx)
    00000503: 	movq	%rax, %r10
    00000506: 	shrq	$0x18, %r10
    0000050a: 	movb	%r10b, 0x6(%rcx)
    0000050e: 	movq	%rax, %r10
    00000511: 	shrq	$0x20, %r10
    00000515: 	movb	%r10b, 0x8(%rcx)
    00000519: 	movq	%rax, %r10
    0000051c: 	shrq	$0x28, %r10
    00000520: 	movb	%r10b, 0xa(%rcx)
    00000524: 	movq	%rax, %r10
    00000527: 	shrq	$0x38, %rax
    0000052b: 	movb	%al, 0xe(%rcx)
    0000052e: 	movl	%r11d, %eax
    00000531: 	shrq	$0x30, %r10
    00000535: 	andl	$-0x8, %eax
    00000538: 	movb	%r10b, 0xc(%rcx)
    0000053c: 	addl	%eax, %r9d
    0000053f: 	cmpl	%eax, %r11d
    00000542: 	je	.Ltmp169 # Offset: 1346
.Ltmp170:
    00000548: 	movslq	%r9d, %rcx
    0000054b: 	leal	(%r9,%r9), %eax
    0000054f: 	movzbl	(%rsi,%rcx), %r10d
    00000554: 	leal	0x1(%rax), %ecx
    00000557: 	movslq	%ecx, %rcx
    0000055a: 	movb	%r10b, (%rdi,%rcx)
    0000055e: 	leal	0x1(%r9), %ecx
    00000562: 	cmpl	%ecx, %edx
    00000564: 	jle	.Ltmp169 # Offset: 1380
    0000056a: 	movslq	%ecx, %rcx
    0000056d: 	movzbl	(%rsi,%rcx), %r10d
    00000572: 	leal	0x3(%rax), %ecx
    00000575: 	movslq	%ecx, %rcx
    00000578: 	movb	%r10b, (%rdi,%rcx)
    0000057c: 	leal	0x2(%r9), %ecx
    00000580: 	cmpl	%edx, %ecx
    00000582: 	jge	.Ltmp169 # Offset: 1410
    00000584: 	movslq	%ecx, %rcx
    00000587: 	movzbl	(%rsi,%rcx), %r10d
    0000058c: 	leal	0x5(%rax), %ecx
    0000058f: 	movslq	%ecx, %rcx
    00000592: 	movb	%r10b, (%rdi,%rcx)
    00000596: 	leal	0x3(%r9), %ecx
    0000059a: 	cmpl	%edx, %ecx
    0000059c: 	jge	.Ltmp169 # Offset: 1436
    0000059e: 	movslq	%ecx, %rcx
    000005a1: 	movzbl	(%rsi,%rcx), %r10d
    000005a6: 	leal	0x7(%rax), %ecx
    000005a9: 	movslq	%ecx, %rcx
    000005ac: 	movb	%r10b, (%rdi,%rcx)
    000005b0: 	leal	0x4(%r9), %ecx
    000005b4: 	cmpl	%ecx, %edx
    000005b6: 	jle	.Ltmp169 # Offset: 1462
    000005b8: 	movslq	%ecx, %rcx
    000005bb: 	movzbl	(%rsi,%rcx), %r10d
    000005c0: 	leal	0x9(%rax), %ecx
    000005c3: 	movslq	%ecx, %rcx
    000005c6: 	movb	%r10b, (%rdi,%rcx)
    000005ca: 	leal	0x5(%r9), %ecx
    000005ce: 	cmpl	%ecx, %edx
    000005d0: 	jle	.Ltmp169 # Offset: 1488
    000005d2: 	movslq	%ecx, %rcx
    000005d5: 	addl	$0x6, %r9d
    000005d9: 	movzbl	(%rsi,%rcx), %r10d
    000005de: 	leal	0xb(%rax), %ecx
    000005e1: 	movslq	%ecx, %rcx
    000005e4: 	movb	%r10b, (%rdi,%rcx)
    000005e8: 	cmpl	%r9d, %edx
    000005eb: 	jle	.Ltmp169 # Offset: 1515
    000005ed: 	movslq	%r9d, %r9
    000005f0: 	addl	$0xd, %eax
    000005f3: 	movzbl	(%rsi,%r9), %edx
    000005f8: 	cltq
    000005fa: 	movb	%dl, (%rdi,%rax)
.Ltmp169:
    000005fd: 	movl	-0x6c(%rsp), %ebx
    00000601: 	addq	%r13, %rdi
    00000604: 	addq	%r12, %r8
    00000607: 	addq	%r12, %rsi
    0000060a: 	subl	$0x800, %ebp
    00000610: 	cmpl	%ebx, -0x70(%rsp)
    00000614: 	jl	.Ltmp171 # Offset: 1556
.Ltmp159:
    0000061a: 	addq	$0x200, %rsp
    00000621: 	popq	%rbx
    00000622: 	popq	%rbp
    00000623: 	popq	%r12
    00000625: 	popq	%r13
    00000627: 	popq	%r14
    00000629: 	popq	%r15
    0000062b: 	retq # Offset: 1579
    0000062c: 	nopl	(%rax) # Size: 4
.Ltmp160:
    00000630: 	leal	(%rbp,%rbp), %r13d
    00000635: 	movl	%ebp, %edx
    00000637: 	movslq	%ebp, %r12
    0000063a: 	movslq	%r13d, %r13
    0000063d: 	testl	%ebp, %ebp
    0000063f: 	jg	.Ltmp172 # Offset: 1599
    00000645: 	jmp	.Ltmp169 # Offset: 1605
    00000647: 	nopw	(%rax,%rax) # Size: 9
.Ltmp166:
    00000650: 	movl	-0x70(%rsp), %ebx
    00000654: 	movl	%edx, %edx
    00000656: 	xorl	%eax, %eax
    00000658: 	nopl	(%rax,%rax) # Size: 8
.Ltmp173:
    00000660: 	movzbl	(%rsi,%rax), %ecx
    00000664: 	movb	%cl, 0x1(%rdi,%rax,2)
    00000668: 	addq	$0x1, %rax
    0000066c: 	cmpq	%rax, %rdx
    0000066f: 	jne	.Ltmp173 # Offset: 1647
    00000671: 	movl	%ebx, -0x70(%rsp)
    00000675: 	jmp	.Ltmp169 # Offset: 1653
    00000677: 	nopw	(%rax,%rax) # Size: 9
.Ltmp161:
    00000680: 	movl	-0x70(%rsp), %ebx
    00000684: 	xorl	%eax, %eax
    00000686: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp174:
    00000690: 	movzbl	(%r8,%rax), %ecx
    00000695: 	movb	%cl, (%rdi,%rax,2)
    00000698: 	addq	$0x1, %rax
    0000069c: 	cmpl	%eax, %edx
    0000069e: 	jg	.Ltmp174 # Offset: 1694
    000006a0: 	movl	%ebx, -0x70(%rsp)
    000006a4: 	jmp	.Ltmp164 # Offset: 1700
.Ltmp167:
    000006a9: 	xorl	%eax, %eax
    000006ab: 	xorl	%r9d, %r9d
    000006ae: 	jmp	.Ltmp175 # Offset: 1710
.Ltmp162:
    000006b3: 	xorl	%eax, %eax
    000006b5: 	xorl	%r9d, %r9d
    000006b8: 	jmp	.Ltmp176 # Offset: 1720
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version5IhEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version6IhEvPT_PKS0_S3_i" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x54c0
  Size        : 0x65e
  MaxSize     : 0x660
  Offset      : 0x54c0
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version6IhEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x210, %rsp
    00000015: 	movl	%ecx, -0x64(%rsp)
    00000019: 	testl	%ecx, %ecx
    0000001b: 	jle	.Ltmp177 # Offset: 27
    00000021: 	movq	%rsi, %r8
    00000024: 	movl	%ecx, %r14d
    00000027: 	movq	%rdx, %rsi
    0000002a: 	xorl	%r12d, %r12d
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp189:
    00000030: 	addl	$0x800, %r12d
    00000037: 	cmpl	-0x64(%rsp), %r12d
    0000003c: 	jg	.Ltmp178 # Offset: 60
    00000042: 	movq	$0x1000, -0x60(%rsp)
    0000004b: 	movl	$0x800, %r13d
    00000051: 	movl	$0x800, %eax
.Ltmp190:
    00000056: 	movslq	%eax, %r11
    00000059: 	testl	%eax, %eax
    0000005b: 	movl	$0x1, %ebx
    00000060: 	movl	%eax, %ebp
    00000062: 	leaq	-0x1(%r11,%r11), %rdx
    00000067: 	cmovleq	%rbx, %rdx
    0000006b: 	addq	%rdi, %rdx
    0000006e: 	cmpq	%rdx, %r8
    00000071: 	movl	$0x1, %edx
    00000076: 	setae	%cl
    00000079: 	testl	%eax, %eax
    0000007b: 	cmovgq	%r11, %rdx
    0000007f: 	addq	%r8, %rdx
    00000082: 	cmpq	%rdx, %rdi
    00000085: 	setae	%dl
    00000088: 	orb	%dl, %cl
    0000008a: 	je	.Ltmp179 # Offset: 138
    00000090: 	cmpl	$0x7, %eax
    00000093: 	jle	.Ltmp179 # Offset: 147
    00000099: 	testl	%eax, %eax
    0000009b: 	movl	$0x1, %r10d
    000000a1: 	cmovgl	%eax, %r10d
    000000a5: 	cmpl	$0xf, %eax
    000000a8: 	jle	.Ltmp180 # Offset: 168
    000000ae: 	movl	%r10d, %r9d
    000000b1: 	movq	%r8, %rcx
    000000b4: 	movq	%rdi, %rdx
    000000b7: 	shrl	$0x4, %r9d
    000000bb: 	subl	$0x1, %r9d
    000000bf: 	shlq	$0x4, %r9
    000000c3: 	leaq	0x10(%r8,%r9), %rbx
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp181:
    000000d0: 	movdqu	(%rcx), %xmm0
    000000d4: 	addq	$0x10, %rcx
    000000d8: 	addq	$0x20, %rdx
    000000dc: 	movd	%xmm0, %r9d
    000000e1: 	movb	%r9b, -0x20(%rdx)
    000000e5: 	movaps	%xmm0, 0x1f8(%rsp)
    000000ed: 	movzbl	0x1f9(%rsp), %r9d
    000000f6: 	movb	%r9b, -0x1e(%rdx)
    000000fa: 	movaps	%xmm0, 0x1e8(%rsp)
    00000102: 	movzbl	0x1ea(%rsp), %r9d
    0000010b: 	movb	%r9b, -0x1c(%rdx)
    0000010f: 	movaps	%xmm0, 0x1d8(%rsp)
    00000117: 	movzbl	0x1db(%rsp), %r9d
    00000120: 	movb	%r9b, -0x1a(%rdx)
    00000124: 	movaps	%xmm0, 0x1c8(%rsp)
    0000012c: 	movzbl	0x1cc(%rsp), %r9d
    00000135: 	movb	%r9b, -0x18(%rdx)
    00000139: 	movaps	%xmm0, 0x1b8(%rsp)
    00000141: 	movzbl	0x1bd(%rsp), %r9d
    0000014a: 	movb	%r9b, -0x16(%rdx)
    0000014e: 	movaps	%xmm0, 0x1a8(%rsp)
    00000156: 	movzbl	0x1ae(%rsp), %r9d
    0000015f: 	movb	%r9b, -0x14(%rdx)
    00000163: 	movaps	%xmm0, 0x198(%rsp)
    0000016b: 	movzbl	0x19f(%rsp), %r9d
    00000174: 	movb	%r9b, -0x12(%rdx)
    00000178: 	movaps	%xmm0, 0x188(%rsp)
    00000180: 	movzbl	0x190(%rsp), %r9d
    00000189: 	movb	%r9b, -0x10(%rdx)
    0000018d: 	movaps	%xmm0, 0x178(%rsp)
    00000195: 	movzbl	0x181(%rsp), %r9d
    0000019e: 	movb	%r9b, -0xe(%rdx)
    000001a2: 	movaps	%xmm0, 0x168(%rsp)
    000001aa: 	movzbl	0x172(%rsp), %r9d
    000001b3: 	movb	%r9b, -0xc(%rdx)
    000001b7: 	movaps	%xmm0, 0x158(%rsp)
    000001bf: 	movzbl	0x163(%rsp), %r9d
    000001c8: 	movb	%r9b, -0xa(%rdx)
    000001cc: 	movaps	%xmm0, 0x148(%rsp)
    000001d4: 	movzbl	0x154(%rsp), %r9d
    000001dd: 	movb	%r9b, -0x8(%rdx)
    000001e1: 	movaps	%xmm0, 0x138(%rsp)
    000001e9: 	movzbl	0x145(%rsp), %r9d
    000001f2: 	movb	%r9b, -0x6(%rdx)
    000001f6: 	movaps	%xmm0, 0x128(%rsp)
    000001fe: 	movzbl	0x136(%rsp), %r9d
    00000207: 	movb	%r9b, -0x4(%rdx)
    0000020b: 	movaps	%xmm0, 0x118(%rsp)
    00000213: 	movzbl	0x127(%rsp), %r9d
    0000021c: 	movb	%r9b, -0x2(%rdx)
    00000220: 	cmpq	%rbx, %rcx
    00000223: 	jne	.Ltmp181 # Offset: 547
    00000229: 	movl	%r10d, %edx
    0000022c: 	andl	$-0x10, %edx
    0000022f: 	movl	%edx, %ecx
    00000231: 	movl	%edx, %r9d
    00000234: 	leaq	(%rdi,%rcx,2), %rbx
    00000238: 	movq	%rbx, -0x70(%rsp)
    0000023d: 	cmpl	%edx, %r10d
    00000240: 	je	.Ltmp182 # Offset: 576
.Ltmp194:
    00000246: 	subl	%edx, %r10d
    00000249: 	leal	-0x1(%r10), %ecx
    0000024d: 	cmpl	$0x6, %ecx
    00000250: 	jbe	.Ltmp183 # Offset: 592
    00000252: 	leaq	(%rdi,%rdx,2), %rcx
    00000256: 	movq	(%r8,%rdx), %rdx
    0000025a: 	movq	-0x70(%rsp), %rbx
    0000025f: 	movq	%rdx, %r15
    00000262: 	movb	%dl, (%rcx)
    00000264: 	shrq	$0x10, %r15
    00000268: 	movb	%dh, 0x2(%rcx)
    0000026b: 	movb	%r15b, 0x4(%rcx)
    0000026f: 	movq	%rdx, %r15
    00000272: 	shrq	$0x18, %r15
    00000276: 	movb	%r15b, 0x6(%rcx)
    0000027a: 	movq	%rdx, %r15
    0000027d: 	shrq	$0x20, %r15
    00000281: 	movb	%r15b, 0x8(%rcx)
    00000285: 	movq	%rdx, %r15
    00000288: 	shrq	$0x28, %r15
    0000028c: 	movb	%r15b, 0xa(%rcx)
    00000290: 	movq	%rdx, %r15
    00000293: 	shrq	$0x38, %rdx
    00000297: 	movb	%dl, 0xe(%rcx)
    0000029a: 	movl	%r10d, %edx
    0000029d: 	shrq	$0x30, %r15
    000002a1: 	andl	$-0x8, %edx
    000002a4: 	movb	%r15b, 0xc(%rcx)
    000002a8: 	movl	%edx, %ecx
    000002aa: 	addl	%edx, %r9d
    000002ad: 	leaq	(%rbx,%rcx,2), %rbx
    000002b1: 	movq	%rbx, -0x70(%rsp)
    000002b6: 	cmpl	%edx, %r10d
    000002b9: 	je	.Ltmp182 # Offset: 697
.Ltmp183:
    000002bf: 	movslq	%r9d, %rdx
    000002c2: 	movq	-0x70(%rsp), %rbx
    000002c7: 	movzbl	(%r8,%rdx), %edx
    000002cc: 	movb	%dl, (%rbx)
    000002ce: 	leal	0x1(%r9), %edx
    000002d2: 	cmpl	%edx, %eax
    000002d4: 	jle	.Ltmp182 # Offset: 724
    000002d6: 	movslq	%edx, %rdx
    000002d9: 	movzbl	(%r8,%rdx), %edx
    000002de: 	movb	%dl, 0x2(%rbx)
    000002e1: 	leal	0x2(%r9), %edx
    000002e5: 	cmpl	%edx, %eax
    000002e7: 	jle	.Ltmp182 # Offset: 743
    000002e9: 	movslq	%edx, %rdx
    000002ec: 	movzbl	(%r8,%rdx), %edx
    000002f1: 	movb	%dl, 0x4(%rbx)
    000002f4: 	leal	0x3(%r9), %edx
    000002f8: 	cmpl	%edx, %eax
    000002fa: 	jle	.Ltmp182 # Offset: 762
    000002fc: 	movslq	%edx, %rdx
    000002ff: 	movzbl	(%r8,%rdx), %edx
    00000304: 	movb	%dl, 0x6(%rbx)
    00000307: 	leal	0x4(%r9), %edx
    0000030b: 	cmpl	%edx, %eax
    0000030d: 	jle	.Ltmp182 # Offset: 781
    0000030f: 	movslq	%edx, %rdx
    00000312: 	movzbl	(%r8,%rdx), %edx
    00000317: 	movb	%dl, 0x8(%rbx)
    0000031a: 	leal	0x5(%r9), %edx
    0000031e: 	cmpl	%edx, %eax
    00000320: 	jle	.Ltmp182 # Offset: 800
    00000322: 	movslq	%edx, %rdx
    00000325: 	addl	$0x6, %r9d
    00000329: 	movzbl	(%r8,%rdx), %edx
    0000032e: 	movb	%dl, 0xa(%rbx)
    00000331: 	cmpl	%r9d, %eax
    00000334: 	jle	.Ltmp182 # Offset: 820
    00000336: 	movslq	%r9d, %r9
    00000339: 	movzbl	(%r8,%r9), %edx
    0000033e: 	movb	%dl, 0xc(%rbx)
.Ltmp182:
    00000341: 	leaq	(%rdi,%r11,2), %rcx
    00000345: 	leaq	0x1(%rdi), %r9
    00000349: 	cmpq	%rcx, %rsi
    0000034c: 	leal	-0x1(%rax), %edx
    0000034f: 	setae	%cl
    00000352: 	addq	%rsi, %r11
    00000355: 	cmpq	%r11, %r9
    00000358: 	setae	%r10b
    0000035c: 	orb	%cl, %r10b
    0000035f: 	je	.Ltmp184 # Offset: 863
    00000365: 	cmpl	$0x6, %edx
    00000368: 	jbe	.Ltmp184 # Offset: 872
    0000036e: 	cmpl	$0xe, %edx
    00000371: 	jbe	.Ltmp185 # Offset: 881
    00000377: 	movl	%eax, %r10d
    0000037a: 	movq	%rsi, %rcx
    0000037d: 	movq	%r9, %rdx
    00000380: 	shrl	$0x4, %r10d
    00000384: 	subl	$0x1, %r10d
    00000388: 	shlq	$0x4, %r10
    0000038c: 	leaq	0x10(%rsi,%r10), %r11
    00000391: 	nopl	(%rax) # Size: 7
.Ltmp186:
    00000398: 	movdqu	(%rcx), %xmm0
    0000039c: 	addq	$0x10, %rcx
    000003a0: 	addq	$0x20, %rdx
    000003a4: 	movd	%xmm0, %r10d
    000003a9: 	movb	%r10b, -0x20(%rdx)
    000003ad: 	movaps	%xmm0, 0xc8(%rsp)
    000003b5: 	movzbl	0xc9(%rsp), %r10d
    000003be: 	movb	%r10b, -0x1e(%rdx)
    000003c2: 	movaps	%xmm0, 0xb8(%rsp)
    000003ca: 	movzbl	0xba(%rsp), %r10d
    000003d3: 	movb	%r10b, -0x1c(%rdx)
    000003d7: 	movaps	%xmm0, 0xa8(%rsp)
    000003df: 	movzbl	0xab(%rsp), %r10d
    000003e8: 	movb	%r10b, -0x1a(%rdx)
    000003ec: 	movaps	%xmm0, 0x98(%rsp)
    000003f4: 	movzbl	0x9c(%rsp), %r10d
    000003fd: 	movb	%r10b, -0x18(%rdx)
    00000401: 	movaps	%xmm0, 0x88(%rsp)
    00000409: 	movzbl	0x8d(%rsp), %r10d
    00000412: 	movb	%r10b, -0x16(%rdx)
    00000416: 	movaps	%xmm0, 0x78(%rsp)
    0000041b: 	movzbl	0x7e(%rsp), %r10d
    00000421: 	movb	%r10b, -0x14(%rdx)
    00000425: 	movaps	%xmm0, 0x68(%rsp)
    0000042a: 	movzbl	0x6f(%rsp), %r10d
    00000430: 	movb	%r10b, -0x12(%rdx)
    00000434: 	movaps	%xmm0, 0x58(%rsp)
    00000439: 	movzbl	0x60(%rsp), %r10d
    0000043f: 	movb	%r10b, -0x10(%rdx)
    00000443: 	movaps	%xmm0, 0x48(%rsp)
    00000448: 	movzbl	0x51(%rsp), %r10d
    0000044e: 	movb	%r10b, -0xe(%rdx)
    00000452: 	movaps	%xmm0, 0x38(%rsp)
    00000457: 	movzbl	0x42(%rsp), %r10d
    0000045d: 	movb	%r10b, -0xc(%rdx)
    00000461: 	movaps	%xmm0, 0x28(%rsp)
    00000466: 	movzbl	0x33(%rsp), %r10d
    0000046c: 	movb	%r10b, -0xa(%rdx)
    00000470: 	movaps	%xmm0, 0x18(%rsp)
    00000475: 	movzbl	0x24(%rsp), %r10d
    0000047b: 	movb	%r10b, -0x8(%rdx)
    0000047f: 	movaps	%xmm0, 0x8(%rsp)
    00000484: 	movzbl	0x15(%rsp), %r10d
    0000048a: 	movb	%r10b, -0x6(%rdx)
    0000048e: 	movaps	%xmm0, -0x8(%rsp)
    00000493: 	movzbl	0x6(%rsp), %r10d
    00000499: 	movb	%r10b, -0x4(%rdx)
    0000049d: 	movaps	%xmm0, -0x18(%rsp)
    000004a2: 	movzbl	-0x9(%rsp), %r10d
    000004a8: 	movb	%r10b, -0x2(%rdx)
    000004ac: 	cmpq	%rcx, %r11
    000004af: 	jne	.Ltmp186 # Offset: 1199
    000004b5: 	movl	%eax, %r10d
    000004b8: 	andl	$-0x10, %r10d
    000004bc: 	movl	%r10d, %edx
    000004bf: 	leaq	(%r9,%rdx,2), %r9
    000004c3: 	cmpl	%eax, %r10d
    000004c6: 	je	.Ltmp187 # Offset: 1222
    000004cc: 	movl	%eax, %ebp
    000004ce: 	subl	%r10d, %ebp
    000004d1: 	leal	-0x1(%rbp), %ecx
    000004d4: 	cmpl	$0x6, %ecx
    000004d7: 	jbe	.Ltmp188 # Offset: 1239
.Ltmp193:
    000004d9: 	leaq	0x1(%rdi,%rdx,2), %rcx
    000004de: 	movq	(%rsi,%rdx), %rdx
    000004e2: 	movq	%rdx, %r11
    000004e5: 	movb	%dl, (%rcx)
    000004e7: 	shrq	$0x10, %r11
    000004eb: 	movb	%dh, 0x2(%rcx)
    000004ee: 	movb	%r11b, 0x4(%rcx)
    000004f2: 	movq	%rdx, %r11
    000004f5: 	shrq	$0x18, %r11
    000004f9: 	movb	%r11b, 0x6(%rcx)
    000004fd: 	movq	%rdx, %r11
    00000500: 	shrq	$0x20, %r11
    00000504: 	movb	%r11b, 0x8(%rcx)
    00000508: 	movq	%rdx, %r11
    0000050b: 	shrq	$0x28, %r11
    0000050f: 	movb	%r11b, 0xa(%rcx)
    00000513: 	movq	%rdx, %r11
    00000516: 	shrq	$0x38, %rdx
    0000051a: 	movb	%dl, 0xe(%rcx)
    0000051d: 	movl	%ebp, %edx
    0000051f: 	shrq	$0x30, %r11
    00000523: 	andl	$-0x8, %edx
    00000526: 	movb	%r11b, 0xc(%rcx)
    0000052a: 	movl	%edx, %ecx
    0000052c: 	addl	%edx, %r10d
    0000052f: 	leaq	(%r9,%rcx,2), %r9
    00000533: 	cmpl	%edx, %ebp
    00000535: 	je	.Ltmp187 # Offset: 1333
.Ltmp188:
    00000537: 	movslq	%r10d, %rdx
    0000053a: 	movzbl	(%rsi,%rdx), %edx
    0000053e: 	movb	%dl, (%r9)
    00000541: 	leal	0x1(%r10), %edx
    00000545: 	cmpl	%edx, %eax
    00000547: 	jle	.Ltmp187 # Offset: 1351
    00000549: 	movslq	%edx, %rdx
    0000054c: 	movzbl	(%rsi,%rdx), %edx
    00000550: 	movb	%dl, 0x2(%r9)
    00000554: 	leal	0x2(%r10), %edx
    00000558: 	cmpl	%edx, %eax
    0000055a: 	jle	.Ltmp187 # Offset: 1370
    0000055c: 	movslq	%edx, %rdx
    0000055f: 	movzbl	(%rsi,%rdx), %edx
    00000563: 	movb	%dl, 0x4(%r9)
    00000567: 	leal	0x3(%r10), %edx
    0000056b: 	cmpl	%eax, %edx
    0000056d: 	jge	.Ltmp187 # Offset: 1389
    0000056f: 	movslq	%edx, %rdx
    00000572: 	movzbl	(%rsi,%rdx), %edx
    00000576: 	movb	%dl, 0x6(%r9)
    0000057a: 	leal	0x4(%r10), %edx
    0000057e: 	cmpl	%edx, %eax
    00000580: 	jle	.Ltmp187 # Offset: 1408
    00000582: 	movslq	%edx, %rdx
    00000585: 	movzbl	(%rsi,%rdx), %edx
    00000589: 	movb	%dl, 0x8(%r9)
    0000058d: 	leal	0x5(%r10), %edx
    00000591: 	cmpl	%edx, %eax
    00000593: 	jle	.Ltmp187 # Offset: 1427
    00000595: 	movslq	%edx, %rdx
    00000598: 	addl	$0x6, %r10d
    0000059c: 	movzbl	(%rsi,%rdx), %edx
    000005a0: 	movb	%dl, 0xa(%r9)
    000005a4: 	cmpl	%r10d, %eax
    000005a7: 	jle	.Ltmp187 # Offset: 1447
    000005a9: 	movslq	%r10d, %r10
    000005ac: 	movzbl	(%rsi,%r10), %eax
    000005b1: 	movb	%al, 0xc(%r9)
.Ltmp187:
    000005b5: 	addq	-0x60(%rsp), %rdi
    000005ba: 	addq	%r13, %r8
    000005bd: 	addq	%r13, %rsi
    000005c0: 	subl	$0x800, %r14d
    000005c7: 	cmpl	-0x64(%rsp), %r12d
    000005cc: 	jl	.Ltmp189 # Offset: 1484
.Ltmp177:
    000005d2: 	addq	$0x210, %rsp
    000005d9: 	popq	%rbx
    000005da: 	popq	%rbp
    000005db: 	popq	%r12
    000005dd: 	popq	%r13
    000005df: 	popq	%r14
    000005e1: 	popq	%r15
    000005e3: 	retq # Offset: 1507
    000005e4: 	nopl	(%rax) # Size: 4
.Ltmp178:
    000005e8: 	leal	(%r14,%r14), %edx
    000005ec: 	movl	%r14d, %eax
    000005ef: 	movslq	%r14d, %r13
    000005f2: 	movslq	%edx, %rbx
    000005f5: 	movq	%rbx, -0x60(%rsp)
    000005fa: 	testl	%r14d, %r14d
    000005fd: 	jg	.Ltmp190 # Offset: 1533
    00000603: 	jmp	.Ltmp187 # Offset: 1539
    00000605: 	nopl	(%rax) # Size: 3
.Ltmp184:
    00000608: 	movl	%eax, %eax
    0000060a: 	xorl	%edx, %edx
    0000060c: 	nopl	(%rax) # Size: 4
.Ltmp191:
    00000610: 	movzbl	(%rsi,%rdx), %ecx
    00000614: 	movb	%cl, 0x1(%rdi,%rdx,2)
    00000618: 	addq	$0x1, %rdx
    0000061c: 	cmpq	%rdx, %rax
    0000061f: 	jne	.Ltmp191 # Offset: 1567
    00000621: 	jmp	.Ltmp187 # Offset: 1569
    00000623: 	nopl	(%rax,%rax) # Size: 5
.Ltmp179:
    00000628: 	xorl	%edx, %edx
    0000062a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp192:
    00000630: 	movzbl	(%r8,%rdx), %ecx
    00000635: 	movb	%cl, (%rdi,%rdx,2)
    00000638: 	addq	$0x1, %rdx
    0000063c: 	cmpl	%edx, %eax
    0000063e: 	jg	.Ltmp192 # Offset: 1598
    00000640: 	jmp	.Ltmp182 # Offset: 1600
.Ltmp185:
    00000645: 	xorl	%r10d, %r10d
    00000648: 	xorl	%edx, %edx
    0000064a: 	jmp	.Ltmp193 # Offset: 1610
.Ltmp180:
    0000064f: 	movq	%rdi, -0x70(%rsp)
    00000654: 	xorl	%edx, %edx
    00000656: 	xorl	%r9d, %r9d
    00000659: 	jmp	.Ltmp194 # Offset: 1625
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version6IhEvPT_PKS0_S3_i"

Binary Function "_Z23interleave3to3_version1IhEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x5b20
  Size        : 0x3f
  MaxSize     : 0x40
  Offset      : 0x5b20
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version1IhEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r9
    00000007: 	testl	%r8d, %r8d
    0000000a: 	jle	.Ltmp195 # Offset: 10
    0000000c: 	movslq	%r8d, %r8
    0000000f: 	xorl	%eax, %eax
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp196:
    00000018: 	movzbl	(%r9,%rax), %esi
    0000001d: 	addq	$0x3, %rdi
    00000021: 	movb	%sil, -0x3(%rdi)
    00000025: 	movzbl	(%rdx,%rax), %esi
    00000029: 	movb	%sil, -0x2(%rdi)
    0000002d: 	movzbl	(%rcx,%rax), %esi
    00000031: 	addq	$0x1, %rax
    00000035: 	movb	%sil, -0x1(%rdi)
    00000039: 	cmpq	%rax, %r8
    0000003c: 	jne	.Ltmp196 # Offset: 60
.Ltmp195:
    0000003e: 	retq # Offset: 62
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version1IhEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version2IhEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x5b60
  Size        : 0x83b
  MaxSize     : 0x840
  Offset      : 0x5b60
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version2IhEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	movslq	%r8d, %r8
    00000007: 	testq	%r8, %r8
    0000000a: 	je	.Ltmp197 # Offset: 10
    00000010: 	pushq	%r15
    00000012: 	movq	%rdi, %r9
    00000015: 	leaq	-0x1(%r8), %r11
    00000019: 	leaq	(%r8,%r8,2), %r10
    0000001d: 	pushq	%r14
    0000001f: 	movq	%rsi, %rdi
    00000022: 	leaq	-0x2(%r9,%r10), %rax
    00000027: 	movq	%rdx, %rsi
    0000002a: 	pushq	%r13
    0000002c: 	leaq	(%rdi,%r8), %rdx
    00000030: 	pushq	%r12
    00000032: 	pushq	%rbp
    00000033: 	pushq	%rbx
    00000034: 	subq	$0x320, %rsp
    0000003b: 	cmpq	$0x6, %r11
    0000003f: 	seta	%r15b
    00000043: 	cmpq	%rax, %rdi
    00000046: 	setae	%al
    00000049: 	cmpq	%rdx, %r9
    0000004c: 	setae	%bpl
    00000050: 	orb	%bpl, %al
    00000053: 	je	.Ltmp198 # Offset: 83
    00000059: 	testb	%r15b, %r15b
    0000005c: 	je	.Ltmp198 # Offset: 92
    00000062: 	cmpq	$0xe, %r11
    00000066: 	jbe	.Ltmp199 # Offset: 102
    0000006c: 	movq	%r8, %r12
    0000006f: 	movq	%rdi, %rdx
    00000072: 	movq	%r9, %rax
    00000075: 	andq	$-0x10, %r12
    00000079: 	addq	%rdi, %r12
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp200:
    00000080: 	movdqu	(%rdx), %xmm0
    00000084: 	addq	$0x10, %rdx
    00000088: 	addq	$0x30, %rax
    0000008c: 	movd	%xmm0, %ebp
    00000090: 	movb	%bpl, -0x30(%rax)
    00000094: 	movaps	%xmm0, 0x308(%rsp)
    0000009c: 	movzbl	0x309(%rsp), %ebp
    000000a4: 	movb	%bpl, -0x2d(%rax)
    000000a8: 	movaps	%xmm0, 0x2f8(%rsp)
    000000b0: 	movzbl	0x2fa(%rsp), %ebp
    000000b8: 	movb	%bpl, -0x2a(%rax)
    000000bc: 	movaps	%xmm0, 0x2e8(%rsp)
    000000c4: 	movzbl	0x2eb(%rsp), %ebp
    000000cc: 	movb	%bpl, -0x27(%rax)
    000000d0: 	movaps	%xmm0, 0x2d8(%rsp)
    000000d8: 	movzbl	0x2dc(%rsp), %ebp
    000000e0: 	movb	%bpl, -0x24(%rax)
    000000e4: 	movaps	%xmm0, 0x2c8(%rsp)
    000000ec: 	movzbl	0x2cd(%rsp), %ebp
    000000f4: 	movb	%bpl, -0x21(%rax)
    000000f8: 	movaps	%xmm0, 0x2b8(%rsp)
    00000100: 	movzbl	0x2be(%rsp), %ebp
    00000108: 	movb	%bpl, -0x1e(%rax)
    0000010c: 	movaps	%xmm0, 0x2a8(%rsp)
    00000114: 	movzbl	0x2af(%rsp), %ebp
    0000011c: 	movb	%bpl, -0x1b(%rax)
    00000120: 	movaps	%xmm0, 0x298(%rsp)
    00000128: 	movzbl	0x2a0(%rsp), %ebp
    00000130: 	movb	%bpl, -0x18(%rax)
    00000134: 	movaps	%xmm0, 0x288(%rsp)
    0000013c: 	movzbl	0x291(%rsp), %ebp
    00000144: 	movb	%bpl, -0x15(%rax)
    00000148: 	movaps	%xmm0, 0x278(%rsp)
    00000150: 	movzbl	0x282(%rsp), %ebp
    00000158: 	movb	%bpl, -0x12(%rax)
    0000015c: 	movaps	%xmm0, 0x268(%rsp)
    00000164: 	movzbl	0x273(%rsp), %ebp
    0000016c: 	movb	%bpl, -0xf(%rax)
    00000170: 	movaps	%xmm0, 0x258(%rsp)
    00000178: 	movzbl	0x264(%rsp), %ebp
    00000180: 	movb	%bpl, -0xc(%rax)
    00000184: 	movaps	%xmm0, 0x248(%rsp)
    0000018c: 	movzbl	0x255(%rsp), %ebp
    00000194: 	movb	%bpl, -0x9(%rax)
    00000198: 	movaps	%xmm0, 0x238(%rsp)
    000001a0: 	movzbl	0x246(%rsp), %ebp
    000001a8: 	movb	%bpl, -0x6(%rax)
    000001ac: 	movaps	%xmm0, 0x228(%rsp)
    000001b4: 	movzbl	0x237(%rsp), %ebp
    000001bc: 	movb	%bpl, -0x3(%rax)
    000001c0: 	cmpq	%rdx, %r12
    000001c3: 	jne	.Ltmp200 # Offset: 451
    000001c9: 	movq	%r8, %rbp
    000001cc: 	andq	$-0x10, %rbp
    000001d0: 	leaq	(%rbp,%rbp,2), %r12
    000001d5: 	leaq	(%rdi,%rbp), %r13
    000001d9: 	addq	%r9, %r12
    000001dc: 	cmpq	%rbp, %r8
    000001df: 	je	.Ltmp201 # Offset: 479
    000001e5: 	movq	%r8, %r14
    000001e8: 	subq	%rbp, %r14
    000001eb: 	leaq	-0x1(%r14), %rax
    000001ef: 	cmpq	$0x6, %rax
    000001f3: 	jbe	.Ltmp202 # Offset: 499
.Ltmp214:
    000001f5: 	movq	(%rdi,%rbp), %rdx
    000001f9: 	leaq	(%rbp,%rbp,2), %rax
    000001fe: 	addq	%r9, %rax
    00000201: 	movq	%rdx, %rdi
    00000204: 	movb	%dl, (%rax)
    00000206: 	shrq	$0x10, %rdi
    0000020a: 	movb	%dh, 0x3(%rax)
    0000020d: 	movb	%dil, 0x6(%rax)
    00000211: 	movq	%rdx, %rdi
    00000214: 	shrq	$0x18, %rdi
    00000218: 	movb	%dil, 0x9(%rax)
    0000021c: 	movq	%rdx, %rdi
    0000021f: 	shrq	$0x20, %rdi
    00000223: 	movb	%dil, 0xc(%rax)
    00000227: 	movq	%rdx, %rdi
    0000022a: 	shrq	$0x28, %rdi
    0000022e: 	movb	%dil, 0xf(%rax)
    00000232: 	movq	%rdx, %rdi
    00000235: 	shrq	$0x38, %rdx
    00000239: 	shrq	$0x30, %rdi
    0000023d: 	movb	%dl, 0x15(%rax)
    00000240: 	movb	%dil, 0x12(%rax)
    00000244: 	movq	%r14, %rax
    00000247: 	andq	$-0x8, %rax
    0000024b: 	leaq	(%rax,%rax,2), %rdx
    0000024f: 	addq	%rax, %r13
    00000252: 	addq	%rax, %rbp
    00000255: 	addq	%rdx, %r12
    00000258: 	cmpq	%r14, %rax
    0000025b: 	je	.Ltmp201 # Offset: 603
.Ltmp202:
    0000025d: 	movzbl	(%r13), %eax
    00000262: 	movb	%al, (%r12)
    00000266: 	leaq	0x1(%rbp), %rax
    0000026a: 	cmpq	%rax, %r8
    0000026d: 	jbe	.Ltmp201 # Offset: 621
    0000026f: 	movzbl	0x1(%r13), %eax
    00000274: 	movb	%al, 0x3(%r12)
    00000279: 	leaq	0x2(%rbp), %rax
    0000027d: 	cmpq	%rax, %r8
    00000280: 	jbe	.Ltmp201 # Offset: 640
    00000282: 	movzbl	0x2(%r13), %eax
    00000287: 	movb	%al, 0x6(%r12)
    0000028c: 	leaq	0x3(%rbp), %rax
    00000290: 	cmpq	%rax, %r8
    00000293: 	jbe	.Ltmp201 # Offset: 659
    00000295: 	movzbl	0x3(%r13), %eax
    0000029a: 	movb	%al, 0x9(%r12)
    0000029f: 	leaq	0x4(%rbp), %rax
    000002a3: 	cmpq	%rax, %r8
    000002a6: 	jbe	.Ltmp201 # Offset: 678
    000002a8: 	movzbl	0x4(%r13), %eax
    000002ad: 	movb	%al, 0xc(%r12)
    000002b2: 	leaq	0x5(%rbp), %rax
    000002b6: 	cmpq	%rax, %r8
    000002b9: 	jbe	.Ltmp201 # Offset: 697
    000002bb: 	movzbl	0x5(%r13), %eax
    000002c0: 	addq	$0x6, %rbp
    000002c4: 	movb	%al, 0xf(%r12)
    000002c9: 	cmpq	%rbp, %r8
    000002cc: 	jbe	.Ltmp201 # Offset: 716
    000002ce: 	movzbl	0x6(%r13), %eax
    000002d3: 	movb	%al, 0x12(%r12)
.Ltmp201:
    000002d8: 	leaq	-0x1(%r9,%r10), %rdx
    000002dd: 	leaq	0x1(%r9), %rdi
    000002e1: 	cmpq	%rdx, %rsi
    000002e4: 	leaq	(%rsi,%r8), %rax
    000002e8: 	setae	%dl
    000002eb: 	cmpq	%rax, %rdi
    000002ee: 	setae	%bpl
    000002f2: 	orb	%bpl, %dl
    000002f5: 	je	.Ltmp203 # Offset: 757
    000002fb: 	testb	%r15b, %r15b
    000002fe: 	je	.Ltmp203 # Offset: 766
    00000304: 	cmpq	$0xe, %r11
    00000308: 	jbe	.Ltmp204 # Offset: 776
    0000030e: 	movq	%r8, %r12
    00000311: 	movq	%rsi, %rdx
    00000314: 	movq	%rdi, %rax
    00000317: 	andq	$-0x10, %r12
    0000031b: 	addq	%rsi, %r12
    0000031e: 	nop # Size: 2
.Ltmp205:
    00000320: 	movdqu	(%rdx), %xmm0
    00000324: 	addq	$0x10, %rdx
    00000328: 	addq	$0x30, %rax
    0000032c: 	movd	%xmm0, %ebp
    00000330: 	movb	%bpl, -0x30(%rax)
    00000334: 	movaps	%xmm0, 0x198(%rsp)
    0000033c: 	movzbl	0x199(%rsp), %ebp
    00000344: 	movb	%bpl, -0x2d(%rax)
    00000348: 	movaps	%xmm0, 0x188(%rsp)
    00000350: 	movzbl	0x18a(%rsp), %ebp
    00000358: 	movb	%bpl, -0x2a(%rax)
    0000035c: 	movaps	%xmm0, 0x178(%rsp)
    00000364: 	movzbl	0x17b(%rsp), %ebp
    0000036c: 	movb	%bpl, -0x27(%rax)
    00000370: 	movaps	%xmm0, 0x168(%rsp)
    00000378: 	movzbl	0x16c(%rsp), %ebp
    00000380: 	movb	%bpl, -0x24(%rax)
    00000384: 	movaps	%xmm0, 0x158(%rsp)
    0000038c: 	movzbl	0x15d(%rsp), %ebp
    00000394: 	movb	%bpl, -0x21(%rax)
    00000398: 	movaps	%xmm0, 0x148(%rsp)
    000003a0: 	movzbl	0x14e(%rsp), %ebp
    000003a8: 	movb	%bpl, -0x1e(%rax)
    000003ac: 	movaps	%xmm0, 0x138(%rsp)
    000003b4: 	movzbl	0x13f(%rsp), %ebp
    000003bc: 	movb	%bpl, -0x1b(%rax)
    000003c0: 	movaps	%xmm0, 0x128(%rsp)
    000003c8: 	movzbl	0x130(%rsp), %ebp
    000003d0: 	movb	%bpl, -0x18(%rax)
    000003d4: 	movaps	%xmm0, 0x118(%rsp)
    000003dc: 	movzbl	0x121(%rsp), %ebp
    000003e4: 	movb	%bpl, -0x15(%rax)
    000003e8: 	movaps	%xmm0, 0x108(%rsp)
    000003f0: 	movzbl	0x112(%rsp), %ebp
    000003f8: 	movb	%bpl, -0x12(%rax)
    000003fc: 	movaps	%xmm0, 0xf8(%rsp)
    00000404: 	movzbl	0x103(%rsp), %ebp
    0000040c: 	movb	%bpl, -0xf(%rax)
    00000410: 	movaps	%xmm0, 0xe8(%rsp)
    00000418: 	movzbl	0xf4(%rsp), %ebp
    00000420: 	movb	%bpl, -0xc(%rax)
    00000424: 	movaps	%xmm0, 0xd8(%rsp)
    0000042c: 	movzbl	0xe5(%rsp), %ebp
    00000434: 	movb	%bpl, -0x9(%rax)
    00000438: 	movaps	%xmm0, 0xc8(%rsp)
    00000440: 	movzbl	0xd6(%rsp), %ebp
    00000448: 	movb	%bpl, -0x6(%rax)
    0000044c: 	movaps	%xmm0, 0xb8(%rsp)
    00000454: 	movzbl	0xc7(%rsp), %ebp
    0000045c: 	movb	%bpl, -0x3(%rax)
    00000460: 	cmpq	%r12, %rdx
    00000463: 	jne	.Ltmp205 # Offset: 1123
    00000469: 	movq	%r8, %rbp
    0000046c: 	andq	$-0x10, %rbp
    00000470: 	leaq	(%rbp,%rbp,2), %rax
    00000475: 	leaq	(%rsi,%rbp), %r12
    00000479: 	addq	%rax, %rdi
    0000047c: 	cmpq	%rbp, %r8
    0000047f: 	je	.Ltmp206 # Offset: 1151
    00000485: 	movq	%r8, %r13
    00000488: 	subq	%rbp, %r13
    0000048b: 	leaq	-0x1(%r13), %rax
    0000048f: 	cmpq	$0x6, %rax
    00000493: 	jbe	.Ltmp207 # Offset: 1171
.Ltmp215:
    00000495: 	movq	(%rsi,%rbp), %rdx
    00000499: 	leaq	0x1(%rbp,%rbp,2), %rax
    0000049e: 	addq	%r9, %rax
    000004a1: 	movq	%rdx, %rsi
    000004a4: 	movb	%dl, (%rax)
    000004a6: 	shrq	$0x10, %rsi
    000004aa: 	movb	%dh, 0x3(%rax)
    000004ad: 	movb	%sil, 0x6(%rax)
    000004b1: 	movq	%rdx, %rsi
    000004b4: 	shrq	$0x18, %rsi
    000004b8: 	movb	%sil, 0x9(%rax)
    000004bc: 	movq	%rdx, %rsi
    000004bf: 	shrq	$0x20, %rsi
    000004c3: 	movb	%sil, 0xc(%rax)
    000004c7: 	movq	%rdx, %rsi
    000004ca: 	shrq	$0x28, %rsi
    000004ce: 	movb	%sil, 0xf(%rax)
    000004d2: 	movq	%rdx, %rsi
    000004d5: 	shrq	$0x38, %rdx
    000004d9: 	shrq	$0x30, %rsi
    000004dd: 	movb	%dl, 0x15(%rax)
    000004e0: 	movb	%sil, 0x12(%rax)
    000004e4: 	movq	%r13, %rax
    000004e7: 	andq	$-0x8, %rax
    000004eb: 	leaq	(%rax,%rax,2), %rdx
    000004ef: 	addq	%rax, %r12
    000004f2: 	addq	%rax, %rbp
    000004f5: 	addq	%rdx, %rdi
    000004f8: 	cmpq	%rax, %r13
    000004fb: 	je	.Ltmp206 # Offset: 1275
.Ltmp207:
    000004fd: 	movzbl	(%r12), %eax
    00000502: 	movb	%al, (%rdi)
    00000504: 	leaq	0x1(%rbp), %rax
    00000508: 	cmpq	%rax, %r8
    0000050b: 	jbe	.Ltmp206 # Offset: 1291
    0000050d: 	movzbl	0x1(%r12), %eax
    00000513: 	movb	%al, 0x3(%rdi)
    00000516: 	leaq	0x2(%rbp), %rax
    0000051a: 	cmpq	%rax, %r8
    0000051d: 	jbe	.Ltmp206 # Offset: 1309
    0000051f: 	movzbl	0x2(%r12), %eax
    00000525: 	movb	%al, 0x6(%rdi)
    00000528: 	leaq	0x3(%rbp), %rax
    0000052c: 	cmpq	%rax, %r8
    0000052f: 	jbe	.Ltmp206 # Offset: 1327
    00000531: 	movzbl	0x3(%r12), %eax
    00000537: 	movb	%al, 0x9(%rdi)
    0000053a: 	leaq	0x4(%rbp), %rax
    0000053e: 	cmpq	%rax, %r8
    00000541: 	jbe	.Ltmp206 # Offset: 1345
    00000543: 	movzbl	0x4(%r12), %eax
    00000549: 	movb	%al, 0xc(%rdi)
    0000054c: 	leaq	0x5(%rbp), %rax
    00000550: 	cmpq	%rax, %r8
    00000553: 	jbe	.Ltmp206 # Offset: 1363
    00000555: 	movzbl	0x5(%r12), %eax
    0000055b: 	addq	$0x6, %rbp
    0000055f: 	movb	%al, 0xf(%rdi)
    00000562: 	cmpq	%rbp, %r8
    00000565: 	jbe	.Ltmp206 # Offset: 1381
    00000567: 	movzbl	0x6(%r12), %eax
    0000056d: 	movb	%al, 0x12(%rdi)
.Ltmp206:
    00000570: 	addq	%r9, %r10
    00000573: 	leaq	0x2(%r9), %rsi
    00000577: 	leaq	(%rcx,%r8), %rax
    0000057b: 	cmpq	%r10, %rcx
    0000057e: 	setae	%dl
    00000581: 	cmpq	%rax, %rsi
    00000584: 	setae	%dil
    00000588: 	orb	%dil, %dl
    0000058b: 	je	.Ltmp208 # Offset: 1419
    00000591: 	testb	%r15b, %r15b
    00000594: 	je	.Ltmp208 # Offset: 1428
    0000059a: 	cmpq	$0xe, %r11
    0000059e: 	jbe	.Ltmp209 # Offset: 1438
    000005a4: 	movq	%r8, %r10
    000005a7: 	movq	%rcx, %rdx
    000005aa: 	movq	%rsi, %rax
    000005ad: 	andq	$-0x10, %r10
    000005b1: 	addq	%rcx, %r10
    000005b4: 	nopl	(%rax) # Size: 4
.Ltmp210:
    000005b8: 	movdqu	(%rdx), %xmm0
    000005bc: 	addq	$0x10, %rdx
    000005c0: 	addq	$0x30, %rax
    000005c4: 	movd	%xmm0, %edi
    000005c8: 	movb	%dil, -0x30(%rax)
    000005cc: 	movaps	%xmm0, 0x68(%rsp)
    000005d1: 	movzbl	0x69(%rsp), %edi
    000005d6: 	movb	%dil, -0x2d(%rax)
    000005da: 	movaps	%xmm0, 0x58(%rsp)
    000005df: 	movzbl	0x5a(%rsp), %edi
    000005e4: 	movb	%dil, -0x2a(%rax)
    000005e8: 	movaps	%xmm0, 0x48(%rsp)
    000005ed: 	movzbl	0x4b(%rsp), %edi
    000005f2: 	movb	%dil, -0x27(%rax)
    000005f6: 	movaps	%xmm0, 0x38(%rsp)
    000005fb: 	movzbl	0x3c(%rsp), %edi
    00000600: 	movb	%dil, -0x24(%rax)
    00000604: 	movaps	%xmm0, 0x28(%rsp)
    00000609: 	movzbl	0x2d(%rsp), %edi
    0000060e: 	movb	%dil, -0x21(%rax)
    00000612: 	movaps	%xmm0, 0x18(%rsp)
    00000617: 	movzbl	0x1e(%rsp), %edi
    0000061c: 	movb	%dil, -0x1e(%rax)
    00000620: 	movaps	%xmm0, 0x8(%rsp)
    00000625: 	movzbl	0xf(%rsp), %edi
    0000062a: 	movb	%dil, -0x1b(%rax)
    0000062e: 	movaps	%xmm0, -0x8(%rsp)
    00000633: 	movzbl	(%rsp), %edi
    00000637: 	movb	%dil, -0x18(%rax)
    0000063b: 	movaps	%xmm0, -0x18(%rsp)
    00000640: 	movzbl	-0xf(%rsp), %edi
    00000645: 	movb	%dil, -0x15(%rax)
    00000649: 	movaps	%xmm0, -0x28(%rsp)
    0000064e: 	movzbl	-0x1e(%rsp), %edi
    00000653: 	movb	%dil, -0x12(%rax)
    00000657: 	movaps	%xmm0, -0x38(%rsp)
    0000065c: 	movzbl	-0x2d(%rsp), %edi
    00000661: 	movb	%dil, -0xf(%rax)
    00000665: 	movaps	%xmm0, -0x48(%rsp)
    0000066a: 	movzbl	-0x3c(%rsp), %edi
    0000066f: 	movb	%dil, -0xc(%rax)
    00000673: 	movaps	%xmm0, -0x58(%rsp)
    00000678: 	movzbl	-0x4b(%rsp), %edi
    0000067d: 	movb	%dil, -0x9(%rax)
    00000681: 	movaps	%xmm0, -0x68(%rsp)
    00000686: 	movzbl	-0x5a(%rsp), %edi
    0000068b: 	movb	%dil, -0x6(%rax)
    0000068f: 	movaps	%xmm0, -0x78(%rsp)
    00000694: 	movzbl	-0x69(%rsp), %edi
    00000699: 	movb	%dil, -0x3(%rax)
    0000069d: 	cmpq	%r10, %rdx
    000006a0: 	jne	.Ltmp210 # Offset: 1696
    000006a6: 	movq	%r8, %rdi
    000006a9: 	andq	$-0x10, %rdi
    000006ad: 	leaq	(%rdi,%rdi,2), %rax
    000006b1: 	leaq	(%rcx,%rdi), %r10
    000006b5: 	addq	%rax, %rsi
    000006b8: 	cmpq	%rdi, %r8
    000006bb: 	je	.Ltmp211 # Offset: 1723
    000006c1: 	movq	%r8, %r11
    000006c4: 	subq	%rdi, %r11
    000006c7: 	leaq	-0x1(%r11), %rax
    000006cb: 	cmpq	$0x6, %rax
    000006cf: 	jbe	.Ltmp212 # Offset: 1743
.Ltmp216:
    000006d1: 	movq	(%rcx,%rdi), %rdx
    000006d5: 	leaq	0x2(%rdi,%rdi,2), %rax
    000006da: 	addq	%r9, %rax
    000006dd: 	movq	%rdx, %rcx
    000006e0: 	movb	%dl, (%rax)
    000006e2: 	shrq	$0x10, %rcx
    000006e6: 	movb	%dh, 0x3(%rax)
    000006e9: 	movb	%cl, 0x6(%rax)
    000006ec: 	movq	%rdx, %rcx
    000006ef: 	shrq	$0x18, %rcx
    000006f3: 	movb	%cl, 0x9(%rax)
    000006f6: 	movq	%rdx, %rcx
    000006f9: 	shrq	$0x20, %rcx
    000006fd: 	movb	%cl, 0xc(%rax)
    00000700: 	movq	%rdx, %rcx
    00000703: 	shrq	$0x28, %rcx
    00000707: 	movb	%cl, 0xf(%rax)
    0000070a: 	movq	%rdx, %rcx
    0000070d: 	shrq	$0x38, %rdx
    00000711: 	shrq	$0x30, %rcx
    00000715: 	movb	%dl, 0x15(%rax)
    00000718: 	movb	%cl, 0x12(%rax)
    0000071b: 	movq	%r11, %rax
    0000071e: 	andq	$-0x8, %rax
    00000722: 	leaq	(%rax,%rax,2), %rdx
    00000726: 	addq	%rax, %r10
    00000729: 	addq	%rax, %rdi
    0000072c: 	addq	%rdx, %rsi
    0000072f: 	cmpq	%r11, %rax
    00000732: 	je	.Ltmp211 # Offset: 1842
.Ltmp212:
    00000734: 	movzbl	(%r10), %eax
    00000738: 	movb	%al, (%rsi)
    0000073a: 	leaq	0x1(%rdi), %rax
    0000073e: 	cmpq	%rax, %r8
    00000741: 	jbe	.Ltmp211 # Offset: 1857
    00000743: 	movzbl	0x1(%r10), %eax
    00000748: 	movb	%al, 0x3(%rsi)
    0000074b: 	leaq	0x2(%rdi), %rax
    0000074f: 	cmpq	%rax, %r8
    00000752: 	jbe	.Ltmp211 # Offset: 1874
    00000754: 	movzbl	0x2(%r10), %eax
    00000759: 	movb	%al, 0x6(%rsi)
    0000075c: 	leaq	0x3(%rdi), %rax
    00000760: 	cmpq	%rax, %r8
    00000763: 	jbe	.Ltmp211 # Offset: 1891
    00000765: 	movzbl	0x3(%r10), %eax
    0000076a: 	movb	%al, 0x9(%rsi)
    0000076d: 	leaq	0x4(%rdi), %rax
    00000771: 	cmpq	%rax, %r8
    00000774: 	jbe	.Ltmp211 # Offset: 1908
    00000776: 	movzbl	0x4(%r10), %eax
    0000077b: 	movb	%al, 0xc(%rsi)
    0000077e: 	leaq	0x5(%rdi), %rax
    00000782: 	cmpq	%rax, %r8
    00000785: 	jbe	.Ltmp211 # Offset: 1925
    00000787: 	movzbl	0x5(%r10), %eax
    0000078c: 	addq	$0x6, %rdi
    00000790: 	movb	%al, 0xf(%rsi)
    00000793: 	cmpq	%rdi, %r8
    00000796: 	jbe	.Ltmp211 # Offset: 1942
    00000798: 	movzbl	0x6(%r10), %eax
    0000079d: 	movb	%al, 0x12(%rsi)
.Ltmp211:
    000007a0: 	addq	$0x320, %rsp
    000007a7: 	popq	%rbx
    000007a8: 	popq	%rbp
    000007a9: 	popq	%r12
    000007ab: 	popq	%r13
    000007ad: 	popq	%r14
    000007af: 	popq	%r15
    000007b1: 	retq # Offset: 1969
    000007b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp203:
    000007b8: 	movzbl	(%rsi), %edx
    000007bb: 	addq	$0x1, %rsi
    000007bf: 	addq	$0x3, %rdi
    000007c3: 	movb	%dl, -0x3(%rdi)
    000007c6: 	cmpq	%rsi, %rax
    000007c9: 	jne	.Ltmp203 # Offset: 1993
    000007cb: 	jmp	.Ltmp206 # Offset: 1995
.Ltmp208:
    000007d0: 	movzbl	(%rcx), %edx
    000007d3: 	addq	$0x1, %rcx
    000007d7: 	addq	$0x3, %rsi
    000007db: 	movb	%dl, -0x3(%rsi)
    000007de: 	cmpq	%rcx, %rax
    000007e1: 	jne	.Ltmp208 # Offset: 2017
    000007e3: 	jmp	.Ltmp211 # Offset: 2019
    000007e5: 	nopl	(%rax) # Size: 3
.Ltmp198:
    000007e8: 	movq	%r9, %rax
    000007eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp213:
    000007f0: 	movzbl	(%rdi), %ebp
    000007f3: 	addq	$0x1, %rdi
    000007f7: 	addq	$0x3, %rax
    000007fb: 	movb	%bpl, -0x3(%rax)
    000007ff: 	cmpq	%rdi, %rdx
    00000802: 	jne	.Ltmp213 # Offset: 2050
    00000804: 	jmp	.Ltmp201 # Offset: 2052
    00000809: 	nopl	(%rax) # Size: 7
.Ltmp197:
    00000810: 	retq # Offset: 2064
.Ltmp199:
    00000811: 	movq	%r8, %r14
    00000814: 	movq	%r9, %r12
    00000817: 	movq	%rdi, %r13
    0000081a: 	xorl	%ebp, %ebp
    0000081c: 	jmp	.Ltmp214 # Offset: 2076
.Ltmp204:
    00000821: 	movq	%r8, %r13
    00000824: 	movq	%rsi, %r12
    00000827: 	xorl	%ebp, %ebp
    00000829: 	jmp	.Ltmp215 # Offset: 2089
.Ltmp209:
    0000082e: 	movq	%r8, %r11
    00000831: 	movq	%rcx, %r10
    00000834: 	xorl	%edi, %edi
    00000836: 	jmp	.Ltmp216 # Offset: 2102
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version2IhEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version3IhEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x63a0
  Size        : 0x80f
  MaxSize     : 0x810
  Offset      : 0x63a0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version3IhEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	testl	%r8d, %r8d
    00000007: 	jle	.Ltmp217 # Offset: 7
    0000000d: 	pushq	%r15
    0000000f: 	movslq	%r8d, %r11
    00000012: 	movq	%rdx, %r9
    00000015: 	movq	%rcx, %rdx
    00000018: 	pushq	%r14
    0000001a: 	leaq	(%rsi,%r11), %rax
    0000001e: 	pushq	%r13
    00000020: 	leal	-0x1(%r8), %r13d
    00000024: 	pushq	%r12
    00000026: 	leaq	(%r11,%r11,2), %r12
    0000002a: 	pushq	%rbp
    0000002b: 	leaq	-0x1(%rdi,%r12), %r10
    00000030: 	movl	%r8d, %ebp
    00000033: 	pushq	%rbx
    00000034: 	subq	$0x330, %rsp
    0000003b: 	cmpl	$0x6, %r13d
    0000003f: 	seta	-0x71(%rsp)
    00000044: 	cmpq	%rax, %rdi
    00000047: 	movzbl	-0x71(%rsp), %ebx
    0000004c: 	setae	%cl
    0000004f: 	cmpq	%r10, %rsi
    00000052: 	setae	%al
    00000055: 	orl	%eax, %ecx
    00000057: 	leaq	(%r9,%r11), %rax
    0000005b: 	cmpq	%rax, %rdi
    0000005e: 	setae	%al
    00000061: 	cmpq	%r10, %r9
    00000064: 	setae	%r10b
    00000068: 	orl	%r10d, %eax
    0000006b: 	testb	%al, %cl
    0000006d: 	je	.Ltmp218 # Offset: 109
    00000073: 	testb	%bl, %bl
    00000075: 	je	.Ltmp218 # Offset: 117
    0000007b: 	cmpl	$0xe, %r13d
    0000007f: 	jbe	.Ltmp219 # Offset: 127
    00000085: 	movl	%r8d, %ebx
    00000088: 	movq	%rdi, %rax
    0000008b: 	xorl	%ecx, %ecx
    0000008d: 	shrl	$0x4, %ebx
    00000090: 	shlq	$0x4, %rbx
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp220:
    00000098: 	movdqu	(%rsi,%rcx), %xmm1
    0000009d: 	movdqu	(%r9,%rcx), %xmm0
    000000a3: 	addq	$0x10, %rcx
    000000a7: 	addq	$0x30, %rax
    000000ab: 	movd	%xmm1, %r10d
    000000b0: 	movb	%r10b, -0x30(%rax)
    000000b4: 	movaps	%xmm1, 0x318(%rsp)
    000000bc: 	movzbl	0x319(%rsp), %r10d
    000000c5: 	movb	%r10b, -0x2d(%rax)
    000000c9: 	movaps	%xmm1, 0x308(%rsp)
    000000d1: 	movzbl	0x30a(%rsp), %r10d
    000000da: 	movb	%r10b, -0x2a(%rax)
    000000de: 	movaps	%xmm1, 0x2f8(%rsp)
    000000e6: 	movzbl	0x2fb(%rsp), %r10d
    000000ef: 	movb	%r10b, -0x27(%rax)
    000000f3: 	movaps	%xmm1, 0x2e8(%rsp)
    000000fb: 	movzbl	0x2ec(%rsp), %r10d
    00000104: 	movb	%r10b, -0x24(%rax)
    00000108: 	movaps	%xmm1, 0x2d8(%rsp)
    00000110: 	movzbl	0x2dd(%rsp), %r10d
    00000119: 	movb	%r10b, -0x21(%rax)
    0000011d: 	movaps	%xmm1, 0x2c8(%rsp)
    00000125: 	movzbl	0x2ce(%rsp), %r10d
    0000012e: 	movb	%r10b, -0x1e(%rax)
    00000132: 	movaps	%xmm1, 0x2b8(%rsp)
    0000013a: 	movzbl	0x2bf(%rsp), %r10d
    00000143: 	movb	%r10b, -0x1b(%rax)
    00000147: 	movaps	%xmm1, 0x2a8(%rsp)
    0000014f: 	movzbl	0x2b0(%rsp), %r10d
    00000158: 	movb	%r10b, -0x18(%rax)
    0000015c: 	movaps	%xmm1, 0x298(%rsp)
    00000164: 	movzbl	0x2a1(%rsp), %r10d
    0000016d: 	movb	%r10b, -0x15(%rax)
    00000171: 	movaps	%xmm1, 0x288(%rsp)
    00000179: 	movzbl	0x292(%rsp), %r10d
    00000182: 	movb	%r10b, -0x12(%rax)
    00000186: 	movaps	%xmm1, 0x278(%rsp)
    0000018e: 	movzbl	0x283(%rsp), %r10d
    00000197: 	movb	%r10b, -0xf(%rax)
    0000019b: 	movaps	%xmm1, 0x268(%rsp)
    000001a3: 	movzbl	0x274(%rsp), %r10d
    000001ac: 	movb	%r10b, -0xc(%rax)
    000001b0: 	movaps	%xmm1, 0x258(%rsp)
    000001b8: 	movzbl	0x265(%rsp), %r10d
    000001c1: 	movb	%r10b, -0x9(%rax)
    000001c5: 	movaps	%xmm1, 0x248(%rsp)
    000001cd: 	movzbl	0x256(%rsp), %r10d
    000001d6: 	movb	%r10b, -0x6(%rax)
    000001da: 	movaps	%xmm1, 0x238(%rsp)
    000001e2: 	movzbl	0x247(%rsp), %r10d
    000001eb: 	movb	%r10b, -0x3(%rax)
    000001ef: 	movd	%xmm0, %r10d
    000001f4: 	movb	%r10b, -0x2f(%rax)
    000001f8: 	movaps	%xmm0, 0x228(%rsp)
    00000200: 	movzbl	0x229(%rsp), %r10d
    00000209: 	movb	%r10b, -0x2c(%rax)
    0000020d: 	movaps	%xmm0, 0x218(%rsp)
    00000215: 	movzbl	0x21a(%rsp), %r10d
    0000021e: 	movb	%r10b, -0x29(%rax)
    00000222: 	movaps	%xmm0, 0x208(%rsp)
    0000022a: 	movzbl	0x20b(%rsp), %r10d
    00000233: 	movb	%r10b, -0x26(%rax)
    00000237: 	movaps	%xmm0, 0x1f8(%rsp)
    0000023f: 	movzbl	0x1fc(%rsp), %r10d
    00000248: 	movb	%r10b, -0x23(%rax)
    0000024c: 	movaps	%xmm0, 0x1e8(%rsp)
    00000254: 	movzbl	0x1ed(%rsp), %r10d
    0000025d: 	movb	%r10b, -0x20(%rax)
    00000261: 	movaps	%xmm0, 0x1d8(%rsp)
    00000269: 	movzbl	0x1de(%rsp), %r10d
    00000272: 	movb	%r10b, -0x1d(%rax)
    00000276: 	movaps	%xmm0, 0x1c8(%rsp)
    0000027e: 	movzbl	0x1cf(%rsp), %r10d
    00000287: 	movb	%r10b, -0x1a(%rax)
    0000028b: 	movaps	%xmm0, 0x1b8(%rsp)
    00000293: 	movzbl	0x1c0(%rsp), %r10d
    0000029c: 	movb	%r10b, -0x17(%rax)
    000002a0: 	movaps	%xmm0, 0x1a8(%rsp)
    000002a8: 	movzbl	0x1b1(%rsp), %r10d
    000002b1: 	movb	%r10b, -0x14(%rax)
    000002b5: 	movaps	%xmm0, 0x198(%rsp)
    000002bd: 	movzbl	0x1a2(%rsp), %r10d
    000002c6: 	movb	%r10b, -0x11(%rax)
    000002ca: 	movaps	%xmm0, 0x188(%rsp)
    000002d2: 	movzbl	0x193(%rsp), %r10d
    000002db: 	movb	%r10b, -0xe(%rax)
    000002df: 	movaps	%xmm0, 0x178(%rsp)
    000002e7: 	movzbl	0x184(%rsp), %r10d
    000002f0: 	movb	%r10b, -0xb(%rax)
    000002f4: 	movaps	%xmm0, 0x168(%rsp)
    000002fc: 	movzbl	0x175(%rsp), %r10d
    00000305: 	movb	%r10b, -0x8(%rax)
    00000309: 	movaps	%xmm0, 0x158(%rsp)
    00000311: 	movzbl	0x166(%rsp), %r10d
    0000031a: 	movb	%r10b, -0x5(%rax)
    0000031e: 	movaps	%xmm0, 0x148(%rsp)
    00000326: 	movzbl	0x157(%rsp), %r10d
    0000032f: 	movb	%r10b, -0x2(%rax)
    00000333: 	cmpq	%rcx, %rbx
    00000336: 	jne	.Ltmp220 # Offset: 822
    0000033c: 	movl	%r8d, %ecx
    0000033f: 	andl	$-0x10, %ecx
    00000342: 	movl	%ecx, %r10d
    00000345: 	cmpl	%ecx, %r8d
    00000348: 	je	.Ltmp221 # Offset: 840
    0000034e: 	movl	%r8d, %r14d
    00000351: 	subl	%ecx, %r14d
    00000354: 	leal	-0x1(%r14), %eax
    00000358: 	cmpl	$0x6, %eax
    0000035b: 	jbe	.Ltmp222 # Offset: 859
.Ltmp231:
    00000361: 	movq	(%rsi,%rcx), %rbx
    00000365: 	leaq	(%rcx,%rcx,2), %rax
    00000369: 	movq	(%r9,%rcx), %rcx
    0000036d: 	addq	%rdi, %rax
    00000370: 	movq	%rbx, %r15
    00000373: 	movq	%rcx, -0x70(%rsp)
    00000378: 	movq	-0x70(%rsp), %rcx
    0000037d: 	shrq	$0x10, %r15
    00000381: 	movb	%bl, (%rax)
    00000383: 	movb	%r15b, 0x6(%rax)
    00000387: 	movq	%rbx, %r15
    0000038a: 	shrq	$0x18, %r15
    0000038e: 	movb	%bh, 0x3(%rax)
    00000391: 	movb	%r15b, 0x9(%rax)
    00000395: 	movq	%rbx, %r15
    00000398: 	shrq	$0x20, %r15
    0000039c: 	movb	%cl, 0x1(%rax)
    0000039f: 	movb	%r15b, 0xc(%rax)
    000003a3: 	movq	%rbx, %r15
    000003a6: 	shrq	$0x28, %r15
    000003aa: 	movb	%ch, 0x4(%rax)
    000003ad: 	movb	%r15b, 0xf(%rax)
    000003b1: 	movq	%rbx, %r15
    000003b4: 	shrq	$0x38, %rbx
    000003b8: 	movb	%bl, 0x15(%rax)
    000003bb: 	movq	%rcx, %rbx
    000003be: 	shrq	$0x30, %r15
    000003c2: 	shrq	$0x10, %rbx
    000003c6: 	movb	%r15b, 0x12(%rax)
    000003ca: 	movb	%bl, 0x7(%rax)
    000003cd: 	movq	%rcx, %rbx
    000003d0: 	shrq	$0x18, %rbx
    000003d4: 	movb	%bl, 0xa(%rax)
    000003d7: 	movq	%rcx, %rbx
    000003da: 	shrq	$0x20, %rbx
    000003de: 	movb	%bl, 0xd(%rax)
    000003e1: 	movq	%rcx, %rbx
    000003e4: 	shrq	$0x28, %rbx
    000003e8: 	movb	%bl, 0x10(%rax)
    000003eb: 	movq	%rcx, %rbx
    000003ee: 	shrq	$0x30, %rbx
    000003f2: 	movb	%bl, 0x13(%rax)
    000003f5: 	movq	%rcx, %rbx
    000003f8: 	shrq	$0x38, %rbx
    000003fc: 	movb	%bl, 0x16(%rax)
    000003ff: 	movl	%r14d, %eax
    00000402: 	andl	$-0x8, %eax
    00000405: 	addl	%eax, %r10d
    00000408: 	cmpl	%r14d, %eax
    0000040b: 	je	.Ltmp221 # Offset: 1035
.Ltmp222:
    00000411: 	movslq	%r10d, %rcx
    00000414: 	leal	(%r10,%r10,2), %eax
    00000418: 	movzbl	(%rsi,%rcx), %r14d
    0000041d: 	movslq	%eax, %rbx
    00000420: 	movb	%r14b, (%rdi,%rbx)
    00000424: 	movzbl	(%r9,%rcx), %ecx
    00000429: 	movb	%cl, 0x1(%rdi,%rbx)
    0000042d: 	leal	0x1(%r10), %ecx
    00000431: 	cmpl	%ecx, %r8d
    00000434: 	jle	.Ltmp221 # Offset: 1076
    0000043a: 	movslq	%ecx, %rcx
    0000043d: 	leal	0x3(%rax), %ebx
    00000440: 	movzbl	(%rsi,%rcx), %r14d
    00000445: 	movslq	%ebx, %rbx
    00000448: 	movb	%r14b, (%rdi,%rbx)
    0000044c: 	movzbl	(%r9,%rcx), %ecx
    00000451: 	movb	%cl, 0x1(%rdi,%rbx)
    00000455: 	leal	0x2(%r10), %ecx
    00000459: 	cmpl	%ecx, %r8d
    0000045c: 	jle	.Ltmp221 # Offset: 1116
    00000462: 	movslq	%ecx, %rcx
    00000465: 	leal	0x6(%rax), %ebx
    00000468: 	movzbl	(%rsi,%rcx), %r14d
    0000046d: 	movslq	%ebx, %rbx
    00000470: 	movb	%r14b, (%rdi,%rbx)
    00000474: 	movzbl	(%r9,%rcx), %ecx
    00000479: 	movb	%cl, 0x1(%rdi,%rbx)
    0000047d: 	leal	0x3(%r10), %ecx
    00000481: 	cmpl	%ecx, %r8d
    00000484: 	jle	.Ltmp221 # Offset: 1156
    0000048a: 	movslq	%ecx, %rcx
    0000048d: 	leal	0x9(%rax), %ebx
    00000490: 	movzbl	(%rsi,%rcx), %r14d
    00000495: 	movslq	%ebx, %rbx
    00000498: 	movb	%r14b, (%rdi,%rbx)
    0000049c: 	movzbl	(%r9,%rcx), %ecx
    000004a1: 	movb	%cl, 0x1(%rdi,%rbx)
    000004a5: 	leal	0x4(%r10), %ecx
    000004a9: 	cmpl	%ecx, %r8d
    000004ac: 	jle	.Ltmp221 # Offset: 1196
    000004ae: 	movslq	%ecx, %rcx
    000004b1: 	leal	0xc(%rax), %ebx
    000004b4: 	movzbl	(%rsi,%rcx), %r14d
    000004b9: 	movslq	%ebx, %rbx
    000004bc: 	movb	%r14b, (%rdi,%rbx)
    000004c0: 	movzbl	(%r9,%rcx), %ecx
    000004c5: 	movb	%cl, 0x1(%rdi,%rbx)
    000004c9: 	leal	0x5(%r10), %ecx
    000004cd: 	cmpl	%ecx, %r8d
    000004d0: 	jle	.Ltmp221 # Offset: 1232
    000004d2: 	movslq	%ecx, %rcx
    000004d5: 	leal	0xf(%rax), %ebx
    000004d8: 	addl	$0x6, %r10d
    000004dc: 	movzbl	(%rsi,%rcx), %r14d
    000004e1: 	movslq	%ebx, %rbx
    000004e4: 	movb	%r14b, (%rdi,%rbx)
    000004e8: 	movzbl	(%r9,%rcx), %ecx
    000004ed: 	movb	%cl, 0x1(%rdi,%rbx)
    000004f1: 	cmpl	%r10d, %r8d
    000004f4: 	jle	.Ltmp221 # Offset: 1268
    000004f6: 	movslq	%r10d, %r10
    000004f9: 	addl	$0x12, %eax
    000004fc: 	movzbl	(%rsi,%r10), %ecx
    00000501: 	cltq
    00000503: 	movb	%cl, (%rdi,%rax)
    00000506: 	movzbl	(%r9,%r10), %ecx
    0000050b: 	movb	%cl, 0x1(%rdi,%rax)
.Ltmp221:
    0000050f: 	leaq	0x2(%rdi), %rax
    00000513: 	addq	%rdx, %r11
    00000516: 	cmpq	%r11, %rax
    00000519: 	setae	%cl
    0000051c: 	addq	%rdi, %r12
    0000051f: 	cmpq	%r12, %rdx
    00000522: 	setae	%sil
    00000526: 	orb	%sil, %cl
    00000529: 	je	.Ltmp223 # Offset: 1321
    0000052f: 	cmpb	$0x0, -0x71(%rsp)
    00000534: 	je	.Ltmp223 # Offset: 1332
    0000053a: 	cmpl	$0xe, %r13d
    0000053e: 	jbe	.Ltmp224 # Offset: 1342
    00000544: 	movl	%r8d, %esi
    00000547: 	movq	%rdx, %rcx
    0000054a: 	shrl	$0x4, %esi
    0000054d: 	subl	$0x1, %esi
    00000550: 	shlq	$0x4, %rsi
    00000554: 	leaq	0x10(%rdx,%rsi), %r9
    00000559: 	nopl	(%rax) # Size: 7
.Ltmp225:
    00000560: 	movdqu	(%rcx), %xmm0
    00000564: 	addq	$0x10, %rcx
    00000568: 	addq	$0x30, %rax
    0000056c: 	movd	%xmm0, %esi
    00000570: 	movb	%sil, -0x30(%rax)
    00000574: 	movaps	%xmm0, 0xb8(%rsp)
    0000057c: 	movzbl	0xb9(%rsp), %esi
    00000584: 	movb	%sil, -0x2d(%rax)
    00000588: 	movaps	%xmm0, 0xa8(%rsp)
    00000590: 	movzbl	0xaa(%rsp), %esi
    00000598: 	movb	%sil, -0x2a(%rax)
    0000059c: 	movaps	%xmm0, 0x98(%rsp)
    000005a4: 	movzbl	0x9b(%rsp), %esi
    000005ac: 	movb	%sil, -0x27(%rax)
    000005b0: 	movaps	%xmm0, 0x88(%rsp)
    000005b8: 	movzbl	0x8c(%rsp), %esi
    000005c0: 	movb	%sil, -0x24(%rax)
    000005c4: 	movaps	%xmm0, 0x78(%rsp)
    000005c9: 	movzbl	0x7d(%rsp), %esi
    000005ce: 	movb	%sil, -0x21(%rax)
    000005d2: 	movaps	%xmm0, 0x68(%rsp)
    000005d7: 	movzbl	0x6e(%rsp), %esi
    000005dc: 	movb	%sil, -0x1e(%rax)
    000005e0: 	movaps	%xmm0, 0x58(%rsp)
    000005e5: 	movzbl	0x5f(%rsp), %esi
    000005ea: 	movb	%sil, -0x1b(%rax)
    000005ee: 	movaps	%xmm0, 0x48(%rsp)
    000005f3: 	movzbl	0x50(%rsp), %esi
    000005f8: 	movb	%sil, -0x18(%rax)
    000005fc: 	movaps	%xmm0, 0x38(%rsp)
    00000601: 	movzbl	0x41(%rsp), %esi
    00000606: 	movb	%sil, -0x15(%rax)
    0000060a: 	movaps	%xmm0, 0x28(%rsp)
    0000060f: 	movzbl	0x32(%rsp), %esi
    00000614: 	movb	%sil, -0x12(%rax)
    00000618: 	movaps	%xmm0, 0x18(%rsp)
    0000061d: 	movzbl	0x23(%rsp), %esi
    00000622: 	movb	%sil, -0xf(%rax)
    00000626: 	movaps	%xmm0, 0x8(%rsp)
    0000062b: 	movzbl	0x14(%rsp), %esi
    00000630: 	movb	%sil, -0xc(%rax)
    00000634: 	movaps	%xmm0, -0x8(%rsp)
    00000639: 	movzbl	0x5(%rsp), %esi
    0000063e: 	movb	%sil, -0x9(%rax)
    00000642: 	movaps	%xmm0, -0x18(%rsp)
    00000647: 	movzbl	-0xa(%rsp), %esi
    0000064c: 	movb	%sil, -0x6(%rax)
    00000650: 	movaps	%xmm0, -0x28(%rsp)
    00000655: 	movzbl	-0x19(%rsp), %esi
    0000065a: 	movb	%sil, -0x3(%rax)
    0000065e: 	cmpq	%rcx, %r9
    00000661: 	jne	.Ltmp225 # Offset: 1633
    00000667: 	movl	%r8d, %ecx
    0000066a: 	andl	$-0x10, %ecx
    0000066d: 	movl	%ecx, %esi
    0000066f: 	cmpl	%r8d, %ecx
    00000672: 	je	.Ltmp226 # Offset: 1650
    00000678: 	movl	%r8d, %ebp
    0000067b: 	subl	%ecx, %ebp
    0000067d: 	leal	-0x1(%rbp), %eax
    00000680: 	cmpl	$0x6, %eax
    00000683: 	jbe	.Ltmp227 # Offset: 1667
.Ltmp230:
    00000685: 	leaq	0x2(%rcx,%rcx,2), %rax
    0000068a: 	movq	(%rdx,%rcx), %rcx
    0000068e: 	addq	%rdi, %rax
    00000691: 	movq	%rcx, %r9
    00000694: 	movb	%cl, (%rax)
    00000696: 	shrq	$0x10, %r9
    0000069a: 	movb	%ch, 0x3(%rax)
    0000069d: 	movb	%r9b, 0x6(%rax)
    000006a1: 	movq	%rcx, %r9
    000006a4: 	shrq	$0x18, %r9
    000006a8: 	movb	%r9b, 0x9(%rax)
    000006ac: 	movq	%rcx, %r9
    000006af: 	shrq	$0x20, %r9
    000006b3: 	movb	%r9b, 0xc(%rax)
    000006b7: 	movq	%rcx, %r9
    000006ba: 	shrq	$0x28, %r9
    000006be: 	movb	%r9b, 0xf(%rax)
    000006c2: 	movq	%rcx, %r9
    000006c5: 	shrq	$0x38, %rcx
    000006c9: 	shrq	$0x30, %r9
    000006cd: 	movb	%cl, 0x15(%rax)
    000006d0: 	movb	%r9b, 0x12(%rax)
    000006d4: 	movl	%ebp, %eax
    000006d6: 	andl	$-0x8, %eax
    000006d9: 	addl	%eax, %esi
    000006db: 	cmpl	%eax, %ebp
    000006dd: 	je	.Ltmp226 # Offset: 1757
.Ltmp227:
    000006e3: 	movslq	%esi, %rax
    000006e6: 	leal	(%rsi,%rsi,2), %ecx
    000006e9: 	movzbl	(%rdx,%rax), %r9d
    000006ee: 	movslq	%ecx, %rax
    000006f1: 	movb	%r9b, 0x2(%rdi,%rax)
    000006f6: 	leal	0x1(%rsi), %eax
    000006f9: 	cmpl	%r8d, %eax
    000006fc: 	jge	.Ltmp226 # Offset: 1788
    00000702: 	cltq
    00000704: 	movzbl	(%rdx,%rax), %r9d
    00000709: 	leal	0x3(%rcx), %eax
    0000070c: 	cltq
    0000070e: 	movb	%r9b, 0x2(%rdi,%rax)
    00000713: 	leal	0x2(%rsi), %eax
    00000716: 	cmpl	%eax, %r8d
    00000719: 	jle	.Ltmp226 # Offset: 1817
    0000071b: 	cltq
    0000071d: 	movzbl	(%rdx,%rax), %r9d
    00000722: 	leal	0x6(%rcx), %eax
    00000725: 	cltq
    00000727: 	movb	%r9b, 0x2(%rdi,%rax)
    0000072c: 	leal	0x3(%rsi), %eax
    0000072f: 	cmpl	%r8d, %eax
    00000732: 	jge	.Ltmp226 # Offset: 1842
    00000734: 	cltq
    00000736: 	movzbl	(%rdx,%rax), %r9d
    0000073b: 	leal	0x9(%rcx), %eax
    0000073e: 	cltq
    00000740: 	movb	%r9b, 0x2(%rdi,%rax)
    00000745: 	leal	0x4(%rsi), %eax
    00000748: 	cmpl	%eax, %r8d
    0000074b: 	jle	.Ltmp226 # Offset: 1867
    0000074d: 	cltq
    0000074f: 	movzbl	(%rdx,%rax), %r9d
    00000754: 	leal	0xc(%rcx), %eax
    00000757: 	cltq
    00000759: 	movb	%r9b, 0x2(%rdi,%rax)
    0000075e: 	leal	0x5(%rsi), %eax
    00000761: 	cmpl	%eax, %r8d
    00000764: 	jle	.Ltmp226 # Offset: 1892
    00000766: 	cltq
    00000768: 	addl	$0xf, %ecx
    0000076b: 	movzbl	(%rdx,%rax), %eax
    0000076f: 	movslq	%ecx, %rcx
    00000772: 	movb	%al, 0x2(%rdi,%rcx)
    00000776: 	leal	0x6(%rsi), %eax
    00000779: 	cmpl	%eax, %r8d
    0000077c: 	jle	.Ltmp226 # Offset: 1916
    0000077e: 	cltq
    00000780: 	movzbl	(%rdx,%rax), %eax
    00000784: 	movb	%al, 0x5(%rdi,%rcx)
.Ltmp226:
    00000788: 	addq	$0x330, %rsp
    0000078f: 	popq	%rbx
    00000790: 	popq	%rbp
    00000791: 	popq	%r12
    00000793: 	popq	%r13
    00000795: 	popq	%r14
    00000797: 	popq	%r15
    00000799: 	retq # Offset: 1945
    0000079a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp223:
    000007a0: 	movl	%r13d, %r13d
    000007a3: 	leaq	(%r13,%r13,2), %rcx
    000007a8: 	leaq	0x5(%rdi,%rcx), %rsi
    000007ad: 	nopl	(%rax) # Size: 3
.Ltmp228:
    000007b0: 	movzbl	(%rdx), %ecx
    000007b3: 	addq	$0x3, %rax
    000007b7: 	addq	$0x1, %rdx
    000007bb: 	movb	%cl, -0x3(%rax)
    000007be: 	cmpq	%rax, %rsi
    000007c1: 	jne	.Ltmp228 # Offset: 1985
    000007c3: 	jmp	.Ltmp226 # Offset: 1987
    000007c5: 	nopl	(%rax) # Size: 3
.Ltmp218:
    000007c8: 	movq	%rdi, %rcx
    000007cb: 	movl	%r8d, %ebx
    000007ce: 	xorl	%eax, %eax
.Ltmp229:
    000007d0: 	movzbl	(%rsi,%rax), %r10d
    000007d5: 	addq	$0x3, %rcx
    000007d9: 	movb	%r10b, -0x3(%rcx)
    000007dd: 	movzbl	(%r9,%rax), %r10d
    000007e2: 	addq	$0x1, %rax
    000007e6: 	movb	%r10b, -0x2(%rcx)
    000007ea: 	cmpq	%rax, %rbx
    000007ed: 	jne	.Ltmp229 # Offset: 2029
    000007ef: 	jmp	.Ltmp221 # Offset: 2031
    000007f4: 	nopl	(%rax) # Size: 4
.Ltmp217:
    000007f8: 	retq # Offset: 2040
.Ltmp224:
    000007f9: 	xorl	%ecx, %ecx
    000007fb: 	xorl	%esi, %esi
    000007fd: 	jmp	.Ltmp230 # Offset: 2045
.Ltmp219:
    00000802: 	movl	%r8d, %r14d
    00000805: 	xorl	%ecx, %ecx
    00000807: 	xorl	%r10d, %r10d
    0000080a: 	jmp	.Ltmp231 # Offset: 2058
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version3IhEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version4IhEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x6bb0
  Size        : 0x8cf
  MaxSize     : 0x8d0
  Offset      : 0x6bb0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version4IhEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x340, %rsp
    00000015: 	movl	%r8d, -0x60(%rsp)
    0000001a: 	movl	%r8d, -0x5c(%rsp)
    0000001f: 	movl	$0x0, -0x74(%rsp)
    00000027: 	testl	%r8d, %r8d
    0000002a: 	jle	.Ltmp232 # Offset: 42
    00000030: 	movq	%rsi, %r9
    00000033: 	movq	%rcx, %r14
    00000036: 	movq	%rdx, %rsi
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp244:
    00000040: 	addl	$0x555, -0x74(%rsp)
    00000048: 	movl	-0x74(%rsp), %eax
    0000004c: 	cmpl	-0x60(%rsp), %eax
    00000050: 	jg	.Ltmp233 # Offset: 80
    00000056: 	movq	$0xfff, -0x68(%rsp)
    0000005f: 	movl	$0x555, %r13d
    00000065: 	movl	$0x555, %edx
.Ltmp245:
    0000006a: 	movslq	%edx, %r11
    0000006d: 	testl	%edx, %edx
    0000006f: 	movl	$0x1, %ecx
    00000074: 	movl	$0x2, %ebx
    00000079: 	leaq	(%r11,%r11,2), %r12
    0000007d: 	cmovgq	%r11, %rcx
    00000081: 	movl	%edx, %ebp
    00000083: 	leaq	-0x1(%r12), %rax
    00000088: 	cmovleq	%rbx, %rax
    0000008c: 	leaq	(%r9,%rcx), %r8
    00000090: 	addq	%rdi, %rax
    00000093: 	cmpq	%r8, %rdi
    00000096: 	setae	%r10b
    0000009a: 	cmpq	%rax, %r9
    0000009d: 	setae	%r8b
    000000a1: 	addq	%rsi, %rcx
    000000a4: 	orl	%r10d, %r8d
    000000a7: 	cmpq	%rcx, %rdi
    000000aa: 	setae	%cl
    000000ad: 	cmpq	%rax, %rsi
    000000b0: 	setae	%al
    000000b3: 	orl	%eax, %ecx
    000000b5: 	testb	%cl, %r8b
    000000b8: 	je	.Ltmp234 # Offset: 184
    000000be: 	cmpl	$0x7, %edx
    000000c1: 	jle	.Ltmp234 # Offset: 193
    000000c7: 	testl	%edx, %edx
    000000c9: 	movl	$0x1, %r10d
    000000cf: 	cmovgl	%edx, %r10d
    000000d3: 	cmpl	$0xf, %edx
    000000d6: 	jle	.Ltmp235 # Offset: 214
    000000dc: 	movl	%r10d, %ebx
    000000df: 	movq	%rdi, %rax
    000000e2: 	xorl	%ecx, %ecx
    000000e4: 	shrl	$0x4, %ebx
    000000e7: 	shlq	$0x4, %rbx
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp236:
    000000f0: 	movdqu	(%r9,%rcx), %xmm1
    000000f6: 	movdqu	(%rsi,%rcx), %xmm0
    000000fb: 	addq	$0x10, %rcx
    000000ff: 	addq	$0x30, %rax
    00000103: 	movd	%xmm1, %r8d
    00000108: 	movb	%r8b, -0x30(%rax)
    0000010c: 	movaps	%xmm1, 0x328(%rsp)
    00000114: 	movzbl	0x329(%rsp), %r8d
    0000011d: 	movb	%r8b, -0x2d(%rax)
    00000121: 	movaps	%xmm1, 0x318(%rsp)
    00000129: 	movzbl	0x31a(%rsp), %r8d
    00000132: 	movb	%r8b, -0x2a(%rax)
    00000136: 	movaps	%xmm1, 0x308(%rsp)
    0000013e: 	movzbl	0x30b(%rsp), %r8d
    00000147: 	movb	%r8b, -0x27(%rax)
    0000014b: 	movaps	%xmm1, 0x2f8(%rsp)
    00000153: 	movzbl	0x2fc(%rsp), %r8d
    0000015c: 	movb	%r8b, -0x24(%rax)
    00000160: 	movaps	%xmm1, 0x2e8(%rsp)
    00000168: 	movzbl	0x2ed(%rsp), %r8d
    00000171: 	movb	%r8b, -0x21(%rax)
    00000175: 	movaps	%xmm1, 0x2d8(%rsp)
    0000017d: 	movzbl	0x2de(%rsp), %r8d
    00000186: 	movb	%r8b, -0x1e(%rax)
    0000018a: 	movaps	%xmm1, 0x2c8(%rsp)
    00000192: 	movzbl	0x2cf(%rsp), %r8d
    0000019b: 	movb	%r8b, -0x1b(%rax)
    0000019f: 	movaps	%xmm1, 0x2b8(%rsp)
    000001a7: 	movzbl	0x2c0(%rsp), %r8d
    000001b0: 	movb	%r8b, -0x18(%rax)
    000001b4: 	movaps	%xmm1, 0x2a8(%rsp)
    000001bc: 	movzbl	0x2b1(%rsp), %r8d
    000001c5: 	movb	%r8b, -0x15(%rax)
    000001c9: 	movaps	%xmm1, 0x298(%rsp)
    000001d1: 	movzbl	0x2a2(%rsp), %r8d
    000001da: 	movb	%r8b, -0x12(%rax)
    000001de: 	movaps	%xmm1, 0x288(%rsp)
    000001e6: 	movzbl	0x293(%rsp), %r8d
    000001ef: 	movb	%r8b, -0xf(%rax)
    000001f3: 	movaps	%xmm1, 0x278(%rsp)
    000001fb: 	movzbl	0x284(%rsp), %r8d
    00000204: 	movb	%r8b, -0xc(%rax)
    00000208: 	movaps	%xmm1, 0x268(%rsp)
    00000210: 	movzbl	0x275(%rsp), %r8d
    00000219: 	movb	%r8b, -0x9(%rax)
    0000021d: 	movaps	%xmm1, 0x258(%rsp)
    00000225: 	movzbl	0x266(%rsp), %r8d
    0000022e: 	movb	%r8b, -0x6(%rax)
    00000232: 	movaps	%xmm1, 0x248(%rsp)
    0000023a: 	movzbl	0x257(%rsp), %r8d
    00000243: 	movb	%r8b, -0x3(%rax)
    00000247: 	movd	%xmm0, %r8d
    0000024c: 	movb	%r8b, -0x2f(%rax)
    00000250: 	movaps	%xmm0, 0x238(%rsp)
    00000258: 	movzbl	0x239(%rsp), %r8d
    00000261: 	movb	%r8b, -0x2c(%rax)
    00000265: 	movaps	%xmm0, 0x228(%rsp)
    0000026d: 	movzbl	0x22a(%rsp), %r8d
    00000276: 	movb	%r8b, -0x29(%rax)
    0000027a: 	movaps	%xmm0, 0x218(%rsp)
    00000282: 	movzbl	0x21b(%rsp), %r8d
    0000028b: 	movb	%r8b, -0x26(%rax)
    0000028f: 	movaps	%xmm0, 0x208(%rsp)
    00000297: 	movzbl	0x20c(%rsp), %r8d
    000002a0: 	movb	%r8b, -0x23(%rax)
    000002a4: 	movaps	%xmm0, 0x1f8(%rsp)
    000002ac: 	movzbl	0x1fd(%rsp), %r8d
    000002b5: 	movb	%r8b, -0x20(%rax)
    000002b9: 	movaps	%xmm0, 0x1e8(%rsp)
    000002c1: 	movzbl	0x1ee(%rsp), %r8d
    000002ca: 	movb	%r8b, -0x1d(%rax)
    000002ce: 	movaps	%xmm0, 0x1d8(%rsp)
    000002d6: 	movzbl	0x1df(%rsp), %r8d
    000002df: 	movb	%r8b, -0x1a(%rax)
    000002e3: 	movaps	%xmm0, 0x1c8(%rsp)
    000002eb: 	movzbl	0x1d0(%rsp), %r8d
    000002f4: 	movb	%r8b, -0x17(%rax)
    000002f8: 	movaps	%xmm0, 0x1b8(%rsp)
    00000300: 	movzbl	0x1c1(%rsp), %r8d
    00000309: 	movb	%r8b, -0x14(%rax)
    0000030d: 	movaps	%xmm0, 0x1a8(%rsp)
    00000315: 	movzbl	0x1b2(%rsp), %r8d
    0000031e: 	movb	%r8b, -0x11(%rax)
    00000322: 	movaps	%xmm0, 0x198(%rsp)
    0000032a: 	movzbl	0x1a3(%rsp), %r8d
    00000333: 	movb	%r8b, -0xe(%rax)
    00000337: 	movaps	%xmm0, 0x188(%rsp)
    0000033f: 	movzbl	0x194(%rsp), %r8d
    00000348: 	movb	%r8b, -0xb(%rax)
    0000034c: 	movaps	%xmm0, 0x178(%rsp)
    00000354: 	movzbl	0x185(%rsp), %r8d
    0000035d: 	movb	%r8b, -0x8(%rax)
    00000361: 	movaps	%xmm0, 0x168(%rsp)
    00000369: 	movzbl	0x176(%rsp), %r8d
    00000372: 	movb	%r8b, -0x5(%rax)
    00000376: 	movaps	%xmm0, 0x158(%rsp)
    0000037e: 	movzbl	0x167(%rsp), %r8d
    00000387: 	movb	%r8b, -0x2(%rax)
    0000038b: 	cmpq	%rcx, %rbx
    0000038e: 	jne	.Ltmp236 # Offset: 910
    00000394: 	movl	%r10d, %ecx
    00000397: 	andl	$-0x10, %ecx
    0000039a: 	movl	%ecx, %r8d
    0000039d: 	cmpl	%ecx, %r10d
    000003a0: 	je	.Ltmp237 # Offset: 928
.Ltmp249:
    000003a6: 	subl	%ecx, %r10d
    000003a9: 	leal	-0x1(%r10), %eax
    000003ad: 	cmpl	$0x6, %eax
    000003b0: 	jbe	.Ltmp238 # Offset: 944
    000003b6: 	movq	(%r9,%rcx), %rbx
    000003ba: 	leaq	(%rcx,%rcx,2), %rax
    000003be: 	movq	(%rsi,%rcx), %rcx
    000003c2: 	addq	%rdi, %rax
    000003c5: 	movq	%rbx, %r15
    000003c8: 	movq	%rcx, -0x70(%rsp)
    000003cd: 	movq	-0x70(%rsp), %rcx
    000003d2: 	shrq	$0x10, %r15
    000003d6: 	movb	%bl, (%rax)
    000003d8: 	movb	%r15b, 0x6(%rax)
    000003dc: 	movq	%rbx, %r15
    000003df: 	shrq	$0x18, %r15
    000003e3: 	movb	%bh, 0x3(%rax)
    000003e6: 	movb	%r15b, 0x9(%rax)
    000003ea: 	movq	%rbx, %r15
    000003ed: 	shrq	$0x20, %r15
    000003f1: 	movb	%cl, 0x1(%rax)
    000003f4: 	movb	%r15b, 0xc(%rax)
    000003f8: 	movq	%rbx, %r15
    000003fb: 	shrq	$0x28, %r15
    000003ff: 	movb	%ch, 0x4(%rax)
    00000402: 	movb	%r15b, 0xf(%rax)
    00000406: 	movq	%rbx, %r15
    00000409: 	shrq	$0x38, %rbx
    0000040d: 	movb	%bl, 0x15(%rax)
    00000410: 	movq	%rcx, %rbx
    00000413: 	shrq	$0x30, %r15
    00000417: 	shrq	$0x10, %rbx
    0000041b: 	movb	%r15b, 0x12(%rax)
    0000041f: 	movb	%bl, 0x7(%rax)
    00000422: 	movq	%rcx, %rbx
    00000425: 	shrq	$0x18, %rbx
    00000429: 	movb	%bl, 0xa(%rax)
    0000042c: 	movq	%rcx, %rbx
    0000042f: 	shrq	$0x20, %rbx
    00000433: 	movb	%bl, 0xd(%rax)
    00000436: 	movq	%rcx, %rbx
    00000439: 	shrq	$0x28, %rbx
    0000043d: 	movb	%bl, 0x10(%rax)
    00000440: 	movq	%rcx, %rbx
    00000443: 	shrq	$0x30, %rbx
    00000447: 	movb	%bl, 0x13(%rax)
    0000044a: 	movq	%rcx, %rbx
    0000044d: 	shrq	$0x38, %rbx
    00000451: 	movb	%bl, 0x16(%rax)
    00000454: 	movl	%r10d, %eax
    00000457: 	andl	$-0x8, %eax
    0000045a: 	addl	%eax, %r8d
    0000045d: 	cmpl	%eax, %r10d
    00000460: 	je	.Ltmp237 # Offset: 1120
.Ltmp238:
    00000466: 	movslq	%r8d, %r10
    00000469: 	leal	(%r8,%r8,2), %eax
    0000046d: 	movzbl	(%r9,%r10), %ebx
    00000472: 	movslq	%eax, %rcx
    00000475: 	movb	%bl, (%rdi,%rcx)
    00000478: 	movzbl	(%rsi,%r10), %r10d
    0000047d: 	movb	%r10b, 0x1(%rdi,%rcx)
    00000482: 	leal	0x1(%r8), %ecx
    00000486: 	cmpl	%ecx, %edx
    00000488: 	jle	.Ltmp237 # Offset: 1160
    0000048e: 	movslq	%ecx, %rcx
    00000491: 	leal	0x3(%rax), %r10d
    00000495: 	movzbl	(%r9,%rcx), %ebx
    0000049a: 	movslq	%r10d, %r10
    0000049d: 	movb	%bl, (%rdi,%r10)
    000004a1: 	movzbl	(%rsi,%rcx), %ecx
    000004a5: 	movb	%cl, 0x1(%rdi,%r10)
    000004aa: 	leal	0x2(%r8), %ecx
    000004ae: 	cmpl	%ecx, %edx
    000004b0: 	jle	.Ltmp237 # Offset: 1200
    000004b6: 	movslq	%ecx, %rcx
    000004b9: 	leal	0x6(%rax), %r10d
    000004bd: 	movzbl	(%r9,%rcx), %ebx
    000004c2: 	movslq	%r10d, %r10
    000004c5: 	movb	%bl, (%rdi,%r10)
    000004c9: 	movzbl	(%rsi,%rcx), %ecx
    000004cd: 	movb	%cl, 0x1(%rdi,%r10)
    000004d2: 	leal	0x3(%r8), %ecx
    000004d6: 	cmpl	%ecx, %edx
    000004d8: 	jle	.Ltmp237 # Offset: 1240
    000004de: 	movslq	%ecx, %rcx
    000004e1: 	leal	0x9(%rax), %r10d
    000004e5: 	movzbl	(%r9,%rcx), %ebx
    000004ea: 	movslq	%r10d, %r10
    000004ed: 	movb	%bl, (%rdi,%r10)
    000004f1: 	movzbl	(%rsi,%rcx), %ecx
    000004f5: 	movb	%cl, 0x1(%rdi,%r10)
    000004fa: 	leal	0x4(%r8), %ecx
    000004fe: 	cmpl	%ecx, %edx
    00000500: 	jle	.Ltmp237 # Offset: 1280
    00000502: 	movslq	%ecx, %rcx
    00000505: 	leal	0xc(%rax), %r10d
    00000509: 	movzbl	(%r9,%rcx), %ebx
    0000050e: 	movslq	%r10d, %r10
    00000511: 	movb	%bl, (%rdi,%r10)
    00000515: 	movzbl	(%rsi,%rcx), %ecx
    00000519: 	movb	%cl, 0x1(%rdi,%r10)
    0000051e: 	leal	0x5(%r8), %ecx
    00000522: 	cmpl	%ecx, %edx
    00000524: 	jle	.Ltmp237 # Offset: 1316
    00000526: 	movslq	%ecx, %rcx
    00000529: 	leal	0xf(%rax), %r10d
    0000052d: 	addl	$0x6, %r8d
    00000531: 	movzbl	(%r9,%rcx), %ebx
    00000536: 	movslq	%r10d, %r10
    00000539: 	movb	%bl, (%rdi,%r10)
    0000053d: 	movzbl	(%rsi,%rcx), %ecx
    00000541: 	movb	%cl, 0x1(%rdi,%r10)
    00000546: 	cmpl	%r8d, %edx
    00000549: 	jle	.Ltmp237 # Offset: 1353
    0000054b: 	movslq	%r8d, %r8
    0000054e: 	addl	$0x12, %eax
    00000551: 	movzbl	(%r9,%r8), %ecx
    00000556: 	cltq
    00000558: 	movb	%cl, (%rdi,%rax)
    0000055b: 	movzbl	(%rsi,%r8), %ecx
    00000560: 	movb	%cl, 0x1(%rdi,%rax)
.Ltmp237:
    00000564: 	addq	%rdi, %r12
    00000567: 	leaq	0x2(%rdi), %rax
    0000056b: 	leal	-0x1(%rdx), %ecx
    0000056e: 	cmpq	%r12, %r14
    00000571: 	setae	%r8b
    00000575: 	addq	%r14, %r11
    00000578: 	cmpq	%r11, %rax
    0000057b: 	setae	%r10b
    0000057f: 	orb	%r8b, %r10b
    00000582: 	je	.Ltmp239 # Offset: 1410
    00000588: 	cmpl	$0x6, %ecx
    0000058b: 	jbe	.Ltmp239 # Offset: 1419
    00000591: 	cmpl	$0xe, %ecx
    00000594: 	jbe	.Ltmp240 # Offset: 1428
    0000059a: 	movl	%edx, %r8d
    0000059d: 	movq	%r14, %rcx
    000005a0: 	shrl	$0x4, %r8d
    000005a4: 	subl	$0x1, %r8d
    000005a8: 	shlq	$0x4, %r8
    000005ac: 	leaq	0x10(%r14,%r8), %r10
    000005b1: 	nopl	(%rax) # Size: 7
.Ltmp241:
    000005b8: 	movdqu	(%rcx), %xmm0
    000005bc: 	addq	$0x10, %rcx
    000005c0: 	addq	$0x30, %rax
    000005c4: 	movd	%xmm0, %r8d
    000005c9: 	movb	%r8b, -0x30(%rax)
    000005cd: 	movaps	%xmm0, 0xc8(%rsp)
    000005d5: 	movzbl	0xc9(%rsp), %r8d
    000005de: 	movb	%r8b, -0x2d(%rax)
    000005e2: 	movaps	%xmm0, 0xb8(%rsp)
    000005ea: 	movzbl	0xba(%rsp), %r8d
    000005f3: 	movb	%r8b, -0x2a(%rax)
    000005f7: 	movaps	%xmm0, 0xa8(%rsp)
    000005ff: 	movzbl	0xab(%rsp), %r8d
    00000608: 	movb	%r8b, -0x27(%rax)
    0000060c: 	movaps	%xmm0, 0x98(%rsp)
    00000614: 	movzbl	0x9c(%rsp), %r8d
    0000061d: 	movb	%r8b, -0x24(%rax)
    00000621: 	movaps	%xmm0, 0x88(%rsp)
    00000629: 	movzbl	0x8d(%rsp), %r8d
    00000632: 	movb	%r8b, -0x21(%rax)
    00000636: 	movaps	%xmm0, 0x78(%rsp)
    0000063b: 	movzbl	0x7e(%rsp), %r8d
    00000641: 	movb	%r8b, -0x1e(%rax)
    00000645: 	movaps	%xmm0, 0x68(%rsp)
    0000064a: 	movzbl	0x6f(%rsp), %r8d
    00000650: 	movb	%r8b, -0x1b(%rax)
    00000654: 	movaps	%xmm0, 0x58(%rsp)
    00000659: 	movzbl	0x60(%rsp), %r8d
    0000065f: 	movb	%r8b, -0x18(%rax)
    00000663: 	movaps	%xmm0, 0x48(%rsp)
    00000668: 	movzbl	0x51(%rsp), %r8d
    0000066e: 	movb	%r8b, -0x15(%rax)
    00000672: 	movaps	%xmm0, 0x38(%rsp)
    00000677: 	movzbl	0x42(%rsp), %r8d
    0000067d: 	movb	%r8b, -0x12(%rax)
    00000681: 	movaps	%xmm0, 0x28(%rsp)
    00000686: 	movzbl	0x33(%rsp), %r8d
    0000068c: 	movb	%r8b, -0xf(%rax)
    00000690: 	movaps	%xmm0, 0x18(%rsp)
    00000695: 	movzbl	0x24(%rsp), %r8d
    0000069b: 	movb	%r8b, -0xc(%rax)
    0000069f: 	movaps	%xmm0, 0x8(%rsp)
    000006a4: 	movzbl	0x15(%rsp), %r8d
    000006aa: 	movb	%r8b, -0x9(%rax)
    000006ae: 	movaps	%xmm0, -0x8(%rsp)
    000006b3: 	movzbl	0x6(%rsp), %r8d
    000006b9: 	movb	%r8b, -0x6(%rax)
    000006bd: 	movaps	%xmm0, -0x18(%rsp)
    000006c2: 	movzbl	-0x9(%rsp), %r8d
    000006c8: 	movb	%r8b, -0x3(%rax)
    000006cc: 	cmpq	%rcx, %r10
    000006cf: 	jne	.Ltmp241 # Offset: 1743
    000006d5: 	movl	%edx, %eax
    000006d7: 	andl	$-0x10, %eax
    000006da: 	movl	%eax, %r8d
    000006dd: 	cmpl	%edx, %eax
    000006df: 	je	.Ltmp242 # Offset: 1759
    000006e5: 	movl	%edx, %ebp
    000006e7: 	subl	%eax, %ebp
    000006e9: 	leal	-0x1(%rbp), %ecx
    000006ec: 	cmpl	$0x6, %ecx
    000006ef: 	jbe	.Ltmp243 # Offset: 1775
.Ltmp248:
    000006f1: 	leaq	0x2(%rax,%rax,2), %rcx
    000006f6: 	movq	(%r14,%rax), %rax
    000006fa: 	addq	%rdi, %rcx
    000006fd: 	movq	%rax, %r10
    00000700: 	movb	%al, (%rcx)
    00000702: 	shrq	$0x10, %r10
    00000706: 	movb	%ah, 0x3(%rcx)
    00000709: 	movb	%r10b, 0x6(%rcx)
    0000070d: 	movq	%rax, %r10
    00000710: 	shrq	$0x18, %r10
    00000714: 	movb	%r10b, 0x9(%rcx)
    00000718: 	movq	%rax, %r10
    0000071b: 	shrq	$0x20, %r10
    0000071f: 	movb	%r10b, 0xc(%rcx)
    00000723: 	movq	%rax, %r10
    00000726: 	shrq	$0x28, %r10
    0000072a: 	movb	%r10b, 0xf(%rcx)
    0000072e: 	movq	%rax, %r10
    00000731: 	shrq	$0x38, %rax
    00000735: 	movb	%al, 0x15(%rcx)
    00000738: 	movl	%ebp, %eax
    0000073a: 	shrq	$0x30, %r10
    0000073e: 	andl	$-0x8, %eax
    00000741: 	movb	%r10b, 0x12(%rcx)
    00000745: 	addl	%eax, %r8d
    00000748: 	cmpl	%ebp, %eax
    0000074a: 	je	.Ltmp242 # Offset: 1866
.Ltmp243:
    00000750: 	movslq	%r8d, %rcx
    00000753: 	leal	(%r8,%r8,2), %eax
    00000757: 	movzbl	(%r14,%rcx), %r10d
    0000075c: 	movslq	%eax, %rcx
    0000075f: 	movb	%r10b, 0x2(%rdi,%rcx)
    00000764: 	leal	0x1(%r8), %ecx
    00000768: 	cmpl	%edx, %ecx
    0000076a: 	jge	.Ltmp242 # Offset: 1898
    00000770: 	movslq	%ecx, %rcx
    00000773: 	movzbl	(%r14,%rcx), %r10d
    00000778: 	leal	0x3(%rax), %ecx
    0000077b: 	movslq	%ecx, %rcx
    0000077e: 	movb	%r10b, 0x2(%rdi,%rcx)
    00000783: 	leal	0x2(%r8), %ecx
    00000787: 	cmpl	%ecx, %edx
    00000789: 	jle	.Ltmp242 # Offset: 1929
    0000078b: 	movslq	%ecx, %rcx
    0000078e: 	movzbl	(%r14,%rcx), %r10d
    00000793: 	leal	0x6(%rax), %ecx
    00000796: 	movslq	%ecx, %rcx
    00000799: 	movb	%r10b, 0x2(%rdi,%rcx)
    0000079e: 	leal	0x3(%r8), %ecx
    000007a2: 	cmpl	%edx, %ecx
    000007a4: 	jge	.Ltmp242 # Offset: 1956
    000007a6: 	movslq	%ecx, %rcx
    000007a9: 	movzbl	(%r14,%rcx), %r10d
    000007ae: 	leal	0x9(%rax), %ecx
    000007b1: 	movslq	%ecx, %rcx
    000007b4: 	movb	%r10b, 0x2(%rdi,%rcx)
    000007b9: 	leal	0x4(%r8), %ecx
    000007bd: 	cmpl	%ecx, %edx
    000007bf: 	jle	.Ltmp242 # Offset: 1983
    000007c1: 	movslq	%ecx, %rcx
    000007c4: 	movzbl	(%r14,%rcx), %r10d
    000007c9: 	leal	0xc(%rax), %ecx
    000007cc: 	movslq	%ecx, %rcx
    000007cf: 	movb	%r10b, 0x2(%rdi,%rcx)
    000007d4: 	leal	0x5(%r8), %ecx
    000007d8: 	cmpl	%ecx, %edx
    000007da: 	jle	.Ltmp242 # Offset: 2010
    000007dc: 	movslq	%ecx, %rcx
    000007df: 	addl	$0xf, %eax
    000007e2: 	addl	$0x6, %r8d
    000007e6: 	movzbl	(%r14,%rcx), %ecx
    000007eb: 	cltq
    000007ed: 	movb	%cl, 0x2(%rdi,%rax)
    000007f1: 	cmpl	%r8d, %edx
    000007f4: 	jle	.Ltmp242 # Offset: 2036
    000007f6: 	movslq	%r8d, %r8
    000007f9: 	movzbl	(%r14,%r8), %edx
    000007fe: 	movb	%dl, 0x5(%rdi,%rax)
.Ltmp242:
    00000802: 	movl	-0x60(%rsp), %edx
    00000806: 	addq	-0x68(%rsp), %rdi
    0000080b: 	addq	%r13, %r9
    0000080e: 	addq	%r13, %rsi
    00000811: 	subl	$0x555, -0x5c(%rsp)
    00000819: 	addq	%r13, %r14
    0000081c: 	cmpl	%edx, -0x74(%rsp)
    00000820: 	jl	.Ltmp244 # Offset: 2080
.Ltmp232:
    00000826: 	addq	$0x340, %rsp
    0000082d: 	popq	%rbx
    0000082e: 	popq	%rbp
    0000082f: 	popq	%r12
    00000831: 	popq	%r13
    00000833: 	popq	%r14
    00000835: 	popq	%r15
    00000837: 	retq # Offset: 2103
    00000838: 	nopl	(%rax,%rax) # Size: 8
.Ltmp233:
    00000840: 	movslq	-0x5c(%rsp), %r13
    00000845: 	leal	(%r13,%r13,2), %eax
    0000084a: 	movl	%r13d, %edx
    0000084d: 	cltq
    0000084f: 	movq	%rax, -0x68(%rsp)
    00000854: 	testl	%r13d, %r13d
    00000857: 	jg	.Ltmp245 # Offset: 2135
    0000085d: 	jmp	.Ltmp242 # Offset: 2141
    0000085f: 	nop # Size: 1
.Ltmp239:
    00000860: 	leaq	(%rcx,%rcx,2), %rcx
    00000864: 	movq	%r14, %rdx
    00000867: 	leaq	0x5(%rdi,%rcx), %r8
    0000086c: 	nopl	(%rax) # Size: 4
.Ltmp246:
    00000870: 	movzbl	(%rdx), %ecx
    00000873: 	addq	$0x3, %rax
    00000877: 	addq	$0x1, %rdx
    0000087b: 	movb	%cl, -0x3(%rax)
    0000087e: 	cmpq	%rax, %r8
    00000881: 	jne	.Ltmp246 # Offset: 2177
    00000883: 	jmp	.Ltmp242 # Offset: 2179
    00000888: 	nopl	(%rax,%rax) # Size: 8
.Ltmp234:
    00000890: 	movq	%rdi, %rcx
    00000893: 	xorl	%eax, %eax
    00000895: 	nopl	(%rax) # Size: 3
.Ltmp247:
    00000898: 	movzbl	(%r9,%rax), %r8d
    0000089d: 	addq	$0x3, %rcx
    000008a1: 	movb	%r8b, -0x3(%rcx)
    000008a5: 	movzbl	(%rsi,%rax), %r8d
    000008aa: 	addq	$0x1, %rax
    000008ae: 	movb	%r8b, -0x2(%rcx)
    000008b2: 	cmpl	%eax, %edx
    000008b4: 	jg	.Ltmp247 # Offset: 2228
    000008b6: 	jmp	.Ltmp237 # Offset: 2230
.Ltmp240:
    000008bb: 	xorl	%eax, %eax
    000008bd: 	xorl	%r8d, %r8d
    000008c0: 	jmp	.Ltmp248 # Offset: 2240
.Ltmp235:
    000008c5: 	xorl	%ecx, %ecx
    000008c7: 	xorl	%r8d, %r8d
    000008ca: 	jmp	.Ltmp249 # Offset: 2250
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version4IhEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version5IhEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x7480
  Size        : 0xa33
  MaxSize     : 0xa40
  Offset      : 0x7480
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version5IhEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x340, %rsp
    00000015: 	movl	%r8d, -0x60(%rsp)
    0000001a: 	movl	%r8d, -0x5c(%rsp)
    0000001f: 	movl	$0x0, -0x74(%rsp)
    00000027: 	testl	%r8d, %r8d
    0000002a: 	jle	.Ltmp250 # Offset: 42
    00000030: 	movq	%rdx, %r14
    00000033: 	movq	%rcx, %r13
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp267:
    00000040: 	addl	$0x555, -0x74(%rsp)
    00000048: 	movl	-0x74(%rsp), %eax
    0000004c: 	cmpl	-0x60(%rsp), %eax
    00000050: 	jg	.Ltmp251 # Offset: 80
    00000056: 	movq	$0xfff, -0x68(%rsp)
    0000005f: 	movl	$0x555, %ebp
    00000064: 	movl	$0x555, %eax
.Ltmp269:
    00000069: 	movslq	%eax, %r9
    0000006c: 	testl	%eax, %eax
    0000006e: 	movl	$0x1, %ebx
    00000073: 	movl	%eax, %r11d
    00000076: 	leaq	(%r9,%r9,2), %r10
    0000007a: 	leaq	-0x2(%r10), %rdx
    0000007e: 	cmovleq	%rbx, %rdx
    00000082: 	addq	%rdi, %rdx
    00000085: 	cmpq	%rdx, %rsi
    00000088: 	movl	$0x1, %edx
    0000008d: 	setae	%cl
    00000090: 	testl	%eax, %eax
    00000092: 	cmovgq	%r9, %rdx
    00000096: 	addq	%rsi, %rdx
    00000099: 	cmpq	%rdx, %rdi
    0000009c: 	setae	%dl
    0000009f: 	orb	%cl, %dl
    000000a1: 	je	.Ltmp252 # Offset: 161
    000000a7: 	cmpl	$0x7, %eax
    000000aa: 	jle	.Ltmp252 # Offset: 170
    000000b0: 	testl	%eax, %eax
    000000b2: 	cmovgl	%eax, %ebx
    000000b5: 	cmpl	$0xf, %eax
    000000b8: 	jle	.Ltmp253 # Offset: 184
    000000be: 	movl	%ebx, %r8d
    000000c1: 	movq	%rsi, %rcx
    000000c4: 	movq	%rdi, %rdx
    000000c7: 	shrl	$0x4, %r8d
    000000cb: 	subl	$0x1, %r8d
    000000cf: 	shlq	$0x4, %r8
    000000d3: 	leaq	0x10(%rsi,%r8), %r12
    000000d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp254:
    000000e0: 	movdqu	(%rcx), %xmm0
    000000e4: 	addq	$0x10, %rcx
    000000e8: 	addq	$0x30, %rdx
    000000ec: 	movd	%xmm0, %r8d
    000000f1: 	movb	%r8b, -0x30(%rdx)
    000000f5: 	movaps	%xmm0, 0x328(%rsp)
    000000fd: 	movzbl	0x329(%rsp), %r8d
    00000106: 	movb	%r8b, -0x2d(%rdx)
    0000010a: 	movaps	%xmm0, 0x318(%rsp)
    00000112: 	movzbl	0x31a(%rsp), %r8d
    0000011b: 	movb	%r8b, -0x2a(%rdx)
    0000011f: 	movaps	%xmm0, 0x308(%rsp)
    00000127: 	movzbl	0x30b(%rsp), %r8d
    00000130: 	movb	%r8b, -0x27(%rdx)
    00000134: 	movaps	%xmm0, 0x2f8(%rsp)
    0000013c: 	movzbl	0x2fc(%rsp), %r8d
    00000145: 	movb	%r8b, -0x24(%rdx)
    00000149: 	movaps	%xmm0, 0x2e8(%rsp)
    00000151: 	movzbl	0x2ed(%rsp), %r8d
    0000015a: 	movb	%r8b, -0x21(%rdx)
    0000015e: 	movaps	%xmm0, 0x2d8(%rsp)
    00000166: 	movzbl	0x2de(%rsp), %r8d
    0000016f: 	movb	%r8b, -0x1e(%rdx)
    00000173: 	movaps	%xmm0, 0x2c8(%rsp)
    0000017b: 	movzbl	0x2cf(%rsp), %r8d
    00000184: 	movb	%r8b, -0x1b(%rdx)
    00000188: 	movaps	%xmm0, 0x2b8(%rsp)
    00000190: 	movzbl	0x2c0(%rsp), %r8d
    00000199: 	movb	%r8b, -0x18(%rdx)
    0000019d: 	movaps	%xmm0, 0x2a8(%rsp)
    000001a5: 	movzbl	0x2b1(%rsp), %r8d
    000001ae: 	movb	%r8b, -0x15(%rdx)
    000001b2: 	movaps	%xmm0, 0x298(%rsp)
    000001ba: 	movzbl	0x2a2(%rsp), %r8d
    000001c3: 	movb	%r8b, -0x12(%rdx)
    000001c7: 	movaps	%xmm0, 0x288(%rsp)
    000001cf: 	movzbl	0x293(%rsp), %r8d
    000001d8: 	movb	%r8b, -0xf(%rdx)
    000001dc: 	movaps	%xmm0, 0x278(%rsp)
    000001e4: 	movzbl	0x284(%rsp), %r8d
    000001ed: 	movb	%r8b, -0xc(%rdx)
    000001f1: 	movaps	%xmm0, 0x268(%rsp)
    000001f9: 	movzbl	0x275(%rsp), %r8d
    00000202: 	movb	%r8b, -0x9(%rdx)
    00000206: 	movaps	%xmm0, 0x258(%rsp)
    0000020e: 	movzbl	0x266(%rsp), %r8d
    00000217: 	movb	%r8b, -0x6(%rdx)
    0000021b: 	movaps	%xmm0, 0x248(%rsp)
    00000223: 	movzbl	0x257(%rsp), %r8d
    0000022c: 	movb	%r8b, -0x3(%rdx)
    00000230: 	cmpq	%r12, %rcx
    00000233: 	jne	.Ltmp254 # Offset: 563
    00000239: 	movl	%ebx, %ecx
    0000023b: 	andl	$-0x10, %ecx
    0000023e: 	movl	%ecx, %r8d
    00000241: 	cmpl	%ecx, %ebx
    00000243: 	je	.Ltmp255 # Offset: 579
.Ltmp273:
    00000249: 	subl	%ecx, %ebx
    0000024b: 	leal	-0x1(%rbx), %edx
    0000024e: 	movl	%ebx, %r15d
    00000251: 	cmpl	$0x6, %edx
    00000254: 	jbe	.Ltmp256 # Offset: 596
    00000256: 	leaq	(%rcx,%rcx,2), %rdx
    0000025a: 	movq	(%rsi,%rcx), %rcx
    0000025e: 	andl	$-0x8, %ebx
    00000261: 	addq	%rdi, %rdx
    00000264: 	addl	%ebx, %r8d
    00000267: 	movq	%rcx, %r12
    0000026a: 	movb	%cl, (%rdx)
    0000026c: 	shrq	$0x10, %r12
    00000270: 	movb	%ch, 0x3(%rdx)
    00000273: 	movb	%r12b, 0x6(%rdx)
    00000277: 	movq	%rcx, %r12
    0000027a: 	shrq	$0x18, %r12
    0000027e: 	movb	%r12b, 0x9(%rdx)
    00000282: 	movq	%rcx, %r12
    00000285: 	shrq	$0x20, %r12
    00000289: 	movb	%r12b, 0xc(%rdx)
    0000028d: 	movq	%rcx, %r12
    00000290: 	shrq	$0x28, %r12
    00000294: 	movb	%r12b, 0xf(%rdx)
    00000298: 	movq	%rcx, %r12
    0000029b: 	shrq	$0x38, %rcx
    0000029f: 	shrq	$0x30, %r12
    000002a3: 	movb	%cl, 0x15(%rdx)
    000002a6: 	movb	%r12b, 0x12(%rdx)
    000002aa: 	cmpl	%ebx, %r15d
    000002ad: 	je	.Ltmp255 # Offset: 685
.Ltmp256:
    000002b3: 	movslq	%r8d, %rcx
    000002b6: 	leal	(%r8,%r8,2), %edx
    000002ba: 	movzbl	(%rsi,%rcx), %ebx
    000002be: 	movslq	%edx, %rcx
    000002c1: 	movb	%bl, (%rdi,%rcx)
    000002c4: 	leal	0x1(%r8), %ecx
    000002c8: 	cmpl	%ecx, %eax
    000002ca: 	jle	.Ltmp255 # Offset: 714
    000002d0: 	movslq	%ecx, %rcx
    000002d3: 	movzbl	(%rsi,%rcx), %ebx
    000002d7: 	leal	0x3(%rdx), %ecx
    000002da: 	movslq	%ecx, %rcx
    000002dd: 	movb	%bl, (%rdi,%rcx)
    000002e0: 	leal	0x2(%r8), %ecx
    000002e4: 	cmpl	%ecx, %eax
    000002e6: 	jle	.Ltmp255 # Offset: 742
    000002e8: 	movslq	%ecx, %rcx
    000002eb: 	movzbl	(%rsi,%rcx), %ebx
    000002ef: 	leal	0x6(%rdx), %ecx
    000002f2: 	movslq	%ecx, %rcx
    000002f5: 	movb	%bl, (%rdi,%rcx)
    000002f8: 	leal	0x3(%r8), %ecx
    000002fc: 	cmpl	%ecx, %eax
    000002fe: 	jle	.Ltmp255 # Offset: 766
    00000300: 	movslq	%ecx, %rcx
    00000303: 	movzbl	(%rsi,%rcx), %ebx
    00000307: 	leal	0x9(%rdx), %ecx
    0000030a: 	movslq	%ecx, %rcx
    0000030d: 	movb	%bl, (%rdi,%rcx)
    00000310: 	leal	0x4(%r8), %ecx
    00000314: 	cmpl	%ecx, %eax
    00000316: 	jle	.Ltmp255 # Offset: 790
    00000318: 	movslq	%ecx, %rcx
    0000031b: 	movzbl	(%rsi,%rcx), %ebx
    0000031f: 	leal	0xc(%rdx), %ecx
    00000322: 	movslq	%ecx, %rcx
    00000325: 	movb	%bl, (%rdi,%rcx)
    00000328: 	leal	0x5(%r8), %ecx
    0000032c: 	cmpl	%ecx, %eax
    0000032e: 	jle	.Ltmp255 # Offset: 814
    00000330: 	movslq	%ecx, %rcx
    00000333: 	addl	$0x6, %r8d
    00000337: 	movzbl	(%rsi,%rcx), %ebx
    0000033b: 	leal	0xf(%rdx), %ecx
    0000033e: 	movslq	%ecx, %rcx
    00000341: 	movb	%bl, (%rdi,%rcx)
    00000344: 	cmpl	%r8d, %eax
    00000347: 	jle	.Ltmp255 # Offset: 839
    00000349: 	movslq	%r8d, %r8
    0000034c: 	addl	$0x12, %edx
    0000034f: 	movzbl	(%rsi,%r8), %ecx
    00000354: 	movslq	%edx, %rdx
    00000357: 	movb	%cl, (%rdi,%rdx)
.Ltmp255:
    0000035a: 	leal	-0x1(%rax), %r15d
    0000035e: 	leaq	-0x1(%rdi,%r10), %rcx
    00000363: 	cmpl	$0x6, %r15d
    00000367: 	leaq	0x1(%rdi), %rdx
    0000036b: 	movl	%r15d, -0x6c(%rsp)
    00000370: 	seta	-0x6d(%rsp)
    00000375: 	cmpq	%rcx, %r14
    00000378: 	leaq	(%r14,%r9), %rcx
    0000037c: 	movzbl	-0x6d(%rsp), %ebx
    00000381: 	setae	%r8b
    00000385: 	cmpq	%rcx, %rdx
    00000388: 	setae	%cl
    0000038b: 	orb	%r8b, %cl
    0000038e: 	je	.Ltmp257 # Offset: 910
    00000394: 	testb	%bl, %bl
    00000396: 	je	.Ltmp257 # Offset: 918
    0000039c: 	movl	%r15d, %ebx
    0000039f: 	cmpl	$0xe, %r15d
    000003a3: 	jbe	.Ltmp258 # Offset: 931
    000003a9: 	movl	%eax, %r8d
    000003ac: 	movq	%r14, %rcx
    000003af: 	shrl	$0x4, %r8d
    000003b3: 	subl	$0x1, %r8d
    000003b7: 	shlq	$0x4, %r8
    000003bb: 	leaq	0x10(%r14,%r8), %r12
.Ltmp259:
    000003c0: 	movdqu	(%rcx), %xmm0
    000003c4: 	addq	$0x10, %rcx
    000003c8: 	addq	$0x30, %rdx
    000003cc: 	movd	%xmm0, %r8d
    000003d1: 	movb	%r8b, -0x30(%rdx)
    000003d5: 	movaps	%xmm0, 0x1f8(%rsp)
    000003dd: 	movzbl	0x1f9(%rsp), %r8d
    000003e6: 	movb	%r8b, -0x2d(%rdx)
    000003ea: 	movaps	%xmm0, 0x1e8(%rsp)
    000003f2: 	movzbl	0x1ea(%rsp), %r8d
    000003fb: 	movb	%r8b, -0x2a(%rdx)
    000003ff: 	movaps	%xmm0, 0x1d8(%rsp)
    00000407: 	movzbl	0x1db(%rsp), %r8d
    00000410: 	movb	%r8b, -0x27(%rdx)
    00000414: 	movaps	%xmm0, 0x1c8(%rsp)
    0000041c: 	movzbl	0x1cc(%rsp), %r8d
    00000425: 	movb	%r8b, -0x24(%rdx)
    00000429: 	movaps	%xmm0, 0x1b8(%rsp)
    00000431: 	movzbl	0x1bd(%rsp), %r8d
    0000043a: 	movb	%r8b, -0x21(%rdx)
    0000043e: 	movaps	%xmm0, 0x1a8(%rsp)
    00000446: 	movzbl	0x1ae(%rsp), %r8d
    0000044f: 	movb	%r8b, -0x1e(%rdx)
    00000453: 	movaps	%xmm0, 0x198(%rsp)
    0000045b: 	movzbl	0x19f(%rsp), %r8d
    00000464: 	movb	%r8b, -0x1b(%rdx)
    00000468: 	movaps	%xmm0, 0x188(%rsp)
    00000470: 	movzbl	0x190(%rsp), %r8d
    00000479: 	movb	%r8b, -0x18(%rdx)
    0000047d: 	movaps	%xmm0, 0x178(%rsp)
    00000485: 	movzbl	0x181(%rsp), %r8d
    0000048e: 	movb	%r8b, -0x15(%rdx)
    00000492: 	movaps	%xmm0, 0x168(%rsp)
    0000049a: 	movzbl	0x172(%rsp), %r8d
    000004a3: 	movb	%r8b, -0x12(%rdx)
    000004a7: 	movaps	%xmm0, 0x158(%rsp)
    000004af: 	movzbl	0x163(%rsp), %r8d
    000004b8: 	movb	%r8b, -0xf(%rdx)
    000004bc: 	movaps	%xmm0, 0x148(%rsp)
    000004c4: 	movzbl	0x154(%rsp), %r8d
    000004cd: 	movb	%r8b, -0xc(%rdx)
    000004d1: 	movaps	%xmm0, 0x138(%rsp)
    000004d9: 	movzbl	0x145(%rsp), %r8d
    000004e2: 	movb	%r8b, -0x9(%rdx)
    000004e6: 	movaps	%xmm0, 0x128(%rsp)
    000004ee: 	movzbl	0x136(%rsp), %r8d
    000004f7: 	movb	%r8b, -0x6(%rdx)
    000004fb: 	movaps	%xmm0, 0x118(%rsp)
    00000503: 	movzbl	0x127(%rsp), %r8d
    0000050c: 	movb	%r8b, -0x3(%rdx)
    00000510: 	cmpq	%r12, %rcx
    00000513: 	jne	.Ltmp259 # Offset: 1299
    00000519: 	movl	%eax, %ecx
    0000051b: 	movl	%ebx, -0x6c(%rsp)
    0000051f: 	andl	$-0x10, %ecx
    00000522: 	movl	%ecx, %r8d
    00000525: 	cmpl	%eax, %ecx
    00000527: 	je	.Ltmp260 # Offset: 1319
    0000052d: 	movl	%eax, %r12d
    00000530: 	subl	%ecx, %r12d
    00000533: 	leal	-0x1(%r12), %edx
    00000538: 	cmpl	$0x6, %edx
    0000053b: 	jbe	.Ltmp261 # Offset: 1339
.Ltmp275:
    0000053d: 	leaq	0x1(%rcx,%rcx,2), %rdx
    00000542: 	movq	(%r14,%rcx), %rcx
    00000546: 	addq	%rdi, %rdx
    00000549: 	movq	%rcx, %r15
    0000054c: 	movb	%cl, (%rdx)
    0000054e: 	shrq	$0x10, %r15
    00000552: 	movb	%ch, 0x3(%rdx)
    00000555: 	movb	%r15b, 0x6(%rdx)
    00000559: 	movq	%rcx, %r15
    0000055c: 	shrq	$0x18, %r15
    00000560: 	movb	%r15b, 0x9(%rdx)
    00000564: 	movq	%rcx, %r15
    00000567: 	shrq	$0x20, %r15
    0000056b: 	movb	%r15b, 0xc(%rdx)
    0000056f: 	movq	%rcx, %r15
    00000572: 	shrq	$0x28, %r15
    00000576: 	movb	%r15b, 0xf(%rdx)
    0000057a: 	movq	%rcx, %r15
    0000057d: 	shrq	$0x38, %rcx
    00000581: 	shrq	$0x30, %r15
    00000585: 	movb	%cl, 0x15(%rdx)
    00000588: 	movb	%r15b, 0x12(%rdx)
    0000058c: 	movl	%r12d, %edx
    0000058f: 	andl	$-0x8, %edx
    00000592: 	addl	%edx, %r8d
    00000595: 	cmpl	%r12d, %edx
    00000598: 	je	.Ltmp260 # Offset: 1432
.Ltmp261:
    0000059e: 	movslq	%r8d, %rcx
    000005a1: 	leal	(%r8,%r8,2), %edx
    000005a5: 	movzbl	(%r14,%rcx), %r12d
    000005aa: 	leal	0x1(%rdx), %ecx
    000005ad: 	movslq	%ecx, %rcx
    000005b0: 	movb	%r12b, (%rdi,%rcx)
    000005b4: 	leal	0x1(%r8), %ecx
    000005b8: 	cmpl	%ecx, %eax
    000005ba: 	jle	.Ltmp260 # Offset: 1466
    000005c0: 	movslq	%ecx, %rcx
    000005c3: 	movzbl	(%r14,%rcx), %r12d
    000005c8: 	leal	0x4(%rdx), %ecx
    000005cb: 	movslq	%ecx, %rcx
    000005ce: 	movb	%r12b, (%rdi,%rcx)
    000005d2: 	leal	0x2(%r8), %ecx
    000005d6: 	cmpl	%ecx, %eax
    000005d8: 	jle	.Ltmp260 # Offset: 1496
    000005da: 	movslq	%ecx, %rcx
    000005dd: 	movzbl	(%r14,%rcx), %r12d
    000005e2: 	leal	0x7(%rdx), %ecx
    000005e5: 	movslq	%ecx, %rcx
    000005e8: 	movb	%r12b, (%rdi,%rcx)
    000005ec: 	leal	0x3(%r8), %ecx
    000005f0: 	cmpl	%ecx, %eax
    000005f2: 	jle	.Ltmp260 # Offset: 1522
    000005f4: 	movslq	%ecx, %rcx
    000005f7: 	movzbl	(%r14,%rcx), %r12d
    000005fc: 	leal	0xa(%rdx), %ecx
    000005ff: 	movslq	%ecx, %rcx
    00000602: 	movb	%r12b, (%rdi,%rcx)
    00000606: 	leal	0x4(%r8), %ecx
    0000060a: 	cmpl	%ecx, %eax
    0000060c: 	jle	.Ltmp260 # Offset: 1548
    0000060e: 	movslq	%ecx, %rcx
    00000611: 	movzbl	(%r14,%rcx), %r12d
    00000616: 	leal	0xd(%rdx), %ecx
    00000619: 	movslq	%ecx, %rcx
    0000061c: 	movb	%r12b, (%rdi,%rcx)
    00000620: 	leal	0x5(%r8), %ecx
    00000624: 	cmpl	%ecx, %eax
    00000626: 	jle	.Ltmp260 # Offset: 1574
    00000628: 	movslq	%ecx, %rcx
    0000062b: 	addl	$0x6, %r8d
    0000062f: 	movzbl	(%r14,%rcx), %r12d
    00000634: 	leal	0x10(%rdx), %ecx
    00000637: 	movslq	%ecx, %rcx
    0000063a: 	movb	%r12b, (%rdi,%rcx)
    0000063e: 	cmpl	%r8d, %eax
    00000641: 	jle	.Ltmp260 # Offset: 1601
    00000643: 	movslq	%r8d, %r8
    00000646: 	addl	$0x13, %edx
    00000649: 	movzbl	(%r14,%r8), %ecx
    0000064e: 	movslq	%edx, %rdx
    00000651: 	movb	%cl, (%rdi,%rdx)
.Ltmp260:
    00000654: 	addq	%rdi, %r10
    00000657: 	leaq	0x2(%rdi), %rdx
    0000065b: 	cmpq	%r10, %r13
    0000065e: 	setae	%cl
    00000661: 	addq	%r13, %r9
    00000664: 	cmpq	%r9, %rdx
    00000667: 	setae	%r8b
    0000066b: 	orb	%cl, %r8b
    0000066e: 	je	.Ltmp262 # Offset: 1646
    00000674: 	cmpb	$0x0, -0x6d(%rsp)
    00000679: 	je	.Ltmp262 # Offset: 1657
    0000067f: 	cmpl	$0xe, -0x6c(%rsp)
    00000684: 	jbe	.Ltmp263 # Offset: 1668
    0000068a: 	movl	%eax, %r8d
    0000068d: 	movq	%r13, %rcx
    00000690: 	shrl	$0x4, %r8d
    00000694: 	subl	$0x1, %r8d
    00000698: 	shlq	$0x4, %r8
    0000069c: 	leaq	0x10(%r13,%r8), %r9
    000006a1: 	nopl	(%rax) # Size: 7
.Ltmp264:
    000006a8: 	movdqu	(%rcx), %xmm0
    000006ac: 	addq	$0x10, %rcx
    000006b0: 	addq	$0x30, %rdx
    000006b4: 	movd	%xmm0, %r8d
    000006b9: 	movb	%r8b, -0x30(%rdx)
    000006bd: 	movaps	%xmm0, 0xc8(%rsp)
    000006c5: 	movzbl	0xc9(%rsp), %r8d
    000006ce: 	movb	%r8b, -0x2d(%rdx)
    000006d2: 	movaps	%xmm0, 0xb8(%rsp)
    000006da: 	movzbl	0xba(%rsp), %r8d
    000006e3: 	movb	%r8b, -0x2a(%rdx)
    000006e7: 	movaps	%xmm0, 0xa8(%rsp)
    000006ef: 	movzbl	0xab(%rsp), %r8d
    000006f8: 	movb	%r8b, -0x27(%rdx)
    000006fc: 	movaps	%xmm0, 0x98(%rsp)
    00000704: 	movzbl	0x9c(%rsp), %r8d
    0000070d: 	movb	%r8b, -0x24(%rdx)
    00000711: 	movaps	%xmm0, 0x88(%rsp)
    00000719: 	movzbl	0x8d(%rsp), %r8d
    00000722: 	movb	%r8b, -0x21(%rdx)
    00000726: 	movaps	%xmm0, 0x78(%rsp)
    0000072b: 	movzbl	0x7e(%rsp), %r8d
    00000731: 	movb	%r8b, -0x1e(%rdx)
    00000735: 	movaps	%xmm0, 0x68(%rsp)
    0000073a: 	movzbl	0x6f(%rsp), %r8d
    00000740: 	movb	%r8b, -0x1b(%rdx)
    00000744: 	movaps	%xmm0, 0x58(%rsp)
    00000749: 	movzbl	0x60(%rsp), %r8d
    0000074f: 	movb	%r8b, -0x18(%rdx)
    00000753: 	movaps	%xmm0, 0x48(%rsp)
    00000758: 	movzbl	0x51(%rsp), %r8d
    0000075e: 	movb	%r8b, -0x15(%rdx)
    00000762: 	movaps	%xmm0, 0x38(%rsp)
    00000767: 	movzbl	0x42(%rsp), %r8d
    0000076d: 	movb	%r8b, -0x12(%rdx)
    00000771: 	movaps	%xmm0, 0x28(%rsp)
    00000776: 	movzbl	0x33(%rsp), %r8d
    0000077c: 	movb	%r8b, -0xf(%rdx)
    00000780: 	movaps	%xmm0, 0x18(%rsp)
    00000785: 	movzbl	0x24(%rsp), %r8d
    0000078b: 	movb	%r8b, -0xc(%rdx)
    0000078f: 	movaps	%xmm0, 0x8(%rsp)
    00000794: 	movzbl	0x15(%rsp), %r8d
    0000079a: 	movb	%r8b, -0x9(%rdx)
    0000079e: 	movaps	%xmm0, -0x8(%rsp)
    000007a3: 	movzbl	0x6(%rsp), %r8d
    000007a9: 	movb	%r8b, -0x6(%rdx)
    000007ad: 	movaps	%xmm0, -0x18(%rsp)
    000007b2: 	movzbl	-0x9(%rsp), %r8d
    000007b8: 	movb	%r8b, -0x3(%rdx)
    000007bc: 	cmpq	%rcx, %r9
    000007bf: 	jne	.Ltmp264 # Offset: 1983
    000007c5: 	movl	%eax, %ecx
    000007c7: 	andl	$-0x10, %ecx
    000007ca: 	movl	%ecx, %r8d
    000007cd: 	cmpl	%eax, %ecx
    000007cf: 	je	.Ltmp265 # Offset: 1999
    000007d5: 	movl	%eax, %r11d
    000007d8: 	subl	%ecx, %r11d
    000007db: 	leal	-0x1(%r11), %edx
    000007df: 	cmpl	$0x6, %edx
    000007e2: 	jbe	.Ltmp266 # Offset: 2018
.Ltmp274:
    000007e4: 	leaq	0x2(%rcx,%rcx,2), %rdx
    000007e9: 	movq	(%r13,%rcx), %rcx
    000007ee: 	addq	%rdi, %rdx
    000007f1: 	movq	%rcx, %r9
    000007f4: 	movb	%cl, (%rdx)
    000007f6: 	shrq	$0x10, %r9
    000007fa: 	movb	%ch, 0x3(%rdx)
    000007fd: 	movb	%r9b, 0x6(%rdx)
    00000801: 	movq	%rcx, %r9
    00000804: 	shrq	$0x18, %r9
    00000808: 	movb	%r9b, 0x9(%rdx)
    0000080c: 	movq	%rcx, %r9
    0000080f: 	shrq	$0x20, %r9
    00000813: 	movb	%r9b, 0xc(%rdx)
    00000817: 	movq	%rcx, %r9
    0000081a: 	shrq	$0x28, %r9
    0000081e: 	movb	%r9b, 0xf(%rdx)
    00000822: 	movq	%rcx, %r9
    00000825: 	shrq	$0x38, %rcx
    00000829: 	shrq	$0x30, %r9
    0000082d: 	movb	%cl, 0x15(%rdx)
    00000830: 	movb	%r9b, 0x12(%rdx)
    00000834: 	movl	%r11d, %edx
    00000837: 	andl	$-0x8, %edx
    0000083a: 	addl	%edx, %r8d
    0000083d: 	cmpl	%r11d, %edx
    00000840: 	je	.Ltmp265 # Offset: 2112
.Ltmp266:
    00000846: 	movslq	%r8d, %rcx
    00000849: 	leal	(%r8,%r8,2), %edx
    0000084d: 	movzbl	(%r13,%rcx), %r9d
    00000853: 	movslq	%edx, %rcx
    00000856: 	movb	%r9b, 0x2(%rdi,%rcx)
    0000085b: 	leal	0x1(%r8), %ecx
    0000085f: 	cmpl	%ecx, %eax
    00000861: 	jle	.Ltmp265 # Offset: 2145
    00000867: 	movslq	%ecx, %rcx
    0000086a: 	movzbl	(%r13,%rcx), %r9d
    00000870: 	leal	0x3(%rdx), %ecx
    00000873: 	movslq	%ecx, %rcx
    00000876: 	movb	%r9b, 0x2(%rdi,%rcx)
    0000087b: 	leal	0x2(%r8), %ecx
    0000087f: 	cmpl	%eax, %ecx
    00000881: 	jge	.Ltmp265 # Offset: 2177
    00000883: 	movslq	%ecx, %rcx
    00000886: 	movzbl	(%r13,%rcx), %r9d
    0000088c: 	leal	0x6(%rdx), %ecx
    0000088f: 	movslq	%ecx, %rcx
    00000892: 	movb	%r9b, 0x2(%rdi,%rcx)
    00000897: 	leal	0x3(%r8), %ecx
    0000089b: 	cmpl	%ecx, %eax
    0000089d: 	jle	.Ltmp265 # Offset: 2205
    0000089f: 	movslq	%ecx, %rcx
    000008a2: 	movzbl	(%r13,%rcx), %r9d
    000008a8: 	leal	0x9(%rdx), %ecx
    000008ab: 	movslq	%ecx, %rcx
    000008ae: 	movb	%r9b, 0x2(%rdi,%rcx)
    000008b3: 	leal	0x4(%r8), %ecx
    000008b7: 	cmpl	%eax, %ecx
    000008b9: 	jge	.Ltmp265 # Offset: 2233
    000008bb: 	movslq	%ecx, %rcx
    000008be: 	movzbl	(%r13,%rcx), %r9d
    000008c4: 	leal	0xc(%rdx), %ecx
    000008c7: 	movslq	%ecx, %rcx
    000008ca: 	movb	%r9b, 0x2(%rdi,%rcx)
    000008cf: 	leal	0x5(%r8), %ecx
    000008d3: 	cmpl	%eax, %ecx
    000008d5: 	jge	.Ltmp265 # Offset: 2261
    000008d7: 	movslq	%ecx, %rcx
    000008da: 	addl	$0xf, %edx
    000008dd: 	addl	$0x6, %r8d
    000008e1: 	movzbl	(%r13,%rcx), %ecx
    000008e7: 	movslq	%edx, %rdx
    000008ea: 	movb	%cl, 0x2(%rdi,%rdx)
    000008ee: 	cmpl	%r8d, %eax
    000008f1: 	jle	.Ltmp265 # Offset: 2289
    000008f3: 	movslq	%r8d, %r8
    000008f6: 	movzbl	(%r13,%r8), %eax
    000008fc: 	movb	%al, 0x5(%rdi,%rdx)
.Ltmp265:
    00000900: 	movl	-0x60(%rsp), %ebx
    00000904: 	addq	-0x68(%rsp), %rdi
    00000909: 	addq	%rbp, %rsi
    0000090c: 	addq	%rbp, %r14
    0000090f: 	subl	$0x555, -0x5c(%rsp)
    00000917: 	addq	%rbp, %r13
    0000091a: 	cmpl	%ebx, -0x74(%rsp)
    0000091e: 	jl	.Ltmp267 # Offset: 2334
.Ltmp250:
    00000924: 	addq	$0x340, %rsp
    0000092b: 	popq	%rbx
    0000092c: 	popq	%rbp
    0000092d: 	popq	%r12
    0000092f: 	popq	%r13
    00000931: 	popq	%r14
    00000933: 	popq	%r15
    00000935: 	retq # Offset: 2357
    00000936: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp251:
    00000940: 	movl	-0x5c(%rsp), %ebx
    00000944: 	movl	%ebx, %eax
    00000946: 	testl	%ebx, %ebx
    00000948: 	jle	.Ltmp268 # Offset: 2376
    0000094e: 	leal	(%rbx,%rbx,2), %edx
    00000951: 	movslq	%ebx, %rbp
    00000954: 	movslq	%edx, %rcx
    00000957: 	movq	%rcx, -0x68(%rsp)
    0000095c: 	jmp	.Ltmp269 # Offset: 2396
    00000961: 	nopl	(%rax) # Size: 7
.Ltmp252:
    00000968: 	movq	%rdi, %rcx
    0000096b: 	xorl	%edx, %edx
    0000096d: 	nopl	(%rax) # Size: 3
.Ltmp270:
    00000970: 	movzbl	(%rsi,%rdx), %r8d
    00000975: 	addq	$0x1, %rdx
    00000979: 	addq	$0x3, %rcx
    0000097d: 	movb	%r8b, -0x3(%rcx)
    00000981: 	cmpl	%edx, %eax
    00000983: 	jg	.Ltmp270 # Offset: 2435
    00000985: 	jmp	.Ltmp255 # Offset: 2437
    0000098a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp262:
    00000990: 	movl	-0x6c(%rsp), %ebx
    00000994: 	movq	%r13, %rax
    00000997: 	leaq	(%rbx,%rbx,2), %rcx
    0000099b: 	leaq	0x5(%rdi,%rcx), %r8
.Ltmp271:
    000009a0: 	movzbl	(%rax), %ecx
    000009a3: 	addq	$0x3, %rdx
    000009a7: 	addq	$0x1, %rax
    000009ab: 	movb	%cl, -0x3(%rdx)
    000009ae: 	cmpq	%r8, %rdx
    000009b1: 	jne	.Ltmp271 # Offset: 2481
    000009b3: 	jmp	.Ltmp265 # Offset: 2483
    000009b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp257:
    000009c0: 	movl	-0x6c(%rsp), %r8d
    000009c5: 	movq	%r14, %rcx
    000009c8: 	movq	%r8, %rbx
    000009cb: 	leaq	(%r8,%r8,2), %r8
    000009cf: 	leaq	0x4(%rdi,%r8), %r8
    000009d4: 	nopl	(%rax) # Size: 4
.Ltmp272:
    000009d8: 	movzbl	(%rcx), %r12d
    000009dc: 	addq	$0x3, %rdx
    000009e0: 	addq	$0x1, %rcx
    000009e4: 	movb	%r12b, -0x3(%rdx)
    000009e8: 	cmpq	%rdx, %r8
    000009eb: 	jne	.Ltmp272 # Offset: 2539
    000009ed: 	movl	%ebx, -0x6c(%rsp)
    000009f1: 	jmp	.Ltmp260 # Offset: 2545
    000009f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp268:
    00000a00: 	leal	(%rbx,%rbx,2), %eax
    00000a03: 	movslq	%ebx, %rbp
    00000a06: 	cltq
    00000a08: 	movq	%rax, -0x68(%rsp)
    00000a0d: 	jmp	.Ltmp265 # Offset: 2573
.Ltmp253:
    00000a12: 	xorl	%ecx, %ecx
    00000a14: 	xorl	%r8d, %r8d
    00000a17: 	jmp	.Ltmp273 # Offset: 2583
.Ltmp263:
    00000a1c: 	xorl	%ecx, %ecx
    00000a1e: 	xorl	%r8d, %r8d
    00000a21: 	jmp	.Ltmp274 # Offset: 2593
.Ltmp258:
    00000a26: 	movl	%eax, %r12d
    00000a29: 	xorl	%ecx, %ecx
    00000a2b: 	xorl	%r8d, %r8d
    00000a2e: 	jmp	.Ltmp275 # Offset: 2606
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version5IhEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version1IhEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x7ec0
  Size        : 0x181
  MaxSize     : 0x190
  Offset      : 0x7ec0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version1IhEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp276 # Offset: 7
    0000000d: 	movl	%esi, %eax
    0000000f: 	movl	%esi, %r10d
    00000012: 	movslq	%r9d, %rsi
    00000015: 	pushq	%r12
    00000017: 	leaq	(%rdx,%rsi), %r11
    0000001b: 	pushq	%rbp
    0000001c: 	leaq	(%rdi,%rsi,4), %rbp
    00000020: 	cmpq	%r11, %rdi
    00000023: 	pushq	%rbx
    00000024: 	setae	%r11b
    00000028: 	cmpq	%rbp, %rdx
    0000002b: 	setae	%bl
    0000002e: 	orl	%ebx, %r11d
    00000031: 	leaq	(%rcx,%rsi), %rbx
    00000035: 	cmpq	%rbx, %rdi
    00000038: 	setae	%bl
    0000003b: 	cmpq	%rbp, %rcx
    0000003e: 	setae	%r12b
    00000042: 	orl	%r12d, %ebx
    00000045: 	andl	%ebx, %r11d
    00000048: 	leal	-0x1(%r9), %ebx
    0000004c: 	cmpl	$0xe, %ebx
    0000004f: 	seta	%bl
    00000052: 	testb	%bl, %r11b
    00000055: 	je	.Ltmp277 # Offset: 85
    0000005b: 	addq	%r8, %rsi
    0000005e: 	cmpq	%rsi, %rdi
    00000061: 	setae	%sil
    00000065: 	cmpq	%rbp, %r8
    00000068: 	setae	%r11b
    0000006c: 	orb	%r11b, %sil
    0000006f: 	je	.Ltmp277 # Offset: 111
    00000075: 	movd	%eax, %xmm3
    00000079: 	movl	%r9d, %esi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	punpcklbw	%xmm3, %xmm3
    00000082: 	shrl	$0x4, %esi
    00000085: 	punpcklwd	%xmm3, %xmm3
    00000089: 	shlq	$0x4, %rsi
    0000008d: 	pshufd	$0x0, %xmm3, %xmm3
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp278:
    00000098: 	movdqu	(%rcx,%rax), %xmm6
    0000009d: 	movdqu	(%rdx,%rax), %xmm0
    000000a2: 	movdqa	%xmm3, %xmm2
    000000a6: 	movdqa	%xmm3, %xmm1
    000000aa: 	punpcklbw	%xmm6, %xmm2
    000000ae: 	punpckhbw	%xmm6, %xmm1
    000000b2: 	movdqu	(%r8,%rax), %xmm6
    000000b8: 	movdqa	%xmm0, %xmm4
    000000bc: 	movdqa	%xmm2, %xmm5
    000000c0: 	punpcklbw	%xmm6, %xmm4
    000000c4: 	punpckhbw	%xmm6, %xmm0
    000000c8: 	punpckhbw	%xmm4, %xmm2
    000000cc: 	punpcklbw	%xmm4, %xmm5
    000000d0: 	movups	%xmm2, 0x10(%rdi,%rax,4)
    000000d5: 	movdqa	%xmm1, %xmm2
    000000d9: 	punpckhbw	%xmm0, %xmm1
    000000dd: 	punpcklbw	%xmm0, %xmm2
    000000e1: 	movups	%xmm5, (%rdi,%rax,4)
    000000e5: 	movups	%xmm2, 0x20(%rdi,%rax,4)
    000000ea: 	movups	%xmm1, 0x30(%rdi,%rax,4)
    000000ef: 	addq	$0x10, %rax
    000000f3: 	cmpq	%rsi, %rax
    000000f6: 	jne	.Ltmp278 # Offset: 246
    000000f8: 	movl	%r9d, %eax
    000000fb: 	andl	$-0x10, %eax
    000000fe: 	testb	$0xf, %r9b
    00000102: 	je	.Ltmp279 # Offset: 258
    00000104: 	nopl	(%rax) # Size: 4
.Ltmp280:
    00000108: 	movb	%r10b, (%rdi,%rax,4)
    0000010c: 	movzbl	(%rdx,%rax), %esi
    00000110: 	movb	%sil, 0x1(%rdi,%rax,4)
    00000115: 	movzbl	(%rcx,%rax), %esi
    00000119: 	movb	%sil, 0x2(%rdi,%rax,4)
    0000011e: 	movzbl	(%r8,%rax), %esi
    00000123: 	movb	%sil, 0x3(%rdi,%rax,4)
    00000128: 	addq	$0x1, %rax
    0000012c: 	cmpl	%eax, %r9d
    0000012f: 	jg	.Ltmp280 # Offset: 303
.Ltmp279:
    00000131: 	popq	%rbx
    00000132: 	popq	%rbp
    00000133: 	popq	%r12
    00000135: 	retq # Offset: 309
    00000136: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp277:
    00000140: 	movl	%r9d, %r9d
    00000143: 	xorl	%eax, %eax
    00000145: 	nopl	(%rax) # Size: 3
.Ltmp281:
    00000148: 	movb	%r10b, (%rdi,%rax,4)
    0000014c: 	movzbl	(%rdx,%rax), %esi
    00000150: 	movb	%sil, 0x1(%rdi,%rax,4)
    00000155: 	movzbl	(%rcx,%rax), %esi
    00000159: 	movb	%sil, 0x2(%rdi,%rax,4)
    0000015e: 	movzbl	(%r8,%rax), %esi
    00000163: 	movb	%sil, 0x3(%rdi,%rax,4)
    00000168: 	addq	$0x1, %rax
    0000016c: 	cmpq	%rax, %r9
    0000016f: 	jne	.Ltmp281 # Offset: 367
    00000171: 	popq	%rbx
    00000172: 	popq	%rbp
    00000173: 	popq	%r12
    00000175: 	retq # Offset: 373
    00000176: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp276:
    00000180: 	retq # Offset: 384
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version1IhEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version2IhEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x8050
  Size        : 0x890
  MaxSize     : 0x890
  Offset      : 0x8050
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version2IhEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	movslq	%r9d, %r9
    00000007: 	testq	%r9, %r9
    0000000a: 	je	.Ltmp282 # Offset: 10
    00000010: 	pushq	%r15
    00000012: 	movq	%rdx, %r11
    00000015: 	movq	%rcx, %r10
    00000018: 	xorl	%edx, %edx
    0000001a: 	pushq	%r14
    0000001c: 	pushq	%r13
    0000001e: 	pushq	%r12
    00000020: 	pushq	%rbp
    00000021: 	pushq	%rbx
    00000022: 	subq	$0x320, %rsp
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp283:
    00000030: 	movb	%sil, (%rdi,%rdx,4)
    00000034: 	movq	%rdx, %rcx
    00000037: 	addq	$0x1, %rdx
    0000003b: 	cmpq	%rdx, %r9
    0000003e: 	jne	.Ltmp283 # Offset: 62
    00000040: 	leaq	(,%rcx,4), %rbp
    00000048: 	cmpq	$0x6, %rcx
    0000004c: 	leaq	(%r11,%rdx), %rsi
    00000050: 	leaq	0x2(%rdi,%rbp), %rax
    00000055: 	leaq	0x1(%rdi), %r15
    00000059: 	seta	%r9b
    0000005d: 	cmpq	%rax, %r11
    00000060: 	setae	%al
    00000063: 	cmpq	%rsi, %r15
    00000066: 	setae	%sil
    0000006a: 	orb	%sil, %al
    0000006d: 	je	.Ltmp284 # Offset: 109
    00000073: 	testb	%r9b, %r9b
    00000076: 	je	.Ltmp284 # Offset: 118
    0000007c: 	cmpq	$0xe, %rcx
    00000080: 	jbe	.Ltmp285 # Offset: 128
    00000086: 	movq	%rdx, %r13
    00000089: 	movq	%r11, %rsi
    0000008c: 	movq	%r15, %rax
    0000008f: 	andq	$-0x10, %r13
    00000093: 	addq	%r11, %r13
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp286:
    000000a0: 	movdqu	(%rsi), %xmm0
    000000a4: 	addq	$0x10, %rsi
    000000a8: 	addq	$0x40, %rax
    000000ac: 	movd	%xmm0, %r12d
    000000b1: 	movb	%r12b, -0x40(%rax)
    000000b5: 	movaps	%xmm0, 0x2c8(%rsp)
    000000bd: 	movzbl	0x2c9(%rsp), %r12d
    000000c6: 	movb	%r12b, -0x3c(%rax)
    000000ca: 	movaps	%xmm0, 0x2b8(%rsp)
    000000d2: 	movzbl	0x2ba(%rsp), %r12d
    000000db: 	movb	%r12b, -0x38(%rax)
    000000df: 	movaps	%xmm0, 0x2a8(%rsp)
    000000e7: 	movzbl	0x2ab(%rsp), %r12d
    000000f0: 	movb	%r12b, -0x34(%rax)
    000000f4: 	movaps	%xmm0, 0x298(%rsp)
    000000fc: 	movzbl	0x29c(%rsp), %r12d
    00000105: 	movb	%r12b, -0x30(%rax)
    00000109: 	movaps	%xmm0, 0x288(%rsp)
    00000111: 	movzbl	0x28d(%rsp), %r12d
    0000011a: 	movb	%r12b, -0x2c(%rax)
    0000011e: 	movaps	%xmm0, 0x278(%rsp)
    00000126: 	movzbl	0x27e(%rsp), %r12d
    0000012f: 	movb	%r12b, -0x28(%rax)
    00000133: 	movaps	%xmm0, 0x268(%rsp)
    0000013b: 	movzbl	0x26f(%rsp), %r12d
    00000144: 	movb	%r12b, -0x24(%rax)
    00000148: 	movaps	%xmm0, 0x258(%rsp)
    00000150: 	movzbl	0x260(%rsp), %r12d
    00000159: 	movb	%r12b, -0x20(%rax)
    0000015d: 	movaps	%xmm0, 0x248(%rsp)
    00000165: 	movzbl	0x251(%rsp), %r12d
    0000016e: 	movb	%r12b, -0x1c(%rax)
    00000172: 	movaps	%xmm0, 0x238(%rsp)
    0000017a: 	movzbl	0x242(%rsp), %r12d
    00000183: 	movb	%r12b, -0x18(%rax)
    00000187: 	movaps	%xmm0, 0x228(%rsp)
    0000018f: 	movzbl	0x233(%rsp), %r12d
    00000198: 	movb	%r12b, -0x14(%rax)
    0000019c: 	movaps	%xmm0, 0x218(%rsp)
    000001a4: 	movzbl	0x224(%rsp), %r12d
    000001ad: 	movb	%r12b, -0x10(%rax)
    000001b1: 	movaps	%xmm0, 0x208(%rsp)
    000001b9: 	movzbl	0x215(%rsp), %r12d
    000001c2: 	movb	%r12b, -0xc(%rax)
    000001c6: 	movaps	%xmm0, 0x1f8(%rsp)
    000001ce: 	movzbl	0x206(%rsp), %r12d
    000001d7: 	movb	%r12b, -0x8(%rax)
    000001db: 	movaps	%xmm0, 0x1e8(%rsp)
    000001e3: 	movzbl	0x1f7(%rsp), %r12d
    000001ec: 	movb	%r12b, -0x4(%rax)
    000001f0: 	cmpq	%rsi, %r13
    000001f3: 	jne	.Ltmp286 # Offset: 499
    000001f9: 	movq	%rdx, %rsi
    000001fc: 	andq	$-0x10, %rsi
    00000200: 	leaq	(%r11,%rsi), %r13
    00000204: 	leaq	(%r15,%rsi,4), %r15
    00000208: 	cmpq	%rsi, %rdx
    0000020b: 	je	.Ltmp287 # Offset: 523
    00000211: 	movq	%rdx, %r14
    00000214: 	subq	%rsi, %r14
    00000217: 	leaq	-0x1(%r14), %rax
    0000021b: 	cmpq	$0x6, %rax
    0000021f: 	jbe	.Ltmp288 # Offset: 543
.Ltmp302:
    00000221: 	movq	(%r11,%rsi), %rax
    00000225: 	leaq	0x1(%rdi,%rsi,4), %r12
    0000022a: 	movq	%rax, %r11
    0000022d: 	movzbl	%ah, %ebx
    00000230: 	movb	%al, (%r12)
    00000234: 	shrq	$0x10, %r11
    00000238: 	movb	%bl, 0x4(%r12)
    0000023d: 	movb	%r11b, 0x8(%r12)
    00000242: 	movq	%rax, %r11
    00000245: 	shrq	$0x18, %r11
    00000249: 	movb	%r11b, 0xc(%r12)
    0000024e: 	movq	%rax, %r11
    00000251: 	shrq	$0x20, %r11
    00000255: 	movb	%r11b, 0x10(%r12)
    0000025a: 	movq	%rax, %r11
    0000025d: 	shrq	$0x28, %r11
    00000261: 	movb	%r11b, 0x14(%r12)
    00000266: 	movq	%rax, %r11
    00000269: 	shrq	$0x38, %rax
    0000026d: 	movb	%al, 0x1c(%r12)
    00000272: 	movq	%r14, %rax
    00000275: 	shrq	$0x30, %r11
    00000279: 	andq	$-0x8, %rax
    0000027d: 	movb	%r11b, 0x18(%r12)
    00000282: 	addq	%rax, %r13
    00000285: 	leaq	(%r15,%rax,4), %r15
    00000289: 	addq	%rax, %rsi
    0000028c: 	cmpq	%rax, %r14
    0000028f: 	je	.Ltmp287 # Offset: 655
.Ltmp288:
    00000291: 	movzbl	(%r13), %eax
    00000296: 	movb	%al, (%r15)
    00000299: 	leaq	0x1(%rsi), %rax
    0000029d: 	cmpq	%rax, %rdx
    000002a0: 	jbe	.Ltmp287 # Offset: 672
    000002a2: 	movzbl	0x1(%r13), %eax
    000002a7: 	movb	%al, 0x4(%r15)
    000002ab: 	leaq	0x2(%rsi), %rax
    000002af: 	cmpq	%rax, %rdx
    000002b2: 	jbe	.Ltmp287 # Offset: 690
    000002b4: 	movzbl	0x2(%r13), %eax
    000002b9: 	movb	%al, 0x8(%r15)
    000002bd: 	leaq	0x3(%rsi), %rax
    000002c1: 	cmpq	%rax, %rdx
    000002c4: 	jbe	.Ltmp287 # Offset: 708
    000002c6: 	movzbl	0x3(%r13), %eax
    000002cb: 	movb	%al, 0xc(%r15)
    000002cf: 	leaq	0x4(%rsi), %rax
    000002d3: 	cmpq	%rax, %rdx
    000002d6: 	jbe	.Ltmp287 # Offset: 726
    000002d8: 	movzbl	0x4(%r13), %eax
    000002dd: 	movb	%al, 0x10(%r15)
    000002e1: 	leaq	0x5(%rsi), %rax
    000002e5: 	cmpq	%rax, %rdx
    000002e8: 	jbe	.Ltmp287 # Offset: 744
    000002ea: 	movzbl	0x5(%r13), %eax
    000002ef: 	addq	$0x6, %rsi
    000002f3: 	movb	%al, 0x14(%r15)
    000002f7: 	cmpq	%rsi, %rdx
    000002fa: 	jbe	.Ltmp287 # Offset: 762
    000002fc: 	movzbl	0x6(%r13), %eax
    00000301: 	movb	%al, 0x18(%r15)
.Ltmp287:
    00000305: 	leaq	0x3(%rdi,%rbp), %rax
    0000030a: 	leaq	(%r10,%rdx), %rsi
    0000030e: 	cmpq	%rax, %r10
    00000311: 	leaq	0x2(%rdi), %r14
    00000315: 	setae	%al
    00000318: 	cmpq	%rsi, %r14
    0000031b: 	setae	%sil
    0000031f: 	orb	%sil, %al
    00000322: 	je	.Ltmp289 # Offset: 802
    00000328: 	testb	%r9b, %r9b
    0000032b: 	je	.Ltmp289 # Offset: 811
    00000331: 	cmpq	$0xe, %rcx
    00000335: 	jbe	.Ltmp290 # Offset: 821
    0000033b: 	movq	%rdx, %rbp
    0000033e: 	movq	%r10, %rsi
    00000341: 	movq	%r14, %rax
    00000344: 	andq	$-0x10, %rbp
    00000348: 	addq	%r10, %rbp
    0000034b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp291:
    00000350: 	movdqu	(%rsi), %xmm0
    00000354: 	addq	$0x10, %rsi
    00000358: 	addq	$0x40, %rax
    0000035c: 	movd	%xmm0, %r11d
    00000361: 	movb	%r11b, -0x40(%rax)
    00000365: 	movaps	%xmm0, 0x198(%rsp)
    0000036d: 	movzbl	0x199(%rsp), %r11d
    00000376: 	movb	%r11b, -0x3c(%rax)
    0000037a: 	movaps	%xmm0, 0x188(%rsp)
    00000382: 	movzbl	0x18a(%rsp), %r11d
    0000038b: 	movb	%r11b, -0x38(%rax)
    0000038f: 	movaps	%xmm0, 0x178(%rsp)
    00000397: 	movzbl	0x17b(%rsp), %r11d
    000003a0: 	movb	%r11b, -0x34(%rax)
    000003a4: 	movaps	%xmm0, 0x168(%rsp)
    000003ac: 	movzbl	0x16c(%rsp), %r11d
    000003b5: 	movb	%r11b, -0x30(%rax)
    000003b9: 	movaps	%xmm0, 0x158(%rsp)
    000003c1: 	movzbl	0x15d(%rsp), %r11d
    000003ca: 	movb	%r11b, -0x2c(%rax)
    000003ce: 	movaps	%xmm0, 0x148(%rsp)
    000003d6: 	movzbl	0x14e(%rsp), %r11d
    000003df: 	movb	%r11b, -0x28(%rax)
    000003e3: 	movaps	%xmm0, 0x138(%rsp)
    000003eb: 	movzbl	0x13f(%rsp), %r11d
    000003f4: 	movb	%r11b, -0x24(%rax)
    000003f8: 	movaps	%xmm0, 0x128(%rsp)
    00000400: 	movzbl	0x130(%rsp), %r11d
    00000409: 	movb	%r11b, -0x20(%rax)
    0000040d: 	movaps	%xmm0, 0x118(%rsp)
    00000415: 	movzbl	0x121(%rsp), %r11d
    0000041e: 	movb	%r11b, -0x1c(%rax)
    00000422: 	movaps	%xmm0, 0x108(%rsp)
    0000042a: 	movzbl	0x112(%rsp), %r11d
    00000433: 	movb	%r11b, -0x18(%rax)
    00000437: 	movaps	%xmm0, 0xf8(%rsp)
    0000043f: 	movzbl	0x103(%rsp), %r11d
    00000448: 	movb	%r11b, -0x14(%rax)
    0000044c: 	movaps	%xmm0, 0xe8(%rsp)
    00000454: 	movzbl	0xf4(%rsp), %r11d
    0000045d: 	movb	%r11b, -0x10(%rax)
    00000461: 	movaps	%xmm0, 0xd8(%rsp)
    00000469: 	movzbl	0xe5(%rsp), %r11d
    00000472: 	movb	%r11b, -0xc(%rax)
    00000476: 	movaps	%xmm0, 0xc8(%rsp)
    0000047e: 	movzbl	0xd6(%rsp), %r11d
    00000487: 	movb	%r11b, -0x8(%rax)
    0000048b: 	movaps	%xmm0, 0xb8(%rsp)
    00000493: 	movzbl	0xc7(%rsp), %r11d
    0000049c: 	movb	%r11b, -0x4(%rax)
    000004a0: 	cmpq	%rsi, %rbp
    000004a3: 	jne	.Ltmp291 # Offset: 1187
    000004a9: 	movq	%rdx, %rsi
    000004ac: 	andq	$-0x10, %rsi
    000004b0: 	leaq	(%r10,%rsi), %rbp
    000004b4: 	leaq	(%r14,%rsi,4), %r14
    000004b8: 	cmpq	%rsi, %rdx
    000004bb: 	je	.Ltmp292 # Offset: 1211
    000004c1: 	movq	%rdx, %r12
    000004c4: 	subq	%rsi, %r12
    000004c7: 	leaq	-0x1(%r12), %rax
    000004cc: 	cmpq	$0x6, %rax
    000004d0: 	jbe	.Ltmp293 # Offset: 1232
.Ltmp303:
    000004d2: 	movq	(%r10,%rsi), %rax
    000004d6: 	leaq	0x2(%rdi,%rsi,4), %r11
    000004db: 	movq	%rax, %r10
    000004de: 	movzbl	%ah, %ebx
    000004e1: 	movb	%al, (%r11)
    000004e4: 	shrq	$0x10, %r10
    000004e8: 	movb	%bl, 0x4(%r11)
    000004ec: 	movb	%r10b, 0x8(%r11)
    000004f0: 	movq	%rax, %r10
    000004f3: 	shrq	$0x18, %r10
    000004f7: 	movb	%r10b, 0xc(%r11)
    000004fb: 	movq	%rax, %r10
    000004fe: 	shrq	$0x20, %r10
    00000502: 	movb	%r10b, 0x10(%r11)
    00000506: 	movq	%rax, %r10
    00000509: 	shrq	$0x28, %r10
    0000050d: 	movb	%r10b, 0x14(%r11)
    00000511: 	movq	%rax, %r10
    00000514: 	shrq	$0x38, %rax
    00000518: 	movb	%al, 0x1c(%r11)
    0000051c: 	movq	%r12, %rax
    0000051f: 	shrq	$0x30, %r10
    00000523: 	andq	$-0x8, %rax
    00000527: 	movb	%r10b, 0x18(%r11)
    0000052b: 	addq	%rax, %rbp
    0000052e: 	leaq	(%r14,%rax,4), %r14
    00000532: 	addq	%rax, %rsi
    00000535: 	cmpq	%rax, %r12
    00000538: 	je	.Ltmp292 # Offset: 1336
.Ltmp293:
    0000053a: 	movzbl	(%rbp), %eax
    0000053e: 	movb	%al, (%r14)
    00000541: 	leaq	0x1(%rsi), %rax
    00000545: 	cmpq	%rax, %rdx
    00000548: 	jbe	.Ltmp292 # Offset: 1352
    0000054a: 	movzbl	0x1(%rbp), %eax
    0000054e: 	movb	%al, 0x4(%r14)
    00000552: 	leaq	0x2(%rsi), %rax
    00000556: 	cmpq	%rax, %rdx
    00000559: 	jbe	.Ltmp292 # Offset: 1369
    0000055b: 	movzbl	0x2(%rbp), %eax
    0000055f: 	movb	%al, 0x8(%r14)
    00000563: 	leaq	0x3(%rsi), %rax
    00000567: 	cmpq	%rax, %rdx
    0000056a: 	jbe	.Ltmp292 # Offset: 1386
    0000056c: 	movzbl	0x3(%rbp), %eax
    00000570: 	movb	%al, 0xc(%r14)
    00000574: 	leaq	0x4(%rsi), %rax
    00000578: 	cmpq	%rax, %rdx
    0000057b: 	jbe	.Ltmp292 # Offset: 1403
    0000057d: 	movzbl	0x4(%rbp), %eax
    00000581: 	movb	%al, 0x10(%r14)
    00000585: 	leaq	0x5(%rsi), %rax
    00000589: 	cmpq	%rax, %rdx
    0000058c: 	jbe	.Ltmp292 # Offset: 1420
    0000058e: 	movzbl	0x5(%rbp), %eax
    00000592: 	addq	$0x6, %rsi
    00000596: 	movb	%al, 0x14(%r14)
    0000059a: 	cmpq	%rsi, %rdx
    0000059d: 	jbe	.Ltmp292 # Offset: 1437
    0000059f: 	movzbl	0x6(%rbp), %eax
    000005a3: 	movb	%al, 0x18(%r14)
.Ltmp292:
    000005a7: 	leaq	(%rdi,%rdx,4), %rax
    000005ab: 	leaq	(%r8,%rdx), %rsi
    000005af: 	cmpq	%rax, %r8
    000005b2: 	leaq	0x3(%rdi), %r10
    000005b6: 	setae	%al
    000005b9: 	cmpq	%rsi, %r10
    000005bc: 	setae	%sil
    000005c0: 	orb	%sil, %al
    000005c3: 	je	.Ltmp294 # Offset: 1475
    000005c9: 	testb	%r9b, %r9b
    000005cc: 	je	.Ltmp294 # Offset: 1484
    000005d2: 	cmpq	$0xe, %rcx
    000005d6: 	jbe	.Ltmp295 # Offset: 1494
    000005dc: 	movq	%rdx, %r9
    000005df: 	movq	%r8, %rcx
    000005e2: 	movq	%r10, %rax
    000005e5: 	andq	$-0x10, %r9
    000005e9: 	addq	%r8, %r9
    000005ec: 	nopl	(%rax) # Size: 4
.Ltmp296:
    000005f0: 	movdqu	(%rcx), %xmm0
    000005f4: 	addq	$0x10, %rcx
    000005f8: 	addq	$0x40, %rax
    000005fc: 	movd	%xmm0, %esi
    00000600: 	movb	%sil, -0x40(%rax)
    00000604: 	movaps	%xmm0, 0x68(%rsp)
    00000609: 	movzbl	0x69(%rsp), %esi
    0000060e: 	movb	%sil, -0x3c(%rax)
    00000612: 	movaps	%xmm0, 0x58(%rsp)
    00000617: 	movzbl	0x5a(%rsp), %esi
    0000061c: 	movb	%sil, -0x38(%rax)
    00000620: 	movaps	%xmm0, 0x48(%rsp)
    00000625: 	movzbl	0x4b(%rsp), %esi
    0000062a: 	movb	%sil, -0x34(%rax)
    0000062e: 	movaps	%xmm0, 0x38(%rsp)
    00000633: 	movzbl	0x3c(%rsp), %esi
    00000638: 	movb	%sil, -0x30(%rax)
    0000063c: 	movaps	%xmm0, 0x28(%rsp)
    00000641: 	movzbl	0x2d(%rsp), %esi
    00000646: 	movb	%sil, -0x2c(%rax)
    0000064a: 	movaps	%xmm0, 0x18(%rsp)
    0000064f: 	movzbl	0x1e(%rsp), %esi
    00000654: 	movb	%sil, -0x28(%rax)
    00000658: 	movaps	%xmm0, 0x8(%rsp)
    0000065d: 	movzbl	0xf(%rsp), %esi
    00000662: 	movb	%sil, -0x24(%rax)
    00000666: 	movaps	%xmm0, -0x8(%rsp)
    0000066b: 	movzbl	(%rsp), %esi
    0000066f: 	movb	%sil, -0x20(%rax)
    00000673: 	movaps	%xmm0, -0x18(%rsp)
    00000678: 	movzbl	-0xf(%rsp), %esi
    0000067d: 	movb	%sil, -0x1c(%rax)
    00000681: 	movaps	%xmm0, -0x28(%rsp)
    00000686: 	movzbl	-0x1e(%rsp), %esi
    0000068b: 	movb	%sil, -0x18(%rax)
    0000068f: 	movaps	%xmm0, -0x38(%rsp)
    00000694: 	movzbl	-0x2d(%rsp), %esi
    00000699: 	movb	%sil, -0x14(%rax)
    0000069d: 	movaps	%xmm0, -0x48(%rsp)
    000006a2: 	movzbl	-0x3c(%rsp), %esi
    000006a7: 	movb	%sil, -0x10(%rax)
    000006ab: 	movaps	%xmm0, -0x58(%rsp)
    000006b0: 	movzbl	-0x4b(%rsp), %esi
    000006b5: 	movb	%sil, -0xc(%rax)
    000006b9: 	movaps	%xmm0, -0x68(%rsp)
    000006be: 	movzbl	-0x5a(%rsp), %esi
    000006c3: 	movb	%sil, -0x8(%rax)
    000006c7: 	movaps	%xmm0, -0x78(%rsp)
    000006cc: 	movzbl	-0x69(%rsp), %esi
    000006d1: 	movb	%sil, -0x4(%rax)
    000006d5: 	cmpq	%r9, %rcx
    000006d8: 	jne	.Ltmp296 # Offset: 1752
    000006de: 	movq	%rdx, %rcx
    000006e1: 	andq	$-0x10, %rcx
    000006e5: 	leaq	(%r8,%rcx), %r9
    000006e9: 	leaq	(%r10,%rcx,4), %r10
    000006ed: 	cmpq	%rcx, %rdx
    000006f0: 	je	.Ltmp297 # Offset: 1776
    000006f6: 	movq	%rdx, %r11
    000006f9: 	subq	%rcx, %r11
    000006fc: 	leaq	-0x1(%r11), %rax
    00000700: 	cmpq	$0x6, %rax
    00000704: 	jbe	.Ltmp298 # Offset: 1796
.Ltmp304:
    00000706: 	movq	(%r8,%rcx), %rax
    0000070a: 	leaq	0x3(%rdi,%rcx,4), %rsi
    0000070f: 	movq	%rax, %rdi
    00000712: 	movb	%al, (%rsi)
    00000714: 	shrq	$0x10, %rdi
    00000718: 	movb	%ah, 0x4(%rsi)
    0000071b: 	movb	%dil, 0x8(%rsi)
    0000071f: 	movq	%rax, %rdi
    00000722: 	shrq	$0x18, %rdi
    00000726: 	movb	%dil, 0xc(%rsi)
    0000072a: 	movq	%rax, %rdi
    0000072d: 	shrq	$0x20, %rdi
    00000731: 	movb	%dil, 0x10(%rsi)
    00000735: 	movq	%rax, %rdi
    00000738: 	shrq	$0x28, %rdi
    0000073c: 	movb	%dil, 0x14(%rsi)
    00000740: 	movq	%rax, %rdi
    00000743: 	shrq	$0x38, %rax
    00000747: 	movb	%al, 0x1c(%rsi)
    0000074a: 	movq	%r11, %rax
    0000074d: 	shrq	$0x30, %rdi
    00000751: 	andq	$-0x8, %rax
    00000755: 	movb	%dil, 0x18(%rsi)
    00000759: 	addq	%rax, %r9
    0000075c: 	leaq	(%r10,%rax,4), %r10
    00000760: 	addq	%rax, %rcx
    00000763: 	cmpq	%r11, %rax
    00000766: 	je	.Ltmp297 # Offset: 1894
.Ltmp298:
    00000768: 	movzbl	(%r9), %eax
    0000076c: 	movb	%al, (%r10)
    0000076f: 	leaq	0x1(%rcx), %rax
    00000773: 	cmpq	%rax, %rdx
    00000776: 	jbe	.Ltmp297 # Offset: 1910
    00000778: 	movzbl	0x1(%r9), %eax
    0000077d: 	movb	%al, 0x4(%r10)
    00000781: 	leaq	0x2(%rcx), %rax
    00000785: 	cmpq	%rax, %rdx
    00000788: 	jbe	.Ltmp297 # Offset: 1928
    0000078a: 	movzbl	0x2(%r9), %eax
    0000078f: 	movb	%al, 0x8(%r10)
    00000793: 	leaq	0x3(%rcx), %rax
    00000797: 	cmpq	%rax, %rdx
    0000079a: 	jbe	.Ltmp297 # Offset: 1946
    0000079c: 	movzbl	0x3(%r9), %eax
    000007a1: 	movb	%al, 0xc(%r10)
    000007a5: 	leaq	0x4(%rcx), %rax
    000007a9: 	cmpq	%rax, %rdx
    000007ac: 	jbe	.Ltmp297 # Offset: 1964
    000007ae: 	movzbl	0x4(%r9), %eax
    000007b3: 	movb	%al, 0x10(%r10)
    000007b7: 	leaq	0x5(%rcx), %rax
    000007bb: 	cmpq	%rdx, %rax
    000007be: 	jae	.Ltmp297 # Offset: 1982
    000007c0: 	movzbl	0x5(%r9), %eax
    000007c5: 	addq	$0x6, %rcx
    000007c9: 	movb	%al, 0x14(%r10)
    000007cd: 	cmpq	%rcx, %rdx
    000007d0: 	jbe	.Ltmp297 # Offset: 2000
    000007d2: 	movzbl	0x6(%r9), %eax
    000007d7: 	movb	%al, 0x18(%r10)
.Ltmp297:
    000007db: 	addq	$0x320, %rsp
    000007e2: 	popq	%rbx
    000007e3: 	popq	%rbp
    000007e4: 	popq	%r12
    000007e6: 	popq	%r13
    000007e8: 	popq	%r14
    000007ea: 	popq	%r15
    000007ec: 	retq # Offset: 2028
    000007ed: 	nopl	(%rax) # Size: 3
.Ltmp284:
    000007f0: 	xorl	%eax, %eax
    000007f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp299:
    000007f8: 	movzbl	(%r11,%rax), %esi
    000007fd: 	movb	%sil, 0x1(%rdi,%rax,4)
    00000802: 	movq	%rax, %rsi
    00000805: 	addq	$0x1, %rax
    00000809: 	cmpq	%rsi, %rcx
    0000080c: 	jne	.Ltmp299 # Offset: 2060
    0000080e: 	jmp	.Ltmp287 # Offset: 2062
    00000813: 	nopl	(%rax,%rax) # Size: 5
.Ltmp289:
    00000818: 	xorl	%eax, %eax
    0000081a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp300:
    00000820: 	movzbl	(%r10,%rax), %esi
    00000825: 	movb	%sil, 0x2(%rdi,%rax,4)
    0000082a: 	movq	%rax, %rsi
    0000082d: 	addq	$0x1, %rax
    00000831: 	cmpq	%rsi, %rcx
    00000834: 	jne	.Ltmp300 # Offset: 2100
    00000836: 	jmp	.Ltmp292 # Offset: 2102
    0000083b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp294:
    00000840: 	xorl	%eax, %eax
    00000842: 	nopw	(%rax,%rax) # Size: 6
.Ltmp301:
    00000848: 	movzbl	(%r8,%rax), %edx
    0000084d: 	movb	%dl, 0x3(%rdi,%rax,4)
    00000851: 	movq	%rax, %rdx
    00000854: 	addq	$0x1, %rax
    00000858: 	cmpq	%rcx, %rdx
    0000085b: 	jne	.Ltmp301 # Offset: 2139
    0000085d: 	jmp	.Ltmp297 # Offset: 2141
    00000862: 	nopw	(%rax,%rax) # Size: 6
.Ltmp282:
    00000868: 	retq # Offset: 2152
.Ltmp285:
    00000869: 	movq	%rdx, %r14
    0000086c: 	movq	%r11, %r13
    0000086f: 	xorl	%esi, %esi
    00000871: 	jmp	.Ltmp302 # Offset: 2161
.Ltmp290:
    00000876: 	movq	%rdx, %r12
    00000879: 	movq	%r10, %rbp
    0000087c: 	xorl	%esi, %esi
    0000087e: 	jmp	.Ltmp303 # Offset: 2174
.Ltmp295:
    00000883: 	movq	%rdx, %r11
    00000886: 	movq	%r8, %r9
    00000889: 	xorl	%ecx, %ecx
    0000088b: 	jmp	.Ltmp304 # Offset: 2187
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version2IhEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version3IhEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0x88e0
  Size        : 0x8e1
  MaxSize     : 0x8f0
  Offset      : 0x88e0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version3IhEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp305 # Offset: 7
    0000000d: 	pushq	%r14
    0000000f: 	movq	%rdx, %r10
    00000012: 	movl	%esi, %r11d
    00000015: 	movq	%rcx, %rsi
    00000018: 	pushq	%r12
    0000001a: 	movl	%r11d, %edx
    0000001d: 	movl	%r9d, %r14d
    00000020: 	leal	-0x1(%r9), %r12d
    00000024: 	pushq	%rbp
    00000025: 	movslq	%r9d, %rbp
    00000028: 	pushq	%rbx
    00000029: 	leaq	-0x2(%rdi,%rbp,4), %rax
    0000002e: 	leaq	(%r10,%rbp), %rcx
    00000032: 	subq	$0x2e0, %rsp
    00000039: 	cmpq	%rax, %r10
    0000003c: 	setae	%al
    0000003f: 	cmpq	%rcx, %rdi
    00000042: 	setae	%cl
    00000045: 	orb	%cl, %al
    00000047: 	je	.Ltmp306 # Offset: 71
    0000004d: 	cmpl	$0x10, %r12d
    00000051: 	jbe	.Ltmp306 # Offset: 81
    00000057: 	movl	%r9d, %ebx
    0000005a: 	movq	%r10, %rcx
    0000005d: 	movq	%rdi, %rax
    00000060: 	shrl	$0x4, %ebx
    00000063: 	subl	$0x1, %ebx
    00000066: 	shlq	$0x4, %rbx
    0000006a: 	leaq	0x10(%r10,%rbx), %r12
    0000006f: 	nop # Size: 1
.Ltmp307:
    00000070: 	movdqu	(%rcx), %xmm0
    00000074: 	movb	%dl, (%rax)
    00000076: 	addq	$0x10, %rcx
    0000007a: 	addq	$0x40, %rax
    0000007e: 	movb	%dl, -0x3c(%rax)
    00000081: 	movd	%xmm0, %ebx
    00000085: 	movb	%dl, -0x38(%rax)
    00000088: 	movb	%dl, -0x34(%rax)
    0000008b: 	movb	%dl, -0x30(%rax)
    0000008e: 	movb	%dl, -0x2c(%rax)
    00000091: 	movb	%dl, -0x28(%rax)
    00000094: 	movb	%dl, -0x24(%rax)
    00000097: 	movb	%dl, -0x20(%rax)
    0000009a: 	movb	%dl, -0x1c(%rax)
    0000009d: 	movb	%dl, -0x18(%rax)
    000000a0: 	movb	%dl, -0x14(%rax)
    000000a3: 	movb	%dl, -0x10(%rax)
    000000a6: 	movb	%dl, -0xc(%rax)
    000000a9: 	movb	%dl, -0x8(%rax)
    000000ac: 	movb	%dl, -0x4(%rax)
    000000af: 	movb	%bl, -0x3f(%rax)
    000000b2: 	movaps	%xmm0, 0x2c8(%rsp)
    000000ba: 	movzbl	0x2c9(%rsp), %ebx
    000000c2: 	movb	%bl, -0x3b(%rax)
    000000c5: 	movaps	%xmm0, 0x2b8(%rsp)
    000000cd: 	movzbl	0x2ba(%rsp), %ebx
    000000d5: 	movb	%bl, -0x37(%rax)
    000000d8: 	movaps	%xmm0, 0x2a8(%rsp)
    000000e0: 	movzbl	0x2ab(%rsp), %ebx
    000000e8: 	movb	%bl, -0x33(%rax)
    000000eb: 	movaps	%xmm0, 0x298(%rsp)
    000000f3: 	movzbl	0x29c(%rsp), %ebx
    000000fb: 	movb	%bl, -0x2f(%rax)
    000000fe: 	movaps	%xmm0, 0x288(%rsp)
    00000106: 	movzbl	0x28d(%rsp), %ebx
    0000010e: 	movb	%bl, -0x2b(%rax)
    00000111: 	movaps	%xmm0, 0x278(%rsp)
    00000119: 	movzbl	0x27e(%rsp), %ebx
    00000121: 	movb	%bl, -0x27(%rax)
    00000124: 	movaps	%xmm0, 0x268(%rsp)
    0000012c: 	movzbl	0x26f(%rsp), %ebx
    00000134: 	movb	%bl, -0x23(%rax)
    00000137: 	movaps	%xmm0, 0x258(%rsp)
    0000013f: 	movzbl	0x260(%rsp), %ebx
    00000147: 	movb	%bl, -0x1f(%rax)
    0000014a: 	movaps	%xmm0, 0x248(%rsp)
    00000152: 	movzbl	0x251(%rsp), %ebx
    0000015a: 	movb	%bl, -0x1b(%rax)
    0000015d: 	movaps	%xmm0, 0x238(%rsp)
    00000165: 	movzbl	0x242(%rsp), %ebx
    0000016d: 	movb	%bl, -0x17(%rax)
    00000170: 	movaps	%xmm0, 0x228(%rsp)
    00000178: 	movzbl	0x233(%rsp), %ebx
    00000180: 	movb	%bl, -0x13(%rax)
    00000183: 	movaps	%xmm0, 0x218(%rsp)
    0000018b: 	movzbl	0x224(%rsp), %ebx
    00000193: 	movb	%bl, -0xf(%rax)
    00000196: 	movaps	%xmm0, 0x208(%rsp)
    0000019e: 	movzbl	0x215(%rsp), %ebx
    000001a6: 	movb	%bl, -0xb(%rax)
    000001a9: 	movaps	%xmm0, 0x1f8(%rsp)
    000001b1: 	movzbl	0x206(%rsp), %ebx
    000001b9: 	movb	%bl, -0x7(%rax)
    000001bc: 	movaps	%xmm0, 0x1e8(%rsp)
    000001c4: 	movzbl	0x1f7(%rsp), %ebx
    000001cc: 	movb	%bl, -0x3(%rax)
    000001cf: 	cmpq	%r12, %rcx
    000001d2: 	jne	.Ltmp307 # Offset: 466
    000001d8: 	movl	%r9d, %eax
    000001db: 	andl	$-0x10, %eax
    000001de: 	testb	$0xf, %r9b
    000001e2: 	je	.Ltmp308 # Offset: 482
    000001e8: 	leal	(,%rax,4), %edx
    000001ef: 	movl	%eax, %ebx
    000001f1: 	movslq	%edx, %rcx
    000001f4: 	movb	%r11b, (%rdi,%rcx)
    000001f8: 	movzbl	(%r10,%rbx), %ebx
    000001fd: 	movb	%bl, 0x1(%rdi,%rcx)
    00000201: 	leal	0x1(%rax), %ecx
    00000204: 	cmpl	%ecx, %r9d
    00000207: 	jle	.Ltmp308 # Offset: 519
    0000020d: 	leal	0x4(%rdx), %ebx
    00000210: 	movslq	%ecx, %rcx
    00000213: 	movslq	%ebx, %rbx
    00000216: 	movb	%r11b, (%rdi,%rbx)
    0000021a: 	movzbl	(%r10,%rcx), %ecx
    0000021f: 	movb	%cl, 0x1(%rdi,%rbx)
    00000223: 	leal	0x2(%rax), %ecx
    00000226: 	cmpl	%ecx, %r9d
    00000229: 	jle	.Ltmp308 # Offset: 553
    0000022f: 	leal	0x8(%rdx), %ebx
    00000232: 	movslq	%ecx, %rcx
    00000235: 	movslq	%ebx, %rbx
    00000238: 	movb	%r11b, (%rdi,%rbx)
    0000023c: 	movzbl	(%r10,%rcx), %ecx
    00000241: 	movb	%cl, 0x1(%rdi,%rbx)
    00000245: 	leal	0x3(%rax), %ecx
    00000248: 	cmpl	%ecx, %r9d
    0000024b: 	jle	.Ltmp308 # Offset: 587
    00000251: 	leal	0xc(%rdx), %ebx
    00000254: 	movslq	%ecx, %rcx
    00000257: 	movslq	%ebx, %rbx
    0000025a: 	movb	%r11b, (%rdi,%rbx)
    0000025e: 	movzbl	(%r10,%rcx), %ecx
    00000263: 	movb	%cl, 0x1(%rdi,%rbx)
    00000267: 	leal	0x4(%rax), %ecx
    0000026a: 	cmpl	%ecx, %r9d
    0000026d: 	jle	.Ltmp308 # Offset: 621
    00000273: 	leal	0x10(%rdx), %ebx
    00000276: 	movslq	%ecx, %rcx
    00000279: 	movslq	%ebx, %rbx
    0000027c: 	movb	%r11b, (%rdi,%rbx)
    00000280: 	movzbl	(%r10,%rcx), %ecx
    00000285: 	movb	%cl, 0x1(%rdi,%rbx)
    00000289: 	leal	0x5(%rax), %ecx
    0000028c: 	cmpl	%ecx, %r9d
    0000028f: 	jle	.Ltmp308 # Offset: 655
    00000295: 	leal	0x14(%rdx), %ebx
    00000298: 	movslq	%ecx, %rcx
    0000029b: 	movslq	%ebx, %rbx
    0000029e: 	movb	%r11b, (%rdi,%rbx)
    000002a2: 	movzbl	(%r10,%rcx), %ecx
    000002a7: 	movb	%cl, 0x1(%rdi,%rbx)
    000002ab: 	leal	0x6(%rax), %ecx
    000002ae: 	cmpl	%ecx, %r9d
    000002b1: 	jle	.Ltmp308 # Offset: 689
    000002b7: 	leal	0x18(%rdx), %ebx
    000002ba: 	movslq	%ecx, %rcx
    000002bd: 	movslq	%ebx, %rbx
    000002c0: 	movb	%r11b, (%rdi,%rbx)
    000002c4: 	movzbl	(%r10,%rcx), %ecx
    000002c9: 	movb	%cl, 0x1(%rdi,%rbx)
    000002cd: 	leal	0x7(%rax), %ecx
    000002d0: 	cmpl	%ecx, %r9d
    000002d3: 	jle	.Ltmp308 # Offset: 723
    000002d9: 	leal	0x1c(%rdx), %ebx
    000002dc: 	movslq	%ecx, %rcx
    000002df: 	movslq	%ebx, %rbx
    000002e2: 	movb	%r11b, (%rdi,%rbx)
    000002e6: 	movzbl	(%r10,%rcx), %ecx
    000002eb: 	movb	%cl, 0x1(%rdi,%rbx)
    000002ef: 	leal	0x8(%rax), %ecx
    000002f2: 	cmpl	%ecx, %r9d
    000002f5: 	jle	.Ltmp308 # Offset: 757
    000002fb: 	leal	0x20(%rdx), %ebx
    000002fe: 	movslq	%ecx, %rcx
    00000301: 	movslq	%ebx, %rbx
    00000304: 	movb	%r11b, (%rdi,%rbx)
    00000308: 	movzbl	(%r10,%rcx), %ecx
    0000030d: 	movb	%cl, 0x1(%rdi,%rbx)
    00000311: 	leal	0x9(%rax), %ecx
    00000314: 	cmpl	%ecx, %r9d
    00000317: 	jle	.Ltmp308 # Offset: 791
    0000031d: 	leal	0x24(%rdx), %ebx
    00000320: 	movslq	%ecx, %rcx
    00000323: 	movslq	%ebx, %rbx
    00000326: 	movb	%r11b, (%rdi,%rbx)
    0000032a: 	movzbl	(%r10,%rcx), %ecx
    0000032f: 	movb	%cl, 0x1(%rdi,%rbx)
    00000333: 	leal	0xa(%rax), %ecx
    00000336: 	cmpl	%ecx, %r9d
    00000339: 	jle	.Ltmp308 # Offset: 825
    0000033f: 	leal	0x28(%rdx), %ebx
    00000342: 	movslq	%ecx, %rcx
    00000345: 	movslq	%ebx, %rbx
    00000348: 	movb	%r11b, (%rdi,%rbx)
    0000034c: 	movzbl	(%r10,%rcx), %ecx
    00000351: 	movb	%cl, 0x1(%rdi,%rbx)
    00000355: 	leal	0xb(%rax), %ecx
    00000358: 	cmpl	%ecx, %r9d
    0000035b: 	jle	.Ltmp308 # Offset: 859
    0000035d: 	leal	0x2c(%rdx), %ebx
    00000360: 	movslq	%ecx, %rcx
    00000363: 	movslq	%ebx, %rbx
    00000366: 	movb	%r11b, (%rdi,%rbx)
    0000036a: 	movzbl	(%r10,%rcx), %ecx
    0000036f: 	movb	%cl, 0x1(%rdi,%rbx)
    00000373: 	leal	0xc(%rax), %ecx
    00000376: 	cmpl	%ecx, %r9d
    00000379: 	jle	.Ltmp308 # Offset: 889
    0000037b: 	leal	0x30(%rdx), %ebx
    0000037e: 	movslq	%ecx, %rcx
    00000381: 	movslq	%ebx, %rbx
    00000384: 	movb	%r11b, (%rdi,%rbx)
    00000388: 	movzbl	(%r10,%rcx), %ecx
    0000038d: 	movb	%cl, 0x1(%rdi,%rbx)
    00000391: 	leal	0xd(%rax), %ecx
    00000394: 	cmpl	%ecx, %r9d
    00000397: 	jle	.Ltmp308 # Offset: 919
    00000399: 	leal	0x34(%rdx), %ebx
    0000039c: 	movslq	%ecx, %rcx
    0000039f: 	addl	$0xe, %eax
    000003a2: 	movslq	%ebx, %rbx
    000003a5: 	movb	%r11b, (%rdi,%rbx)
    000003a9: 	movzbl	(%r10,%rcx), %ecx
    000003ae: 	movb	%cl, 0x1(%rdi,%rbx)
    000003b2: 	cmpl	%eax, %r9d
    000003b5: 	jle	.Ltmp308 # Offset: 949
    000003b7: 	addl	$0x38, %edx
    000003ba: 	cltq
    000003bc: 	movslq	%edx, %rdx
    000003bf: 	movb	%r11b, (%rdi,%rdx)
    000003c3: 	movzbl	(%r10,%rax), %eax
    000003c8: 	movb	%al, 0x1(%rdi,%rdx)
    000003cc: 	nopl	(%rax) # Size: 4
.Ltmp308:
    000003d0: 	leaq	(%rsi,%rbp), %rdx
    000003d4: 	leaq	0x2(%rdi), %rax
    000003d8: 	cmpq	%rdx, %rax
    000003db: 	leaq	(%rdi,%rbp,4), %rcx
    000003df: 	setae	%dl
    000003e2: 	cmpq	%rcx, %rsi
    000003e5: 	setae	%r10b
    000003e9: 	orb	%r10b, %dl
    000003ec: 	je	.Ltmp309 # Offset: 1004
    000003f2: 	addq	%r8, %rbp
    000003f5: 	cmpq	%rbp, %rax
    000003f8: 	setae	%dl
    000003fb: 	cmpq	%rcx, %r8
    000003fe: 	setae	%cl
    00000401: 	orb	%cl, %dl
    00000403: 	je	.Ltmp309 # Offset: 1027
.Ltmp315:
    00000409: 	movl	%r9d, %r10d
    0000040c: 	xorl	%edx, %edx
    0000040e: 	shrl	$0x4, %r10d
    00000412: 	shlq	$0x4, %r10
    00000416: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp310:
    00000420: 	movdqu	(%rsi,%rdx), %xmm1
    00000425: 	movdqu	(%r8,%rdx), %xmm0
    0000042b: 	addq	$0x10, %rdx
    0000042f: 	addq	$0x40, %rax
    00000433: 	movd	%xmm1, %ecx
    00000437: 	movb	%cl, -0x40(%rax)
    0000043a: 	movaps	%xmm1, 0x1d8(%rsp)
    00000442: 	movzbl	0x1d9(%rsp), %ecx
    0000044a: 	movb	%cl, -0x3c(%rax)
    0000044d: 	movaps	%xmm1, 0x1c8(%rsp)
    00000455: 	movzbl	0x1ca(%rsp), %ecx
    0000045d: 	movb	%cl, -0x38(%rax)
    00000460: 	movaps	%xmm1, 0x1b8(%rsp)
    00000468: 	movzbl	0x1bb(%rsp), %ecx
    00000470: 	movb	%cl, -0x34(%rax)
    00000473: 	movaps	%xmm1, 0x1a8(%rsp)
    0000047b: 	movzbl	0x1ac(%rsp), %ecx
    00000483: 	movb	%cl, -0x30(%rax)
    00000486: 	movaps	%xmm1, 0x198(%rsp)
    0000048e: 	movzbl	0x19d(%rsp), %ecx
    00000496: 	movb	%cl, -0x2c(%rax)
    00000499: 	movaps	%xmm1, 0x188(%rsp)
    000004a1: 	movzbl	0x18e(%rsp), %ecx
    000004a9: 	movb	%cl, -0x28(%rax)
    000004ac: 	movaps	%xmm1, 0x178(%rsp)
    000004b4: 	movzbl	0x17f(%rsp), %ecx
    000004bc: 	movb	%cl, -0x24(%rax)
    000004bf: 	movaps	%xmm1, 0x168(%rsp)
    000004c7: 	movzbl	0x170(%rsp), %ecx
    000004cf: 	movb	%cl, -0x20(%rax)
    000004d2: 	movaps	%xmm1, 0x158(%rsp)
    000004da: 	movzbl	0x161(%rsp), %ecx
    000004e2: 	movb	%cl, -0x1c(%rax)
    000004e5: 	movaps	%xmm1, 0x148(%rsp)
    000004ed: 	movzbl	0x152(%rsp), %ecx
    000004f5: 	movb	%cl, -0x18(%rax)
    000004f8: 	movaps	%xmm1, 0x138(%rsp)
    00000500: 	movzbl	0x143(%rsp), %ecx
    00000508: 	movb	%cl, -0x14(%rax)
    0000050b: 	movaps	%xmm1, 0x128(%rsp)
    00000513: 	movzbl	0x134(%rsp), %ecx
    0000051b: 	movb	%cl, -0x10(%rax)
    0000051e: 	movaps	%xmm1, 0x118(%rsp)
    00000526: 	movzbl	0x125(%rsp), %ecx
    0000052e: 	movb	%cl, -0xc(%rax)
    00000531: 	movaps	%xmm1, 0x108(%rsp)
    00000539: 	movzbl	0x116(%rsp), %ecx
    00000541: 	movb	%cl, -0x8(%rax)
    00000544: 	movaps	%xmm1, 0xf8(%rsp)
    0000054c: 	movzbl	0x107(%rsp), %ecx
    00000554: 	movb	%cl, -0x4(%rax)
    00000557: 	movd	%xmm0, %ecx
    0000055b: 	movb	%cl, -0x3f(%rax)
    0000055e: 	movaps	%xmm0, 0xe8(%rsp)
    00000566: 	movzbl	0xe9(%rsp), %ecx
    0000056e: 	movb	%cl, -0x3b(%rax)
    00000571: 	movaps	%xmm0, 0xd8(%rsp)
    00000579: 	movzbl	0xda(%rsp), %ecx
    00000581: 	movb	%cl, -0x37(%rax)
    00000584: 	movaps	%xmm0, 0xc8(%rsp)
    0000058c: 	movzbl	0xcb(%rsp), %ecx
    00000594: 	movb	%cl, -0x33(%rax)
    00000597: 	movaps	%xmm0, 0xb8(%rsp)
    0000059f: 	movzbl	0xbc(%rsp), %ecx
    000005a7: 	movb	%cl, -0x2f(%rax)
    000005aa: 	movaps	%xmm0, 0xa8(%rsp)
    000005b2: 	movzbl	0xad(%rsp), %ecx
    000005ba: 	movb	%cl, -0x2b(%rax)
    000005bd: 	movaps	%xmm0, 0x98(%rsp)
    000005c5: 	movzbl	0x9e(%rsp), %ecx
    000005cd: 	movb	%cl, -0x27(%rax)
    000005d0: 	movaps	%xmm0, 0x88(%rsp)
    000005d8: 	movzbl	0x8f(%rsp), %ecx
    000005e0: 	movb	%cl, -0x23(%rax)
    000005e3: 	movaps	%xmm0, 0x78(%rsp)
    000005e8: 	movzbl	0x80(%rsp), %ecx
    000005f0: 	movb	%cl, -0x1f(%rax)
    000005f3: 	movaps	%xmm0, 0x68(%rsp)
    000005f8: 	movzbl	0x71(%rsp), %ecx
    000005fd: 	movb	%cl, -0x1b(%rax)
    00000600: 	movaps	%xmm0, 0x58(%rsp)
    00000605: 	movzbl	0x62(%rsp), %ecx
    0000060a: 	movb	%cl, -0x17(%rax)
    0000060d: 	movaps	%xmm0, 0x48(%rsp)
    00000612: 	movzbl	0x53(%rsp), %ecx
    00000617: 	movb	%cl, -0x13(%rax)
    0000061a: 	movaps	%xmm0, 0x38(%rsp)
    0000061f: 	movzbl	0x44(%rsp), %ecx
    00000624: 	movb	%cl, -0xf(%rax)
    00000627: 	movaps	%xmm0, 0x28(%rsp)
    0000062c: 	movzbl	0x35(%rsp), %ecx
    00000631: 	movb	%cl, -0xb(%rax)
    00000634: 	movaps	%xmm0, 0x18(%rsp)
    00000639: 	movzbl	0x26(%rsp), %ecx
    0000063e: 	movb	%cl, -0x7(%rax)
    00000641: 	movaps	%xmm0, 0x8(%rsp)
    00000646: 	movzbl	0x17(%rsp), %ecx
    0000064b: 	movb	%cl, -0x3(%rax)
    0000064e: 	cmpq	%rdx, %r10
    00000651: 	jne	.Ltmp310 # Offset: 1617
    00000657: 	movl	%r9d, %edx
    0000065a: 	andl	$-0x10, %edx
    0000065d: 	movl	%edx, %r10d
    00000660: 	cmpl	%r9d, %edx
    00000663: 	je	.Ltmp311 # Offset: 1635
    00000669: 	movl	%r9d, %ebx
    0000066c: 	subl	%edx, %ebx
    0000066e: 	leal	-0x1(%rbx), %eax
    00000671: 	movl	%ebx, %r14d
    00000674: 	cmpl	$0x6, %eax
    00000677: 	jbe	.Ltmp312 # Offset: 1655
.Ltmp316:
    0000067d: 	movq	(%rsi,%rdx), %rcx
    00000681: 	leaq	0x2(%rdi,%rdx,4), %rax
    00000686: 	movq	(%r8,%rdx), %rdx
    0000068a: 	movq	%rcx, %r11
    0000068d: 	movb	%cl, (%rax)
    0000068f: 	shrq	$0x10, %r11
    00000693: 	movb	%ch, 0x4(%rax)
    00000696: 	movb	%r11b, 0x8(%rax)
    0000069a: 	movq	%rcx, %r11
    0000069d: 	shrq	$0x18, %r11
    000006a1: 	movb	%dl, 0x1(%rax)
    000006a4: 	movb	%r11b, 0xc(%rax)
    000006a8: 	movq	%rcx, %r11
    000006ab: 	shrq	$0x20, %r11
    000006af: 	movb	%dh, 0x5(%rax)
    000006b2: 	movb	%r11b, 0x10(%rax)
    000006b6: 	movq	%rcx, %r11
    000006b9: 	shrq	$0x28, %r11
    000006bd: 	movb	%r11b, 0x14(%rax)
    000006c1: 	movq	%rcx, %r11
    000006c4: 	shrq	$0x38, %rcx
    000006c8: 	movb	%cl, 0x1c(%rax)
    000006cb: 	movq	%rdx, %rcx
    000006ce: 	shrq	$0x30, %r11
    000006d2: 	shrq	$0x10, %rcx
    000006d6: 	movb	%r11b, 0x18(%rax)
    000006da: 	movb	%cl, 0x9(%rax)
    000006dd: 	movq	%rdx, %rcx
    000006e0: 	shrq	$0x18, %rcx
    000006e4: 	movb	%cl, 0xd(%rax)
    000006e7: 	movq	%rdx, %rcx
    000006ea: 	shrq	$0x20, %rcx
    000006ee: 	movb	%cl, 0x11(%rax)
    000006f1: 	movq	%rdx, %rcx
    000006f4: 	shrq	$0x28, %rcx
    000006f8: 	movb	%cl, 0x15(%rax)
    000006fb: 	movq	%rdx, %rcx
    000006fe: 	shrq	$0x38, %rdx
    00000702: 	shrq	$0x30, %rcx
    00000706: 	movb	%dl, 0x1d(%rax)
    00000709: 	movb	%cl, 0x19(%rax)
    0000070c: 	movl	%r14d, %eax
    0000070f: 	andl	$-0x8, %eax
    00000712: 	addl	%eax, %r10d
    00000715: 	cmpl	%r14d, %eax
    00000718: 	je	.Ltmp311 # Offset: 1816
.Ltmp312:
    0000071e: 	movslq	%r10d, %rcx
    00000721: 	leal	(,%r10,4), %eax
    00000729: 	movzbl	(%rsi,%rcx), %r11d
    0000072e: 	movslq	%eax, %rdx
    00000731: 	movb	%r11b, 0x2(%rdi,%rdx)
    00000736: 	movzbl	(%r8,%rcx), %ecx
    0000073b: 	movb	%cl, 0x3(%rdi,%rdx)
    0000073f: 	leal	0x1(%r10), %edx
    00000743: 	cmpl	%r9d, %edx
    00000746: 	jge	.Ltmp311 # Offset: 1862
    0000074c: 	movslq	%edx, %rdx
    0000074f: 	leal	0x4(%rax), %ecx
    00000752: 	movzbl	(%rsi,%rdx), %r11d
    00000757: 	movslq	%ecx, %rcx
    0000075a: 	movb	%r11b, 0x2(%rdi,%rcx)
    0000075f: 	movzbl	(%r8,%rdx), %edx
    00000764: 	movb	%dl, 0x3(%rdi,%rcx)
    00000768: 	leal	0x2(%r10), %edx
    0000076c: 	cmpl	%edx, %r9d
    0000076f: 	jle	.Ltmp311 # Offset: 1903
    00000775: 	movslq	%edx, %rdx
    00000778: 	leal	0x8(%rax), %ecx
    0000077b: 	movzbl	(%rsi,%rdx), %r11d
    00000780: 	movslq	%ecx, %rcx
    00000783: 	movb	%r11b, 0x2(%rdi,%rcx)
    00000788: 	movzbl	(%r8,%rdx), %edx
    0000078d: 	movb	%dl, 0x3(%rdi,%rcx)
    00000791: 	leal	0x3(%r10), %edx
    00000795: 	cmpl	%edx, %r9d
    00000798: 	jle	.Ltmp311 # Offset: 1944
    0000079e: 	movslq	%edx, %rdx
    000007a1: 	leal	0xc(%rax), %ecx
    000007a4: 	movzbl	(%rsi,%rdx), %r11d
    000007a9: 	movslq	%ecx, %rcx
    000007ac: 	movb	%r11b, 0x2(%rdi,%rcx)
    000007b1: 	movzbl	(%r8,%rdx), %edx
    000007b6: 	movb	%dl, 0x3(%rdi,%rcx)
    000007ba: 	leal	0x4(%r10), %edx
    000007be: 	cmpl	%edx, %r9d
    000007c1: 	jle	.Ltmp311 # Offset: 1985
    000007c3: 	movslq	%edx, %rdx
    000007c6: 	leal	0x10(%rax), %ecx
    000007c9: 	movzbl	(%rsi,%rdx), %r11d
    000007ce: 	movslq	%ecx, %rcx
    000007d1: 	movb	%r11b, 0x2(%rdi,%rcx)
    000007d6: 	movzbl	(%r8,%rdx), %edx
    000007db: 	movb	%dl, 0x3(%rdi,%rcx)
    000007df: 	leal	0x5(%r10), %edx
    000007e3: 	cmpl	%edx, %r9d
    000007e6: 	jle	.Ltmp311 # Offset: 2022
    000007e8: 	movslq	%edx, %rdx
    000007eb: 	leal	0x14(%rax), %ecx
    000007ee: 	addl	$0x6, %r10d
    000007f2: 	movzbl	(%rsi,%rdx), %r11d
    000007f7: 	movslq	%ecx, %rcx
    000007fa: 	movb	%r11b, 0x2(%rdi,%rcx)
    000007ff: 	movzbl	(%r8,%rdx), %edx
    00000804: 	movb	%dl, 0x3(%rdi,%rcx)
    00000808: 	cmpl	%r10d, %r9d
    0000080b: 	jle	.Ltmp311 # Offset: 2059
    0000080d: 	movslq	%r10d, %r10
    00000810: 	addl	$0x18, %eax
    00000813: 	movzbl	(%rsi,%r10), %edx
    00000818: 	cltq
    0000081a: 	movb	%dl, 0x2(%rdi,%rax)
    0000081e: 	movzbl	(%r8,%r10), %edx
    00000823: 	movb	%dl, 0x3(%rdi,%rax)
.Ltmp311:
    00000827: 	addq	$0x2e0, %rsp
    0000082e: 	popq	%rbx
    0000082f: 	popq	%rbp
    00000830: 	popq	%r12
    00000832: 	popq	%r14
    00000834: 	retq # Offset: 2100
    00000835: 	nopl	(%rax) # Size: 3
.Ltmp306:
    00000838: 	movl	%r9d, %ecx
    0000083b: 	xorl	%eax, %eax
    0000083d: 	nopl	(%rax) # Size: 3
.Ltmp313:
    00000840: 	movb	%dl, (%rdi,%rax,4)
    00000843: 	movzbl	(%r10,%rax), %r11d
    00000848: 	movb	%r11b, 0x1(%rdi,%rax,4)
    0000084d: 	addq	$0x1, %rax
    00000851: 	cmpq	%rcx, %rax
    00000854: 	jne	.Ltmp313 # Offset: 2132
    00000856: 	leaq	(%rsi,%rbp), %rdx
    0000085a: 	leaq	0x2(%rdi), %rax
    0000085e: 	leaq	(%rdi,%rbp,4), %r11
    00000862: 	cmpq	%rdx, %rax
    00000865: 	setae	%r10b
    00000869: 	cmpq	%rsi, %r11
    0000086c: 	setbe	%dl
    0000086f: 	addq	%r8, %rbp
    00000872: 	orl	%edx, %r10d
    00000875: 	cmpq	%rbp, %rax
    00000878: 	setae	%dl
    0000087b: 	cmpq	%r8, %r11
    0000087e: 	setbe	%r11b
    00000882: 	orl	%r11d, %edx
    00000885: 	testb	%dl, %r10b
    00000888: 	je	.Ltmp314 # Offset: 2184
    0000088a: 	cmpl	$0x6, %r12d
    0000088e: 	jbe	.Ltmp314 # Offset: 2190
    00000890: 	cmpl	$0xe, %r12d
    00000894: 	ja	.Ltmp315 # Offset: 2196
    0000089a: 	xorl	%edx, %edx
    0000089c: 	xorl	%r10d, %r10d
    0000089f: 	jmp	.Ltmp316 # Offset: 2207
    000008a4: 	nopl	(%rax) # Size: 4
.Ltmp309:
    000008a8: 	movl	%r9d, %ecx
.Ltmp314:
    000008ab: 	xorl	%eax, %eax
    000008ad: 	nopl	(%rax) # Size: 3
.Ltmp317:
    000008b0: 	movzbl	(%rsi,%rax), %edx
    000008b4: 	movb	%dl, 0x2(%rdi,%rax,4)
    000008b8: 	movzbl	(%r8,%rax), %edx
    000008bd: 	movb	%dl, 0x3(%rdi,%rax,4)
    000008c1: 	addq	$0x1, %rax
    000008c5: 	cmpq	%rax, %rcx
    000008c8: 	jne	.Ltmp317 # Offset: 2248
    000008ca: 	addq	$0x2e0, %rsp
    000008d1: 	popq	%rbx
    000008d2: 	popq	%rbp
    000008d3: 	popq	%r12
    000008d5: 	popq	%r14
    000008d7: 	retq # Offset: 2263
    000008d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp305:
    000008e0: 	retq # Offset: 2272
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version3IhEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version4IhEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 69
  State       : disassembled
  Address     : 0x91d0
  Size        : 0x96e
  MaxSize     : 0x970
  Offset      : 0x91d0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version4IhEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x340, %rsp
    00000015: 	movl	%r9d, -0x60(%rsp)
    0000001a: 	movl	%r9d, -0x5c(%rsp)
    0000001f: 	movl	$0x0, -0x74(%rsp)
    00000027: 	testl	%r9d, %r9d
    0000002a: 	jle	.Ltmp318 # Offset: 42
    00000030: 	movq	%rdx, %r14
    00000033: 	movq	%rcx, %r11
    00000036: 	movl	%esi, %r13d
    00000039: 	nopl	(%rax) # Size: 7
.Ltmp336:
    00000040: 	addl	$0x400, -0x74(%rsp)
    00000048: 	movl	$0x400, %eax
    0000004d: 	movl	-0x74(%rsp), %ebx
    00000051: 	movq	$0x1000, -0x68(%rsp)
    0000005a: 	cmpl	-0x60(%rsp), %ebx
    0000005e: 	jg	.Ltmp319 # Offset: 94
.Ltmp337:
    00000064: 	xorl	%edx, %edx
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp320:
    00000070: 	movb	%r13b, (%rdi,%rdx,4)
    00000074: 	addq	$0x1, %rdx
    00000078: 	cmpq	%rdx, %rax
    0000007b: 	ja	.Ltmp320 # Offset: 123
    0000007d: 	leaq	-0x4(,%rax,4), %rsi
    00000085: 	cmpq	$0x7, %rax
    00000089: 	movl	$0x1, %edx
    0000008e: 	seta	-0x75(%rsp)
    00000093: 	leaq	0x2(%rsi), %rcx
    00000097: 	testq	%rax, %rax
    0000009a: 	movzbl	-0x75(%rsp), %ebx
    0000009f: 	movq	%rsi, -0x70(%rsp)
    000000a4: 	movl	$0x2, %esi
    000000a9: 	cmovneq	%rax, %rdx
    000000ad: 	leaq	0x1(%rdi), %r10
    000000b1: 	cmoveq	%rsi, %rcx
    000000b5: 	addq	%rdi, %rcx
    000000b8: 	cmpq	%rcx, %r14
    000000bb: 	leaq	(%r14,%rdx), %rcx
    000000bf: 	setae	%sil
    000000c3: 	cmpq	%rcx, %r10
    000000c6: 	setae	%cl
    000000c9: 	orb	%sil, %cl
    000000cc: 	je	.Ltmp321 # Offset: 204
    000000d2: 	testb	%bl, %bl
    000000d4: 	je	.Ltmp321 # Offset: 212
    000000da: 	cmpq	$0xf, %rax
    000000de: 	jbe	.Ltmp322 # Offset: 222
    000000e4: 	movq	%rdx, %rbp
    000000e7: 	movq	-0x70(%rsp), %rbx
    000000ec: 	movq	%r14, %rsi
    000000ef: 	movq	%r10, %rcx
    000000f2: 	andq	$-0x10, %rbp
    000000f6: 	addq	%r14, %rbp
    000000f9: 	nopl	(%rax) # Size: 7
.Ltmp323:
    00000100: 	movdqu	(%rsi), %xmm0
    00000104: 	addq	$0x10, %rsi
    00000108: 	addq	$0x40, %rcx
    0000010c: 	movd	%xmm0, %r9d
    00000111: 	movb	%r9b, -0x40(%rcx)
    00000115: 	movaps	%xmm0, 0x2e8(%rsp)
    0000011d: 	movzbl	0x2e9(%rsp), %r9d
    00000126: 	movb	%r9b, -0x3c(%rcx)
    0000012a: 	movaps	%xmm0, 0x2d8(%rsp)
    00000132: 	movzbl	0x2da(%rsp), %r9d
    0000013b: 	movb	%r9b, -0x38(%rcx)
    0000013f: 	movaps	%xmm0, 0x2c8(%rsp)
    00000147: 	movzbl	0x2cb(%rsp), %r9d
    00000150: 	movb	%r9b, -0x34(%rcx)
    00000154: 	movaps	%xmm0, 0x2b8(%rsp)
    0000015c: 	movzbl	0x2bc(%rsp), %r9d
    00000165: 	movb	%r9b, -0x30(%rcx)
    00000169: 	movaps	%xmm0, 0x2a8(%rsp)
    00000171: 	movzbl	0x2ad(%rsp), %r9d
    0000017a: 	movb	%r9b, -0x2c(%rcx)
    0000017e: 	movaps	%xmm0, 0x298(%rsp)
    00000186: 	movzbl	0x29e(%rsp), %r9d
    0000018f: 	movb	%r9b, -0x28(%rcx)
    00000193: 	movaps	%xmm0, 0x288(%rsp)
    0000019b: 	movzbl	0x28f(%rsp), %r9d
    000001a4: 	movb	%r9b, -0x24(%rcx)
    000001a8: 	movaps	%xmm0, 0x278(%rsp)
    000001b0: 	movzbl	0x280(%rsp), %r9d
    000001b9: 	movb	%r9b, -0x20(%rcx)
    000001bd: 	movaps	%xmm0, 0x268(%rsp)
    000001c5: 	movzbl	0x271(%rsp), %r9d
    000001ce: 	movb	%r9b, -0x1c(%rcx)
    000001d2: 	movaps	%xmm0, 0x258(%rsp)
    000001da: 	movzbl	0x262(%rsp), %r9d
    000001e3: 	movb	%r9b, -0x18(%rcx)
    000001e7: 	movaps	%xmm0, 0x248(%rsp)
    000001ef: 	movzbl	0x253(%rsp), %r9d
    000001f8: 	movb	%r9b, -0x14(%rcx)
    000001fc: 	movaps	%xmm0, 0x238(%rsp)
    00000204: 	movzbl	0x244(%rsp), %r9d
    0000020d: 	movb	%r9b, -0x10(%rcx)
    00000211: 	movaps	%xmm0, 0x228(%rsp)
    00000219: 	movzbl	0x235(%rsp), %r9d
    00000222: 	movb	%r9b, -0xc(%rcx)
    00000226: 	movaps	%xmm0, 0x218(%rsp)
    0000022e: 	movzbl	0x226(%rsp), %r9d
    00000237: 	movb	%r9b, -0x8(%rcx)
    0000023b: 	movaps	%xmm0, 0x208(%rsp)
    00000243: 	movzbl	0x217(%rsp), %r9d
    0000024c: 	movb	%r9b, -0x4(%rcx)
    00000250: 	cmpq	%rsi, %rbp
    00000253: 	jne	.Ltmp323 # Offset: 595
    00000259: 	movq	%rdx, %rsi
    0000025c: 	movq	%rbx, -0x70(%rsp)
    00000261: 	andq	$-0x10, %rsi
    00000265: 	leaq	(%r14,%rsi), %rbp
    00000269: 	leaq	(%r10,%rsi,4), %r10
    0000026d: 	cmpq	%rsi, %rdx
    00000270: 	je	.Ltmp324 # Offset: 624
.Ltmp342:
    00000276: 	movq	%rdx, %r12
    00000279: 	subq	%rsi, %r12
    0000027c: 	leaq	-0x1(%r12), %rcx
    00000281: 	cmpq	$0x6, %rcx
    00000285: 	jbe	.Ltmp325 # Offset: 645
    00000287: 	movq	(%r14,%rsi), %rcx
    0000028b: 	leaq	0x1(%rdi,%rsi,4), %r9
    00000290: 	movq	%rcx, %r15
    00000293: 	movzbl	%ch, %ebx
    00000296: 	movb	%cl, (%r9)
    00000299: 	shrq	$0x10, %r15
    0000029d: 	movb	%bl, 0x4(%r9)
    000002a1: 	movb	%r15b, 0x8(%r9)
    000002a5: 	movq	%rcx, %r15
    000002a8: 	shrq	$0x18, %r15
    000002ac: 	movb	%r15b, 0xc(%r9)
    000002b0: 	movq	%rcx, %r15
    000002b3: 	shrq	$0x20, %r15
    000002b7: 	movb	%r15b, 0x10(%r9)
    000002bb: 	movq	%rcx, %r15
    000002be: 	shrq	$0x28, %r15
    000002c2: 	movb	%r15b, 0x14(%r9)
    000002c6: 	movq	%rcx, %r15
    000002c9: 	shrq	$0x38, %rcx
    000002cd: 	movb	%cl, 0x1c(%r9)
    000002d1: 	movq	%r12, %rcx
    000002d4: 	shrq	$0x30, %r15
    000002d8: 	andq	$-0x8, %rcx
    000002dc: 	movb	%r15b, 0x18(%r9)
    000002e0: 	addq	%rcx, %rbp
    000002e3: 	leaq	(%r10,%rcx,4), %r10
    000002e7: 	addq	%rcx, %rsi
    000002ea: 	cmpq	%rcx, %r12
    000002ed: 	je	.Ltmp324 # Offset: 749
.Ltmp325:
    000002ef: 	movzbl	(%rbp), %ecx
    000002f3: 	movb	%cl, (%r10)
    000002f6: 	leaq	0x1(%rsi), %rcx
    000002fa: 	cmpq	%rcx, %rax
    000002fd: 	jbe	.Ltmp324 # Offset: 765
    000002ff: 	movzbl	0x1(%rbp), %ecx
    00000303: 	movb	%cl, 0x4(%r10)
    00000307: 	leaq	0x2(%rsi), %rcx
    0000030b: 	cmpq	%rcx, %rax
    0000030e: 	jbe	.Ltmp324 # Offset: 782
    00000310: 	movzbl	0x2(%rbp), %ecx
    00000314: 	movb	%cl, 0x8(%r10)
    00000318: 	leaq	0x3(%rsi), %rcx
    0000031c: 	cmpq	%rcx, %rax
    0000031f: 	jbe	.Ltmp324 # Offset: 799
    00000321: 	movzbl	0x3(%rbp), %ecx
    00000325: 	movb	%cl, 0xc(%r10)
    00000329: 	leaq	0x4(%rsi), %rcx
    0000032d: 	cmpq	%rcx, %rax
    00000330: 	jbe	.Ltmp324 # Offset: 816
    00000332: 	movzbl	0x4(%rbp), %ecx
    00000336: 	movb	%cl, 0x10(%r10)
    0000033a: 	leaq	0x5(%rsi), %rcx
    0000033e: 	cmpq	%rcx, %rax
    00000341: 	jbe	.Ltmp324 # Offset: 833
    00000343: 	movzbl	0x5(%rbp), %ecx
    00000347: 	addq	$0x6, %rsi
    0000034b: 	movb	%cl, 0x14(%r10)
    0000034f: 	cmpq	%rsi, %rax
    00000352: 	jbe	.Ltmp324 # Offset: 850
    00000354: 	movzbl	0x6(%rbp), %ecx
    00000358: 	movb	%cl, 0x18(%r10)
.Ltmp324:
    0000035c: 	movq	-0x70(%rsp), %rbx
    00000361: 	movl	$0x3, %esi
    00000366: 	leaq	(%r11,%rdx), %rcx
    0000036a: 	leaq	0x2(%rdi), %r10
    0000036e: 	addq	$0x3, %rbx
    00000372: 	testq	%rax, %rax
    00000375: 	cmoveq	%rsi, %rbx
    00000379: 	addq	%rdi, %rbx
    0000037c: 	cmpq	%rbx, %r11
    0000037f: 	setae	%sil
    00000383: 	cmpq	%rcx, %r10
    00000386: 	setae	%cl
    00000389: 	orb	%sil, %cl
    0000038c: 	je	.Ltmp326 # Offset: 908
    00000392: 	cmpb	$0x0, -0x75(%rsp)
    00000397: 	je	.Ltmp326 # Offset: 919
    0000039d: 	cmpq	$0xf, %rax
    000003a1: 	jbe	.Ltmp327 # Offset: 929
    000003a7: 	movq	%rdx, %rbx
    000003aa: 	movq	%r11, %rsi
    000003ad: 	movq	%r10, %rcx
    000003b0: 	andq	$-0x10, %rbx
    000003b4: 	addq	%r11, %rbx
    000003b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp328:
    000003c0: 	movdqu	(%rsi), %xmm0
    000003c4: 	addq	$0x10, %rsi
    000003c8: 	addq	$0x40, %rcx
    000003cc: 	movd	%xmm0, %r9d
    000003d1: 	movb	%r9b, -0x40(%rcx)
    000003d5: 	movaps	%xmm0, 0x1b8(%rsp)
    000003dd: 	movzbl	0x1b9(%rsp), %r9d
    000003e6: 	movb	%r9b, -0x3c(%rcx)
    000003ea: 	movaps	%xmm0, 0x1a8(%rsp)
    000003f2: 	movzbl	0x1aa(%rsp), %r9d
    000003fb: 	movb	%r9b, -0x38(%rcx)
    000003ff: 	movaps	%xmm0, 0x198(%rsp)
    00000407: 	movzbl	0x19b(%rsp), %r9d
    00000410: 	movb	%r9b, -0x34(%rcx)
    00000414: 	movaps	%xmm0, 0x188(%rsp)
    0000041c: 	movzbl	0x18c(%rsp), %r9d
    00000425: 	movb	%r9b, -0x30(%rcx)
    00000429: 	movaps	%xmm0, 0x178(%rsp)
    00000431: 	movzbl	0x17d(%rsp), %r9d
    0000043a: 	movb	%r9b, -0x2c(%rcx)
    0000043e: 	movaps	%xmm0, 0x168(%rsp)
    00000446: 	movzbl	0x16e(%rsp), %r9d
    0000044f: 	movb	%r9b, -0x28(%rcx)
    00000453: 	movaps	%xmm0, 0x158(%rsp)
    0000045b: 	movzbl	0x15f(%rsp), %r9d
    00000464: 	movb	%r9b, -0x24(%rcx)
    00000468: 	movaps	%xmm0, 0x148(%rsp)
    00000470: 	movzbl	0x150(%rsp), %r9d
    00000479: 	movb	%r9b, -0x20(%rcx)
    0000047d: 	movaps	%xmm0, 0x138(%rsp)
    00000485: 	movzbl	0x141(%rsp), %r9d
    0000048e: 	movb	%r9b, -0x1c(%rcx)
    00000492: 	movaps	%xmm0, 0x128(%rsp)
    0000049a: 	movzbl	0x132(%rsp), %r9d
    000004a3: 	movb	%r9b, -0x18(%rcx)
    000004a7: 	movaps	%xmm0, 0x118(%rsp)
    000004af: 	movzbl	0x123(%rsp), %r9d
    000004b8: 	movb	%r9b, -0x14(%rcx)
    000004bc: 	movaps	%xmm0, 0x108(%rsp)
    000004c4: 	movzbl	0x114(%rsp), %r9d
    000004cd: 	movb	%r9b, -0x10(%rcx)
    000004d1: 	movaps	%xmm0, 0xf8(%rsp)
    000004d9: 	movzbl	0x105(%rsp), %r9d
    000004e2: 	movb	%r9b, -0xc(%rcx)
    000004e6: 	movaps	%xmm0, 0xe8(%rsp)
    000004ee: 	movzbl	0xf6(%rsp), %r9d
    000004f7: 	movb	%r9b, -0x8(%rcx)
    000004fb: 	movaps	%xmm0, 0xd8(%rsp)
    00000503: 	movzbl	0xe7(%rsp), %r9d
    0000050c: 	movb	%r9b, -0x4(%rcx)
    00000510: 	cmpq	%rsi, %rbx
    00000513: 	jne	.Ltmp328 # Offset: 1299
    00000519: 	movq	%rdx, %rsi
    0000051c: 	andq	$-0x10, %rsi
    00000520: 	leaq	(%r11,%rsi), %r15
    00000524: 	leaq	(%r10,%rsi,4), %r10
    00000528: 	cmpq	%rdx, %rsi
    0000052b: 	je	.Ltmp329 # Offset: 1323
.Ltmp341:
    00000531: 	movq	%rdx, %rbp
    00000534: 	subq	%rsi, %rbp
    00000537: 	leaq	-0x1(%rbp), %rcx
    0000053b: 	cmpq	$0x6, %rcx
    0000053f: 	jbe	.Ltmp330 # Offset: 1343
    00000541: 	movq	(%r11,%rsi), %rcx
    00000545: 	leaq	0x2(%rdi,%rsi,4), %r9
    0000054a: 	movq	%rcx, %r12
    0000054d: 	movzbl	%ch, %ebx
    00000550: 	movb	%cl, (%r9)
    00000553: 	shrq	$0x10, %r12
    00000557: 	movb	%bl, 0x4(%r9)
    0000055b: 	movb	%r12b, 0x8(%r9)
    0000055f: 	movq	%rcx, %r12
    00000562: 	shrq	$0x18, %r12
    00000566: 	movb	%r12b, 0xc(%r9)
    0000056a: 	movq	%rcx, %r12
    0000056d: 	shrq	$0x20, %r12
    00000571: 	movb	%r12b, 0x10(%r9)
    00000575: 	movq	%rcx, %r12
    00000578: 	shrq	$0x28, %r12
    0000057c: 	movb	%r12b, 0x14(%r9)
    00000580: 	movq	%rcx, %r12
    00000583: 	shrq	$0x38, %rcx
    00000587: 	movb	%cl, 0x1c(%r9)
    0000058b: 	movq	%rbp, %rcx
    0000058e: 	shrq	$0x30, %r12
    00000592: 	andq	$-0x8, %rcx
    00000596: 	movb	%r12b, 0x18(%r9)
    0000059a: 	addq	%rcx, %r15
    0000059d: 	leaq	(%r10,%rcx,4), %r10
    000005a1: 	addq	%rcx, %rsi
    000005a4: 	cmpq	%rcx, %rbp
    000005a7: 	je	.Ltmp329 # Offset: 1447
.Ltmp330:
    000005a9: 	movzbl	(%r15), %ecx
    000005ad: 	movb	%cl, (%r10)
    000005b0: 	leaq	0x1(%rsi), %rcx
    000005b4: 	cmpq	%rax, %rcx
    000005b7: 	jae	.Ltmp329 # Offset: 1463
    000005b9: 	movzbl	0x1(%r15), %ecx
    000005be: 	movb	%cl, 0x4(%r10)
    000005c2: 	leaq	0x2(%rsi), %rcx
    000005c6: 	cmpq	%rcx, %rax
    000005c9: 	jbe	.Ltmp329 # Offset: 1481
    000005cb: 	movzbl	0x2(%r15), %ecx
    000005d0: 	movb	%cl, 0x8(%r10)
    000005d4: 	leaq	0x3(%rsi), %rcx
    000005d8: 	cmpq	%rcx, %rax
    000005db: 	jbe	.Ltmp329 # Offset: 1499
    000005dd: 	movzbl	0x3(%r15), %ecx
    000005e2: 	movb	%cl, 0xc(%r10)
    000005e6: 	leaq	0x4(%rsi), %rcx
    000005ea: 	cmpq	%rcx, %rax
    000005ed: 	jbe	.Ltmp329 # Offset: 1517
    000005ef: 	movzbl	0x4(%r15), %ecx
    000005f4: 	movb	%cl, 0x10(%r10)
    000005f8: 	leaq	0x5(%rsi), %rcx
    000005fc: 	cmpq	%rcx, %rax
    000005ff: 	jbe	.Ltmp329 # Offset: 1535
    00000601: 	movzbl	0x5(%r15), %ecx
    00000606: 	addq	$0x6, %rsi
    0000060a: 	movb	%cl, 0x14(%r10)
    0000060e: 	cmpq	%rsi, %rax
    00000611: 	jbe	.Ltmp329 # Offset: 1553
    00000613: 	movzbl	0x6(%r15), %ecx
    00000618: 	movb	%cl, 0x18(%r10)
.Ltmp329:
    0000061c: 	testq	%rax, %rax
    0000061f: 	leaq	(,%rax,4), %rcx
    00000627: 	movl	$0x4, %ebx
    0000062c: 	cmoveq	%rbx, %rcx
    00000630: 	leaq	0x3(%rdi), %r10
    00000634: 	addq	%rdi, %rcx
    00000637: 	cmpq	%rcx, %r8
    0000063a: 	leaq	(%r8,%rdx), %rcx
    0000063e: 	setae	%sil
    00000642: 	cmpq	%rcx, %r10
    00000645: 	setae	%cl
    00000648: 	orb	%sil, %cl
    0000064b: 	je	.Ltmp331 # Offset: 1611
    00000651: 	cmpb	$0x0, -0x75(%rsp)
    00000656: 	je	.Ltmp331 # Offset: 1622
    0000065c: 	cmpq	$0xf, %rax
    00000660: 	jbe	.Ltmp332 # Offset: 1632
    00000666: 	movq	%rdx, %rbx
    00000669: 	movq	%r8, %rsi
    0000066c: 	movq	%r10, %rcx
    0000066f: 	andq	$-0x10, %rbx
    00000673: 	addq	%r8, %rbx
    00000676: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp333:
    00000680: 	movdqu	(%rsi), %xmm0
    00000684: 	addq	$0x10, %rsi
    00000688: 	addq	$0x40, %rcx
    0000068c: 	movd	%xmm0, %r9d
    00000691: 	movb	%r9b, -0x40(%rcx)
    00000695: 	movaps	%xmm0, 0x88(%rsp)
    0000069d: 	movzbl	0x89(%rsp), %r9d
    000006a6: 	movb	%r9b, -0x3c(%rcx)
    000006aa: 	movaps	%xmm0, 0x78(%rsp)
    000006af: 	movzbl	0x7a(%rsp), %r9d
    000006b5: 	movb	%r9b, -0x38(%rcx)
    000006b9: 	movaps	%xmm0, 0x68(%rsp)
    000006be: 	movzbl	0x6b(%rsp), %r9d
    000006c4: 	movb	%r9b, -0x34(%rcx)
    000006c8: 	movaps	%xmm0, 0x58(%rsp)
    000006cd: 	movzbl	0x5c(%rsp), %r9d
    000006d3: 	movb	%r9b, -0x30(%rcx)
    000006d7: 	movaps	%xmm0, 0x48(%rsp)
    000006dc: 	movzbl	0x4d(%rsp), %r9d
    000006e2: 	movb	%r9b, -0x2c(%rcx)
    000006e6: 	movaps	%xmm0, 0x38(%rsp)
    000006eb: 	movzbl	0x3e(%rsp), %r9d
    000006f1: 	movb	%r9b, -0x28(%rcx)
    000006f5: 	movaps	%xmm0, 0x28(%rsp)
    000006fa: 	movzbl	0x2f(%rsp), %r9d
    00000700: 	movb	%r9b, -0x24(%rcx)
    00000704: 	movaps	%xmm0, 0x18(%rsp)
    00000709: 	movzbl	0x20(%rsp), %r9d
    0000070f: 	movb	%r9b, -0x20(%rcx)
    00000713: 	movaps	%xmm0, 0x8(%rsp)
    00000718: 	movzbl	0x11(%rsp), %r9d
    0000071e: 	movb	%r9b, -0x1c(%rcx)
    00000722: 	movaps	%xmm0, -0x8(%rsp)
    00000727: 	movzbl	0x2(%rsp), %r9d
    0000072d: 	movb	%r9b, -0x18(%rcx)
    00000731: 	movaps	%xmm0, -0x18(%rsp)
    00000736: 	movzbl	-0xd(%rsp), %r9d
    0000073c: 	movb	%r9b, -0x14(%rcx)
    00000740: 	movaps	%xmm0, -0x28(%rsp)
    00000745: 	movzbl	-0x1c(%rsp), %r9d
    0000074b: 	movb	%r9b, -0x10(%rcx)
    0000074f: 	movaps	%xmm0, -0x38(%rsp)
    00000754: 	movzbl	-0x2b(%rsp), %r9d
    0000075a: 	movb	%r9b, -0xc(%rcx)
    0000075e: 	movaps	%xmm0, -0x48(%rsp)
    00000763: 	movzbl	-0x3a(%rsp), %r9d
    00000769: 	movb	%r9b, -0x8(%rcx)
    0000076d: 	movaps	%xmm0, -0x58(%rsp)
    00000772: 	movzbl	-0x49(%rsp), %r9d
    00000778: 	movb	%r9b, -0x4(%rcx)
    0000077c: 	cmpq	%rbx, %rsi
    0000077f: 	jne	.Ltmp333 # Offset: 1919
    00000785: 	movq	%rdx, %rsi
    00000788: 	andq	$-0x10, %rsi
    0000078c: 	leaq	(%r8,%rsi), %rbx
    00000790: 	leaq	(%r10,%rsi,4), %r10
    00000794: 	cmpq	%rdx, %rsi
    00000797: 	je	.Ltmp334 # Offset: 1943
.Ltmp343:
    0000079d: 	subq	%rsi, %rdx
    000007a0: 	leaq	-0x1(%rdx), %rcx
    000007a4: 	movq	%rdx, %r15
    000007a7: 	cmpq	$0x6, %rcx
    000007ab: 	jbe	.Ltmp335 # Offset: 1963
    000007ad: 	movq	(%r8,%rsi), %rcx
    000007b1: 	leaq	0x3(%rdi,%rsi,4), %r9
    000007b6: 	movq	%rcx, %rbp
    000007b9: 	movzbl	%ch, %edx
    000007bc: 	movb	%cl, (%r9)
    000007bf: 	shrq	$0x10, %rbp
    000007c3: 	movb	%dl, 0x4(%r9)
    000007c7: 	movq	%r15, %rdx
    000007ca: 	movb	%bpl, 0x8(%r9)
    000007ce: 	movq	%rcx, %rbp
    000007d1: 	andq	$-0x8, %rdx
    000007d5: 	shrq	$0x18, %rbp
    000007d9: 	addq	%rdx, %rbx
    000007dc: 	leaq	(%r10,%rdx,4), %r10
    000007e0: 	addq	%rdx, %rsi
    000007e3: 	movb	%bpl, 0xc(%r9)
    000007e7: 	movq	%rcx, %rbp
    000007ea: 	shrq	$0x20, %rbp
    000007ee: 	movb	%bpl, 0x10(%r9)
    000007f2: 	movq	%rcx, %rbp
    000007f5: 	shrq	$0x28, %rbp
    000007f9: 	movb	%bpl, 0x14(%r9)
    000007fd: 	movq	%rcx, %rbp
    00000800: 	shrq	$0x38, %rcx
    00000804: 	shrq	$0x30, %rbp
    00000808: 	movb	%cl, 0x1c(%r9)
    0000080c: 	movb	%bpl, 0x18(%r9)
    00000810: 	cmpq	%rdx, %r15
    00000813: 	je	.Ltmp334 # Offset: 2067
.Ltmp335:
    00000815: 	movzbl	(%rbx), %edx
    00000818: 	movb	%dl, (%r10)
    0000081b: 	leaq	0x1(%rsi), %rdx
    0000081f: 	cmpq	%rdx, %rax
    00000822: 	jbe	.Ltmp334 # Offset: 2082
    00000824: 	movzbl	0x1(%rbx), %edx
    00000828: 	movb	%dl, 0x4(%r10)
    0000082c: 	leaq	0x2(%rsi), %rdx
    00000830: 	cmpq	%rdx, %rax
    00000833: 	jbe	.Ltmp334 # Offset: 2099
    00000835: 	movzbl	0x2(%rbx), %edx
    00000839: 	movb	%dl, 0x8(%r10)
    0000083d: 	leaq	0x3(%rsi), %rdx
    00000841: 	cmpq	%rdx, %rax
    00000844: 	jbe	.Ltmp334 # Offset: 2116
    00000846: 	movzbl	0x3(%rbx), %edx
    0000084a: 	movb	%dl, 0xc(%r10)
    0000084e: 	leaq	0x4(%rsi), %rdx
    00000852: 	cmpq	%rdx, %rax
    00000855: 	jbe	.Ltmp334 # Offset: 2133
    00000857: 	movzbl	0x4(%rbx), %edx
    0000085b: 	movb	%dl, 0x10(%r10)
    0000085f: 	leaq	0x5(%rsi), %rdx
    00000863: 	cmpq	%rdx, %rax
    00000866: 	jbe	.Ltmp334 # Offset: 2150
    00000868: 	movzbl	0x5(%rbx), %edx
    0000086c: 	addq	$0x6, %rsi
    00000870: 	movb	%dl, 0x14(%r10)
    00000874: 	cmpq	%rsi, %rax
    00000877: 	jbe	.Ltmp334 # Offset: 2167
    00000879: 	movzbl	0x6(%rbx), %edx
    0000087d: 	movb	%dl, 0x18(%r10)
.Ltmp334:
    00000881: 	movl	-0x60(%rsp), %ebx
    00000885: 	addq	-0x68(%rsp), %rdi
    0000088a: 	addq	%rax, %r14
    0000088d: 	addq	%rax, %r11
    00000890: 	subl	$0x400, -0x5c(%rsp)
    00000898: 	addq	%rax, %r8
    0000089b: 	cmpl	%ebx, -0x74(%rsp)
    0000089f: 	jl	.Ltmp336 # Offset: 2207
.Ltmp318:
    000008a5: 	addq	$0x340, %rsp
    000008ac: 	popq	%rbx
    000008ad: 	popq	%rbp
    000008ae: 	popq	%r12
    000008b0: 	popq	%r13
    000008b2: 	popq	%r14
    000008b4: 	popq	%r15
    000008b6: 	retq # Offset: 2230
    000008b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp319:
    000008c0: 	movslq	-0x5c(%rsp), %rax
    000008c5: 	leal	(,%rax,4), %edx
    000008cc: 	movslq	%edx, %rbx
    000008cf: 	movq	%rbx, -0x68(%rsp)
    000008d4: 	testq	%rax, %rax
    000008d7: 	jne	.Ltmp337 # Offset: 2263
    000008dd: 	jmp	.Ltmp334 # Offset: 2269
    000008df: 	nop # Size: 1
.Ltmp321:
    000008e0: 	movq	-0x70(%rsp), %rbx
    000008e5: 	xorl	%ecx, %ecx
    000008e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp338:
    000008f0: 	movzbl	(%r14,%rcx), %esi
    000008f5: 	movb	%sil, 0x1(%rdi,%rcx,4)
    000008fa: 	addq	$0x1, %rcx
    000008fe: 	cmpq	%rcx, %rax
    00000901: 	ja	.Ltmp338 # Offset: 2305
    00000903: 	movq	%rbx, -0x70(%rsp)
    00000908: 	jmp	.Ltmp324 # Offset: 2312
    0000090d: 	nopl	(%rax) # Size: 3
.Ltmp331:
    00000910: 	xorl	%edx, %edx
    00000912: 	nopw	(%rax,%rax) # Size: 6
.Ltmp339:
    00000918: 	movzbl	(%r8,%rdx), %ecx
    0000091d: 	movb	%cl, 0x3(%rdi,%rdx,4)
    00000921: 	addq	$0x1, %rdx
    00000925: 	cmpq	%rax, %rdx
    00000928: 	jb	.Ltmp339 # Offset: 2344
    0000092a: 	jmp	.Ltmp334 # Offset: 2346
    0000092f: 	nop # Size: 1
.Ltmp326:
    00000930: 	xorl	%ecx, %ecx
    00000932: 	nopw	(%rax,%rax) # Size: 6
.Ltmp340:
    00000938: 	movzbl	(%r11,%rcx), %esi
    0000093d: 	movb	%sil, 0x2(%rdi,%rcx,4)
    00000942: 	addq	$0x1, %rcx
    00000946: 	cmpq	%rcx, %rax
    00000949: 	ja	.Ltmp340 # Offset: 2377
    0000094b: 	jmp	.Ltmp329 # Offset: 2379
.Ltmp327:
    00000950: 	movq	%r11, %r15
    00000953: 	xorl	%esi, %esi
    00000955: 	jmp	.Ltmp341 # Offset: 2389
.Ltmp322:
    0000095a: 	movq	%r14, %rbp
    0000095d: 	xorl	%esi, %esi
    0000095f: 	jmp	.Ltmp342 # Offset: 2399
.Ltmp332:
    00000964: 	movq	%r8, %rbx
    00000967: 	xorl	%esi, %esi
    00000969: 	jmp	.Ltmp343 # Offset: 2409
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version4IhEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version5IhEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0x9b40
  Size        : 0xa08
  MaxSize     : 0xa10
  Offset      : 0x9b40
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version5IhEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x300, %rsp
    00000015: 	movl	%r9d, -0x60(%rsp)
    0000001a: 	movl	%r9d, -0x5c(%rsp)
    0000001f: 	testl	%r9d, %r9d
    00000022: 	jle	.Ltmp344 # Offset: 34
    00000028: 	movb	%sil, -0x69(%rsp)
    0000002d: 	movq	%rdx, %r11
    00000030: 	movq	%rcx, %r10
    00000033: 	xorl	%r14d, %r14d
    00000036: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp354:
    00000040: 	addl	$0x400, %r14d
    00000047: 	cmpl	-0x60(%rsp), %r14d
    0000004c: 	jg	.Ltmp345 # Offset: 76
    00000052: 	movq	$0x1000, -0x68(%rsp)
    0000005b: 	movl	$0x400, %r13d
    00000061: 	movl	$0x400, %ecx
.Ltmp355:
    00000066: 	movslq	%ecx, %rbx
    00000069: 	testl	%ecx, %ecx
    0000006b: 	movl	$0x2, %edx
    00000070: 	movl	%ecx, %r12d
    00000073: 	leaq	-0x2(,%rbx,4), %rax
    0000007b: 	cmovleq	%rdx, %rax
    0000007f: 	addq	%rdi, %rax
    00000082: 	cmpq	%rax, %r11
    00000085: 	movl	$0x1, %eax
    0000008a: 	setae	%sil
    0000008e: 	testl	%ecx, %ecx
    00000090: 	cmovgq	%rbx, %rax
    00000094: 	addq	%r11, %rax
    00000097: 	cmpq	%rax, %rdi
    0000009a: 	setae	%al
    0000009d: 	orb	%sil, %al
    000000a0: 	je	.Ltmp346 # Offset: 160
    000000a6: 	cmpl	$0x11, %ecx
    000000a9: 	jle	.Ltmp346 # Offset: 169
    000000af: 	testl	%ecx, %ecx
    000000b1: 	movl	$0x1, %r15d
    000000b7: 	movzbl	-0x69(%rsp), %edx
    000000bc: 	movq	%r11, %rsi
    000000bf: 	cmovgl	%ecx, %r15d
    000000c3: 	movq	%rdi, %rax
    000000c6: 	movl	%r15d, %r9d
    000000c9: 	shrl	$0x4, %r9d
    000000cd: 	subl	$0x1, %r9d
    000000d1: 	shlq	$0x4, %r9
    000000d5: 	leaq	0x10(%r11,%r9), %rbp
    000000da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp347:
    000000e0: 	movdqu	(%rsi), %xmm0
    000000e4: 	movb	%dl, (%rax)
    000000e6: 	addq	$0x10, %rsi
    000000ea: 	addq	$0x40, %rax
    000000ee: 	movb	%dl, -0x3c(%rax)
    000000f1: 	movd	%xmm0, %r9d
    000000f6: 	movb	%dl, -0x38(%rax)
    000000f9: 	movb	%dl, -0x34(%rax)
    000000fc: 	movb	%dl, -0x30(%rax)
    000000ff: 	movb	%dl, -0x2c(%rax)
    00000102: 	movb	%dl, -0x28(%rax)
    00000105: 	movb	%dl, -0x24(%rax)
    00000108: 	movb	%dl, -0x20(%rax)
    0000010b: 	movb	%dl, -0x1c(%rax)
    0000010e: 	movb	%dl, -0x18(%rax)
    00000111: 	movb	%dl, -0x14(%rax)
    00000114: 	movb	%dl, -0x10(%rax)
    00000117: 	movb	%dl, -0xc(%rax)
    0000011a: 	movb	%dl, -0x8(%rax)
    0000011d: 	movb	%dl, -0x4(%rax)
    00000120: 	movb	%r9b, -0x3f(%rax)
    00000124: 	movaps	%xmm0, 0x2e8(%rsp)
    0000012c: 	movzbl	0x2e9(%rsp), %r9d
    00000135: 	movb	%r9b, -0x3b(%rax)
    00000139: 	movaps	%xmm0, 0x2d8(%rsp)
    00000141: 	movzbl	0x2da(%rsp), %r9d
    0000014a: 	movb	%r9b, -0x37(%rax)
    0000014e: 	movaps	%xmm0, 0x2c8(%rsp)
    00000156: 	movzbl	0x2cb(%rsp), %r9d
    0000015f: 	movb	%r9b, -0x33(%rax)
    00000163: 	movaps	%xmm0, 0x2b8(%rsp)
    0000016b: 	movzbl	0x2bc(%rsp), %r9d
    00000174: 	movb	%r9b, -0x2f(%rax)
    00000178: 	movaps	%xmm0, 0x2a8(%rsp)
    00000180: 	movzbl	0x2ad(%rsp), %r9d
    00000189: 	movb	%r9b, -0x2b(%rax)
    0000018d: 	movaps	%xmm0, 0x298(%rsp)
    00000195: 	movzbl	0x29e(%rsp), %r9d
    0000019e: 	movb	%r9b, -0x27(%rax)
    000001a2: 	movaps	%xmm0, 0x288(%rsp)
    000001aa: 	movzbl	0x28f(%rsp), %r9d
    000001b3: 	movb	%r9b, -0x23(%rax)
    000001b7: 	movaps	%xmm0, 0x278(%rsp)
    000001bf: 	movzbl	0x280(%rsp), %r9d
    000001c8: 	movb	%r9b, -0x1f(%rax)
    000001cc: 	movaps	%xmm0, 0x268(%rsp)
    000001d4: 	movzbl	0x271(%rsp), %r9d
    000001dd: 	movb	%r9b, -0x1b(%rax)
    000001e1: 	movaps	%xmm0, 0x258(%rsp)
    000001e9: 	movzbl	0x262(%rsp), %r9d
    000001f2: 	movb	%r9b, -0x17(%rax)
    000001f6: 	movaps	%xmm0, 0x248(%rsp)
    000001fe: 	movzbl	0x253(%rsp), %r9d
    00000207: 	movb	%r9b, -0x13(%rax)
    0000020b: 	movaps	%xmm0, 0x238(%rsp)
    00000213: 	movzbl	0x244(%rsp), %r9d
    0000021c: 	movb	%r9b, -0xf(%rax)
    00000220: 	movaps	%xmm0, 0x228(%rsp)
    00000228: 	movzbl	0x235(%rsp), %r9d
    00000231: 	movb	%r9b, -0xb(%rax)
    00000235: 	movaps	%xmm0, 0x218(%rsp)
    0000023d: 	movzbl	0x226(%rsp), %r9d
    00000246: 	movb	%r9b, -0x7(%rax)
    0000024a: 	movaps	%xmm0, 0x208(%rsp)
    00000252: 	movzbl	0x217(%rsp), %r9d
    0000025b: 	movb	%r9b, -0x3(%rax)
    0000025f: 	cmpq	%rbp, %rsi
    00000262: 	jne	.Ltmp347 # Offset: 610
    00000268: 	movl	%r15d, %eax
    0000026b: 	movb	%dl, -0x69(%rsp)
    0000026f: 	andl	$-0x10, %eax
    00000272: 	andl	$0xf, %r15d
    00000276: 	je	.Ltmp348 # Offset: 630
    0000027c: 	leal	(,%rax,4), %esi
    00000283: 	movl	%eax, %ebp
    00000285: 	movslq	%esi, %r9
    00000288: 	movb	%dl, (%rdi,%r9)
    0000028c: 	movzbl	(%r11,%rbp), %ebp
    00000291: 	movb	%bpl, 0x1(%rdi,%r9)
    00000296: 	leal	0x1(%rax), %r9d
    0000029a: 	cmpl	%r9d, %ecx
    0000029d: 	jle	.Ltmp348 # Offset: 669
    000002a3: 	leal	0x4(%rsi), %ebp
    000002a6: 	movslq	%r9d, %r9
    000002a9: 	movslq	%ebp, %rbp
    000002ac: 	movb	%dl, (%rdi,%rbp)
    000002af: 	movzbl	(%r11,%r9), %r9d
    000002b4: 	movb	%r9b, 0x1(%rdi,%rbp)
    000002b9: 	leal	0x2(%rax), %r9d
    000002bd: 	cmpl	%r9d, %ecx
    000002c0: 	jle	.Ltmp348 # Offset: 704
    000002c6: 	leal	0x8(%rsi), %ebp
    000002c9: 	movslq	%r9d, %r9
    000002cc: 	movslq	%ebp, %rbp
    000002cf: 	movb	%dl, (%rdi,%rbp)
    000002d2: 	movzbl	(%r11,%r9), %r9d
    000002d7: 	movb	%r9b, 0x1(%rdi,%rbp)
    000002dc: 	leal	0x3(%rax), %r9d
    000002e0: 	cmpl	%r9d, %ecx
    000002e3: 	jle	.Ltmp348 # Offset: 739
    000002e9: 	leal	0xc(%rsi), %ebp
    000002ec: 	movslq	%r9d, %r9
    000002ef: 	movslq	%ebp, %rbp
    000002f2: 	movb	%dl, (%rdi,%rbp)
    000002f5: 	movzbl	(%r11,%r9), %r9d
    000002fa: 	movb	%r9b, 0x1(%rdi,%rbp)
    000002ff: 	leal	0x4(%rax), %r9d
    00000303: 	cmpl	%r9d, %ecx
    00000306: 	jle	.Ltmp348 # Offset: 774
    0000030c: 	leal	0x10(%rsi), %ebp
    0000030f: 	movslq	%r9d, %r9
    00000312: 	movslq	%ebp, %rbp
    00000315: 	movb	%dl, (%rdi,%rbp)
    00000318: 	movzbl	(%r11,%r9), %r9d
    0000031d: 	movb	%r9b, 0x1(%rdi,%rbp)
    00000322: 	leal	0x5(%rax), %r9d
    00000326: 	cmpl	%r9d, %ecx
    00000329: 	jle	.Ltmp348 # Offset: 809
    0000032f: 	leal	0x14(%rsi), %ebp
    00000332: 	movslq	%r9d, %r9
    00000335: 	movslq	%ebp, %rbp
    00000338: 	movb	%dl, (%rdi,%rbp)
    0000033b: 	movzbl	(%r11,%r9), %r9d
    00000340: 	movb	%r9b, 0x1(%rdi,%rbp)
    00000345: 	leal	0x6(%rax), %r9d
    00000349: 	cmpl	%r9d, %ecx
    0000034c: 	jle	.Ltmp348 # Offset: 844
    00000352: 	leal	0x18(%rsi), %ebp
    00000355: 	movslq	%r9d, %r9
    00000358: 	movslq	%ebp, %rbp
    0000035b: 	movb	%dl, (%rdi,%rbp)
    0000035e: 	movzbl	(%r11,%r9), %r9d
    00000363: 	movb	%r9b, 0x1(%rdi,%rbp)
    00000368: 	leal	0x7(%rax), %r9d
    0000036c: 	cmpl	%r9d, %ecx
    0000036f: 	jle	.Ltmp348 # Offset: 879
    00000375: 	leal	0x1c(%rsi), %ebp
    00000378: 	movslq	%r9d, %r9
    0000037b: 	movslq	%ebp, %rbp
    0000037e: 	movb	%dl, (%rdi,%rbp)
    00000381: 	movzbl	(%r11,%r9), %r9d
    00000386: 	movb	%r9b, 0x1(%rdi,%rbp)
    0000038b: 	leal	0x8(%rax), %r9d
    0000038f: 	cmpl	%r9d, %ecx
    00000392: 	jle	.Ltmp348 # Offset: 914
    00000398: 	leal	0x20(%rsi), %ebp
    0000039b: 	movslq	%r9d, %r9
    0000039e: 	movslq	%ebp, %rbp
    000003a1: 	movb	%dl, (%rdi,%rbp)
    000003a4: 	movzbl	(%r11,%r9), %r9d
    000003a9: 	movb	%r9b, 0x1(%rdi,%rbp)
    000003ae: 	leal	0x9(%rax), %r9d
    000003b2: 	cmpl	%r9d, %ecx
    000003b5: 	jle	.Ltmp348 # Offset: 949
    000003bb: 	leal	0x24(%rsi), %ebp
    000003be: 	movslq	%r9d, %r9
    000003c1: 	movslq	%ebp, %rbp
    000003c4: 	movb	%dl, (%rdi,%rbp)
    000003c7: 	movzbl	(%r11,%r9), %r9d
    000003cc: 	movb	%r9b, 0x1(%rdi,%rbp)
    000003d1: 	leal	0xa(%rax), %r9d
    000003d5: 	cmpl	%r9d, %ecx
    000003d8: 	jle	.Ltmp348 # Offset: 984
    000003de: 	leal	0x28(%rsi), %ebp
    000003e1: 	movslq	%r9d, %r9
    000003e4: 	movslq	%ebp, %rbp
    000003e7: 	movb	%dl, (%rdi,%rbp)
    000003ea: 	movzbl	(%r11,%r9), %r9d
    000003ef: 	movb	%r9b, 0x1(%rdi,%rbp)
    000003f4: 	leal	0xb(%rax), %r9d
    000003f8: 	cmpl	%r9d, %ecx
    000003fb: 	jle	.Ltmp348 # Offset: 1019
    000003fd: 	leal	0x2c(%rsi), %ebp
    00000400: 	movslq	%r9d, %r9
    00000403: 	movslq	%ebp, %rbp
    00000406: 	movb	%dl, (%rdi,%rbp)
    00000409: 	movzbl	(%r11,%r9), %r9d
    0000040e: 	movb	%r9b, 0x1(%rdi,%rbp)
    00000413: 	leal	0xc(%rax), %r9d
    00000417: 	cmpl	%r9d, %ecx
    0000041a: 	jle	.Ltmp348 # Offset: 1050
    0000041c: 	leal	0x30(%rsi), %ebp
    0000041f: 	movslq	%r9d, %r9
    00000422: 	movslq	%ebp, %rbp
    00000425: 	movb	%dl, (%rdi,%rbp)
    00000428: 	movzbl	(%r11,%r9), %r9d
    0000042d: 	movb	%r9b, 0x1(%rdi,%rbp)
    00000432: 	leal	0xd(%rax), %r9d
    00000436: 	cmpl	%r9d, %ecx
    00000439: 	jle	.Ltmp348 # Offset: 1081
    0000043b: 	leal	0x34(%rsi), %ebp
    0000043e: 	movslq	%r9d, %r9
    00000441: 	addl	$0xe, %eax
    00000444: 	movslq	%ebp, %rbp
    00000447: 	movb	%dl, (%rdi,%rbp)
    0000044a: 	movzbl	(%r11,%r9), %r9d
    0000044f: 	movb	%r9b, 0x1(%rdi,%rbp)
    00000454: 	cmpl	%eax, %ecx
    00000456: 	jle	.Ltmp348 # Offset: 1110
    00000458: 	addl	$0x38, %esi
    0000045b: 	cltq
    0000045d: 	movslq	%esi, %rsi
    00000460: 	movb	%dl, (%rdi,%rsi)
    00000463: 	movzbl	(%r11,%rax), %eax
    00000468: 	movb	%al, 0x1(%rdi,%rsi)
    0000046c: 	nopl	(%rax) # Size: 4
.Ltmp348:
    00000470: 	leaq	(%r8,%rbx), %rsi
    00000474: 	leaq	0x2(%rdi), %rax
    00000478: 	leaq	(%rdi,%rbx,4), %r9
    0000047c: 	cmpq	%rsi, %rax
    0000047f: 	leal	-0x1(%rcx), %ebp
    00000482: 	setae	%r15b
    00000486: 	cmpq	%r8, %r9
    00000489: 	setbe	%sil
    0000048d: 	addq	%r10, %rbx
    00000490: 	orl	%r15d, %esi
    00000493: 	cmpq	%rbx, %rax
    00000496: 	setae	%bl
    00000499: 	cmpq	%r10, %r9
    0000049c: 	setbe	%r9b
    000004a0: 	orl	%r9d, %ebx
    000004a3: 	testb	%bl, %sil
    000004a6: 	je	.Ltmp349 # Offset: 1190
    000004ac: 	cmpl	$0x6, %ebp
    000004af: 	jbe	.Ltmp349 # Offset: 1199
    000004b5: 	cmpl	$0xe, %ebp
    000004b8: 	jbe	.Ltmp350 # Offset: 1208
    000004be: 	movl	%ecx, %ebx
    000004c0: 	movzbl	-0x69(%rsp), %edx
    000004c5: 	xorl	%esi, %esi
    000004c7: 	shrl	$0x4, %ebx
    000004ca: 	shlq	$0x4, %rbx
    000004ce: 	nop # Size: 2
.Ltmp351:
    000004d0: 	movdqu	(%r10,%rsi), %xmm1
    000004d6: 	movdqu	(%r8,%rsi), %xmm0
    000004dc: 	addq	$0x10, %rsi
    000004e0: 	addq	$0x40, %rax
    000004e4: 	movd	%xmm1, %r9d
    000004e9: 	movb	%r9b, -0x40(%rax)
    000004ed: 	movaps	%xmm1, 0x1f8(%rsp)
    000004f5: 	movzbl	0x1f9(%rsp), %r9d
    000004fe: 	movb	%r9b, -0x3c(%rax)
    00000502: 	movaps	%xmm1, 0x1e8(%rsp)
    0000050a: 	movzbl	0x1ea(%rsp), %r9d
    00000513: 	movb	%r9b, -0x38(%rax)
    00000517: 	movaps	%xmm1, 0x1d8(%rsp)
    0000051f: 	movzbl	0x1db(%rsp), %r9d
    00000528: 	movb	%r9b, -0x34(%rax)
    0000052c: 	movaps	%xmm1, 0x1c8(%rsp)
    00000534: 	movzbl	0x1cc(%rsp), %r9d
    0000053d: 	movb	%r9b, -0x30(%rax)
    00000541: 	movaps	%xmm1, 0x1b8(%rsp)
    00000549: 	movzbl	0x1bd(%rsp), %r9d
    00000552: 	movb	%r9b, -0x2c(%rax)
    00000556: 	movaps	%xmm1, 0x1a8(%rsp)
    0000055e: 	movzbl	0x1ae(%rsp), %r9d
    00000567: 	movb	%r9b, -0x28(%rax)
    0000056b: 	movaps	%xmm1, 0x198(%rsp)
    00000573: 	movzbl	0x19f(%rsp), %r9d
    0000057c: 	movb	%r9b, -0x24(%rax)
    00000580: 	movaps	%xmm1, 0x188(%rsp)
    00000588: 	movzbl	0x190(%rsp), %r9d
    00000591: 	movb	%r9b, -0x20(%rax)
    00000595: 	movaps	%xmm1, 0x178(%rsp)
    0000059d: 	movzbl	0x181(%rsp), %r9d
    000005a6: 	movb	%r9b, -0x1c(%rax)
    000005aa: 	movaps	%xmm1, 0x168(%rsp)
    000005b2: 	movzbl	0x172(%rsp), %r9d
    000005bb: 	movb	%r9b, -0x18(%rax)
    000005bf: 	movaps	%xmm1, 0x158(%rsp)
    000005c7: 	movzbl	0x163(%rsp), %r9d
    000005d0: 	movb	%r9b, -0x14(%rax)
    000005d4: 	movaps	%xmm1, 0x148(%rsp)
    000005dc: 	movzbl	0x154(%rsp), %r9d
    000005e5: 	movb	%r9b, -0x10(%rax)
    000005e9: 	movaps	%xmm1, 0x138(%rsp)
    000005f1: 	movzbl	0x145(%rsp), %r9d
    000005fa: 	movb	%r9b, -0xc(%rax)
    000005fe: 	movaps	%xmm1, 0x128(%rsp)
    00000606: 	movzbl	0x136(%rsp), %r9d
    0000060f: 	movb	%r9b, -0x8(%rax)
    00000613: 	movaps	%xmm1, 0x118(%rsp)
    0000061b: 	movzbl	0x127(%rsp), %r9d
    00000624: 	movb	%r9b, -0x4(%rax)
    00000628: 	movd	%xmm0, %r9d
    0000062d: 	movb	%r9b, -0x3f(%rax)
    00000631: 	movaps	%xmm0, 0x108(%rsp)
    00000639: 	movzbl	0x109(%rsp), %r9d
    00000642: 	movb	%r9b, -0x3b(%rax)
    00000646: 	movaps	%xmm0, 0xf8(%rsp)
    0000064e: 	movzbl	0xfa(%rsp), %r9d
    00000657: 	movb	%r9b, -0x37(%rax)
    0000065b: 	movaps	%xmm0, 0xe8(%rsp)
    00000663: 	movzbl	0xeb(%rsp), %r9d
    0000066c: 	movb	%r9b, -0x33(%rax)
    00000670: 	movaps	%xmm0, 0xd8(%rsp)
    00000678: 	movzbl	0xdc(%rsp), %r9d
    00000681: 	movb	%r9b, -0x2f(%rax)
    00000685: 	movaps	%xmm0, 0xc8(%rsp)
    0000068d: 	movzbl	0xcd(%rsp), %r9d
    00000696: 	movb	%r9b, -0x2b(%rax)
    0000069a: 	movaps	%xmm0, 0xb8(%rsp)
    000006a2: 	movzbl	0xbe(%rsp), %r9d
    000006ab: 	movb	%r9b, -0x27(%rax)
    000006af: 	movaps	%xmm0, 0xa8(%rsp)
    000006b7: 	movzbl	0xaf(%rsp), %r9d
    000006c0: 	movb	%r9b, -0x23(%rax)
    000006c4: 	movaps	%xmm0, 0x98(%rsp)
    000006cc: 	movzbl	0xa0(%rsp), %r9d
    000006d5: 	movb	%r9b, -0x1f(%rax)
    000006d9: 	movaps	%xmm0, 0x88(%rsp)
    000006e1: 	movzbl	0x91(%rsp), %r9d
    000006ea: 	movb	%r9b, -0x1b(%rax)
    000006ee: 	movaps	%xmm0, 0x78(%rsp)
    000006f3: 	movzbl	0x82(%rsp), %r9d
    000006fc: 	movb	%r9b, -0x17(%rax)
    00000700: 	movaps	%xmm0, 0x68(%rsp)
    00000705: 	movzbl	0x73(%rsp), %r9d
    0000070b: 	movb	%r9b, -0x13(%rax)
    0000070f: 	movaps	%xmm0, 0x58(%rsp)
    00000714: 	movzbl	0x64(%rsp), %r9d
    0000071a: 	movb	%r9b, -0xf(%rax)
    0000071e: 	movaps	%xmm0, 0x48(%rsp)
    00000723: 	movzbl	0x55(%rsp), %r9d
    00000729: 	movb	%r9b, -0xb(%rax)
    0000072d: 	movaps	%xmm0, 0x38(%rsp)
    00000732: 	movzbl	0x46(%rsp), %r9d
    00000738: 	movb	%r9b, -0x7(%rax)
    0000073c: 	movaps	%xmm0, 0x28(%rsp)
    00000741: 	movzbl	0x37(%rsp), %r9d
    00000747: 	movb	%r9b, -0x3(%rax)
    0000074b: 	cmpq	%rsi, %rbx
    0000074e: 	jne	.Ltmp351 # Offset: 1870
    00000754: 	movl	%ecx, %ebx
    00000756: 	movb	%dl, -0x69(%rsp)
    0000075a: 	andl	$-0x10, %ebx
    0000075d: 	movl	%ebx, %r9d
    00000760: 	cmpl	%ecx, %ebx
    00000762: 	je	.Ltmp352 # Offset: 1890
    00000768: 	movl	%ecx, %r12d
    0000076b: 	subl	%ebx, %r12d
    0000076e: 	leal	-0x1(%r12), %eax
    00000773: 	cmpl	$0x6, %eax
    00000776: 	jbe	.Ltmp353 # Offset: 1910
.Ltmp358:
    0000077c: 	movq	(%r10,%rbx), %rsi
    00000780: 	leaq	0x2(%rdi,%rbx,4), %rax
    00000785: 	movq	(%r8,%rbx), %rbx
    00000789: 	movq	%rsi, %rbp
    0000078c: 	movb	%sil, (%rax)
    0000078f: 	movq	%rsi, %rdx
    00000792: 	shrq	$0x10, %rbp
    00000796: 	movb	%bl, 0x1(%rax)
    00000799: 	movb	%bpl, 0x8(%rax)
    0000079d: 	movq	%rsi, %rbp
    000007a0: 	shrq	$0x18, %rbp
    000007a4: 	movb	%bh, 0x5(%rax)
    000007a7: 	movb	%bpl, 0xc(%rax)
    000007ab: 	movq	%rsi, %rbp
    000007ae: 	shrq	$0x20, %rbp
    000007b2: 	movb	%dh, 0x4(%rax)
    000007b5: 	movb	%bpl, 0x10(%rax)
    000007b9: 	movq	%rsi, %rbp
    000007bc: 	shrq	$0x28, %rbp
    000007c0: 	movb	%bpl, 0x14(%rax)
    000007c4: 	movq	%rsi, %rbp
    000007c7: 	shrq	$0x38, %rsi
    000007cb: 	movb	%sil, 0x1c(%rax)
    000007cf: 	movq	%rbx, %rsi
    000007d2: 	shrq	$0x30, %rbp
    000007d6: 	shrq	$0x10, %rsi
    000007da: 	movb	%bpl, 0x18(%rax)
    000007de: 	movb	%sil, 0x9(%rax)
    000007e2: 	movq	%rbx, %rsi
    000007e5: 	shrq	$0x18, %rsi
    000007e9: 	movb	%sil, 0xd(%rax)
    000007ed: 	movq	%rbx, %rsi
    000007f0: 	shrq	$0x20, %rsi
    000007f4: 	movb	%sil, 0x11(%rax)
    000007f8: 	movq	%rbx, %rsi
    000007fb: 	shrq	$0x28, %rsi
    000007ff: 	movb	%sil, 0x15(%rax)
    00000803: 	movq	%rbx, %rsi
    00000806: 	shrq	$0x38, %rbx
    0000080a: 	shrq	$0x30, %rsi
    0000080e: 	movb	%bl, 0x1d(%rax)
    00000811: 	movb	%sil, 0x19(%rax)
    00000815: 	movl	%r12d, %eax
    00000818: 	andl	$-0x8, %eax
    0000081b: 	addl	%eax, %r9d
    0000081e: 	cmpl	%r12d, %eax
    00000821: 	je	.Ltmp352 # Offset: 2081
.Ltmp353:
    00000827: 	movslq	%r9d, %rbx
    0000082a: 	leal	(,%r9,4), %eax
    00000832: 	movzbl	(%r10,%rbx), %ebp
    00000837: 	movslq	%eax, %rsi
    0000083a: 	movb	%bpl, 0x2(%rdi,%rsi)
    0000083f: 	movzbl	(%r8,%rbx), %ebx
    00000844: 	movb	%bl, 0x3(%rdi,%rsi)
    00000848: 	leal	0x1(%r9), %esi
    0000084c: 	cmpl	%ecx, %esi
    0000084e: 	jge	.Ltmp352 # Offset: 2126
    00000854: 	movslq	%esi, %rsi
    00000857: 	leal	0x4(%rax), %ebx
    0000085a: 	movzbl	(%r10,%rsi), %ebp
    0000085f: 	movslq	%ebx, %rbx
    00000862: 	movb	%bpl, 0x2(%rdi,%rbx)
    00000867: 	movzbl	(%r8,%rsi), %esi
    0000086c: 	movb	%sil, 0x3(%rdi,%rbx)
    00000871: 	leal	0x2(%r9), %esi
    00000875: 	cmpl	%esi, %ecx
    00000877: 	jle	.Ltmp352 # Offset: 2167
    0000087d: 	movslq	%esi, %rsi
    00000880: 	leal	0x8(%rax), %ebx
    00000883: 	movzbl	(%r10,%rsi), %ebp
    00000888: 	movslq	%ebx, %rbx
    0000088b: 	movb	%bpl, 0x2(%rdi,%rbx)
    00000890: 	movzbl	(%r8,%rsi), %esi
    00000895: 	movb	%sil, 0x3(%rdi,%rbx)
    0000089a: 	leal	0x3(%r9), %esi
    0000089e: 	cmpl	%esi, %ecx
    000008a0: 	jle	.Ltmp352 # Offset: 2208
    000008a6: 	movslq	%esi, %rsi
    000008a9: 	leal	0xc(%rax), %ebx
    000008ac: 	movzbl	(%r10,%rsi), %ebp
    000008b1: 	movslq	%ebx, %rbx
    000008b4: 	movb	%bpl, 0x2(%rdi,%rbx)
    000008b9: 	movzbl	(%r8,%rsi), %esi
    000008be: 	movb	%sil, 0x3(%rdi,%rbx)
    000008c3: 	leal	0x4(%r9), %esi
    000008c7: 	cmpl	%esi, %ecx
    000008c9: 	jle	.Ltmp352 # Offset: 2249
    000008cb: 	movslq	%esi, %rsi
    000008ce: 	leal	0x10(%rax), %ebx
    000008d1: 	movzbl	(%r10,%rsi), %ebp
    000008d6: 	movslq	%ebx, %rbx
    000008d9: 	movb	%bpl, 0x2(%rdi,%rbx)
    000008de: 	movzbl	(%r8,%rsi), %esi
    000008e3: 	movb	%sil, 0x3(%rdi,%rbx)
    000008e8: 	leal	0x5(%r9), %esi
    000008ec: 	cmpl	%esi, %ecx
    000008ee: 	jle	.Ltmp352 # Offset: 2286
    000008f0: 	movslq	%esi, %rsi
    000008f3: 	leal	0x14(%rax), %ebx
    000008f6: 	addl	$0x6, %r9d
    000008fa: 	movzbl	(%r10,%rsi), %ebp
    000008ff: 	movslq	%ebx, %rbx
    00000902: 	movb	%bpl, 0x2(%rdi,%rbx)
    00000907: 	movzbl	(%r8,%rsi), %esi
    0000090c: 	movb	%sil, 0x3(%rdi,%rbx)
    00000911: 	cmpl	%r9d, %ecx
    00000914: 	jle	.Ltmp352 # Offset: 2324
    00000916: 	movslq	%r9d, %r9
    00000919: 	addl	$0x18, %eax
    0000091c: 	movzbl	(%r10,%r9), %ecx
    00000921: 	cltq
    00000923: 	movb	%cl, 0x2(%rdi,%rax)
    00000927: 	movzbl	(%r8,%r9), %ecx
    0000092c: 	movb	%cl, 0x3(%rdi,%rax)
.Ltmp352:
    00000930: 	addq	-0x68(%rsp), %rdi
    00000935: 	addq	%r13, %r11
    00000938: 	addq	%r13, %r10
    0000093b: 	addq	%r13, %r8
    0000093e: 	subl	$0x400, -0x5c(%rsp)
    00000946: 	cmpl	-0x60(%rsp), %r14d
    0000094b: 	jl	.Ltmp354 # Offset: 2379
.Ltmp344:
    00000951: 	addq	$0x300, %rsp
    00000958: 	popq	%rbx
    00000959: 	popq	%rbp
    0000095a: 	popq	%r12
    0000095c: 	popq	%r13
    0000095e: 	popq	%r14
    00000960: 	popq	%r15
    00000962: 	retq # Offset: 2402
    00000963: 	nopl	(%rax,%rax) # Size: 5
.Ltmp345:
    00000968: 	movslq	-0x5c(%rsp), %r13
    0000096d: 	leal	(,%r13,4), %eax
    00000975: 	movl	%r13d, %ecx
    00000978: 	cltq
    0000097a: 	movq	%rax, -0x68(%rsp)
    0000097f: 	testl	%r13d, %r13d
    00000982: 	jg	.Ltmp355 # Offset: 2434
    00000988: 	jmp	.Ltmp352 # Offset: 2440
    0000098a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp349:
    00000990: 	movzbl	-0x69(%rsp), %edx
    00000995: 	movl	%ecx, %ecx
    00000997: 	xorl	%eax, %eax
    00000999: 	nopl	(%rax) # Size: 7
.Ltmp356:
    000009a0: 	movzbl	(%r10,%rax), %esi
    000009a5: 	movb	%sil, 0x2(%rdi,%rax,4)
    000009aa: 	movzbl	(%r8,%rax), %esi
    000009af: 	movb	%sil, 0x3(%rdi,%rax,4)
    000009b4: 	addq	$0x1, %rax
    000009b8: 	cmpq	%rax, %rcx
    000009bb: 	jne	.Ltmp356 # Offset: 2491
    000009bd: 	movb	%dl, -0x69(%rsp)
    000009c1: 	jmp	.Ltmp352 # Offset: 2497
    000009c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp346:
    000009d0: 	movzbl	-0x69(%rsp), %edx
    000009d5: 	xorl	%eax, %eax
    000009d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp357:
    000009e0: 	movb	%dl, (%rdi,%rax,4)
    000009e3: 	movzbl	(%r11,%rax), %esi
    000009e8: 	movb	%sil, 0x1(%rdi,%rax,4)
    000009ed: 	addq	$0x1, %rax
    000009f1: 	cmpl	%eax, %ecx
    000009f3: 	jg	.Ltmp357 # Offset: 2547
    000009f5: 	movb	%dl, -0x69(%rsp)
    000009f9: 	jmp	.Ltmp348 # Offset: 2553
.Ltmp350:
    000009fe: 	xorl	%ebx, %ebx
    00000a00: 	xorl	%r9d, %r9d
    00000a03: 	jmp	.Ltmp358 # Offset: 2563
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version5IhEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version6IhEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0xa550
  Size        : 0xa89
  MaxSize     : 0xa90
  Offset      : 0xa550
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version6IhEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%esi, %r12d
    0000000f: 	movq	%rdx, %rsi
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x350, %rsp
    0000001b: 	movl	%r9d, -0x50(%rsp)
    00000020: 	movl	%r9d, -0x4c(%rsp)
    00000025: 	movl	$0x0, -0x60(%rsp)
    0000002d: 	testl	%r9d, %r9d
    00000030: 	jle	.Ltmp359 # Offset: 48
    00000036: 	movq	%r8, -0x70(%rsp)
    0000003b: 	movq	%rdi, %rax
    0000003e: 	movq	%rcx, %r13
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp377:
    00000048: 	addl	$0x400, -0x60(%rsp)
    00000050: 	movl	-0x60(%rsp), %ebx
    00000054: 	cmpl	-0x50(%rsp), %ebx
    00000058: 	jg	.Ltmp360 # Offset: 88
    0000005e: 	movq	$0x1000, -0x58(%rsp)
    00000067: 	movl	$0x400, %r11d
    0000006d: 	movl	$0x400, %edx
.Ltmp379:
    00000072: 	movq	-0x70(%rsp), %rbx
    00000077: 	xorl	%ecx, %ecx
    00000079: 	nopl	(%rax) # Size: 7
.Ltmp361:
    00000080: 	movb	%r12b, (%rax,%rcx,4)
    00000084: 	addq	$0x1, %rcx
    00000088: 	cmpl	%ecx, %edx
    0000008a: 	jg	.Ltmp361 # Offset: 138
    0000008c: 	movslq	%edx, %r9
    0000008f: 	movq	%rbx, -0x70(%rsp)
    00000094: 	leal	-0x1(%rdx), %ebx
    00000097: 	leaq	0x1(%rax), %rcx
    0000009b: 	leaq	-0x4(,%r9,4), %r14
    000000a3: 	cmpl	$0x6, %ebx
    000000a6: 	movl	%ebx, -0x5c(%rsp)
    000000aa: 	movl	%edx, %r10d
    000000ad: 	leaq	0x2(%rax,%r14), %rdi
    000000b2: 	seta	-0x61(%rsp)
    000000b7: 	movzbl	-0x61(%rsp), %r15d
    000000bd: 	cmpq	%rdi, %rsi
    000000c0: 	leaq	(%rsi,%r9), %rdi
    000000c4: 	setae	%r8b
    000000c8: 	cmpq	%rdi, %rcx
    000000cb: 	setae	%dil
    000000cf: 	orb	%r8b, %dil
    000000d2: 	je	.Ltmp362 # Offset: 210
    000000d8: 	testb	%r15b, %r15b
    000000db: 	je	.Ltmp362 # Offset: 219
    000000e1: 	cmpl	$0xe, %ebx
    000000e4: 	jbe	.Ltmp363 # Offset: 228
    000000ea: 	movl	%edx, %r8d
    000000ed: 	movq	-0x70(%rsp), %rbx
    000000f2: 	movq	%rsi, %rdi
    000000f5: 	shrl	$0x4, %r8d
    000000f9: 	subl	$0x1, %r8d
    000000fd: 	shlq	$0x4, %r8
    00000101: 	leaq	0x10(%rsi,%r8), %rbp
    00000106: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp364:
    00000110: 	movdqu	(%rdi), %xmm0
    00000114: 	addq	$0x10, %rdi
    00000118: 	addq	$0x40, %rcx
    0000011c: 	movd	%xmm0, %r8d
    00000121: 	movb	%r8b, -0x40(%rcx)
    00000125: 	movaps	%xmm0, 0x338(%rsp)
    0000012d: 	movzbl	0x339(%rsp), %r8d
    00000136: 	movb	%r8b, -0x3c(%rcx)
    0000013a: 	movaps	%xmm0, 0x328(%rsp)
    00000142: 	movzbl	0x32a(%rsp), %r8d
    0000014b: 	movb	%r8b, -0x38(%rcx)
    0000014f: 	movaps	%xmm0, 0x318(%rsp)
    00000157: 	movzbl	0x31b(%rsp), %r8d
    00000160: 	movb	%r8b, -0x34(%rcx)
    00000164: 	movaps	%xmm0, 0x308(%rsp)
    0000016c: 	movzbl	0x30c(%rsp), %r8d
    00000175: 	movb	%r8b, -0x30(%rcx)
    00000179: 	movaps	%xmm0, 0x2f8(%rsp)
    00000181: 	movzbl	0x2fd(%rsp), %r8d
    0000018a: 	movb	%r8b, -0x2c(%rcx)
    0000018e: 	movaps	%xmm0, 0x2e8(%rsp)
    00000196: 	movzbl	0x2ee(%rsp), %r8d
    0000019f: 	movb	%r8b, -0x28(%rcx)
    000001a3: 	movaps	%xmm0, 0x2d8(%rsp)
    000001ab: 	movzbl	0x2df(%rsp), %r8d
    000001b4: 	movb	%r8b, -0x24(%rcx)
    000001b8: 	movaps	%xmm0, 0x2c8(%rsp)
    000001c0: 	movzbl	0x2d0(%rsp), %r8d
    000001c9: 	movb	%r8b, -0x20(%rcx)
    000001cd: 	movaps	%xmm0, 0x2b8(%rsp)
    000001d5: 	movzbl	0x2c1(%rsp), %r8d
    000001de: 	movb	%r8b, -0x1c(%rcx)
    000001e2: 	movaps	%xmm0, 0x2a8(%rsp)
    000001ea: 	movzbl	0x2b2(%rsp), %r8d
    000001f3: 	movb	%r8b, -0x18(%rcx)
    000001f7: 	movaps	%xmm0, 0x298(%rsp)
    000001ff: 	movzbl	0x2a3(%rsp), %r8d
    00000208: 	movb	%r8b, -0x14(%rcx)
    0000020c: 	movaps	%xmm0, 0x288(%rsp)
    00000214: 	movzbl	0x294(%rsp), %r8d
    0000021d: 	movb	%r8b, -0x10(%rcx)
    00000221: 	movaps	%xmm0, 0x278(%rsp)
    00000229: 	movzbl	0x285(%rsp), %r8d
    00000232: 	movb	%r8b, -0xc(%rcx)
    00000236: 	movaps	%xmm0, 0x268(%rsp)
    0000023e: 	movzbl	0x276(%rsp), %r8d
    00000247: 	movb	%r8b, -0x8(%rcx)
    0000024b: 	movaps	%xmm0, 0x258(%rsp)
    00000253: 	movzbl	0x267(%rsp), %r8d
    0000025c: 	movb	%r8b, -0x4(%rcx)
    00000260: 	cmpq	%rbp, %rdi
    00000263: 	jne	.Ltmp364 # Offset: 611
    00000269: 	movl	%edx, %ecx
    0000026b: 	movq	%rbx, -0x70(%rsp)
    00000270: 	andl	$-0x10, %ecx
    00000273: 	movl	%ecx, %r8d
    00000276: 	cmpl	%ecx, %edx
    00000278: 	je	.Ltmp365 # Offset: 632
    0000027e: 	movl	%edx, %ebp
    00000280: 	subl	%ecx, %ebp
    00000282: 	leal	-0x1(%rbp), %edi
    00000285: 	cmpl	$0x6, %edi
    00000288: 	jbe	.Ltmp366 # Offset: 648
.Ltmp383:
    0000028a: 	leaq	0x1(%rax,%rcx,4), %rdi
    0000028f: 	movq	(%rsi,%rcx), %rcx
    00000293: 	movq	%rcx, %r15
    00000296: 	movb	%cl, (%rdi)
    00000298: 	shrq	$0x10, %r15
    0000029c: 	movb	%ch, 0x4(%rdi)
    0000029f: 	movb	%r15b, 0x8(%rdi)
    000002a3: 	movq	%rcx, %r15
    000002a6: 	shrq	$0x18, %r15
    000002aa: 	movb	%r15b, 0xc(%rdi)
    000002ae: 	movq	%rcx, %r15
    000002b1: 	shrq	$0x20, %r15
    000002b5: 	movb	%r15b, 0x10(%rdi)
    000002b9: 	movq	%rcx, %r15
    000002bc: 	shrq	$0x28, %r15
    000002c0: 	movb	%r15b, 0x14(%rdi)
    000002c4: 	movq	%rcx, %r15
    000002c7: 	shrq	$0x38, %rcx
    000002cb: 	movb	%cl, 0x1c(%rdi)
    000002ce: 	movl	%ebp, %ecx
    000002d0: 	shrq	$0x30, %r15
    000002d4: 	andl	$-0x8, %ecx
    000002d7: 	movb	%r15b, 0x18(%rdi)
    000002db: 	addl	%ecx, %r8d
    000002de: 	cmpl	%ebp, %ecx
    000002e0: 	je	.Ltmp365 # Offset: 736
.Ltmp366:
    000002e6: 	movslq	%r8d, %rdi
    000002e9: 	leal	(,%r8,4), %ecx
    000002f1: 	movzbl	(%rsi,%rdi), %ebp
    000002f5: 	leal	0x1(%rcx), %edi
    000002f8: 	movslq	%edi, %rdi
    000002fb: 	movb	%bpl, (%rax,%rdi)
    000002ff: 	leal	0x1(%r8), %edi
    00000303: 	cmpl	%edi, %edx
    00000305: 	jle	.Ltmp365 # Offset: 773
    0000030b: 	movslq	%edi, %rdi
    0000030e: 	movzbl	(%rsi,%rdi), %ebp
    00000312: 	leal	0x5(%rcx), %edi
    00000315: 	movslq	%edi, %rdi
    00000318: 	movb	%bpl, (%rax,%rdi)
    0000031c: 	leal	0x2(%r8), %edi
    00000320: 	cmpl	%edi, %edx
    00000322: 	jle	.Ltmp365 # Offset: 802
    00000324: 	movslq	%edi, %rdi
    00000327: 	movzbl	(%rsi,%rdi), %ebp
    0000032b: 	leal	0x9(%rcx), %edi
    0000032e: 	movslq	%edi, %rdi
    00000331: 	movb	%bpl, (%rax,%rdi)
    00000335: 	leal	0x3(%r8), %edi
    00000339: 	cmpl	%edi, %edx
    0000033b: 	jle	.Ltmp365 # Offset: 827
    0000033d: 	movslq	%edi, %rdi
    00000340: 	movzbl	(%rsi,%rdi), %ebp
    00000344: 	leal	0xd(%rcx), %edi
    00000347: 	movslq	%edi, %rdi
    0000034a: 	movb	%bpl, (%rax,%rdi)
    0000034e: 	leal	0x4(%r8), %edi
    00000352: 	cmpl	%edi, %edx
    00000354: 	jle	.Ltmp365 # Offset: 852
    00000356: 	movslq	%edi, %rdi
    00000359: 	movzbl	(%rsi,%rdi), %ebp
    0000035d: 	leal	0x11(%rcx), %edi
    00000360: 	movslq	%edi, %rdi
    00000363: 	movb	%bpl, (%rax,%rdi)
    00000367: 	leal	0x5(%r8), %edi
    0000036b: 	cmpl	%edi, %edx
    0000036d: 	jle	.Ltmp365 # Offset: 877
    0000036f: 	movslq	%edi, %rdi
    00000372: 	addl	$0x6, %r8d
    00000376: 	movzbl	(%rsi,%rdi), %ebp
    0000037a: 	leal	0x15(%rcx), %edi
    0000037d: 	movslq	%edi, %rdi
    00000380: 	movb	%bpl, (%rax,%rdi)
    00000384: 	cmpl	%r8d, %edx
    00000387: 	jle	.Ltmp365 # Offset: 903
    00000389: 	movslq	%r8d, %r8
    0000038c: 	addl	$0x19, %ecx
    0000038f: 	movzbl	(%rsi,%r8), %edi
    00000394: 	movslq	%ecx, %rcx
    00000397: 	movb	%dil, (%rax,%rcx)
.Ltmp365:
    0000039b: 	leaq	0x3(%rax,%r14), %rdi
    000003a0: 	leaq	0x2(%rax), %rcx
    000003a4: 	cmpq	%rdi, %r13
    000003a7: 	leaq	(%r13,%r9), %rdi
    000003ac: 	setae	%r8b
    000003b0: 	cmpq	%rdi, %rcx
    000003b3: 	setae	%dil
    000003b7: 	orb	%r8b, %dil
    000003ba: 	je	.Ltmp367 # Offset: 954
    000003c0: 	cmpb	$0x0, -0x61(%rsp)
    000003c5: 	je	.Ltmp367 # Offset: 965
    000003cb: 	cmpl	$0xe, -0x5c(%rsp)
    000003d0: 	jbe	.Ltmp368 # Offset: 976
    000003d6: 	movl	%edx, %r8d
    000003d9: 	movq	-0x70(%rsp), %rbx
    000003de: 	movq	%r13, %rdi
    000003e1: 	shrl	$0x4, %r8d
    000003e5: 	subl	$0x1, %r8d
    000003e9: 	shlq	$0x4, %r8
    000003ed: 	leaq	0x10(%r13,%r8), %rbp
    000003f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp369:
    000003f8: 	movdqu	(%rdi), %xmm0
    000003fc: 	addq	$0x10, %rdi
    00000400: 	addq	$0x40, %rcx
    00000404: 	movd	%xmm0, %r8d
    00000409: 	movb	%r8b, -0x40(%rcx)
    0000040d: 	movaps	%xmm0, 0x208(%rsp)
    00000415: 	movzbl	0x209(%rsp), %r8d
    0000041e: 	movb	%r8b, -0x3c(%rcx)
    00000422: 	movaps	%xmm0, 0x1f8(%rsp)
    0000042a: 	movzbl	0x1fa(%rsp), %r8d
    00000433: 	movb	%r8b, -0x38(%rcx)
    00000437: 	movaps	%xmm0, 0x1e8(%rsp)
    0000043f: 	movzbl	0x1eb(%rsp), %r8d
    00000448: 	movb	%r8b, -0x34(%rcx)
    0000044c: 	movaps	%xmm0, 0x1d8(%rsp)
    00000454: 	movzbl	0x1dc(%rsp), %r8d
    0000045d: 	movb	%r8b, -0x30(%rcx)
    00000461: 	movaps	%xmm0, 0x1c8(%rsp)
    00000469: 	movzbl	0x1cd(%rsp), %r8d
    00000472: 	movb	%r8b, -0x2c(%rcx)
    00000476: 	movaps	%xmm0, 0x1b8(%rsp)
    0000047e: 	movzbl	0x1be(%rsp), %r8d
    00000487: 	movb	%r8b, -0x28(%rcx)
    0000048b: 	movaps	%xmm0, 0x1a8(%rsp)
    00000493: 	movzbl	0x1af(%rsp), %r8d
    0000049c: 	movb	%r8b, -0x24(%rcx)
    000004a0: 	movaps	%xmm0, 0x198(%rsp)
    000004a8: 	movzbl	0x1a0(%rsp), %r8d
    000004b1: 	movb	%r8b, -0x20(%rcx)
    000004b5: 	movaps	%xmm0, 0x188(%rsp)
    000004bd: 	movzbl	0x191(%rsp), %r8d
    000004c6: 	movb	%r8b, -0x1c(%rcx)
    000004ca: 	movaps	%xmm0, 0x178(%rsp)
    000004d2: 	movzbl	0x182(%rsp), %r8d
    000004db: 	movb	%r8b, -0x18(%rcx)
    000004df: 	movaps	%xmm0, 0x168(%rsp)
    000004e7: 	movzbl	0x173(%rsp), %r8d
    000004f0: 	movb	%r8b, -0x14(%rcx)
    000004f4: 	movaps	%xmm0, 0x158(%rsp)
    000004fc: 	movzbl	0x164(%rsp), %r8d
    00000505: 	movb	%r8b, -0x10(%rcx)
    00000509: 	movaps	%xmm0, 0x148(%rsp)
    00000511: 	movzbl	0x155(%rsp), %r8d
    0000051a: 	movb	%r8b, -0xc(%rcx)
    0000051e: 	movaps	%xmm0, 0x138(%rsp)
    00000526: 	movzbl	0x146(%rsp), %r8d
    0000052f: 	movb	%r8b, -0x8(%rcx)
    00000533: 	movaps	%xmm0, 0x128(%rsp)
    0000053b: 	movzbl	0x137(%rsp), %r8d
    00000544: 	movb	%r8b, -0x4(%rcx)
    00000548: 	cmpq	%rdi, %rbp
    0000054b: 	jne	.Ltmp369 # Offset: 1355
    00000551: 	movl	%edx, %ecx
    00000553: 	movq	%rbx, -0x70(%rsp)
    00000558: 	andl	$-0x10, %ecx
    0000055b: 	movl	%ecx, %r8d
    0000055e: 	cmpl	%edx, %ecx
    00000560: 	je	.Ltmp370 # Offset: 1376
    00000566: 	movl	%edx, %ebp
    00000568: 	subl	%ecx, %ebp
    0000056a: 	leal	-0x1(%rbp), %edi
    0000056d: 	cmpl	$0x6, %edi
    00000570: 	jbe	.Ltmp371 # Offset: 1392
.Ltmp385:
    00000572: 	leaq	0x2(%rax,%rcx,4), %rdi
    00000577: 	movq	(%r13,%rcx), %rcx
    0000057c: 	movq	%rcx, %r14
    0000057f: 	movb	%cl, (%rdi)
    00000581: 	shrq	$0x10, %r14
    00000585: 	movb	%ch, 0x4(%rdi)
    00000588: 	movb	%r14b, 0x8(%rdi)
    0000058c: 	movq	%rcx, %r14
    0000058f: 	shrq	$0x18, %r14
    00000593: 	movb	%r14b, 0xc(%rdi)
    00000597: 	movq	%rcx, %r14
    0000059a: 	shrq	$0x20, %r14
    0000059e: 	movb	%r14b, 0x10(%rdi)
    000005a2: 	movq	%rcx, %r14
    000005a5: 	shrq	$0x28, %r14
    000005a9: 	movb	%r14b, 0x14(%rdi)
    000005ad: 	movq	%rcx, %r14
    000005b0: 	shrq	$0x38, %rcx
    000005b4: 	movb	%cl, 0x1c(%rdi)
    000005b7: 	movl	%ebp, %ecx
    000005b9: 	shrq	$0x30, %r14
    000005bd: 	andl	$-0x8, %ecx
    000005c0: 	movb	%r14b, 0x18(%rdi)
    000005c4: 	addl	%ecx, %r8d
    000005c7: 	cmpl	%ebp, %ecx
    000005c9: 	je	.Ltmp370 # Offset: 1481
.Ltmp371:
    000005cf: 	movslq	%r8d, %rdi
    000005d2: 	leal	(,%r8,4), %ecx
    000005da: 	movzbl	(%r13,%rdi), %ebp
    000005e0: 	leal	0x2(%rcx), %edi
    000005e3: 	movslq	%edi, %rdi
    000005e6: 	movb	%bpl, (%rax,%rdi)
    000005ea: 	leal	0x1(%r8), %edi
    000005ee: 	cmpl	%edi, %edx
    000005f0: 	jle	.Ltmp370 # Offset: 1520
    000005f6: 	movslq	%edi, %rdi
    000005f9: 	movzbl	(%r13,%rdi), %ebp
    000005ff: 	leal	0x6(%rcx), %edi
    00000602: 	movslq	%edi, %rdi
    00000605: 	movb	%bpl, (%rax,%rdi)
    00000609: 	leal	0x2(%r8), %edi
    0000060d: 	cmpl	%edi, %edx
    0000060f: 	jle	.Ltmp370 # Offset: 1551
    00000615: 	movslq	%edi, %rdi
    00000618: 	movzbl	(%r13,%rdi), %ebp
    0000061e: 	leal	0xa(%rcx), %edi
    00000621: 	movslq	%edi, %rdi
    00000624: 	movb	%bpl, (%rax,%rdi)
    00000628: 	leal	0x3(%r8), %edi
    0000062c: 	cmpl	%edi, %edx
    0000062e: 	jle	.Ltmp370 # Offset: 1582
    00000630: 	movslq	%edi, %rdi
    00000633: 	movzbl	(%r13,%rdi), %ebp
    00000639: 	leal	0xe(%rcx), %edi
    0000063c: 	movslq	%edi, %rdi
    0000063f: 	movb	%bpl, (%rax,%rdi)
    00000643: 	leal	0x4(%r8), %edi
    00000647: 	cmpl	%edi, %edx
    00000649: 	jle	.Ltmp370 # Offset: 1609
    0000064b: 	movslq	%edi, %rdi
    0000064e: 	movzbl	(%r13,%rdi), %ebp
    00000654: 	leal	0x12(%rcx), %edi
    00000657: 	movslq	%edi, %rdi
    0000065a: 	movb	%bpl, (%rax,%rdi)
    0000065e: 	leal	0x5(%r8), %edi
    00000662: 	cmpl	%edi, %edx
    00000664: 	jle	.Ltmp370 # Offset: 1636
    00000666: 	movslq	%edi, %rdi
    00000669: 	addl	$0x6, %r8d
    0000066d: 	movzbl	(%r13,%rdi), %ebp
    00000673: 	leal	0x16(%rcx), %edi
    00000676: 	movslq	%edi, %rdi
    00000679: 	movb	%bpl, (%rax,%rdi)
    0000067d: 	cmpl	%r8d, %edx
    00000680: 	jle	.Ltmp370 # Offset: 1664
    00000682: 	movslq	%r8d, %r8
    00000685: 	addl	$0x1a, %ecx
    00000688: 	movzbl	(%r13,%r8), %edi
    0000068e: 	movslq	%ecx, %rcx
    00000691: 	movb	%dil, (%rax,%rcx)
.Ltmp370:
    00000695: 	movq	-0x70(%rsp), %rbx
    0000069a: 	leaq	(%rax,%r9,4), %rdi
    0000069e: 	leaq	0x3(%rax), %rcx
    000006a2: 	cmpq	%rdi, %rbx
    000006a5: 	setae	%dil
    000006a9: 	addq	%rbx, %r9
    000006ac: 	cmpq	%r9, %rcx
    000006af: 	setae	%r8b
    000006b3: 	orb	%dil, %r8b
    000006b6: 	je	.Ltmp372 # Offset: 1718
    000006bc: 	cmpb	$0x0, -0x61(%rsp)
    000006c1: 	je	.Ltmp372 # Offset: 1729
    000006c7: 	cmpl	$0xe, -0x5c(%rsp)
    000006cc: 	jbe	.Ltmp373 # Offset: 1740
    000006d2: 	movl	%edx, %r8d
    000006d5: 	movq	%rbx, %rdi
    000006d8: 	shrl	$0x4, %r8d
    000006dc: 	subl	$0x1, %r8d
    000006e0: 	shlq	$0x4, %r8
    000006e4: 	leaq	0x10(%rbx,%r8), %r9
    000006e9: 	nopl	(%rax) # Size: 7
.Ltmp374:
    000006f0: 	movdqu	(%rdi), %xmm0
    000006f4: 	addq	$0x10, %rdi
    000006f8: 	addq	$0x40, %rcx
    000006fc: 	movd	%xmm0, %r8d
    00000701: 	movb	%r8b, -0x40(%rcx)
    00000705: 	movaps	%xmm0, 0xd8(%rsp)
    0000070d: 	movzbl	0xd9(%rsp), %r8d
    00000716: 	movb	%r8b, -0x3c(%rcx)
    0000071a: 	movaps	%xmm0, 0xc8(%rsp)
    00000722: 	movzbl	0xca(%rsp), %r8d
    0000072b: 	movb	%r8b, -0x38(%rcx)
    0000072f: 	movaps	%xmm0, 0xb8(%rsp)
    00000737: 	movzbl	0xbb(%rsp), %r8d
    00000740: 	movb	%r8b, -0x34(%rcx)
    00000744: 	movaps	%xmm0, 0xa8(%rsp)
    0000074c: 	movzbl	0xac(%rsp), %r8d
    00000755: 	movb	%r8b, -0x30(%rcx)
    00000759: 	movaps	%xmm0, 0x98(%rsp)
    00000761: 	movzbl	0x9d(%rsp), %r8d
    0000076a: 	movb	%r8b, -0x2c(%rcx)
    0000076e: 	movaps	%xmm0, 0x88(%rsp)
    00000776: 	movzbl	0x8e(%rsp), %r8d
    0000077f: 	movb	%r8b, -0x28(%rcx)
    00000783: 	movaps	%xmm0, 0x78(%rsp)
    00000788: 	movzbl	0x7f(%rsp), %r8d
    0000078e: 	movb	%r8b, -0x24(%rcx)
    00000792: 	movaps	%xmm0, 0x68(%rsp)
    00000797: 	movzbl	0x70(%rsp), %r8d
    0000079d: 	movb	%r8b, -0x20(%rcx)
    000007a1: 	movaps	%xmm0, 0x58(%rsp)
    000007a6: 	movzbl	0x61(%rsp), %r8d
    000007ac: 	movb	%r8b, -0x1c(%rcx)
    000007b0: 	movaps	%xmm0, 0x48(%rsp)
    000007b5: 	movzbl	0x52(%rsp), %r8d
    000007bb: 	movb	%r8b, -0x18(%rcx)
    000007bf: 	movaps	%xmm0, 0x38(%rsp)
    000007c4: 	movzbl	0x43(%rsp), %r8d
    000007ca: 	movb	%r8b, -0x14(%rcx)
    000007ce: 	movaps	%xmm0, 0x28(%rsp)
    000007d3: 	movzbl	0x34(%rsp), %r8d
    000007d9: 	movb	%r8b, -0x10(%rcx)
    000007dd: 	movaps	%xmm0, 0x18(%rsp)
    000007e2: 	movzbl	0x25(%rsp), %r8d
    000007e8: 	movb	%r8b, -0xc(%rcx)
    000007ec: 	movaps	%xmm0, 0x8(%rsp)
    000007f1: 	movzbl	0x16(%rsp), %r8d
    000007f7: 	movb	%r8b, -0x8(%rcx)
    000007fb: 	movaps	%xmm0, -0x8(%rsp)
    00000800: 	movzbl	0x7(%rsp), %r8d
    00000806: 	movb	%r8b, -0x4(%rcx)
    0000080a: 	cmpq	%rdi, %r9
    0000080d: 	jne	.Ltmp374 # Offset: 2061
    00000813: 	movl	%edx, %ecx
    00000815: 	movq	%rbx, -0x70(%rsp)
    0000081a: 	andl	$-0x10, %ecx
    0000081d: 	movl	%ecx, %r8d
    00000820: 	cmpl	%edx, %ecx
    00000822: 	je	.Ltmp375 # Offset: 2082
    00000828: 	movl	%edx, %r10d
    0000082b: 	subl	%ecx, %r10d
    0000082e: 	leal	-0x1(%r10), %edi
    00000832: 	cmpl	$0x6, %edi
    00000835: 	jbe	.Ltmp376 # Offset: 2101
.Ltmp384:
    00000837: 	movq	-0x70(%rsp), %rbx
    0000083c: 	leaq	0x3(%rax,%rcx,4), %rdi
    00000841: 	movq	(%rbx,%rcx), %rcx
    00000845: 	movq	%rcx, %r9
    00000848: 	movb	%cl, (%rdi)
    0000084a: 	shrq	$0x10, %r9
    0000084e: 	movb	%ch, 0x4(%rdi)
    00000851: 	movb	%r9b, 0x8(%rdi)
    00000855: 	movq	%rcx, %r9
    00000858: 	shrq	$0x18, %r9
    0000085c: 	movb	%r9b, 0xc(%rdi)
    00000860: 	movq	%rcx, %r9
    00000863: 	shrq	$0x20, %r9
    00000867: 	movb	%r9b, 0x10(%rdi)
    0000086b: 	movq	%rcx, %r9
    0000086e: 	shrq	$0x28, %r9
    00000872: 	movb	%r9b, 0x14(%rdi)
    00000876: 	movq	%rcx, %r9
    00000879: 	shrq	$0x38, %rcx
    0000087d: 	movb	%cl, 0x1c(%rdi)
    00000880: 	movl	%r10d, %ecx
    00000883: 	shrq	$0x30, %r9
    00000887: 	andl	$-0x8, %ecx
    0000088a: 	movb	%r9b, 0x18(%rdi)
    0000088e: 	addl	%ecx, %r8d
    00000891: 	cmpl	%r10d, %ecx
    00000894: 	je	.Ltmp375 # Offset: 2196
.Ltmp376:
    0000089a: 	movq	-0x70(%rsp), %rbx
    0000089f: 	movslq	%r8d, %rdi
    000008a2: 	leal	(,%r8,4), %ecx
    000008aa: 	movzbl	(%rbx,%rdi), %r9d
    000008af: 	leal	0x3(%rcx), %edi
    000008b2: 	movslq	%edi, %rdi
    000008b5: 	movb	%r9b, (%rax,%rdi)
    000008b9: 	leal	0x1(%r8), %edi
    000008bd: 	cmpl	%edi, %edx
    000008bf: 	jle	.Ltmp375 # Offset: 2239
    000008c5: 	movslq	%edi, %rdi
    000008c8: 	movzbl	(%rbx,%rdi), %r9d
    000008cd: 	leal	0x7(%rcx), %edi
    000008d0: 	movslq	%edi, %rdi
    000008d3: 	movb	%r9b, (%rax,%rdi)
    000008d7: 	leal	0x2(%r8), %edi
    000008db: 	cmpl	%edi, %edx
    000008dd: 	jle	.Ltmp375 # Offset: 2269
    000008df: 	movslq	%edi, %rdi
    000008e2: 	movzbl	(%rbx,%rdi), %r9d
    000008e7: 	leal	0xb(%rcx), %edi
    000008ea: 	movslq	%edi, %rdi
    000008ed: 	movb	%r9b, (%rax,%rdi)
    000008f1: 	leal	0x3(%r8), %edi
    000008f5: 	cmpl	%edi, %edx
    000008f7: 	jle	.Ltmp375 # Offset: 2295
    000008f9: 	movslq	%edi, %rdi
    000008fc: 	movzbl	(%rbx,%rdi), %r9d
    00000901: 	leal	0xf(%rcx), %edi
    00000904: 	movslq	%edi, %rdi
    00000907: 	movb	%r9b, (%rax,%rdi)
    0000090b: 	leal	0x4(%r8), %edi
    0000090f: 	cmpl	%edi, %edx
    00000911: 	jle	.Ltmp375 # Offset: 2321
    00000913: 	movslq	%edi, %rdi
    00000916: 	movzbl	(%rbx,%rdi), %r9d
    0000091b: 	leal	0x13(%rcx), %edi
    0000091e: 	movslq	%edi, %rdi
    00000921: 	movb	%r9b, (%rax,%rdi)
    00000925: 	leal	0x5(%r8), %edi
    00000929: 	cmpl	%edx, %edi
    0000092b: 	jge	.Ltmp375 # Offset: 2347
    0000092d: 	movslq	%edi, %rdi
    00000930: 	addl	$0x6, %r8d
    00000934: 	movzbl	(%rbx,%rdi), %r9d
    00000939: 	leal	0x17(%rcx), %edi
    0000093c: 	movslq	%edi, %rdi
    0000093f: 	movb	%r9b, (%rax,%rdi)
    00000943: 	cmpl	%r8d, %edx
    00000946: 	jle	.Ltmp375 # Offset: 2374
    00000948: 	movslq	%r8d, %r8
    0000094b: 	addl	$0x1b, %ecx
    0000094e: 	movzbl	(%rbx,%r8), %edx
    00000953: 	movslq	%ecx, %rcx
    00000956: 	movb	%dl, (%rax,%rcx)
.Ltmp375:
    00000959: 	addq	%r11, -0x70(%rsp)
    0000095e: 	movl	-0x50(%rsp), %edx
    00000962: 	addq	%r11, %rsi
    00000965: 	addq	%r11, %r13
    00000968: 	subl	$0x400, -0x4c(%rsp)
    00000970: 	addq	-0x58(%rsp), %rax
    00000975: 	cmpl	%edx, -0x60(%rsp)
    00000979: 	jl	.Ltmp377 # Offset: 2425
.Ltmp359:
    0000097f: 	addq	$0x350, %rsp
    00000986: 	popq	%rbx
    00000987: 	popq	%rbp
    00000988: 	popq	%r12
    0000098a: 	popq	%r13
    0000098c: 	popq	%r14
    0000098e: 	popq	%r15
    00000990: 	retq # Offset: 2448
    00000991: 	nopl	(%rax) # Size: 7
.Ltmp360:
    00000998: 	movl	-0x4c(%rsp), %ebx
    0000099c: 	movl	%ebx, %edx
    0000099e: 	testl	%ebx, %ebx
    000009a0: 	jle	.Ltmp378 # Offset: 2464
    000009a6: 	leal	(,%rbx,4), %ecx
    000009ad: 	movslq	%ebx, %r11
    000009b0: 	movslq	%ecx, %rdi
    000009b3: 	movq	%rdi, -0x58(%rsp)
    000009b8: 	jmp	.Ltmp379 # Offset: 2488
    000009bd: 	nopl	(%rax) # Size: 3
.Ltmp362:
    000009c0: 	movq	-0x70(%rsp), %rbx
    000009c5: 	movl	%edx, %edi
    000009c7: 	xorl	%ecx, %ecx
    000009c9: 	nopl	(%rax) # Size: 7
.Ltmp380:
    000009d0: 	movzbl	(%rsi,%rcx), %r8d
    000009d5: 	movb	%r8b, 0x1(%rax,%rcx,4)
    000009da: 	addq	$0x1, %rcx
    000009de: 	cmpq	%rdi, %rcx
    000009e1: 	jne	.Ltmp380 # Offset: 2529
    000009e3: 	movq	%rbx, -0x70(%rsp)
    000009e8: 	jmp	.Ltmp365 # Offset: 2536
    000009ed: 	nopl	(%rax) # Size: 3
.Ltmp372:
    000009f0: 	movq	-0x70(%rsp), %rbx
    000009f5: 	movl	%edx, %edx
    000009f7: 	xorl	%ecx, %ecx
    000009f9: 	nopl	(%rax) # Size: 7
.Ltmp381:
    00000a00: 	movzbl	(%rbx,%rcx), %edi
    00000a04: 	movb	%dil, 0x3(%rax,%rcx,4)
    00000a09: 	addq	$0x1, %rcx
    00000a0d: 	cmpq	%rcx, %rdx
    00000a10: 	jne	.Ltmp381 # Offset: 2576
    00000a12: 	movq	%rbx, -0x70(%rsp)
    00000a17: 	jmp	.Ltmp375 # Offset: 2583
    00000a1c: 	nopl	(%rax) # Size: 4
.Ltmp367:
    00000a20: 	movq	-0x70(%rsp), %rbx
    00000a25: 	movl	%edx, %edi
    00000a27: 	xorl	%ecx, %ecx
    00000a29: 	nopl	(%rax) # Size: 7
.Ltmp382:
    00000a30: 	movzbl	(%r13,%rcx), %r8d
    00000a36: 	movb	%r8b, 0x2(%rax,%rcx,4)
    00000a3b: 	addq	$0x1, %rcx
    00000a3f: 	cmpq	%rdi, %rcx
    00000a42: 	jne	.Ltmp382 # Offset: 2626
    00000a44: 	movq	%rbx, -0x70(%rsp)
    00000a49: 	jmp	.Ltmp370 # Offset: 2633
    00000a4e: 	nop # Size: 2
.Ltmp378:
    00000a50: 	leal	(,%rbx,4), %edx
    00000a57: 	movslq	%ebx, %r11
    00000a5a: 	movslq	%edx, %rdx
    00000a5d: 	movq	%rdx, -0x58(%rsp)
    00000a62: 	jmp	.Ltmp375 # Offset: 2658
.Ltmp363:
    00000a67: 	movl	%edx, %ebp
    00000a69: 	xorl	%ecx, %ecx
    00000a6b: 	xorl	%r8d, %r8d
    00000a6e: 	jmp	.Ltmp383 # Offset: 2670
.Ltmp373:
    00000a73: 	xorl	%ecx, %ecx
    00000a75: 	xorl	%r8d, %r8d
    00000a78: 	jmp	.Ltmp384 # Offset: 2680
.Ltmp368:
    00000a7d: 	movl	%edx, %ebp
    00000a7f: 	xorl	%ecx, %ecx
    00000a81: 	xorl	%r8d, %r8d
    00000a84: 	jmp	.Ltmp385 # Offset: 2692
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version6IhEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave4to4_version1IhEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0xafe0
  Size        : 0x179
  MaxSize     : 0x180
  Offset      : 0xafe0
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version1IhEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp386 # Offset: 7
    0000000d: 	movslq	%r9d, %r10
    00000010: 	pushq	%rbp
    00000011: 	leaq	(%rsi,%r10), %rax
    00000015: 	leaq	(%rdi,%r10,4), %r11
    00000019: 	pushq	%rbx
    0000001a: 	cmpq	%rax, %rdi
    0000001d: 	setae	%al
    00000020: 	cmpq	%rsi, %r11
    00000023: 	setbe	%bl
    00000026: 	orl	%ebx, %eax
    00000028: 	leaq	(%rdx,%r10), %rbx
    0000002c: 	cmpq	%rbx, %rdi
    0000002f: 	setae	%bl
    00000032: 	cmpq	%rdx, %r11
    00000035: 	setbe	%bpl
    00000039: 	orl	%ebp, %ebx
    0000003b: 	andl	%ebx, %eax
    0000003d: 	leal	-0x1(%r9), %ebx
    00000041: 	cmpl	$0xe, %ebx
    00000044: 	seta	%bl
    00000047: 	andl	%ebx, %eax
    00000049: 	leaq	(%rcx,%r10), %rbx
    0000004d: 	cmpq	%rbx, %rdi
    00000050: 	setae	%bl
    00000053: 	cmpq	%rcx, %r11
    00000056: 	setbe	%bpl
    0000005a: 	orl	%ebp, %ebx
    0000005c: 	testb	%bl, %al
    0000005e: 	je	.Ltmp387 # Offset: 94
    00000064: 	addq	%r8, %r10
    00000067: 	cmpq	%r10, %rdi
    0000006a: 	setae	%al
    0000006d: 	cmpq	%r8, %r11
    00000070: 	setbe	%r10b
    00000074: 	orb	%r10b, %al
    00000077: 	je	.Ltmp387 # Offset: 119
    0000007d: 	movl	%r9d, %r10d
    00000080: 	xorl	%eax, %eax
    00000082: 	shrl	$0x4, %r10d
    00000086: 	shlq	$0x4, %r10
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp388:
    00000090: 	movdqu	(%rsi,%rax), %xmm0
    00000095: 	movdqu	(%rdx,%rax), %xmm1
    0000009a: 	movdqu	(%rcx,%rax), %xmm5
    0000009f: 	movdqu	(%r8,%rax), %xmm7
    000000a5: 	movdqa	%xmm0, %xmm2
    000000a9: 	movdqa	%xmm1, %xmm3
    000000ad: 	punpcklbw	%xmm5, %xmm2
    000000b1: 	punpcklbw	%xmm7, %xmm3
    000000b5: 	punpckhbw	%xmm5, %xmm0
    000000b9: 	movdqa	%xmm2, %xmm4
    000000bd: 	punpckhbw	%xmm3, %xmm2
    000000c1: 	punpckhbw	%xmm7, %xmm1
    000000c5: 	movups	%xmm2, 0x10(%rdi,%rax,4)
    000000ca: 	movdqa	%xmm0, %xmm2
    000000ce: 	punpcklbw	%xmm3, %xmm4
    000000d2: 	punpckhbw	%xmm1, %xmm0
    000000d6: 	punpcklbw	%xmm1, %xmm2
    000000da: 	movups	%xmm4, (%rdi,%rax,4)
    000000de: 	movups	%xmm2, 0x20(%rdi,%rax,4)
    000000e3: 	movups	%xmm0, 0x30(%rdi,%rax,4)
    000000e8: 	addq	$0x10, %rax
    000000ec: 	cmpq	%r10, %rax
    000000ef: 	jne	.Ltmp388 # Offset: 239
    000000f1: 	movl	%r9d, %eax
    000000f4: 	andl	$-0x10, %eax
    000000f7: 	testb	$0xf, %r9b
    000000fb: 	je	.Ltmp389 # Offset: 251
    000000fd: 	nopl	(%rax) # Size: 3
.Ltmp390:
    00000100: 	movzbl	(%rsi,%rax), %r10d
    00000105: 	movb	%r10b, (%rdi,%rax,4)
    00000109: 	movzbl	(%rdx,%rax), %r10d
    0000010e: 	movb	%r10b, 0x1(%rdi,%rax,4)
    00000113: 	movzbl	(%rcx,%rax), %r10d
    00000118: 	movb	%r10b, 0x2(%rdi,%rax,4)
    0000011d: 	movzbl	(%r8,%rax), %r10d
    00000122: 	movb	%r10b, 0x3(%rdi,%rax,4)
    00000127: 	addq	$0x1, %rax
    0000012b: 	cmpl	%eax, %r9d
    0000012e: 	jg	.Ltmp390 # Offset: 302
.Ltmp389:
    00000130: 	popq	%rbx
    00000131: 	popq	%rbp
    00000132: 	retq # Offset: 306
    00000133: 	nopl	(%rax,%rax) # Size: 5
.Ltmp387:
    00000138: 	movl	%r9d, %r9d
    0000013b: 	xorl	%eax, %eax
    0000013d: 	nopl	(%rax) # Size: 3
.Ltmp391:
    00000140: 	movzbl	(%rsi,%rax), %r10d
    00000145: 	movb	%r10b, (%rdi,%rax,4)
    00000149: 	movzbl	(%rdx,%rax), %r10d
    0000014e: 	movb	%r10b, 0x1(%rdi,%rax,4)
    00000153: 	movzbl	(%rcx,%rax), %r10d
    00000158: 	movb	%r10b, 0x2(%rdi,%rax,4)
    0000015d: 	movzbl	(%r8,%rax), %r10d
    00000162: 	movb	%r10b, 0x3(%rdi,%rax,4)
    00000167: 	addq	$0x1, %rax
    0000016b: 	cmpq	%rax, %r9
    0000016e: 	jne	.Ltmp391 # Offset: 366
    00000170: 	popq	%rbx
    00000171: 	popq	%rbp
    00000172: 	retq # Offset: 370
    00000173: 	nopl	(%rax,%rax) # Size: 5
.Ltmp386:
    00000178: 	retq # Offset: 376
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version1IhEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version2IhEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0xb160
  Size        : 0xb28
  MaxSize     : 0xb30
  Offset      : 0xb160
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version2IhEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	movslq	%r9d, %r9
    00000007: 	testq	%r9, %r9
    0000000a: 	je	.Ltmp392 # Offset: 10
    00000010: 	pushq	%r15
    00000012: 	movq	%rdx, %r11
    00000015: 	pushq	%r14
    00000017: 	pushq	%r13
    00000019: 	pushq	%r12
    0000001b: 	pushq	%rbp
    0000001c: 	movq	%rsi, %rbp
    0000001f: 	leaq	-0x1(%r9), %rsi
    00000023: 	pushq	%rbx
    00000024: 	leaq	(,%rsi,4), %rax
    0000002c: 	leaq	(%rbp,%r9), %rdx
    00000031: 	subq	$0x460, %rsp
    00000038: 	cmpq	$0x6, %rsi
    0000003c: 	movq	%rax, -0x70(%rsp)
    00000041: 	leaq	0x1(%rdi,%rax), %rax
    00000046: 	seta	%r10b
    0000004a: 	cmpq	%rax, %rbp
    0000004d: 	setae	%al
    00000050: 	cmpq	%rdx, %rdi
    00000053: 	setae	%dl
    00000056: 	orb	%dl, %al
    00000058: 	je	.Ltmp393 # Offset: 88
    0000005e: 	testb	%r10b, %r10b
    00000061: 	je	.Ltmp393 # Offset: 97
    00000067: 	cmpq	$0xe, %rsi
    0000006b: 	jbe	.Ltmp394 # Offset: 107
    00000071: 	movq	%r9, %r13
    00000074: 	movq	%rbp, %rdx
    00000077: 	movq	%rdi, %rax
    0000007a: 	andq	$-0x10, %r13
    0000007e: 	addq	%rbp, %r13
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp395:
    00000088: 	movdqu	(%rdx), %xmm0
    0000008c: 	addq	$0x10, %rdx
    00000090: 	addq	$0x40, %rax
    00000094: 	movd	%xmm0, %r12d
    00000099: 	movb	%r12b, -0x40(%rax)
    0000009d: 	movaps	%xmm0, 0x448(%rsp)
    000000a5: 	movzbl	0x449(%rsp), %r12d
    000000ae: 	movb	%r12b, -0x3c(%rax)
    000000b2: 	movaps	%xmm0, 0x438(%rsp)
    000000ba: 	movzbl	0x43a(%rsp), %r12d
    000000c3: 	movb	%r12b, -0x38(%rax)
    000000c7: 	movaps	%xmm0, 0x428(%rsp)
    000000cf: 	movzbl	0x42b(%rsp), %r12d
    000000d8: 	movb	%r12b, -0x34(%rax)
    000000dc: 	movaps	%xmm0, 0x418(%rsp)
    000000e4: 	movzbl	0x41c(%rsp), %r12d
    000000ed: 	movb	%r12b, -0x30(%rax)
    000000f1: 	movaps	%xmm0, 0x408(%rsp)
    000000f9: 	movzbl	0x40d(%rsp), %r12d
    00000102: 	movb	%r12b, -0x2c(%rax)
    00000106: 	movaps	%xmm0, 0x3f8(%rsp)
    0000010e: 	movzbl	0x3fe(%rsp), %r12d
    00000117: 	movb	%r12b, -0x28(%rax)
    0000011b: 	movaps	%xmm0, 0x3e8(%rsp)
    00000123: 	movzbl	0x3ef(%rsp), %r12d
    0000012c: 	movb	%r12b, -0x24(%rax)
    00000130: 	movaps	%xmm0, 0x3d8(%rsp)
    00000138: 	movzbl	0x3e0(%rsp), %r12d
    00000141: 	movb	%r12b, -0x20(%rax)
    00000145: 	movaps	%xmm0, 0x3c8(%rsp)
    0000014d: 	movzbl	0x3d1(%rsp), %r12d
    00000156: 	movb	%r12b, -0x1c(%rax)
    0000015a: 	movaps	%xmm0, 0x3b8(%rsp)
    00000162: 	movzbl	0x3c2(%rsp), %r12d
    0000016b: 	movb	%r12b, -0x18(%rax)
    0000016f: 	movaps	%xmm0, 0x3a8(%rsp)
    00000177: 	movzbl	0x3b3(%rsp), %r12d
    00000180: 	movb	%r12b, -0x14(%rax)
    00000184: 	movaps	%xmm0, 0x398(%rsp)
    0000018c: 	movzbl	0x3a4(%rsp), %r12d
    00000195: 	movb	%r12b, -0x10(%rax)
    00000199: 	movaps	%xmm0, 0x388(%rsp)
    000001a1: 	movzbl	0x395(%rsp), %r12d
    000001aa: 	movb	%r12b, -0xc(%rax)
    000001ae: 	movaps	%xmm0, 0x378(%rsp)
    000001b6: 	movzbl	0x386(%rsp), %r12d
    000001bf: 	movb	%r12b, -0x8(%rax)
    000001c3: 	movaps	%xmm0, 0x368(%rsp)
    000001cb: 	movzbl	0x377(%rsp), %r12d
    000001d4: 	movb	%r12b, -0x4(%rax)
    000001d8: 	cmpq	%rdx, %r13
    000001db: 	jne	.Ltmp395 # Offset: 475
    000001e1: 	movq	%r9, %rdx
    000001e4: 	andq	$-0x10, %rdx
    000001e8: 	leaq	(%rbp,%rdx), %r14
    000001ed: 	leaq	(%rdi,%rdx,4), %r13
    000001f1: 	cmpq	%rdx, %r9
    000001f4: 	je	.Ltmp396 # Offset: 500
    000001fa: 	movq	%r9, %r15
    000001fd: 	subq	%rdx, %r15
    00000200: 	leaq	-0x1(%r15), %rax
    00000204: 	cmpq	$0x6, %rax
    00000208: 	jbe	.Ltmp397 # Offset: 520
.Ltmp418:
    0000020a: 	movq	(%rbp,%rdx), %rax
    0000020f: 	leaq	(%rdi,%rdx,4), %r12
    00000213: 	movq	%rax, %rbp
    00000216: 	movzbl	%ah, %ebx
    00000219: 	movb	%al, (%r12)
    0000021d: 	shrq	$0x10, %rbp
    00000221: 	movb	%bl, 0x4(%r12)
    00000226: 	movb	%bpl, 0x8(%r12)
    0000022b: 	movq	%rax, %rbp
    0000022e: 	shrq	$0x18, %rbp
    00000232: 	movb	%bpl, 0xc(%r12)
    00000237: 	movq	%rax, %rbp
    0000023a: 	shrq	$0x20, %rbp
    0000023e: 	movb	%bpl, 0x10(%r12)
    00000243: 	movq	%rax, %rbp
    00000246: 	shrq	$0x28, %rbp
    0000024a: 	movb	%bpl, 0x14(%r12)
    0000024f: 	movq	%rax, %rbp
    00000252: 	shrq	$0x38, %rax
    00000256: 	movb	%al, 0x1c(%r12)
    0000025b: 	movq	%r15, %rax
    0000025e: 	shrq	$0x30, %rbp
    00000262: 	andq	$-0x8, %rax
    00000266: 	movb	%bpl, 0x18(%r12)
    0000026b: 	addq	%rax, %r14
    0000026e: 	leaq	(%r13,%rax,4), %r13
    00000273: 	addq	%rax, %rdx
    00000276: 	cmpq	%rax, %r15
    00000279: 	je	.Ltmp396 # Offset: 633
.Ltmp397:
    0000027b: 	movzbl	(%r14), %eax
    0000027f: 	movb	%al, (%r13)
    00000283: 	leaq	0x1(%rdx), %rax
    00000287: 	cmpq	%rax, %r9
    0000028a: 	jbe	.Ltmp396 # Offset: 650
    0000028c: 	movzbl	0x1(%r14), %eax
    00000291: 	movb	%al, 0x4(%r13)
    00000295: 	leaq	0x2(%rdx), %rax
    00000299: 	cmpq	%rax, %r9
    0000029c: 	jbe	.Ltmp396 # Offset: 668
    0000029e: 	movzbl	0x2(%r14), %eax
    000002a3: 	movb	%al, 0x8(%r13)
    000002a7: 	leaq	0x3(%rdx), %rax
    000002ab: 	cmpq	%rax, %r9
    000002ae: 	jbe	.Ltmp396 # Offset: 686
    000002b0: 	movzbl	0x3(%r14), %eax
    000002b5: 	movb	%al, 0xc(%r13)
    000002b9: 	leaq	0x4(%rdx), %rax
    000002bd: 	cmpq	%rax, %r9
    000002c0: 	jbe	.Ltmp396 # Offset: 704
    000002c2: 	movzbl	0x4(%r14), %eax
    000002c7: 	movb	%al, 0x10(%r13)
    000002cb: 	leaq	0x5(%rdx), %rax
    000002cf: 	cmpq	%rax, %r9
    000002d2: 	jbe	.Ltmp396 # Offset: 722
    000002d4: 	movzbl	0x5(%r14), %eax
    000002d9: 	addq	$0x6, %rdx
    000002dd: 	movb	%al, 0x14(%r13)
    000002e1: 	cmpq	%rdx, %r9
    000002e4: 	jbe	.Ltmp396 # Offset: 740
    000002e6: 	movzbl	0x6(%r14), %eax
    000002eb: 	movb	%al, 0x18(%r13)
.Ltmp396:
    000002ef: 	movq	-0x70(%rsp), %rax
    000002f4: 	leaq	(%r11,%r9), %rdx
    000002f8: 	leaq	0x1(%rdi), %rbp
    000002fc: 	leaq	0x2(%rdi,%rax), %rax
    00000301: 	cmpq	%rax, %r11
    00000304: 	setae	%al
    00000307: 	cmpq	%rdx, %rbp
    0000030a: 	setae	%dl
    0000030d: 	orb	%dl, %al
    0000030f: 	je	.Ltmp398 # Offset: 783
    00000315: 	testb	%r10b, %r10b
    00000318: 	je	.Ltmp398 # Offset: 792
    0000031e: 	cmpq	$0xe, %rsi
    00000322: 	jbe	.Ltmp399 # Offset: 802
    00000328: 	movq	%r9, %r13
    0000032b: 	movq	%r11, %rdx
    0000032e: 	movq	%rbp, %rax
    00000331: 	andq	$-0x10, %r13
    00000335: 	addq	%r11, %r13
    00000338: 	nopl	(%rax,%rax) # Size: 8
.Ltmp400:
    00000340: 	movdqu	(%rdx), %xmm0
    00000344: 	addq	$0x10, %rdx
    00000348: 	addq	$0x40, %rax
    0000034c: 	movd	%xmm0, %r12d
    00000351: 	movb	%r12b, -0x40(%rax)
    00000355: 	movaps	%xmm0, 0x2d8(%rsp)
    0000035d: 	movzbl	0x2d9(%rsp), %r12d
    00000366: 	movb	%r12b, -0x3c(%rax)
    0000036a: 	movaps	%xmm0, 0x2c8(%rsp)
    00000372: 	movzbl	0x2ca(%rsp), %r12d
    0000037b: 	movb	%r12b, -0x38(%rax)
    0000037f: 	movaps	%xmm0, 0x2b8(%rsp)
    00000387: 	movzbl	0x2bb(%rsp), %r12d
    00000390: 	movb	%r12b, -0x34(%rax)
    00000394: 	movaps	%xmm0, 0x2a8(%rsp)
    0000039c: 	movzbl	0x2ac(%rsp), %r12d
    000003a5: 	movb	%r12b, -0x30(%rax)
    000003a9: 	movaps	%xmm0, 0x298(%rsp)
    000003b1: 	movzbl	0x29d(%rsp), %r12d
    000003ba: 	movb	%r12b, -0x2c(%rax)
    000003be: 	movaps	%xmm0, 0x288(%rsp)
    000003c6: 	movzbl	0x28e(%rsp), %r12d
    000003cf: 	movb	%r12b, -0x28(%rax)
    000003d3: 	movaps	%xmm0, 0x278(%rsp)
    000003db: 	movzbl	0x27f(%rsp), %r12d
    000003e4: 	movb	%r12b, -0x24(%rax)
    000003e8: 	movaps	%xmm0, 0x268(%rsp)
    000003f0: 	movzbl	0x270(%rsp), %r12d
    000003f9: 	movb	%r12b, -0x20(%rax)
    000003fd: 	movaps	%xmm0, 0x258(%rsp)
    00000405: 	movzbl	0x261(%rsp), %r12d
    0000040e: 	movb	%r12b, -0x1c(%rax)
    00000412: 	movaps	%xmm0, 0x248(%rsp)
    0000041a: 	movzbl	0x252(%rsp), %r12d
    00000423: 	movb	%r12b, -0x18(%rax)
    00000427: 	movaps	%xmm0, 0x238(%rsp)
    0000042f: 	movzbl	0x243(%rsp), %r12d
    00000438: 	movb	%r12b, -0x14(%rax)
    0000043c: 	movaps	%xmm0, 0x228(%rsp)
    00000444: 	movzbl	0x234(%rsp), %r12d
    0000044d: 	movb	%r12b, -0x10(%rax)
    00000451: 	movaps	%xmm0, 0x218(%rsp)
    00000459: 	movzbl	0x225(%rsp), %r12d
    00000462: 	movb	%r12b, -0xc(%rax)
    00000466: 	movaps	%xmm0, 0x208(%rsp)
    0000046e: 	movzbl	0x216(%rsp), %r12d
    00000477: 	movb	%r12b, -0x8(%rax)
    0000047b: 	movaps	%xmm0, 0x1f8(%rsp)
    00000483: 	movzbl	0x207(%rsp), %r12d
    0000048c: 	movb	%r12b, -0x4(%rax)
    00000490: 	cmpq	%rdx, %r13
    00000493: 	jne	.Ltmp400 # Offset: 1171
    00000499: 	movq	%r9, %rdx
    0000049c: 	andq	$-0x10, %rdx
    000004a0: 	leaq	(%r11,%rdx), %r13
    000004a4: 	leaq	(%rbp,%rdx,4), %rbp
    000004a9: 	cmpq	%rdx, %r9
    000004ac: 	je	.Ltmp401 # Offset: 1196
    000004b2: 	movq	%r9, %r14
    000004b5: 	subq	%rdx, %r14
    000004b8: 	leaq	-0x1(%r14), %rax
    000004bc: 	cmpq	$0x6, %rax
    000004c0: 	jbe	.Ltmp402 # Offset: 1216
.Ltmp420:
    000004c2: 	movq	(%r11,%rdx), %rax
    000004c6: 	leaq	0x1(%rdi,%rdx,4), %r12
    000004cb: 	movq	%rax, %r11
    000004ce: 	movzbl	%ah, %ebx
    000004d1: 	movb	%al, (%r12)
    000004d5: 	shrq	$0x10, %r11
    000004d9: 	movb	%bl, 0x4(%r12)
    000004de: 	movb	%r11b, 0x8(%r12)
    000004e3: 	movq	%rax, %r11
    000004e6: 	shrq	$0x18, %r11
    000004ea: 	movb	%r11b, 0xc(%r12)
    000004ef: 	movq	%rax, %r11
    000004f2: 	shrq	$0x20, %r11
    000004f6: 	movb	%r11b, 0x10(%r12)
    000004fb: 	movq	%rax, %r11
    000004fe: 	shrq	$0x28, %r11
    00000502: 	movb	%r11b, 0x14(%r12)
    00000507: 	movq	%rax, %r11
    0000050a: 	shrq	$0x38, %rax
    0000050e: 	movb	%al, 0x1c(%r12)
    00000513: 	movq	%r14, %rax
    00000516: 	shrq	$0x30, %r11
    0000051a: 	andq	$-0x8, %rax
    0000051e: 	movb	%r11b, 0x18(%r12)
    00000523: 	addq	%rax, %r13
    00000526: 	leaq	(%rbp,%rax,4), %rbp
    0000052b: 	addq	%rax, %rdx
    0000052e: 	cmpq	%rax, %r14
    00000531: 	je	.Ltmp401 # Offset: 1329
.Ltmp402:
    00000533: 	movzbl	(%r13), %eax
    00000538: 	movb	%al, (%rbp)
    0000053b: 	leaq	0x1(%rdx), %rax
    0000053f: 	cmpq	%rax, %r9
    00000542: 	jbe	.Ltmp401 # Offset: 1346
    00000544: 	movzbl	0x1(%r13), %eax
    00000549: 	movb	%al, 0x4(%rbp)
    0000054c: 	leaq	0x2(%rdx), %rax
    00000550: 	cmpq	%rax, %r9
    00000553: 	jbe	.Ltmp401 # Offset: 1363
    00000555: 	movzbl	0x2(%r13), %eax
    0000055a: 	movb	%al, 0x8(%rbp)
    0000055d: 	leaq	0x3(%rdx), %rax
    00000561: 	cmpq	%rax, %r9
    00000564: 	jbe	.Ltmp401 # Offset: 1380
    00000566: 	movzbl	0x3(%r13), %eax
    0000056b: 	movb	%al, 0xc(%rbp)
    0000056e: 	leaq	0x4(%rdx), %rax
    00000572: 	cmpq	%rax, %r9
    00000575: 	jbe	.Ltmp401 # Offset: 1397
    00000577: 	movzbl	0x4(%r13), %eax
    0000057c: 	movb	%al, 0x10(%rbp)
    0000057f: 	leaq	0x5(%rdx), %rax
    00000583: 	cmpq	%rax, %r9
    00000586: 	jbe	.Ltmp401 # Offset: 1414
    00000588: 	movzbl	0x5(%r13), %eax
    0000058d: 	addq	$0x6, %rdx
    00000591: 	movb	%al, 0x14(%rbp)
    00000594: 	cmpq	%rdx, %r9
    00000597: 	jbe	.Ltmp401 # Offset: 1431
    00000599: 	movzbl	0x6(%r13), %eax
    0000059e: 	movb	%al, 0x18(%rbp)
.Ltmp401:
    000005a1: 	movq	-0x70(%rsp), %rax
    000005a6: 	leaq	(%rcx,%r9), %rdx
    000005aa: 	leaq	0x2(%rdi), %rbp
    000005ae: 	leaq	0x3(%rdi,%rax), %rax
    000005b3: 	cmpq	%rax, %rcx
    000005b6: 	setae	%al
    000005b9: 	cmpq	%rdx, %rbp
    000005bc: 	setae	%dl
    000005bf: 	orb	%dl, %al
    000005c1: 	je	.Ltmp403 # Offset: 1473
    000005c7: 	testb	%r10b, %r10b
    000005ca: 	je	.Ltmp403 # Offset: 1482
    000005d0: 	cmpq	$0xe, %rsi
    000005d4: 	jbe	.Ltmp404 # Offset: 1492
    000005da: 	movq	%r9, %rbx
    000005dd: 	movq	%rcx, %rdx
    000005e0: 	movq	%rbp, %rax
    000005e3: 	andq	$-0x10, %rbx
    000005e7: 	addq	%rcx, %rbx
    000005ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp405:
    000005f0: 	movdqu	(%rdx), %xmm0
    000005f4: 	addq	$0x10, %rdx
    000005f8: 	addq	$0x40, %rax
    000005fc: 	movd	%xmm0, %r11d
    00000601: 	movb	%r11b, -0x40(%rax)
    00000605: 	movaps	%xmm0, 0x1a8(%rsp)
    0000060d: 	movzbl	0x1a9(%rsp), %r11d
    00000616: 	movb	%r11b, -0x3c(%rax)
    0000061a: 	movaps	%xmm0, 0x198(%rsp)
    00000622: 	movzbl	0x19a(%rsp), %r11d
    0000062b: 	movb	%r11b, -0x38(%rax)
    0000062f: 	movaps	%xmm0, 0x188(%rsp)
    00000637: 	movzbl	0x18b(%rsp), %r11d
    00000640: 	movb	%r11b, -0x34(%rax)
    00000644: 	movaps	%xmm0, 0x178(%rsp)
    0000064c: 	movzbl	0x17c(%rsp), %r11d
    00000655: 	movb	%r11b, -0x30(%rax)
    00000659: 	movaps	%xmm0, 0x168(%rsp)
    00000661: 	movzbl	0x16d(%rsp), %r11d
    0000066a: 	movb	%r11b, -0x2c(%rax)
    0000066e: 	movaps	%xmm0, 0x158(%rsp)
    00000676: 	movzbl	0x15e(%rsp), %r11d
    0000067f: 	movb	%r11b, -0x28(%rax)
    00000683: 	movaps	%xmm0, 0x148(%rsp)
    0000068b: 	movzbl	0x14f(%rsp), %r11d
    00000694: 	movb	%r11b, -0x24(%rax)
    00000698: 	movaps	%xmm0, 0x138(%rsp)
    000006a0: 	movzbl	0x140(%rsp), %r11d
    000006a9: 	movb	%r11b, -0x20(%rax)
    000006ad: 	movaps	%xmm0, 0x128(%rsp)
    000006b5: 	movzbl	0x131(%rsp), %r11d
    000006be: 	movb	%r11b, -0x1c(%rax)
    000006c2: 	movaps	%xmm0, 0x118(%rsp)
    000006ca: 	movzbl	0x122(%rsp), %r11d
    000006d3: 	movb	%r11b, -0x18(%rax)
    000006d7: 	movaps	%xmm0, 0x108(%rsp)
    000006df: 	movzbl	0x113(%rsp), %r11d
    000006e8: 	movb	%r11b, -0x14(%rax)
    000006ec: 	movaps	%xmm0, 0xf8(%rsp)
    000006f4: 	movzbl	0x104(%rsp), %r11d
    000006fd: 	movb	%r11b, -0x10(%rax)
    00000701: 	movaps	%xmm0, 0xe8(%rsp)
    00000709: 	movzbl	0xf5(%rsp), %r11d
    00000712: 	movb	%r11b, -0xc(%rax)
    00000716: 	movaps	%xmm0, 0xd8(%rsp)
    0000071e: 	movzbl	0xe6(%rsp), %r11d
    00000727: 	movb	%r11b, -0x8(%rax)
    0000072b: 	movaps	%xmm0, 0xc8(%rsp)
    00000733: 	movzbl	0xd7(%rsp), %r11d
    0000073c: 	movb	%r11b, -0x4(%rax)
    00000740: 	cmpq	%rbx, %rdx
    00000743: 	jne	.Ltmp405 # Offset: 1859
    00000749: 	movq	%r9, %rdx
    0000074c: 	andq	$-0x10, %rdx
    00000750: 	leaq	(%rcx,%rdx), %rbx
    00000754: 	leaq	(%rbp,%rdx,4), %rbp
    00000759: 	cmpq	%rdx, %r9
    0000075c: 	je	.Ltmp406 # Offset: 1884
    00000762: 	movq	%r9, %r12
    00000765: 	subq	%rdx, %r12
    00000768: 	leaq	-0x1(%r12), %rax
    0000076d: 	cmpq	$0x6, %rax
    00000771: 	jbe	.Ltmp407 # Offset: 1905
.Ltmp419:
    00000773: 	movq	(%rcx,%rdx), %rax
    00000777: 	leaq	0x2(%rdi,%rdx,4), %r11
    0000077c: 	movzbl	%ah, %ecx
    0000077f: 	movb	%al, (%r11)
    00000782: 	movb	%cl, 0x4(%r11)
    00000786: 	movq	%rax, %rcx
    00000789: 	shrq	$0x10, %rcx
    0000078d: 	movb	%cl, 0x8(%r11)
    00000791: 	movq	%rax, %rcx
    00000794: 	shrq	$0x18, %rcx
    00000798: 	movb	%cl, 0xc(%r11)
    0000079c: 	movq	%rax, %rcx
    0000079f: 	shrq	$0x20, %rcx
    000007a3: 	movb	%cl, 0x10(%r11)
    000007a7: 	movq	%rax, %rcx
    000007aa: 	shrq	$0x28, %rcx
    000007ae: 	movb	%cl, 0x14(%r11)
    000007b2: 	movq	%rax, %rcx
    000007b5: 	shrq	$0x38, %rax
    000007b9: 	movb	%al, 0x1c(%r11)
    000007bd: 	movq	%r12, %rax
    000007c0: 	shrq	$0x30, %rcx
    000007c4: 	andq	$-0x8, %rax
    000007c8: 	movb	%cl, 0x18(%r11)
    000007cc: 	addq	%rax, %rbx
    000007cf: 	leaq	(%rbp,%rax,4), %rbp
    000007d4: 	addq	%rax, %rdx
    000007d7: 	cmpq	%rax, %r12
    000007da: 	je	.Ltmp406 # Offset: 2010
.Ltmp407:
    000007dc: 	movzbl	(%rbx), %eax
    000007df: 	movb	%al, (%rbp)
    000007e2: 	leaq	0x1(%rdx), %rax
    000007e6: 	cmpq	%rax, %r9
    000007e9: 	jbe	.Ltmp406 # Offset: 2025
    000007eb: 	movzbl	0x1(%rbx), %eax
    000007ef: 	movb	%al, 0x4(%rbp)
    000007f2: 	leaq	0x2(%rdx), %rax
    000007f6: 	cmpq	%rax, %r9
    000007f9: 	jbe	.Ltmp406 # Offset: 2041
    000007fb: 	movzbl	0x2(%rbx), %eax
    000007ff: 	movb	%al, 0x8(%rbp)
    00000802: 	leaq	0x3(%rdx), %rax
    00000806: 	cmpq	%rax, %r9
    00000809: 	jbe	.Ltmp406 # Offset: 2057
    0000080b: 	movzbl	0x3(%rbx), %eax
    0000080f: 	movb	%al, 0xc(%rbp)
    00000812: 	leaq	0x4(%rdx), %rax
    00000816: 	cmpq	%rax, %r9
    00000819: 	jbe	.Ltmp406 # Offset: 2073
    0000081b: 	movzbl	0x4(%rbx), %eax
    0000081f: 	movb	%al, 0x10(%rbp)
    00000822: 	leaq	0x5(%rdx), %rax
    00000826: 	cmpq	%rax, %r9
    00000829: 	jbe	.Ltmp406 # Offset: 2089
    0000082b: 	movzbl	0x5(%rbx), %eax
    0000082f: 	addq	$0x6, %rdx
    00000833: 	movb	%al, 0x14(%rbp)
    00000836: 	cmpq	%rdx, %r9
    00000839: 	jbe	.Ltmp406 # Offset: 2105
    0000083b: 	movzbl	0x6(%rbx), %eax
    0000083f: 	movb	%al, 0x18(%rbp)
.Ltmp406:
    00000842: 	leaq	(%rdi,%r9,4), %rax
    00000846: 	leaq	(%r8,%r9), %rdx
    0000084a: 	cmpq	%rax, %r8
    0000084d: 	leaq	0x3(%rdi), %r11
    00000851: 	setae	%al
    00000854: 	cmpq	%rdx, %r11
    00000857: 	setae	%dl
    0000085a: 	orb	%dl, %al
    0000085c: 	je	.Ltmp408 # Offset: 2140
    00000862: 	testb	%r10b, %r10b
    00000865: 	je	.Ltmp408 # Offset: 2149
    0000086b: 	cmpq	$0xe, %rsi
    0000086f: 	jbe	.Ltmp409 # Offset: 2159
    00000875: 	movq	%r9, %rsi
    00000878: 	movq	%r8, %rdx
    0000087b: 	movq	%r11, %rax
    0000087e: 	andq	$-0x10, %rsi
    00000882: 	addq	%r8, %rsi
    00000885: 	nopl	(%rax) # Size: 3
.Ltmp410:
    00000888: 	movdqu	(%rdx), %xmm0
    0000088c: 	addq	$0x10, %rdx
    00000890: 	addq	$0x40, %rax
    00000894: 	movd	%xmm0, %ecx
    00000898: 	movb	%cl, -0x40(%rax)
    0000089b: 	movaps	%xmm0, 0x78(%rsp)
    000008a0: 	movzbl	0x79(%rsp), %ecx
    000008a5: 	movb	%cl, -0x3c(%rax)
    000008a8: 	movaps	%xmm0, 0x68(%rsp)
    000008ad: 	movzbl	0x6a(%rsp), %ecx
    000008b2: 	movb	%cl, -0x38(%rax)
    000008b5: 	movaps	%xmm0, 0x58(%rsp)
    000008ba: 	movzbl	0x5b(%rsp), %ecx
    000008bf: 	movb	%cl, -0x34(%rax)
    000008c2: 	movaps	%xmm0, 0x48(%rsp)
    000008c7: 	movzbl	0x4c(%rsp), %ecx
    000008cc: 	movb	%cl, -0x30(%rax)
    000008cf: 	movaps	%xmm0, 0x38(%rsp)
    000008d4: 	movzbl	0x3d(%rsp), %ecx
    000008d9: 	movb	%cl, -0x2c(%rax)
    000008dc: 	movaps	%xmm0, 0x28(%rsp)
    000008e1: 	movzbl	0x2e(%rsp), %ecx
    000008e6: 	movb	%cl, -0x28(%rax)
    000008e9: 	movaps	%xmm0, 0x18(%rsp)
    000008ee: 	movzbl	0x1f(%rsp), %ecx
    000008f3: 	movb	%cl, -0x24(%rax)
    000008f6: 	movaps	%xmm0, 0x8(%rsp)
    000008fb: 	movzbl	0x10(%rsp), %ecx
    00000900: 	movb	%cl, -0x20(%rax)
    00000903: 	movaps	%xmm0, -0x8(%rsp)
    00000908: 	movzbl	0x1(%rsp), %ecx
    0000090d: 	movb	%cl, -0x1c(%rax)
    00000910: 	movaps	%xmm0, -0x18(%rsp)
    00000915: 	movzbl	-0xe(%rsp), %ecx
    0000091a: 	movb	%cl, -0x18(%rax)
    0000091d: 	movaps	%xmm0, -0x28(%rsp)
    00000922: 	movzbl	-0x1d(%rsp), %ecx
    00000927: 	movb	%cl, -0x14(%rax)
    0000092a: 	movaps	%xmm0, -0x38(%rsp)
    0000092f: 	movzbl	-0x2c(%rsp), %ecx
    00000934: 	movb	%cl, -0x10(%rax)
    00000937: 	movaps	%xmm0, -0x48(%rsp)
    0000093c: 	movzbl	-0x3b(%rsp), %ecx
    00000941: 	movb	%cl, -0xc(%rax)
    00000944: 	movaps	%xmm0, -0x58(%rsp)
    00000949: 	movzbl	-0x4a(%rsp), %ecx
    0000094e: 	movb	%cl, -0x8(%rax)
    00000951: 	movaps	%xmm0, -0x68(%rsp)
    00000956: 	movzbl	-0x59(%rsp), %ecx
    0000095b: 	movb	%cl, -0x4(%rax)
    0000095e: 	cmpq	%rsi, %rdx
    00000961: 	jne	.Ltmp410 # Offset: 2401
    00000967: 	movq	%r9, %rdx
    0000096a: 	andq	$-0x10, %rdx
    0000096e: 	leaq	(%r8,%rdx), %rsi
    00000972: 	leaq	(%r11,%rdx,4), %r11
    00000976: 	cmpq	%rdx, %r9
    00000979: 	je	.Ltmp411 # Offset: 2425
    0000097f: 	movq	%r9, %r10
    00000982: 	subq	%rdx, %r10
    00000985: 	leaq	-0x1(%r10), %rax
    00000989: 	cmpq	$0x6, %rax
    0000098d: 	jbe	.Ltmp412 # Offset: 2445
.Ltmp417:
    0000098f: 	movq	(%r8,%rdx), %rax
    00000993: 	leaq	0x3(%rdi,%rdx,4), %rcx
    00000998: 	movq	%rax, %rdi
    0000099b: 	movb	%al, (%rcx)
    0000099d: 	shrq	$0x10, %rdi
    000009a1: 	movb	%ah, 0x4(%rcx)
    000009a4: 	movb	%dil, 0x8(%rcx)
    000009a8: 	movq	%rax, %rdi
    000009ab: 	shrq	$0x18, %rdi
    000009af: 	movb	%dil, 0xc(%rcx)
    000009b3: 	movq	%rax, %rdi
    000009b6: 	shrq	$0x20, %rdi
    000009ba: 	movb	%dil, 0x10(%rcx)
    000009be: 	movq	%rax, %rdi
    000009c1: 	shrq	$0x28, %rdi
    000009c5: 	movb	%dil, 0x14(%rcx)
    000009c9: 	movq	%rax, %rdi
    000009cc: 	shrq	$0x38, %rax
    000009d0: 	movb	%al, 0x1c(%rcx)
    000009d3: 	movq	%r10, %rax
    000009d6: 	shrq	$0x30, %rdi
    000009da: 	andq	$-0x8, %rax
    000009de: 	movb	%dil, 0x18(%rcx)
    000009e2: 	addq	%rax, %rsi
    000009e5: 	leaq	(%r11,%rax,4), %r11
    000009e9: 	addq	%rax, %rdx
    000009ec: 	cmpq	%r10, %rax
    000009ef: 	je	.Ltmp411 # Offset: 2543
.Ltmp412:
    000009f1: 	movzbl	(%rsi), %eax
    000009f4: 	movb	%al, (%r11)
    000009f7: 	leaq	0x1(%rdx), %rax
    000009fb: 	cmpq	%rax, %r9
    000009fe: 	jbe	.Ltmp411 # Offset: 2558
    00000a00: 	movzbl	0x1(%rsi), %eax
    00000a04: 	movb	%al, 0x4(%r11)
    00000a08: 	leaq	0x2(%rdx), %rax
    00000a0c: 	cmpq	%rax, %r9
    00000a0f: 	jbe	.Ltmp411 # Offset: 2575
    00000a11: 	movzbl	0x2(%rsi), %eax
    00000a15: 	movb	%al, 0x8(%r11)
    00000a19: 	leaq	0x3(%rdx), %rax
    00000a1d: 	cmpq	%rax, %r9
    00000a20: 	jbe	.Ltmp411 # Offset: 2592
    00000a22: 	movzbl	0x3(%rsi), %eax
    00000a26: 	movb	%al, 0xc(%r11)
    00000a2a: 	leaq	0x4(%rdx), %rax
    00000a2e: 	cmpq	%rax, %r9
    00000a31: 	jbe	.Ltmp411 # Offset: 2609
    00000a33: 	movzbl	0x4(%rsi), %eax
    00000a37: 	movb	%al, 0x10(%r11)
    00000a3b: 	leaq	0x5(%rdx), %rax
    00000a3f: 	cmpq	%rax, %r9
    00000a42: 	jbe	.Ltmp411 # Offset: 2626
    00000a44: 	movzbl	0x5(%rsi), %eax
    00000a48: 	addq	$0x6, %rdx
    00000a4c: 	movb	%al, 0x14(%r11)
    00000a50: 	cmpq	%rdx, %r9
    00000a53: 	jbe	.Ltmp411 # Offset: 2643
    00000a55: 	movzbl	0x6(%rsi), %eax
    00000a59: 	movb	%al, 0x18(%r11)
.Ltmp411:
    00000a5d: 	addq	$0x460, %rsp
    00000a64: 	popq	%rbx
    00000a65: 	popq	%rbp
    00000a66: 	popq	%r12
    00000a68: 	popq	%r13
    00000a6a: 	popq	%r14
    00000a6c: 	popq	%r15
    00000a6e: 	retq # Offset: 2670
    00000a6f: 	nop # Size: 1
.Ltmp408:
    00000a70: 	xorl	%eax, %eax
    00000a72: 	nopw	(%rax,%rax) # Size: 6
.Ltmp413:
    00000a78: 	movzbl	(%r8,%rax), %edx
    00000a7d: 	movb	%dl, 0x3(%rdi,%rax,4)
    00000a81: 	addq	$0x1, %rax
    00000a85: 	cmpq	%rax, %r9
    00000a88: 	jne	.Ltmp413 # Offset: 2696
    00000a8a: 	jmp	.Ltmp411 # Offset: 2698
    00000a8c: 	nopl	(%rax) # Size: 4
.Ltmp398:
    00000a90: 	xorl	%eax, %eax
    00000a92: 	nopw	(%rax,%rax) # Size: 6
.Ltmp414:
    00000a98: 	movzbl	(%r11,%rax), %edx
    00000a9d: 	movb	%dl, 0x1(%rdi,%rax,4)
    00000aa1: 	addq	$0x1, %rax
    00000aa5: 	cmpq	%rax, %r9
    00000aa8: 	jne	.Ltmp414 # Offset: 2728
    00000aaa: 	jmp	.Ltmp401 # Offset: 2730
    00000aaf: 	nop # Size: 1
.Ltmp403:
    00000ab0: 	xorl	%eax, %eax
    00000ab2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp415:
    00000ab8: 	movzbl	(%rcx,%rax), %edx
    00000abc: 	movb	%dl, 0x2(%rdi,%rax,4)
    00000ac0: 	addq	$0x1, %rax
    00000ac4: 	cmpq	%rax, %r9
    00000ac7: 	jne	.Ltmp415 # Offset: 2759
    00000ac9: 	jmp	.Ltmp406 # Offset: 2761
    00000ace: 	nop # Size: 2
.Ltmp393:
    00000ad0: 	xorl	%eax, %eax
    00000ad2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp416:
    00000ad8: 	movzbl	(%rbp,%rax), %edx
    00000add: 	movb	%dl, (%rdi,%rax,4)
    00000ae0: 	addq	$0x1, %rax
    00000ae4: 	cmpq	%rax, %r9
    00000ae7: 	jne	.Ltmp416 # Offset: 2791
    00000ae9: 	jmp	.Ltmp396 # Offset: 2793
    00000aee: 	nop # Size: 2
.Ltmp392:
    00000af0: 	retq # Offset: 2800
.Ltmp409:
    00000af1: 	movq	%r9, %r10
    00000af4: 	movq	%r8, %rsi
    00000af7: 	xorl	%edx, %edx
    00000af9: 	jmp	.Ltmp417 # Offset: 2809
.Ltmp394:
    00000afe: 	movq	%r9, %r15
    00000b01: 	movq	%rdi, %r13
    00000b04: 	movq	%rbp, %r14
    00000b07: 	xorl	%edx, %edx
    00000b09: 	jmp	.Ltmp418 # Offset: 2825
.Ltmp404:
    00000b0e: 	movq	%r9, %r12
    00000b11: 	movq	%rcx, %rbx
    00000b14: 	xorl	%edx, %edx
    00000b16: 	jmp	.Ltmp419 # Offset: 2838
.Ltmp399:
    00000b1b: 	movq	%r9, %r14
    00000b1e: 	movq	%r11, %r13
    00000b21: 	xorl	%edx, %edx
    00000b23: 	jmp	.Ltmp420 # Offset: 2851
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version2IhEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version3IhEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0xbc90
  Size        : 0xa6d
  MaxSize     : 0xa70
  Offset      : 0xbc90
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version3IhEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x460, %rsp
    00000015: 	movq	%rcx, -0x78(%rsp)
    0000001a: 	testl	%r9d, %r9d
    0000001d: 	jle	.Ltmp421 # Offset: 29
    00000023: 	movslq	%r9d, %rbp
    00000026: 	leal	-0x1(%r9), %r14d
    0000002a: 	movq	%rdi, %rax
    0000002d: 	movq	%rdx, %rdi
    00000030: 	cmpl	$0x6, %r14d
    00000034: 	leaq	(%rsi,%rbp), %rdx
    00000038: 	leaq	-0x2(%rax,%rbp,4), %r11
    0000003d: 	movq	%rcx, %r15
    00000040: 	seta	-0x69(%rsp)
    00000045: 	cmpq	%rdx, %rax
    00000048: 	movzbl	-0x69(%rsp), %ecx
    0000004d: 	movl	%r9d, %r12d
    00000050: 	setae	%r10b
    00000054: 	cmpq	%r11, %rsi
    00000057: 	setae	%dl
    0000005a: 	orl	%edx, %r10d
    0000005d: 	leaq	(%rdi,%rbp), %rdx
    00000061: 	cmpq	%rdx, %rax
    00000064: 	setae	%dl
    00000067: 	cmpq	%r11, %rdi
    0000006a: 	setae	%r11b
    0000006e: 	orl	%r11d, %edx
    00000071: 	testb	%dl, %r10b
    00000074: 	je	.Ltmp422 # Offset: 116
    0000007a: 	testb	%cl, %cl
    0000007c: 	je	.Ltmp422 # Offset: 124
    00000082: 	cmpl	$0xe, %r14d
    00000086: 	jbe	.Ltmp423 # Offset: 134
    0000008c: 	movl	%r9d, %ebx
    0000008f: 	movq	%rax, %rdx
    00000092: 	xorl	%r10d, %r10d
    00000095: 	movq	%r15, %rcx
    00000098: 	shrl	$0x4, %ebx
    0000009b: 	shlq	$0x4, %rbx
    0000009f: 	nop # Size: 1
.Ltmp424:
    000000a0: 	movdqu	(%rsi,%r10), %xmm1
    000000a6: 	movdqu	(%rdi,%r10), %xmm0
    000000ac: 	addq	$0x10, %r10
    000000b0: 	addq	$0x40, %rdx
    000000b4: 	movd	%xmm1, %r11d
    000000b9: 	movb	%r11b, -0x40(%rdx)
    000000bd: 	movaps	%xmm1, 0x448(%rsp)
    000000c5: 	movzbl	0x449(%rsp), %r11d
    000000ce: 	movb	%r11b, -0x3c(%rdx)
    000000d2: 	movaps	%xmm1, 0x438(%rsp)
    000000da: 	movzbl	0x43a(%rsp), %r11d
    000000e3: 	movb	%r11b, -0x38(%rdx)
    000000e7: 	movaps	%xmm1, 0x428(%rsp)
    000000ef: 	movzbl	0x42b(%rsp), %r11d
    000000f8: 	movb	%r11b, -0x34(%rdx)
    000000fc: 	movaps	%xmm1, 0x418(%rsp)
    00000104: 	movzbl	0x41c(%rsp), %r11d
    0000010d: 	movb	%r11b, -0x30(%rdx)
    00000111: 	movaps	%xmm1, 0x408(%rsp)
    00000119: 	movzbl	0x40d(%rsp), %r11d
    00000122: 	movb	%r11b, -0x2c(%rdx)
    00000126: 	movaps	%xmm1, 0x3f8(%rsp)
    0000012e: 	movzbl	0x3fe(%rsp), %r11d
    00000137: 	movb	%r11b, -0x28(%rdx)
    0000013b: 	movaps	%xmm1, 0x3e8(%rsp)
    00000143: 	movzbl	0x3ef(%rsp), %r11d
    0000014c: 	movb	%r11b, -0x24(%rdx)
    00000150: 	movaps	%xmm1, 0x3d8(%rsp)
    00000158: 	movzbl	0x3e0(%rsp), %r11d
    00000161: 	movb	%r11b, -0x20(%rdx)
    00000165: 	movaps	%xmm1, 0x3c8(%rsp)
    0000016d: 	movzbl	0x3d1(%rsp), %r11d
    00000176: 	movb	%r11b, -0x1c(%rdx)
    0000017a: 	movaps	%xmm1, 0x3b8(%rsp)
    00000182: 	movzbl	0x3c2(%rsp), %r11d
    0000018b: 	movb	%r11b, -0x18(%rdx)
    0000018f: 	movaps	%xmm1, 0x3a8(%rsp)
    00000197: 	movzbl	0x3b3(%rsp), %r11d
    000001a0: 	movb	%r11b, -0x14(%rdx)
    000001a4: 	movaps	%xmm1, 0x398(%rsp)
    000001ac: 	movzbl	0x3a4(%rsp), %r11d
    000001b5: 	movb	%r11b, -0x10(%rdx)
    000001b9: 	movaps	%xmm1, 0x388(%rsp)
    000001c1: 	movzbl	0x395(%rsp), %r11d
    000001ca: 	movb	%r11b, -0xc(%rdx)
    000001ce: 	movaps	%xmm1, 0x378(%rsp)
    000001d6: 	movzbl	0x386(%rsp), %r11d
    000001df: 	movb	%r11b, -0x8(%rdx)
    000001e3: 	movaps	%xmm1, 0x368(%rsp)
    000001eb: 	movzbl	0x377(%rsp), %r11d
    000001f4: 	movb	%r11b, -0x4(%rdx)
    000001f8: 	movd	%xmm0, %r11d
    000001fd: 	movb	%r11b, -0x3f(%rdx)
    00000201: 	movaps	%xmm0, 0x358(%rsp)
    00000209: 	movzbl	0x359(%rsp), %r11d
    00000212: 	movb	%r11b, -0x3b(%rdx)
    00000216: 	movaps	%xmm0, 0x348(%rsp)
    0000021e: 	movzbl	0x34a(%rsp), %r11d
    00000227: 	movb	%r11b, -0x37(%rdx)
    0000022b: 	movaps	%xmm0, 0x338(%rsp)
    00000233: 	movzbl	0x33b(%rsp), %r11d
    0000023c: 	movb	%r11b, -0x33(%rdx)
    00000240: 	movaps	%xmm0, 0x328(%rsp)
    00000248: 	movzbl	0x32c(%rsp), %r11d
    00000251: 	movb	%r11b, -0x2f(%rdx)
    00000255: 	movaps	%xmm0, 0x318(%rsp)
    0000025d: 	movzbl	0x31d(%rsp), %r11d
    00000266: 	movb	%r11b, -0x2b(%rdx)
    0000026a: 	movaps	%xmm0, 0x308(%rsp)
    00000272: 	movzbl	0x30e(%rsp), %r11d
    0000027b: 	movb	%r11b, -0x27(%rdx)
    0000027f: 	movaps	%xmm0, 0x2f8(%rsp)
    00000287: 	movzbl	0x2ff(%rsp), %r11d
    00000290: 	movb	%r11b, -0x23(%rdx)
    00000294: 	movaps	%xmm0, 0x2e8(%rsp)
    0000029c: 	movzbl	0x2f0(%rsp), %r11d
    000002a5: 	movb	%r11b, -0x1f(%rdx)
    000002a9: 	movaps	%xmm0, 0x2d8(%rsp)
    000002b1: 	movzbl	0x2e1(%rsp), %r11d
    000002ba: 	movb	%r11b, -0x1b(%rdx)
    000002be: 	movaps	%xmm0, 0x2c8(%rsp)
    000002c6: 	movzbl	0x2d2(%rsp), %r11d
    000002cf: 	movb	%r11b, -0x17(%rdx)
    000002d3: 	movaps	%xmm0, 0x2b8(%rsp)
    000002db: 	movzbl	0x2c3(%rsp), %r11d
    000002e4: 	movb	%r11b, -0x13(%rdx)
    000002e8: 	movaps	%xmm0, 0x2a8(%rsp)
    000002f0: 	movzbl	0x2b4(%rsp), %r11d
    000002f9: 	movb	%r11b, -0xf(%rdx)
    000002fd: 	movaps	%xmm0, 0x298(%rsp)
    00000305: 	movzbl	0x2a5(%rsp), %r11d
    0000030e: 	movb	%r11b, -0xb(%rdx)
    00000312: 	movaps	%xmm0, 0x288(%rsp)
    0000031a: 	movzbl	0x296(%rsp), %r11d
    00000323: 	movb	%r11b, -0x7(%rdx)
    00000327: 	movaps	%xmm0, 0x278(%rsp)
    0000032f: 	movzbl	0x287(%rsp), %r11d
    00000338: 	movb	%r11b, -0x3(%rdx)
    0000033c: 	cmpq	%rbx, %r10
    0000033f: 	jne	.Ltmp424 # Offset: 831
    00000345: 	movl	%r9d, %ebx
    00000348: 	movq	%rcx, -0x78(%rsp)
    0000034d: 	andl	$-0x10, %ebx
    00000350: 	movl	%ebx, %r11d
    00000353: 	cmpl	%ebx, %r9d
    00000356: 	je	.Ltmp425 # Offset: 854
    0000035c: 	movl	%r9d, %r13d
    0000035f: 	subl	%ebx, %r13d
    00000362: 	leal	-0x1(%r13), %edx
    00000366: 	cmpl	$0x6, %edx
    00000369: 	jbe	.Ltmp426 # Offset: 873
.Ltmp433:
    0000036f: 	movq	(%rsi,%rbx), %r10
    00000373: 	leaq	(%rax,%rbx,4), %rdx
    00000377: 	movq	(%rdi,%rbx), %rbx
    0000037b: 	movq	%r10, %r15
    0000037e: 	movb	%r10b, (%rdx)
    00000381: 	movq	%r10, %rcx
    00000384: 	shrq	$0x10, %r15
    00000388: 	movb	%bl, 0x1(%rdx)
    0000038b: 	movb	%r15b, 0x8(%rdx)
    0000038f: 	movq	%r10, %r15
    00000392: 	shrq	$0x18, %r15
    00000396: 	movb	%bh, 0x5(%rdx)
    00000399: 	movb	%r15b, 0xc(%rdx)
    0000039d: 	movq	%r10, %r15
    000003a0: 	shrq	$0x20, %r15
    000003a4: 	movb	%ch, 0x4(%rdx)
    000003a7: 	movb	%r15b, 0x10(%rdx)
    000003ab: 	movq	%r10, %r15
    000003ae: 	shrq	$0x28, %r15
    000003b2: 	movb	%r15b, 0x14(%rdx)
    000003b6: 	movq	%r10, %r15
    000003b9: 	shrq	$0x38, %r10
    000003bd: 	movb	%r10b, 0x1c(%rdx)
    000003c1: 	movq	%rbx, %r10
    000003c4: 	shrq	$0x30, %r15
    000003c8: 	shrq	$0x10, %r10
    000003cc: 	movb	%r15b, 0x18(%rdx)
    000003d0: 	movb	%r10b, 0x9(%rdx)
    000003d4: 	movq	%rbx, %r10
    000003d7: 	shrq	$0x18, %r10
    000003db: 	movb	%r10b, 0xd(%rdx)
    000003df: 	movq	%rbx, %r10
    000003e2: 	shrq	$0x20, %r10
    000003e6: 	movb	%r10b, 0x11(%rdx)
    000003ea: 	movq	%rbx, %r10
    000003ed: 	shrq	$0x28, %r10
    000003f1: 	movb	%r10b, 0x15(%rdx)
    000003f5: 	movq	%rbx, %r10
    000003f8: 	shrq	$0x38, %rbx
    000003fc: 	shrq	$0x30, %r10
    00000400: 	movb	%bl, 0x1d(%rdx)
    00000403: 	movb	%r10b, 0x19(%rdx)
    00000407: 	movl	%r13d, %edx
    0000040a: 	andl	$-0x8, %edx
    0000040d: 	addl	%edx, %r11d
    00000410: 	cmpl	%edx, %r13d
    00000413: 	je	.Ltmp425 # Offset: 1043
.Ltmp426:
    00000419: 	movslq	%r11d, %r10
    0000041c: 	leal	(,%r11,4), %edx
    00000424: 	movzbl	(%rsi,%r10), %r13d
    00000429: 	movslq	%edx, %rbx
    0000042c: 	movb	%r13b, (%rax,%rbx)
    00000430: 	movzbl	(%rdi,%r10), %r10d
    00000435: 	movb	%r10b, 0x1(%rax,%rbx)
    0000043a: 	leal	0x1(%r11), %r10d
    0000043e: 	cmpl	%r10d, %r9d
    00000441: 	jle	.Ltmp425 # Offset: 1089
    00000447: 	movslq	%r10d, %r10
    0000044a: 	leal	0x4(%rdx), %ebx
    0000044d: 	movzbl	(%rsi,%r10), %r13d
    00000452: 	movslq	%ebx, %rbx
    00000455: 	movb	%r13b, (%rax,%rbx)
    00000459: 	movzbl	(%rdi,%r10), %r10d
    0000045e: 	movb	%r10b, 0x1(%rax,%rbx)
    00000463: 	leal	0x2(%r11), %r10d
    00000467: 	cmpl	%r10d, %r9d
    0000046a: 	jle	.Ltmp425 # Offset: 1130
    00000470: 	movslq	%r10d, %r10
    00000473: 	leal	0x8(%rdx), %ebx
    00000476: 	movzbl	(%rsi,%r10), %r13d
    0000047b: 	movslq	%ebx, %rbx
    0000047e: 	movb	%r13b, (%rax,%rbx)
    00000482: 	movzbl	(%rdi,%r10), %r10d
    00000487: 	movb	%r10b, 0x1(%rax,%rbx)
    0000048c: 	leal	0x3(%r11), %r10d
    00000490: 	cmpl	%r10d, %r9d
    00000493: 	jle	.Ltmp425 # Offset: 1171
    00000499: 	movslq	%r10d, %r10
    0000049c: 	leal	0xc(%rdx), %ebx
    0000049f: 	movzbl	(%rsi,%r10), %r13d
    000004a4: 	movslq	%ebx, %rbx
    000004a7: 	movb	%r13b, (%rax,%rbx)
    000004ab: 	movzbl	(%rdi,%r10), %r10d
    000004b0: 	movb	%r10b, 0x1(%rax,%rbx)
    000004b5: 	leal	0x4(%r11), %r10d
    000004b9: 	cmpl	%r10d, %r9d
    000004bc: 	jle	.Ltmp425 # Offset: 1212
    000004be: 	movslq	%r10d, %r10
    000004c1: 	leal	0x10(%rdx), %ebx
    000004c4: 	movzbl	(%rsi,%r10), %r13d
    000004c9: 	movslq	%ebx, %rbx
    000004cc: 	movb	%r13b, (%rax,%rbx)
    000004d0: 	movzbl	(%rdi,%r10), %r10d
    000004d5: 	movb	%r10b, 0x1(%rax,%rbx)
    000004da: 	leal	0x5(%r11), %r10d
    000004de: 	cmpl	%r10d, %r9d
    000004e1: 	jle	.Ltmp425 # Offset: 1249
    000004e3: 	movslq	%r10d, %r10
    000004e6: 	leal	0x14(%rdx), %ebx
    000004e9: 	addl	$0x6, %r11d
    000004ed: 	movzbl	(%rsi,%r10), %r13d
    000004f2: 	movslq	%ebx, %rbx
    000004f5: 	movb	%r13b, (%rax,%rbx)
    000004f9: 	movzbl	(%rdi,%r10), %r10d
    000004fe: 	movb	%r10b, 0x1(%rax,%rbx)
    00000503: 	cmpl	%r11d, %r9d
    00000506: 	jle	.Ltmp425 # Offset: 1286
    00000508: 	movslq	%r11d, %r11
    0000050b: 	addl	$0x18, %edx
    0000050e: 	movzbl	(%rsi,%r11), %esi
    00000513: 	movslq	%edx, %rdx
    00000516: 	movb	%sil, (%rax,%rdx)
    0000051a: 	movzbl	(%rdi,%r11), %esi
    0000051f: 	movb	%sil, 0x1(%rax,%rdx)
.Ltmp425:
    00000524: 	movq	-0x78(%rsp), %rcx
    00000529: 	leaq	0x2(%rax), %rdx
    0000052d: 	leaq	(%rax,%rbp,4), %r10
    00000531: 	leaq	(%rcx,%rbp), %rsi
    00000535: 	cmpq	%rsi, %rdx
    00000538: 	setae	%dil
    0000053c: 	cmpq	%r10, %rcx
    0000053f: 	setae	%sil
    00000543: 	addq	%r8, %rbp
    00000546: 	orl	%esi, %edi
    00000548: 	cmpq	%rbp, %rdx
    0000054b: 	setae	%sil
    0000054f: 	cmpq	%r10, %r8
    00000552: 	setae	%r10b
    00000556: 	orl	%r10d, %esi
    00000559: 	testb	%sil, %dil
    0000055c: 	je	.Ltmp427 # Offset: 1372
    00000562: 	cmpb	$0x0, -0x69(%rsp)
    00000567: 	je	.Ltmp427 # Offset: 1383
    0000056d: 	cmpl	$0xe, %r14d
    00000571: 	jbe	.Ltmp428 # Offset: 1393
    00000577: 	movl	%r9d, %r10d
    0000057a: 	xorl	%esi, %esi
    0000057c: 	shrl	$0x4, %r10d
    00000580: 	shlq	$0x4, %r10
    00000584: 	nopl	(%rax) # Size: 4
.Ltmp429:
    00000588: 	movdqu	(%rcx,%rsi), %xmm1
    0000058d: 	movdqu	(%r8,%rsi), %xmm0
    00000593: 	addq	$0x10, %rsi
    00000597: 	addq	$0x40, %rdx
    0000059b: 	movd	%xmm1, %edi
    0000059f: 	movb	%dil, -0x40(%rdx)
    000005a3: 	movaps	%xmm1, 0x1e8(%rsp)
    000005ab: 	movzbl	0x1e9(%rsp), %edi
    000005b3: 	movb	%dil, -0x3c(%rdx)
    000005b7: 	movaps	%xmm1, 0x1d8(%rsp)
    000005bf: 	movzbl	0x1da(%rsp), %edi
    000005c7: 	movb	%dil, -0x38(%rdx)
    000005cb: 	movaps	%xmm1, 0x1c8(%rsp)
    000005d3: 	movzbl	0x1cb(%rsp), %edi
    000005db: 	movb	%dil, -0x34(%rdx)
    000005df: 	movaps	%xmm1, 0x1b8(%rsp)
    000005e7: 	movzbl	0x1bc(%rsp), %edi
    000005ef: 	movb	%dil, -0x30(%rdx)
    000005f3: 	movaps	%xmm1, 0x1a8(%rsp)
    000005fb: 	movzbl	0x1ad(%rsp), %edi
    00000603: 	movb	%dil, -0x2c(%rdx)
    00000607: 	movaps	%xmm1, 0x198(%rsp)
    0000060f: 	movzbl	0x19e(%rsp), %edi
    00000617: 	movb	%dil, -0x28(%rdx)
    0000061b: 	movaps	%xmm1, 0x188(%rsp)
    00000623: 	movzbl	0x18f(%rsp), %edi
    0000062b: 	movb	%dil, -0x24(%rdx)
    0000062f: 	movaps	%xmm1, 0x178(%rsp)
    00000637: 	movzbl	0x180(%rsp), %edi
    0000063f: 	movb	%dil, -0x20(%rdx)
    00000643: 	movaps	%xmm1, 0x168(%rsp)
    0000064b: 	movzbl	0x171(%rsp), %edi
    00000653: 	movb	%dil, -0x1c(%rdx)
    00000657: 	movaps	%xmm1, 0x158(%rsp)
    0000065f: 	movzbl	0x162(%rsp), %edi
    00000667: 	movb	%dil, -0x18(%rdx)
    0000066b: 	movaps	%xmm1, 0x148(%rsp)
    00000673: 	movzbl	0x153(%rsp), %edi
    0000067b: 	movb	%dil, -0x14(%rdx)
    0000067f: 	movaps	%xmm1, 0x138(%rsp)
    00000687: 	movzbl	0x144(%rsp), %edi
    0000068f: 	movb	%dil, -0x10(%rdx)
    00000693: 	movaps	%xmm1, 0x128(%rsp)
    0000069b: 	movzbl	0x135(%rsp), %edi
    000006a3: 	movb	%dil, -0xc(%rdx)
    000006a7: 	movaps	%xmm1, 0x118(%rsp)
    000006af: 	movzbl	0x126(%rsp), %edi
    000006b7: 	movb	%dil, -0x8(%rdx)
    000006bb: 	movaps	%xmm1, 0x108(%rsp)
    000006c3: 	movzbl	0x117(%rsp), %edi
    000006cb: 	movb	%dil, -0x4(%rdx)
    000006cf: 	movd	%xmm0, %edi
    000006d3: 	movb	%dil, -0x3f(%rdx)
    000006d7: 	movaps	%xmm0, 0xf8(%rsp)
    000006df: 	movzbl	0xf9(%rsp), %edi
    000006e7: 	movb	%dil, -0x3b(%rdx)
    000006eb: 	movaps	%xmm0, 0xe8(%rsp)
    000006f3: 	movzbl	0xea(%rsp), %edi
    000006fb: 	movb	%dil, -0x37(%rdx)
    000006ff: 	movaps	%xmm0, 0xd8(%rsp)
    00000707: 	movzbl	0xdb(%rsp), %edi
    0000070f: 	movb	%dil, -0x33(%rdx)
    00000713: 	movaps	%xmm0, 0xc8(%rsp)
    0000071b: 	movzbl	0xcc(%rsp), %edi
    00000723: 	movb	%dil, -0x2f(%rdx)
    00000727: 	movaps	%xmm0, 0xb8(%rsp)
    0000072f: 	movzbl	0xbd(%rsp), %edi
    00000737: 	movb	%dil, -0x2b(%rdx)
    0000073b: 	movaps	%xmm0, 0xa8(%rsp)
    00000743: 	movzbl	0xae(%rsp), %edi
    0000074b: 	movb	%dil, -0x27(%rdx)
    0000074f: 	movaps	%xmm0, 0x98(%rsp)
    00000757: 	movzbl	0x9f(%rsp), %edi
    0000075f: 	movb	%dil, -0x23(%rdx)
    00000763: 	movaps	%xmm0, 0x88(%rsp)
    0000076b: 	movzbl	0x90(%rsp), %edi
    00000773: 	movb	%dil, -0x1f(%rdx)
    00000777: 	movaps	%xmm0, 0x78(%rsp)
    0000077c: 	movzbl	0x81(%rsp), %edi
    00000784: 	movb	%dil, -0x1b(%rdx)
    00000788: 	movaps	%xmm0, 0x68(%rsp)
    0000078d: 	movzbl	0x72(%rsp), %edi
    00000792: 	movb	%dil, -0x17(%rdx)
    00000796: 	movaps	%xmm0, 0x58(%rsp)
    0000079b: 	movzbl	0x63(%rsp), %edi
    000007a0: 	movb	%dil, -0x13(%rdx)
    000007a4: 	movaps	%xmm0, 0x48(%rsp)
    000007a9: 	movzbl	0x54(%rsp), %edi
    000007ae: 	movb	%dil, -0xf(%rdx)
    000007b2: 	movaps	%xmm0, 0x38(%rsp)
    000007b7: 	movzbl	0x45(%rsp), %edi
    000007bc: 	movb	%dil, -0xb(%rdx)
    000007c0: 	movaps	%xmm0, 0x28(%rsp)
    000007c5: 	movzbl	0x36(%rsp), %edi
    000007ca: 	movb	%dil, -0x7(%rdx)
    000007ce: 	movaps	%xmm0, 0x18(%rsp)
    000007d3: 	movzbl	0x27(%rsp), %edi
    000007d8: 	movb	%dil, -0x3(%rdx)
    000007dc: 	cmpq	%rsi, %r10
    000007df: 	jne	.Ltmp429 # Offset: 2015
    000007e5: 	movl	%r9d, %r10d
    000007e8: 	movq	%rcx, -0x78(%rsp)
    000007ed: 	andl	$-0x10, %r10d
    000007f1: 	movl	%r10d, %edi
    000007f4: 	cmpl	%r9d, %r10d
    000007f7: 	je	.Ltmp421 # Offset: 2039
    000007fd: 	movl	%r9d, %r12d
    00000800: 	subl	%r10d, %r12d
    00000803: 	leal	-0x1(%r12), %edx
    00000808: 	cmpl	$0x6, %edx
    0000080b: 	jbe	.Ltmp430 # Offset: 2059
.Ltmp434:
    00000811: 	movq	-0x78(%rsp), %rcx
    00000816: 	movq	(%r8,%r10), %rbx
    0000081a: 	leaq	0x2(%rax,%r10,4), %rdx
    0000081f: 	movq	(%rcx,%r10), %rsi
    00000823: 	movb	%bl, 0x1(%rdx)
    00000826: 	movb	%bh, 0x5(%rdx)
    00000829: 	movq	%rsi, %r10
    0000082c: 	movb	%sil, (%rdx)
    0000082f: 	movq	%rsi, %rcx
    00000832: 	shrq	$0x10, %r10
    00000836: 	movb	%ch, 0x4(%rdx)
    00000839: 	movb	%r10b, 0x8(%rdx)
    0000083d: 	movq	%rsi, %r10
    00000840: 	shrq	$0x18, %r10
    00000844: 	movb	%r10b, 0xc(%rdx)
    00000848: 	movq	%rsi, %r10
    0000084b: 	shrq	$0x20, %r10
    0000084f: 	movb	%r10b, 0x10(%rdx)
    00000853: 	movq	%rsi, %r10
    00000856: 	shrq	$0x28, %r10
    0000085a: 	movb	%r10b, 0x14(%rdx)
    0000085e: 	movq	%rsi, %r10
    00000861: 	shrq	$0x38, %rsi
    00000865: 	movb	%sil, 0x1c(%rdx)
    00000869: 	movq	%rbx, %rsi
    0000086c: 	shrq	$0x30, %r10
    00000870: 	shrq	$0x10, %rsi
    00000874: 	movb	%r10b, 0x18(%rdx)
    00000878: 	movb	%sil, 0x9(%rdx)
    0000087c: 	movq	%rbx, %rsi
    0000087f: 	shrq	$0x18, %rsi
    00000883: 	movb	%sil, 0xd(%rdx)
    00000887: 	movq	%rbx, %rsi
    0000088a: 	shrq	$0x20, %rsi
    0000088e: 	movb	%sil, 0x11(%rdx)
    00000892: 	movq	%rbx, %rsi
    00000895: 	shrq	$0x28, %rsi
    00000899: 	movb	%sil, 0x15(%rdx)
    0000089d: 	movq	%rbx, %rsi
    000008a0: 	shrq	$0x38, %rbx
    000008a4: 	shrq	$0x30, %rsi
    000008a8: 	movb	%bl, 0x1d(%rdx)
    000008ab: 	movb	%sil, 0x19(%rdx)
    000008af: 	movl	%r12d, %edx
    000008b2: 	andl	$-0x8, %edx
    000008b5: 	addl	%edx, %edi
    000008b7: 	cmpl	%r12d, %edx
    000008ba: 	je	.Ltmp421 # Offset: 2234
.Ltmp430:
    000008c0: 	movq	-0x78(%rsp), %rcx
    000008c5: 	movslq	%edi, %r10
    000008c8: 	leal	(,%rdi,4), %edx
    000008cf: 	movslq	%edx, %rsi
    000008d2: 	movzbl	(%rcx,%r10), %r11d
    000008d7: 	movb	%r11b, 0x2(%rax,%rsi)
    000008dc: 	movzbl	(%r8,%r10), %r10d
    000008e1: 	movb	%r10b, 0x3(%rax,%rsi)
    000008e6: 	leal	0x1(%rdi), %esi
    000008e9: 	cmpl	%esi, %r9d
    000008ec: 	jle	.Ltmp421 # Offset: 2284
    000008f2: 	movslq	%esi, %rsi
    000008f5: 	leal	0x4(%rdx), %r10d
    000008f9: 	movzbl	(%rcx,%rsi), %r11d
    000008fe: 	movslq	%r10d, %r10
    00000901: 	movb	%r11b, 0x2(%rax,%r10)
    00000906: 	movzbl	(%r8,%rsi), %esi
    0000090b: 	movb	%sil, 0x3(%rax,%r10)
    00000910: 	leal	0x2(%rdi), %esi
    00000913: 	cmpl	%r9d, %esi
    00000916: 	jge	.Ltmp421 # Offset: 2326
    0000091c: 	movslq	%esi, %rsi
    0000091f: 	leal	0x8(%rdx), %r10d
    00000923: 	movzbl	(%rcx,%rsi), %r11d
    00000928: 	movslq	%r10d, %r10
    0000092b: 	movb	%r11b, 0x2(%rax,%r10)
    00000930: 	movzbl	(%r8,%rsi), %esi
    00000935: 	movb	%sil, 0x3(%rax,%r10)
    0000093a: 	leal	0x3(%rdi), %esi
    0000093d: 	cmpl	%esi, %r9d
    00000940: 	jle	.Ltmp421 # Offset: 2368
    00000946: 	movslq	%esi, %rsi
    00000949: 	leal	0xc(%rdx), %r10d
    0000094d: 	movzbl	(%rcx,%rsi), %r11d
    00000952: 	movslq	%r10d, %r10
    00000955: 	movb	%r11b, 0x2(%rax,%r10)
    0000095a: 	movzbl	(%r8,%rsi), %esi
    0000095f: 	movb	%sil, 0x3(%rax,%r10)
    00000964: 	leal	0x4(%rdi), %esi
    00000967: 	cmpl	%esi, %r9d
    0000096a: 	jle	.Ltmp421 # Offset: 2410
    0000096c: 	movslq	%esi, %rsi
    0000096f: 	leal	0x10(%rdx), %r10d
    00000973: 	movzbl	(%rcx,%rsi), %r11d
    00000978: 	movslq	%r10d, %r10
    0000097b: 	movb	%r11b, 0x2(%rax,%r10)
    00000980: 	movzbl	(%r8,%rsi), %esi
    00000985: 	movb	%sil, 0x3(%rax,%r10)
    0000098a: 	leal	0x5(%rdi), %esi
    0000098d: 	cmpl	%esi, %r9d
    00000990: 	jle	.Ltmp421 # Offset: 2448
    00000992: 	movslq	%esi, %rsi
    00000995: 	leal	0x14(%rdx), %r10d
    00000999: 	addl	$0x6, %edi
    0000099c: 	movzbl	(%rcx,%rsi), %r11d
    000009a1: 	movslq	%r10d, %r10
    000009a4: 	movb	%r11b, 0x2(%rax,%r10)
    000009a9: 	movzbl	(%r8,%rsi), %esi
    000009ae: 	movb	%sil, 0x3(%rax,%r10)
    000009b3: 	cmpl	%edi, %r9d
    000009b6: 	jle	.Ltmp421 # Offset: 2486
    000009b8: 	movslq	%edi, %rdi
    000009bb: 	addl	$0x18, %edx
    000009be: 	movzbl	(%rcx,%rdi), %ecx
    000009c2: 	movslq	%edx, %rdx
    000009c5: 	movb	%cl, 0x2(%rax,%rdx)
    000009c9: 	movzbl	(%r8,%rdi), %ecx
    000009ce: 	movb	%cl, 0x3(%rax,%rdx)
.Ltmp421:
    000009d2: 	addq	$0x460, %rsp
    000009d9: 	popq	%rbx
    000009da: 	popq	%rbp
    000009db: 	popq	%r12
    000009dd: 	popq	%r13
    000009df: 	popq	%r14
    000009e1: 	popq	%r15
    000009e3: 	retq # Offset: 2531
    000009e4: 	nopl	(%rax) # Size: 4
.Ltmp427:
    000009e8: 	movq	-0x78(%rsp), %rcx
    000009ed: 	movl	%r9d, %r9d
    000009f0: 	xorl	%edx, %edx
    000009f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp431:
    000009f8: 	movzbl	(%rcx,%rdx), %esi
    000009fc: 	movb	%sil, 0x2(%rax,%rdx,4)
    00000a01: 	movzbl	(%r8,%rdx), %esi
    00000a06: 	movb	%sil, 0x3(%rax,%rdx,4)
    00000a0b: 	addq	$0x1, %rdx
    00000a0f: 	cmpq	%r9, %rdx
    00000a12: 	jne	.Ltmp431 # Offset: 2578
    00000a14: 	jmp	.Ltmp421 # Offset: 2580
    00000a16: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp422:
    00000a20: 	movq	-0x78(%rsp), %rcx
    00000a25: 	movl	%r9d, %r11d
    00000a28: 	xorl	%edx, %edx
    00000a2a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp432:
    00000a30: 	movzbl	(%rsi,%rdx), %r10d
    00000a35: 	movb	%r10b, (%rax,%rdx,4)
    00000a39: 	movzbl	(%rdi,%rdx), %r10d
    00000a3e: 	movb	%r10b, 0x1(%rax,%rdx,4)
    00000a43: 	addq	$0x1, %rdx
    00000a47: 	cmpq	%rdx, %r11
    00000a4a: 	jne	.Ltmp432 # Offset: 2634
    00000a4c: 	movq	%rcx, -0x78(%rsp)
    00000a51: 	jmp	.Ltmp425 # Offset: 2641
.Ltmp423:
    00000a56: 	movl	%r9d, %r13d
    00000a59: 	xorl	%ebx, %ebx
    00000a5b: 	xorl	%r11d, %r11d
    00000a5e: 	jmp	.Ltmp433 # Offset: 2654
.Ltmp428:
    00000a63: 	xorl	%r10d, %r10d
    00000a66: 	xorl	%edi, %edi
    00000a68: 	jmp	.Ltmp434 # Offset: 2664
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version3IhEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version4IhEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0xc700
  Size        : 0xd80
  MaxSize     : 0xd80
  Offset      : 0xc700
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version4IhEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x480, %rsp
    00000015: 	movl	%r9d, -0x50(%rsp)
    0000001a: 	movl	%r9d, -0x4c(%rsp)
    0000001f: 	movl	$0x0, -0x6c(%rsp)
    00000027: 	testl	%r9d, %r9d
    0000002a: 	jle	.Ltmp435 # Offset: 42
    00000030: 	movq	%rsi, %rbx
    00000033: 	movq	%rdx, %r10
    00000036: 	movq	%rcx, %rbp
    00000039: 	movq	%r8, %r14
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp457:
    00000040: 	addl	$0x400, -0x6c(%rsp)
    00000048: 	movl	-0x6c(%rsp), %eax
    0000004c: 	cmpl	-0x50(%rsp), %eax
    00000050: 	jg	.Ltmp436 # Offset: 80
    00000056: 	leaq	0x400(%rbx), %rdx
    0000005d: 	movl	$0xffc, %r11d
    00000063: 	movl	$0x400, %ecx
    00000068: 	cmpq	%rdx, %rdi
    0000006b: 	jae	.Ltmp437 # Offset: 107
    0000006d: 	leaq	0xffd(%rdi), %rax
    00000074: 	cmpq	%rax, %rbx
    00000077: 	jb	.Ltmp438 # Offset: 119
.Ltmp437:
    0000007d: 	leaq	0x400(%rbx), %rsi
    00000084: 	movl	$0x400, %eax
    00000089: 	movq	$0x1000, -0x58(%rsp)
    00000092: 	movq	%rsi, -0x60(%rsp)
.Ltmp459:
    00000097: 	movq	%rcx, %r9
    0000009a: 	movq	%rbx, %rsi
    0000009d: 	movq	%rdi, %rdx
    000000a0: 	andq	$-0x10, %r9
    000000a4: 	addq	%rbx, %r9
    000000a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp439:
    000000b0: 	movdqu	(%rsi), %xmm0
    000000b4: 	addq	$0x10, %rsi
    000000b8: 	addq	$0x40, %rdx
    000000bc: 	movd	%xmm0, %r8d
    000000c1: 	movb	%r8b, -0x40(%rdx)
    000000c5: 	movaps	%xmm0, 0x468(%rsp)
    000000cd: 	movzbl	0x469(%rsp), %r8d
    000000d6: 	movb	%r8b, -0x3c(%rdx)
    000000da: 	movaps	%xmm0, 0x458(%rsp)
    000000e2: 	movzbl	0x45a(%rsp), %r8d
    000000eb: 	movb	%r8b, -0x38(%rdx)
    000000ef: 	movaps	%xmm0, 0x448(%rsp)
    000000f7: 	movzbl	0x44b(%rsp), %r8d
    00000100: 	movb	%r8b, -0x34(%rdx)
    00000104: 	movaps	%xmm0, 0x438(%rsp)
    0000010c: 	movzbl	0x43c(%rsp), %r8d
    00000115: 	movb	%r8b, -0x30(%rdx)
    00000119: 	movaps	%xmm0, 0x428(%rsp)
    00000121: 	movzbl	0x42d(%rsp), %r8d
    0000012a: 	movb	%r8b, -0x2c(%rdx)
    0000012e: 	movaps	%xmm0, 0x418(%rsp)
    00000136: 	movzbl	0x41e(%rsp), %r8d
    0000013f: 	movb	%r8b, -0x28(%rdx)
    00000143: 	movaps	%xmm0, 0x408(%rsp)
    0000014b: 	movzbl	0x40f(%rsp), %r8d
    00000154: 	movb	%r8b, -0x24(%rdx)
    00000158: 	movaps	%xmm0, 0x3f8(%rsp)
    00000160: 	movzbl	0x400(%rsp), %r8d
    00000169: 	movb	%r8b, -0x20(%rdx)
    0000016d: 	movaps	%xmm0, 0x3e8(%rsp)
    00000175: 	movzbl	0x3f1(%rsp), %r8d
    0000017e: 	movb	%r8b, -0x1c(%rdx)
    00000182: 	movaps	%xmm0, 0x3d8(%rsp)
    0000018a: 	movzbl	0x3e2(%rsp), %r8d
    00000193: 	movb	%r8b, -0x18(%rdx)
    00000197: 	movaps	%xmm0, 0x3c8(%rsp)
    0000019f: 	movzbl	0x3d3(%rsp), %r8d
    000001a8: 	movb	%r8b, -0x14(%rdx)
    000001ac: 	movaps	%xmm0, 0x3b8(%rsp)
    000001b4: 	movzbl	0x3c4(%rsp), %r8d
    000001bd: 	movb	%r8b, -0x10(%rdx)
    000001c1: 	movaps	%xmm0, 0x3a8(%rsp)
    000001c9: 	movzbl	0x3b5(%rsp), %r8d
    000001d2: 	movb	%r8b, -0xc(%rdx)
    000001d6: 	movaps	%xmm0, 0x398(%rsp)
    000001de: 	movzbl	0x3a6(%rsp), %r8d
    000001e7: 	movb	%r8b, -0x8(%rdx)
    000001eb: 	movaps	%xmm0, 0x388(%rsp)
    000001f3: 	movzbl	0x397(%rsp), %r8d
    000001fc: 	movb	%r8b, -0x4(%rdx)
    00000200: 	cmpq	%rsi, %r9
    00000203: 	jne	.Ltmp439 # Offset: 515
    00000209: 	movq	%rcx, %rsi
    0000020c: 	andq	$-0x10, %rsi
    00000210: 	leaq	(%rbx,%rsi), %r12
    00000214: 	leaq	(%rdi,%rsi,4), %r9
    00000218: 	cmpq	%rsi, %rcx
    0000021b: 	je	.Ltmp440 # Offset: 539
.Ltmp460:
    00000221: 	movq	%rcx, %r13
    00000224: 	subq	%rsi, %r13
    00000227: 	leaq	-0x1(%r13), %rdx
    0000022b: 	cmpq	$0x6, %rdx
    0000022f: 	jbe	.Ltmp441 # Offset: 559
    00000235: 	movq	(%rbx,%rsi), %rdx
    00000239: 	leaq	(%rdi,%rsi,4), %r8
    0000023d: 	movzbl	%dh, %ebx
    00000240: 	movq	%rdx, 0x380(%rsp)
    00000248: 	movb	%dl, (%r8)
    0000024b: 	movq	%rdx, 0x378(%rsp)
    00000253: 	movb	%bl, 0x4(%r8)
    00000257: 	movq	%rdx, %rbx
    0000025a: 	shrq	$0x10, %rbx
    0000025e: 	movq	%rdx, 0x370(%rsp)
    00000266: 	movb	%bl, 0x8(%r8)
    0000026a: 	movq	%rdx, %rbx
    0000026d: 	shrq	$0x18, %rbx
    00000271: 	movq	%rdx, 0x368(%rsp)
    00000279: 	movb	%bl, 0xc(%r8)
    0000027d: 	movq	%rdx, %rbx
    00000280: 	shrq	$0x20, %rbx
    00000284: 	movq	%rdx, 0x360(%rsp)
    0000028c: 	movb	%bl, 0x10(%r8)
    00000290: 	movq	%rdx, %rbx
    00000293: 	shrq	$0x28, %rbx
    00000297: 	movq	%rdx, 0x358(%rsp)
    0000029f: 	movb	%bl, 0x14(%r8)
    000002a3: 	movq	%rdx, %rbx
    000002a6: 	shrq	$0x30, %rbx
    000002aa: 	movq	%rdx, 0x350(%rsp)
    000002b2: 	movb	%bl, 0x18(%r8)
    000002b6: 	movq	%rdx, %rbx
    000002b9: 	movq	%rdx, 0x348(%rsp)
    000002c1: 	movq	%r13, %rdx
    000002c4: 	shrq	$0x38, %rbx
    000002c8: 	andq	$-0x8, %rdx
    000002cc: 	movb	%bl, 0x1c(%r8)
    000002d0: 	addq	%rdx, %r12
    000002d3: 	leaq	(%r9,%rdx,4), %r9
    000002d7: 	addq	%rdx, %rsi
    000002da: 	cmpq	%rdx, %r13
    000002dd: 	je	.Ltmp440 # Offset: 733
.Ltmp441:
    000002df: 	movzbl	(%r12), %edx
    000002e4: 	movb	%dl, (%r9)
    000002e7: 	leaq	0x1(%rsi), %rdx
    000002eb: 	cmpq	%rdx, %rax
    000002ee: 	jbe	.Ltmp440 # Offset: 750
    000002f0: 	movzbl	0x1(%r12), %edx
    000002f6: 	movb	%dl, 0x4(%r9)
    000002fa: 	leaq	0x2(%rsi), %rdx
    000002fe: 	cmpq	%rdx, %rax
    00000301: 	jbe	.Ltmp440 # Offset: 769
    00000303: 	movzbl	0x2(%r12), %edx
    00000309: 	movb	%dl, 0x8(%r9)
    0000030d: 	leaq	0x3(%rsi), %rdx
    00000311: 	cmpq	%rdx, %rax
    00000314: 	jbe	.Ltmp440 # Offset: 788
    00000316: 	movzbl	0x3(%r12), %edx
    0000031c: 	movb	%dl, 0xc(%r9)
    00000320: 	leaq	0x4(%rsi), %rdx
    00000324: 	cmpq	%rdx, %rax
    00000327: 	jbe	.Ltmp440 # Offset: 807
    00000329: 	movzbl	0x4(%r12), %edx
    0000032f: 	movb	%dl, 0x10(%r9)
    00000333: 	leaq	0x5(%rsi), %rdx
    00000337: 	cmpq	%rdx, %rax
    0000033a: 	jbe	.Ltmp440 # Offset: 826
    0000033c: 	movzbl	0x5(%r12), %edx
    00000342: 	addq	$0x6, %rsi
    00000346: 	movb	%dl, 0x14(%r9)
    0000034a: 	cmpq	%rsi, %rax
    0000034d: 	jbe	.Ltmp440 # Offset: 845
    0000034f: 	movzbl	0x6(%r12), %edx
    00000355: 	movb	%dl, 0x18(%r9)
.Ltmp440:
    00000359: 	movl	$0x1, %r13d
.Ltmp462:
    0000035f: 	testq	%rax, %rax
    00000362: 	leaq	0x2(%r11), %rdx
    00000366: 	leaq	0x1(%rdi), %r9
    0000036a: 	movl	$0x2, %ebx
    0000036f: 	cmoveq	%rbx, %rdx
    00000373: 	addq	%rdi, %rdx
    00000376: 	cmpq	%rdx, %r10
    00000379: 	leaq	(%r10,%rcx), %rdx
    0000037d: 	setae	%sil
    00000381: 	cmpq	%rdx, %r9
    00000384: 	setae	%dl
    00000387: 	orb	%sil, %dl
    0000038a: 	je	.Ltmp442 # Offset: 906
    00000390: 	testb	%r13b, %r13b
    00000393: 	je	.Ltmp442 # Offset: 915
    00000399: 	cmpq	$0xf, %rax
    0000039d: 	jbe	.Ltmp443 # Offset: 925
    000003a3: 	movq	%rcx, %rbx
    000003a6: 	movq	%r10, %rsi
    000003a9: 	movq	%r9, %rdx
    000003ac: 	andq	$-0x10, %rbx
    000003b0: 	addq	%r10, %rbx
    000003b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp444:
    000003b8: 	movdqu	(%rsi), %xmm0
    000003bc: 	addq	$0x10, %rsi
    000003c0: 	addq	$0x40, %rdx
    000003c4: 	movd	%xmm0, %r8d
    000003c9: 	movb	%r8b, -0x40(%rdx)
    000003cd: 	movaps	%xmm0, 0x2f8(%rsp)
    000003d5: 	movzbl	0x2f9(%rsp), %r8d
    000003de: 	movb	%r8b, -0x3c(%rdx)
    000003e2: 	movaps	%xmm0, 0x2e8(%rsp)
    000003ea: 	movzbl	0x2ea(%rsp), %r8d
    000003f3: 	movb	%r8b, -0x38(%rdx)
    000003f7: 	movaps	%xmm0, 0x2d8(%rsp)
    000003ff: 	movzbl	0x2db(%rsp), %r8d
    00000408: 	movb	%r8b, -0x34(%rdx)
    0000040c: 	movaps	%xmm0, 0x2c8(%rsp)
    00000414: 	movzbl	0x2cc(%rsp), %r8d
    0000041d: 	movb	%r8b, -0x30(%rdx)
    00000421: 	movaps	%xmm0, 0x2b8(%rsp)
    00000429: 	movzbl	0x2bd(%rsp), %r8d
    00000432: 	movb	%r8b, -0x2c(%rdx)
    00000436: 	movaps	%xmm0, 0x2a8(%rsp)
    0000043e: 	movzbl	0x2ae(%rsp), %r8d
    00000447: 	movb	%r8b, -0x28(%rdx)
    0000044b: 	movaps	%xmm0, 0x298(%rsp)
    00000453: 	movzbl	0x29f(%rsp), %r8d
    0000045c: 	movb	%r8b, -0x24(%rdx)
    00000460: 	movaps	%xmm0, 0x288(%rsp)
    00000468: 	movzbl	0x290(%rsp), %r8d
    00000471: 	movb	%r8b, -0x20(%rdx)
    00000475: 	movaps	%xmm0, 0x278(%rsp)
    0000047d: 	movzbl	0x281(%rsp), %r8d
    00000486: 	movb	%r8b, -0x1c(%rdx)
    0000048a: 	movaps	%xmm0, 0x268(%rsp)
    00000492: 	movzbl	0x272(%rsp), %r8d
    0000049b: 	movb	%r8b, -0x18(%rdx)
    0000049f: 	movaps	%xmm0, 0x258(%rsp)
    000004a7: 	movzbl	0x263(%rsp), %r8d
    000004b0: 	movb	%r8b, -0x14(%rdx)
    000004b4: 	movaps	%xmm0, 0x248(%rsp)
    000004bc: 	movzbl	0x254(%rsp), %r8d
    000004c5: 	movb	%r8b, -0x10(%rdx)
    000004c9: 	movaps	%xmm0, 0x238(%rsp)
    000004d1: 	movzbl	0x245(%rsp), %r8d
    000004da: 	movb	%r8b, -0xc(%rdx)
    000004de: 	movaps	%xmm0, 0x228(%rsp)
    000004e6: 	movzbl	0x236(%rsp), %r8d
    000004ef: 	movb	%r8b, -0x8(%rdx)
    000004f3: 	movaps	%xmm0, 0x218(%rsp)
    000004fb: 	movzbl	0x227(%rsp), %r8d
    00000504: 	movb	%r8b, -0x4(%rdx)
    00000508: 	cmpq	%rsi, %rbx
    0000050b: 	jne	.Ltmp444 # Offset: 1291
    00000511: 	movq	%rcx, %rsi
    00000514: 	andq	$-0x10, %rsi
    00000518: 	leaq	(%r10,%rsi), %rbx
    0000051c: 	leaq	(%r9,%rsi,4), %r9
    00000520: 	movq	%rbx, -0x68(%rsp)
    00000525: 	cmpq	%rsi, %rcx
    00000528: 	je	.Ltmp445 # Offset: 1320
.Ltmp468:
    0000052e: 	movq	%rcx, %r12
    00000531: 	subq	%rsi, %r12
    00000534: 	leaq	-0x1(%r12), %rdx
    00000539: 	cmpq	$0x6, %rdx
    0000053d: 	jbe	.Ltmp446 # Offset: 1341
    00000543: 	movq	(%r10,%rsi), %rdx
    00000547: 	leaq	0x1(%rdi,%rsi,4), %r8
    0000054c: 	movq	%rdx, %r15
    0000054f: 	movzbl	%dh, %ebx
    00000552: 	movq	%rdx, 0x340(%rsp)
    0000055a: 	shrq	$0x10, %r15
    0000055e: 	movb	%dl, (%r8)
    00000561: 	movq	%rdx, 0x338(%rsp)
    00000569: 	movb	%bl, 0x4(%r8)
    0000056d: 	movq	%rdx, %rbx
    00000570: 	movq	%rdx, 0x330(%rsp)
    00000578: 	shrq	$0x38, %rbx
    0000057c: 	movb	%r15b, 0x8(%r8)
    00000580: 	movq	%rdx, %r15
    00000583: 	shrq	$0x18, %r15
    00000587: 	movq	%rdx, 0x328(%rsp)
    0000058f: 	movb	%r15b, 0xc(%r8)
    00000593: 	movq	%rdx, %r15
    00000596: 	shrq	$0x20, %r15
    0000059a: 	movq	%rdx, 0x320(%rsp)
    000005a2: 	movb	%r15b, 0x10(%r8)
    000005a6: 	movq	%rdx, %r15
    000005a9: 	shrq	$0x28, %r15
    000005ad: 	movq	%rdx, 0x318(%rsp)
    000005b5: 	movb	%r15b, 0x14(%r8)
    000005b9: 	movq	%rdx, %r15
    000005bc: 	shrq	$0x30, %r15
    000005c0: 	movq	%rdx, 0x310(%rsp)
    000005c8: 	movb	%r15b, 0x18(%r8)
    000005cc: 	movq	%rdx, 0x308(%rsp)
    000005d4: 	movq	%r12, %rdx
    000005d7: 	andq	$-0x8, %rdx
    000005db: 	movb	%bl, 0x1c(%r8)
    000005df: 	addq	%rdx, -0x68(%rsp)
    000005e4: 	leaq	(%r9,%rdx,4), %r9
    000005e8: 	addq	%rdx, %rsi
    000005eb: 	cmpq	%rdx, %r12
    000005ee: 	je	.Ltmp445 # Offset: 1518
.Ltmp446:
    000005f0: 	movq	-0x68(%rsp), %rbx
    000005f5: 	movzbl	(%rbx), %edx
    000005f8: 	movb	%dl, (%r9)
    000005fb: 	leaq	0x1(%rsi), %rdx
    000005ff: 	cmpq	%rdx, %rax
    00000602: 	jbe	.Ltmp445 # Offset: 1538
    00000604: 	movzbl	0x1(%rbx), %edx
    00000608: 	movb	%dl, 0x4(%r9)
    0000060c: 	leaq	0x2(%rsi), %rdx
    00000610: 	cmpq	%rdx, %rax
    00000613: 	jbe	.Ltmp445 # Offset: 1555
    00000615: 	movzbl	0x2(%rbx), %edx
    00000619: 	movb	%dl, 0x8(%r9)
    0000061d: 	leaq	0x3(%rsi), %rdx
    00000621: 	cmpq	%rdx, %rax
    00000624: 	jbe	.Ltmp445 # Offset: 1572
    00000626: 	movzbl	0x3(%rbx), %edx
    0000062a: 	movb	%dl, 0xc(%r9)
    0000062e: 	leaq	0x4(%rsi), %rdx
    00000632: 	cmpq	%rdx, %rax
    00000635: 	jbe	.Ltmp445 # Offset: 1589
    00000637: 	movzbl	0x4(%rbx), %edx
    0000063b: 	movb	%dl, 0x10(%r9)
    0000063f: 	leaq	0x5(%rsi), %rdx
    00000643: 	cmpq	%rdx, %rax
    00000646: 	jbe	.Ltmp445 # Offset: 1606
    00000648: 	movzbl	0x5(%rbx), %edx
    0000064c: 	addq	$0x6, %rsi
    00000650: 	movb	%dl, 0x14(%r9)
    00000654: 	cmpq	%rsi, %rax
    00000657: 	jbe	.Ltmp445 # Offset: 1623
    00000659: 	movzbl	0x6(%rbx), %edx
    0000065d: 	movb	%dl, 0x18(%r9)
.Ltmp445:
    00000661: 	addq	$0x3, %r11
    00000665: 	movl	$0x3, %esi
    0000066a: 	leaq	0x2(%rdi), %r9
    0000066e: 	testq	%rax, %rax
    00000671: 	cmoveq	%rsi, %r11
    00000675: 	leaq	(%rbp,%rcx), %rdx
    0000067a: 	addq	%rdi, %r11
    0000067d: 	cmpq	%r11, %rbp
    00000680: 	setae	%sil
    00000684: 	cmpq	%rdx, %r9
    00000687: 	setae	%dl
    0000068a: 	orb	%sil, %dl
    0000068d: 	je	.Ltmp447 # Offset: 1677
    00000693: 	testb	%r13b, %r13b
    00000696: 	je	.Ltmp447 # Offset: 1686
    0000069c: 	cmpq	$0xf, %rax
    000006a0: 	jbe	.Ltmp448 # Offset: 1696
    000006a6: 	movq	%rcx, %r11
    000006a9: 	movq	%rbp, %rsi
    000006ac: 	movq	%r9, %rdx
    000006af: 	andq	$-0x10, %r11
    000006b3: 	addq	%rbp, %r11
    000006b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp449:
    000006c0: 	movdqu	(%rsi), %xmm0
    000006c4: 	addq	$0x10, %rsi
    000006c8: 	addq	$0x40, %rdx
    000006cc: 	movd	%xmm0, %r8d
    000006d1: 	movb	%r8b, -0x40(%rdx)
    000006d5: 	movaps	%xmm0, 0x1c8(%rsp)
    000006dd: 	movzbl	0x1c9(%rsp), %r8d
    000006e6: 	movb	%r8b, -0x3c(%rdx)
    000006ea: 	movaps	%xmm0, 0x1b8(%rsp)
    000006f2: 	movzbl	0x1ba(%rsp), %r8d
    000006fb: 	movb	%r8b, -0x38(%rdx)
    000006ff: 	movaps	%xmm0, 0x1a8(%rsp)
    00000707: 	movzbl	0x1ab(%rsp), %r8d
    00000710: 	movb	%r8b, -0x34(%rdx)
    00000714: 	movaps	%xmm0, 0x198(%rsp)
    0000071c: 	movzbl	0x19c(%rsp), %r8d
    00000725: 	movb	%r8b, -0x30(%rdx)
    00000729: 	movaps	%xmm0, 0x188(%rsp)
    00000731: 	movzbl	0x18d(%rsp), %r8d
    0000073a: 	movb	%r8b, -0x2c(%rdx)
    0000073e: 	movaps	%xmm0, 0x178(%rsp)
    00000746: 	movzbl	0x17e(%rsp), %r8d
    0000074f: 	movb	%r8b, -0x28(%rdx)
    00000753: 	movaps	%xmm0, 0x168(%rsp)
    0000075b: 	movzbl	0x16f(%rsp), %r8d
    00000764: 	movb	%r8b, -0x24(%rdx)
    00000768: 	movaps	%xmm0, 0x158(%rsp)
    00000770: 	movzbl	0x160(%rsp), %r8d
    00000779: 	movb	%r8b, -0x20(%rdx)
    0000077d: 	movaps	%xmm0, 0x148(%rsp)
    00000785: 	movzbl	0x151(%rsp), %r8d
    0000078e: 	movb	%r8b, -0x1c(%rdx)
    00000792: 	movaps	%xmm0, 0x138(%rsp)
    0000079a: 	movzbl	0x142(%rsp), %r8d
    000007a3: 	movb	%r8b, -0x18(%rdx)
    000007a7: 	movaps	%xmm0, 0x128(%rsp)
    000007af: 	movzbl	0x133(%rsp), %r8d
    000007b8: 	movb	%r8b, -0x14(%rdx)
    000007bc: 	movaps	%xmm0, 0x118(%rsp)
    000007c4: 	movzbl	0x124(%rsp), %r8d
    000007cd: 	movb	%r8b, -0x10(%rdx)
    000007d1: 	movaps	%xmm0, 0x108(%rsp)
    000007d9: 	movzbl	0x115(%rsp), %r8d
    000007e2: 	movb	%r8b, -0xc(%rdx)
    000007e6: 	movaps	%xmm0, 0xf8(%rsp)
    000007ee: 	movzbl	0x106(%rsp), %r8d
    000007f7: 	movb	%r8b, -0x8(%rdx)
    000007fb: 	movaps	%xmm0, 0xe8(%rsp)
    00000803: 	movzbl	0xf7(%rsp), %r8d
    0000080c: 	movb	%r8b, -0x4(%rdx)
    00000810: 	cmpq	%rsi, %r11
    00000813: 	jne	.Ltmp449 # Offset: 2067
    00000819: 	movq	%rcx, %rsi
    0000081c: 	andq	$-0x10, %rsi
    00000820: 	leaq	(%rbp,%rsi), %r11
    00000825: 	leaq	(%r9,%rsi,4), %r9
    00000829: 	cmpq	%rsi, %rcx
    0000082c: 	je	.Ltmp450 # Offset: 2092
.Ltmp467:
    00000832: 	movq	%rcx, %rbx
    00000835: 	subq	%rsi, %rbx
    00000838: 	leaq	-0x1(%rbx), %rdx
    0000083c: 	movq	%rbx, %r15
    0000083f: 	cmpq	$0x6, %rdx
    00000843: 	jbe	.Ltmp451 # Offset: 2115
    00000849: 	movq	(%rbp,%rsi), %rdx
    0000084e: 	leaq	0x2(%rdi,%rsi,4), %r8
    00000853: 	movq	%rdx, %r12
    00000856: 	movzbl	%dh, %ebx
    00000859: 	movq	%rdx, 0x210(%rsp)
    00000861: 	shrq	$0x10, %r12
    00000865: 	movb	%dl, (%r8)
    00000868: 	movq	%rdx, 0x208(%rsp)
    00000870: 	movb	%bl, 0x4(%r8)
    00000874: 	movq	%rdx, %rbx
    00000877: 	movq	%rdx, 0x200(%rsp)
    0000087f: 	shrq	$0x38, %rbx
    00000883: 	movb	%r12b, 0x8(%r8)
    00000887: 	movq	%rdx, %r12
    0000088a: 	shrq	$0x18, %r12
    0000088e: 	movq	%rdx, 0x1f8(%rsp)
    00000896: 	movb	%r12b, 0xc(%r8)
    0000089a: 	movq	%rdx, %r12
    0000089d: 	shrq	$0x20, %r12
    000008a1: 	movq	%rdx, 0x1f0(%rsp)
    000008a9: 	movb	%r12b, 0x10(%r8)
    000008ad: 	movq	%rdx, %r12
    000008b0: 	shrq	$0x28, %r12
    000008b4: 	movq	%rdx, 0x1e8(%rsp)
    000008bc: 	movb	%r12b, 0x14(%r8)
    000008c0: 	movq	%rdx, %r12
    000008c3: 	shrq	$0x30, %r12
    000008c7: 	movq	%rdx, 0x1e0(%rsp)
    000008cf: 	movb	%r12b, 0x18(%r8)
    000008d3: 	movq	%rdx, 0x1d8(%rsp)
    000008db: 	movb	%bl, 0x1c(%r8)
    000008df: 	movq	%r15, %rbx
    000008e2: 	andq	$-0x8, %rbx
    000008e6: 	addq	%rbx, %r11
    000008e9: 	leaq	(%r9,%rbx,4), %r9
    000008ed: 	addq	%rbx, %rsi
    000008f0: 	cmpq	%rbx, %r15
    000008f3: 	je	.Ltmp450 # Offset: 2291
.Ltmp451:
    000008f5: 	movzbl	(%r11), %edx
    000008f9: 	movb	%dl, (%r9)
    000008fc: 	leaq	0x1(%rsi), %rdx
    00000900: 	cmpq	%rax, %rdx
    00000903: 	jae	.Ltmp450 # Offset: 2307
    00000905: 	movzbl	0x1(%r11), %edx
    0000090a: 	movb	%dl, 0x4(%r9)
    0000090e: 	leaq	0x2(%rsi), %rdx
    00000912: 	cmpq	%rax, %rdx
    00000915: 	jae	.Ltmp450 # Offset: 2325
    00000917: 	movzbl	0x2(%r11), %edx
    0000091c: 	movb	%dl, 0x8(%r9)
    00000920: 	leaq	0x3(%rsi), %rdx
    00000924: 	cmpq	%rax, %rdx
    00000927: 	jae	.Ltmp450 # Offset: 2343
    00000929: 	movzbl	0x3(%r11), %edx
    0000092e: 	movb	%dl, 0xc(%r9)
    00000932: 	leaq	0x4(%rsi), %rdx
    00000936: 	cmpq	%rax, %rdx
    00000939: 	jae	.Ltmp450 # Offset: 2361
    0000093b: 	movzbl	0x4(%r11), %edx
    00000940: 	movb	%dl, 0x10(%r9)
    00000944: 	leaq	0x5(%rsi), %rdx
    00000948: 	cmpq	%rdx, %rax
    0000094b: 	jbe	.Ltmp450 # Offset: 2379
    0000094d: 	movzbl	0x5(%r11), %edx
    00000952: 	addq	$0x6, %rsi
    00000956: 	movb	%dl, 0x14(%r9)
    0000095a: 	cmpq	%rsi, %rax
    0000095d: 	jbe	.Ltmp450 # Offset: 2397
    0000095f: 	movzbl	0x6(%r11), %edx
    00000964: 	movb	%dl, 0x18(%r9)
.Ltmp450:
    00000968: 	testq	%rax, %rax
    0000096b: 	movl	$0x4, %esi
    00000970: 	leaq	(,%rax,4), %rdx
    00000978: 	cmoveq	%rsi, %rdx
    0000097c: 	leaq	0x3(%rdi), %r9
    00000980: 	addq	%rdi, %rdx
    00000983: 	cmpq	%rdx, %r14
    00000986: 	leaq	(%r14,%rcx), %rdx
    0000098a: 	setae	%sil
    0000098e: 	cmpq	%rdx, %r9
    00000991: 	setae	%dl
    00000994: 	orb	%sil, %dl
    00000997: 	je	.Ltmp452 # Offset: 2455
    0000099d: 	testb	%r13b, %r13b
    000009a0: 	je	.Ltmp452 # Offset: 2464
    000009a6: 	cmpq	$0xf, %rax
    000009aa: 	jbe	.Ltmp453 # Offset: 2474
    000009b0: 	movq	%rcx, %r11
    000009b3: 	movq	%r14, %rsi
    000009b6: 	movq	%r9, %rdx
    000009b9: 	andq	$-0x10, %r11
    000009bd: 	addq	%r14, %r11
.Ltmp454:
    000009c0: 	movdqu	(%rsi), %xmm0
    000009c4: 	addq	$0x10, %rsi
    000009c8: 	addq	$0x40, %rdx
    000009cc: 	movd	%xmm0, %r8d
    000009d1: 	movb	%r8b, -0x40(%rdx)
    000009d5: 	movaps	%xmm0, 0x98(%rsp)
    000009dd: 	movzbl	0x99(%rsp), %r8d
    000009e6: 	movb	%r8b, -0x3c(%rdx)
    000009ea: 	movaps	%xmm0, 0x88(%rsp)
    000009f2: 	movzbl	0x8a(%rsp), %r8d
    000009fb: 	movb	%r8b, -0x38(%rdx)
    000009ff: 	movaps	%xmm0, 0x78(%rsp)
    00000a04: 	movzbl	0x7b(%rsp), %r8d
    00000a0a: 	movb	%r8b, -0x34(%rdx)
    00000a0e: 	movaps	%xmm0, 0x68(%rsp)
    00000a13: 	movzbl	0x6c(%rsp), %r8d
    00000a19: 	movb	%r8b, -0x30(%rdx)
    00000a1d: 	movaps	%xmm0, 0x58(%rsp)
    00000a22: 	movzbl	0x5d(%rsp), %r8d
    00000a28: 	movb	%r8b, -0x2c(%rdx)
    00000a2c: 	movaps	%xmm0, 0x48(%rsp)
    00000a31: 	movzbl	0x4e(%rsp), %r8d
    00000a37: 	movb	%r8b, -0x28(%rdx)
    00000a3b: 	movaps	%xmm0, 0x38(%rsp)
    00000a40: 	movzbl	0x3f(%rsp), %r8d
    00000a46: 	movb	%r8b, -0x24(%rdx)
    00000a4a: 	movaps	%xmm0, 0x28(%rsp)
    00000a4f: 	movzbl	0x30(%rsp), %r8d
    00000a55: 	movb	%r8b, -0x20(%rdx)
    00000a59: 	movaps	%xmm0, 0x18(%rsp)
    00000a5e: 	movzbl	0x21(%rsp), %r8d
    00000a64: 	movb	%r8b, -0x1c(%rdx)
    00000a68: 	movaps	%xmm0, 0x8(%rsp)
    00000a6d: 	movzbl	0x12(%rsp), %r8d
    00000a73: 	movb	%r8b, -0x18(%rdx)
    00000a77: 	movaps	%xmm0, -0x8(%rsp)
    00000a7c: 	movzbl	0x3(%rsp), %r8d
    00000a82: 	movb	%r8b, -0x14(%rdx)
    00000a86: 	movaps	%xmm0, -0x18(%rsp)
    00000a8b: 	movzbl	-0xc(%rsp), %r8d
    00000a91: 	movb	%r8b, -0x10(%rdx)
    00000a95: 	movaps	%xmm0, -0x28(%rsp)
    00000a9a: 	movzbl	-0x1b(%rsp), %r8d
    00000aa0: 	movb	%r8b, -0xc(%rdx)
    00000aa4: 	movaps	%xmm0, -0x38(%rsp)
    00000aa9: 	movzbl	-0x2a(%rsp), %r8d
    00000aaf: 	movb	%r8b, -0x8(%rdx)
    00000ab3: 	movaps	%xmm0, -0x48(%rsp)
    00000ab8: 	movzbl	-0x39(%rsp), %r8d
    00000abe: 	movb	%r8b, -0x4(%rdx)
    00000ac2: 	cmpq	%r11, %rsi
    00000ac5: 	jne	.Ltmp454 # Offset: 2757
    00000acb: 	movq	%rcx, %rsi
    00000ace: 	andq	$-0x10, %rsi
    00000ad2: 	leaq	(%r14,%rsi), %r11
    00000ad6: 	leaq	(%r9,%rsi,4), %r9
    00000ada: 	cmpq	%rcx, %rsi
    00000add: 	je	.Ltmp455 # Offset: 2781
.Ltmp466:
    00000ae3: 	subq	%rsi, %rcx
    00000ae6: 	leaq	-0x1(%rcx), %rdx
    00000aea: 	cmpq	$0x6, %rdx
    00000aee: 	jbe	.Ltmp456 # Offset: 2798
    00000af4: 	movq	(%r14,%rsi), %rdx
    00000af8: 	leaq	0x3(%rdi,%rsi,4), %r8
    00000afd: 	movzbl	%dh, %ebx
    00000b00: 	movq	%rdx, 0xe0(%rsp)
    00000b08: 	movb	%dl, (%r8)
    00000b0b: 	movq	%rdx, 0xd8(%rsp)
    00000b13: 	movb	%bl, 0x4(%r8)
    00000b17: 	movq	%rdx, %rbx
    00000b1a: 	shrq	$0x10, %rbx
    00000b1e: 	movq	%rdx, 0xd0(%rsp)
    00000b26: 	movb	%bl, 0x8(%r8)
    00000b2a: 	movq	%rdx, %rbx
    00000b2d: 	shrq	$0x18, %rbx
    00000b31: 	movq	%rdx, 0xc8(%rsp)
    00000b39: 	movb	%bl, 0xc(%r8)
    00000b3d: 	movq	%rdx, %rbx
    00000b40: 	shrq	$0x20, %rbx
    00000b44: 	movq	%rdx, 0xc0(%rsp)
    00000b4c: 	movb	%bl, 0x10(%r8)
    00000b50: 	movq	%rdx, %rbx
    00000b53: 	shrq	$0x28, %rbx
    00000b57: 	movq	%rdx, 0xb8(%rsp)
    00000b5f: 	movb	%bl, 0x14(%r8)
    00000b63: 	movq	%rdx, %rbx
    00000b66: 	shrq	$0x30, %rbx
    00000b6a: 	movq	%rdx, 0xb0(%rsp)
    00000b72: 	movb	%bl, 0x18(%r8)
    00000b76: 	movq	%rdx, %rbx
    00000b79: 	movq	%rdx, 0xa8(%rsp)
    00000b81: 	movq	%rcx, %rdx
    00000b84: 	shrq	$0x38, %rbx
    00000b88: 	andq	$-0x8, %rdx
    00000b8c: 	movb	%bl, 0x1c(%r8)
    00000b90: 	addq	%rdx, %r11
    00000b93: 	leaq	(%r9,%rdx,4), %r9
    00000b97: 	addq	%rdx, %rsi
    00000b9a: 	cmpq	%rdx, %rcx
    00000b9d: 	je	.Ltmp455 # Offset: 2973
.Ltmp456:
    00000b9f: 	movzbl	(%r11), %edx
    00000ba3: 	movb	%dl, (%r9)
    00000ba6: 	leaq	0x1(%rsi), %rdx
    00000baa: 	cmpq	%rax, %rdx
    00000bad: 	jae	.Ltmp455 # Offset: 2989
    00000baf: 	movzbl	0x1(%r11), %edx
    00000bb4: 	movb	%dl, 0x4(%r9)
    00000bb8: 	leaq	0x2(%rsi), %rdx
    00000bbc: 	cmpq	%rdx, %rax
    00000bbf: 	jbe	.Ltmp455 # Offset: 3007
    00000bc1: 	movzbl	0x2(%r11), %edx
    00000bc6: 	movb	%dl, 0x8(%r9)
    00000bca: 	leaq	0x3(%rsi), %rdx
    00000bce: 	cmpq	%rax, %rdx
    00000bd1: 	jae	.Ltmp455 # Offset: 3025
    00000bd3: 	movzbl	0x3(%r11), %edx
    00000bd8: 	movb	%dl, 0xc(%r9)
    00000bdc: 	leaq	0x4(%rsi), %rdx
    00000be0: 	cmpq	%rdx, %rax
    00000be3: 	jbe	.Ltmp455 # Offset: 3043
    00000be5: 	movzbl	0x4(%r11), %edx
    00000bea: 	movb	%dl, 0x10(%r9)
    00000bee: 	leaq	0x5(%rsi), %rdx
    00000bf2: 	cmpq	%rax, %rdx
    00000bf5: 	jae	.Ltmp455 # Offset: 3061
    00000bf7: 	movzbl	0x5(%r11), %edx
    00000bfc: 	addq	$0x6, %rsi
    00000c00: 	movb	%dl, 0x14(%r9)
    00000c04: 	cmpq	%rsi, %rax
    00000c07: 	jbe	.Ltmp455 # Offset: 3079
    00000c09: 	movzbl	0x6(%r11), %edx
    00000c0e: 	movb	%dl, 0x18(%r9)
.Ltmp455:
    00000c12: 	movq	-0x60(%rsp), %rbx
    00000c17: 	movl	-0x50(%rsp), %ecx
    00000c1b: 	addq	%rax, %r10
    00000c1e: 	addq	%rax, %rbp
    00000c21: 	subl	$0x400, -0x4c(%rsp)
    00000c29: 	addq	-0x58(%rsp), %rdi
    00000c2e: 	addq	%rax, %r14
    00000c31: 	cmpl	%ecx, -0x6c(%rsp)
    00000c35: 	jl	.Ltmp457 # Offset: 3125
.Ltmp435:
    00000c3b: 	addq	$0x480, %rsp
    00000c42: 	popq	%rbx
    00000c43: 	popq	%rbp
    00000c44: 	popq	%r12
    00000c46: 	popq	%r13
    00000c48: 	popq	%r14
    00000c4a: 	popq	%r15
    00000c4c: 	retq # Offset: 3148
    00000c4d: 	nopl	(%rax) # Size: 3
.Ltmp436:
    00000c50: 	movslq	-0x4c(%rsp), %rax
    00000c55: 	movq	%rbx, -0x60(%rsp)
    00000c5a: 	leal	(,%rax,4), %edx
    00000c61: 	movslq	%edx, %rcx
    00000c64: 	movq	%rcx, -0x58(%rsp)
    00000c69: 	testq	%rax, %rax
    00000c6c: 	je	.Ltmp455 # Offset: 3180
    00000c6e: 	leaq	-0x4(,%rax,4), %r11
    00000c76: 	cmpq	$0x7, %rax
    00000c7a: 	movq	%rax, %rcx
    00000c7d: 	leaq	0x1(%rdi,%r11), %rdx
    00000c82: 	seta	%sil
    00000c86: 	cmpq	%rdx, %rbx
    00000c89: 	leaq	(%rbx,%rax), %rdx
    00000c8d: 	movl	%esi, %r13d
    00000c90: 	setae	%r8b
    00000c94: 	cmpq	%rdx, %rdi
    00000c97: 	movq	%rdx, -0x60(%rsp)
    00000c9c: 	setae	%dl
    00000c9f: 	orb	%r8b, %dl
    00000ca2: 	je	.Ltmp458 # Offset: 3234
    00000ca4: 	testb	%sil, %sil
    00000ca7: 	je	.Ltmp458 # Offset: 3239
    00000ca9: 	cmpq	$0xf, %rax
    00000cad: 	ja	.Ltmp459 # Offset: 3245
    00000cb3: 	movq	%rdi, %r9
    00000cb6: 	movq	%rbx, %r12
    00000cb9: 	xorl	%esi, %esi
    00000cbb: 	jmp	.Ltmp460 # Offset: 3259
.Ltmp438:
    00000cc0: 	movq	%rdx, -0x60(%rsp)
    00000cc5: 	movl	$0x1, %r13d
    00000ccb: 	movl	$0x400, %eax
    00000cd0: 	movq	$0x1000, -0x58(%rsp)
.Ltmp458:
    00000cd9: 	xorl	%edx, %edx
    00000cdb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp461:
    00000ce0: 	movzbl	(%rbx,%rdx), %esi
    00000ce4: 	movb	%sil, (%rdi,%rdx,4)
    00000ce8: 	addq	$0x1, %rdx
    00000cec: 	cmpq	%rax, %rdx
    00000cef: 	jb	.Ltmp461 # Offset: 3311
    00000cf1: 	jmp	.Ltmp462 # Offset: 3313
    00000cf6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp442:
    00000d00: 	xorl	%edx, %edx
    00000d02: 	nopw	(%rax,%rax) # Size: 6
.Ltmp463:
    00000d08: 	movzbl	(%r10,%rdx), %esi
    00000d0d: 	movb	%sil, 0x1(%rdi,%rdx,4)
    00000d12: 	addq	$0x1, %rdx
    00000d16: 	cmpq	%rdx, %rax
    00000d19: 	ja	.Ltmp463 # Offset: 3353
    00000d1b: 	jmp	.Ltmp445 # Offset: 3355
.Ltmp452:
    00000d20: 	xorl	%edx, %edx
    00000d22: 	nopw	(%rax,%rax) # Size: 6
.Ltmp464:
    00000d28: 	movzbl	(%r14,%rdx), %ecx
    00000d2d: 	movb	%cl, 0x3(%rdi,%rdx,4)
    00000d31: 	addq	$0x1, %rdx
    00000d35: 	cmpq	%rax, %rdx
    00000d38: 	jb	.Ltmp464 # Offset: 3384
    00000d3a: 	jmp	.Ltmp455 # Offset: 3386
    00000d3f: 	nop # Size: 1
.Ltmp447:
    00000d40: 	xorl	%edx, %edx
    00000d42: 	nopw	(%rax,%rax) # Size: 6
.Ltmp465:
    00000d48: 	movzbl	(%rbp,%rdx), %esi
    00000d4d: 	movb	%sil, 0x2(%rdi,%rdx,4)
    00000d52: 	addq	$0x1, %rdx
    00000d56: 	cmpq	%rdx, %rax
    00000d59: 	ja	.Ltmp465 # Offset: 3417
    00000d5b: 	jmp	.Ltmp450 # Offset: 3419
.Ltmp453:
    00000d60: 	movq	%r14, %r11
    00000d63: 	xorl	%esi, %esi
    00000d65: 	jmp	.Ltmp466 # Offset: 3429
.Ltmp448:
    00000d6a: 	movq	%rbp, %r11
    00000d6d: 	xorl	%esi, %esi
    00000d6f: 	jmp	.Ltmp467 # Offset: 3439
.Ltmp443:
    00000d74: 	movq	%r10, -0x68(%rsp)
    00000d79: 	xorl	%esi, %esi
    00000d7b: 	jmp	.Ltmp468 # Offset: 3451
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version4IhEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version5IhEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0xd480
  Size        : 0xb15
  MaxSize     : 0xb20
  Offset      : 0xd480
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version5IhEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rsi, %r10
    00000009: 	movq	%rcx, %rsi
    0000000c: 	pushq	%r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x470, %rsp
    0000001b: 	movl	%r9d, -0x60(%rsp)
    00000020: 	movl	%r9d, -0x5c(%rsp)
    00000025: 	movl	$0x0, -0x74(%rsp)
    0000002d: 	testl	%r9d, %r9d
    00000030: 	jle	.Ltmp469 # Offset: 48
    00000036: 	movq	%rdi, %rax
    00000039: 	movq	%r8, %r14
    0000003c: 	movq	%rdx, %rdi
    0000003f: 	nop # Size: 1
.Ltmp481:
    00000040: 	addl	$0x400, -0x74(%rsp)
    00000048: 	movl	-0x74(%rsp), %ecx
    0000004c: 	cmpl	-0x60(%rsp), %ecx
    00000050: 	jg	.Ltmp470 # Offset: 80
    00000056: 	movq	$0x1000, -0x68(%rsp)
    0000005f: 	movl	$0x400, %r12d
    00000065: 	movl	$0x400, %ecx
.Ltmp482:
    0000006a: 	testl	%ecx, %ecx
    0000006c: 	movslq	%ecx, %r11
    0000006f: 	movl	$0x1, %r8d
    00000075: 	movl	$0x2, %ebx
    0000007a: 	cmovgq	%r11, %r8
    0000007e: 	leaq	-0x2(,%r11,4), %rdx
    00000086: 	movl	%ecx, %r13d
    00000089: 	cmovleq	%rbx, %rdx
    0000008d: 	leaq	(%r10,%r8), %r9
    00000091: 	addq	%rax, %rdx
    00000094: 	cmpq	%r9, %rax
    00000097: 	setae	%bl
    0000009a: 	cmpq	%rdx, %r10
    0000009d: 	setae	%r9b
    000000a1: 	addq	%rdi, %r8
    000000a4: 	orl	%ebx, %r9d
    000000a7: 	cmpq	%r8, %rax
    000000aa: 	setae	%r8b
    000000ae: 	cmpq	%rdx, %rdi
    000000b1: 	setae	%dl
    000000b4: 	orl	%edx, %r8d
    000000b7: 	testb	%r8b, %r9b
    000000ba: 	je	.Ltmp471 # Offset: 186
    000000c0: 	cmpl	$0x7, %ecx
    000000c3: 	jle	.Ltmp471 # Offset: 195
    000000c9: 	testl	%ecx, %ecx
    000000cb: 	movl	$0x1, %ebp
    000000d0: 	cmovgl	%ecx, %ebp
    000000d3: 	cmpl	$0xf, %ecx
    000000d6: 	jle	.Ltmp472 # Offset: 214
    000000dc: 	movl	%ebp, %ebx
    000000de: 	movq	%rax, %rdx
    000000e1: 	xorl	%r8d, %r8d
    000000e4: 	shrl	$0x4, %ebx
    000000e7: 	shlq	$0x4, %rbx
    000000eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp473:
    000000f0: 	movdqu	(%r10,%r8), %xmm1
    000000f6: 	movdqu	(%rdi,%r8), %xmm0
    000000fc: 	addq	$0x10, %r8
    00000100: 	addq	$0x40, %rdx
    00000104: 	movd	%xmm1, %r9d
    00000109: 	movb	%r9b, -0x40(%rdx)
    0000010d: 	movaps	%xmm1, 0x458(%rsp)
    00000115: 	movzbl	0x459(%rsp), %r9d
    0000011e: 	movb	%r9b, -0x3c(%rdx)
    00000122: 	movaps	%xmm1, 0x448(%rsp)
    0000012a: 	movzbl	0x44a(%rsp), %r9d
    00000133: 	movb	%r9b, -0x38(%rdx)
    00000137: 	movaps	%xmm1, 0x438(%rsp)
    0000013f: 	movzbl	0x43b(%rsp), %r9d
    00000148: 	movb	%r9b, -0x34(%rdx)
    0000014c: 	movaps	%xmm1, 0x428(%rsp)
    00000154: 	movzbl	0x42c(%rsp), %r9d
    0000015d: 	movb	%r9b, -0x30(%rdx)
    00000161: 	movaps	%xmm1, 0x418(%rsp)
    00000169: 	movzbl	0x41d(%rsp), %r9d
    00000172: 	movb	%r9b, -0x2c(%rdx)
    00000176: 	movaps	%xmm1, 0x408(%rsp)
    0000017e: 	movzbl	0x40e(%rsp), %r9d
    00000187: 	movb	%r9b, -0x28(%rdx)
    0000018b: 	movaps	%xmm1, 0x3f8(%rsp)
    00000193: 	movzbl	0x3ff(%rsp), %r9d
    0000019c: 	movb	%r9b, -0x24(%rdx)
    000001a0: 	movaps	%xmm1, 0x3e8(%rsp)
    000001a8: 	movzbl	0x3f0(%rsp), %r9d
    000001b1: 	movb	%r9b, -0x20(%rdx)
    000001b5: 	movaps	%xmm1, 0x3d8(%rsp)
    000001bd: 	movzbl	0x3e1(%rsp), %r9d
    000001c6: 	movb	%r9b, -0x1c(%rdx)
    000001ca: 	movaps	%xmm1, 0x3c8(%rsp)
    000001d2: 	movzbl	0x3d2(%rsp), %r9d
    000001db: 	movb	%r9b, -0x18(%rdx)
    000001df: 	movaps	%xmm1, 0x3b8(%rsp)
    000001e7: 	movzbl	0x3c3(%rsp), %r9d
    000001f0: 	movb	%r9b, -0x14(%rdx)
    000001f4: 	movaps	%xmm1, 0x3a8(%rsp)
    000001fc: 	movzbl	0x3b4(%rsp), %r9d
    00000205: 	movb	%r9b, -0x10(%rdx)
    00000209: 	movaps	%xmm1, 0x398(%rsp)
    00000211: 	movzbl	0x3a5(%rsp), %r9d
    0000021a: 	movb	%r9b, -0xc(%rdx)
    0000021e: 	movaps	%xmm1, 0x388(%rsp)
    00000226: 	movzbl	0x396(%rsp), %r9d
    0000022f: 	movb	%r9b, -0x8(%rdx)
    00000233: 	movaps	%xmm1, 0x378(%rsp)
    0000023b: 	movzbl	0x387(%rsp), %r9d
    00000244: 	movb	%r9b, -0x4(%rdx)
    00000248: 	movd	%xmm0, %r9d
    0000024d: 	movb	%r9b, -0x3f(%rdx)
    00000251: 	movaps	%xmm0, 0x368(%rsp)
    00000259: 	movzbl	0x369(%rsp), %r9d
    00000262: 	movb	%r9b, -0x3b(%rdx)
    00000266: 	movaps	%xmm0, 0x358(%rsp)
    0000026e: 	movzbl	0x35a(%rsp), %r9d
    00000277: 	movb	%r9b, -0x37(%rdx)
    0000027b: 	movaps	%xmm0, 0x348(%rsp)
    00000283: 	movzbl	0x34b(%rsp), %r9d
    0000028c: 	movb	%r9b, -0x33(%rdx)
    00000290: 	movaps	%xmm0, 0x338(%rsp)
    00000298: 	movzbl	0x33c(%rsp), %r9d
    000002a1: 	movb	%r9b, -0x2f(%rdx)
    000002a5: 	movaps	%xmm0, 0x328(%rsp)
    000002ad: 	movzbl	0x32d(%rsp), %r9d
    000002b6: 	movb	%r9b, -0x2b(%rdx)
    000002ba: 	movaps	%xmm0, 0x318(%rsp)
    000002c2: 	movzbl	0x31e(%rsp), %r9d
    000002cb: 	movb	%r9b, -0x27(%rdx)
    000002cf: 	movaps	%xmm0, 0x308(%rsp)
    000002d7: 	movzbl	0x30f(%rsp), %r9d
    000002e0: 	movb	%r9b, -0x23(%rdx)
    000002e4: 	movaps	%xmm0, 0x2f8(%rsp)
    000002ec: 	movzbl	0x300(%rsp), %r9d
    000002f5: 	movb	%r9b, -0x1f(%rdx)
    000002f9: 	movaps	%xmm0, 0x2e8(%rsp)
    00000301: 	movzbl	0x2f1(%rsp), %r9d
    0000030a: 	movb	%r9b, -0x1b(%rdx)
    0000030e: 	movaps	%xmm0, 0x2d8(%rsp)
    00000316: 	movzbl	0x2e2(%rsp), %r9d
    0000031f: 	movb	%r9b, -0x17(%rdx)
    00000323: 	movaps	%xmm0, 0x2c8(%rsp)
    0000032b: 	movzbl	0x2d3(%rsp), %r9d
    00000334: 	movb	%r9b, -0x13(%rdx)
    00000338: 	movaps	%xmm0, 0x2b8(%rsp)
    00000340: 	movzbl	0x2c4(%rsp), %r9d
    00000349: 	movb	%r9b, -0xf(%rdx)
    0000034d: 	movaps	%xmm0, 0x2a8(%rsp)
    00000355: 	movzbl	0x2b5(%rsp), %r9d
    0000035e: 	movb	%r9b, -0xb(%rdx)
    00000362: 	movaps	%xmm0, 0x298(%rsp)
    0000036a: 	movzbl	0x2a6(%rsp), %r9d
    00000373: 	movb	%r9b, -0x7(%rdx)
    00000377: 	movaps	%xmm0, 0x288(%rsp)
    0000037f: 	movzbl	0x297(%rsp), %r9d
    00000388: 	movb	%r9b, -0x3(%rdx)
    0000038c: 	cmpq	%rbx, %r8
    0000038f: 	jne	.Ltmp473 # Offset: 911
    00000395: 	movl	%ebp, %ebx
    00000397: 	andl	$-0x10, %ebx
    0000039a: 	movl	%ebx, %r9d
    0000039d: 	cmpl	%ebx, %ebp
    0000039f: 	je	.Ltmp474 # Offset: 927
.Ltmp486:
    000003a5: 	subl	%ebx, %ebp
    000003a7: 	leal	-0x1(%rbp), %edx
    000003aa: 	cmpl	$0x6, %edx
    000003ad: 	jbe	.Ltmp475 # Offset: 941
    000003b3: 	movq	(%r10,%rbx), %r8
    000003b7: 	movq	(%rdi,%rbx), %r15
    000003bb: 	leaq	(%rax,%rbx,4), %rdx
    000003bf: 	movq	%r15, -0x70(%rsp)
    000003c4: 	movq	%r8, %r15
    000003c7: 	movq	%r8, %rbx
    000003ca: 	shrq	$0x10, %r15
    000003ce: 	movb	%r8b, (%rdx)
    000003d1: 	movb	%r15b, 0x8(%rdx)
    000003d5: 	movq	%r8, %r15
    000003d8: 	shrq	$0x18, %r15
    000003dc: 	movb	%bh, 0x4(%rdx)
    000003df: 	movb	%r15b, 0xc(%rdx)
    000003e3: 	movq	%r8, %r15
    000003e6: 	shrq	$0x20, %r15
    000003ea: 	movb	%r15b, 0x10(%rdx)
    000003ee: 	movq	%r8, %r15
    000003f1: 	shrq	$0x28, %r15
    000003f5: 	movb	%r15b, 0x14(%rdx)
    000003f9: 	movq	%r8, %r15
    000003fc: 	shrq	$0x38, %r8
    00000400: 	shrq	$0x30, %r15
    00000404: 	movb	%r8b, 0x1c(%rdx)
    00000408: 	movb	%r15b, 0x18(%rdx)
    0000040c: 	movq	-0x70(%rsp), %r15
    00000411: 	movq	%r15, %r8
    00000414: 	movq	%r15, %rbx
    00000417: 	movb	%r15b, 0x1(%rdx)
    0000041b: 	shrq	$0x10, %r8
    0000041f: 	movb	%bh, 0x5(%rdx)
    00000422: 	shrq	$0x38, %rbx
    00000426: 	movb	%r8b, 0x9(%rdx)
    0000042a: 	movq	%r15, %r8
    0000042d: 	shrq	$0x18, %r8
    00000431: 	movb	%bl, 0x1d(%rdx)
    00000434: 	movb	%r8b, 0xd(%rdx)
    00000438: 	movq	%r15, %r8
    0000043b: 	shrq	$0x20, %r8
    0000043f: 	movb	%r8b, 0x11(%rdx)
    00000443: 	movq	%r15, %r8
    00000446: 	shrq	$0x28, %r8
    0000044a: 	movb	%r8b, 0x15(%rdx)
    0000044e: 	movq	%r15, %r8
    00000451: 	shrq	$0x30, %r8
    00000455: 	movb	%r8b, 0x19(%rdx)
    00000459: 	movl	%ebp, %edx
    0000045b: 	andl	$-0x8, %edx
    0000045e: 	addl	%edx, %r9d
    00000461: 	cmpl	%edx, %ebp
    00000463: 	je	.Ltmp474 # Offset: 1123
.Ltmp475:
    00000469: 	movslq	%r9d, %rbx
    0000046c: 	leal	(,%r9,4), %edx
    00000474: 	movzbl	(%r10,%rbx), %ebp
    00000479: 	movslq	%edx, %r8
    0000047c: 	movb	%bpl, (%rax,%r8)
    00000480: 	movzbl	(%rdi,%rbx), %ebx
    00000484: 	movb	%bl, 0x1(%rax,%r8)
    00000489: 	leal	0x1(%r9), %r8d
    0000048d: 	cmpl	%r8d, %ecx
    00000490: 	jle	.Ltmp474 # Offset: 1168
    00000496: 	movslq	%r8d, %r8
    00000499: 	leal	0x4(%rdx), %ebx
    0000049c: 	movzbl	(%r10,%r8), %ebp
    000004a1: 	movslq	%ebx, %rbx
    000004a4: 	movb	%bpl, (%rax,%rbx)
    000004a8: 	movzbl	(%rdi,%r8), %r8d
    000004ad: 	movb	%r8b, 0x1(%rax,%rbx)
    000004b2: 	leal	0x2(%r9), %r8d
    000004b6: 	cmpl	%r8d, %ecx
    000004b9: 	jle	.Ltmp474 # Offset: 1209
    000004bf: 	movslq	%r8d, %r8
    000004c2: 	leal	0x8(%rdx), %ebx
    000004c5: 	movzbl	(%r10,%r8), %ebp
    000004ca: 	movslq	%ebx, %rbx
    000004cd: 	movb	%bpl, (%rax,%rbx)
    000004d1: 	movzbl	(%rdi,%r8), %r8d
    000004d6: 	movb	%r8b, 0x1(%rax,%rbx)
    000004db: 	leal	0x3(%r9), %r8d
    000004df: 	cmpl	%r8d, %ecx
    000004e2: 	jle	.Ltmp474 # Offset: 1250
    000004e8: 	movslq	%r8d, %r8
    000004eb: 	leal	0xc(%rdx), %ebx
    000004ee: 	movzbl	(%r10,%r8), %ebp
    000004f3: 	movslq	%ebx, %rbx
    000004f6: 	movb	%bpl, (%rax,%rbx)
    000004fa: 	movzbl	(%rdi,%r8), %r8d
    000004ff: 	movb	%r8b, 0x1(%rax,%rbx)
    00000504: 	leal	0x4(%r9), %r8d
    00000508: 	cmpl	%r8d, %ecx
    0000050b: 	jle	.Ltmp474 # Offset: 1291
    0000050d: 	movslq	%r8d, %r8
    00000510: 	leal	0x10(%rdx), %ebx
    00000513: 	movzbl	(%r10,%r8), %ebp
    00000518: 	movslq	%ebx, %rbx
    0000051b: 	movb	%bpl, (%rax,%rbx)
    0000051f: 	movzbl	(%rdi,%r8), %r8d
    00000524: 	movb	%r8b, 0x1(%rax,%rbx)
    00000529: 	leal	0x5(%r9), %r8d
    0000052d: 	cmpl	%r8d, %ecx
    00000530: 	jle	.Ltmp474 # Offset: 1328
    00000532: 	movslq	%r8d, %r8
    00000535: 	leal	0x14(%rdx), %ebx
    00000538: 	addl	$0x6, %r9d
    0000053c: 	movzbl	(%r10,%r8), %ebp
    00000541: 	movslq	%ebx, %rbx
    00000544: 	movb	%bpl, (%rax,%rbx)
    00000548: 	movzbl	(%rdi,%r8), %r8d
    0000054d: 	movb	%r8b, 0x1(%rax,%rbx)
    00000552: 	cmpl	%r9d, %ecx
    00000555: 	jle	.Ltmp474 # Offset: 1365
    00000557: 	movslq	%r9d, %r9
    0000055a: 	addl	$0x18, %edx
    0000055d: 	movzbl	(%r10,%r9), %r8d
    00000562: 	movslq	%edx, %rdx
    00000565: 	movb	%r8b, (%rax,%rdx)
    00000569: 	movzbl	(%rdi,%r9), %r8d
    0000056e: 	movb	%r8b, 0x1(%rax,%rdx)
.Ltmp474:
    00000573: 	leaq	(%r14,%r11), %r8
    00000577: 	leaq	0x2(%rax), %rdx
    0000057b: 	leaq	(%rax,%r11,4), %r9
    0000057f: 	cmpq	%r8, %rdx
    00000582: 	leal	-0x1(%rcx), %ebx
    00000585: 	setae	%bpl
    00000589: 	cmpq	%r14, %r9
    0000058c: 	setbe	%r8b
    00000590: 	addq	%rsi, %r11
    00000593: 	orl	%ebp, %r8d
    00000596: 	cmpq	%r11, %rdx
    00000599: 	setae	%r11b
    0000059d: 	cmpq	%rsi, %r9
    000005a0: 	setbe	%r9b
    000005a4: 	orl	%r9d, %r11d
    000005a7: 	testb	%r11b, %r8b
    000005aa: 	je	.Ltmp476 # Offset: 1450
    000005b0: 	cmpl	$0x6, %ebx
    000005b3: 	jbe	.Ltmp476 # Offset: 1459
    000005b9: 	cmpl	$0xe, %ebx
    000005bc: 	jbe	.Ltmp477 # Offset: 1468
    000005c2: 	movl	%ecx, %r11d
    000005c5: 	xorl	%r8d, %r8d
    000005c8: 	shrl	$0x4, %r11d
    000005cc: 	shlq	$0x4, %r11
.Ltmp478:
    000005d0: 	movdqu	(%rsi,%r8), %xmm1
    000005d6: 	movdqu	(%r14,%r8), %xmm0
    000005dc: 	addq	$0x10, %r8
    000005e0: 	addq	$0x40, %rdx
    000005e4: 	movd	%xmm1, %r9d
    000005e9: 	movb	%r9b, -0x40(%rdx)
    000005ed: 	movaps	%xmm1, 0x1f8(%rsp)
    000005f5: 	movzbl	0x1f9(%rsp), %r9d
    000005fe: 	movb	%r9b, -0x3c(%rdx)
    00000602: 	movaps	%xmm1, 0x1e8(%rsp)
    0000060a: 	movzbl	0x1ea(%rsp), %r9d
    00000613: 	movb	%r9b, -0x38(%rdx)
    00000617: 	movaps	%xmm1, 0x1d8(%rsp)
    0000061f: 	movzbl	0x1db(%rsp), %r9d
    00000628: 	movb	%r9b, -0x34(%rdx)
    0000062c: 	movaps	%xmm1, 0x1c8(%rsp)
    00000634: 	movzbl	0x1cc(%rsp), %r9d
    0000063d: 	movb	%r9b, -0x30(%rdx)
    00000641: 	movaps	%xmm1, 0x1b8(%rsp)
    00000649: 	movzbl	0x1bd(%rsp), %r9d
    00000652: 	movb	%r9b, -0x2c(%rdx)
    00000656: 	movaps	%xmm1, 0x1a8(%rsp)
    0000065e: 	movzbl	0x1ae(%rsp), %r9d
    00000667: 	movb	%r9b, -0x28(%rdx)
    0000066b: 	movaps	%xmm1, 0x198(%rsp)
    00000673: 	movzbl	0x19f(%rsp), %r9d
    0000067c: 	movb	%r9b, -0x24(%rdx)
    00000680: 	movaps	%xmm1, 0x188(%rsp)
    00000688: 	movzbl	0x190(%rsp), %r9d
    00000691: 	movb	%r9b, -0x20(%rdx)
    00000695: 	movaps	%xmm1, 0x178(%rsp)
    0000069d: 	movzbl	0x181(%rsp), %r9d
    000006a6: 	movb	%r9b, -0x1c(%rdx)
    000006aa: 	movaps	%xmm1, 0x168(%rsp)
    000006b2: 	movzbl	0x172(%rsp), %r9d
    000006bb: 	movb	%r9b, -0x18(%rdx)
    000006bf: 	movaps	%xmm1, 0x158(%rsp)
    000006c7: 	movzbl	0x163(%rsp), %r9d
    000006d0: 	movb	%r9b, -0x14(%rdx)
    000006d4: 	movaps	%xmm1, 0x148(%rsp)
    000006dc: 	movzbl	0x154(%rsp), %r9d
    000006e5: 	movb	%r9b, -0x10(%rdx)
    000006e9: 	movaps	%xmm1, 0x138(%rsp)
    000006f1: 	movzbl	0x145(%rsp), %r9d
    000006fa: 	movb	%r9b, -0xc(%rdx)
    000006fe: 	movaps	%xmm1, 0x128(%rsp)
    00000706: 	movzbl	0x136(%rsp), %r9d
    0000070f: 	movb	%r9b, -0x8(%rdx)
    00000713: 	movaps	%xmm1, 0x118(%rsp)
    0000071b: 	movzbl	0x127(%rsp), %r9d
    00000724: 	movb	%r9b, -0x4(%rdx)
    00000728: 	movd	%xmm0, %r9d
    0000072d: 	movb	%r9b, -0x3f(%rdx)
    00000731: 	movaps	%xmm0, 0x108(%rsp)
    00000739: 	movzbl	0x109(%rsp), %r9d
    00000742: 	movb	%r9b, -0x3b(%rdx)
    00000746: 	movaps	%xmm0, 0xf8(%rsp)
    0000074e: 	movzbl	0xfa(%rsp), %r9d
    00000757: 	movb	%r9b, -0x37(%rdx)
    0000075b: 	movaps	%xmm0, 0xe8(%rsp)
    00000763: 	movzbl	0xeb(%rsp), %r9d
    0000076c: 	movb	%r9b, -0x33(%rdx)
    00000770: 	movaps	%xmm0, 0xd8(%rsp)
    00000778: 	movzbl	0xdc(%rsp), %r9d
    00000781: 	movb	%r9b, -0x2f(%rdx)
    00000785: 	movaps	%xmm0, 0xc8(%rsp)
    0000078d: 	movzbl	0xcd(%rsp), %r9d
    00000796: 	movb	%r9b, -0x2b(%rdx)
    0000079a: 	movaps	%xmm0, 0xb8(%rsp)
    000007a2: 	movzbl	0xbe(%rsp), %r9d
    000007ab: 	movb	%r9b, -0x27(%rdx)
    000007af: 	movaps	%xmm0, 0xa8(%rsp)
    000007b7: 	movzbl	0xaf(%rsp), %r9d
    000007c0: 	movb	%r9b, -0x23(%rdx)
    000007c4: 	movaps	%xmm0, 0x98(%rsp)
    000007cc: 	movzbl	0xa0(%rsp), %r9d
    000007d5: 	movb	%r9b, -0x1f(%rdx)
    000007d9: 	movaps	%xmm0, 0x88(%rsp)
    000007e1: 	movzbl	0x91(%rsp), %r9d
    000007ea: 	movb	%r9b, -0x1b(%rdx)
    000007ee: 	movaps	%xmm0, 0x78(%rsp)
    000007f3: 	movzbl	0x82(%rsp), %r9d
    000007fc: 	movb	%r9b, -0x17(%rdx)
    00000800: 	movaps	%xmm0, 0x68(%rsp)
    00000805: 	movzbl	0x73(%rsp), %r9d
    0000080b: 	movb	%r9b, -0x13(%rdx)
    0000080f: 	movaps	%xmm0, 0x58(%rsp)
    00000814: 	movzbl	0x64(%rsp), %r9d
    0000081a: 	movb	%r9b, -0xf(%rdx)
    0000081e: 	movaps	%xmm0, 0x48(%rsp)
    00000823: 	movzbl	0x55(%rsp), %r9d
    00000829: 	movb	%r9b, -0xb(%rdx)
    0000082d: 	movaps	%xmm0, 0x38(%rsp)
    00000832: 	movzbl	0x46(%rsp), %r9d
    00000838: 	movb	%r9b, -0x7(%rdx)
    0000083c: 	movaps	%xmm0, 0x28(%rsp)
    00000841: 	movzbl	0x37(%rsp), %r9d
    00000847: 	movb	%r9b, -0x3(%rdx)
    0000084b: 	cmpq	%r11, %r8
    0000084e: 	jne	.Ltmp478 # Offset: 2126
    00000854: 	movl	%ecx, %r11d
    00000857: 	andl	$-0x10, %r11d
    0000085b: 	movl	%r11d, %r9d
    0000085e: 	cmpl	%ecx, %r11d
    00000861: 	je	.Ltmp479 # Offset: 2145
    00000867: 	movl	%ecx, %r13d
    0000086a: 	subl	%r11d, %r13d
    0000086d: 	leal	-0x1(%r13), %edx
    00000871: 	cmpl	$0x6, %edx
    00000874: 	jbe	.Ltmp480 # Offset: 2164
.Ltmp485:
    0000087a: 	movq	(%rsi,%r11), %r8
    0000087e: 	movq	(%r14,%r11), %r15
    00000882: 	leaq	0x2(%rax,%r11,4), %rdx
    00000887: 	movq	%r8, %r11
    0000088a: 	movq	%r8, %rbx
    0000088d: 	movb	%r8b, (%rdx)
    00000890: 	shrq	$0x10, %r11
    00000894: 	movb	%bh, 0x4(%rdx)
    00000897: 	movq	%r15, %rbx
    0000089a: 	movb	%r11b, 0x8(%rdx)
    0000089e: 	movq	%r8, %r11
    000008a1: 	shrq	$0x18, %r11
    000008a5: 	movb	%bh, 0x5(%rdx)
    000008a8: 	shrq	$0x38, %rbx
    000008ac: 	movb	%r11b, 0xc(%rdx)
    000008b0: 	movq	%r8, %r11
    000008b3: 	shrq	$0x20, %r11
    000008b7: 	movb	%r15b, 0x1(%rdx)
    000008bb: 	movb	%r11b, 0x10(%rdx)
    000008bf: 	movq	%r8, %r11
    000008c2: 	shrq	$0x28, %r11
    000008c6: 	movb	%bl, 0x1d(%rdx)
    000008c9: 	movb	%r11b, 0x14(%rdx)
    000008cd: 	movq	%r8, %r11
    000008d0: 	shrq	$0x38, %r8
    000008d4: 	movb	%r8b, 0x1c(%rdx)
    000008d8: 	movq	%r15, %r8
    000008db: 	shrq	$0x30, %r11
    000008df: 	shrq	$0x10, %r8
    000008e3: 	movb	%r11b, 0x18(%rdx)
    000008e7: 	movb	%r8b, 0x9(%rdx)
    000008eb: 	movq	%r15, %r8
    000008ee: 	shrq	$0x18, %r8
    000008f2: 	movb	%r8b, 0xd(%rdx)
    000008f6: 	movq	%r15, %r8
    000008f9: 	shrq	$0x20, %r8
    000008fd: 	movb	%r8b, 0x11(%rdx)
    00000901: 	movq	%r15, %r8
    00000904: 	shrq	$0x28, %r8
    00000908: 	movb	%r8b, 0x15(%rdx)
    0000090c: 	movq	%r15, %r8
    0000090f: 	shrq	$0x30, %r8
    00000913: 	movb	%r8b, 0x19(%rdx)
    00000917: 	movl	%r13d, %edx
    0000091a: 	andl	$-0x8, %edx
    0000091d: 	addl	%edx, %r9d
    00000920: 	cmpl	%r13d, %edx
    00000923: 	je	.Ltmp479 # Offset: 2339
.Ltmp480:
    00000929: 	movslq	%r9d, %r11
    0000092c: 	leal	(,%r9,4), %edx
    00000934: 	movzbl	(%rsi,%r11), %ebx
    00000939: 	movslq	%edx, %r8
    0000093c: 	movb	%bl, 0x2(%rax,%r8)
    00000941: 	movzbl	(%r14,%r11), %r11d
    00000946: 	movb	%r11b, 0x3(%rax,%r8)
    0000094b: 	leal	0x1(%r9), %r8d
    0000094f: 	cmpl	%r8d, %ecx
    00000952: 	jle	.Ltmp479 # Offset: 2386
    00000958: 	movslq	%r8d, %r8
    0000095b: 	leal	0x4(%rdx), %r11d
    0000095f: 	movzbl	(%rsi,%r8), %ebx
    00000964: 	movslq	%r11d, %r11
    00000967: 	movb	%bl, 0x2(%rax,%r11)
    0000096c: 	movzbl	(%r14,%r8), %r8d
    00000971: 	movb	%r8b, 0x3(%rax,%r11)
    00000976: 	leal	0x2(%r9), %r8d
    0000097a: 	cmpl	%ecx, %r8d
    0000097d: 	jge	.Ltmp479 # Offset: 2429
    00000983: 	movslq	%r8d, %r8
    00000986: 	leal	0x8(%rdx), %r11d
    0000098a: 	movzbl	(%rsi,%r8), %ebx
    0000098f: 	movslq	%r11d, %r11
    00000992: 	movb	%bl, 0x2(%rax,%r11)
    00000997: 	movzbl	(%r14,%r8), %r8d
    0000099c: 	movb	%r8b, 0x3(%rax,%r11)
    000009a1: 	leal	0x3(%r9), %r8d
    000009a5: 	cmpl	%r8d, %ecx
    000009a8: 	jle	.Ltmp479 # Offset: 2472
    000009ae: 	movslq	%r8d, %r8
    000009b1: 	leal	0xc(%rdx), %r11d
    000009b5: 	movzbl	(%rsi,%r8), %ebx
    000009ba: 	movslq	%r11d, %r11
    000009bd: 	movb	%bl, 0x2(%rax,%r11)
    000009c2: 	movzbl	(%r14,%r8), %r8d
    000009c7: 	movb	%r8b, 0x3(%rax,%r11)
    000009cc: 	leal	0x4(%r9), %r8d
    000009d0: 	cmpl	%r8d, %ecx
    000009d3: 	jle	.Ltmp479 # Offset: 2515
    000009d5: 	movslq	%r8d, %r8
    000009d8: 	leal	0x10(%rdx), %r11d
    000009dc: 	movzbl	(%rsi,%r8), %ebx
    000009e1: 	movslq	%r11d, %r11
    000009e4: 	movb	%bl, 0x2(%rax,%r11)
    000009e9: 	movzbl	(%r14,%r8), %r8d
    000009ee: 	movb	%r8b, 0x3(%rax,%r11)
    000009f3: 	leal	0x5(%r9), %r8d
    000009f7: 	cmpl	%r8d, %ecx
    000009fa: 	jle	.Ltmp479 # Offset: 2554
    000009fc: 	movslq	%r8d, %r8
    000009ff: 	leal	0x14(%rdx), %r11d
    00000a03: 	addl	$0x6, %r9d
    00000a07: 	movzbl	(%rsi,%r8), %ebx
    00000a0c: 	movslq	%r11d, %r11
    00000a0f: 	movb	%bl, 0x2(%rax,%r11)
    00000a14: 	movzbl	(%r14,%r8), %r8d
    00000a19: 	movb	%r8b, 0x3(%rax,%r11)
    00000a1e: 	cmpl	%r9d, %ecx
    00000a21: 	jle	.Ltmp479 # Offset: 2593
    00000a23: 	movslq	%r9d, %r9
    00000a26: 	addl	$0x18, %edx
    00000a29: 	movzbl	(%rsi,%r9), %ecx
    00000a2e: 	movslq	%edx, %rdx
    00000a31: 	movb	%cl, 0x2(%rax,%rdx)
    00000a35: 	movzbl	(%r14,%r9), %ecx
    00000a3a: 	movb	%cl, 0x3(%rax,%rdx)
.Ltmp479:
    00000a3e: 	movl	-0x60(%rsp), %ebx
    00000a42: 	addq	-0x68(%rsp), %rax
    00000a47: 	addq	%r12, %r10
    00000a4a: 	addq	%r12, %rdi
    00000a4d: 	subl	$0x400, -0x5c(%rsp)
    00000a55: 	addq	%r12, %rsi
    00000a58: 	addq	%r12, %r14
    00000a5b: 	cmpl	%ebx, -0x74(%rsp)
    00000a5f: 	jl	.Ltmp481 # Offset: 2655
.Ltmp469:
    00000a65: 	addq	$0x470, %rsp
    00000a6c: 	popq	%rbx
    00000a6d: 	popq	%rbp
    00000a6e: 	popq	%r12
    00000a70: 	popq	%r13
    00000a72: 	popq	%r14
    00000a74: 	popq	%r15
    00000a76: 	retq # Offset: 2678
    00000a77: 	nopw	(%rax,%rax) # Size: 9
.Ltmp470:
    00000a80: 	movslq	-0x5c(%rsp), %r12
    00000a85: 	leal	(,%r12,4), %edx
    00000a8d: 	movl	%r12d, %ecx
    00000a90: 	movslq	%edx, %rdx
    00000a93: 	movq	%rdx, -0x68(%rsp)
    00000a98: 	testl	%r12d, %r12d
    00000a9b: 	jg	.Ltmp482 # Offset: 2715
    00000aa1: 	jmp	.Ltmp479 # Offset: 2721
    00000aa3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp476:
    00000aa8: 	movl	%ecx, %ecx
    00000aaa: 	xorl	%edx, %edx
    00000aac: 	nopl	(%rax) # Size: 4
.Ltmp483:
    00000ab0: 	movzbl	(%rsi,%rdx), %r8d
    00000ab5: 	movb	%r8b, 0x2(%rax,%rdx,4)
    00000aba: 	movzbl	(%r14,%rdx), %r8d
    00000abf: 	movb	%r8b, 0x3(%rax,%rdx,4)
    00000ac4: 	addq	$0x1, %rdx
    00000ac8: 	cmpq	%rdx, %rcx
    00000acb: 	jne	.Ltmp483 # Offset: 2763
    00000acd: 	jmp	.Ltmp479 # Offset: 2765
    00000ad2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp471:
    00000ad8: 	xorl	%edx, %edx
    00000ada: 	nopw	(%rax,%rax) # Size: 6
.Ltmp484:
    00000ae0: 	movzbl	(%r10,%rdx), %r8d
    00000ae5: 	movb	%r8b, (%rax,%rdx,4)
    00000ae9: 	movzbl	(%rdi,%rdx), %r8d
    00000aee: 	movb	%r8b, 0x1(%rax,%rdx,4)
    00000af3: 	addq	$0x1, %rdx
    00000af7: 	cmpl	%edx, %ecx
    00000af9: 	jg	.Ltmp484 # Offset: 2809
    00000afb: 	jmp	.Ltmp474 # Offset: 2811
.Ltmp477:
    00000b00: 	xorl	%r11d, %r11d
    00000b03: 	xorl	%r9d, %r9d
    00000b06: 	jmp	.Ltmp485 # Offset: 2822
.Ltmp472:
    00000b0b: 	xorl	%ebx, %ebx
    00000b0d: 	xorl	%r9d, %r9d
    00000b10: 	jmp	.Ltmp486 # Offset: 2832
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version5IhEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version6IhEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 77
  State       : disassembled
  Address     : 0xdfa0
  Size        : 0xd53
  MaxSize     : 0xd60
  Offset      : 0xdfa0
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version6IhEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdx, %r11
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x470, %rsp
    00000018: 	movl	%r9d, -0x60(%rsp)
    0000001d: 	movl	%r9d, -0x5c(%rsp)
    00000022: 	movl	$0x0, -0x70(%rsp)
    0000002a: 	testl	%r9d, %r9d
    0000002d: 	jle	.Ltmp487 # Offset: 45
    00000033: 	movq	%rdi, %rax
    00000036: 	movq	%rcx, %r14
    00000039: 	movq	%r8, %r13
    0000003c: 	nopl	(%rax) # Size: 4
.Ltmp509:
    00000040: 	addl	$0x400, -0x70(%rsp)
    00000048: 	movl	-0x70(%rsp), %ebx
    0000004c: 	cmpl	-0x60(%rsp), %ebx
    00000050: 	jg	.Ltmp488 # Offset: 80
    00000056: 	movq	$0x1000, -0x68(%rsp)
    0000005f: 	movl	$0x400, %r10d
    00000065: 	movl	$0x400, %edx
.Ltmp511:
    0000006a: 	movslq	%edx, %r9
    0000006d: 	testl	%edx, %edx
    0000006f: 	movl	$0x1, %ebx
    00000074: 	movl	%edx, -0x6c(%rsp)
    00000078: 	leaq	-0x4(,%r9,4), %r12
    00000080: 	leaq	0x1(%r12), %rcx
    00000085: 	cmovleq	%rbx, %rcx
    00000089: 	addq	%rax, %rcx
    0000008c: 	cmpq	%rcx, %rsi
    0000008f: 	movl	$0x1, %ecx
    00000094: 	setae	%dil
    00000098: 	testl	%edx, %edx
    0000009a: 	cmovgq	%r9, %rcx
    0000009e: 	addq	%rsi, %rcx
    000000a1: 	cmpq	%rcx, %rax
    000000a4: 	setae	%cl
    000000a7: 	orb	%dil, %cl
    000000aa: 	je	.Ltmp489 # Offset: 170
    000000b0: 	cmpl	$0x7, %edx
    000000b3: 	jle	.Ltmp489 # Offset: 179
    000000b9: 	testl	%edx, %edx
    000000bb: 	cmovgl	%edx, %ebx
    000000be: 	cmpl	$0xf, %edx
    000000c1: 	jle	.Ltmp490 # Offset: 193
    000000c7: 	movl	%ebx, %r8d
    000000ca: 	movq	%rsi, %rdi
    000000cd: 	movq	%rax, %rcx
    000000d0: 	shrl	$0x4, %r8d
    000000d4: 	subl	$0x1, %r8d
    000000d8: 	shlq	$0x4, %r8
    000000dc: 	leaq	0x10(%rsi,%r8), %rbp
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp491:
    000000e8: 	movdqu	(%rdi), %xmm0
    000000ec: 	addq	$0x10, %rdi
    000000f0: 	addq	$0x40, %rcx
    000000f4: 	movd	%xmm0, %r8d
    000000f9: 	movb	%r8b, -0x40(%rcx)
    000000fd: 	movaps	%xmm0, 0x458(%rsp)
    00000105: 	movzbl	0x459(%rsp), %r8d
    0000010e: 	movb	%r8b, -0x3c(%rcx)
    00000112: 	movaps	%xmm0, 0x448(%rsp)
    0000011a: 	movzbl	0x44a(%rsp), %r8d
    00000123: 	movb	%r8b, -0x38(%rcx)
    00000127: 	movaps	%xmm0, 0x438(%rsp)
    0000012f: 	movzbl	0x43b(%rsp), %r8d
    00000138: 	movb	%r8b, -0x34(%rcx)
    0000013c: 	movaps	%xmm0, 0x428(%rsp)
    00000144: 	movzbl	0x42c(%rsp), %r8d
    0000014d: 	movb	%r8b, -0x30(%rcx)
    00000151: 	movaps	%xmm0, 0x418(%rsp)
    00000159: 	movzbl	0x41d(%rsp), %r8d
    00000162: 	movb	%r8b, -0x2c(%rcx)
    00000166: 	movaps	%xmm0, 0x408(%rsp)
    0000016e: 	movzbl	0x40e(%rsp), %r8d
    00000177: 	movb	%r8b, -0x28(%rcx)
    0000017b: 	movaps	%xmm0, 0x3f8(%rsp)
    00000183: 	movzbl	0x3ff(%rsp), %r8d
    0000018c: 	movb	%r8b, -0x24(%rcx)
    00000190: 	movaps	%xmm0, 0x3e8(%rsp)
    00000198: 	movzbl	0x3f0(%rsp), %r8d
    000001a1: 	movb	%r8b, -0x20(%rcx)
    000001a5: 	movaps	%xmm0, 0x3d8(%rsp)
    000001ad: 	movzbl	0x3e1(%rsp), %r8d
    000001b6: 	movb	%r8b, -0x1c(%rcx)
    000001ba: 	movaps	%xmm0, 0x3c8(%rsp)
    000001c2: 	movzbl	0x3d2(%rsp), %r8d
    000001cb: 	movb	%r8b, -0x18(%rcx)
    000001cf: 	movaps	%xmm0, 0x3b8(%rsp)
    000001d7: 	movzbl	0x3c3(%rsp), %r8d
    000001e0: 	movb	%r8b, -0x14(%rcx)
    000001e4: 	movaps	%xmm0, 0x3a8(%rsp)
    000001ec: 	movzbl	0x3b4(%rsp), %r8d
    000001f5: 	movb	%r8b, -0x10(%rcx)
    000001f9: 	movaps	%xmm0, 0x398(%rsp)
    00000201: 	movzbl	0x3a5(%rsp), %r8d
    0000020a: 	movb	%r8b, -0xc(%rcx)
    0000020e: 	movaps	%xmm0, 0x388(%rsp)
    00000216: 	movzbl	0x396(%rsp), %r8d
    0000021f: 	movb	%r8b, -0x8(%rcx)
    00000223: 	movaps	%xmm0, 0x378(%rsp)
    0000022b: 	movzbl	0x387(%rsp), %r8d
    00000234: 	movb	%r8b, -0x4(%rcx)
    00000238: 	cmpq	%rbp, %rdi
    0000023b: 	jne	.Ltmp491 # Offset: 571
    00000241: 	movl	%ebx, %ecx
    00000243: 	andl	$-0x10, %ecx
    00000246: 	movl	%ecx, %r8d
    00000249: 	cmpl	%ecx, %ebx
    0000024b: 	je	.Ltmp492 # Offset: 587
.Ltmp516:
    00000251: 	subl	%ecx, %ebx
    00000253: 	leal	-0x1(%rbx), %edi
    00000256: 	movl	%ebx, %r15d
    00000259: 	cmpl	$0x6, %edi
    0000025c: 	jbe	.Ltmp493 # Offset: 604
    0000025e: 	leaq	(%rax,%rcx,4), %rdi
    00000262: 	movq	(%rsi,%rcx), %rcx
    00000266: 	andl	$-0x8, %ebx
    00000269: 	addl	%ebx, %r8d
    0000026c: 	movq	%rcx, %rbp
    0000026f: 	movb	%cl, (%rdi)
    00000271: 	shrq	$0x10, %rbp
    00000275: 	movb	%ch, 0x4(%rdi)
    00000278: 	movb	%bpl, 0x8(%rdi)
    0000027c: 	movq	%rcx, %rbp
    0000027f: 	shrq	$0x18, %rbp
    00000283: 	movb	%bpl, 0xc(%rdi)
    00000287: 	movq	%rcx, %rbp
    0000028a: 	shrq	$0x20, %rbp
    0000028e: 	movb	%bpl, 0x10(%rdi)
    00000292: 	movq	%rcx, %rbp
    00000295: 	shrq	$0x28, %rbp
    00000299: 	movb	%bpl, 0x14(%rdi)
    0000029d: 	movq	%rcx, %rbp
    000002a0: 	shrq	$0x38, %rcx
    000002a4: 	shrq	$0x30, %rbp
    000002a8: 	movb	%cl, 0x1c(%rdi)
    000002ab: 	movb	%bpl, 0x18(%rdi)
    000002af: 	cmpl	%ebx, %r15d
    000002b2: 	je	.Ltmp492 # Offset: 690
.Ltmp493:
    000002b8: 	movslq	%r8d, %rdi
    000002bb: 	leal	(,%r8,4), %ecx
    000002c3: 	movzbl	(%rsi,%rdi), %ebx
    000002c7: 	movslq	%ecx, %rdi
    000002ca: 	movb	%bl, (%rax,%rdi)
    000002cd: 	leal	0x1(%r8), %edi
    000002d1: 	cmpl	%edi, %edx
    000002d3: 	jle	.Ltmp492 # Offset: 723
    000002d9: 	movslq	%edi, %rdi
    000002dc: 	movzbl	(%rsi,%rdi), %ebx
    000002e0: 	leal	0x4(%rcx), %edi
    000002e3: 	movslq	%edi, %rdi
    000002e6: 	movb	%bl, (%rax,%rdi)
    000002e9: 	leal	0x2(%r8), %edi
    000002ed: 	cmpl	%edi, %edx
    000002ef: 	jle	.Ltmp492 # Offset: 751
    000002f1: 	movslq	%edi, %rdi
    000002f4: 	movzbl	(%rsi,%rdi), %ebx
    000002f8: 	leal	0x8(%rcx), %edi
    000002fb: 	movslq	%edi, %rdi
    000002fe: 	movb	%bl, (%rax,%rdi)
    00000301: 	leal	0x3(%r8), %edi
    00000305: 	cmpl	%edi, %edx
    00000307: 	jle	.Ltmp492 # Offset: 775
    00000309: 	movslq	%edi, %rdi
    0000030c: 	movzbl	(%rsi,%rdi), %ebx
    00000310: 	leal	0xc(%rcx), %edi
    00000313: 	movslq	%edi, %rdi
    00000316: 	movb	%bl, (%rax,%rdi)
    00000319: 	leal	0x4(%r8), %edi
    0000031d: 	cmpl	%edi, %edx
    0000031f: 	jle	.Ltmp492 # Offset: 799
    00000321: 	movslq	%edi, %rdi
    00000324: 	movzbl	(%rsi,%rdi), %ebx
    00000328: 	leal	0x10(%rcx), %edi
    0000032b: 	movslq	%edi, %rdi
    0000032e: 	movb	%bl, (%rax,%rdi)
    00000331: 	leal	0x5(%r8), %edi
    00000335: 	cmpl	%edi, %edx
    00000337: 	jle	.Ltmp492 # Offset: 823
    00000339: 	movslq	%edi, %rdi
    0000033c: 	addl	$0x6, %r8d
    00000340: 	movzbl	(%rsi,%rdi), %ebx
    00000344: 	leal	0x14(%rcx), %edi
    00000347: 	movslq	%edi, %rdi
    0000034a: 	movb	%bl, (%rax,%rdi)
    0000034d: 	cmpl	%r8d, %edx
    00000350: 	jle	.Ltmp492 # Offset: 848
    00000352: 	movslq	%r8d, %r8
    00000355: 	addl	$0x18, %ecx
    00000358: 	movzbl	(%rsi,%r8), %edi
    0000035d: 	movslq	%ecx, %rcx
    00000360: 	movb	%dil, (%rax,%rcx)
.Ltmp492:
    00000364: 	leal	-0x1(%rdx), %r15d
    00000368: 	leaq	0x2(%rax,%r12), %rdi
    0000036d: 	cmpl	$0x6, %r15d
    00000371: 	leaq	0x1(%rax), %rcx
    00000375: 	movl	%r15d, -0x78(%rsp)
    0000037a: 	seta	-0x71(%rsp)
    0000037f: 	cmpq	%rdi, %r11
    00000382: 	leaq	(%r11,%r9), %rdi
    00000386: 	movzbl	-0x71(%rsp), %ebx
    0000038b: 	setae	%r8b
    0000038f: 	cmpq	%rdi, %rcx
    00000392: 	setae	%dil
    00000396: 	orb	%r8b, %dil
    00000399: 	je	.Ltmp494 # Offset: 921
    0000039f: 	testb	%bl, %bl
    000003a1: 	je	.Ltmp494 # Offset: 929
    000003a7: 	movl	%r15d, %ebx
    000003aa: 	cmpl	$0xe, %r15d
    000003ae: 	jbe	.Ltmp495 # Offset: 942
    000003b4: 	movl	%edx, %r8d
    000003b7: 	movq	%r11, %rdi
    000003ba: 	shrl	$0x4, %r8d
    000003be: 	subl	$0x1, %r8d
    000003c2: 	shlq	$0x4, %r8
    000003c6: 	leaq	0x10(%r11,%r8), %rbp
    000003cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp496:
    000003d0: 	movdqu	(%rdi), %xmm0
    000003d4: 	addq	$0x10, %rdi
    000003d8: 	addq	$0x40, %rcx
    000003dc: 	movd	%xmm0, %r8d
    000003e1: 	movb	%r8b, -0x40(%rcx)
    000003e5: 	movaps	%xmm0, 0x328(%rsp)
    000003ed: 	movzbl	0x329(%rsp), %r8d
    000003f6: 	movb	%r8b, -0x3c(%rcx)
    000003fa: 	movaps	%xmm0, 0x318(%rsp)
    00000402: 	movzbl	0x31a(%rsp), %r8d
    0000040b: 	movb	%r8b, -0x38(%rcx)
    0000040f: 	movaps	%xmm0, 0x308(%rsp)
    00000417: 	movzbl	0x30b(%rsp), %r8d
    00000420: 	movb	%r8b, -0x34(%rcx)
    00000424: 	movaps	%xmm0, 0x2f8(%rsp)
    0000042c: 	movzbl	0x2fc(%rsp), %r8d
    00000435: 	movb	%r8b, -0x30(%rcx)
    00000439: 	movaps	%xmm0, 0x2e8(%rsp)
    00000441: 	movzbl	0x2ed(%rsp), %r8d
    0000044a: 	movb	%r8b, -0x2c(%rcx)
    0000044e: 	movaps	%xmm0, 0x2d8(%rsp)
    00000456: 	movzbl	0x2de(%rsp), %r8d
    0000045f: 	movb	%r8b, -0x28(%rcx)
    00000463: 	movaps	%xmm0, 0x2c8(%rsp)
    0000046b: 	movzbl	0x2cf(%rsp), %r8d
    00000474: 	movb	%r8b, -0x24(%rcx)
    00000478: 	movaps	%xmm0, 0x2b8(%rsp)
    00000480: 	movzbl	0x2c0(%rsp), %r8d
    00000489: 	movb	%r8b, -0x20(%rcx)
    0000048d: 	movaps	%xmm0, 0x2a8(%rsp)
    00000495: 	movzbl	0x2b1(%rsp), %r8d
    0000049e: 	movb	%r8b, -0x1c(%rcx)
    000004a2: 	movaps	%xmm0, 0x298(%rsp)
    000004aa: 	movzbl	0x2a2(%rsp), %r8d
    000004b3: 	movb	%r8b, -0x18(%rcx)
    000004b7: 	movaps	%xmm0, 0x288(%rsp)
    000004bf: 	movzbl	0x293(%rsp), %r8d
    000004c8: 	movb	%r8b, -0x14(%rcx)
    000004cc: 	movaps	%xmm0, 0x278(%rsp)
    000004d4: 	movzbl	0x284(%rsp), %r8d
    000004dd: 	movb	%r8b, -0x10(%rcx)
    000004e1: 	movaps	%xmm0, 0x268(%rsp)
    000004e9: 	movzbl	0x275(%rsp), %r8d
    000004f2: 	movb	%r8b, -0xc(%rcx)
    000004f6: 	movaps	%xmm0, 0x258(%rsp)
    000004fe: 	movzbl	0x266(%rsp), %r8d
    00000507: 	movb	%r8b, -0x8(%rcx)
    0000050b: 	movaps	%xmm0, 0x248(%rsp)
    00000513: 	movzbl	0x257(%rsp), %r8d
    0000051c: 	movb	%r8b, -0x4(%rcx)
    00000520: 	cmpq	%rbp, %rdi
    00000523: 	jne	.Ltmp496 # Offset: 1315
    00000529: 	movl	%edx, %ecx
    0000052b: 	movl	%ebx, -0x78(%rsp)
    0000052f: 	andl	$-0x10, %ecx
    00000532: 	movl	%ecx, %r8d
    00000535: 	cmpl	%edx, %ecx
    00000537: 	je	.Ltmp497 # Offset: 1335
    0000053d: 	movl	%edx, %ebp
    0000053f: 	subl	%ecx, %ebp
    00000541: 	leal	-0x1(%rbp), %edi
    00000544: 	cmpl	$0x6, %edi
    00000547: 	jbe	.Ltmp498 # Offset: 1351
.Ltmp519:
    00000549: 	leaq	0x1(%rax,%rcx,4), %rdi
    0000054e: 	movq	(%r11,%rcx), %rcx
    00000552: 	movq	%rcx, %r15
    00000555: 	movb	%cl, (%rdi)
    00000557: 	shrq	$0x10, %r15
    0000055b: 	movb	%ch, 0x4(%rdi)
    0000055e: 	movb	%r15b, 0x8(%rdi)
    00000562: 	movq	%rcx, %r15
    00000565: 	shrq	$0x18, %r15
    00000569: 	movb	%r15b, 0xc(%rdi)
    0000056d: 	movq	%rcx, %r15
    00000570: 	shrq	$0x20, %r15
    00000574: 	movb	%r15b, 0x10(%rdi)
    00000578: 	movq	%rcx, %r15
    0000057b: 	shrq	$0x28, %r15
    0000057f: 	movb	%r15b, 0x14(%rdi)
    00000583: 	movq	%rcx, %r15
    00000586: 	shrq	$0x38, %rcx
    0000058a: 	movb	%cl, 0x1c(%rdi)
    0000058d: 	movl	%ebp, %ecx
    0000058f: 	shrq	$0x30, %r15
    00000593: 	andl	$-0x8, %ecx
    00000596: 	movb	%r15b, 0x18(%rdi)
    0000059a: 	addl	%ecx, %r8d
    0000059d: 	cmpl	%ecx, %ebp
    0000059f: 	je	.Ltmp497 # Offset: 1439
.Ltmp498:
    000005a5: 	movslq	%r8d, %rdi
    000005a8: 	leal	(,%r8,4), %ecx
    000005b0: 	movzbl	(%r11,%rdi), %ebp
    000005b5: 	leal	0x1(%rcx), %edi
    000005b8: 	movslq	%edi, %rdi
    000005bb: 	movb	%bpl, (%rax,%rdi)
    000005bf: 	leal	0x1(%r8), %edi
    000005c3: 	cmpl	%edi, %edx
    000005c5: 	jle	.Ltmp497 # Offset: 1477
    000005cb: 	movslq	%edi, %rdi
    000005ce: 	movzbl	(%r11,%rdi), %ebp
    000005d3: 	leal	0x5(%rcx), %edi
    000005d6: 	movslq	%edi, %rdi
    000005d9: 	movb	%bpl, (%rax,%rdi)
    000005dd: 	leal	0x2(%r8), %edi
    000005e1: 	cmpl	%edi, %edx
    000005e3: 	jle	.Ltmp497 # Offset: 1507
    000005e5: 	movslq	%edi, %rdi
    000005e8: 	movzbl	(%r11,%rdi), %ebp
    000005ed: 	leal	0x9(%rcx), %edi
    000005f0: 	movslq	%edi, %rdi
    000005f3: 	movb	%bpl, (%rax,%rdi)
    000005f7: 	leal	0x3(%r8), %edi
    000005fb: 	cmpl	%edi, %edx
    000005fd: 	jle	.Ltmp497 # Offset: 1533
    000005ff: 	movslq	%edi, %rdi
    00000602: 	movzbl	(%r11,%rdi), %ebp
    00000607: 	leal	0xd(%rcx), %edi
    0000060a: 	movslq	%edi, %rdi
    0000060d: 	movb	%bpl, (%rax,%rdi)
    00000611: 	leal	0x4(%r8), %edi
    00000615: 	cmpl	%edi, %edx
    00000617: 	jle	.Ltmp497 # Offset: 1559
    00000619: 	movslq	%edi, %rdi
    0000061c: 	movzbl	(%r11,%rdi), %ebp
    00000621: 	leal	0x11(%rcx), %edi
    00000624: 	movslq	%edi, %rdi
    00000627: 	movb	%bpl, (%rax,%rdi)
    0000062b: 	leal	0x5(%r8), %edi
    0000062f: 	cmpl	%edi, %edx
    00000631: 	jle	.Ltmp497 # Offset: 1585
    00000633: 	movslq	%edi, %rdi
    00000636: 	addl	$0x6, %r8d
    0000063a: 	movzbl	(%r11,%rdi), %ebp
    0000063f: 	leal	0x15(%rcx), %edi
    00000642: 	movslq	%edi, %rdi
    00000645: 	movb	%bpl, (%rax,%rdi)
    00000649: 	cmpl	%r8d, %edx
    0000064c: 	jle	.Ltmp497 # Offset: 1612
    0000064e: 	movslq	%r8d, %r8
    00000651: 	addl	$0x19, %ecx
    00000654: 	movzbl	(%r11,%r8), %edi
    00000659: 	movslq	%ecx, %rcx
    0000065c: 	movb	%dil, (%rax,%rcx)
.Ltmp497:
    00000660: 	leaq	0x3(%rax,%r12), %rdi
    00000665: 	leaq	0x2(%rax), %rcx
    00000669: 	cmpq	%rdi, %r14
    0000066c: 	leaq	(%r14,%r9), %rdi
    00000670: 	setae	%r8b
    00000674: 	cmpq	%rdi, %rcx
    00000677: 	setae	%dil
    0000067b: 	orb	%r8b, %dil
    0000067e: 	je	.Ltmp499 # Offset: 1662
    00000684: 	cmpb	$0x0, -0x71(%rsp)
    00000689: 	je	.Ltmp499 # Offset: 1673
    0000068f: 	movl	-0x78(%rsp), %ebx
    00000693: 	cmpl	$0xe, %ebx
    00000696: 	jbe	.Ltmp500 # Offset: 1686
    0000069c: 	movl	%edx, %r8d
    0000069f: 	movq	%r14, %rdi
    000006a2: 	shrl	$0x4, %r8d
    000006a6: 	subl	$0x1, %r8d
    000006aa: 	shlq	$0x4, %r8
    000006ae: 	leaq	0x10(%r14,%r8), %rbp
    000006b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp501:
    000006b8: 	movdqu	(%rdi), %xmm0
    000006bc: 	addq	$0x10, %rdi
    000006c0: 	addq	$0x40, %rcx
    000006c4: 	movd	%xmm0, %r8d
    000006c9: 	movb	%r8b, -0x40(%rcx)
    000006cd: 	movaps	%xmm0, 0x1f8(%rsp)
    000006d5: 	movzbl	0x1f9(%rsp), %r8d
    000006de: 	movb	%r8b, -0x3c(%rcx)
    000006e2: 	movaps	%xmm0, 0x1e8(%rsp)
    000006ea: 	movzbl	0x1ea(%rsp), %r8d
    000006f3: 	movb	%r8b, -0x38(%rcx)
    000006f7: 	movaps	%xmm0, 0x1d8(%rsp)
    000006ff: 	movzbl	0x1db(%rsp), %r8d
    00000708: 	movb	%r8b, -0x34(%rcx)
    0000070c: 	movaps	%xmm0, 0x1c8(%rsp)
    00000714: 	movzbl	0x1cc(%rsp), %r8d
    0000071d: 	movb	%r8b, -0x30(%rcx)
    00000721: 	movaps	%xmm0, 0x1b8(%rsp)
    00000729: 	movzbl	0x1bd(%rsp), %r8d
    00000732: 	movb	%r8b, -0x2c(%rcx)
    00000736: 	movaps	%xmm0, 0x1a8(%rsp)
    0000073e: 	movzbl	0x1ae(%rsp), %r8d
    00000747: 	movb	%r8b, -0x28(%rcx)
    0000074b: 	movaps	%xmm0, 0x198(%rsp)
    00000753: 	movzbl	0x19f(%rsp), %r8d
    0000075c: 	movb	%r8b, -0x24(%rcx)
    00000760: 	movaps	%xmm0, 0x188(%rsp)
    00000768: 	movzbl	0x190(%rsp), %r8d
    00000771: 	movb	%r8b, -0x20(%rcx)
    00000775: 	movaps	%xmm0, 0x178(%rsp)
    0000077d: 	movzbl	0x181(%rsp), %r8d
    00000786: 	movb	%r8b, -0x1c(%rcx)
    0000078a: 	movaps	%xmm0, 0x168(%rsp)
    00000792: 	movzbl	0x172(%rsp), %r8d
    0000079b: 	movb	%r8b, -0x18(%rcx)
    0000079f: 	movaps	%xmm0, 0x158(%rsp)
    000007a7: 	movzbl	0x163(%rsp), %r8d
    000007b0: 	movb	%r8b, -0x14(%rcx)
    000007b4: 	movaps	%xmm0, 0x148(%rsp)
    000007bc: 	movzbl	0x154(%rsp), %r8d
    000007c5: 	movb	%r8b, -0x10(%rcx)
    000007c9: 	movaps	%xmm0, 0x138(%rsp)
    000007d1: 	movzbl	0x145(%rsp), %r8d
    000007da: 	movb	%r8b, -0xc(%rcx)
    000007de: 	movaps	%xmm0, 0x128(%rsp)
    000007e6: 	movzbl	0x136(%rsp), %r8d
    000007ef: 	movb	%r8b, -0x8(%rcx)
    000007f3: 	movaps	%xmm0, 0x118(%rsp)
    000007fb: 	movzbl	0x127(%rsp), %r8d
    00000804: 	movb	%r8b, -0x4(%rcx)
    00000808: 	cmpq	%rdi, %rbp
    0000080b: 	jne	.Ltmp501 # Offset: 2059
    00000811: 	movl	%edx, %ecx
    00000813: 	movl	%ebx, -0x78(%rsp)
    00000817: 	andl	$-0x10, %ecx
    0000081a: 	movl	%ecx, %r8d
    0000081d: 	cmpl	%edx, %ecx
    0000081f: 	je	.Ltmp502 # Offset: 2079
    00000825: 	movl	%edx, %ebp
    00000827: 	subl	%ecx, %ebp
    00000829: 	leal	-0x1(%rbp), %edi
    0000082c: 	cmpl	$0x6, %edi
    0000082f: 	jbe	.Ltmp503 # Offset: 2095
.Ltmp518:
    00000831: 	leaq	0x2(%rax,%rcx,4), %rdi
    00000836: 	movq	(%r14,%rcx), %rcx
    0000083a: 	movq	%rcx, %r12
    0000083d: 	movb	%cl, (%rdi)
    0000083f: 	shrq	$0x10, %r12
    00000843: 	movb	%ch, 0x4(%rdi)
    00000846: 	movb	%r12b, 0x8(%rdi)
    0000084a: 	movq	%rcx, %r12
    0000084d: 	shrq	$0x18, %r12
    00000851: 	movb	%r12b, 0xc(%rdi)
    00000855: 	movq	%rcx, %r12
    00000858: 	shrq	$0x20, %r12
    0000085c: 	movb	%r12b, 0x10(%rdi)
    00000860: 	movq	%rcx, %r12
    00000863: 	shrq	$0x28, %r12
    00000867: 	movb	%r12b, 0x14(%rdi)
    0000086b: 	movq	%rcx, %r12
    0000086e: 	shrq	$0x38, %rcx
    00000872: 	movb	%cl, 0x1c(%rdi)
    00000875: 	movl	%ebp, %ecx
    00000877: 	shrq	$0x30, %r12
    0000087b: 	andl	$-0x8, %ecx
    0000087e: 	movb	%r12b, 0x18(%rdi)
    00000882: 	addl	%ecx, %r8d
    00000885: 	cmpl	%ecx, %ebp
    00000887: 	je	.Ltmp502 # Offset: 2183
.Ltmp503:
    0000088d: 	movslq	%r8d, %rdi
    00000890: 	leal	(,%r8,4), %ecx
    00000898: 	movzbl	(%r14,%rdi), %ebp
    0000089d: 	leal	0x2(%rcx), %edi
    000008a0: 	movslq	%edi, %rdi
    000008a3: 	movb	%bpl, (%rax,%rdi)
    000008a7: 	leal	0x1(%r8), %edi
    000008ab: 	cmpl	%edx, %edi
    000008ad: 	jge	.Ltmp502 # Offset: 2221
    000008b3: 	movslq	%edi, %rdi
    000008b6: 	movzbl	(%r14,%rdi), %ebp
    000008bb: 	leal	0x6(%rcx), %edi
    000008be: 	movslq	%edi, %rdi
    000008c1: 	movb	%bpl, (%rax,%rdi)
    000008c5: 	leal	0x2(%r8), %edi
    000008c9: 	cmpl	%edi, %edx
    000008cb: 	jle	.Ltmp502 # Offset: 2251
    000008cd: 	movslq	%edi, %rdi
    000008d0: 	movzbl	(%r14,%rdi), %ebp
    000008d5: 	leal	0xa(%rcx), %edi
    000008d8: 	movslq	%edi, %rdi
    000008db: 	movb	%bpl, (%rax,%rdi)
    000008df: 	leal	0x3(%r8), %edi
    000008e3: 	cmpl	%edi, %edx
    000008e5: 	jle	.Ltmp502 # Offset: 2277
    000008e7: 	movslq	%edi, %rdi
    000008ea: 	movzbl	(%r14,%rdi), %ebp
    000008ef: 	leal	0xe(%rcx), %edi
    000008f2: 	movslq	%edi, %rdi
    000008f5: 	movb	%bpl, (%rax,%rdi)
    000008f9: 	leal	0x4(%r8), %edi
    000008fd: 	cmpl	%edi, %edx
    000008ff: 	jle	.Ltmp502 # Offset: 2303
    00000901: 	movslq	%edi, %rdi
    00000904: 	movzbl	(%r14,%rdi), %ebp
    00000909: 	leal	0x12(%rcx), %edi
    0000090c: 	movslq	%edi, %rdi
    0000090f: 	movb	%bpl, (%rax,%rdi)
    00000913: 	leal	0x5(%r8), %edi
    00000917: 	cmpl	%edi, %edx
    00000919: 	jle	.Ltmp502 # Offset: 2329
    0000091b: 	movslq	%edi, %rdi
    0000091e: 	addl	$0x6, %r8d
    00000922: 	movzbl	(%r14,%rdi), %ebp
    00000927: 	leal	0x16(%rcx), %edi
    0000092a: 	movslq	%edi, %rdi
    0000092d: 	movb	%bpl, (%rax,%rdi)
    00000931: 	cmpl	%r8d, %edx
    00000934: 	jle	.Ltmp502 # Offset: 2356
    00000936: 	movslq	%r8d, %r8
    00000939: 	addl	$0x1a, %ecx
    0000093c: 	movzbl	(%r14,%r8), %edi
    00000941: 	movslq	%ecx, %rcx
    00000944: 	movb	%dil, (%rax,%rcx)
.Ltmp502:
    00000948: 	leaq	(%rax,%r9,4), %rdi
    0000094c: 	leaq	0x3(%rax), %rcx
    00000950: 	cmpq	%rdi, %r13
    00000953: 	setae	%dil
    00000957: 	addq	%r13, %r9
    0000095a: 	cmpq	%r9, %rcx
    0000095d: 	setae	%r8b
    00000961: 	orb	%dil, %r8b
    00000964: 	je	.Ltmp504 # Offset: 2404
    0000096a: 	cmpb	$0x0, -0x71(%rsp)
    0000096f: 	je	.Ltmp504 # Offset: 2415
    00000975: 	cmpl	$0xe, -0x78(%rsp)
    0000097a: 	jbe	.Ltmp505 # Offset: 2426
    00000980: 	movl	%edx, %r8d
    00000983: 	movq	%r13, %rdi
    00000986: 	shrl	$0x4, %r8d
    0000098a: 	subl	$0x1, %r8d
    0000098e: 	shlq	$0x4, %r8
    00000992: 	leaq	0x10(%r13,%r8), %r9
    00000997: 	nopw	(%rax,%rax) # Size: 9
.Ltmp506:
    000009a0: 	movdqu	(%rdi), %xmm0
    000009a4: 	addq	$0x10, %rdi
    000009a8: 	addq	$0x40, %rcx
    000009ac: 	movd	%xmm0, %r8d
    000009b1: 	movb	%r8b, -0x40(%rcx)
    000009b5: 	movaps	%xmm0, 0xc8(%rsp)
    000009bd: 	movzbl	0xc9(%rsp), %r8d
    000009c6: 	movb	%r8b, -0x3c(%rcx)
    000009ca: 	movaps	%xmm0, 0xb8(%rsp)
    000009d2: 	movzbl	0xba(%rsp), %r8d
    000009db: 	movb	%r8b, -0x38(%rcx)
    000009df: 	movaps	%xmm0, 0xa8(%rsp)
    000009e7: 	movzbl	0xab(%rsp), %r8d
    000009f0: 	movb	%r8b, -0x34(%rcx)
    000009f4: 	movaps	%xmm0, 0x98(%rsp)
    000009fc: 	movzbl	0x9c(%rsp), %r8d
    00000a05: 	movb	%r8b, -0x30(%rcx)
    00000a09: 	movaps	%xmm0, 0x88(%rsp)
    00000a11: 	movzbl	0x8d(%rsp), %r8d
    00000a1a: 	movb	%r8b, -0x2c(%rcx)
    00000a1e: 	movaps	%xmm0, 0x78(%rsp)
    00000a23: 	movzbl	0x7e(%rsp), %r8d
    00000a29: 	movb	%r8b, -0x28(%rcx)
    00000a2d: 	movaps	%xmm0, 0x68(%rsp)
    00000a32: 	movzbl	0x6f(%rsp), %r8d
    00000a38: 	movb	%r8b, -0x24(%rcx)
    00000a3c: 	movaps	%xmm0, 0x58(%rsp)
    00000a41: 	movzbl	0x60(%rsp), %r8d
    00000a47: 	movb	%r8b, -0x20(%rcx)
    00000a4b: 	movaps	%xmm0, 0x48(%rsp)
    00000a50: 	movzbl	0x51(%rsp), %r8d
    00000a56: 	movb	%r8b, -0x1c(%rcx)
    00000a5a: 	movaps	%xmm0, 0x38(%rsp)
    00000a5f: 	movzbl	0x42(%rsp), %r8d
    00000a65: 	movb	%r8b, -0x18(%rcx)
    00000a69: 	movaps	%xmm0, 0x28(%rsp)
    00000a6e: 	movzbl	0x33(%rsp), %r8d
    00000a74: 	movb	%r8b, -0x14(%rcx)
    00000a78: 	movaps	%xmm0, 0x18(%rsp)
    00000a7d: 	movzbl	0x24(%rsp), %r8d
    00000a83: 	movb	%r8b, -0x10(%rcx)
    00000a87: 	movaps	%xmm0, 0x8(%rsp)
    00000a8c: 	movzbl	0x15(%rsp), %r8d
    00000a92: 	movb	%r8b, -0xc(%rcx)
    00000a96: 	movaps	%xmm0, -0x8(%rsp)
    00000a9b: 	movzbl	0x6(%rsp), %r8d
    00000aa1: 	movb	%r8b, -0x8(%rcx)
    00000aa5: 	movaps	%xmm0, -0x18(%rsp)
    00000aaa: 	movzbl	-0x9(%rsp), %r8d
    00000ab0: 	movb	%r8b, -0x4(%rcx)
    00000ab4: 	cmpq	%r9, %rdi
    00000ab7: 	jne	.Ltmp506 # Offset: 2743
    00000abd: 	movl	%edx, %ecx
    00000abf: 	andl	$-0x10, %ecx
    00000ac2: 	movl	%ecx, %r8d
    00000ac5: 	cmpl	%edx, %ecx
    00000ac7: 	je	.Ltmp507 # Offset: 2759
    00000acd: 	movl	%edx, %ebx
    00000acf: 	subl	%ecx, %ebx
    00000ad1: 	leal	-0x1(%rbx), %edi
    00000ad4: 	movl	%ebx, -0x6c(%rsp)
    00000ad8: 	cmpl	$0x6, %edi
    00000adb: 	jbe	.Ltmp508 # Offset: 2779
.Ltmp517:
    00000add: 	leaq	0x3(%rax,%rcx,4), %rdi
    00000ae2: 	movq	(%r13,%rcx), %rcx
    00000ae7: 	movl	-0x6c(%rsp), %ebx
    00000aeb: 	movq	%rcx, %r9
    00000aee: 	movb	%cl, (%rdi)
    00000af0: 	shrq	$0x10, %r9
    00000af4: 	movb	%ch, 0x4(%rdi)
    00000af7: 	movb	%r9b, 0x8(%rdi)
    00000afb: 	movq	%rcx, %r9
    00000afe: 	shrq	$0x18, %r9
    00000b02: 	movb	%r9b, 0xc(%rdi)
    00000b06: 	movq	%rcx, %r9
    00000b09: 	shrq	$0x20, %r9
    00000b0d: 	movb	%r9b, 0x10(%rdi)
    00000b11: 	movq	%rcx, %r9
    00000b14: 	shrq	$0x28, %r9
    00000b18: 	movb	%r9b, 0x14(%rdi)
    00000b1c: 	movq	%rcx, %r9
    00000b1f: 	shrq	$0x38, %rcx
    00000b23: 	movb	%cl, 0x1c(%rdi)
    00000b26: 	movl	%ebx, %ecx
    00000b28: 	shrq	$0x30, %r9
    00000b2c: 	andl	$-0x8, %ecx
    00000b2f: 	movb	%r9b, 0x18(%rdi)
    00000b33: 	addl	%ecx, %r8d
    00000b36: 	cmpl	%ecx, %ebx
    00000b38: 	je	.Ltmp507 # Offset: 2872
.Ltmp508:
    00000b3e: 	movslq	%r8d, %rdi
    00000b41: 	leal	(,%r8,4), %ecx
    00000b49: 	movzbl	(%r13,%rdi), %r9d
    00000b4f: 	leal	0x3(%rcx), %edi
    00000b52: 	movslq	%edi, %rdi
    00000b55: 	movb	%r9b, (%rax,%rdi)
    00000b59: 	leal	0x1(%r8), %edi
    00000b5d: 	cmpl	%edi, %edx
    00000b5f: 	jle	.Ltmp507 # Offset: 2911
    00000b65: 	movslq	%edi, %rdi
    00000b68: 	movzbl	(%r13,%rdi), %r9d
    00000b6e: 	leal	0x7(%rcx), %edi
    00000b71: 	movslq	%edi, %rdi
    00000b74: 	movb	%r9b, (%rax,%rdi)
    00000b78: 	leal	0x2(%r8), %edi
    00000b7c: 	cmpl	%edx, %edi
    00000b7e: 	jge	.Ltmp507 # Offset: 2942
    00000b80: 	movslq	%edi, %rdi
    00000b83: 	movzbl	(%r13,%rdi), %r9d
    00000b89: 	leal	0xb(%rcx), %edi
    00000b8c: 	movslq	%edi, %rdi
    00000b8f: 	movb	%r9b, (%rax,%rdi)
    00000b93: 	leal	0x3(%r8), %edi
    00000b97: 	cmpl	%edi, %edx
    00000b99: 	jle	.Ltmp507 # Offset: 2969
    00000b9b: 	movslq	%edi, %rdi
    00000b9e: 	movzbl	(%r13,%rdi), %r9d
    00000ba4: 	leal	0xf(%rcx), %edi
    00000ba7: 	movslq	%edi, %rdi
    00000baa: 	movb	%r9b, (%rax,%rdi)
    00000bae: 	leal	0x4(%r8), %edi
    00000bb2: 	cmpl	%edx, %edi
    00000bb4: 	jge	.Ltmp507 # Offset: 2996
    00000bb6: 	movslq	%edi, %rdi
    00000bb9: 	movzbl	(%r13,%rdi), %r9d
    00000bbf: 	leal	0x13(%rcx), %edi
    00000bc2: 	movslq	%edi, %rdi
    00000bc5: 	movb	%r9b, (%rax,%rdi)
    00000bc9: 	leal	0x5(%r8), %edi
    00000bcd: 	cmpl	%edx, %edi
    00000bcf: 	jge	.Ltmp507 # Offset: 3023
    00000bd1: 	movslq	%edi, %rdi
    00000bd4: 	addl	$0x6, %r8d
    00000bd8: 	movzbl	(%r13,%rdi), %r9d
    00000bde: 	leal	0x17(%rcx), %edi
    00000be1: 	movslq	%edi, %rdi
    00000be4: 	movb	%r9b, (%rax,%rdi)
    00000be8: 	cmpl	%r8d, %edx
    00000beb: 	jle	.Ltmp507 # Offset: 3051
    00000bed: 	movslq	%r8d, %r8
    00000bf0: 	addl	$0x1b, %ecx
    00000bf3: 	movzbl	(%r13,%r8), %edx
    00000bf9: 	movslq	%ecx, %rcx
    00000bfc: 	movb	%dl, (%rax,%rcx)
.Ltmp507:
    00000bff: 	movl	-0x60(%rsp), %ebx
    00000c03: 	addq	-0x68(%rsp), %rax
    00000c08: 	addq	%r10, %rsi
    00000c0b: 	addq	%r10, %r11
    00000c0e: 	subl	$0x400, -0x5c(%rsp)
    00000c16: 	addq	%r10, %r14
    00000c19: 	addq	%r10, %r13
    00000c1c: 	cmpl	%ebx, -0x70(%rsp)
    00000c20: 	jl	.Ltmp509 # Offset: 3104
.Ltmp487:
    00000c26: 	addq	$0x470, %rsp
    00000c2d: 	popq	%rbx
    00000c2e: 	popq	%rbp
    00000c2f: 	popq	%r12
    00000c31: 	popq	%r13
    00000c33: 	popq	%r14
    00000c35: 	popq	%r15
    00000c37: 	retq # Offset: 3127
    00000c38: 	nopl	(%rax,%rax) # Size: 8
.Ltmp488:
    00000c40: 	movl	-0x5c(%rsp), %ebx
    00000c44: 	movl	%ebx, %edx
    00000c46: 	testl	%ebx, %ebx
    00000c48: 	jle	.Ltmp510 # Offset: 3144
    00000c4e: 	leal	(,%rbx,4), %ecx
    00000c55: 	movslq	%ebx, %r10
    00000c58: 	movslq	%ecx, %rdi
    00000c5b: 	movq	%rdi, -0x68(%rsp)
    00000c60: 	jmp	.Ltmp511 # Offset: 3168
    00000c65: 	nopl	(%rax) # Size: 3
.Ltmp504:
    00000c68: 	movl	%edx, %edx
    00000c6a: 	xorl	%ecx, %ecx
    00000c6c: 	nopl	(%rax) # Size: 4
.Ltmp512:
    00000c70: 	movzbl	(%r13,%rcx), %edi
    00000c76: 	movb	%dil, 0x3(%rax,%rcx,4)
    00000c7b: 	addq	$0x1, %rcx
    00000c7f: 	cmpq	%rcx, %rdx
    00000c82: 	jne	.Ltmp512 # Offset: 3202
    00000c84: 	jmp	.Ltmp507 # Offset: 3204
    00000c89: 	nopl	(%rax) # Size: 7
.Ltmp499:
    00000c90: 	movl	-0x78(%rsp), %ebx
    00000c94: 	movl	%edx, %edi
    00000c96: 	xorl	%ecx, %ecx
    00000c98: 	nopl	(%rax,%rax) # Size: 8
.Ltmp513:
    00000ca0: 	movzbl	(%r14,%rcx), %r8d
    00000ca5: 	movb	%r8b, 0x2(%rax,%rcx,4)
    00000caa: 	addq	$0x1, %rcx
    00000cae: 	cmpq	%rdi, %rcx
    00000cb1: 	jne	.Ltmp513 # Offset: 3249
    00000cb3: 	movl	%ebx, -0x78(%rsp)
    00000cb7: 	jmp	.Ltmp502 # Offset: 3255
    00000cbc: 	nopl	(%rax) # Size: 4
.Ltmp494:
    00000cc0: 	movl	-0x78(%rsp), %ebx
    00000cc4: 	movl	%edx, %edi
    00000cc6: 	xorl	%ecx, %ecx
    00000cc8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp514:
    00000cd0: 	movzbl	(%r11,%rcx), %r8d
    00000cd5: 	movb	%r8b, 0x1(%rax,%rcx,4)
    00000cda: 	addq	$0x1, %rcx
    00000cde: 	cmpq	%rdi, %rcx
    00000ce1: 	jne	.Ltmp514 # Offset: 3297
    00000ce3: 	movl	%ebx, -0x78(%rsp)
    00000ce7: 	jmp	.Ltmp497 # Offset: 3303
    00000cec: 	nopl	(%rax) # Size: 4
.Ltmp489:
    00000cf0: 	xorl	%ecx, %ecx
    00000cf2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp515:
    00000cf8: 	movzbl	(%rsi,%rcx), %edi
    00000cfc: 	movb	%dil, (%rax,%rcx,4)
    00000d00: 	addq	$0x1, %rcx
    00000d04: 	cmpl	%ecx, %edx
    00000d06: 	jg	.Ltmp515 # Offset: 3334
    00000d08: 	jmp	.Ltmp492 # Offset: 3336
    00000d0d: 	nopl	(%rax) # Size: 3
.Ltmp510:
    00000d10: 	leal	(,%rbx,4), %edx
    00000d17: 	movslq	%ebx, %r10
    00000d1a: 	movslq	%edx, %rdx
    00000d1d: 	movq	%rdx, -0x68(%rsp)
    00000d22: 	jmp	.Ltmp507 # Offset: 3362
.Ltmp490:
    00000d27: 	xorl	%ecx, %ecx
    00000d29: 	xorl	%r8d, %r8d
    00000d2c: 	jmp	.Ltmp516 # Offset: 3372
.Ltmp505:
    00000d31: 	xorl	%ecx, %ecx
    00000d33: 	xorl	%r8d, %r8d
    00000d36: 	jmp	.Ltmp517 # Offset: 3382
.Ltmp500:
    00000d3b: 	movl	%edx, %ebp
    00000d3d: 	xorl	%ecx, %ecx
    00000d3f: 	xorl	%r8d, %r8d
    00000d42: 	jmp	.Ltmp518 # Offset: 3394
.Ltmp495:
    00000d47: 	movl	%edx, %ebp
    00000d49: 	xorl	%ecx, %ecx
    00000d4b: 	xorl	%r8d, %r8d
    00000d4e: 	jmp	.Ltmp519 # Offset: 3406
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version6IhEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave2to2_version1ItEvPT_PKS0_S3_i" after disassembly {
  Number      : 78
  State       : disassembled
  Address     : 0xed00
  Size        : 0x18b
  MaxSize     : 0x190
  Offset      : 0xed00
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version1ItEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp520 # Offset: 6
    0000000c: 	movslq	%ecx, %r8
    0000000f: 	pushq	%rbx
    00000010: 	movl	%ecx, %r9d
    00000013: 	leal	-0x1(%rcx), %r11d
    00000017: 	leaq	(%r8,%r8), %rax
    0000001b: 	leaq	(%rdi,%r8,4), %r10
    0000001f: 	leaq	(%rsi,%rax), %r8
    00000023: 	cmpq	%r8, %rdi
    00000026: 	setae	%r8b
    0000002a: 	cmpq	%r10, %rsi
    0000002d: 	setae	%bl
    00000030: 	addq	%rdx, %rax
    00000033: 	orl	%ebx, %r8d
    00000036: 	cmpq	%rax, %rdi
    00000039: 	setae	%al
    0000003c: 	cmpq	%r10, %rdx
    0000003f: 	setae	%r10b
    00000043: 	orl	%r10d, %eax
    00000046: 	testb	%al, %r8b
    00000049: 	je	.Ltmp521 # Offset: 73
    0000004f: 	cmpl	$0x2, %r11d
    00000053: 	jbe	.Ltmp521 # Offset: 83
    00000059: 	cmpl	$0x6, %r11d
    0000005d: 	jbe	.Ltmp522 # Offset: 93
    00000063: 	movl	%ecx, %r8d
    00000066: 	xorl	%eax, %eax
    00000068: 	shrl	$0x3, %r8d
    0000006c: 	shlq	$0x4, %r8
.Ltmp523:
    00000070: 	movdqu	(%rsi,%rax), %xmm0
    00000075: 	movdqu	(%rdx,%rax), %xmm1
    0000007a: 	movdqa	%xmm0, %xmm2
    0000007e: 	punpckhwd	%xmm1, %xmm0
    00000082: 	punpcklwd	%xmm1, %xmm2
    00000086: 	movups	%xmm0, 0x10(%rdi,%rax,2)
    0000008b: 	movups	%xmm2, (%rdi,%rax,2)
    0000008f: 	addq	$0x10, %rax
    00000093: 	cmpq	%rax, %r8
    00000096: 	jne	.Ltmp523 # Offset: 150
    00000098: 	movl	%ecx, %eax
    0000009a: 	andl	$-0x8, %eax
    0000009d: 	movl	%eax, %r8d
    000000a0: 	cmpl	%eax, %ecx
    000000a2: 	je	.Ltmp524 # Offset: 162
    000000a8: 	movl	%ecx, %r9d
    000000ab: 	subl	%eax, %r9d
    000000ae: 	leal	-0x1(%r9), %r10d
    000000b2: 	cmpl	$0x2, %r10d
    000000b6: 	jbe	.Ltmp525 # Offset: 182
.Ltmp527:
    000000b8: 	movq	(%rsi,%rax,2), %xmm0
    000000bd: 	movq	(%rdx,%rax,2), %xmm1
    000000c2: 	leaq	(%rdi,%rax,4), %r10
    000000c6: 	movl	%r9d, %eax
    000000c9: 	andl	$-0x4, %eax
    000000cc: 	movdqa	%xmm0, %xmm2
    000000d0: 	punpcklwd	%xmm1, %xmm0
    000000d4: 	addl	%eax, %r8d
    000000d7: 	punpcklwd	%xmm1, %xmm2
    000000db: 	pshufd	$0xe, %xmm0, %xmm0
    000000e0: 	movq	%xmm2, (%r10)
    000000e5: 	movq	%xmm0, 0x8(%r10)
    000000eb: 	cmpl	%eax, %r9d
    000000ee: 	je	.Ltmp524 # Offset: 238
.Ltmp525:
    000000f0: 	movslq	%r8d, %r9
    000000f3: 	movzwl	(%rsi,%r9,2), %r11d
    000000f8: 	leaq	(%r9,%r9), %rax
    000000fc: 	leaq	(,%r9,4), %r10
    00000104: 	movw	%r11w, (%rdi,%r9,4)
    00000109: 	movzwl	(%rdx,%r9,2), %r9d
    0000010e: 	movw	%r9w, 0x2(%rdi,%rax,2)
    00000114: 	leal	0x1(%r8), %r9d
    00000118: 	cmpl	%r9d, %ecx
    0000011b: 	jle	.Ltmp524 # Offset: 283
    0000011d: 	movzwl	0x2(%rsi,%rax), %r9d
    00000123: 	addl	$0x2, %r8d
    00000127: 	movw	%r9w, 0x4(%rdi,%r10)
    0000012d: 	movzwl	0x2(%rdx,%rax), %r9d
    00000133: 	movw	%r9w, 0x6(%rdi,%rax,2)
    00000139: 	cmpl	%r8d, %ecx
    0000013c: 	jle	.Ltmp524 # Offset: 316
    0000013e: 	movzwl	0x4(%rsi,%rax), %ecx
    00000143: 	movw	%cx, 0x8(%rdi,%r10)
    00000149: 	movzwl	0x4(%rdx,%rax), %edx
    0000014e: 	movw	%dx, 0xa(%rdi,%rax,2)
.Ltmp524:
    00000153: 	popq	%rbx
    00000154: 	retq # Offset: 340
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp521:
    00000158: 	movl	%ecx, %ecx
    0000015a: 	xorl	%eax, %eax
    0000015c: 	nopl	(%rax) # Size: 4
.Ltmp526:
    00000160: 	movzwl	(%rsi,%rax,2), %r8d
    00000165: 	movw	%r8w, (%rdi,%rax,4)
    0000016a: 	movzwl	(%rdx,%rax,2), %r8d
    0000016f: 	movw	%r8w, 0x2(%rdi,%rax,4)
    00000175: 	addq	$0x1, %rax
    00000179: 	cmpq	%rax, %rcx
    0000017c: 	jne	.Ltmp526 # Offset: 380
    0000017e: 	popq	%rbx
    0000017f: 	retq # Offset: 383
.Ltmp520:
    00000180: 	retq # Offset: 384
.Ltmp522:
    00000181: 	xorl	%eax, %eax
    00000183: 	xorl	%r8d, %r8d
    00000186: 	jmp	.Ltmp527 # Offset: 390
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version1ItEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version2ItEvPT_PKS0_S3_i" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0xee90
  Size        : 0x1a4
  MaxSize     : 0x1b0
  Offset      : 0xee90
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version2ItEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp528 # Offset: 6
    0000000c: 	movslq	%ecx, %r8
    0000000f: 	pushq	%rbp
    00000010: 	leal	-0x1(%rcx), %r10d
    00000014: 	leaq	(%r8,%r8), %rax
    00000018: 	leaq	(%rdi,%r8,4), %r9
    0000001c: 	pushq	%rbx
    0000001d: 	movl	%ecx, %ebx
    0000001f: 	leaq	(%rsi,%rax), %r8
    00000023: 	cmpq	%r8, %rdi
    00000026: 	setae	%r8b
    0000002a: 	cmpq	%r9, %rsi
    0000002d: 	setae	%r11b
    00000031: 	addq	%rdx, %rax
    00000034: 	orl	%r11d, %r8d
    00000037: 	cmpq	%rax, %rdi
    0000003a: 	setae	%al
    0000003d: 	cmpq	%r9, %rdx
    00000040: 	setae	%r9b
    00000044: 	orl	%r9d, %eax
    00000047: 	testb	%al, %r8b
    0000004a: 	je	.Ltmp529 # Offset: 74
    00000050: 	cmpl	$0x2, %r10d
    00000054: 	jbe	.Ltmp529 # Offset: 84
    0000005a: 	cmpl	$0x6, %r10d
    0000005e: 	jbe	.Ltmp530 # Offset: 94
    00000064: 	movl	%ecx, %r8d
    00000067: 	xorl	%eax, %eax
    00000069: 	shrl	$0x3, %r8d
    0000006d: 	shlq	$0x4, %r8
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp531:
    00000078: 	movdqu	(%rsi,%rax), %xmm0
    0000007d: 	movdqu	(%rdx,%rax), %xmm1
    00000082: 	movdqa	%xmm0, %xmm2
    00000086: 	punpckhwd	%xmm1, %xmm0
    0000008a: 	punpcklwd	%xmm1, %xmm2
    0000008e: 	movups	%xmm0, 0x10(%rdi,%rax,2)
    00000093: 	movups	%xmm2, (%rdi,%rax,2)
    00000097: 	addq	$0x10, %rax
    0000009b: 	cmpq	%rax, %r8
    0000009e: 	jne	.Ltmp531 # Offset: 158
    000000a0: 	movl	%ecx, %eax
    000000a2: 	andl	$-0x8, %eax
    000000a5: 	movl	%eax, %r10d
    000000a8: 	leaq	(%r10,%r10), %r8
    000000ac: 	leaq	(%rdi,%r10,4), %r9
    000000b0: 	leaq	(%rsi,%r8), %r11
    000000b4: 	addq	%rdx, %r8
    000000b7: 	cmpl	%eax, %ecx
    000000b9: 	je	.Ltmp532 # Offset: 185
    000000bf: 	movl	%ecx, %ebx
    000000c1: 	subl	%eax, %ebx
    000000c3: 	leal	-0x1(%rbx), %ebp
    000000c6: 	cmpl	$0x2, %ebp
    000000c9: 	jbe	.Ltmp533 # Offset: 201
.Ltmp535:
    000000cb: 	movq	(%rsi,%r10,2), %xmm0
    000000d1: 	movq	(%rdx,%r10,2), %xmm1
    000000d7: 	movl	%ebx, %esi
    000000d9: 	leaq	(%rdi,%r10,4), %rdi
    000000dd: 	andl	$-0x4, %esi
    000000e0: 	movdqa	%xmm0, %xmm2
    000000e4: 	movl	%esi, %edx
    000000e6: 	punpcklwd	%xmm1, %xmm0
    000000ea: 	addl	%esi, %eax
    000000ec: 	punpcklwd	%xmm1, %xmm2
    000000f0: 	pshufd	$0xe, %xmm0, %xmm0
    000000f5: 	leaq	(%r9,%rdx,4), %r9
    000000f9: 	addq	%rdx, %rdx
    000000fc: 	movq	%xmm2, (%rdi)
    00000100: 	addq	%rdx, %r11
    00000103: 	addq	%rdx, %r8
    00000106: 	movq	%xmm0, 0x8(%rdi)
    0000010b: 	cmpl	%esi, %ebx
    0000010d: 	je	.Ltmp532 # Offset: 269
.Ltmp533:
    0000010f: 	movzwl	(%r11), %edx
    00000113: 	movw	%dx, (%r9)
    00000117: 	movzwl	(%r8), %edx
    0000011b: 	movw	%dx, 0x2(%r9)
    00000120: 	leal	0x1(%rax), %edx
    00000123: 	cmpl	%edx, %ecx
    00000125: 	jle	.Ltmp532 # Offset: 293
    00000127: 	movzwl	0x2(%r11), %edx
    0000012c: 	addl	$0x2, %eax
    0000012f: 	movw	%dx, 0x4(%r9)
    00000134: 	movzwl	0x2(%r8), %edx
    00000139: 	movw	%dx, 0x6(%r9)
    0000013e: 	cmpl	%eax, %ecx
    00000140: 	jle	.Ltmp532 # Offset: 320
    00000142: 	movzwl	0x4(%r11), %eax
    00000147: 	movw	%ax, 0x8(%r9)
    0000014c: 	movzwl	0x4(%r8), %eax
    00000151: 	movw	%ax, 0xa(%r9)
.Ltmp532:
    00000156: 	popq	%rbx
    00000157: 	popq	%rbp
    00000158: 	retq # Offset: 344
    00000159: 	nopl	(%rax) # Size: 7
.Ltmp529:
    00000160: 	movl	%ecx, %ecx
    00000162: 	xorl	%eax, %eax
    00000164: 	nopl	(%rax) # Size: 4
.Ltmp534:
    00000168: 	movzwl	(%rsi,%rax,2), %r8d
    0000016d: 	movw	%r8w, (%rdi,%rax,4)
    00000172: 	movzwl	(%rdx,%rax,2), %r8d
    00000177: 	movw	%r8w, 0x2(%rdi,%rax,4)
    0000017d: 	addq	$0x1, %rax
    00000181: 	cmpq	%rax, %rcx
    00000184: 	jne	.Ltmp534 # Offset: 388
    00000186: 	popq	%rbx
    00000187: 	popq	%rbp
    00000188: 	retq # Offset: 392
    00000189: 	nopl	(%rax) # Size: 7
.Ltmp528:
    00000190: 	retq # Offset: 400
.Ltmp530:
    00000191: 	movq	%rdx, %r8
    00000194: 	movq	%rsi, %r11
    00000197: 	movq	%rdi, %r9
    0000019a: 	xorl	%eax, %eax
    0000019c: 	xorl	%r10d, %r10d
    0000019f: 	jmp	.Ltmp535 # Offset: 415
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version2ItEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version3ItEvPT_PKS0_S3_i" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0xf040
  Size        : 0x2c1
  MaxSize     : 0x2d0
  Offset      : 0xf040
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version3ItEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	movq	%rdi, %r8
    00000007: 	movq	%rsi, %rdi
    0000000a: 	movq	%rdx, %rsi
    0000000d: 	movslq	%ecx, %rdx
    00000010: 	testq	%rdx, %rdx
    00000013: 	je	.Ltmp536 # Offset: 19
    00000019: 	leaq	-0x1(%rdx), %rax
    0000001d: 	pushq	%rbx
    0000001e: 	leaq	(%rdx,%rdx), %rbx
    00000022: 	cmpq	$0x7, %rax
    00000026: 	leaq	0x2(%r8,%rax,4), %rax
    0000002b: 	leaq	(%rdi,%rbx), %rcx
    0000002f: 	seta	%r11b
    00000033: 	cmpq	%rax, %rdi
    00000036: 	setae	%al
    00000039: 	cmpq	%rcx, %r8
    0000003c: 	setae	%cl
    0000003f: 	orb	%cl, %al
    00000041: 	je	.Ltmp537 # Offset: 65
    00000047: 	testb	%r11b, %r11b
    0000004a: 	je	.Ltmp537 # Offset: 74
    00000050: 	movq	%rdx, %r10
    00000053: 	movq	%r8, %rax
    00000056: 	xorl	%ecx, %ecx
    00000058: 	shrq	$0x3, %r10
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp538:
    00000060: 	movq	%rcx, %r9
    00000063: 	addq	$0x1, %rcx
    00000067: 	addq	$0x20, %rax
    0000006b: 	shlq	$0x4, %r9
    0000006f: 	movdqu	(%rdi,%r9), %xmm0
    00000075: 	pextrw	$0x0, %xmm0, %r9d
    0000007b: 	movw	%r9w, -0x20(%rax)
    00000080: 	pextrw	$0x1, %xmm0, %r9d
    00000086: 	movw	%r9w, -0x1c(%rax)
    0000008b: 	pextrw	$0x2, %xmm0, %r9d
    00000091: 	movw	%r9w, -0x18(%rax)
    00000096: 	pextrw	$0x3, %xmm0, %r9d
    0000009c: 	movw	%r9w, -0x14(%rax)
    000000a1: 	pextrw	$0x4, %xmm0, %r9d
    000000a7: 	movw	%r9w, -0x10(%rax)
    000000ac: 	pextrw	$0x5, %xmm0, %r9d
    000000b2: 	movw	%r9w, -0xc(%rax)
    000000b7: 	pextrw	$0x6, %xmm0, %r9d
    000000bd: 	movw	%r9w, -0x8(%rax)
    000000c2: 	pextrw	$0x7, %xmm0, %r9d
    000000c8: 	movw	%r9w, -0x4(%rax)
    000000cd: 	cmpq	%rcx, %r10
    000000d0: 	jne	.Ltmp538 # Offset: 208
    000000d2: 	movq	%rdx, %rax
    000000d5: 	andq	$-0x8, %rax
    000000d9: 	leaq	(%rdi,%rax,2), %rdi
    000000dd: 	leaq	(%r8,%rax,4), %rcx
    000000e1: 	cmpq	%rax, %rdx
    000000e4: 	je	.Ltmp539 # Offset: 228
    000000e6: 	movzwl	(%rdi), %r9d
    000000ea: 	movw	%r9w, (%rcx)
    000000ee: 	leaq	0x1(%rax), %r9
    000000f2: 	cmpq	%r9, %rdx
    000000f5: 	jbe	.Ltmp539 # Offset: 245
    000000f7: 	movzwl	0x2(%rdi), %r9d
    000000fc: 	movw	%r9w, 0x4(%rcx)
    00000101: 	leaq	0x2(%rax), %r9
    00000105: 	cmpq	%r9, %rdx
    00000108: 	jbe	.Ltmp539 # Offset: 264
    0000010a: 	movzwl	0x4(%rdi), %r9d
    0000010f: 	movw	%r9w, 0x8(%rcx)
    00000114: 	leaq	0x3(%rax), %r9
    00000118: 	cmpq	%r9, %rdx
    0000011b: 	jbe	.Ltmp539 # Offset: 283
    0000011d: 	movzwl	0x6(%rdi), %r9d
    00000122: 	movw	%r9w, 0xc(%rcx)
    00000127: 	leaq	0x4(%rax), %r9
    0000012b: 	cmpq	%r9, %rdx
    0000012e: 	jbe	.Ltmp539 # Offset: 302
    00000130: 	movzwl	0x8(%rdi), %r9d
    00000135: 	movw	%r9w, 0x10(%rcx)
    0000013a: 	leaq	0x5(%rax), %r9
    0000013e: 	cmpq	%r9, %rdx
    00000141: 	jbe	.Ltmp539 # Offset: 321
    00000143: 	movzwl	0xa(%rdi), %r9d
    00000148: 	addq	$0x6, %rax
    0000014c: 	movw	%r9w, 0x14(%rcx)
    00000151: 	cmpq	%rax, %rdx
    00000154: 	jbe	.Ltmp539 # Offset: 340
    00000156: 	movzwl	0xc(%rdi), %eax
    0000015a: 	movw	%ax, 0x18(%rcx)
.Ltmp539:
    0000015e: 	leaq	(%r8,%rdx,4), %rax
    00000162: 	leaq	0x2(%r8), %r10
    00000166: 	cmpq	%rax, %rsi
    00000169: 	setae	%al
    0000016c: 	addq	%rsi, %rbx
    0000016f: 	cmpq	%rbx, %r10
    00000172: 	setae	%cl
    00000175: 	orb	%cl, %al
    00000177: 	je	.Ltmp540 # Offset: 375
    0000017d: 	movq	%rdx, %r9
    00000180: 	movq	%r10, %rax
    00000183: 	xorl	%ecx, %ecx
    00000185: 	shrq	$0x3, %r9
    00000189: 	testb	%r11b, %r11b
    0000018c: 	je	.Ltmp540 # Offset: 396
    00000192: 	nopw	(%rax,%rax) # Size: 6
.Ltmp541:
    00000198: 	movq	%rcx, %rdi
    0000019b: 	addq	$0x1, %rcx
    0000019f: 	addq	$0x20, %rax
    000001a3: 	shlq	$0x4, %rdi
    000001a7: 	movdqu	(%rsi,%rdi), %xmm0
    000001ac: 	pextrw	$0x0, %xmm0, %edi
    000001b1: 	movw	%di, -0x20(%rax)
    000001b5: 	pextrw	$0x1, %xmm0, %edi
    000001ba: 	movw	%di, -0x1c(%rax)
    000001be: 	pextrw	$0x2, %xmm0, %edi
    000001c3: 	movw	%di, -0x18(%rax)
    000001c7: 	pextrw	$0x3, %xmm0, %edi
    000001cc: 	movw	%di, -0x14(%rax)
    000001d0: 	pextrw	$0x4, %xmm0, %edi
    000001d5: 	movw	%di, -0x10(%rax)
    000001d9: 	pextrw	$0x5, %xmm0, %edi
    000001de: 	movw	%di, -0xc(%rax)
    000001e2: 	pextrw	$0x6, %xmm0, %edi
    000001e7: 	movw	%di, -0x8(%rax)
    000001eb: 	pextrw	$0x7, %xmm0, %edi
    000001f0: 	movw	%di, -0x4(%rax)
    000001f4: 	cmpq	%rcx, %r9
    000001f7: 	jne	.Ltmp541 # Offset: 503
    000001f9: 	movq	%rdx, %rax
    000001fc: 	andq	$-0x8, %rax
    00000200: 	leaq	(%rsi,%rax,2), %rsi
    00000204: 	leaq	(%r10,%rax,4), %rcx
    00000208: 	cmpq	%rax, %rdx
    0000020b: 	je	.Ltmp542 # Offset: 523
    0000020d: 	movzwl	(%rsi), %edi
    00000210: 	movw	%di, (%rcx)
    00000213: 	leaq	0x1(%rax), %rdi
    00000217: 	cmpq	%rdi, %rdx
    0000021a: 	jbe	.Ltmp542 # Offset: 538
    0000021c: 	movzwl	0x2(%rsi), %edi
    00000220: 	movw	%di, 0x4(%rcx)
    00000224: 	leaq	0x2(%rax), %rdi
    00000228: 	cmpq	%rdi, %rdx
    0000022b: 	jbe	.Ltmp542 # Offset: 555
    0000022d: 	movzwl	0x4(%rsi), %edi
    00000231: 	movw	%di, 0x8(%rcx)
    00000235: 	leaq	0x3(%rax), %rdi
    00000239: 	cmpq	%rdi, %rdx
    0000023c: 	jbe	.Ltmp542 # Offset: 572
    0000023e: 	movzwl	0x6(%rsi), %edi
    00000242: 	movw	%di, 0xc(%rcx)
    00000246: 	leaq	0x4(%rax), %rdi
    0000024a: 	cmpq	%rdi, %rdx
    0000024d: 	jbe	.Ltmp542 # Offset: 589
    0000024f: 	movzwl	0x8(%rsi), %edi
    00000253: 	movw	%di, 0x10(%rcx)
    00000257: 	leaq	0x5(%rax), %rdi
    0000025b: 	cmpq	%rdi, %rdx
    0000025e: 	jbe	.Ltmp542 # Offset: 606
    00000260: 	movzwl	0xa(%rsi), %edi
    00000264: 	addq	$0x6, %rax
    00000268: 	movw	%di, 0x14(%rcx)
    0000026c: 	cmpq	%rax, %rdx
    0000026f: 	jbe	.Ltmp542 # Offset: 623
    00000271: 	movzwl	0xc(%rsi), %eax
    00000275: 	movw	%ax, 0x18(%rcx)
.Ltmp542:
    00000279: 	popq	%rbx
    0000027a: 	retq # Offset: 634
    0000027b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp540:
    00000280: 	xorl	%eax, %eax
    00000282: 	nopw	(%rax,%rax) # Size: 6
.Ltmp543:
    00000288: 	movzwl	(%rsi,%rax,2), %ecx
    0000028c: 	movw	%cx, 0x2(%r8,%rax,4)
    00000292: 	addq	$0x1, %rax
    00000296: 	cmpq	%rax, %rdx
    00000299: 	jne	.Ltmp543 # Offset: 665
    0000029b: 	popq	%rbx
    0000029c: 	retq # Offset: 668
    0000029d: 	nopl	(%rax) # Size: 3
.Ltmp537:
    000002a0: 	xorl	%eax, %eax
    000002a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp544:
    000002a8: 	movzwl	(%rdi,%rax,2), %ecx
    000002ac: 	movw	%cx, (%r8,%rax,4)
    000002b1: 	addq	$0x1, %rax
    000002b5: 	cmpq	%rax, %rdx
    000002b8: 	jne	.Ltmp544 # Offset: 696
    000002ba: 	jmp	.Ltmp539 # Offset: 698
    000002bf: 	nop # Size: 1
.Ltmp536:
    000002c0: 	retq # Offset: 704
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version3ItEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version4ItEvPT_PKS0_S3_i" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0xf310
  Size        : 0x397
  MaxSize     : 0x3a0
  Offset      : 0xf310
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version4ItEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%ecx, -0xc(%rsp)
    00000012: 	testl	%ecx, %ecx
    00000014: 	jle	.Ltmp545 # Offset: 20
    0000001a: 	movq	%rdi, %r8
    0000001d: 	movl	%ecx, %r14d
    00000020: 	movq	%rsi, %rdi
    00000023: 	xorl	%ebx, %ebx
    00000025: 	movq	%rdx, %rsi
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp553:
    00000030: 	addl	$0x400, %ebx
    00000036: 	cmpl	-0xc(%rsp), %ebx
    0000003a: 	jg	.Ltmp546 # Offset: 58
    00000040: 	movl	$0x800, %r12d
    00000046: 	movl	$0x1000, %ebp
    0000004b: 	movl	$0x400, %edx
.Ltmp554:
    00000050: 	cmpq	$0x8, %rdx
    00000054: 	movl	$0x2, %ecx
    00000059: 	leaq	-0x2(,%rdx,4), %rax
    00000061: 	seta	%r15b
    00000065: 	testq	%rdx, %rdx
    00000068: 	leaq	(%rdx,%rdx), %r10
    0000006c: 	cmoveq	%rcx, %rax
    00000070: 	cmoveq	%rcx, %r10
    00000074: 	addq	%r8, %rax
    00000077: 	leaq	(%rdi,%r10), %rcx
    0000007b: 	cmpq	%rax, %rdi
    0000007e: 	setae	%al
    00000081: 	cmpq	%rcx, %r8
    00000084: 	setae	%cl
    00000087: 	orb	%cl, %al
    00000089: 	je	.Ltmp547 # Offset: 137
    0000008f: 	testb	%r15b, %r15b
    00000092: 	je	.Ltmp547 # Offset: 146
    00000098: 	testq	%rdx, %rdx
    0000009b: 	movl	$0x1, %r13d
    000000a1: 	movq	%r8, %rax
    000000a4: 	cmovneq	%rdx, %r13
    000000a8: 	xorl	%ecx, %ecx
    000000aa: 	movq	%r13, %r11
    000000ad: 	shrq	$0x3, %r11
    000000b1: 	nopl	(%rax) # Size: 7
.Ltmp548:
    000000b8: 	movq	%rcx, %r9
    000000bb: 	addq	$0x1, %rcx
    000000bf: 	addq	$0x20, %rax
    000000c3: 	shlq	$0x4, %r9
    000000c7: 	movdqu	(%rdi,%r9), %xmm0
    000000cd: 	pextrw	$0x0, %xmm0, %r9d
    000000d3: 	movw	%r9w, -0x20(%rax)
    000000d8: 	pextrw	$0x1, %xmm0, %r9d
    000000de: 	movw	%r9w, -0x1c(%rax)
    000000e3: 	pextrw	$0x2, %xmm0, %r9d
    000000e9: 	movw	%r9w, -0x18(%rax)
    000000ee: 	pextrw	$0x3, %xmm0, %r9d
    000000f4: 	movw	%r9w, -0x14(%rax)
    000000f9: 	pextrw	$0x4, %xmm0, %r9d
    000000ff: 	movw	%r9w, -0x10(%rax)
    00000104: 	pextrw	$0x5, %xmm0, %r9d
    0000010a: 	movw	%r9w, -0xc(%rax)
    0000010f: 	pextrw	$0x6, %xmm0, %r9d
    00000115: 	movw	%r9w, -0x8(%rax)
    0000011a: 	pextrw	$0x7, %xmm0, %r9d
    00000120: 	movw	%r9w, -0x4(%rax)
    00000125: 	cmpq	%rcx, %r11
    00000128: 	jne	.Ltmp548 # Offset: 296
    0000012a: 	movq	%r13, %rax
    0000012d: 	andq	$-0x8, %rax
    00000131: 	leaq	(%rdi,%rax,2), %r9
    00000135: 	leaq	(%r8,%rax,4), %rcx
    00000139: 	cmpq	%rax, %r13
    0000013c: 	je	.Ltmp549 # Offset: 316
    0000013e: 	movzwl	(%r9), %r11d
    00000142: 	movw	%r11w, (%rcx)
    00000146: 	leaq	0x1(%rax), %r11
    0000014a: 	cmpq	%r11, %rdx
    0000014d: 	jbe	.Ltmp549 # Offset: 333
    0000014f: 	movzwl	0x2(%r9), %r11d
    00000154: 	movw	%r11w, 0x4(%rcx)
    00000159: 	leaq	0x2(%rax), %r11
    0000015d: 	cmpq	%r11, %rdx
    00000160: 	jbe	.Ltmp549 # Offset: 352
    00000162: 	movzwl	0x4(%r9), %r11d
    00000167: 	movw	%r11w, 0x8(%rcx)
    0000016c: 	leaq	0x3(%rax), %r11
    00000170: 	cmpq	%r11, %rdx
    00000173: 	jbe	.Ltmp549 # Offset: 371
    00000175: 	movzwl	0x6(%r9), %r11d
    0000017a: 	movw	%r11w, 0xc(%rcx)
    0000017f: 	leaq	0x4(%rax), %r11
    00000183: 	cmpq	%r11, %rdx
    00000186: 	jbe	.Ltmp549 # Offset: 390
    00000188: 	movzwl	0x8(%r9), %r11d
    0000018d: 	movw	%r11w, 0x10(%rcx)
    00000192: 	leaq	0x5(%rax), %r11
    00000196: 	cmpq	%r11, %rdx
    00000199: 	jbe	.Ltmp549 # Offset: 409
    0000019b: 	movzwl	0xa(%r9), %r11d
    000001a0: 	addq	$0x6, %rax
    000001a4: 	movw	%r11w, 0x14(%rcx)
    000001a9: 	cmpq	%rax, %rdx
    000001ac: 	jbe	.Ltmp549 # Offset: 428
    000001ae: 	movzwl	0xc(%r9), %eax
    000001b3: 	movw	%ax, 0x18(%rcx)
.Ltmp549:
    000001b7: 	testq	%rdx, %rdx
    000001ba: 	movl	$0x4, %ecx
    000001bf: 	leaq	(,%rdx,4), %rax
    000001c7: 	cmoveq	%rcx, %rax
    000001cb: 	leaq	0x2(%r8), %r11
    000001cf: 	addq	%r8, %rax
    000001d2: 	cmpq	%rax, %rsi
    000001d5: 	setae	%al
    000001d8: 	addq	%rsi, %r10
    000001db: 	cmpq	%r10, %r11
    000001de: 	setae	%cl
    000001e1: 	orb	%cl, %al
    000001e3: 	je	.Ltmp550 # Offset: 483
    000001e9: 	testb	%r15b, %r15b
    000001ec: 	je	.Ltmp550 # Offset: 492
    000001f2: 	testq	%rdx, %rdx
    000001f5: 	movl	$0x1, %r13d
    000001fb: 	movq	%r11, %rax
    000001fe: 	cmovneq	%rdx, %r13
    00000202: 	xorl	%ecx, %ecx
    00000204: 	movq	%r13, %r10
    00000207: 	shrq	$0x3, %r10
    0000020b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp551:
    00000210: 	movq	%rcx, %r9
    00000213: 	addq	$0x1, %rcx
    00000217: 	addq	$0x20, %rax
    0000021b: 	shlq	$0x4, %r9
    0000021f: 	movdqu	(%rsi,%r9), %xmm0
    00000225: 	pextrw	$0x0, %xmm0, %r9d
    0000022b: 	movw	%r9w, -0x20(%rax)
    00000230: 	pextrw	$0x1, %xmm0, %r9d
    00000236: 	movw	%r9w, -0x1c(%rax)
    0000023b: 	pextrw	$0x2, %xmm0, %r9d
    00000241: 	movw	%r9w, -0x18(%rax)
    00000246: 	pextrw	$0x3, %xmm0, %r9d
    0000024c: 	movw	%r9w, -0x14(%rax)
    00000251: 	pextrw	$0x4, %xmm0, %r9d
    00000257: 	movw	%r9w, -0x10(%rax)
    0000025c: 	pextrw	$0x5, %xmm0, %r9d
    00000262: 	movw	%r9w, -0xc(%rax)
    00000267: 	pextrw	$0x6, %xmm0, %r9d
    0000026d: 	movw	%r9w, -0x8(%rax)
    00000272: 	pextrw	$0x7, %xmm0, %r9d
    00000278: 	movw	%r9w, -0x4(%rax)
    0000027d: 	cmpq	%rcx, %r10
    00000280: 	jne	.Ltmp551 # Offset: 640
    00000282: 	movq	%r13, %rax
    00000285: 	andq	$-0x8, %rax
    00000289: 	leaq	(%rsi,%rax,2), %r9
    0000028d: 	leaq	(%r11,%rax,4), %rcx
    00000291: 	cmpq	%rax, %r13
    00000294: 	je	.Ltmp552 # Offset: 660
    00000296: 	movzwl	(%r9), %r10d
    0000029a: 	movw	%r10w, (%rcx)
    0000029e: 	leaq	0x1(%rax), %r10
    000002a2: 	cmpq	%r10, %rdx
    000002a5: 	jbe	.Ltmp552 # Offset: 677
    000002a7: 	movzwl	0x2(%r9), %r10d
    000002ac: 	movw	%r10w, 0x4(%rcx)
    000002b1: 	leaq	0x2(%rax), %r10
    000002b5: 	cmpq	%rdx, %r10
    000002b8: 	jae	.Ltmp552 # Offset: 696
    000002ba: 	movzwl	0x4(%r9), %r10d
    000002bf: 	movw	%r10w, 0x8(%rcx)
    000002c4: 	leaq	0x3(%rax), %r10
    000002c8: 	cmpq	%r10, %rdx
    000002cb: 	jbe	.Ltmp552 # Offset: 715
    000002cd: 	movzwl	0x6(%r9), %r10d
    000002d2: 	movw	%r10w, 0xc(%rcx)
    000002d7: 	leaq	0x4(%rax), %r10
    000002db: 	cmpq	%r10, %rdx
    000002de: 	jbe	.Ltmp552 # Offset: 734
    000002e0: 	movzwl	0x8(%r9), %r10d
    000002e5: 	movw	%r10w, 0x10(%rcx)
    000002ea: 	leaq	0x5(%rax), %r10
    000002ee: 	cmpq	%r10, %rdx
    000002f1: 	jbe	.Ltmp552 # Offset: 753
    000002f3: 	movzwl	0xa(%r9), %r10d
    000002f8: 	addq	$0x6, %rax
    000002fc: 	movw	%r10w, 0x14(%rcx)
    00000301: 	cmpq	%rax, %rdx
    00000304: 	jbe	.Ltmp552 # Offset: 772
    00000306: 	movzwl	0xc(%r9), %eax
    0000030b: 	movw	%ax, 0x18(%rcx)
.Ltmp552:
    0000030f: 	addq	%rbp, %r8
    00000312: 	addq	%r12, %rdi
    00000315: 	addq	%r12, %rsi
    00000318: 	subl	$0x400, %r14d
    0000031f: 	cmpl	-0xc(%rsp), %ebx
    00000323: 	jl	.Ltmp553 # Offset: 803
.Ltmp545:
    00000329: 	popq	%rbx
    0000032a: 	popq	%rbp
    0000032b: 	popq	%r12
    0000032d: 	popq	%r13
    0000032f: 	popq	%r14
    00000331: 	popq	%r15
    00000333: 	retq # Offset: 819
    00000334: 	nopl	(%rax) # Size: 4
.Ltmp546:
    00000338: 	leal	(%r14,%r14), %ebp
    0000033c: 	movslq	%r14d, %rdx
    0000033f: 	movslq	%ebp, %rbp
    00000342: 	leaq	(%rdx,%rdx), %r12
    00000346: 	addq	%rbp, %rbp
    00000349: 	testq	%rdx, %rdx
    0000034c: 	jne	.Ltmp554 # Offset: 844
    00000352: 	jmp	.Ltmp552 # Offset: 850
    00000354: 	nopl	(%rax) # Size: 4
.Ltmp550:
    00000358: 	xorl	%eax, %eax
    0000035a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp555:
    00000360: 	movzwl	(%rsi,%rax,2), %ecx
    00000364: 	movw	%cx, 0x2(%r8,%rax,4)
    0000036a: 	addq	$0x1, %rax
    0000036e: 	cmpq	%rdx, %rax
    00000371: 	jb	.Ltmp555 # Offset: 881
    00000373: 	jmp	.Ltmp552 # Offset: 883
    00000375: 	nopl	(%rax) # Size: 3
.Ltmp547:
    00000378: 	xorl	%eax, %eax
    0000037a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp556:
    00000380: 	movzwl	(%rdi,%rax,2), %ecx
    00000384: 	movw	%cx, (%r8,%rax,4)
    00000389: 	addq	$0x1, %rax
    0000038d: 	cmpq	%rax, %rdx
    00000390: 	ja	.Ltmp556 # Offset: 912
    00000392: 	jmp	.Ltmp549 # Offset: 914
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version4ItEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version5ItEvPT_PKS0_S3_i" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0xf6b0
  Size        : 0x39e
  MaxSize     : 0x3a0
  Offset      : 0xf6b0
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version5ItEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%ecx, -0xc(%rsp)
    00000012: 	testl	%ecx, %ecx
    00000014: 	jle	.Ltmp557 # Offset: 20
    0000001a: 	movq	%rsi, %r8
    0000001d: 	movl	%ecx, %r12d
    00000020: 	movq	%rdx, %rsi
    00000023: 	xorl	%ebx, %ebx
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp565:
    00000028: 	addl	$0x400, %ebx
    0000002e: 	cmpl	-0xc(%rsp), %ebx
    00000032: 	jg	.Ltmp558 # Offset: 50
    00000038: 	movl	$0x800, %ebp
    0000003d: 	movl	$0x1000, %r14d
    00000043: 	movl	$0x400, %edx
.Ltmp566:
    00000048: 	movslq	%edx, %r13
    0000004b: 	testl	%edx, %edx
    0000004d: 	movl	$0x2, %ecx
    00000052: 	leaq	-0x2(,%r13,4), %rax
    0000005a: 	leaq	(%r13,%r13), %r11
    0000005f: 	cmovleq	%rcx, %rax
    00000063: 	addq	%rdi, %rax
    00000066: 	cmpq	%rax, %r8
    00000069: 	movl	$0x2, %eax
    0000006e: 	setae	%cl
    00000071: 	testl	%edx, %edx
    00000073: 	cmovgq	%r11, %rax
    00000077: 	addq	%r8, %rax
    0000007a: 	cmpq	%rax, %rdi
    0000007d: 	setae	%al
    00000080: 	orb	%al, %cl
    00000082: 	je	.Ltmp559 # Offset: 130
    00000088: 	cmpl	$0x8, %edx
    0000008b: 	jle	.Ltmp559 # Offset: 139
    00000091: 	testl	%edx, %edx
    00000093: 	movl	$0x1, %r15d
    00000099: 	movq	%r8, %rcx
    0000009c: 	movq	%rdi, %rax
    0000009f: 	cmovgl	%edx, %r15d
    000000a3: 	movl	%r15d, %r9d
    000000a6: 	shrl	$0x3, %r9d
    000000aa: 	subl	$0x1, %r9d
    000000ae: 	shlq	$0x4, %r9
    000000b2: 	leaq	0x10(%r8,%r9), %r10
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp560:
    000000c0: 	movdqu	(%rcx), %xmm0
    000000c4: 	addq	$0x10, %rcx
    000000c8: 	addq	$0x20, %rax
    000000cc: 	pextrw	$0x0, %xmm0, %r9d
    000000d2: 	movw	%r9w, -0x20(%rax)
    000000d7: 	pextrw	$0x1, %xmm0, %r9d
    000000dd: 	movw	%r9w, -0x1c(%rax)
    000000e2: 	pextrw	$0x2, %xmm0, %r9d
    000000e8: 	movw	%r9w, -0x18(%rax)
    000000ed: 	pextrw	$0x3, %xmm0, %r9d
    000000f3: 	movw	%r9w, -0x14(%rax)
    000000f8: 	pextrw	$0x4, %xmm0, %r9d
    000000fe: 	movw	%r9w, -0x10(%rax)
    00000103: 	pextrw	$0x5, %xmm0, %r9d
    00000109: 	movw	%r9w, -0xc(%rax)
    0000010e: 	pextrw	$0x6, %xmm0, %r9d
    00000114: 	movw	%r9w, -0x8(%rax)
    00000119: 	pextrw	$0x7, %xmm0, %r9d
    0000011f: 	movw	%r9w, -0x4(%rax)
    00000124: 	cmpq	%r10, %rcx
    00000127: 	jne	.Ltmp560 # Offset: 295
    00000129: 	movl	%r15d, %eax
    0000012c: 	andl	$-0x8, %eax
    0000012f: 	andl	$0x7, %r15d
    00000133: 	je	.Ltmp561 # Offset: 307
    00000139: 	movl	%eax, %r10d
    0000013c: 	movzwl	(%r8,%r10,2), %r15d
    00000141: 	leaq	(%r10,%r10), %r9
    00000145: 	leaq	(,%r10,4), %rcx
    0000014d: 	movw	%r15w, (%rdi,%r10,4)
    00000152: 	leal	0x1(%rax), %r10d
    00000156: 	cmpl	%r10d, %edx
    00000159: 	jle	.Ltmp561 # Offset: 345
    0000015b: 	movzwl	0x2(%r8,%r9), %r10d
    00000161: 	movw	%r10w, 0x4(%rdi,%rcx)
    00000167: 	leal	0x2(%rax), %r10d
    0000016b: 	cmpl	%r10d, %edx
    0000016e: 	jle	.Ltmp561 # Offset: 366
    00000170: 	movzwl	0x4(%r8,%r9), %r10d
    00000176: 	movw	%r10w, 0x8(%rdi,%rcx)
    0000017c: 	leal	0x3(%rax), %r10d
    00000180: 	cmpl	%r10d, %edx
    00000183: 	jle	.Ltmp561 # Offset: 387
    00000185: 	movzwl	0x6(%r8,%r9), %r10d
    0000018b: 	movw	%r10w, 0xc(%rdi,%rcx)
    00000191: 	leal	0x4(%rax), %r10d
    00000195: 	cmpl	%r10d, %edx
    00000198: 	jle	.Ltmp561 # Offset: 408
    0000019a: 	movzwl	0x8(%r8,%r9), %r10d
    000001a0: 	movw	%r10w, 0x10(%rdi,%rcx)
    000001a6: 	leal	0x5(%rax), %r10d
    000001aa: 	cmpl	%r10d, %edx
    000001ad: 	jle	.Ltmp561 # Offset: 429
    000001af: 	movzwl	0xa(%r8,%r9), %r10d
    000001b5: 	addl	$0x6, %eax
    000001b8: 	movw	%r10w, 0x14(%rdi,%rcx)
    000001be: 	cmpl	%eax, %edx
    000001c0: 	jle	.Ltmp561 # Offset: 448
    000001c2: 	movzwl	0xc(%r8,%r9), %eax
    000001c8: 	movw	%ax, 0x18(%rdi,%rcx)
.Ltmp561:
    000001cd: 	leaq	(%rdi,%r13,4), %rcx
    000001d1: 	leaq	0x2(%rdi), %rax
    000001d5: 	cmpq	%rcx, %rsi
    000001d8: 	setae	%cl
    000001db: 	addq	%rsi, %r11
    000001de: 	cmpq	%r11, %rax
    000001e1: 	setae	%r9b
    000001e5: 	orb	%r9b, %cl
    000001e8: 	je	.Ltmp562 # Offset: 488
    000001ee: 	leal	-0x1(%rdx), %ecx
    000001f1: 	cmpl	$0x7, %ecx
    000001f4: 	jbe	.Ltmp562 # Offset: 500
    000001fa: 	movl	%edx, %r9d
    000001fd: 	movq	%rsi, %rcx
    00000200: 	shrl	$0x3, %r9d
    00000204: 	subl	$0x1, %r9d
    00000208: 	shlq	$0x4, %r9
    0000020c: 	leaq	0x10(%rsi,%r9), %r10
    00000211: 	nopl	(%rax) # Size: 7
.Ltmp563:
    00000218: 	movdqu	(%rcx), %xmm0
    0000021c: 	addq	$0x10, %rcx
    00000220: 	addq	$0x20, %rax
    00000224: 	pextrw	$0x0, %xmm0, %r9d
    0000022a: 	movw	%r9w, -0x20(%rax)
    0000022f: 	pextrw	$0x1, %xmm0, %r9d
    00000235: 	movw	%r9w, -0x1c(%rax)
    0000023a: 	pextrw	$0x2, %xmm0, %r9d
    00000240: 	movw	%r9w, -0x18(%rax)
    00000245: 	pextrw	$0x3, %xmm0, %r9d
    0000024b: 	movw	%r9w, -0x14(%rax)
    00000250: 	pextrw	$0x4, %xmm0, %r9d
    00000256: 	movw	%r9w, -0x10(%rax)
    0000025b: 	pextrw	$0x5, %xmm0, %r9d
    00000261: 	movw	%r9w, -0xc(%rax)
    00000266: 	pextrw	$0x6, %xmm0, %r9d
    0000026c: 	movw	%r9w, -0x8(%rax)
    00000271: 	pextrw	$0x7, %xmm0, %r9d
    00000277: 	movw	%r9w, -0x4(%rax)
    0000027c: 	cmpq	%r10, %rcx
    0000027f: 	jne	.Ltmp563 # Offset: 639
    00000281: 	movl	%edx, %ecx
    00000283: 	andl	$-0x8, %ecx
    00000286: 	testb	$0x7, %dl
    00000289: 	je	.Ltmp564 # Offset: 649
    0000028f: 	movl	%ecx, %r9d
    00000292: 	leaq	(%r9,%r9), %rax
    00000296: 	movzwl	(%rsi,%r9,2), %r9d
    0000029b: 	movw	%r9w, 0x2(%rdi,%rax,2)
    000002a1: 	leal	0x1(%rcx), %r9d
    000002a5: 	cmpl	%r9d, %edx
    000002a8: 	jle	.Ltmp564 # Offset: 680
    000002aa: 	movzwl	0x2(%rsi,%rax), %r9d
    000002b0: 	movw	%r9w, 0x6(%rdi,%rax,2)
    000002b6: 	leal	0x2(%rcx), %r9d
    000002ba: 	cmpl	%r9d, %edx
    000002bd: 	jle	.Ltmp564 # Offset: 701
    000002bf: 	movzwl	0x4(%rsi,%rax), %r9d
    000002c5: 	movw	%r9w, 0xa(%rdi,%rax,2)
    000002cb: 	leal	0x3(%rcx), %r9d
    000002cf: 	cmpl	%r9d, %edx
    000002d2: 	jle	.Ltmp564 # Offset: 722
    000002d4: 	movzwl	0x6(%rsi,%rax), %r9d
    000002da: 	movw	%r9w, 0xe(%rdi,%rax,2)
    000002e0: 	leal	0x4(%rcx), %r9d
    000002e4: 	cmpl	%r9d, %edx
    000002e7: 	jle	.Ltmp564 # Offset: 743
    000002e9: 	movzwl	0x8(%rsi,%rax), %r9d
    000002ef: 	movw	%r9w, 0x12(%rdi,%rax,2)
    000002f5: 	leal	0x5(%rcx), %r9d
    000002f9: 	cmpl	%r9d, %edx
    000002fc: 	jle	.Ltmp564 # Offset: 764
    000002fe: 	movzwl	0xa(%rsi,%rax), %r9d
    00000304: 	addl	$0x6, %ecx
    00000307: 	movw	%r9w, 0x16(%rdi,%rax,2)
    0000030d: 	cmpl	%ecx, %edx
    0000030f: 	jle	.Ltmp564 # Offset: 783
    00000311: 	movzwl	0xc(%rsi,%rax), %edx
    00000316: 	movw	%dx, 0x1a(%rdi,%rax,2)
.Ltmp564:
    0000031b: 	addq	%r14, %rdi
    0000031e: 	addq	%rbp, %r8
    00000321: 	addq	%rbp, %rsi
    00000324: 	subl	$0x400, %r12d
    0000032b: 	cmpl	-0xc(%rsp), %ebx
    0000032f: 	jl	.Ltmp565 # Offset: 815
.Ltmp557:
    00000335: 	popq	%rbx
    00000336: 	popq	%rbp
    00000337: 	popq	%r12
    00000339: 	popq	%r13
    0000033b: 	popq	%r14
    0000033d: 	popq	%r15
    0000033f: 	retq # Offset: 831
.Ltmp558:
    00000340: 	leal	(%r12,%r12), %r14d
    00000344: 	movslq	%r12d, %rbp
    00000347: 	movl	%r12d, %edx
    0000034a: 	movslq	%r14d, %r14
    0000034d: 	addq	%rbp, %rbp
    00000350: 	addq	%r14, %r14
    00000353: 	testl	%r12d, %r12d
    00000356: 	jg	.Ltmp566 # Offset: 854
    0000035c: 	jmp	.Ltmp564 # Offset: 860
    0000035e: 	nop # Size: 2
.Ltmp562:
    00000360: 	movl	%edx, %edx
    00000362: 	xorl	%eax, %eax
    00000364: 	nopl	(%rax) # Size: 4
.Ltmp567:
    00000368: 	movzwl	(%rsi,%rax,2), %ecx
    0000036c: 	movw	%cx, 0x2(%rdi,%rax,4)
    00000371: 	addq	$0x1, %rax
    00000375: 	cmpq	%rdx, %rax
    00000378: 	jne	.Ltmp567 # Offset: 888
    0000037a: 	jmp	.Ltmp564 # Offset: 890
    0000037c: 	nopl	(%rax) # Size: 4
.Ltmp559:
    00000380: 	xorl	%eax, %eax
    00000382: 	nopw	(%rax,%rax) # Size: 6
.Ltmp568:
    00000388: 	movzwl	(%r8,%rax,2), %ecx
    0000038d: 	movw	%cx, (%rdi,%rax,4)
    00000391: 	addq	$0x1, %rax
    00000395: 	cmpl	%eax, %edx
    00000397: 	jg	.Ltmp568 # Offset: 919
    00000399: 	jmp	.Ltmp561 # Offset: 921
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version5ItEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version6ItEvPT_PKS0_S3_i" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0xfa50
  Size        : 0x39e
  MaxSize     : 0x3a0
  Offset      : 0xfa50
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version6ItEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%ecx, -0xc(%rsp)
    00000012: 	testl	%ecx, %ecx
    00000014: 	jle	.Ltmp569 # Offset: 20
    0000001a: 	movq	%rsi, %r8
    0000001d: 	movl	%ecx, %r12d
    00000020: 	movq	%rdx, %rsi
    00000023: 	xorl	%ebx, %ebx
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp577:
    00000028: 	addl	$0x400, %ebx
    0000002e: 	cmpl	-0xc(%rsp), %ebx
    00000032: 	jg	.Ltmp570 # Offset: 50
    00000038: 	movl	$0x800, %ebp
    0000003d: 	movl	$0x1000, %r14d
    00000043: 	movl	$0x400, %edx
.Ltmp578:
    00000048: 	movslq	%edx, %r13
    0000004b: 	testl	%edx, %edx
    0000004d: 	movl	$0x2, %ecx
    00000052: 	leaq	-0x2(,%r13,4), %rax
    0000005a: 	leaq	(%r13,%r13), %r11
    0000005f: 	cmovleq	%rcx, %rax
    00000063: 	addq	%rdi, %rax
    00000066: 	cmpq	%rax, %r8
    00000069: 	movl	$0x2, %eax
    0000006e: 	setae	%cl
    00000071: 	testl	%edx, %edx
    00000073: 	cmovgq	%r11, %rax
    00000077: 	addq	%r8, %rax
    0000007a: 	cmpq	%rax, %rdi
    0000007d: 	setae	%al
    00000080: 	orb	%al, %cl
    00000082: 	je	.Ltmp571 # Offset: 130
    00000088: 	cmpl	$0x8, %edx
    0000008b: 	jle	.Ltmp571 # Offset: 139
    00000091: 	testl	%edx, %edx
    00000093: 	movl	$0x1, %r15d
    00000099: 	movq	%r8, %rcx
    0000009c: 	movq	%rdi, %rax
    0000009f: 	cmovgl	%edx, %r15d
    000000a3: 	movl	%r15d, %r9d
    000000a6: 	shrl	$0x3, %r9d
    000000aa: 	subl	$0x1, %r9d
    000000ae: 	shlq	$0x4, %r9
    000000b2: 	leaq	0x10(%r8,%r9), %r10
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp572:
    000000c0: 	movdqu	(%rcx), %xmm0
    000000c4: 	addq	$0x10, %rcx
    000000c8: 	addq	$0x20, %rax
    000000cc: 	pextrw	$0x0, %xmm0, %r9d
    000000d2: 	movw	%r9w, -0x20(%rax)
    000000d7: 	pextrw	$0x1, %xmm0, %r9d
    000000dd: 	movw	%r9w, -0x1c(%rax)
    000000e2: 	pextrw	$0x2, %xmm0, %r9d
    000000e8: 	movw	%r9w, -0x18(%rax)
    000000ed: 	pextrw	$0x3, %xmm0, %r9d
    000000f3: 	movw	%r9w, -0x14(%rax)
    000000f8: 	pextrw	$0x4, %xmm0, %r9d
    000000fe: 	movw	%r9w, -0x10(%rax)
    00000103: 	pextrw	$0x5, %xmm0, %r9d
    00000109: 	movw	%r9w, -0xc(%rax)
    0000010e: 	pextrw	$0x6, %xmm0, %r9d
    00000114: 	movw	%r9w, -0x8(%rax)
    00000119: 	pextrw	$0x7, %xmm0, %r9d
    0000011f: 	movw	%r9w, -0x4(%rax)
    00000124: 	cmpq	%r10, %rcx
    00000127: 	jne	.Ltmp572 # Offset: 295
    00000129: 	movl	%r15d, %eax
    0000012c: 	andl	$-0x8, %eax
    0000012f: 	movl	%eax, %r9d
    00000132: 	leaq	(%rdi,%r9,4), %rcx
    00000136: 	cmpl	%eax, %r15d
    00000139: 	je	.Ltmp573 # Offset: 313
    0000013f: 	leaq	(%r9,%r9), %r10
    00000143: 	movzwl	(%r8,%r9,2), %r9d
    00000148: 	movw	%r9w, (%rcx)
    0000014c: 	leal	0x1(%rax), %r9d
    00000150: 	cmpl	%r9d, %edx
    00000153: 	jle	.Ltmp573 # Offset: 339
    00000155: 	movzwl	0x2(%r8,%r10), %r9d
    0000015b: 	movw	%r9w, 0x4(%rcx)
    00000160: 	leal	0x2(%rax), %r9d
    00000164: 	cmpl	%r9d, %edx
    00000167: 	jle	.Ltmp573 # Offset: 359
    00000169: 	movzwl	0x4(%r8,%r10), %r9d
    0000016f: 	movw	%r9w, 0x8(%rcx)
    00000174: 	leal	0x3(%rax), %r9d
    00000178: 	cmpl	%r9d, %edx
    0000017b: 	jle	.Ltmp573 # Offset: 379
    0000017d: 	movzwl	0x6(%r8,%r10), %r9d
    00000183: 	movw	%r9w, 0xc(%rcx)
    00000188: 	leal	0x4(%rax), %r9d
    0000018c: 	cmpl	%r9d, %edx
    0000018f: 	jle	.Ltmp573 # Offset: 399
    00000191: 	movzwl	0x8(%r8,%r10), %r9d
    00000197: 	movw	%r9w, 0x10(%rcx)
    0000019c: 	leal	0x5(%rax), %r9d
    000001a0: 	cmpl	%r9d, %edx
    000001a3: 	jle	.Ltmp573 # Offset: 419
    000001a5: 	movzwl	0xa(%r8,%r10), %r9d
    000001ab: 	addl	$0x6, %eax
    000001ae: 	movw	%r9w, 0x14(%rcx)
    000001b3: 	cmpl	%eax, %edx
    000001b5: 	jle	.Ltmp573 # Offset: 437
    000001b7: 	movzwl	0xc(%r8,%r10), %eax
    000001bd: 	movw	%ax, 0x18(%rcx)
.Ltmp573:
    000001c1: 	leaq	(%rdi,%r13,4), %rax
    000001c5: 	leaq	0x2(%rdi), %r10
    000001c9: 	cmpq	%rax, %rsi
    000001cc: 	setae	%al
    000001cf: 	addq	%rsi, %r11
    000001d2: 	cmpq	%r11, %r10
    000001d5: 	setae	%cl
    000001d8: 	orb	%cl, %al
    000001da: 	je	.Ltmp574 # Offset: 474
    000001e0: 	leal	-0x1(%rdx), %eax
    000001e3: 	cmpl	$0x7, %eax
    000001e6: 	jbe	.Ltmp574 # Offset: 486
    000001ec: 	movl	%edx, %r9d
    000001ef: 	movq	%rsi, %rcx
    000001f2: 	movq	%r10, %rax
    000001f5: 	shrl	$0x3, %r9d
    000001f9: 	subl	$0x1, %r9d
    000001fd: 	shlq	$0x4, %r9
    00000201: 	leaq	0x10(%rsi,%r9), %r11
    00000206: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp575:
    00000210: 	movdqu	(%rcx), %xmm0
    00000214: 	addq	$0x10, %rcx
    00000218: 	addq	$0x20, %rax
    0000021c: 	pextrw	$0x0, %xmm0, %r9d
    00000222: 	movw	%r9w, -0x20(%rax)
    00000227: 	pextrw	$0x1, %xmm0, %r9d
    0000022d: 	movw	%r9w, -0x1c(%rax)
    00000232: 	pextrw	$0x2, %xmm0, %r9d
    00000238: 	movw	%r9w, -0x18(%rax)
    0000023d: 	pextrw	$0x3, %xmm0, %r9d
    00000243: 	movw	%r9w, -0x14(%rax)
    00000248: 	pextrw	$0x4, %xmm0, %r9d
    0000024e: 	movw	%r9w, -0x10(%rax)
    00000253: 	pextrw	$0x5, %xmm0, %r9d
    00000259: 	movw	%r9w, -0xc(%rax)
    0000025e: 	pextrw	$0x6, %xmm0, %r9d
    00000264: 	movw	%r9w, -0x8(%rax)
    00000269: 	pextrw	$0x7, %xmm0, %r9d
    0000026f: 	movw	%r9w, -0x4(%rax)
    00000274: 	cmpq	%rcx, %r11
    00000277: 	jne	.Ltmp575 # Offset: 631
    00000279: 	movl	%edx, %eax
    0000027b: 	andl	$-0x8, %eax
    0000027e: 	movl	%eax, %r11d
    00000281: 	leaq	(%r10,%r11,4), %rcx
    00000285: 	cmpl	%edx, %eax
    00000287: 	je	.Ltmp576 # Offset: 647
    0000028d: 	movzwl	(%rsi,%r11,2), %r10d
    00000292: 	leaq	(%r11,%r11), %r9
    00000296: 	movw	%r10w, (%rcx)
    0000029a: 	leal	0x1(%rax), %r10d
    0000029e: 	cmpl	%r10d, %edx
    000002a1: 	jle	.Ltmp576 # Offset: 673
    000002a3: 	movzwl	0x2(%rsi,%r9), %r10d
    000002a9: 	movw	%r10w, 0x4(%rcx)
    000002ae: 	leal	0x2(%rax), %r10d
    000002b2: 	cmpl	%r10d, %edx
    000002b5: 	jle	.Ltmp576 # Offset: 693
    000002b7: 	movzwl	0x4(%rsi,%r9), %r10d
    000002bd: 	movw	%r10w, 0x8(%rcx)
    000002c2: 	leal	0x3(%rax), %r10d
    000002c6: 	cmpl	%r10d, %edx
    000002c9: 	jle	.Ltmp576 # Offset: 713
    000002cb: 	movzwl	0x6(%rsi,%r9), %r10d
    000002d1: 	movw	%r10w, 0xc(%rcx)
    000002d6: 	leal	0x4(%rax), %r10d
    000002da: 	cmpl	%r10d, %edx
    000002dd: 	jle	.Ltmp576 # Offset: 733
    000002df: 	movzwl	0x8(%rsi,%r9), %r10d
    000002e5: 	movw	%r10w, 0x10(%rcx)
    000002ea: 	leal	0x5(%rax), %r10d
    000002ee: 	cmpl	%r10d, %edx
    000002f1: 	jle	.Ltmp576 # Offset: 753
    000002f3: 	movzwl	0xa(%rsi,%r9), %r10d
    000002f9: 	addl	$0x6, %eax
    000002fc: 	movw	%r10w, 0x14(%rcx)
    00000301: 	cmpl	%eax, %edx
    00000303: 	jle	.Ltmp576 # Offset: 771
    00000305: 	movzwl	0xc(%rsi,%r9), %eax
    0000030b: 	movw	%ax, 0x18(%rcx)
.Ltmp576:
    0000030f: 	addq	%r14, %rdi
    00000312: 	addq	%rbp, %r8
    00000315: 	addq	%rbp, %rsi
    00000318: 	subl	$0x400, %r12d
    0000031f: 	cmpl	-0xc(%rsp), %ebx
    00000323: 	jl	.Ltmp577 # Offset: 803
.Ltmp569:
    00000329: 	popq	%rbx
    0000032a: 	popq	%rbp
    0000032b: 	popq	%r12
    0000032d: 	popq	%r13
    0000032f: 	popq	%r14
    00000331: 	popq	%r15
    00000333: 	retq # Offset: 819
    00000334: 	nopl	(%rax) # Size: 4
.Ltmp570:
    00000338: 	leal	(%r12,%r12), %r14d
    0000033c: 	movslq	%r12d, %rbp
    0000033f: 	movl	%r12d, %edx
    00000342: 	movslq	%r14d, %r14
    00000345: 	addq	%rbp, %rbp
    00000348: 	addq	%r14, %r14
    0000034b: 	testl	%r12d, %r12d
    0000034e: 	jg	.Ltmp578 # Offset: 846
    00000354: 	jmp	.Ltmp576 # Offset: 852
    00000356: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp574:
    00000360: 	movl	%edx, %edx
    00000362: 	xorl	%eax, %eax
    00000364: 	nopl	(%rax) # Size: 4
.Ltmp579:
    00000368: 	movzwl	(%rsi,%rax,2), %ecx
    0000036c: 	movw	%cx, 0x2(%rdi,%rax,4)
    00000371: 	addq	$0x1, %rax
    00000375: 	cmpq	%rdx, %rax
    00000378: 	jne	.Ltmp579 # Offset: 888
    0000037a: 	jmp	.Ltmp576 # Offset: 890
    0000037c: 	nopl	(%rax) # Size: 4
.Ltmp571:
    00000380: 	xorl	%eax, %eax
    00000382: 	nopw	(%rax,%rax) # Size: 6
.Ltmp580:
    00000388: 	movzwl	(%r8,%rax,2), %ecx
    0000038d: 	movw	%cx, (%rdi,%rax,4)
    00000391: 	addq	$0x1, %rax
    00000395: 	cmpl	%eax, %edx
    00000397: 	jg	.Ltmp580 # Offset: 919
    00000399: 	jmp	.Ltmp573 # Offset: 921
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version6ItEvPT_PKS0_S3_i"

Binary Function "_Z23interleave3to3_version1ItEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 84
  State       : disassembled
  Address     : 0xfdf0
  Size        : 0x3f
  MaxSize     : 0x40
  Offset      : 0xfdf0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version1ItEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r9
    00000007: 	testl	%r8d, %r8d
    0000000a: 	jle	.Ltmp581 # Offset: 10
    0000000c: 	movslq	%r8d, %r8
    0000000f: 	xorl	%eax, %eax
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp582:
    00000018: 	movzwl	(%r9,%rax,2), %esi
    0000001d: 	addq	$0x6, %rdi
    00000021: 	movw	%si, -0x6(%rdi)
    00000025: 	movzwl	(%rdx,%rax,2), %esi
    00000029: 	movw	%si, -0x4(%rdi)
    0000002d: 	movzwl	(%rcx,%rax,2), %esi
    00000031: 	addq	$0x1, %rax
    00000035: 	movw	%si, -0x2(%rdi)
    00000039: 	cmpq	%rax, %r8
    0000003c: 	jne	.Ltmp582 # Offset: 60
.Ltmp581:
    0000003e: 	retq # Offset: 62
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version1ItEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version2ItEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0xfe30
  Size        : 0x419
  MaxSize     : 0x420
  Offset      : 0xfe30
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version2ItEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	movslq	%r8d, %r8
    00000007: 	testq	%r8, %r8
    0000000a: 	je	.Ltmp583 # Offset: 10
    00000010: 	pushq	%r12
    00000012: 	leaq	-0x1(%r8), %rax
    00000016: 	movq	%rdi, %r9
    00000019: 	movq	%rsi, %rdi
    0000001c: 	pushq	%rbp
    0000001d: 	cmpq	$0x7, %rax
    00000021: 	movq	%rdx, %rsi
    00000024: 	pushq	%rbx
    00000025: 	leaq	(%r8,%r8), %rbx
    00000029: 	seta	%r10b
    0000002d: 	leaq	(%rbx,%r8), %r11
    00000031: 	leaq	(%rdi,%rbx), %rdx
    00000035: 	addq	%r11, %r11
    00000038: 	leaq	-0x4(%r9,%r11), %rax
    0000003d: 	cmpq	%rax, %rdi
    00000040: 	setae	%al
    00000043: 	cmpq	%rdx, %r9
    00000046: 	setae	%dl
    00000049: 	orb	%dl, %al
    0000004b: 	je	.Ltmp584 # Offset: 75
    00000051: 	testb	%r10b, %r10b
    00000054: 	je	.Ltmp584 # Offset: 84
    0000005a: 	movq	%r8, %r12
    0000005d: 	movq	%r9, %rax
    00000060: 	xorl	%edx, %edx
    00000062: 	shrq	$0x3, %r12
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp585:
    00000070: 	movq	%rdx, %rbp
    00000073: 	addq	$0x1, %rdx
    00000077: 	addq	$0x30, %rax
    0000007b: 	shlq	$0x4, %rbp
    0000007f: 	movdqu	(%rdi,%rbp), %xmm0
    00000084: 	pextrw	$0x0, %xmm0, %ebp
    00000089: 	movw	%bp, -0x30(%rax)
    0000008d: 	pextrw	$0x1, %xmm0, %ebp
    00000092: 	movw	%bp, -0x2a(%rax)
    00000096: 	pextrw	$0x2, %xmm0, %ebp
    0000009b: 	movw	%bp, -0x24(%rax)
    0000009f: 	pextrw	$0x3, %xmm0, %ebp
    000000a4: 	movw	%bp, -0x1e(%rax)
    000000a8: 	pextrw	$0x4, %xmm0, %ebp
    000000ad: 	movw	%bp, -0x18(%rax)
    000000b1: 	pextrw	$0x5, %xmm0, %ebp
    000000b6: 	movw	%bp, -0x12(%rax)
    000000ba: 	pextrw	$0x6, %xmm0, %ebp
    000000bf: 	movw	%bp, -0xc(%rax)
    000000c3: 	pextrw	$0x7, %xmm0, %ebp
    000000c8: 	movw	%bp, -0x6(%rax)
    000000cc: 	cmpq	%r12, %rdx
    000000cf: 	jne	.Ltmp585 # Offset: 207
    000000d1: 	movq	%r8, %rax
    000000d4: 	andq	$-0x8, %rax
    000000d8: 	leaq	(%rax,%rax), %rdx
    000000dc: 	addq	%rdx, %rdi
    000000df: 	addq	%rax, %rdx
    000000e2: 	leaq	(%r9,%rdx,2), %rdx
    000000e6: 	cmpq	%rax, %r8
    000000e9: 	je	.Ltmp586 # Offset: 233
    000000eb: 	movzwl	(%rdi), %ebp
    000000ee: 	movw	%bp, (%rdx)
    000000f1: 	leaq	0x1(%rax), %rbp
    000000f5: 	cmpq	%rbp, %r8
    000000f8: 	jbe	.Ltmp586 # Offset: 248
    000000fa: 	movzwl	0x2(%rdi), %ebp
    000000fe: 	movw	%bp, 0x6(%rdx)
    00000102: 	leaq	0x2(%rax), %rbp
    00000106: 	cmpq	%rbp, %r8
    00000109: 	jbe	.Ltmp586 # Offset: 265
    0000010b: 	movzwl	0x4(%rdi), %ebp
    0000010f: 	movw	%bp, 0xc(%rdx)
    00000113: 	leaq	0x3(%rax), %rbp
    00000117: 	cmpq	%rbp, %r8
    0000011a: 	jbe	.Ltmp586 # Offset: 282
    0000011c: 	movzwl	0x6(%rdi), %ebp
    00000120: 	movw	%bp, 0x12(%rdx)
    00000124: 	leaq	0x4(%rax), %rbp
    00000128: 	cmpq	%rbp, %r8
    0000012b: 	jbe	.Ltmp586 # Offset: 299
    0000012d: 	movzwl	0x8(%rdi), %ebp
    00000131: 	movw	%bp, 0x18(%rdx)
    00000135: 	leaq	0x5(%rax), %rbp
    00000139: 	cmpq	%rbp, %r8
    0000013c: 	jbe	.Ltmp586 # Offset: 316
    0000013e: 	movzwl	0xa(%rdi), %ebp
    00000142: 	addq	$0x6, %rax
    00000146: 	movw	%bp, 0x1e(%rdx)
    0000014a: 	cmpq	%rax, %r8
    0000014d: 	jbe	.Ltmp586 # Offset: 333
    0000014f: 	movzwl	0xc(%rdi), %eax
    00000153: 	movw	%ax, 0x24(%rdx)
.Ltmp586:
    00000157: 	leaq	-0x2(%r9,%r11), %rax
    0000015c: 	leaq	(%rsi,%rbx), %rdx
    00000160: 	cmpq	%rax, %rsi
    00000163: 	leaq	0x2(%r9), %rbp
    00000167: 	setae	%al
    0000016a: 	cmpq	%rdx, %rbp
    0000016d: 	setae	%dl
    00000170: 	orb	%dl, %al
    00000172: 	je	.Ltmp587 # Offset: 370
    00000178: 	movq	%r8, %r12
    0000017b: 	movq	%rbp, %rax
    0000017e: 	xorl	%edx, %edx
    00000180: 	shrq	$0x3, %r12
    00000184: 	testb	%r10b, %r10b
    00000187: 	je	.Ltmp587 # Offset: 391
    0000018d: 	nopl	(%rax) # Size: 3
.Ltmp588:
    00000190: 	movq	%rdx, %rdi
    00000193: 	addq	$0x1, %rdx
    00000197: 	addq	$0x30, %rax
    0000019b: 	shlq	$0x4, %rdi
    0000019f: 	movdqu	(%rsi,%rdi), %xmm0
    000001a4: 	pextrw	$0x0, %xmm0, %edi
    000001a9: 	movw	%di, -0x30(%rax)
    000001ad: 	pextrw	$0x1, %xmm0, %edi
    000001b2: 	movw	%di, -0x2a(%rax)
    000001b6: 	pextrw	$0x2, %xmm0, %edi
    000001bb: 	movw	%di, -0x24(%rax)
    000001bf: 	pextrw	$0x3, %xmm0, %edi
    000001c4: 	movw	%di, -0x1e(%rax)
    000001c8: 	pextrw	$0x4, %xmm0, %edi
    000001cd: 	movw	%di, -0x18(%rax)
    000001d1: 	pextrw	$0x5, %xmm0, %edi
    000001d6: 	movw	%di, -0x12(%rax)
    000001da: 	pextrw	$0x6, %xmm0, %edi
    000001df: 	movw	%di, -0xc(%rax)
    000001e3: 	pextrw	$0x7, %xmm0, %edi
    000001e8: 	movw	%di, -0x6(%rax)
    000001ec: 	cmpq	%rdx, %r12
    000001ef: 	jne	.Ltmp588 # Offset: 495
    000001f1: 	movq	%r8, %rax
    000001f4: 	andq	$-0x8, %rax
    000001f8: 	leaq	(%rax,%rax), %rdx
    000001fc: 	addq	%rdx, %rsi
    000001ff: 	addq	%rax, %rdx
    00000202: 	leaq	(%rbp,%rdx,2), %rdx
    00000207: 	cmpq	%rax, %r8
    0000020a: 	je	.Ltmp589 # Offset: 522
    0000020c: 	movzwl	(%rsi), %edi
    0000020f: 	movw	%di, (%rdx)
    00000212: 	leaq	0x1(%rax), %rdi
    00000216: 	cmpq	%rdi, %r8
    00000219: 	jbe	.Ltmp589 # Offset: 537
    0000021b: 	movzwl	0x2(%rsi), %edi
    0000021f: 	movw	%di, 0x6(%rdx)
    00000223: 	leaq	0x2(%rax), %rdi
    00000227: 	cmpq	%rdi, %r8
    0000022a: 	jbe	.Ltmp589 # Offset: 554
    0000022c: 	movzwl	0x4(%rsi), %edi
    00000230: 	movw	%di, 0xc(%rdx)
    00000234: 	leaq	0x3(%rax), %rdi
    00000238: 	cmpq	%rdi, %r8
    0000023b: 	jbe	.Ltmp589 # Offset: 571
    0000023d: 	movzwl	0x6(%rsi), %edi
    00000241: 	movw	%di, 0x12(%rdx)
    00000245: 	leaq	0x4(%rax), %rdi
    00000249: 	cmpq	%rdi, %r8
    0000024c: 	jbe	.Ltmp589 # Offset: 588
    0000024e: 	movzwl	0x8(%rsi), %edi
    00000252: 	movw	%di, 0x18(%rdx)
    00000256: 	leaq	0x5(%rax), %rdi
    0000025a: 	cmpq	%rdi, %r8
    0000025d: 	jbe	.Ltmp589 # Offset: 605
    0000025f: 	movzwl	0xa(%rsi), %edi
    00000263: 	addq	$0x6, %rax
    00000267: 	movw	%di, 0x1e(%rdx)
    0000026b: 	cmpq	%rax, %r8
    0000026e: 	jbe	.Ltmp589 # Offset: 622
    00000270: 	movzwl	0xc(%rsi), %eax
    00000274: 	movw	%ax, 0x24(%rdx)
.Ltmp589:
    00000278: 	addq	%r9, %r11
    0000027b: 	leaq	0x4(%r9), %rdi
    0000027f: 	cmpq	%r11, %rcx
    00000282: 	setae	%al
    00000285: 	addq	%rcx, %rbx
    00000288: 	cmpq	%rbx, %rdi
    0000028b: 	setae	%dl
    0000028e: 	orb	%dl, %al
    00000290: 	je	.Ltmp590 # Offset: 656
    00000296: 	movq	%r8, %r9
    00000299: 	movq	%rdi, %rax
    0000029c: 	xorl	%edx, %edx
    0000029e: 	shrq	$0x3, %r9
    000002a2: 	testb	%r10b, %r10b
    000002a5: 	je	.Ltmp590 # Offset: 677
    000002ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp591:
    000002b0: 	movq	%rdx, %rsi
    000002b3: 	addq	$0x1, %rdx
    000002b7: 	addq	$0x30, %rax
    000002bb: 	shlq	$0x4, %rsi
    000002bf: 	movdqu	(%rcx,%rsi), %xmm0
    000002c4: 	pextrw	$0x0, %xmm0, %esi
    000002c9: 	movw	%si, -0x30(%rax)
    000002cd: 	pextrw	$0x1, %xmm0, %esi
    000002d2: 	movw	%si, -0x2a(%rax)
    000002d6: 	pextrw	$0x2, %xmm0, %esi
    000002db: 	movw	%si, -0x24(%rax)
    000002df: 	pextrw	$0x3, %xmm0, %esi
    000002e4: 	movw	%si, -0x1e(%rax)
    000002e8: 	pextrw	$0x4, %xmm0, %esi
    000002ed: 	movw	%si, -0x18(%rax)
    000002f1: 	pextrw	$0x5, %xmm0, %esi
    000002f6: 	movw	%si, -0x12(%rax)
    000002fa: 	pextrw	$0x6, %xmm0, %esi
    000002ff: 	movw	%si, -0xc(%rax)
    00000303: 	pextrw	$0x7, %xmm0, %esi
    00000308: 	movw	%si, -0x6(%rax)
    0000030c: 	cmpq	%rdx, %r9
    0000030f: 	jne	.Ltmp591 # Offset: 783
    00000311: 	movq	%r8, %rax
    00000314: 	andq	$-0x8, %rax
    00000318: 	leaq	(%rax,%rax), %rdx
    0000031c: 	addq	%rdx, %rcx
    0000031f: 	addq	%rax, %rdx
    00000322: 	leaq	(%rdi,%rdx,2), %rdx
    00000326: 	cmpq	%rax, %r8
    00000329: 	je	.Ltmp592 # Offset: 809
    0000032b: 	movzwl	(%rcx), %esi
    0000032e: 	movw	%si, (%rdx)
    00000331: 	leaq	0x1(%rax), %rsi
    00000335: 	cmpq	%rsi, %r8
    00000338: 	jbe	.Ltmp592 # Offset: 824
    0000033a: 	movzwl	0x2(%rcx), %esi
    0000033e: 	movw	%si, 0x6(%rdx)
    00000342: 	leaq	0x2(%rax), %rsi
    00000346: 	cmpq	%rsi, %r8
    00000349: 	jbe	.Ltmp592 # Offset: 841
    0000034b: 	movzwl	0x4(%rcx), %esi
    0000034f: 	movw	%si, 0xc(%rdx)
    00000353: 	leaq	0x3(%rax), %rsi
    00000357: 	cmpq	%rsi, %r8
    0000035a: 	jbe	.Ltmp592 # Offset: 858
    0000035c: 	movzwl	0x6(%rcx), %esi
    00000360: 	movw	%si, 0x12(%rdx)
    00000364: 	leaq	0x4(%rax), %rsi
    00000368: 	cmpq	%rsi, %r8
    0000036b: 	jbe	.Ltmp592 # Offset: 875
    0000036d: 	movzwl	0x8(%rcx), %esi
    00000371: 	movw	%si, 0x18(%rdx)
    00000375: 	leaq	0x5(%rax), %rsi
    00000379: 	cmpq	%rsi, %r8
    0000037c: 	jbe	.Ltmp592 # Offset: 892
    0000037e: 	movzwl	0xa(%rcx), %esi
    00000382: 	addq	$0x6, %rax
    00000386: 	movw	%si, 0x1e(%rdx)
    0000038a: 	cmpq	%rax, %r8
    0000038d: 	jbe	.Ltmp592 # Offset: 909
    0000038f: 	movzwl	0xc(%rcx), %eax
    00000393: 	movw	%ax, 0x24(%rdx)
.Ltmp592:
    00000397: 	popq	%rbx
    00000398: 	popq	%rbp
    00000399: 	popq	%r12
    0000039b: 	retq # Offset: 923
    0000039c: 	nopl	(%rax) # Size: 4
.Ltmp590:
    000003a0: 	xorl	%eax, %eax
    000003a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp593:
    000003a8: 	movzwl	(%rcx,%rax,2), %edx
    000003ac: 	addq	$0x1, %rax
    000003b0: 	addq	$0x6, %rdi
    000003b4: 	movw	%dx, -0x6(%rdi)
    000003b8: 	cmpq	%rax, %r8
    000003bb: 	jne	.Ltmp593 # Offset: 955
    000003bd: 	popq	%rbx
    000003be: 	popq	%rbp
    000003bf: 	popq	%r12
    000003c1: 	retq # Offset: 961
    000003c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp584:
    000003c8: 	movq	%r9, %rdx
    000003cb: 	xorl	%eax, %eax
    000003cd: 	nopl	(%rax) # Size: 3
.Ltmp594:
    000003d0: 	movzwl	(%rdi,%rax,2), %ebp
    000003d4: 	addq	$0x1, %rax
    000003d8: 	addq	$0x6, %rdx
    000003dc: 	movw	%bp, -0x6(%rdx)
    000003e0: 	cmpq	%rax, %r8
    000003e3: 	jne	.Ltmp594 # Offset: 995
    000003e5: 	jmp	.Ltmp586 # Offset: 997
    000003ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp587:
    000003f0: 	xorl	%eax, %eax
    000003f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp595:
    000003f8: 	movzwl	(%rsi,%rax,2), %edx
    000003fc: 	addq	$0x1, %rax
    00000400: 	addq	$0x6, %rbp
    00000404: 	movw	%dx, -0x6(%rbp)
    00000408: 	cmpq	%rax, %r8
    0000040b: 	jne	.Ltmp595 # Offset: 1035
    0000040d: 	jmp	.Ltmp589 # Offset: 1037
    00000412: 	nopw	(%rax,%rax) # Size: 6
.Ltmp583:
    00000418: 	retq # Offset: 1048
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version2ItEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version3ItEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 86
  State       : disassembled
  Address     : 0x10250
  Size        : 0x415
  MaxSize     : 0x420
  Offset      : 0x10250
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version3ItEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	testl	%r8d, %r8d
    00000007: 	jle	.Ltmp596 # Offset: 7
    0000000d: 	movslq	%r8d, %r10
    00000010: 	pushq	%r15
    00000012: 	movq	%rdx, %r9
    00000015: 	leal	-0x1(%r8), %r11d
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	pushq	%rbp
    00000020: 	pushq	%rbx
    00000021: 	leaq	(%r10,%r10), %rbx
    00000025: 	addq	%rbx, %r10
    00000028: 	leaq	(%rsi,%rbx), %rax
    0000002c: 	addq	%r10, %r10
    0000002f: 	cmpq	%rax, %rdi
    00000032: 	leaq	-0x2(%rdi,%r10), %rbp
    00000037: 	setae	%dl
    0000003a: 	cmpq	%rbp, %rsi
    0000003d: 	setae	%al
    00000040: 	orl	%eax, %edx
    00000042: 	leaq	(%r9,%rbx), %rax
    00000046: 	cmpq	%rax, %rdi
    00000049: 	setae	%al
    0000004c: 	cmpq	%rbp, %r9
    0000004f: 	setae	%bpl
    00000053: 	orl	%ebp, %eax
    00000055: 	testb	%al, %dl
    00000057: 	je	.Ltmp597 # Offset: 87
    0000005d: 	cmpl	$0x2, %r11d
    00000061: 	jbe	.Ltmp597 # Offset: 97
    00000067: 	cmpl	$0x6, %r11d
    0000006b: 	jbe	.Ltmp598 # Offset: 107
    00000071: 	movl	%r8d, %r12d
    00000074: 	movq	%rdi, %rax
    00000077: 	xorl	%edx, %edx
    00000079: 	shrl	$0x3, %r12d
    0000007d: 	shlq	$0x4, %r12
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp599:
    00000088: 	movdqu	(%rsi,%rdx), %xmm1
    0000008d: 	movdqu	(%r9,%rdx), %xmm0
    00000093: 	addq	$0x10, %rdx
    00000097: 	addq	$0x30, %rax
    0000009b: 	pextrw	$0x0, %xmm1, %ebp
    000000a0: 	movw	%bp, -0x30(%rax)
    000000a4: 	pextrw	$0x1, %xmm1, %ebp
    000000a9: 	movw	%bp, -0x2a(%rax)
    000000ad: 	pextrw	$0x2, %xmm1, %ebp
    000000b2: 	movw	%bp, -0x24(%rax)
    000000b6: 	pextrw	$0x3, %xmm1, %ebp
    000000bb: 	movw	%bp, -0x1e(%rax)
    000000bf: 	pextrw	$0x4, %xmm1, %ebp
    000000c4: 	movw	%bp, -0x18(%rax)
    000000c8: 	pextrw	$0x5, %xmm1, %ebp
    000000cd: 	movw	%bp, -0x12(%rax)
    000000d1: 	pextrw	$0x6, %xmm1, %ebp
    000000d6: 	movw	%bp, -0xc(%rax)
    000000da: 	pextrw	$0x7, %xmm1, %ebp
    000000df: 	movw	%bp, -0x6(%rax)
    000000e3: 	pextrw	$0x0, %xmm0, %ebp
    000000e8: 	movw	%bp, -0x2e(%rax)
    000000ec: 	pextrw	$0x1, %xmm0, %ebp
    000000f1: 	movw	%bp, -0x28(%rax)
    000000f5: 	pextrw	$0x2, %xmm0, %ebp
    000000fa: 	movw	%bp, -0x22(%rax)
    000000fe: 	pextrw	$0x3, %xmm0, %ebp
    00000103: 	movw	%bp, -0x1c(%rax)
    00000107: 	pextrw	$0x4, %xmm0, %ebp
    0000010c: 	movw	%bp, -0x16(%rax)
    00000110: 	pextrw	$0x5, %xmm0, %ebp
    00000115: 	movw	%bp, -0x10(%rax)
    00000119: 	pextrw	$0x6, %xmm0, %ebp
    0000011e: 	movw	%bp, -0xa(%rax)
    00000122: 	pextrw	$0x7, %xmm0, %ebp
    00000127: 	movw	%bp, -0x4(%rax)
    0000012b: 	cmpq	%rdx, %r12
    0000012e: 	jne	.Ltmp599 # Offset: 302
    00000134: 	movl	%r8d, %edx
    00000137: 	andl	$-0x8, %edx
    0000013a: 	movl	%edx, %ebp
    0000013c: 	cmpl	%edx, %r8d
    0000013f: 	je	.Ltmp600 # Offset: 319
    00000145: 	movl	%r8d, %r12d
    00000148: 	subl	%edx, %r12d
    0000014b: 	leal	-0x1(%r12), %eax
    00000150: 	cmpl	$0x2, %eax
    00000153: 	jbe	.Ltmp601 # Offset: 339
.Ltmp607:
    00000155: 	movq	(%rsi,%rdx,2), %xmm1
    0000015a: 	leaq	(%rdx,%rdx,2), %rax
    0000015e: 	movq	(%r9,%rdx,2), %xmm0
    00000164: 	leaq	(%rdi,%rax,2), %rax
    00000168: 	pextrw	$0x0, %xmm1, %edx
    0000016d: 	movw	%dx, (%rax)
    00000170: 	pextrw	$0x1, %xmm1, %edx
    00000175: 	movw	%dx, 0x6(%rax)
    00000179: 	pextrw	$0x2, %xmm1, %edx
    0000017e: 	movw	%dx, 0xc(%rax)
    00000182: 	pextrw	$0x3, %xmm1, %edx
    00000187: 	movw	%dx, 0x12(%rax)
    0000018b: 	pextrw	$0x0, %xmm0, %edx
    00000190: 	movw	%dx, 0x2(%rax)
    00000194: 	pextrw	$0x1, %xmm0, %edx
    00000199: 	movw	%dx, 0x8(%rax)
    0000019d: 	pextrw	$0x2, %xmm0, %edx
    000001a2: 	movw	%dx, 0xe(%rax)
    000001a6: 	pextrw	$0x3, %xmm0, %edx
    000001ab: 	movw	%dx, 0x14(%rax)
    000001af: 	movl	%r12d, %eax
    000001b2: 	andl	$-0x4, %eax
    000001b5: 	addl	%eax, %ebp
    000001b7: 	cmpl	%r12d, %eax
    000001ba: 	je	.Ltmp600 # Offset: 442
.Ltmp601:
    000001bc: 	movslq	%ebp, %r14
    000001bf: 	leal	(%rbp,%rbp,2), %eax
    000001c3: 	movzwl	(%rsi,%r14,2), %r15d
    000001c8: 	movslq	%eax, %r13
    000001cb: 	leaq	(%r14,%r14), %rdx
    000001cf: 	leaq	(%r13,%r13), %r12
    000001d4: 	movw	%r15w, (%rdi,%r13,2)
    000001d9: 	movzwl	(%r9,%r14,2), %r14d
    000001de: 	movw	%r14w, 0x2(%rdi,%r13,2)
    000001e4: 	leal	0x1(%rbp), %r13d
    000001e8: 	cmpl	%r13d, %r8d
    000001eb: 	jle	.Ltmp600 # Offset: 491
    000001ed: 	movzwl	0x2(%rsi,%rdx), %r13d
    000001f3: 	addl	$0x3, %eax
    000001f6: 	addl	$0x2, %ebp
    000001f9: 	cltq
    000001fb: 	movw	%r13w, 0x6(%rdi,%r12)
    00000201: 	movzwl	0x2(%r9,%rdx), %r13d
    00000207: 	movw	%r13w, 0x2(%rdi,%rax,2)
    0000020d: 	cmpl	%ebp, %r8d
    00000210: 	jle	.Ltmp600 # Offset: 528
    00000212: 	movzwl	0x4(%rsi,%rdx), %esi
    00000217: 	movw	%si, 0xc(%rdi,%r12)
    0000021d: 	movzwl	0x4(%r9,%rdx), %edx
    00000223: 	movw	%dx, 0x8(%rdi,%rax,2)
.Ltmp600:
    00000228: 	addq	%rdi, %r10
    0000022b: 	leaq	0x4(%rdi), %rax
    0000022f: 	cmpq	%r10, %rcx
    00000232: 	setae	%dl
    00000235: 	addq	%rcx, %rbx
    00000238: 	cmpq	%rbx, %rax
    0000023b: 	setae	%sil
    0000023f: 	orb	%sil, %dl
    00000242: 	je	.Ltmp602 # Offset: 578
    00000248: 	cmpl	$0x7, %r11d
    0000024c: 	jbe	.Ltmp602 # Offset: 588
    00000252: 	movl	%r8d, %esi
    00000255: 	movq	%rcx, %rdx
    00000258: 	shrl	$0x3, %esi
    0000025b: 	subl	$0x1, %esi
    0000025e: 	shlq	$0x4, %rsi
    00000262: 	leaq	0x10(%rcx,%rsi), %r9
    00000267: 	nopw	(%rax,%rax) # Size: 9
.Ltmp603:
    00000270: 	movdqu	(%rdx), %xmm0
    00000274: 	addq	$0x10, %rdx
    00000278: 	addq	$0x30, %rax
    0000027c: 	pextrw	$0x0, %xmm0, %esi
    00000281: 	movw	%si, -0x30(%rax)
    00000285: 	pextrw	$0x1, %xmm0, %esi
    0000028a: 	movw	%si, -0x2a(%rax)
    0000028e: 	pextrw	$0x2, %xmm0, %esi
    00000293: 	movw	%si, -0x24(%rax)
    00000297: 	pextrw	$0x3, %xmm0, %esi
    0000029c: 	movw	%si, -0x1e(%rax)
    000002a0: 	pextrw	$0x4, %xmm0, %esi
    000002a5: 	movw	%si, -0x18(%rax)
    000002a9: 	pextrw	$0x5, %xmm0, %esi
    000002ae: 	movw	%si, -0x12(%rax)
    000002b2: 	pextrw	$0x6, %xmm0, %esi
    000002b7: 	movw	%si, -0xc(%rax)
    000002bb: 	pextrw	$0x7, %xmm0, %esi
    000002c0: 	movw	%si, -0x6(%rax)
    000002c4: 	cmpq	%rdx, %r9
    000002c7: 	jne	.Ltmp603 # Offset: 711
    000002c9: 	movl	%r8d, %eax
    000002cc: 	andl	$-0x8, %eax
    000002cf: 	testb	$0x7, %r8b
    000002d3: 	je	.Ltmp604 # Offset: 723
    000002d9: 	movl	%eax, %r9d
    000002dc: 	leal	(%rax,%rax,2), %edx
    000002df: 	movzwl	(%rcx,%r9,2), %r10d
    000002e4: 	leaq	(%r9,%r9), %rsi
    000002e8: 	movslq	%edx, %r9
    000002eb: 	movw	%r10w, 0x4(%rdi,%r9,2)
    000002f1: 	leal	0x1(%rax), %r9d
    000002f5: 	cmpl	%r8d, %r9d
    000002f8: 	jge	.Ltmp604 # Offset: 760
    000002fe: 	movzwl	0x2(%rcx,%rsi), %r10d
    00000304: 	leal	0x3(%rdx), %r9d
    00000308: 	movslq	%r9d, %r9
    0000030b: 	movw	%r10w, 0x4(%rdi,%r9,2)
    00000311: 	leal	0x2(%rax), %r9d
    00000315: 	cmpl	%r8d, %r9d
    00000318: 	jge	.Ltmp604 # Offset: 792
    0000031a: 	movzwl	0x4(%rcx,%rsi), %r10d
    00000320: 	leal	0x6(%rdx), %r9d
    00000324: 	movslq	%r9d, %r9
    00000327: 	movw	%r10w, 0x4(%rdi,%r9,2)
    0000032d: 	leal	0x3(%rax), %r9d
    00000331: 	cmpl	%r9d, %r8d
    00000334: 	jle	.Ltmp604 # Offset: 820
    00000336: 	movzwl	0x6(%rcx,%rsi), %r10d
    0000033c: 	leal	0x9(%rdx), %r9d
    00000340: 	movslq	%r9d, %r9
    00000343: 	movw	%r10w, 0x4(%rdi,%r9,2)
    00000349: 	leal	0x4(%rax), %r9d
    0000034d: 	cmpl	%r9d, %r8d
    00000350: 	jle	.Ltmp604 # Offset: 848
    00000352: 	movzwl	0x8(%rcx,%rsi), %r10d
    00000358: 	leal	0xc(%rdx), %r9d
    0000035c: 	movslq	%r9d, %r9
    0000035f: 	movw	%r10w, 0x4(%rdi,%r9,2)
    00000365: 	leal	0x5(%rax), %r9d
    00000369: 	cmpl	%r9d, %r8d
    0000036c: 	jle	.Ltmp604 # Offset: 876
    0000036e: 	movzwl	0xa(%rcx,%rsi), %r9d
    00000374: 	addl	$0xf, %edx
    00000377: 	addl	$0x6, %eax
    0000037a: 	movslq	%edx, %rdx
    0000037d: 	movw	%r9w, 0x4(%rdi,%rdx,2)
    00000383: 	cmpl	%eax, %r8d
    00000386: 	jle	.Ltmp604 # Offset: 902
    00000388: 	movzwl	0xc(%rcx,%rsi), %eax
    0000038d: 	movw	%ax, 0xa(%rdi,%rdx,2)
.Ltmp604:
    00000392: 	popq	%rbx
    00000393: 	popq	%rbp
    00000394: 	popq	%r12
    00000396: 	popq	%r13
    00000398: 	popq	%r14
    0000039a: 	popq	%r15
    0000039c: 	retq # Offset: 924
    0000039d: 	nopl	(%rax) # Size: 3
.Ltmp602:
    000003a0: 	movl	%r11d, %r11d
    000003a3: 	leaq	0x2(%rcx,%r11,2), %rsi
    000003a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp605:
    000003b0: 	movzwl	(%rcx), %edx
    000003b3: 	addq	$0x2, %rcx
    000003b7: 	addq	$0x6, %rax
    000003bb: 	movw	%dx, -0x6(%rax)
    000003bf: 	cmpq	%rcx, %rsi
    000003c2: 	jne	.Ltmp605 # Offset: 962
    000003c4: 	popq	%rbx
    000003c5: 	popq	%rbp
    000003c6: 	popq	%r12
    000003c8: 	popq	%r13
    000003ca: 	popq	%r14
    000003cc: 	popq	%r15
    000003ce: 	retq # Offset: 974
    000003cf: 	nop # Size: 1
.Ltmp597:
    000003d0: 	movq	%rdi, %rdx
    000003d3: 	movl	%r8d, %r12d
    000003d6: 	xorl	%eax, %eax
    000003d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp606:
    000003e0: 	movzwl	(%rsi,%rax,2), %ebp
    000003e4: 	addq	$0x6, %rdx
    000003e8: 	movw	%bp, -0x6(%rdx)
    000003ec: 	movzwl	(%r9,%rax,2), %ebp
    000003f1: 	addq	$0x1, %rax
    000003f5: 	movw	%bp, -0x4(%rdx)
    000003f9: 	cmpq	%rax, %r12
    000003fc: 	jne	.Ltmp606 # Offset: 1020
    000003fe: 	jmp	.Ltmp600 # Offset: 1022
    00000403: 	nopl	(%rax,%rax) # Size: 5
.Ltmp596:
    00000408: 	retq # Offset: 1032
.Ltmp598:
    00000409: 	movl	%r8d, %r12d
    0000040c: 	xorl	%edx, %edx
    0000040e: 	xorl	%ebp, %ebp
    00000410: 	jmp	.Ltmp607 # Offset: 1040
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version3ItEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version4ItEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 87
  State       : disassembled
  Address     : 0x10670
  Size        : 0x4f0
  MaxSize     : 0x4f0
  Offset      : 0x10670
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version4ItEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r8d, -0x10(%rsp)
    00000013: 	testl	%r8d, %r8d
    00000016: 	jle	.Ltmp608 # Offset: 22
    0000001c: 	movl	%r8d, %ebp
    0000001f: 	xorl	%r15d, %r15d
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp618:
    00000028: 	addl	$0x2aa, %r15d
    0000002f: 	cmpl	-0x10(%rsp), %r15d
    00000034: 	jg	.Ltmp609 # Offset: 52
    0000003a: 	movq	$0xffc, -0x20(%rsp)
    00000043: 	movl	$0x554, %r10d
    00000049: 	movl	$0x2aa, %eax
.Ltmp619:
    0000004e: 	movslq	%eax, %r8
    00000051: 	testl	%eax, %eax
    00000053: 	movl	$0x2, %r11d
    00000059: 	movl	$0x4, %ebx
    0000005e: 	leaq	(%r8,%r8), %r9
    00000062: 	cmovgq	%r9, %r11
    00000066: 	addq	%r9, %r8
    00000069: 	testl	%eax, %eax
    0000006b: 	leaq	(%r8,%r8), %r14
    0000006f: 	leaq	-0x2(%r14), %r8
    00000073: 	cmovleq	%rbx, %r8
    00000077: 	leaq	(%rsi,%r11), %rbx
    0000007b: 	addq	%rdi, %r8
    0000007e: 	cmpq	%rbx, %rdi
    00000081: 	setae	%r12b
    00000085: 	cmpq	%r8, %rsi
    00000088: 	setae	%bl
    0000008b: 	addq	%rdx, %r11
    0000008e: 	orl	%r12d, %ebx
    00000091: 	cmpq	%r11, %rdi
    00000094: 	setae	%r11b
    00000098: 	cmpq	%r8, %rdx
    0000009b: 	setae	%r8b
    0000009f: 	orl	%r11d, %r8d
    000000a2: 	testb	%r8b, %bl
    000000a5: 	je	.Ltmp610 # Offset: 165
    000000ab: 	cmpl	$0x3, %eax
    000000ae: 	jle	.Ltmp610 # Offset: 174
    000000b4: 	testl	%eax, %eax
    000000b6: 	movl	$0x1, %r12d
    000000bc: 	cmovgl	%eax, %r12d
    000000c0: 	cmpl	$0x7, %eax
    000000c3: 	jle	.Ltmp611 # Offset: 195
    000000c9: 	movl	%r12d, %r13d
    000000cc: 	movq	%rdi, %r8
    000000cf: 	xorl	%r11d, %r11d
    000000d2: 	shrl	$0x3, %r13d
    000000d6: 	shlq	$0x4, %r13
    000000da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp612:
    000000e0: 	movdqu	(%rsi,%r11), %xmm1
    000000e6: 	movdqu	(%rdx,%r11), %xmm0
    000000ec: 	addq	$0x10, %r11
    000000f0: 	addq	$0x30, %r8
    000000f4: 	pextrw	$0x0, %xmm1, %ebx
    000000f9: 	movw	%bx, -0x30(%r8)
    000000fe: 	pextrw	$0x1, %xmm1, %ebx
    00000103: 	movw	%bx, -0x2a(%r8)
    00000108: 	pextrw	$0x2, %xmm1, %ebx
    0000010d: 	movw	%bx, -0x24(%r8)
    00000112: 	pextrw	$0x3, %xmm1, %ebx
    00000117: 	movw	%bx, -0x1e(%r8)
    0000011c: 	pextrw	$0x4, %xmm1, %ebx
    00000121: 	movw	%bx, -0x18(%r8)
    00000126: 	pextrw	$0x5, %xmm1, %ebx
    0000012b: 	movw	%bx, -0x12(%r8)
    00000130: 	pextrw	$0x6, %xmm1, %ebx
    00000135: 	movw	%bx, -0xc(%r8)
    0000013a: 	pextrw	$0x7, %xmm1, %ebx
    0000013f: 	movw	%bx, -0x6(%r8)
    00000144: 	pextrw	$0x0, %xmm0, %ebx
    00000149: 	movw	%bx, -0x2e(%r8)
    0000014e: 	pextrw	$0x1, %xmm0, %ebx
    00000153: 	movw	%bx, -0x28(%r8)
    00000158: 	pextrw	$0x2, %xmm0, %ebx
    0000015d: 	movw	%bx, -0x22(%r8)
    00000162: 	pextrw	$0x3, %xmm0, %ebx
    00000167: 	movw	%bx, -0x1c(%r8)
    0000016c: 	pextrw	$0x4, %xmm0, %ebx
    00000171: 	movw	%bx, -0x16(%r8)
    00000176: 	pextrw	$0x5, %xmm0, %ebx
    0000017b: 	movw	%bx, -0x10(%r8)
    00000180: 	pextrw	$0x6, %xmm0, %ebx
    00000185: 	movw	%bx, -0xa(%r8)
    0000018a: 	pextrw	$0x7, %xmm0, %ebx
    0000018f: 	movw	%bx, -0x4(%r8)
    00000194: 	cmpq	%r11, %r13
    00000197: 	jne	.Ltmp612 # Offset: 407
    0000019d: 	movl	%r12d, %ebx
    000001a0: 	andl	$-0x8, %ebx
    000001a3: 	movl	%ebx, %r8d
    000001a6: 	cmpl	%ebx, %r12d
    000001a9: 	je	.Ltmp613 # Offset: 425
.Ltmp622:
    000001af: 	subl	%ebx, %r12d
    000001b2: 	leal	-0x1(%r12), %r11d
    000001b7: 	cmpl	$0x2, %r11d
    000001bb: 	jbe	.Ltmp614 # Offset: 443
    000001bd: 	movq	(%rsi,%rbx,2), %xmm1
    000001c2: 	leaq	(%rbx,%rbx,2), %r11
    000001c6: 	movq	(%rdx,%rbx,2), %xmm0
    000001cb: 	leaq	(%rdi,%r11,2), %r11
    000001cf: 	pextrw	$0x0, %xmm1, %ebx
    000001d4: 	movw	%bx, (%r11)
    000001d8: 	pextrw	$0x1, %xmm1, %ebx
    000001dd: 	movw	%bx, 0x6(%r11)
    000001e2: 	pextrw	$0x2, %xmm1, %ebx
    000001e7: 	movw	%bx, 0xc(%r11)
    000001ec: 	pextrw	$0x3, %xmm1, %ebx
    000001f1: 	movw	%bx, 0x12(%r11)
    000001f6: 	pextrw	$0x0, %xmm0, %ebx
    000001fb: 	movw	%bx, 0x2(%r11)
    00000200: 	pextrw	$0x1, %xmm0, %ebx
    00000205: 	movw	%bx, 0x8(%r11)
    0000020a: 	pextrw	$0x2, %xmm0, %ebx
    0000020f: 	movw	%bx, 0xe(%r11)
    00000214: 	pextrw	$0x3, %xmm0, %ebx
    00000219: 	movw	%bx, 0x14(%r11)
    0000021e: 	movl	%r12d, %r11d
    00000221: 	andl	$-0x4, %r11d
    00000225: 	addl	%r11d, %r8d
    00000228: 	cmpl	%r11d, %r12d
    0000022b: 	je	.Ltmp613 # Offset: 555
.Ltmp614:
    00000231: 	leal	(%r8,%r8,2), %r11d
    00000235: 	movslq	%r8d, %r13
    00000238: 	movslq	%r11d, %r12
    0000023b: 	movl	%r11d, -0xc(%rsp)
    00000240: 	leaq	(%r13,%r13), %rbx
    00000245: 	leaq	(%r12,%r12), %r11
    00000249: 	movq	%r11, -0x18(%rsp)
    0000024e: 	movzwl	(%rsi,%r13,2), %r11d
    00000253: 	movw	%r11w, (%rdi,%r12,2)
    00000258: 	movzwl	(%rdx,%r13,2), %r13d
    0000025d: 	movw	%r13w, 0x2(%rdi,%r12,2)
    00000263: 	leal	0x1(%r8), %r12d
    00000267: 	cmpl	%r12d, %eax
    0000026a: 	jle	.Ltmp613 # Offset: 618
    0000026c: 	movzwl	0x2(%rsi,%rbx), %r12d
    00000272: 	movl	-0xc(%rsp), %r11d
    00000277: 	addl	$0x2, %r8d
    0000027b: 	movq	-0x18(%rsp), %r13
    00000280: 	addl	$0x3, %r11d
    00000284: 	movw	%r12w, 0x6(%rdi,%r13)
    0000028a: 	movzwl	0x2(%rdx,%rbx), %r12d
    00000290: 	movslq	%r11d, %r11
    00000293: 	movw	%r12w, 0x2(%rdi,%r11,2)
    00000299: 	cmpl	%r8d, %eax
    0000029c: 	jle	.Ltmp613 # Offset: 668
    0000029e: 	movzwl	0x4(%rsi,%rbx), %r8d
    000002a4: 	movw	%r8w, 0xc(%rdi,%r13)
    000002aa: 	movzwl	0x4(%rdx,%rbx), %r8d
    000002b0: 	movw	%r8w, 0x8(%rdi,%r11,2)
.Ltmp613:
    000002b6: 	leaq	(%rdi,%r14), %rbx
    000002ba: 	leaq	0x4(%rdi), %r8
    000002be: 	cmpq	%rbx, %rcx
    000002c1: 	leal	-0x1(%rax), %r11d
    000002c5: 	setae	%bl
    000002c8: 	addq	%rcx, %r9
    000002cb: 	cmpq	%r9, %r8
    000002ce: 	setae	%r9b
    000002d2: 	orb	%bl, %r9b
    000002d5: 	je	.Ltmp615 # Offset: 725
    000002db: 	cmpl	$0x7, %r11d
    000002df: 	jbe	.Ltmp615 # Offset: 735
    000002e5: 	movl	%eax, %r11d
    000002e8: 	movq	%rcx, %r9
    000002eb: 	shrl	$0x3, %r11d
    000002ef: 	subl	$0x1, %r11d
    000002f3: 	shlq	$0x4, %r11
    000002f7: 	leaq	0x10(%rcx,%r11), %rbx
    000002fc: 	nopl	(%rax) # Size: 4
.Ltmp616:
    00000300: 	movdqu	(%r9), %xmm0
    00000305: 	addq	$0x10, %r9
    00000309: 	addq	$0x30, %r8
    0000030d: 	pextrw	$0x0, %xmm0, %r11d
    00000313: 	movw	%r11w, -0x30(%r8)
    00000318: 	pextrw	$0x1, %xmm0, %r11d
    0000031e: 	movw	%r11w, -0x2a(%r8)
    00000323: 	pextrw	$0x2, %xmm0, %r11d
    00000329: 	movw	%r11w, -0x24(%r8)
    0000032e: 	pextrw	$0x3, %xmm0, %r11d
    00000334: 	movw	%r11w, -0x1e(%r8)
    00000339: 	pextrw	$0x4, %xmm0, %r11d
    0000033f: 	movw	%r11w, -0x18(%r8)
    00000344: 	pextrw	$0x5, %xmm0, %r11d
    0000034a: 	movw	%r11w, -0x12(%r8)
    0000034f: 	pextrw	$0x6, %xmm0, %r11d
    00000355: 	movw	%r11w, -0xc(%r8)
    0000035a: 	pextrw	$0x7, %xmm0, %r11d
    00000360: 	movw	%r11w, -0x6(%r8)
    00000365: 	cmpq	%r9, %rbx
    00000368: 	jne	.Ltmp616 # Offset: 872
    0000036a: 	movl	%eax, %r8d
    0000036d: 	andl	$-0x8, %r8d
    00000371: 	testb	$0x7, %al
    00000373: 	je	.Ltmp617 # Offset: 883
    00000379: 	movl	%r8d, %ebx
    0000037c: 	leal	(%r8,%r8,2), %r9d
    00000380: 	movzwl	(%rcx,%rbx,2), %r12d
    00000385: 	leaq	(%rbx,%rbx), %r11
    00000389: 	movslq	%r9d, %rbx
    0000038c: 	movw	%r12w, 0x4(%rdi,%rbx,2)
    00000392: 	leal	0x1(%r8), %ebx
    00000396: 	cmpl	%eax, %ebx
    00000398: 	jge	.Ltmp617 # Offset: 920
    0000039e: 	movzwl	0x2(%rcx,%r11), %r12d
    000003a4: 	leal	0x3(%r9), %ebx
    000003a8: 	movslq	%ebx, %rbx
    000003ab: 	movw	%r12w, 0x4(%rdi,%rbx,2)
    000003b1: 	leal	0x2(%r8), %ebx
    000003b5: 	cmpl	%eax, %ebx
    000003b7: 	jge	.Ltmp617 # Offset: 951
    000003b9: 	movzwl	0x4(%rcx,%r11), %r12d
    000003bf: 	leal	0x6(%r9), %ebx
    000003c3: 	movslq	%ebx, %rbx
    000003c6: 	movw	%r12w, 0x4(%rdi,%rbx,2)
    000003cc: 	leal	0x3(%r8), %ebx
    000003d0: 	cmpl	%ebx, %eax
    000003d2: 	jle	.Ltmp617 # Offset: 978
    000003d4: 	movzwl	0x6(%rcx,%r11), %r12d
    000003da: 	leal	0x9(%r9), %ebx
    000003de: 	movslq	%ebx, %rbx
    000003e1: 	movw	%r12w, 0x4(%rdi,%rbx,2)
    000003e7: 	leal	0x4(%r8), %ebx
    000003eb: 	cmpl	%eax, %ebx
    000003ed: 	jge	.Ltmp617 # Offset: 1005
    000003ef: 	movzwl	0x8(%rcx,%r11), %r12d
    000003f5: 	leal	0xc(%r9), %ebx
    000003f9: 	movslq	%ebx, %rbx
    000003fc: 	movw	%r12w, 0x4(%rdi,%rbx,2)
    00000402: 	leal	0x5(%r8), %ebx
    00000406: 	cmpl	%ebx, %eax
    00000408: 	jle	.Ltmp617 # Offset: 1032
    0000040a: 	movzwl	0xa(%rcx,%r11), %ebx
    00000410: 	addl	$0xf, %r9d
    00000414: 	addl	$0x6, %r8d
    00000418: 	movslq	%r9d, %r9
    0000041b: 	movw	%bx, 0x4(%rdi,%r9,2)
    00000421: 	cmpl	%r8d, %eax
    00000424: 	jle	.Ltmp617 # Offset: 1060
    00000426: 	movzwl	0xc(%rcx,%r11), %eax
    0000042c: 	movw	%ax, 0xa(%rdi,%r9,2)
.Ltmp617:
    00000432: 	addq	-0x20(%rsp), %rdi
    00000437: 	addq	%r10, %rsi
    0000043a: 	addq	%r10, %rdx
    0000043d: 	addq	%r10, %rcx
    00000440: 	subl	$0x2aa, %ebp
    00000446: 	cmpl	-0x10(%rsp), %r15d
    0000044b: 	jl	.Ltmp618 # Offset: 1099
.Ltmp608:
    00000451: 	popq	%rbx
    00000452: 	popq	%rbp
    00000453: 	popq	%r12
    00000455: 	popq	%r13
    00000457: 	popq	%r14
    00000459: 	popq	%r15
    0000045b: 	retq # Offset: 1115
    0000045c: 	nopl	(%rax) # Size: 4
.Ltmp609:
    00000460: 	leal	(%rbp,%rbp,2), %r8d
    00000465: 	movslq	%ebp, %r10
    00000468: 	movl	%ebp, %eax
    0000046a: 	movslq	%r8d, %r8
    0000046d: 	addq	%r10, %r10
    00000470: 	leaq	(%r8,%r8), %rbx
    00000474: 	movq	%rbx, -0x20(%rsp)
    00000479: 	testl	%ebp, %ebp
    0000047b: 	jg	.Ltmp619 # Offset: 1147
    00000481: 	jmp	.Ltmp617 # Offset: 1153
    00000483: 	nopl	(%rax,%rax) # Size: 5
.Ltmp615:
    00000488: 	movq	%rcx, %rax
    0000048b: 	leaq	0x2(%rcx,%r11,2), %r11
.Ltmp620:
    00000490: 	movzwl	(%rax), %r9d
    00000494: 	addq	$0x2, %rax
    00000498: 	addq	$0x6, %r8
    0000049c: 	movw	%r9w, -0x6(%r8)
    000004a1: 	cmpq	%rax, %r11
    000004a4: 	jne	.Ltmp620 # Offset: 1188
    000004a6: 	jmp	.Ltmp617 # Offset: 1190
    000004a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp610:
    000004b0: 	movq	%rdi, %r11
    000004b3: 	xorl	%r8d, %r8d
    000004b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp621:
    000004c0: 	movzwl	(%rsi,%r8,2), %ebx
    000004c5: 	addq	$0x6, %r11
    000004c9: 	movw	%bx, -0x6(%r11)
    000004ce: 	movzwl	(%rdx,%r8,2), %ebx
    000004d3: 	addq	$0x1, %r8
    000004d7: 	movw	%bx, -0x4(%r11)
    000004dc: 	cmpl	%r8d, %eax
    000004df: 	jg	.Ltmp621 # Offset: 1247
    000004e1: 	jmp	.Ltmp613 # Offset: 1249
.Ltmp611:
    000004e6: 	xorl	%ebx, %ebx
    000004e8: 	xorl	%r8d, %r8d
    000004eb: 	jmp	.Ltmp622 # Offset: 1259
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version4ItEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version5ItEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 88
  State       : disassembled
  Address     : 0x10b60
  Size        : 0x619
  MaxSize     : 0x620
  Offset      : 0x10b60
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version5ItEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r8d, -0x10(%rsp)
    00000013: 	testl	%r8d, %r8d
    00000016: 	jle	.Ltmp623 # Offset: 22
    0000001c: 	movq	%rdx, %rbx
    0000001f: 	movl	%r8d, %r14d
    00000022: 	xorl	%r15d, %r15d
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp634:
    00000028: 	addl	$0x2aa, %r15d
    0000002f: 	cmpl	-0x10(%rsp), %r15d
    00000034: 	jg	.Ltmp624 # Offset: 52
    0000003a: 	movq	$0xffc, -0x18(%rsp)
    00000043: 	movl	$0x554, %r10d
    00000049: 	movl	$0x2aa, %eax
.Ltmp636:
    0000004e: 	movslq	%eax, %r8
    00000051: 	movl	$0x2, %r9d
    00000057: 	leaq	(%r8,%r8), %rdx
    0000005b: 	addq	%rdx, %r8
    0000005e: 	testl	%eax, %eax
    00000060: 	leaq	(%r8,%r8), %r13
    00000064: 	leaq	-0x4(%r13), %r8
    00000068: 	cmovleq	%r9, %r8
    0000006c: 	addq	%rdi, %r8
    0000006f: 	cmpq	%r8, %rsi
    00000072: 	movl	$0x2, %r8d
    00000078: 	setae	%r9b
    0000007c: 	testl	%eax, %eax
    0000007e: 	cmovgq	%rdx, %r8
    00000082: 	addq	%rsi, %r8
    00000085: 	cmpq	%r8, %rdi
    00000088: 	setae	%r8b
    0000008c: 	orb	%r9b, %r8b
    0000008f: 	je	.Ltmp625 # Offset: 143
    00000095: 	cmpl	$0x8, %eax
    00000098: 	jle	.Ltmp625 # Offset: 152
    0000009e: 	testl	%eax, %eax
    000000a0: 	movl	$0x1, %r12d
    000000a6: 	movq	%rsi, %r9
    000000a9: 	movq	%rdi, %r8
    000000ac: 	cmovgl	%eax, %r12d
    000000b0: 	movl	%r12d, %r11d
    000000b3: 	shrl	$0x3, %r11d
    000000b7: 	subl	$0x1, %r11d
    000000bb: 	shlq	$0x4, %r11
    000000bf: 	leaq	0x10(%rsi,%r11), %rbp
    000000c4: 	nopl	(%rax) # Size: 4
.Ltmp626:
    000000c8: 	movdqu	(%r9), %xmm0
    000000cd: 	addq	$0x10, %r9
    000000d1: 	addq	$0x30, %r8
    000000d5: 	pextrw	$0x0, %xmm0, %r11d
    000000db: 	movw	%r11w, -0x30(%r8)
    000000e0: 	pextrw	$0x1, %xmm0, %r11d
    000000e6: 	movw	%r11w, -0x2a(%r8)
    000000eb: 	pextrw	$0x2, %xmm0, %r11d
    000000f1: 	movw	%r11w, -0x24(%r8)
    000000f6: 	pextrw	$0x3, %xmm0, %r11d
    000000fc: 	movw	%r11w, -0x1e(%r8)
    00000101: 	pextrw	$0x4, %xmm0, %r11d
    00000107: 	movw	%r11w, -0x18(%r8)
    0000010c: 	pextrw	$0x5, %xmm0, %r11d
    00000112: 	movw	%r11w, -0x12(%r8)
    00000117: 	pextrw	$0x6, %xmm0, %r11d
    0000011d: 	movw	%r11w, -0xc(%r8)
    00000122: 	pextrw	$0x7, %xmm0, %r11d
    00000128: 	movw	%r11w, -0x6(%r8)
    0000012d: 	cmpq	%rbp, %r9
    00000130: 	jne	.Ltmp626 # Offset: 304
    00000132: 	movl	%r12d, %r8d
    00000135: 	andl	$-0x8, %r8d
    00000139: 	andl	$0x7, %r12d
    0000013d: 	je	.Ltmp627 # Offset: 317
    00000143: 	movl	%r8d, %r12d
    00000146: 	leal	(%r8,%r8,2), %ebp
    0000014a: 	leaq	(%r12,%r12), %r11
    0000014e: 	movzwl	(%rsi,%r12,2), %r12d
    00000153: 	movslq	%ebp, %rbp
    00000156: 	leaq	(%rbp,%rbp), %r9
    0000015b: 	movw	%r12w, (%rdi,%rbp,2)
    00000160: 	leal	0x1(%r8), %ebp
    00000164: 	cmpl	%ebp, %eax
    00000166: 	jle	.Ltmp627 # Offset: 358
    00000168: 	movzwl	0x2(%rsi,%r11), %ebp
    0000016e: 	movw	%bp, 0x6(%rdi,%r9)
    00000174: 	leal	0x2(%r8), %ebp
    00000178: 	cmpl	%ebp, %eax
    0000017a: 	jle	.Ltmp627 # Offset: 378
    0000017c: 	movzwl	0x4(%rsi,%r11), %ebp
    00000182: 	movw	%bp, 0xc(%rdi,%r9)
    00000188: 	leal	0x3(%r8), %ebp
    0000018c: 	cmpl	%ebp, %eax
    0000018e: 	jle	.Ltmp627 # Offset: 398
    00000190: 	movzwl	0x6(%rsi,%r11), %ebp
    00000196: 	movw	%bp, 0x12(%rdi,%r9)
    0000019c: 	leal	0x4(%r8), %ebp
    000001a0: 	cmpl	%ebp, %eax
    000001a2: 	jle	.Ltmp627 # Offset: 418
    000001a4: 	movzwl	0x8(%rsi,%r11), %ebp
    000001aa: 	movw	%bp, 0x18(%rdi,%r9)
    000001b0: 	leal	0x5(%r8), %ebp
    000001b4: 	cmpl	%ebp, %eax
    000001b6: 	jle	.Ltmp627 # Offset: 438
    000001b8: 	movzwl	0xa(%rsi,%r11), %ebp
    000001be: 	addl	$0x6, %r8d
    000001c2: 	movw	%bp, 0x1e(%rdi,%r9)
    000001c8: 	cmpl	%r8d, %eax
    000001cb: 	jle	.Ltmp627 # Offset: 459
    000001cd: 	movzwl	0xc(%rsi,%r11), %r8d
    000001d3: 	movw	%r8w, 0x24(%rdi,%r9)
.Ltmp627:
    000001d9: 	leal	-0x1(%rax), %r9d
    000001dd: 	leaq	0x2(%rdi), %r8
    000001e1: 	cmpl	$0x7, %r9d
    000001e5: 	movl	%r9d, -0xc(%rsp)
    000001ea: 	leaq	-0x2(%rdi,%r13), %r9
    000001ef: 	seta	%bpl
    000001f3: 	cmpq	%r9, %rbx
    000001f6: 	leaq	(%rbx,%rdx), %r9
    000001fa: 	setae	%r11b
    000001fe: 	cmpq	%r9, %r8
    00000201: 	setae	%r9b
    00000205: 	orb	%r11b, %r9b
    00000208: 	movq	%rbx, %r9
    0000020b: 	je	.Ltmp628 # Offset: 523
    00000211: 	testb	%bpl, %bpl
    00000214: 	je	.Ltmp628 # Offset: 532
    0000021a: 	movl	%eax, %r11d
    0000021d: 	shrl	$0x3, %r11d
    00000221: 	subl	$0x1, %r11d
    00000225: 	shlq	$0x4, %r11
    00000229: 	leaq	0x10(%rbx,%r11), %r12
    0000022e: 	nop # Size: 2
.Ltmp629:
    00000230: 	movdqu	(%r9), %xmm0
    00000235: 	addq	$0x10, %r9
    00000239: 	addq	$0x30, %r8
    0000023d: 	pextrw	$0x0, %xmm0, %r11d
    00000243: 	movw	%r11w, -0x30(%r8)
    00000248: 	pextrw	$0x1, %xmm0, %r11d
    0000024e: 	movw	%r11w, -0x2a(%r8)
    00000253: 	pextrw	$0x2, %xmm0, %r11d
    00000259: 	movw	%r11w, -0x24(%r8)
    0000025e: 	pextrw	$0x3, %xmm0, %r11d
    00000264: 	movw	%r11w, -0x1e(%r8)
    00000269: 	pextrw	$0x4, %xmm0, %r11d
    0000026f: 	movw	%r11w, -0x18(%r8)
    00000274: 	pextrw	$0x5, %xmm0, %r11d
    0000027a: 	movw	%r11w, -0x12(%r8)
    0000027f: 	pextrw	$0x6, %xmm0, %r11d
    00000285: 	movw	%r11w, -0xc(%r8)
    0000028a: 	pextrw	$0x7, %xmm0, %r11d
    00000290: 	movw	%r11w, -0x6(%r8)
    00000295: 	cmpq	%r12, %r9
    00000298: 	jne	.Ltmp629 # Offset: 664
    0000029a: 	movl	%eax, %r8d
    0000029d: 	andl	$-0x8, %r8d
    000002a1: 	testb	$0x7, %al
    000002a3: 	je	.Ltmp630 # Offset: 675
    000002a9: 	movl	%r8d, %r12d
    000002ac: 	leal	(%r8,%r8,2), %r9d
    000002b0: 	leaq	(%r12,%r12), %r11
    000002b4: 	movq	%r11, -0x20(%rsp)
    000002b9: 	movzwl	(%rbx,%r12,2), %r11d
    000002be: 	leal	0x1(%r9), %r12d
    000002c2: 	movslq	%r12d, %r12
    000002c5: 	movw	%r11w, (%rdi,%r12,2)
    000002ca: 	leal	0x1(%r8), %r12d
    000002ce: 	cmpl	%r12d, %eax
    000002d1: 	jle	.Ltmp630 # Offset: 721
    000002d7: 	movq	-0x20(%rsp), %r11
    000002dc: 	leal	0x4(%r9), %r12d
    000002e0: 	movslq	%r12d, %r12
    000002e3: 	movzwl	0x2(%rbx,%r11), %r11d
    000002e9: 	movw	%r11w, (%rdi,%r12,2)
    000002ee: 	leal	0x2(%r8), %r12d
    000002f2: 	cmpl	%r12d, %eax
    000002f5: 	jle	.Ltmp630 # Offset: 757
    000002fb: 	movq	-0x20(%rsp), %r11
    00000300: 	leal	0x7(%r9), %r12d
    00000304: 	movslq	%r12d, %r12
    00000307: 	movzwl	0x4(%rbx,%r11), %r11d
    0000030d: 	movw	%r11w, (%rdi,%r12,2)
    00000312: 	leal	0x3(%r8), %r12d
    00000316: 	cmpl	%r12d, %eax
    00000319: 	jle	.Ltmp630 # Offset: 793
    0000031b: 	movq	-0x20(%rsp), %r11
    00000320: 	leal	0xa(%r9), %r12d
    00000324: 	movslq	%r12d, %r12
    00000327: 	movzwl	0x6(%rbx,%r11), %r11d
    0000032d: 	movw	%r11w, (%rdi,%r12,2)
    00000332: 	leal	0x4(%r8), %r12d
    00000336: 	cmpl	%r12d, %eax
    00000339: 	jle	.Ltmp630 # Offset: 825
    0000033b: 	movq	-0x20(%rsp), %r11
    00000340: 	leal	0xd(%r9), %r12d
    00000344: 	movslq	%r12d, %r12
    00000347: 	movzwl	0x8(%rbx,%r11), %r11d
    0000034d: 	movw	%r11w, (%rdi,%r12,2)
    00000352: 	leal	0x5(%r8), %r12d
    00000356: 	cmpl	%r12d, %eax
    00000359: 	jle	.Ltmp630 # Offset: 857
    0000035b: 	movq	-0x20(%rsp), %r11
    00000360: 	leal	0x10(%r9), %r12d
    00000364: 	addl	$0x6, %r8d
    00000368: 	movslq	%r12d, %r12
    0000036b: 	movzwl	0xa(%rbx,%r11), %r11d
    00000371: 	movw	%r11w, (%rdi,%r12,2)
    00000376: 	cmpl	%r8d, %eax
    00000379: 	jle	.Ltmp630 # Offset: 889
    0000037b: 	movq	-0x20(%rsp), %r8
    00000380: 	addl	$0x13, %r9d
    00000384: 	movslq	%r9d, %r9
    00000387: 	movzwl	0xc(%rbx,%r8), %r8d
    0000038d: 	movw	%r8w, (%rdi,%r9,2)
.Ltmp630:
    00000392: 	leaq	(%rdi,%r13), %r9
    00000396: 	leaq	0x4(%rdi), %r8
    0000039a: 	cmpq	%r9, %rcx
    0000039d: 	setae	%r9b
    000003a1: 	addq	%rcx, %rdx
    000003a4: 	cmpq	%rdx, %r8
    000003a7: 	setae	%dl
    000003aa: 	orb	%r9b, %dl
    000003ad: 	je	.Ltmp631 # Offset: 941
    000003b3: 	testb	%bpl, %bpl
    000003b6: 	je	.Ltmp631 # Offset: 950
    000003bc: 	movl	%eax, %r9d
    000003bf: 	movq	%r8, %rdx
    000003c2: 	movq	%rcx, %r8
    000003c5: 	shrl	$0x3, %r9d
    000003c9: 	subl	$0x1, %r9d
    000003cd: 	shlq	$0x4, %r9
    000003d1: 	leaq	0x10(%rcx,%r9), %r11
    000003d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp632:
    000003e0: 	movdqu	(%r8), %xmm0
    000003e5: 	addq	$0x10, %r8
    000003e9: 	addq	$0x30, %rdx
    000003ed: 	pextrw	$0x0, %xmm0, %r9d
    000003f3: 	movw	%r9w, -0x30(%rdx)
    000003f8: 	pextrw	$0x1, %xmm0, %r9d
    000003fe: 	movw	%r9w, -0x2a(%rdx)
    00000403: 	pextrw	$0x2, %xmm0, %r9d
    00000409: 	movw	%r9w, -0x24(%rdx)
    0000040e: 	pextrw	$0x3, %xmm0, %r9d
    00000414: 	movw	%r9w, -0x1e(%rdx)
    00000419: 	pextrw	$0x4, %xmm0, %r9d
    0000041f: 	movw	%r9w, -0x18(%rdx)
    00000424: 	pextrw	$0x5, %xmm0, %r9d
    0000042a: 	movw	%r9w, -0x12(%rdx)
    0000042f: 	pextrw	$0x6, %xmm0, %r9d
    00000435: 	movw	%r9w, -0xc(%rdx)
    0000043a: 	pextrw	$0x7, %xmm0, %r9d
    00000440: 	movw	%r9w, -0x6(%rdx)
    00000445: 	cmpq	%r8, %r11
    00000448: 	jne	.Ltmp632 # Offset: 1096
    0000044a: 	movl	%eax, %edx
    0000044c: 	andl	$-0x8, %edx
    0000044f: 	testb	$0x7, %al
    00000451: 	je	.Ltmp633 # Offset: 1105
    00000457: 	movl	%edx, %r11d
    0000045a: 	leal	(%rdx,%rdx,2), %r8d
    0000045e: 	movzwl	(%rcx,%r11,2), %ebp
    00000463: 	leaq	(%r11,%r11), %r9
    00000467: 	movslq	%r8d, %r11
    0000046a: 	movw	%bp, 0x4(%rdi,%r11,2)
    00000470: 	leal	0x1(%rdx), %r11d
    00000474: 	cmpl	%r11d, %eax
    00000477: 	jle	.Ltmp633 # Offset: 1143
    0000047d: 	movzwl	0x2(%rcx,%r9), %ebp
    00000483: 	leal	0x3(%r8), %r11d
    00000487: 	movslq	%r11d, %r11
    0000048a: 	movw	%bp, 0x4(%rdi,%r11,2)
    00000490: 	leal	0x2(%rdx), %r11d
    00000494: 	cmpl	%r11d, %eax
    00000497: 	jle	.Ltmp633 # Offset: 1175
    00000499: 	movzwl	0x4(%rcx,%r9), %ebp
    0000049f: 	leal	0x6(%r8), %r11d
    000004a3: 	movslq	%r11d, %r11
    000004a6: 	movw	%bp, 0x4(%rdi,%r11,2)
    000004ac: 	leal	0x3(%rdx), %r11d
    000004b0: 	cmpl	%r11d, %eax
    000004b3: 	jle	.Ltmp633 # Offset: 1203
    000004b5: 	movzwl	0x6(%rcx,%r9), %ebp
    000004bb: 	leal	0x9(%r8), %r11d
    000004bf: 	movslq	%r11d, %r11
    000004c2: 	movw	%bp, 0x4(%rdi,%r11,2)
    000004c8: 	leal	0x4(%rdx), %r11d
    000004cc: 	cmpl	%r11d, %eax
    000004cf: 	jle	.Ltmp633 # Offset: 1231
    000004d1: 	movzwl	0x8(%rcx,%r9), %ebp
    000004d7: 	leal	0xc(%r8), %r11d
    000004db: 	movslq	%r11d, %r11
    000004de: 	movw	%bp, 0x4(%rdi,%r11,2)
    000004e4: 	leal	0x5(%rdx), %r11d
    000004e8: 	cmpl	%r11d, %eax
    000004eb: 	jle	.Ltmp633 # Offset: 1259
    000004ed: 	movzwl	0xa(%rcx,%r9), %r11d
    000004f3: 	addl	$0xf, %r8d
    000004f7: 	addl	$0x6, %edx
    000004fa: 	movslq	%r8d, %r8
    000004fd: 	movw	%r11w, 0x4(%rdi,%r8,2)
    00000503: 	cmpl	%edx, %eax
    00000505: 	jle	.Ltmp633 # Offset: 1285
    00000507: 	movzwl	0xc(%rcx,%r9), %eax
    0000050d: 	movw	%ax, 0xa(%rdi,%r8,2)
.Ltmp633:
    00000513: 	addq	-0x18(%rsp), %rdi
    00000518: 	addq	%r10, %rsi
    0000051b: 	addq	%r10, %rbx
    0000051e: 	addq	%r10, %rcx
    00000521: 	subl	$0x2aa, %r14d
    00000528: 	cmpl	-0x10(%rsp), %r15d
    0000052d: 	jl	.Ltmp634 # Offset: 1325
.Ltmp623:
    00000533: 	popq	%rbx
    00000534: 	popq	%rbp
    00000535: 	popq	%r12
    00000537: 	popq	%r13
    00000539: 	popq	%r14
    0000053b: 	popq	%r15
    0000053d: 	retq # Offset: 1341
    0000053e: 	nop # Size: 2
.Ltmp624:
    00000540: 	movl	%r14d, %eax
    00000543: 	testl	%r14d, %r14d
    00000546: 	jle	.Ltmp635 # Offset: 1350
    0000054c: 	leal	(%r14,%r14,2), %edx
    00000550: 	movslq	%r14d, %r10
    00000553: 	movslq	%edx, %rdx
    00000556: 	addq	%r10, %r10
    00000559: 	addq	%rdx, %rdx
    0000055c: 	movq	%rdx, -0x18(%rsp)
    00000561: 	jmp	.Ltmp636 # Offset: 1377
    00000566: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp631:
    00000570: 	movq	%r8, %rdx
    00000573: 	movl	-0xc(%rsp), %r8d
    00000578: 	movq	%rcx, %rax
    0000057b: 	leaq	0x2(%rcx,%r8,2), %r9
.Ltmp637:
    00000580: 	movzwl	(%rax), %r8d
    00000584: 	addq	$0x2, %rax
    00000588: 	addq	$0x6, %rdx
    0000058c: 	movw	%r8w, -0x6(%rdx)
    00000591: 	cmpq	%rax, %r9
    00000594: 	jne	.Ltmp637 # Offset: 1428
    00000596: 	jmp	.Ltmp633 # Offset: 1430
    0000059b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp628:
    000005a0: 	movl	-0xc(%rsp), %r11d
    000005a5: 	leaq	0x2(%rbx,%r11,2), %r11
    000005aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp638:
    000005b0: 	movzwl	(%r9), %r12d
    000005b4: 	addq	$0x2, %r9
    000005b8: 	addq	$0x6, %r8
    000005bc: 	movw	%r12w, -0x6(%r8)
    000005c1: 	cmpq	%r11, %r9
    000005c4: 	jne	.Ltmp638 # Offset: 1476
    000005c6: 	jmp	.Ltmp630 # Offset: 1478
    000005cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp625:
    000005d0: 	movq	%rdi, %r9
    000005d3: 	xorl	%r8d, %r8d
    000005d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp639:
    000005e0: 	movzwl	(%rsi,%r8,2), %r11d
    000005e5: 	addq	$0x1, %r8
    000005e9: 	addq	$0x6, %r9
    000005ed: 	movw	%r11w, -0x6(%r9)
    000005f2: 	cmpl	%r8d, %eax
    000005f5: 	jg	.Ltmp639 # Offset: 1525
    000005f7: 	jmp	.Ltmp627 # Offset: 1527
    000005fc: 	nopl	(%rax) # Size: 4
.Ltmp635:
    00000600: 	leal	(%r14,%r14,2), %eax
    00000604: 	movslq	%r14d, %r10
    00000607: 	cltq
    00000609: 	addq	%r10, %r10
    0000060c: 	addq	%rax, %rax
    0000060f: 	movq	%rax, -0x18(%rsp)
    00000614: 	jmp	.Ltmp633 # Offset: 1556
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version5ItEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version1ItEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 89
  State       : disassembled
  Address     : 0x11180
  Size        : 0x2bb
  MaxSize     : 0x2c0
  Offset      : 0x11180
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version1ItEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp640 # Offset: 7
    0000000d: 	movslq	%r9d, %rax
    00000010: 	pushq	%r15
    00000012: 	movl	%r9d, %r10d
    00000015: 	pushq	%r14
    00000017: 	pushq	%r13
    00000019: 	leal	-0x1(%r9), %r13d
    0000001d: 	pushq	%r12
    0000001f: 	leaq	(%rdi,%rax,8), %r12
    00000023: 	addq	%rax, %rax
    00000026: 	leaq	(%rdx,%rax), %r11
    0000002a: 	pushq	%rbp
    0000002b: 	movl	%esi, %ebp
    0000002d: 	cmpq	%r11, %rdi
    00000030: 	pushq	%rbx
    00000031: 	setae	%r11b
    00000035: 	cmpq	%r12, %rdx
    00000038: 	setae	%bl
    0000003b: 	orl	%ebx, %r11d
    0000003e: 	leaq	(%rcx,%rax), %rbx
    00000042: 	cmpq	%rbx, %rdi
    00000045: 	setae	%bl
    00000048: 	cmpq	%r12, %rcx
    0000004b: 	setae	%r14b
    0000004f: 	orl	%r14d, %ebx
    00000052: 	andl	%ebx, %r11d
    00000055: 	cmpl	$0x2, %r13d
    00000059: 	seta	%bl
    0000005c: 	testb	%bl, %r11b
    0000005f: 	je	.Ltmp641 # Offset: 95
    00000065: 	addq	%r8, %rax
    00000068: 	cmpq	%rax, %rdi
    0000006b: 	setae	%al
    0000006e: 	cmpq	%r12, %r8
    00000071: 	setae	%r11b
    00000075: 	orb	%r11b, %al
    00000078: 	je	.Ltmp641 # Offset: 120
    0000007e: 	cmpl	$0x6, %r13d
    00000082: 	jbe	.Ltmp642 # Offset: 130
    00000088: 	movd	%esi, %xmm4
    0000008c: 	shrl	$0x3, %r10d
    00000090: 	xorl	%eax, %eax
    00000092: 	punpcklwd	%xmm4, %xmm4
    00000096: 	shlq	$0x4, %r10
    0000009a: 	pshufd	$0x0, %xmm4, %xmm4
    0000009f: 	nop # Size: 1
.Ltmp643:
    000000a0: 	movdqu	(%rcx,%rax), %xmm6
    000000a5: 	movdqu	(%rdx,%rax), %xmm0
    000000aa: 	movdqa	%xmm4, %xmm2
    000000ae: 	movdqa	%xmm4, %xmm1
    000000b2: 	punpcklwd	%xmm6, %xmm2
    000000b6: 	punpckhwd	%xmm6, %xmm1
    000000ba: 	movdqu	(%r8,%rax), %xmm6
    000000c0: 	movdqa	%xmm0, %xmm3
    000000c4: 	movdqa	%xmm2, %xmm5
    000000c8: 	punpcklwd	%xmm6, %xmm3
    000000cc: 	punpckhwd	%xmm6, %xmm0
    000000d0: 	punpckhwd	%xmm3, %xmm2
    000000d4: 	punpcklwd	%xmm3, %xmm5
    000000d8: 	movups	%xmm2, 0x10(%rdi,%rax,4)
    000000dd: 	movdqa	%xmm1, %xmm2
    000000e1: 	punpckhwd	%xmm0, %xmm1
    000000e5: 	punpcklwd	%xmm0, %xmm2
    000000e9: 	movups	%xmm5, (%rdi,%rax,4)
    000000ed: 	movups	%xmm2, 0x20(%rdi,%rax,4)
    000000f2: 	movups	%xmm1, 0x30(%rdi,%rax,4)
    000000f7: 	addq	$0x10, %rax
    000000fb: 	cmpq	%r10, %rax
    000000fe: 	jne	.Ltmp643 # Offset: 254
    00000100: 	movl	%r9d, %eax
    00000103: 	andl	$-0x8, %eax
    00000106: 	movl	%eax, %r11d
    00000109: 	cmpl	%eax, %r9d
    0000010c: 	je	.Ltmp644 # Offset: 268
    00000112: 	movl	%r9d, %r10d
    00000115: 	subl	%eax, %r10d
    00000118: 	leal	-0x1(%r10), %ebx
    0000011c: 	cmpl	$0x2, %ebx
    0000011f: 	jbe	.Ltmp645 # Offset: 287
.Ltmp647:
    00000125: 	movd	%esi, %xmm6
    00000129: 	movq	(%rcx,%rax,2), %xmm3
    0000012e: 	movq	(%rdx,%rax,2), %xmm1
    00000133: 	leaq	(%rdi,%rax,8), %rbx
    00000137: 	pshuflw	$0x0, %xmm6, %xmm0
    0000013c: 	movq	(%r8,%rax,2), %xmm4
    00000142: 	movl	%r10d, %eax
    00000145: 	movdqa	%xmm0, %xmm2
    00000149: 	punpcklwd	%xmm3, %xmm0
    0000014d: 	andl	$-0x4, %eax
    00000150: 	punpcklwd	%xmm3, %xmm2
    00000154: 	movdqa	%xmm1, %xmm3
    00000158: 	punpcklwd	%xmm4, %xmm1
    0000015c: 	addl	%eax, %r11d
    0000015f: 	punpcklwd	%xmm4, %xmm3
    00000163: 	movdqa	%xmm2, %xmm4
    00000167: 	pshufd	$0xe, %xmm0, %xmm0
    0000016c: 	punpcklwd	%xmm3, %xmm2
    00000170: 	pshufd	$0xe, %xmm1, %xmm1
    00000175: 	punpcklwd	%xmm3, %xmm4
    00000179: 	pshufd	$0xe, %xmm2, %xmm2
    0000017e: 	movq	%xmm4, (%rbx)
    00000182: 	movq	%xmm2, 0x8(%rbx)
    00000187: 	movdqa	%xmm0, %xmm2
    0000018b: 	punpcklwd	%xmm1, %xmm0
    0000018f: 	punpcklwd	%xmm1, %xmm2
    00000193: 	pshufd	$0xe, %xmm0, %xmm0
    00000198: 	movq	%xmm2, 0x10(%rbx)
    0000019d: 	movq	%xmm0, 0x18(%rbx)
    000001a2: 	cmpl	%eax, %r10d
    000001a5: 	je	.Ltmp644 # Offset: 421
.Ltmp645:
    000001ab: 	leal	(,%r11,4), %eax
    000001b3: 	movslq	%r11d, %r12
    000001b6: 	movslq	%eax, %r10
    000001b9: 	leaq	(%r12,%r12), %rbx
    000001bd: 	movw	%si, (%rdi,%r10,2)
    000001c2: 	movzwl	(%rdx,%r12,2), %r15d
    000001c7: 	leaq	0x1(%r10), %r14
    000001cb: 	leaq	(%r10,%r10), %rbp
    000001cf: 	leaq	(%r14,%r14), %r13
    000001d3: 	movw	%r15w, (%rdi,%r14,2)
    000001d8: 	movzwl	(%rcx,%r12,2), %r14d
    000001dd: 	movw	%r14w, 0x2(%rdi,%r13)
    000001e3: 	movzwl	(%r8,%r12,2), %r12d
    000001e8: 	movw	%r12w, 0x4(%rdi,%r13)
    000001ee: 	leal	0x1(%r11), %r12d
    000001f2: 	cmpl	%r12d, %r9d
    000001f5: 	jle	.Ltmp644 # Offset: 501
    000001f7: 	addl	$0x4, %eax
    000001fa: 	movw	%si, 0x8(%rdi,%rbp)
    000001ff: 	movzwl	0x2(%rdx,%rbx), %r13d
    00000205: 	addl	$0x2, %r11d
    00000209: 	cltq
    0000020b: 	addq	$0x1, %rax
    0000020f: 	movw	%r13w, (%rdi,%rax,2)
    00000214: 	leaq	(%rax,%rax), %r12
    00000218: 	movzwl	0x2(%rcx,%rbx), %eax
    0000021d: 	movw	%ax, 0x2(%rdi,%r12)
    00000223: 	movzwl	0x2(%r8,%rbx), %eax
    00000229: 	movw	%ax, 0x4(%rdi,%r12)
    0000022f: 	cmpl	%r11d, %r9d
    00000232: 	jle	.Ltmp644 # Offset: 562
    00000234: 	movw	%si, 0x10(%rdi,%rbp)
    00000239: 	movzwl	0x4(%rdx,%rbx), %edx
    0000023e: 	leaq	0x9(%r10), %rax
    00000242: 	leaq	(%rax,%rax), %rsi
    00000246: 	movw	%dx, (%rdi,%rax,2)
    0000024a: 	movzwl	0x4(%rcx,%rbx), %eax
    0000024f: 	movw	%ax, 0x2(%rdi,%rsi)
    00000254: 	movzwl	0x4(%r8,%rbx), %eax
    0000025a: 	movw	%ax, 0x4(%rdi,%rsi)
.Ltmp644:
    0000025f: 	popq	%rbx
    00000260: 	popq	%rbp
    00000261: 	popq	%r12
    00000263: 	popq	%r13
    00000265: 	popq	%r14
    00000267: 	popq	%r15
    00000269: 	retq # Offset: 617
    0000026a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp641:
    00000270: 	movl	%r9d, %r9d
    00000273: 	xorl	%eax, %eax
    00000275: 	nopl	(%rax) # Size: 3
.Ltmp646:
    00000278: 	movw	%bp, (%rdi,%rax,8)
    0000027c: 	movzwl	(%rdx,%rax,2), %esi
    00000280: 	movw	%si, 0x2(%rdi,%rax,8)
    00000285: 	movzwl	(%rcx,%rax,2), %esi
    00000289: 	movw	%si, 0x4(%rdi,%rax,8)
    0000028e: 	movzwl	(%r8,%rax,2), %esi
    00000293: 	movw	%si, 0x6(%rdi,%rax,8)
    00000298: 	addq	$0x1, %rax
    0000029c: 	cmpq	%r9, %rax
    0000029f: 	jne	.Ltmp646 # Offset: 671
    000002a1: 	popq	%rbx
    000002a2: 	popq	%rbp
    000002a3: 	popq	%r12
    000002a5: 	popq	%r13
    000002a7: 	popq	%r14
    000002a9: 	popq	%r15
    000002ab: 	retq # Offset: 683
    000002ac: 	nopl	(%rax) # Size: 4
.Ltmp640:
    000002b0: 	retq # Offset: 688
.Ltmp642:
    000002b1: 	xorl	%eax, %eax
    000002b3: 	xorl	%r11d, %r11d
    000002b6: 	jmp	.Ltmp647 # Offset: 694
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version1ItEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version2ItEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 90
  State       : disassembled
  Address     : 0x11440
  Size        : 0x461
  MaxSize     : 0x470
  Offset      : 0x11440
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version2ItEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	endbr64
    00000004: 	movslq	%r9d, %r9
    00000007: 	testq	%r9, %r9
    0000000a: 	je	.Ltmp648 # Offset: 10
    00000010: 	pushq	%r14
    00000012: 	movq	%rdx, %r11
    00000015: 	xorl	%eax, %eax
    00000017: 	pushq	%r13
    00000019: 	pushq	%r12
    0000001b: 	pushq	%rbp
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rcx, %rbx
.Ltmp649:
    00000020: 	movw	%si, (%rdi,%rax,8)
    00000024: 	movq	%rax, %r10
    00000027: 	addq	$0x1, %rax
    0000002b: 	cmpq	%rax, %r9
    0000002e: 	jne	.Ltmp649 # Offset: 46
    00000030: 	leaq	(,%r10,8), %r13
    00000038: 	cmpq	$0x7, %r10
    0000003c: 	leaq	(%rax,%rax), %rbp
    00000040: 	leaq	0x4(%rdi,%r13), %rdx
    00000045: 	leaq	(%r11,%rbp), %rcx
    00000049: 	seta	%sil
    0000004d: 	leaq	0x2(%rdi), %r14
    00000051: 	cmpq	%rdx, %r11
    00000054: 	setae	%dl
    00000057: 	cmpq	%rcx, %r14
    0000005a: 	setae	%cl
    0000005d: 	orb	%cl, %dl
    0000005f: 	je	.Ltmp650 # Offset: 95
    00000065: 	movq	%rax, %r12
    00000068: 	movq	%r14, %rdx
    0000006b: 	xorl	%ecx, %ecx
    0000006d: 	shrq	$0x3, %r12
    00000071: 	testb	%sil, %sil
    00000074: 	je	.Ltmp650 # Offset: 116
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp651:
    00000080: 	movq	%rcx, %r9
    00000083: 	addq	$0x1, %rcx
    00000087: 	addq	$0x40, %rdx
    0000008b: 	shlq	$0x4, %r9
    0000008f: 	movdqu	(%r11,%r9), %xmm0
    00000095: 	pextrw	$0x0, %xmm0, %r9d
    0000009b: 	movw	%r9w, -0x40(%rdx)
    000000a0: 	pextrw	$0x1, %xmm0, %r9d
    000000a6: 	movw	%r9w, -0x38(%rdx)
    000000ab: 	pextrw	$0x2, %xmm0, %r9d
    000000b1: 	movw	%r9w, -0x30(%rdx)
    000000b6: 	pextrw	$0x3, %xmm0, %r9d
    000000bc: 	movw	%r9w, -0x28(%rdx)
    000000c1: 	pextrw	$0x4, %xmm0, %r9d
    000000c7: 	movw	%r9w, -0x20(%rdx)
    000000cc: 	pextrw	$0x5, %xmm0, %r9d
    000000d2: 	movw	%r9w, -0x18(%rdx)
    000000d7: 	pextrw	$0x6, %xmm0, %r9d
    000000dd: 	movw	%r9w, -0x10(%rdx)
    000000e2: 	pextrw	$0x7, %xmm0, %r9d
    000000e8: 	movw	%r9w, -0x8(%rdx)
    000000ed: 	cmpq	%r12, %rcx
    000000f0: 	jne	.Ltmp651 # Offset: 240
    000000f2: 	movq	%rax, %rdx
    000000f5: 	andq	$-0x8, %rdx
    000000f9: 	leaq	(%r11,%rdx,2), %r9
    000000fd: 	leaq	(%r14,%rdx,8), %rcx
    00000101: 	cmpq	%rdx, %rax
    00000104: 	je	.Ltmp652 # Offset: 260
    00000106: 	movzwl	(%r9), %r11d
    0000010a: 	movw	%r11w, (%rcx)
    0000010e: 	leaq	0x1(%rdx), %r11
    00000112: 	cmpq	%r11, %rax
    00000115: 	jbe	.Ltmp652 # Offset: 277
    00000117: 	movzwl	0x2(%r9), %r11d
    0000011c: 	movw	%r11w, 0x8(%rcx)
    00000121: 	leaq	0x2(%rdx), %r11
    00000125: 	cmpq	%r11, %rax
    00000128: 	jbe	.Ltmp652 # Offset: 296
    0000012a: 	movzwl	0x4(%r9), %r11d
    0000012f: 	movw	%r11w, 0x10(%rcx)
    00000134: 	leaq	0x3(%rdx), %r11
    00000138: 	cmpq	%r11, %rax
    0000013b: 	jbe	.Ltmp652 # Offset: 315
    0000013d: 	movzwl	0x6(%r9), %r11d
    00000142: 	movw	%r11w, 0x18(%rcx)
    00000147: 	leaq	0x4(%rdx), %r11
    0000014b: 	cmpq	%r11, %rax
    0000014e: 	jbe	.Ltmp652 # Offset: 334
    00000150: 	movzwl	0x8(%r9), %r11d
    00000155: 	movw	%r11w, 0x20(%rcx)
    0000015a: 	leaq	0x5(%rdx), %r11
    0000015e: 	cmpq	%r11, %rax
    00000161: 	jbe	.Ltmp652 # Offset: 353
    00000163: 	movzwl	0xa(%r9), %r11d
    00000168: 	addq	$0x6, %rdx
    0000016c: 	movw	%r11w, 0x28(%rcx)
    00000171: 	cmpq	%rdx, %rax
    00000174: 	jbe	.Ltmp652 # Offset: 372
    00000176: 	movzwl	0xc(%r9), %edx
    0000017b: 	movw	%dx, 0x30(%rcx)
.Ltmp652:
    0000017f: 	leaq	0x6(%rdi,%r13), %rdx
    00000184: 	leaq	(%rbx,%rbp), %rcx
    00000188: 	cmpq	%rdx, %rbx
    0000018b: 	leaq	0x4(%rdi), %r12
    0000018f: 	setae	%dl
    00000192: 	cmpq	%rcx, %r12
    00000195: 	setae	%cl
    00000198: 	orb	%cl, %dl
    0000019a: 	je	.Ltmp653 # Offset: 410
    000001a0: 	movq	%rax, %r11
    000001a3: 	movq	%r12, %rdx
    000001a6: 	xorl	%ecx, %ecx
    000001a8: 	shrq	$0x3, %r11
    000001ac: 	testb	%sil, %sil
    000001af: 	je	.Ltmp653 # Offset: 431
    000001b5: 	nopl	(%rax) # Size: 3
.Ltmp654:
    000001b8: 	movq	%rcx, %r9
    000001bb: 	addq	$0x1, %rcx
    000001bf: 	addq	$0x40, %rdx
    000001c3: 	shlq	$0x4, %r9
    000001c7: 	movdqu	(%rbx,%r9), %xmm0
    000001cd: 	pextrw	$0x0, %xmm0, %r9d
    000001d3: 	movw	%r9w, -0x40(%rdx)
    000001d8: 	pextrw	$0x1, %xmm0, %r9d
    000001de: 	movw	%r9w, -0x38(%rdx)
    000001e3: 	pextrw	$0x2, %xmm0, %r9d
    000001e9: 	movw	%r9w, -0x30(%rdx)
    000001ee: 	pextrw	$0x3, %xmm0, %r9d
    000001f4: 	movw	%r9w, -0x28(%rdx)
    000001f9: 	pextrw	$0x4, %xmm0, %r9d
    000001ff: 	movw	%r9w, -0x20(%rdx)
    00000204: 	pextrw	$0x5, %xmm0, %r9d
    0000020a: 	movw	%r9w, -0x18(%rdx)
    0000020f: 	pextrw	$0x6, %xmm0, %r9d
    00000215: 	movw	%r9w, -0x10(%rdx)
    0000021a: 	pextrw	$0x7, %xmm0, %r9d
    00000220: 	movw	%r9w, -0x8(%rdx)
    00000225: 	cmpq	%rcx, %r11
    00000228: 	jne	.Ltmp654 # Offset: 552
    0000022a: 	movq	%rax, %rdx
    0000022d: 	andq	$-0x8, %rdx
    00000231: 	leaq	(%rbx,%rdx,2), %r9
    00000235: 	leaq	(%r12,%rdx,8), %rcx
    00000239: 	cmpq	%rdx, %rax
    0000023c: 	je	.Ltmp655 # Offset: 572
    0000023e: 	movzwl	(%r9), %r11d
    00000242: 	movw	%r11w, (%rcx)
    00000246: 	leaq	0x1(%rdx), %r11
    0000024a: 	cmpq	%r11, %rax
    0000024d: 	jbe	.Ltmp655 # Offset: 589
    0000024f: 	movzwl	0x2(%r9), %r11d
    00000254: 	movw	%r11w, 0x8(%rcx)
    00000259: 	leaq	0x2(%rdx), %r11
    0000025d: 	cmpq	%r11, %rax
    00000260: 	jbe	.Ltmp655 # Offset: 608
    00000262: 	movzwl	0x4(%r9), %r11d
    00000267: 	movw	%r11w, 0x10(%rcx)
    0000026c: 	leaq	0x3(%rdx), %r11
    00000270: 	cmpq	%r11, %rax
    00000273: 	jbe	.Ltmp655 # Offset: 627
    00000275: 	movzwl	0x6(%r9), %r11d
    0000027a: 	movw	%r11w, 0x18(%rcx)
    0000027f: 	leaq	0x4(%rdx), %r11
    00000283: 	cmpq	%r11, %rax
    00000286: 	jbe	.Ltmp655 # Offset: 646
    00000288: 	movzwl	0x8(%r9), %r11d
    0000028d: 	movw	%r11w, 0x20(%rcx)
    00000292: 	leaq	0x5(%rdx), %r11
    00000296: 	cmpq	%r11, %rax
    00000299: 	jbe	.Ltmp655 # Offset: 665
    0000029b: 	movzwl	0xa(%r9), %r11d
    000002a0: 	addq	$0x6, %rdx
    000002a4: 	movw	%r11w, 0x28(%rcx)
    000002a9: 	cmpq	%rdx, %rax
    000002ac: 	jbe	.Ltmp655 # Offset: 684
    000002ae: 	movzwl	0xc(%r9), %edx
    000002b3: 	movw	%dx, 0x30(%rcx)
.Ltmp655:
    000002b7: 	leaq	(%rdi,%rax,8), %rdx
    000002bb: 	leaq	0x6(%rdi), %r11
    000002bf: 	cmpq	%rdx, %r8
    000002c2: 	setae	%dl
    000002c5: 	addq	%r8, %rbp
    000002c8: 	cmpq	%rbp, %r11
    000002cb: 	setae	%cl
    000002ce: 	orb	%cl, %dl
    000002d0: 	je	.Ltmp656 # Offset: 720
    000002d6: 	movq	%rax, %r9
    000002d9: 	movq	%r11, %rdx
    000002dc: 	xorl	%ecx, %ecx
    000002de: 	shrq	$0x3, %r9
    000002e2: 	testb	%sil, %sil
    000002e5: 	je	.Ltmp656 # Offset: 741
    000002eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp657:
    000002f0: 	movq	%rcx, %rsi
    000002f3: 	addq	$0x1, %rcx
    000002f7: 	addq	$0x40, %rdx
    000002fb: 	shlq	$0x4, %rsi
    000002ff: 	movdqu	(%r8,%rsi), %xmm0
    00000305: 	pextrw	$0x0, %xmm0, %esi
    0000030a: 	movw	%si, -0x40(%rdx)
    0000030e: 	pextrw	$0x1, %xmm0, %esi
    00000313: 	movw	%si, -0x38(%rdx)
    00000317: 	pextrw	$0x2, %xmm0, %esi
    0000031c: 	movw	%si, -0x30(%rdx)
    00000320: 	pextrw	$0x3, %xmm0, %esi
    00000325: 	movw	%si, -0x28(%rdx)
    00000329: 	pextrw	$0x4, %xmm0, %esi
    0000032e: 	movw	%si, -0x20(%rdx)
    00000332: 	pextrw	$0x5, %xmm0, %esi
    00000337: 	movw	%si, -0x18(%rdx)
    0000033b: 	pextrw	$0x6, %xmm0, %esi
    00000340: 	movw	%si, -0x10(%rdx)
    00000344: 	pextrw	$0x7, %xmm0, %esi
    00000349: 	movw	%si, -0x8(%rdx)
    0000034d: 	cmpq	%rcx, %r9
    00000350: 	jne	.Ltmp657 # Offset: 848
    00000352: 	movq	%rax, %rdx
    00000355: 	andq	$-0x8, %rdx
    00000359: 	leaq	(%r8,%rdx,2), %rsi
    0000035d: 	leaq	(%r11,%rdx,8), %rcx
    00000361: 	cmpq	%rdx, %rax
    00000364: 	je	.Ltmp658 # Offset: 868
    00000366: 	movzwl	(%rsi), %edi
    00000369: 	movw	%di, (%rcx)
    0000036c: 	leaq	0x1(%rdx), %rdi
    00000370: 	cmpq	%rdi, %rax
    00000373: 	jbe	.Ltmp658 # Offset: 883
    00000375: 	movzwl	0x2(%rsi), %edi
    00000379: 	movw	%di, 0x8(%rcx)
    0000037d: 	leaq	0x2(%rdx), %rdi
    00000381: 	cmpq	%rdi, %rax
    00000384: 	jbe	.Ltmp658 # Offset: 900
    00000386: 	movzwl	0x4(%rsi), %edi
    0000038a: 	movw	%di, 0x10(%rcx)
    0000038e: 	leaq	0x3(%rdx), %rdi
    00000392: 	cmpq	%rdi, %rax
    00000395: 	jbe	.Ltmp658 # Offset: 917
    00000397: 	movzwl	0x6(%rsi), %edi
    0000039b: 	movw	%di, 0x18(%rcx)
    0000039f: 	leaq	0x4(%rdx), %rdi
    000003a3: 	cmpq	%rdi, %rax
    000003a6: 	jbe	.Ltmp658 # Offset: 934
    000003a8: 	movzwl	0x8(%rsi), %edi
    000003ac: 	movw	%di, 0x20(%rcx)
    000003b0: 	leaq	0x5(%rdx), %rdi
    000003b4: 	cmpq	%rdi, %rax
    000003b7: 	jbe	.Ltmp658 # Offset: 951
    000003b9: 	movzwl	0xa(%rsi), %edi
    000003bd: 	addq	$0x6, %rdx
    000003c1: 	movw	%di, 0x28(%rcx)
    000003c5: 	cmpq	%rdx, %rax
    000003c8: 	jbe	.Ltmp658 # Offset: 968
    000003ca: 	movzwl	0xc(%rsi), %eax
    000003ce: 	movw	%ax, 0x30(%rcx)
.Ltmp658:
    000003d2: 	popq	%rbx
    000003d3: 	popq	%rbp
    000003d4: 	popq	%r12
    000003d6: 	popq	%r13
    000003d8: 	popq	%r14
    000003da: 	retq # Offset: 986
    000003db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp656:
    000003e0: 	xorl	%eax, %eax
    000003e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp659:
    000003e8: 	movzwl	(%r8,%rax,2), %edx
    000003ed: 	movw	%dx, 0x6(%rdi,%rax,8)
    000003f2: 	movq	%rax, %rdx
    000003f5: 	addq	$0x1, %rax
    000003f9: 	cmpq	%r10, %rdx
    000003fc: 	jne	.Ltmp659 # Offset: 1020
    000003fe: 	popq	%rbx
    000003ff: 	popq	%rbp
    00000400: 	popq	%r12
    00000402: 	popq	%r13
    00000404: 	popq	%r14
    00000406: 	retq # Offset: 1030
    00000407: 	nopw	(%rax,%rax) # Size: 9
.Ltmp650:
    00000410: 	xorl	%edx, %edx
    00000412: 	nopw	(%rax,%rax) # Size: 6
.Ltmp660:
    00000418: 	movzwl	(%r11,%rdx,2), %ecx
    0000041d: 	movw	%cx, 0x2(%rdi,%rdx,8)
    00000422: 	movq	%rdx, %rcx
    00000425: 	addq	$0x1, %rdx
    00000429: 	cmpq	%rcx, %r10
    0000042c: 	jne	.Ltmp660 # Offset: 1068
    0000042e: 	jmp	.Ltmp652 # Offset: 1070
    00000433: 	nopl	(%rax,%rax) # Size: 5
.Ltmp653:
    00000438: 	xorl	%edx, %edx
    0000043a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp661:
    00000440: 	movzwl	(%rbx,%rdx,2), %ecx
    00000444: 	movw	%cx, 0x4(%rdi,%rdx,8)
    00000449: 	movq	%rdx, %rcx
    0000044c: 	addq	$0x1, %rdx
    00000450: 	cmpq	%rcx, %r10
    00000453: 	jne	.Ltmp661 # Offset: 1107
    00000455: 	jmp	.Ltmp655 # Offset: 1109
    0000045a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp648:
    00000460: 	retq # Offset: 1120
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version2ItEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version3ItEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 91
  State       : disassembled
  Address     : 0x118b0
  Size        : 0x499
  MaxSize     : 0x4a0
  Offset      : 0x118b0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version3ItEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp662 # Offset: 7
    0000000d: 	pushq	%r14
    0000000f: 	movq	%rdx, %r10
    00000012: 	movl	%r9d, %r11d
    00000015: 	pushq	%r13
    00000017: 	leal	-0x1(%r9), %r13d
    0000001b: 	pushq	%r12
    0000001d: 	movslq	%r9d, %r12
    00000020: 	pushq	%rbp
    00000021: 	leaq	-0x4(%rdi,%r12,8), %rax
    00000026: 	leaq	(%r12,%r12), %rbp
    0000002a: 	cmpq	%rax, %r10
    0000002d: 	pushq	%rbx
    0000002e: 	movl	%esi, %ebx
    00000030: 	movq	%rcx, %rsi
    00000033: 	leaq	(%r10,%rbp), %rcx
    00000037: 	setae	%al
    0000003a: 	movl	%ebx, %edx
    0000003c: 	cmpq	%rcx, %rdi
    0000003f: 	setae	%cl
    00000042: 	orb	%cl, %al
    00000044: 	je	.Ltmp663 # Offset: 68
    0000004a: 	cmpl	$0xf, %r13d
    0000004e: 	jbe	.Ltmp663 # Offset: 78
    00000054: 	shrl	$0x3, %r11d
    00000058: 	movq	%r10, %rcx
    0000005b: 	movq	%rdi, %rax
    0000005e: 	subl	$0x1, %r11d
    00000062: 	shlq	$0x4, %r11
    00000066: 	leaq	0x10(%r10,%r11), %r13
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp664:
    00000070: 	movdqu	(%rcx), %xmm0
    00000074: 	addq	$0x10, %rcx
    00000078: 	movw	%dx, (%rax)
    0000007b: 	addq	$0x40, %rax
    0000007f: 	movw	%dx, -0x38(%rax)
    00000083: 	pextrw	$0x0, %xmm0, %r11d
    00000089: 	movw	%dx, -0x30(%rax)
    0000008d: 	movw	%r11w, -0x3e(%rax)
    00000092: 	pextrw	$0x1, %xmm0, %r11d
    00000098: 	movw	%r11w, -0x36(%rax)
    0000009d: 	pextrw	$0x2, %xmm0, %r11d
    000000a3: 	movw	%r11w, -0x2e(%rax)
    000000a8: 	pextrw	$0x3, %xmm0, %r11d
    000000ae: 	movw	%r11w, -0x26(%rax)
    000000b3: 	pextrw	$0x4, %xmm0, %r11d
    000000b9: 	movw	%r11w, -0x1e(%rax)
    000000be: 	pextrw	$0x5, %xmm0, %r11d
    000000c4: 	movw	%r11w, -0x16(%rax)
    000000c9: 	pextrw	$0x6, %xmm0, %r11d
    000000cf: 	movw	%r11w, -0xe(%rax)
    000000d4: 	pextrw	$0x7, %xmm0, %r11d
    000000da: 	movw	%dx, -0x28(%rax)
    000000de: 	movw	%dx, -0x20(%rax)
    000000e2: 	movw	%dx, -0x18(%rax)
    000000e6: 	movw	%dx, -0x10(%rax)
    000000ea: 	movw	%dx, -0x8(%rax)
    000000ee: 	movw	%r11w, -0x6(%rax)
    000000f3: 	cmpq	%rcx, %r13
    000000f6: 	jne	.Ltmp664 # Offset: 246
    000000fc: 	movl	%r9d, %eax
    000000ff: 	andl	$-0x8, %eax
    00000102: 	testb	$0x7, %r9b
    00000106: 	je	.Ltmp665 # Offset: 262
    0000010c: 	leal	(,%rax,4), %edx
    00000113: 	movl	%eax, %r14d
    00000116: 	movslq	%edx, %r13
    00000119: 	leaq	(%r14,%r14), %rcx
    0000011d: 	movw	%bx, (%rdi,%r13,2)
    00000122: 	movzwl	(%r10,%r14,2), %r14d
    00000127: 	leaq	(%r13,%r13), %r11
    0000012c: 	movw	%r14w, 0x2(%rdi,%r13,2)
    00000132: 	leal	0x1(%rax), %r13d
    00000136: 	cmpl	%r13d, %r9d
    00000139: 	jle	.Ltmp665 # Offset: 313
    0000013f: 	movw	%bx, 0x8(%rdi,%r11)
    00000145: 	leal	0x4(%rdx), %r13d
    00000149: 	movzwl	0x2(%r10,%rcx), %r14d
    0000014f: 	movslq	%r13d, %r13
    00000152: 	movw	%r14w, 0x2(%rdi,%r13,2)
    00000158: 	leal	0x2(%rax), %r13d
    0000015c: 	cmpl	%r13d, %r9d
    0000015f: 	jle	.Ltmp665 # Offset: 351
    00000165: 	movw	%bx, 0x10(%rdi,%r11)
    0000016b: 	leal	0x8(%rdx), %r13d
    0000016f: 	movzwl	0x4(%r10,%rcx), %r14d
    00000175: 	movslq	%r13d, %r13
    00000178: 	movw	%r14w, 0x2(%rdi,%r13,2)
    0000017e: 	leal	0x3(%rax), %r13d
    00000182: 	cmpl	%r13d, %r9d
    00000185: 	jle	.Ltmp665 # Offset: 389
    00000187: 	movw	%bx, 0x18(%rdi,%r11)
    0000018d: 	leal	0xc(%rdx), %r13d
    00000191: 	movzwl	0x6(%r10,%rcx), %r14d
    00000197: 	movslq	%r13d, %r13
    0000019a: 	movw	%r14w, 0x2(%rdi,%r13,2)
    000001a0: 	leal	0x4(%rax), %r13d
    000001a4: 	cmpl	%r13d, %r9d
    000001a7: 	jle	.Ltmp665 # Offset: 423
    000001a9: 	movw	%bx, 0x20(%rdi,%r11)
    000001af: 	leal	0x10(%rdx), %r13d
    000001b3: 	movzwl	0x8(%r10,%rcx), %r14d
    000001b9: 	movslq	%r13d, %r13
    000001bc: 	movw	%r14w, 0x2(%rdi,%r13,2)
    000001c2: 	leal	0x5(%rax), %r13d
    000001c6: 	cmpl	%r13d, %r9d
    000001c9: 	jle	.Ltmp665 # Offset: 457
    000001cb: 	movw	%bx, 0x28(%rdi,%r11)
    000001d1: 	addl	$0x14, %edx
    000001d4: 	movzwl	0xa(%r10,%rcx), %r13d
    000001da: 	addl	$0x6, %eax
    000001dd: 	movslq	%edx, %rdx
    000001e0: 	movw	%r13w, 0x2(%rdi,%rdx,2)
    000001e6: 	cmpl	%eax, %r9d
    000001e9: 	jle	.Ltmp665 # Offset: 489
    000001eb: 	movw	%bx, 0x30(%rdi,%r11)
    000001f1: 	movzwl	0xc(%r10,%rcx), %eax
    000001f7: 	movw	%ax, 0xa(%rdi,%rdx,2)
.Ltmp665:
    000001fc: 	leaq	(%rsi,%rbp), %rdx
    00000200: 	leaq	0x4(%rdi), %rax
    00000204: 	cmpq	%rdx, %rax
    00000207: 	leaq	(%rdi,%r12,8), %rcx
    0000020b: 	setae	%dl
    0000020e: 	cmpq	%rcx, %rsi
    00000211: 	setae	%r10b
    00000215: 	orb	%r10b, %dl
    00000218: 	je	.Ltmp666 # Offset: 536
    0000021e: 	addq	%r8, %rbp
    00000221: 	cmpq	%rbp, %rax
    00000224: 	setae	%dl
    00000227: 	cmpq	%rcx, %r8
    0000022a: 	setae	%cl
    0000022d: 	orb	%cl, %dl
    0000022f: 	je	.Ltmp666 # Offset: 559
.Ltmp672:
    00000235: 	movl	%r9d, %r10d
    00000238: 	xorl	%edx, %edx
    0000023a: 	shrl	$0x3, %r10d
    0000023e: 	shlq	$0x4, %r10
    00000242: 	nopw	(%rax,%rax) # Size: 6
.Ltmp667:
    00000248: 	movdqu	(%rsi,%rdx), %xmm1
    0000024d: 	movdqu	(%r8,%rdx), %xmm0
    00000253: 	addq	$0x10, %rdx
    00000257: 	addq	$0x40, %rax
    0000025b: 	pextrw	$0x0, %xmm1, %ecx
    00000260: 	movw	%cx, -0x40(%rax)
    00000264: 	pextrw	$0x1, %xmm1, %ecx
    00000269: 	movw	%cx, -0x38(%rax)
    0000026d: 	pextrw	$0x2, %xmm1, %ecx
    00000272: 	movw	%cx, -0x30(%rax)
    00000276: 	pextrw	$0x3, %xmm1, %ecx
    0000027b: 	movw	%cx, -0x28(%rax)
    0000027f: 	pextrw	$0x4, %xmm1, %ecx
    00000284: 	movw	%cx, -0x20(%rax)
    00000288: 	pextrw	$0x5, %xmm1, %ecx
    0000028d: 	movw	%cx, -0x18(%rax)
    00000291: 	pextrw	$0x6, %xmm1, %ecx
    00000296: 	movw	%cx, -0x10(%rax)
    0000029a: 	pextrw	$0x7, %xmm1, %ecx
    0000029f: 	movw	%cx, -0x8(%rax)
    000002a3: 	pextrw	$0x0, %xmm0, %ecx
    000002a8: 	movw	%cx, -0x3e(%rax)
    000002ac: 	pextrw	$0x1, %xmm0, %ecx
    000002b1: 	movw	%cx, -0x36(%rax)
    000002b5: 	pextrw	$0x2, %xmm0, %ecx
    000002ba: 	movw	%cx, -0x2e(%rax)
    000002be: 	pextrw	$0x3, %xmm0, %ecx
    000002c3: 	movw	%cx, -0x26(%rax)
    000002c7: 	pextrw	$0x4, %xmm0, %ecx
    000002cc: 	movw	%cx, -0x1e(%rax)
    000002d0: 	pextrw	$0x5, %xmm0, %ecx
    000002d5: 	movw	%cx, -0x16(%rax)
    000002d9: 	pextrw	$0x6, %xmm0, %ecx
    000002de: 	movw	%cx, -0xe(%rax)
    000002e2: 	pextrw	$0x7, %xmm0, %ecx
    000002e7: 	movw	%cx, -0x6(%rax)
    000002eb: 	cmpq	%rdx, %r10
    000002ee: 	jne	.Ltmp667 # Offset: 750
    000002f4: 	movl	%r9d, %edx
    000002f7: 	andl	$-0x8, %edx
    000002fa: 	movl	%edx, %ecx
    000002fc: 	cmpl	%r9d, %edx
    000002ff: 	je	.Ltmp668 # Offset: 767
    00000305: 	movl	%r9d, %r11d
    00000308: 	subl	%edx, %r11d
    0000030b: 	leal	-0x1(%r11), %eax
    0000030f: 	cmpl	$0x2, %eax
    00000312: 	jbe	.Ltmp669 # Offset: 786
.Ltmp673:
    00000314: 	movq	(%rsi,%rdx,2), %xmm1
    00000319: 	movq	(%r8,%rdx,2), %xmm0
    0000031f: 	leaq	0x4(%rdi,%rdx,8), %rax
    00000324: 	pextrw	$0x0, %xmm1, %edx
    00000329: 	movw	%dx, (%rax)
    0000032c: 	pextrw	$0x1, %xmm1, %edx
    00000331: 	movw	%dx, 0x8(%rax)
    00000335: 	pextrw	$0x2, %xmm1, %edx
    0000033a: 	movw	%dx, 0x10(%rax)
    0000033e: 	pextrw	$0x3, %xmm1, %edx
    00000343: 	movw	%dx, 0x18(%rax)
    00000347: 	pextrw	$0x0, %xmm0, %edx
    0000034c: 	movw	%dx, 0x2(%rax)
    00000350: 	pextrw	$0x1, %xmm0, %edx
    00000355: 	movw	%dx, 0xa(%rax)
    00000359: 	pextrw	$0x2, %xmm0, %edx
    0000035e: 	movw	%dx, 0x12(%rax)
    00000362: 	pextrw	$0x3, %xmm0, %edx
    00000367: 	movw	%dx, 0x1a(%rax)
    0000036b: 	movl	%r11d, %eax
    0000036e: 	andl	$-0x4, %eax
    00000371: 	addl	%eax, %ecx
    00000373: 	cmpl	%r11d, %eax
    00000376: 	je	.Ltmp668 # Offset: 886
.Ltmp669:
    00000378: 	movslq	%ecx, %r11
    0000037b: 	leal	(,%rcx,4), %eax
    00000382: 	movzwl	(%rsi,%r11,2), %ebx
    00000387: 	leal	0x2(%rax), %edx
    0000038a: 	leaq	(%r11,%r11), %r10
    0000038e: 	movslq	%edx, %rdx
    00000391: 	movw	%bx, (%rdi,%rdx,2)
    00000395: 	movzwl	(%r8,%r11,2), %r11d
    0000039a: 	movw	%r11w, 0x2(%rdi,%rdx,2)
    000003a0: 	leal	0x1(%rcx), %edx
    000003a3: 	cmpl	%r9d, %edx
    000003a6: 	jge	.Ltmp668 # Offset: 934
    000003a8: 	movzwl	0x2(%rsi,%r10), %r11d
    000003ae: 	leal	0x6(%rax), %edx
    000003b1: 	addl	$0x2, %ecx
    000003b4: 	movslq	%edx, %rdx
    000003b7: 	movw	%r11w, (%rdi,%rdx,2)
    000003bc: 	movzwl	0x2(%r8,%r10), %r11d
    000003c2: 	movw	%r11w, 0x2(%rdi,%rdx,2)
    000003c8: 	cmpl	%ecx, %r9d
    000003cb: 	jle	.Ltmp668 # Offset: 971
    000003cd: 	movzwl	0x4(%rsi,%r10), %edx
    000003d3: 	cltq
    000003d5: 	addq	$0xa, %rax
    000003d9: 	movw	%dx, (%rdi,%rax,2)
    000003dd: 	movzwl	0x4(%r8,%r10), %edx
    000003e3: 	movw	%dx, 0x2(%rdi,%rax,2)
.Ltmp668:
    000003e8: 	popq	%rbx
    000003e9: 	popq	%rbp
    000003ea: 	popq	%r12
    000003ec: 	popq	%r13
    000003ee: 	popq	%r14
    000003f0: 	retq # Offset: 1008
    000003f1: 	nopl	(%rax) # Size: 7
.Ltmp663:
    000003f8: 	movl	%r9d, %ecx
    000003fb: 	xorl	%eax, %eax
    000003fd: 	nopl	(%rax) # Size: 3
.Ltmp670:
    00000400: 	movw	%dx, (%rdi,%rax,8)
    00000404: 	movzwl	(%r10,%rax,2), %ebx
    00000409: 	movw	%bx, 0x2(%rdi,%rax,8)
    0000040e: 	addq	$0x1, %rax
    00000412: 	cmpq	%rax, %rcx
    00000415: 	jne	.Ltmp670 # Offset: 1045
    00000417: 	leaq	(%rsi,%rbp), %rdx
    0000041b: 	leaq	0x4(%rdi), %rax
    0000041f: 	leaq	(%rdi,%r12,8), %rbx
    00000423: 	cmpq	%rdx, %rax
    00000426: 	setae	%r10b
    0000042a: 	cmpq	%rbx, %rsi
    0000042d: 	setae	%dl
    00000430: 	addq	%r8, %rbp
    00000433: 	orl	%edx, %r10d
    00000436: 	cmpq	%rbp, %rax
    00000439: 	setae	%dl
    0000043c: 	cmpq	%rbx, %r8
    0000043f: 	setae	%bl
    00000442: 	orl	%ebx, %edx
    00000444: 	testb	%dl, %r10b
    00000447: 	je	.Ltmp671 # Offset: 1095
    00000449: 	cmpl	$0x2, %r13d
    0000044d: 	jbe	.Ltmp671 # Offset: 1101
    0000044f: 	cmpl	$0x6, %r13d
    00000453: 	ja	.Ltmp672 # Offset: 1107
    00000459: 	xorl	%edx, %edx
    0000045b: 	xorl	%ecx, %ecx
    0000045d: 	jmp	.Ltmp673 # Offset: 1117
    00000462: 	nopw	(%rax,%rax) # Size: 6
.Ltmp666:
    00000468: 	movl	%r9d, %ecx
.Ltmp671:
    0000046b: 	xorl	%eax, %eax
    0000046d: 	nopl	(%rax) # Size: 3
.Ltmp674:
    00000470: 	movzwl	(%rsi,%rax,2), %edx
    00000474: 	movw	%dx, 0x4(%rdi,%rax,8)
    00000479: 	movzwl	(%r8,%rax,2), %edx
    0000047e: 	movw	%dx, 0x6(%rdi,%rax,8)
    00000483: 	addq	$0x1, %rax
    00000487: 	cmpq	%rax, %rcx
    0000048a: 	jne	.Ltmp674 # Offset: 1162
    0000048c: 	popq	%rbx
    0000048d: 	popq	%rbp
    0000048e: 	popq	%r12
    00000490: 	popq	%r13
    00000492: 	popq	%r14
    00000494: 	retq # Offset: 1172
    00000495: 	nopl	(%rax) # Size: 3
.Ltmp662:
    00000498: 	retq # Offset: 1176
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version3ItEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version4ItEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 92
  State       : disassembled
  Address     : 0x11d50
  Size        : 0x561
  MaxSize     : 0x570
  Offset      : 0x11d50
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version4ItEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r9d, -0x18(%rsp)
    00000013: 	movl	%r9d, -0x14(%rsp)
    00000018: 	testl	%r9d, %r9d
    0000001b: 	jle	.Ltmp675 # Offset: 27
    00000021: 	movl	%esi, %r12d
    00000024: 	movq	%rdx, %r13
    00000027: 	movq	%rcx, %rsi
    0000002a: 	xorl	%r15d, %r15d
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp687:
    00000030: 	addl	$0x200, %r15d
    00000037: 	cmpl	-0x18(%rsp), %r15d
    0000003c: 	jg	.Ltmp676 # Offset: 60
    00000042: 	movq	$0x1000, -0x20(%rsp)
    0000004b: 	movl	$0x400, %ebp
    00000050: 	movl	$0x200, %edx
.Ltmp688:
    00000055: 	xorl	%eax, %eax
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp677:
    00000060: 	movw	%r12w, (%rdi,%rax,8)
    00000065: 	addq	$0x1, %rax
    00000069: 	cmpq	%rax, %rdx
    0000006c: 	ja	.Ltmp677 # Offset: 108
    0000006e: 	cmpq	$0x8, %rdx
    00000072: 	leaq	(%rdx,%rdx), %r11
    00000076: 	movl	$0x2, %eax
    0000007b: 	movl	$0x4, %ecx
    00000080: 	seta	-0x21(%rsp)
    00000085: 	testq	%rdx, %rdx
    00000088: 	leaq	0x2(%rdi), %r14
    0000008c: 	movzbl	-0x21(%rsp), %ebx
    00000091: 	leaq	-0x8(,%rdx,8), %r10
    00000099: 	cmoveq	%rax, %r11
    0000009d: 	leaq	0x4(%r10), %rax
    000000a1: 	cmoveq	%rcx, %rax
    000000a5: 	addq	%rdi, %rax
    000000a8: 	cmpq	%rax, %r13
    000000ab: 	leaq	(%r13,%r11), %rax
    000000b0: 	setae	%cl
    000000b3: 	cmpq	%rax, %r14
    000000b6: 	setae	%al
    000000b9: 	orb	%cl, %al
    000000bb: 	je	.Ltmp678 # Offset: 187
    000000c1: 	testb	%bl, %bl
    000000c3: 	je	.Ltmp678 # Offset: 195
    000000c9: 	testq	%rdx, %rdx
    000000cc: 	movl	$0x1, %eax
    000000d1: 	cmovneq	%rdx, %rax
    000000d5: 	xorl	%ecx, %ecx
    000000d7: 	movq	%rax, %rbx
    000000da: 	movq	%rax, -0x10(%rsp)
    000000df: 	movq	%r14, %rax
    000000e2: 	shrq	$0x3, %rbx
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp679:
    000000f0: 	movq	%rcx, %r9
    000000f3: 	addq	$0x1, %rcx
    000000f7: 	addq	$0x40, %rax
    000000fb: 	shlq	$0x4, %r9
    000000ff: 	movdqu	(%r13,%r9), %xmm0
    00000106: 	pextrw	$0x0, %xmm0, %r9d
    0000010c: 	movw	%r9w, -0x40(%rax)
    00000111: 	pextrw	$0x1, %xmm0, %r9d
    00000117: 	movw	%r9w, -0x38(%rax)
    0000011c: 	pextrw	$0x2, %xmm0, %r9d
    00000122: 	movw	%r9w, -0x30(%rax)
    00000127: 	pextrw	$0x3, %xmm0, %r9d
    0000012d: 	movw	%r9w, -0x28(%rax)
    00000132: 	pextrw	$0x4, %xmm0, %r9d
    00000138: 	movw	%r9w, -0x20(%rax)
    0000013d: 	pextrw	$0x5, %xmm0, %r9d
    00000143: 	movw	%r9w, -0x18(%rax)
    00000148: 	pextrw	$0x6, %xmm0, %r9d
    0000014e: 	movw	%r9w, -0x10(%rax)
    00000153: 	pextrw	$0x7, %xmm0, %r9d
    00000159: 	movw	%r9w, -0x8(%rax)
    0000015e: 	cmpq	%rcx, %rbx
    00000161: 	jne	.Ltmp679 # Offset: 353
    00000163: 	movq	-0x10(%rsp), %rbx
    00000168: 	movq	%rbx, %rax
    0000016b: 	andq	$-0x8, %rax
    0000016f: 	leaq	(%r13,%rax,2), %rcx
    00000174: 	leaq	(%r14,%rax,8), %r9
    00000178: 	cmpq	%rax, %rbx
    0000017b: 	je	.Ltmp680 # Offset: 379
    0000017d: 	movzwl	(%rcx), %ebx
    00000180: 	movw	%bx, (%r9)
    00000184: 	leaq	0x1(%rax), %rbx
    00000188: 	cmpq	%rbx, %rdx
    0000018b: 	jbe	.Ltmp680 # Offset: 395
    0000018d: 	movzwl	0x2(%rcx), %ebx
    00000191: 	movw	%bx, 0x8(%r9)
    00000196: 	leaq	0x2(%rax), %rbx
    0000019a: 	cmpq	%rbx, %rdx
    0000019d: 	jbe	.Ltmp680 # Offset: 413
    0000019f: 	movzwl	0x4(%rcx), %ebx
    000001a3: 	movw	%bx, 0x10(%r9)
    000001a8: 	leaq	0x3(%rax), %rbx
    000001ac: 	cmpq	%rbx, %rdx
    000001af: 	jbe	.Ltmp680 # Offset: 431
    000001b1: 	movzwl	0x6(%rcx), %ebx
    000001b5: 	movw	%bx, 0x18(%r9)
    000001ba: 	leaq	0x4(%rax), %rbx
    000001be: 	cmpq	%rbx, %rdx
    000001c1: 	jbe	.Ltmp680 # Offset: 449
    000001c3: 	movzwl	0x8(%rcx), %ebx
    000001c7: 	movw	%bx, 0x20(%r9)
    000001cc: 	leaq	0x5(%rax), %rbx
    000001d0: 	cmpq	%rbx, %rdx
    000001d3: 	jbe	.Ltmp680 # Offset: 467
    000001d5: 	movzwl	0xa(%rcx), %ebx
    000001d9: 	addq	$0x6, %rax
    000001dd: 	movw	%bx, 0x28(%r9)
    000001e2: 	cmpq	%rax, %rdx
    000001e5: 	jbe	.Ltmp680 # Offset: 485
    000001e7: 	movzwl	0xc(%rcx), %eax
    000001eb: 	movw	%ax, 0x30(%r9)
.Ltmp680:
    000001f0: 	addq	$0x6, %r10
    000001f4: 	movl	$0x6, %eax
    000001f9: 	leaq	0x4(%rdi), %rbx
    000001fd: 	testq	%rdx, %rdx
    00000200: 	cmoveq	%rax, %r10
    00000204: 	leaq	(%rsi,%r11), %rax
    00000208: 	addq	%rdi, %r10
    0000020b: 	cmpq	%r10, %rsi
    0000020e: 	setae	%cl
    00000211: 	cmpq	%rax, %rbx
    00000214: 	setae	%al
    00000217: 	orb	%cl, %al
    00000219: 	je	.Ltmp681 # Offset: 537
    0000021f: 	cmpb	$0x0, -0x21(%rsp)
    00000224: 	je	.Ltmp681 # Offset: 548
    0000022a: 	testq	%rdx, %rdx
    0000022d: 	movl	$0x1, %r14d
    00000233: 	movq	%rbx, %rax
    00000236: 	cmovneq	%rdx, %r14
    0000023a: 	xorl	%ecx, %ecx
    0000023c: 	movq	%r14, %r10
    0000023f: 	shrq	$0x3, %r10
    00000243: 	nopl	(%rax,%rax) # Size: 5
.Ltmp682:
    00000248: 	movq	%rcx, %r9
    0000024b: 	addq	$0x1, %rcx
    0000024f: 	addq	$0x40, %rax
    00000253: 	shlq	$0x4, %r9
    00000257: 	movdqu	(%rsi,%r9), %xmm0
    0000025d: 	pextrw	$0x0, %xmm0, %r9d
    00000263: 	movw	%r9w, -0x40(%rax)
    00000268: 	pextrw	$0x1, %xmm0, %r9d
    0000026e: 	movw	%r9w, -0x38(%rax)
    00000273: 	pextrw	$0x2, %xmm0, %r9d
    00000279: 	movw	%r9w, -0x30(%rax)
    0000027e: 	pextrw	$0x3, %xmm0, %r9d
    00000284: 	movw	%r9w, -0x28(%rax)
    00000289: 	pextrw	$0x4, %xmm0, %r9d
    0000028f: 	movw	%r9w, -0x20(%rax)
    00000294: 	pextrw	$0x5, %xmm0, %r9d
    0000029a: 	movw	%r9w, -0x18(%rax)
    0000029f: 	pextrw	$0x6, %xmm0, %r9d
    000002a5: 	movw	%r9w, -0x10(%rax)
    000002aa: 	pextrw	$0x7, %xmm0, %r9d
    000002b0: 	movw	%r9w, -0x8(%rax)
    000002b5: 	cmpq	%rcx, %r10
    000002b8: 	jne	.Ltmp682 # Offset: 696
    000002ba: 	movq	%r14, %rax
    000002bd: 	andq	$-0x8, %rax
    000002c1: 	leaq	(%rsi,%rax,2), %rcx
    000002c5: 	leaq	(%rbx,%rax,8), %r9
    000002c9: 	cmpq	%rax, %r14
    000002cc: 	je	.Ltmp683 # Offset: 716
    000002ce: 	movzwl	(%rcx), %r10d
    000002d2: 	movw	%r10w, (%r9)
    000002d6: 	leaq	0x1(%rax), %r10
    000002da: 	cmpq	%r10, %rdx
    000002dd: 	jbe	.Ltmp683 # Offset: 733
    000002df: 	movzwl	0x2(%rcx), %r10d
    000002e4: 	movw	%r10w, 0x8(%r9)
    000002e9: 	leaq	0x2(%rax), %r10
    000002ed: 	cmpq	%r10, %rdx
    000002f0: 	jbe	.Ltmp683 # Offset: 752
    000002f2: 	movzwl	0x4(%rcx), %r10d
    000002f7: 	movw	%r10w, 0x10(%r9)
    000002fc: 	leaq	0x3(%rax), %r10
    00000300: 	cmpq	%r10, %rdx
    00000303: 	jbe	.Ltmp683 # Offset: 771
    00000305: 	movzwl	0x6(%rcx), %r10d
    0000030a: 	movw	%r10w, 0x18(%r9)
    0000030f: 	leaq	0x4(%rax), %r10
    00000313: 	cmpq	%r10, %rdx
    00000316: 	jbe	.Ltmp683 # Offset: 790
    00000318: 	movzwl	0x8(%rcx), %r10d
    0000031d: 	movw	%r10w, 0x20(%r9)
    00000322: 	leaq	0x5(%rax), %r10
    00000326: 	cmpq	%r10, %rdx
    00000329: 	jbe	.Ltmp683 # Offset: 809
    0000032b: 	movzwl	0xa(%rcx), %r10d
    00000330: 	addq	$0x6, %rax
    00000334: 	movw	%r10w, 0x28(%r9)
    00000339: 	cmpq	%rax, %rdx
    0000033c: 	jbe	.Ltmp683 # Offset: 828
    0000033e: 	movzwl	0xc(%rcx), %eax
    00000342: 	movw	%ax, 0x30(%r9)
.Ltmp683:
    00000347: 	testq	%rdx, %rdx
    0000034a: 	leaq	(,%rdx,8), %rax
    00000352: 	movl	$0x8, %ebx
    00000357: 	cmoveq	%rbx, %rax
    0000035b: 	leaq	0x6(%rdi), %r10
    0000035f: 	addq	%rdi, %rax
    00000362: 	cmpq	%rax, %r8
    00000365: 	setae	%al
    00000368: 	addq	%r8, %r11
    0000036b: 	cmpq	%r11, %r10
    0000036e: 	setae	%cl
    00000371: 	orb	%al, %cl
    00000373: 	je	.Ltmp684 # Offset: 883
    00000379: 	cmpb	$0x0, -0x21(%rsp)
    0000037e: 	je	.Ltmp684 # Offset: 894
    00000384: 	testq	%rdx, %rdx
    00000387: 	movl	$0x1, %ebx
    0000038c: 	movq	%r10, %rax
    0000038f: 	cmovneq	%rdx, %rbx
    00000393: 	xorl	%ecx, %ecx
    00000395: 	movq	%rbx, %r11
    00000398: 	shrq	$0x3, %r11
    0000039c: 	nopl	(%rax) # Size: 4
.Ltmp685:
    000003a0: 	movq	%rcx, %r9
    000003a3: 	addq	$0x1, %rcx
    000003a7: 	addq	$0x40, %rax
    000003ab: 	shlq	$0x4, %r9
    000003af: 	movdqu	(%r8,%r9), %xmm0
    000003b5: 	pextrw	$0x0, %xmm0, %r9d
    000003bb: 	movw	%r9w, -0x40(%rax)
    000003c0: 	pextrw	$0x1, %xmm0, %r9d
    000003c6: 	movw	%r9w, -0x38(%rax)
    000003cb: 	pextrw	$0x2, %xmm0, %r9d
    000003d1: 	movw	%r9w, -0x30(%rax)
    000003d6: 	pextrw	$0x3, %xmm0, %r9d
    000003dc: 	movw	%r9w, -0x28(%rax)
    000003e1: 	pextrw	$0x4, %xmm0, %r9d
    000003e7: 	movw	%r9w, -0x20(%rax)
    000003ec: 	pextrw	$0x5, %xmm0, %r9d
    000003f2: 	movw	%r9w, -0x18(%rax)
    000003f7: 	pextrw	$0x6, %xmm0, %r9d
    000003fd: 	movw	%r9w, -0x10(%rax)
    00000402: 	pextrw	$0x7, %xmm0, %r9d
    00000408: 	movw	%r9w, -0x8(%rax)
    0000040d: 	cmpq	%rcx, %r11
    00000410: 	jne	.Ltmp685 # Offset: 1040
    00000412: 	movq	%rbx, %rax
    00000415: 	andq	$-0x8, %rax
    00000419: 	leaq	(%r8,%rax,2), %rcx
    0000041d: 	leaq	(%r10,%rax,8), %r9
    00000421: 	cmpq	%rax, %rbx
    00000424: 	je	.Ltmp686 # Offset: 1060
    00000426: 	movzwl	(%rcx), %r10d
    0000042a: 	movw	%r10w, (%r9)
    0000042e: 	leaq	0x1(%rax), %r10
    00000432: 	cmpq	%r10, %rdx
    00000435: 	jbe	.Ltmp686 # Offset: 1077
    00000437: 	movzwl	0x2(%rcx), %r10d
    0000043c: 	movw	%r10w, 0x8(%r9)
    00000441: 	leaq	0x2(%rax), %r10
    00000445: 	cmpq	%r10, %rdx
    00000448: 	jbe	.Ltmp686 # Offset: 1096
    0000044a: 	movzwl	0x4(%rcx), %r10d
    0000044f: 	movw	%r10w, 0x10(%r9)
    00000454: 	leaq	0x3(%rax), %r10
    00000458: 	cmpq	%r10, %rdx
    0000045b: 	jbe	.Ltmp686 # Offset: 1115
    0000045d: 	movzwl	0x6(%rcx), %r10d
    00000462: 	movw	%r10w, 0x18(%r9)
    00000467: 	leaq	0x4(%rax), %r10
    0000046b: 	cmpq	%r10, %rdx
    0000046e: 	jbe	.Ltmp686 # Offset: 1134
    00000470: 	movzwl	0x8(%rcx), %r10d
    00000475: 	movw	%r10w, 0x20(%r9)
    0000047a: 	leaq	0x5(%rax), %r10
    0000047e: 	cmpq	%r10, %rdx
    00000481: 	jbe	.Ltmp686 # Offset: 1153
    00000483: 	movzwl	0xa(%rcx), %r10d
    00000488: 	addq	$0x6, %rax
    0000048c: 	movw	%r10w, 0x28(%r9)
    00000491: 	cmpq	%rax, %rdx
    00000494: 	jbe	.Ltmp686 # Offset: 1172
    00000496: 	movzwl	0xc(%rcx), %eax
    0000049a: 	movw	%ax, 0x30(%r9)
.Ltmp686:
    0000049f: 	addq	-0x20(%rsp), %rdi
    000004a4: 	addq	%rbp, %r13
    000004a7: 	addq	%rbp, %rsi
    000004aa: 	addq	%rbp, %r8
    000004ad: 	subl	$0x200, -0x14(%rsp)
    000004b5: 	cmpl	-0x18(%rsp), %r15d
    000004ba: 	jl	.Ltmp687 # Offset: 1210
.Ltmp675:
    000004c0: 	popq	%rbx
    000004c1: 	popq	%rbp
    000004c2: 	popq	%r12
    000004c4: 	popq	%r13
    000004c6: 	popq	%r14
    000004c8: 	popq	%r15
    000004ca: 	retq # Offset: 1226
    000004cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp676:
    000004d0: 	movslq	-0x14(%rsp), %rdx
    000004d5: 	movq	%rdx, %rax
    000004d8: 	leaq	(%rdx,%rdx), %rbp
    000004dc: 	shll	$0x2, %eax
    000004df: 	cltq
    000004e1: 	addq	%rax, %rax
    000004e4: 	movq	%rax, -0x20(%rsp)
    000004e9: 	testq	%rdx, %rdx
    000004ec: 	jne	.Ltmp688 # Offset: 1260
    000004f2: 	jmp	.Ltmp686 # Offset: 1266
    000004f4: 	nopl	(%rax) # Size: 4
.Ltmp684:
    000004f8: 	xorl	%eax, %eax
    000004fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp689:
    00000500: 	movzwl	(%r8,%rax,2), %ecx
    00000505: 	movw	%cx, 0x6(%rdi,%rax,8)
    0000050a: 	addq	$0x1, %rax
    0000050e: 	cmpq	%rdx, %rax
    00000511: 	jb	.Ltmp689 # Offset: 1297
    00000513: 	jmp	.Ltmp686 # Offset: 1299
    00000515: 	nopl	(%rax) # Size: 3
.Ltmp681:
    00000518: 	xorl	%eax, %eax
    0000051a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp690:
    00000520: 	movzwl	(%rsi,%rax,2), %ecx
    00000524: 	movw	%cx, 0x4(%rdi,%rax,8)
    00000529: 	addq	$0x1, %rax
    0000052d: 	cmpq	%rax, %rdx
    00000530: 	ja	.Ltmp690 # Offset: 1328
    00000532: 	jmp	.Ltmp683 # Offset: 1330
    00000537: 	nopw	(%rax,%rax) # Size: 9
.Ltmp678:
    00000540: 	xorl	%eax, %eax
    00000542: 	nopw	(%rax,%rax) # Size: 6
.Ltmp691:
    00000548: 	movzwl	(%r13,%rax,2), %ecx
    0000054e: 	movw	%cx, 0x2(%rdi,%rax,8)
    00000553: 	addq	$0x1, %rax
    00000557: 	cmpq	%rax, %rdx
    0000055a: 	ja	.Ltmp691 # Offset: 1370
    0000055c: 	jmp	.Ltmp680 # Offset: 1372
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version4ItEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version5ItEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0x122c0
  Size        : 0x56e
  MaxSize     : 0x570
  Offset      : 0x122c0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version5ItEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %eax
    00000008: 	movq	%rdx, %rsi
    0000000b: 	pushq	%r14
    0000000d: 	pushq	%r13
    0000000f: 	pushq	%r12
    00000011: 	pushq	%rbp
    00000012: 	pushq	%rbx
    00000013: 	movl	%r9d, -0x10(%rsp)
    00000018: 	movl	%r9d, -0xc(%rsp)
    0000001d: 	movl	$0x0, -0x24(%rsp)
    00000025: 	testl	%r9d, %r9d
    00000028: 	jle	.Ltmp692 # Offset: 40
    0000002e: 	movq	%rcx, %r15
    00000031: 	movq	%r8, %rbp
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp702:
    00000038: 	addl	$0x200, -0x24(%rsp)
    00000040: 	movl	-0x24(%rsp), %edx
    00000044: 	cmpl	-0x10(%rsp), %edx
    00000048: 	jg	.Ltmp693 # Offset: 72
    0000004e: 	movq	$0x1000, -0x18(%rsp)
    00000057: 	movl	$0x400, %r14d
    0000005d: 	movl	$0x200, %edx
.Ltmp703:
    00000062: 	movslq	%edx, %r11
    00000065: 	testl	%edx, %edx
    00000067: 	movl	$0x4, %ebx
    0000006c: 	movl	%edx, %r10d
    0000006f: 	leaq	-0x4(,%r11,8), %rcx
    00000077: 	leaq	(%r11,%r11), %r8
    0000007b: 	cmovleq	%rbx, %rcx
    0000007f: 	addq	%rdi, %rcx
    00000082: 	cmpq	%rcx, %rsi
    00000085: 	movl	$0x2, %ecx
    0000008a: 	setae	%r9b
    0000008e: 	testl	%edx, %edx
    00000090: 	cmovgq	%r8, %rcx
    00000094: 	addq	%rsi, %rcx
    00000097: 	cmpq	%rcx, %rdi
    0000009a: 	setae	%cl
    0000009d: 	orb	%r9b, %cl
    000000a0: 	je	.Ltmp694 # Offset: 160
    000000a6: 	cmpl	$0x10, %edx
    000000a9: 	jle	.Ltmp694 # Offset: 169
    000000af: 	testl	%edx, %edx
    000000b1: 	movl	$0x1, %r12d
    000000b7: 	movq	%rsi, %r9
    000000ba: 	movq	%rdi, %rcx
    000000bd: 	cmovgl	%edx, %r12d
    000000c1: 	movl	%r12d, %ebx
    000000c4: 	shrl	$0x3, %ebx
    000000c7: 	subl	$0x1, %ebx
    000000ca: 	shlq	$0x4, %rbx
    000000ce: 	leaq	0x10(%rsi,%rbx), %r13
    000000d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp695:
    000000d8: 	movdqu	(%r9), %xmm0
    000000dd: 	addq	$0x10, %r9
    000000e1: 	movw	%ax, (%rcx)
    000000e4: 	addq	$0x40, %rcx
    000000e8: 	movw	%ax, -0x38(%rcx)
    000000ec: 	pextrw	$0x0, %xmm0, %ebx
    000000f1: 	movw	%ax, -0x30(%rcx)
    000000f5: 	movw	%bx, -0x3e(%rcx)
    000000f9: 	pextrw	$0x1, %xmm0, %ebx
    000000fe: 	movw	%bx, -0x36(%rcx)
    00000102: 	pextrw	$0x2, %xmm0, %ebx
    00000107: 	movw	%bx, -0x2e(%rcx)
    0000010b: 	pextrw	$0x3, %xmm0, %ebx
    00000110: 	movw	%bx, -0x26(%rcx)
    00000114: 	pextrw	$0x4, %xmm0, %ebx
    00000119: 	movw	%bx, -0x1e(%rcx)
    0000011d: 	pextrw	$0x5, %xmm0, %ebx
    00000122: 	movw	%bx, -0x16(%rcx)
    00000126: 	pextrw	$0x6, %xmm0, %ebx
    0000012b: 	movw	%bx, -0xe(%rcx)
    0000012f: 	pextrw	$0x7, %xmm0, %ebx
    00000134: 	movw	%ax, -0x28(%rcx)
    00000138: 	movw	%ax, -0x20(%rcx)
    0000013c: 	movw	%ax, -0x18(%rcx)
    00000140: 	movw	%ax, -0x10(%rcx)
    00000144: 	movw	%ax, -0x8(%rcx)
    00000148: 	movw	%bx, -0x6(%rcx)
    0000014c: 	cmpq	%r9, %r13
    0000014f: 	jne	.Ltmp695 # Offset: 335
    00000151: 	movl	%r12d, %ecx
    00000154: 	andl	$-0x8, %ecx
    00000157: 	andl	$0x7, %r12d
    0000015b: 	je	.Ltmp696 # Offset: 347
    00000161: 	leal	(,%rcx,4), %r9d
    00000169: 	movslq	%r9d, %r13
    0000016c: 	leaq	(%r13,%r13), %rbx
    00000171: 	movw	%ax, (%rdi,%r13,2)
    00000176: 	movq	%rbx, -0x20(%rsp)
    0000017b: 	movl	%ecx, %ebx
    0000017d: 	leaq	(%rbx,%rbx), %r12
    00000181: 	movzwl	(%rsi,%rbx,2), %ebx
    00000185: 	movw	%bx, 0x2(%rdi,%r13,2)
    0000018b: 	leal	0x1(%rcx), %r13d
    0000018f: 	cmpl	%r13d, %edx
    00000192: 	jle	.Ltmp696 # Offset: 402
    00000198: 	movq	-0x20(%rsp), %rbx
    0000019d: 	leal	0x4(%r9), %r13d
    000001a1: 	movslq	%r13d, %r13
    000001a4: 	movw	%ax, 0x8(%rdi,%rbx)
    000001a9: 	movzwl	0x2(%rsi,%r12), %ebx
    000001af: 	movw	%bx, 0x2(%rdi,%r13,2)
    000001b5: 	leal	0x2(%rcx), %r13d
    000001b9: 	cmpl	%r13d, %edx
    000001bc: 	jle	.Ltmp696 # Offset: 444
    000001c2: 	movq	-0x20(%rsp), %rbx
    000001c7: 	leal	0x8(%r9), %r13d
    000001cb: 	movslq	%r13d, %r13
    000001ce: 	movw	%ax, 0x10(%rdi,%rbx)
    000001d3: 	movzwl	0x4(%rsi,%r12), %ebx
    000001d9: 	movw	%bx, 0x2(%rdi,%r13,2)
    000001df: 	leal	0x3(%rcx), %r13d
    000001e3: 	cmpl	%r13d, %edx
    000001e6: 	jle	.Ltmp696 # Offset: 486
    000001ec: 	movq	-0x20(%rsp), %rbx
    000001f1: 	leal	0xc(%r9), %r13d
    000001f5: 	movslq	%r13d, %r13
    000001f8: 	movw	%ax, 0x18(%rdi,%rbx)
    000001fd: 	movzwl	0x6(%rsi,%r12), %ebx
    00000203: 	movw	%bx, 0x2(%rdi,%r13,2)
    00000209: 	leal	0x4(%rcx), %r13d
    0000020d: 	cmpl	%r13d, %edx
    00000210: 	jle	.Ltmp696 # Offset: 528
    00000212: 	movq	-0x20(%rsp), %rbx
    00000217: 	leal	0x10(%r9), %r13d
    0000021b: 	movslq	%r13d, %r13
    0000021e: 	movw	%ax, 0x20(%rdi,%rbx)
    00000223: 	movzwl	0x8(%rsi,%r12), %ebx
    00000229: 	movw	%bx, 0x2(%rdi,%r13,2)
    0000022f: 	leal	0x5(%rcx), %r13d
    00000233: 	cmpl	%r13d, %edx
    00000236: 	jle	.Ltmp696 # Offset: 566
    00000238: 	movq	-0x20(%rsp), %rbx
    0000023d: 	addl	$0x14, %r9d
    00000241: 	addl	$0x6, %ecx
    00000244: 	movslq	%r9d, %r9
    00000247: 	movw	%ax, 0x28(%rdi,%rbx)
    0000024c: 	movzwl	0xa(%rsi,%r12), %r13d
    00000252: 	movw	%r13w, 0x2(%rdi,%r9,2)
    00000258: 	cmpl	%ecx, %edx
    0000025a: 	jle	.Ltmp696 # Offset: 602
    0000025c: 	movq	-0x20(%rsp), %rcx
    00000261: 	movw	%ax, 0x30(%rdi,%rcx)
    00000266: 	movzwl	0xc(%rsi,%r12), %ecx
    0000026c: 	movw	%cx, 0xa(%rdi,%r9,2)
.Ltmp696:
    00000272: 	leaq	(%rbp,%r8), %r9
    00000277: 	leaq	0x4(%rdi), %rcx
    0000027b: 	leaq	(%rdi,%r11,8), %r11
    0000027f: 	cmpq	%r9, %rcx
    00000282: 	leal	-0x1(%rdx), %ebx
    00000285: 	setae	%r12b
    00000289: 	cmpq	%r11, %rbp
    0000028c: 	setae	%r9b
    00000290: 	addq	%r15, %r8
    00000293: 	orl	%r12d, %r9d
    00000296: 	cmpq	%r8, %rcx
    00000299: 	setae	%r8b
    0000029d: 	cmpq	%r11, %r15
    000002a0: 	setae	%r11b
    000002a4: 	orl	%r11d, %r8d
    000002a7: 	testb	%r8b, %r9b
    000002aa: 	je	.Ltmp697 # Offset: 682
    000002b0: 	cmpl	$0x2, %ebx
    000002b3: 	jbe	.Ltmp697 # Offset: 691
    000002b9: 	cmpl	$0x6, %ebx
    000002bc: 	jbe	.Ltmp698 # Offset: 700
    000002c2: 	movl	%edx, %r10d
    000002c5: 	xorl	%r8d, %r8d
    000002c8: 	shrl	$0x3, %r10d
    000002cc: 	shlq	$0x4, %r10
.Ltmp699:
    000002d0: 	movdqu	(%r15,%r8), %xmm1
    000002d6: 	movdqu	(%rbp,%r8), %xmm0
    000002dd: 	addq	$0x10, %r8
    000002e1: 	addq	$0x40, %rcx
    000002e5: 	pextrw	$0x0, %xmm1, %r9d
    000002eb: 	movw	%r9w, -0x40(%rcx)
    000002f0: 	pextrw	$0x1, %xmm1, %r9d
    000002f6: 	movw	%r9w, -0x38(%rcx)
    000002fb: 	pextrw	$0x2, %xmm1, %r9d
    00000301: 	movw	%r9w, -0x30(%rcx)
    00000306: 	pextrw	$0x3, %xmm1, %r9d
    0000030c: 	movw	%r9w, -0x28(%rcx)
    00000311: 	pextrw	$0x4, %xmm1, %r9d
    00000317: 	movw	%r9w, -0x20(%rcx)
    0000031c: 	pextrw	$0x5, %xmm1, %r9d
    00000322: 	movw	%r9w, -0x18(%rcx)
    00000327: 	pextrw	$0x6, %xmm1, %r9d
    0000032d: 	movw	%r9w, -0x10(%rcx)
    00000332: 	pextrw	$0x7, %xmm1, %r9d
    00000338: 	movw	%r9w, -0x8(%rcx)
    0000033d: 	pextrw	$0x0, %xmm0, %r9d
    00000343: 	movw	%r9w, -0x3e(%rcx)
    00000348: 	pextrw	$0x1, %xmm0, %r9d
    0000034e: 	movw	%r9w, -0x36(%rcx)
    00000353: 	pextrw	$0x2, %xmm0, %r9d
    00000359: 	movw	%r9w, -0x2e(%rcx)
    0000035e: 	pextrw	$0x3, %xmm0, %r9d
    00000364: 	movw	%r9w, -0x26(%rcx)
    00000369: 	pextrw	$0x4, %xmm0, %r9d
    0000036f: 	movw	%r9w, -0x1e(%rcx)
    00000374: 	pextrw	$0x5, %xmm0, %r9d
    0000037a: 	movw	%r9w, -0x16(%rcx)
    0000037f: 	pextrw	$0x6, %xmm0, %r9d
    00000385: 	movw	%r9w, -0xe(%rcx)
    0000038a: 	pextrw	$0x7, %xmm0, %r9d
    00000390: 	movw	%r9w, -0x6(%rcx)
    00000395: 	cmpq	%r8, %r10
    00000398: 	jne	.Ltmp699 # Offset: 920
    0000039e: 	movl	%edx, %r9d
    000003a1: 	andl	$-0x8, %r9d
    000003a5: 	movl	%r9d, %ecx
    000003a8: 	cmpl	%edx, %r9d
    000003ab: 	je	.Ltmp700 # Offset: 939
    000003b1: 	movl	%edx, %r10d
    000003b4: 	subl	%r9d, %r10d
    000003b7: 	leal	-0x1(%r10), %r8d
    000003bb: 	cmpl	$0x2, %r8d
    000003bf: 	jbe	.Ltmp701 # Offset: 959
.Ltmp706:
    000003c1: 	movq	(%r15,%r9,2), %xmm1
    000003c7: 	movq	(%rbp,%r9,2), %xmm0
    000003ce: 	leaq	0x4(%rdi,%r9,8), %r8
    000003d3: 	pextrw	$0x0, %xmm1, %r9d
    000003d9: 	movw	%r9w, (%r8)
    000003dd: 	pextrw	$0x1, %xmm1, %r9d
    000003e3: 	movw	%r9w, 0x8(%r8)
    000003e8: 	pextrw	$0x2, %xmm1, %r9d
    000003ee: 	movw	%r9w, 0x10(%r8)
    000003f3: 	pextrw	$0x3, %xmm1, %r9d
    000003f9: 	movw	%r9w, 0x18(%r8)
    000003fe: 	pextrw	$0x0, %xmm0, %r9d
    00000404: 	movw	%r9w, 0x2(%r8)
    00000409: 	pextrw	$0x1, %xmm0, %r9d
    0000040f: 	movw	%r9w, 0xa(%r8)
    00000414: 	pextrw	$0x2, %xmm0, %r9d
    0000041a: 	movw	%r9w, 0x12(%r8)
    0000041f: 	pextrw	$0x3, %xmm0, %r9d
    00000425: 	movw	%r9w, 0x1a(%r8)
    0000042a: 	movl	%r10d, %r8d
    0000042d: 	andl	$-0x4, %r8d
    00000431: 	addl	%r8d, %ecx
    00000434: 	cmpl	%r10d, %r8d
    00000437: 	je	.Ltmp700 # Offset: 1079
.Ltmp701:
    00000439: 	movslq	%ecx, %r11
    0000043c: 	leal	(,%rcx,4), %r8d
    00000444: 	movzwl	(%r15,%r11,2), %ebx
    00000449: 	leal	0x2(%r8), %r9d
    0000044d: 	leaq	(%r11,%r11), %r10
    00000451: 	movslq	%r9d, %r9
    00000454: 	movw	%bx, (%rdi,%r9,2)
    00000459: 	movzwl	(%rbp,%r11,2), %r11d
    0000045f: 	movw	%r11w, 0x2(%rdi,%r9,2)
    00000465: 	leal	0x1(%rcx), %r9d
    00000469: 	cmpl	%edx, %r9d
    0000046c: 	jge	.Ltmp700 # Offset: 1132
    0000046e: 	movzwl	0x2(%r15,%r10), %r11d
    00000474: 	leal	0x6(%r8), %r9d
    00000478: 	addl	$0x2, %ecx
    0000047b: 	movslq	%r9d, %r9
    0000047e: 	movw	%r11w, (%rdi,%r9,2)
    00000483: 	movzwl	0x2(%rbp,%r10), %r11d
    00000489: 	movw	%r11w, 0x2(%rdi,%r9,2)
    0000048f: 	cmpl	%ecx, %edx
    00000491: 	jle	.Ltmp700 # Offset: 1169
    00000493: 	movzwl	0x4(%r15,%r10), %edx
    00000499: 	movslq	%r8d, %r8
    0000049c: 	addq	$0xa, %r8
    000004a0: 	movw	%dx, (%rdi,%r8,2)
    000004a5: 	movzwl	0x4(%rbp,%r10), %edx
    000004ab: 	movw	%dx, 0x2(%rdi,%r8,2)
.Ltmp700:
    000004b1: 	movl	-0x10(%rsp), %ebx
    000004b5: 	addq	-0x18(%rsp), %rdi
    000004ba: 	addq	%r14, %rsi
    000004bd: 	addq	%r14, %r15
    000004c0: 	subl	$0x200, -0xc(%rsp)
    000004c8: 	addq	%r14, %rbp
    000004cb: 	cmpl	%ebx, -0x24(%rsp)
    000004cf: 	jl	.Ltmp702 # Offset: 1231
.Ltmp692:
    000004d5: 	popq	%rbx
    000004d6: 	popq	%rbp
    000004d7: 	popq	%r12
    000004d9: 	popq	%r13
    000004db: 	popq	%r14
    000004dd: 	popq	%r15
    000004df: 	retq # Offset: 1247
.Ltmp693:
    000004e0: 	movl	-0xc(%rsp), %ebx
    000004e4: 	leal	(,%rbx,4), %ecx
    000004eb: 	movl	%ebx, %edx
    000004ed: 	movslq	%ecx, %rcx
    000004f0: 	addq	%rcx, %rcx
    000004f3: 	movq	%rcx, -0x18(%rsp)
    000004f8: 	movslq	%ebx, %rcx
    000004fb: 	leaq	(%rcx,%rcx), %r14
    000004ff: 	testl	%ebx, %ebx
    00000501: 	jg	.Ltmp703 # Offset: 1281
    00000507: 	jmp	.Ltmp700 # Offset: 1287
    00000509: 	nopl	(%rax) # Size: 7
.Ltmp697:
    00000510: 	movl	%edx, %edx
    00000512: 	xorl	%ecx, %ecx
    00000514: 	nopl	(%rax) # Size: 4
.Ltmp704:
    00000518: 	movzwl	(%r15,%rcx,2), %r8d
    0000051d: 	movw	%r8w, 0x4(%rdi,%rcx,8)
    00000523: 	movzwl	(%rbp,%rcx,2), %r8d
    00000529: 	movw	%r8w, 0x6(%rdi,%rcx,8)
    0000052f: 	addq	$0x1, %rcx
    00000533: 	cmpq	%rcx, %rdx
    00000536: 	jne	.Ltmp704 # Offset: 1334
    00000538: 	jmp	.Ltmp700 # Offset: 1336
    0000053d: 	nopl	(%rax) # Size: 3
.Ltmp694:
    00000540: 	xorl	%ecx, %ecx
    00000542: 	nopw	(%rax,%rax) # Size: 6
.Ltmp705:
    00000548: 	movw	%ax, (%rdi,%rcx,8)
    0000054c: 	movzwl	(%rsi,%rcx,2), %r9d
    00000551: 	movw	%r9w, 0x2(%rdi,%rcx,8)
    00000557: 	addq	$0x1, %rcx
    0000055b: 	cmpl	%ecx, %edx
    0000055d: 	jg	.Ltmp705 # Offset: 1373
    0000055f: 	jmp	.Ltmp696 # Offset: 1375
.Ltmp698:
    00000564: 	xorl	%r9d, %r9d
    00000567: 	xorl	%ecx, %ecx
    00000569: 	jmp	.Ltmp706 # Offset: 1385
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version5ItEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version6ItEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 94
  State       : disassembled
  Address     : 0x12830
  Size        : 0x60e
  MaxSize     : 0x610
  Offset      : 0x12830
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version6ItEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%esi, %r10d
    00000009: 	movq	%rdx, %rsi
    0000000c: 	pushq	%r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%r9d, -0x10(%rsp)
    00000019: 	movl	%r9d, -0xc(%rsp)
    0000001e: 	testl	%r9d, %r9d
    00000021: 	jle	.Ltmp707 # Offset: 33
    00000027: 	movq	%rdi, %rax
    0000002a: 	movq	%r8, %r15
    0000002d: 	movl	%r10d, %ebx
    00000030: 	xorl	%r14d, %r14d
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp719:
    00000038: 	addl	$0x200, %r14d
    0000003f: 	cmpl	-0x10(%rsp), %r14d
    00000044: 	jg	.Ltmp708 # Offset: 68
    0000004a: 	movq	$0x1000, -0x18(%rsp)
    00000053: 	movl	$0x400, %r10d
    00000059: 	movl	$0x200, %edx
.Ltmp721:
    0000005e: 	xorl	%edi, %edi
.Ltmp709:
    00000060: 	movw	%bx, (%rax,%rdi,8)
    00000064: 	addq	$0x1, %rdi
    00000068: 	cmpl	%edi, %edx
    0000006a: 	jg	.Ltmp709 # Offset: 106
    0000006c: 	movslq	%edx, %r11
    0000006f: 	leal	-0x1(%rdx), %edi
    00000072: 	leaq	-0x8(,%r11,8), %r12
    0000007a: 	cmpl	$0x7, %edi
    0000007d: 	leaq	(%r11,%r11), %r8
    00000081: 	leaq	0x4(%rax,%r12), %r9
    00000086: 	seta	-0x21(%rsp)
    0000008b: 	leaq	0x2(%rax), %rdi
    0000008f: 	movzbl	-0x21(%rsp), %r13d
    00000095: 	cmpq	%r9, %rsi
    00000098: 	leaq	(%rsi,%r8), %r9
    0000009c: 	setae	%bpl
    000000a0: 	cmpq	%r9, %rdi
    000000a3: 	setae	%r9b
    000000a7: 	orb	%bpl, %r9b
    000000aa: 	je	.Ltmp710 # Offset: 170
    000000b0: 	testb	%r13b, %r13b
    000000b3: 	je	.Ltmp710 # Offset: 179
    000000b9: 	movl	%edx, %ebp
    000000bb: 	movq	%rsi, %r9
    000000be: 	shrl	$0x3, %ebp
    000000c1: 	subl	$0x1, %ebp
    000000c4: 	shlq	$0x4, %rbp
    000000c8: 	leaq	0x10(%rsi,%rbp), %r13
    000000cd: 	nopl	(%rax) # Size: 3
.Ltmp711:
    000000d0: 	movdqu	(%r9), %xmm0
    000000d5: 	addq	$0x10, %r9
    000000d9: 	addq	$0x40, %rdi
    000000dd: 	pextrw	$0x0, %xmm0, %ebp
    000000e2: 	movw	%bp, -0x40(%rdi)
    000000e6: 	pextrw	$0x1, %xmm0, %ebp
    000000eb: 	movw	%bp, -0x38(%rdi)
    000000ef: 	pextrw	$0x2, %xmm0, %ebp
    000000f4: 	movw	%bp, -0x30(%rdi)
    000000f8: 	pextrw	$0x3, %xmm0, %ebp
    000000fd: 	movw	%bp, -0x28(%rdi)
    00000101: 	pextrw	$0x4, %xmm0, %ebp
    00000106: 	movw	%bp, -0x20(%rdi)
    0000010a: 	pextrw	$0x5, %xmm0, %ebp
    0000010f: 	movw	%bp, -0x18(%rdi)
    00000113: 	pextrw	$0x6, %xmm0, %ebp
    00000118: 	movw	%bp, -0x10(%rdi)
    0000011c: 	pextrw	$0x7, %xmm0, %ebp
    00000121: 	movw	%bp, -0x8(%rdi)
    00000125: 	cmpq	%r13, %r9
    00000128: 	jne	.Ltmp711 # Offset: 296
    0000012a: 	movl	%edx, %edi
    0000012c: 	andl	$-0x8, %edi
    0000012f: 	testb	$0x7, %dl
    00000132: 	je	.Ltmp712 # Offset: 306
    00000138: 	movl	%edi, %r13d
    0000013b: 	leal	(,%rdi,4), %r9d
    00000143: 	leaq	(%r13,%r13), %rbp
    00000148: 	movq	%rbp, -0x20(%rsp)
    0000014d: 	movzwl	(%rsi,%r13,2), %ebp
    00000152: 	leal	0x1(%r9), %r13d
    00000156: 	movslq	%r13d, %r13
    00000159: 	movw	%bp, (%rax,%r13,2)
    0000015e: 	leal	0x1(%rdi), %r13d
    00000162: 	cmpl	%r13d, %edx
    00000165: 	jle	.Ltmp712 # Offset: 357
    0000016b: 	movq	-0x20(%rsp), %rbp
    00000170: 	leal	0x5(%r9), %r13d
    00000174: 	movslq	%r13d, %r13
    00000177: 	movzwl	0x2(%rsi,%rbp), %ebp
    0000017c: 	movw	%bp, (%rax,%r13,2)
    00000181: 	leal	0x2(%rdi), %r13d
    00000185: 	cmpl	%r13d, %edx
    00000188: 	jle	.Ltmp712 # Offset: 392
    0000018e: 	movq	-0x20(%rsp), %rbp
    00000193: 	leal	0x9(%r9), %r13d
    00000197: 	movslq	%r13d, %r13
    0000019a: 	movzwl	0x4(%rsi,%rbp), %ebp
    0000019f: 	movw	%bp, (%rax,%r13,2)
    000001a4: 	leal	0x3(%rdi), %r13d
    000001a8: 	cmpl	%r13d, %edx
    000001ab: 	jle	.Ltmp712 # Offset: 427
    000001ad: 	movq	-0x20(%rsp), %rbp
    000001b2: 	leal	0xd(%r9), %r13d
    000001b6: 	movslq	%r13d, %r13
    000001b9: 	movzwl	0x6(%rsi,%rbp), %ebp
    000001be: 	movw	%bp, (%rax,%r13,2)
    000001c3: 	leal	0x4(%rdi), %r13d
    000001c7: 	cmpl	%r13d, %edx
    000001ca: 	jle	.Ltmp712 # Offset: 458
    000001cc: 	movq	-0x20(%rsp), %rbp
    000001d1: 	leal	0x11(%r9), %r13d
    000001d5: 	movslq	%r13d, %r13
    000001d8: 	movzwl	0x8(%rsi,%rbp), %ebp
    000001dd: 	movw	%bp, (%rax,%r13,2)
    000001e2: 	leal	0x5(%rdi), %r13d
    000001e6: 	cmpl	%r13d, %edx
    000001e9: 	jle	.Ltmp712 # Offset: 489
    000001eb: 	movq	-0x20(%rsp), %rbp
    000001f0: 	leal	0x15(%r9), %r13d
    000001f4: 	addl	$0x6, %edi
    000001f7: 	movslq	%r13d, %r13
    000001fa: 	movzwl	0xa(%rsi,%rbp), %ebp
    000001ff: 	movw	%bp, (%rax,%r13,2)
    00000204: 	cmpl	%edi, %edx
    00000206: 	jle	.Ltmp712 # Offset: 518
    00000208: 	movq	-0x20(%rsp), %rdi
    0000020d: 	addl	$0x19, %r9d
    00000211: 	movslq	%r9d, %r9
    00000214: 	movzwl	0xc(%rsi,%rdi), %edi
    00000219: 	movw	%di, (%rax,%r9,2)
.Ltmp712:
    0000021e: 	leaq	0x6(%rax,%r12), %r9
    00000223: 	leaq	0x4(%rax), %rdi
    00000227: 	cmpq	%r9, %rcx
    0000022a: 	leaq	(%rcx,%r8), %r9
    0000022e: 	setae	%bpl
    00000232: 	cmpq	%r9, %rdi
    00000235: 	setae	%r9b
    00000239: 	orb	%bpl, %r9b
    0000023c: 	je	.Ltmp713 # Offset: 572
    00000242: 	cmpb	$0x0, -0x21(%rsp)
    00000247: 	je	.Ltmp713 # Offset: 583
    0000024d: 	movl	%edx, %ebp
    0000024f: 	movq	%rcx, %r9
    00000252: 	shrl	$0x3, %ebp
    00000255: 	subl	$0x1, %ebp
    00000258: 	shlq	$0x4, %rbp
    0000025c: 	leaq	0x10(%rcx,%rbp), %r12
    00000261: 	nopl	(%rax) # Size: 7
.Ltmp714:
    00000268: 	movdqu	(%r9), %xmm0
    0000026d: 	addq	$0x10, %r9
    00000271: 	addq	$0x40, %rdi
    00000275: 	pextrw	$0x0, %xmm0, %ebp
    0000027a: 	movw	%bp, -0x40(%rdi)
    0000027e: 	pextrw	$0x1, %xmm0, %ebp
    00000283: 	movw	%bp, -0x38(%rdi)
    00000287: 	pextrw	$0x2, %xmm0, %ebp
    0000028c: 	movw	%bp, -0x30(%rdi)
    00000290: 	pextrw	$0x3, %xmm0, %ebp
    00000295: 	movw	%bp, -0x28(%rdi)
    00000299: 	pextrw	$0x4, %xmm0, %ebp
    0000029e: 	movw	%bp, -0x20(%rdi)
    000002a2: 	pextrw	$0x5, %xmm0, %ebp
    000002a7: 	movw	%bp, -0x18(%rdi)
    000002ab: 	pextrw	$0x6, %xmm0, %ebp
    000002b0: 	movw	%bp, -0x10(%rdi)
    000002b4: 	pextrw	$0x7, %xmm0, %ebp
    000002b9: 	movw	%bp, -0x8(%rdi)
    000002bd: 	cmpq	%r12, %r9
    000002c0: 	jne	.Ltmp714 # Offset: 704
    000002c2: 	movl	%edx, %edi
    000002c4: 	andl	$-0x8, %edi
    000002c7: 	testb	$0x7, %dl
    000002ca: 	je	.Ltmp715 # Offset: 714
    000002d0: 	movl	%edi, %r12d
    000002d3: 	leal	(,%rdi,4), %r9d
    000002db: 	movzwl	(%rcx,%r12,2), %r13d
    000002e0: 	leaq	(%r12,%r12), %rbp
    000002e4: 	leal	0x2(%r9), %r12d
    000002e8: 	movslq	%r12d, %r12
    000002eb: 	movw	%r13w, (%rax,%r12,2)
    000002f0: 	leal	0x1(%rdi), %r12d
    000002f4: 	cmpl	%r12d, %edx
    000002f7: 	jle	.Ltmp715 # Offset: 759
    000002fd: 	movzwl	0x2(%rcx,%rbp), %r13d
    00000303: 	leal	0x6(%r9), %r12d
    00000307: 	movslq	%r12d, %r12
    0000030a: 	movw	%r13w, (%rax,%r12,2)
    0000030f: 	leal	0x2(%rdi), %r12d
    00000313: 	cmpl	%r12d, %edx
    00000316: 	jle	.Ltmp715 # Offset: 790
    00000318: 	movzwl	0x4(%rcx,%rbp), %r13d
    0000031e: 	leal	0xa(%r9), %r12d
    00000322: 	movslq	%r12d, %r12
    00000325: 	movw	%r13w, (%rax,%r12,2)
    0000032a: 	leal	0x3(%rdi), %r12d
    0000032e: 	cmpl	%r12d, %edx
    00000331: 	jle	.Ltmp715 # Offset: 817
    00000333: 	movzwl	0x6(%rcx,%rbp), %r13d
    00000339: 	leal	0xe(%r9), %r12d
    0000033d: 	movslq	%r12d, %r12
    00000340: 	movw	%r13w, (%rax,%r12,2)
    00000345: 	leal	0x4(%rdi), %r12d
    00000349: 	cmpl	%r12d, %edx
    0000034c: 	jle	.Ltmp715 # Offset: 844
    0000034e: 	movzwl	0x8(%rcx,%rbp), %r13d
    00000354: 	leal	0x12(%r9), %r12d
    00000358: 	movslq	%r12d, %r12
    0000035b: 	movw	%r13w, (%rax,%r12,2)
    00000360: 	leal	0x5(%rdi), %r12d
    00000364: 	cmpl	%r12d, %edx
    00000367: 	jle	.Ltmp715 # Offset: 871
    00000369: 	movzwl	0xa(%rcx,%rbp), %r13d
    0000036f: 	leal	0x16(%r9), %r12d
    00000373: 	addl	$0x6, %edi
    00000376: 	movslq	%r12d, %r12
    00000379: 	movw	%r13w, (%rax,%r12,2)
    0000037e: 	cmpl	%edi, %edx
    00000380: 	jle	.Ltmp715 # Offset: 896
    00000382: 	movzwl	0xc(%rcx,%rbp), %edi
    00000387: 	addl	$0x1a, %r9d
    0000038b: 	movslq	%r9d, %r9
    0000038e: 	movw	%di, (%rax,%r9,2)
.Ltmp715:
    00000393: 	leaq	(%rax,%r11,8), %r9
    00000397: 	leaq	0x6(%rax), %rdi
    0000039b: 	cmpq	%r9, %r15
    0000039e: 	setae	%r9b
    000003a2: 	addq	%r15, %r8
    000003a5: 	cmpq	%r8, %rdi
    000003a8: 	setae	%r8b
    000003ac: 	orb	%r9b, %r8b
    000003af: 	je	.Ltmp716 # Offset: 943
    000003b5: 	cmpb	$0x0, -0x21(%rsp)
    000003ba: 	je	.Ltmp716 # Offset: 954
    000003c0: 	movl	%edx, %r9d
    000003c3: 	movq	%r15, %r8
    000003c6: 	shrl	$0x3, %r9d
    000003ca: 	subl	$0x1, %r9d
    000003ce: 	shlq	$0x6, %r9
    000003d2: 	leaq	0x46(%rax,%r9), %r11
    000003d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp717:
    000003e0: 	movdqu	(%r8), %xmm0
    000003e5: 	addq	$0x40, %rdi
    000003e9: 	addq	$0x10, %r8
    000003ed: 	pextrw	$0x0, %xmm0, %r9d
    000003f3: 	movw	%r9w, -0x40(%rdi)
    000003f8: 	pextrw	$0x1, %xmm0, %r9d
    000003fe: 	movw	%r9w, -0x38(%rdi)
    00000403: 	pextrw	$0x2, %xmm0, %r9d
    00000409: 	movw	%r9w, -0x30(%rdi)
    0000040e: 	pextrw	$0x3, %xmm0, %r9d
    00000414: 	movw	%r9w, -0x28(%rdi)
    00000419: 	pextrw	$0x4, %xmm0, %r9d
    0000041f: 	movw	%r9w, -0x20(%rdi)
    00000424: 	pextrw	$0x5, %xmm0, %r9d
    0000042a: 	movw	%r9w, -0x18(%rdi)
    0000042f: 	pextrw	$0x6, %xmm0, %r9d
    00000435: 	movw	%r9w, -0x10(%rdi)
    0000043a: 	pextrw	$0x7, %xmm0, %r9d
    00000440: 	movw	%r9w, -0x8(%rdi)
    00000445: 	cmpq	%rdi, %r11
    00000448: 	jne	.Ltmp717 # Offset: 1096
    0000044a: 	movl	%edx, %edi
    0000044c: 	andl	$-0x8, %edi
    0000044f: 	testb	$0x7, %dl
    00000452: 	je	.Ltmp718 # Offset: 1106
    00000458: 	movl	%edi, %r11d
    0000045b: 	leal	(,%rdi,4), %r8d
    00000463: 	movzwl	(%r15,%r11,2), %ebp
    00000468: 	leaq	(%r11,%r11), %r9
    0000046c: 	leal	0x3(%r8), %r11d
    00000470: 	movslq	%r11d, %r11
    00000473: 	movw	%bp, (%rax,%r11,2)
    00000478: 	leal	0x1(%rdi), %r11d
    0000047c: 	cmpl	%r11d, %edx
    0000047f: 	jle	.Ltmp718 # Offset: 1151
    00000485: 	movzwl	0x2(%r15,%r9), %ebp
    0000048b: 	leal	0x7(%r8), %r11d
    0000048f: 	movslq	%r11d, %r11
    00000492: 	movw	%bp, (%rax,%r11,2)
    00000497: 	leal	0x2(%rdi), %r11d
    0000049b: 	cmpl	%r11d, %edx
    0000049e: 	jle	.Ltmp718 # Offset: 1182
    000004a0: 	movzwl	0x4(%r15,%r9), %ebp
    000004a6: 	leal	0xb(%r8), %r11d
    000004aa: 	movslq	%r11d, %r11
    000004ad: 	movw	%bp, (%rax,%r11,2)
    000004b2: 	leal	0x3(%rdi), %r11d
    000004b6: 	cmpl	%edx, %r11d
    000004b9: 	jge	.Ltmp718 # Offset: 1209
    000004bb: 	movzwl	0x6(%r15,%r9), %ebp
    000004c1: 	leal	0xf(%r8), %r11d
    000004c5: 	movslq	%r11d, %r11
    000004c8: 	movw	%bp, (%rax,%r11,2)
    000004cd: 	leal	0x4(%rdi), %r11d
    000004d1: 	cmpl	%r11d, %edx
    000004d4: 	jle	.Ltmp718 # Offset: 1236
    000004d6: 	movzwl	0x8(%r15,%r9), %ebp
    000004dc: 	leal	0x13(%r8), %r11d
    000004e0: 	movslq	%r11d, %r11
    000004e3: 	movw	%bp, (%rax,%r11,2)
    000004e8: 	leal	0x5(%rdi), %r11d
    000004ec: 	cmpl	%r11d, %edx
    000004ef: 	jle	.Ltmp718 # Offset: 1263
    000004f1: 	movzwl	0xa(%r15,%r9), %ebp
    000004f7: 	leal	0x17(%r8), %r11d
    000004fb: 	addl	$0x6, %edi
    000004fe: 	movslq	%r11d, %r11
    00000501: 	movw	%bp, (%rax,%r11,2)
    00000506: 	cmpl	%edx, %edi
    00000508: 	jge	.Ltmp718 # Offset: 1288
    0000050a: 	movzwl	0xc(%r15,%r9), %edx
    00000510: 	addl	$0x1b, %r8d
    00000514: 	movslq	%r8d, %r8
    00000517: 	movw	%dx, (%rax,%r8,2)
.Ltmp718:
    0000051c: 	addq	-0x18(%rsp), %rax
    00000521: 	addq	%r10, %rsi
    00000524: 	addq	%r10, %rcx
    00000527: 	addq	%r10, %r15
    0000052a: 	subl	$0x200, -0xc(%rsp)
    00000532: 	cmpl	-0x10(%rsp), %r14d
    00000537: 	jl	.Ltmp719 # Offset: 1335
.Ltmp707:
    0000053d: 	popq	%rbx
    0000053e: 	popq	%rbp
    0000053f: 	popq	%r12
    00000541: 	popq	%r13
    00000543: 	popq	%r14
    00000545: 	popq	%r15
    00000547: 	retq # Offset: 1351
    00000548: 	nopl	(%rax,%rax) # Size: 8
.Ltmp708:
    00000550: 	movslq	-0xc(%rsp), %r10
    00000555: 	movl	%r10d, %edx
    00000558: 	testl	%r10d, %r10d
    0000055b: 	jle	.Ltmp720 # Offset: 1371
    00000561: 	leal	(,%r10,4), %edi
    00000569: 	addq	%r10, %r10
    0000056c: 	movslq	%edi, %rdi
    0000056f: 	addq	%rdi, %rdi
    00000572: 	movq	%rdi, -0x18(%rsp)
    00000577: 	jmp	.Ltmp721 # Offset: 1399
    0000057c: 	nopl	(%rax) # Size: 4
.Ltmp716:
    00000580: 	movl	%edx, %edx
    00000582: 	xorl	%edi, %edi
    00000584: 	nopl	(%rax) # Size: 4
.Ltmp722:
    00000588: 	movzwl	(%r15,%rdi,2), %r8d
    0000058d: 	movw	%r8w, 0x6(%rax,%rdi,8)
    00000593: 	addq	$0x1, %rdi
    00000597: 	cmpq	%rdx, %rdi
    0000059a: 	jne	.Ltmp722 # Offset: 1434
    0000059c: 	jmp	.Ltmp718 # Offset: 1436
    000005a1: 	nopl	(%rax) # Size: 7
.Ltmp713:
    000005a8: 	movl	%edx, %r9d
    000005ab: 	xorl	%edi, %edi
    000005ad: 	nopl	(%rax) # Size: 3
.Ltmp723:
    000005b0: 	movzwl	(%rcx,%rdi,2), %ebp
    000005b4: 	movw	%bp, 0x4(%rax,%rdi,8)
    000005b9: 	addq	$0x1, %rdi
    000005bd: 	cmpq	%rdi, %r9
    000005c0: 	jne	.Ltmp723 # Offset: 1472
    000005c2: 	jmp	.Ltmp715 # Offset: 1474
    000005c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp710:
    000005d0: 	movl	%edx, %r9d
    000005d3: 	xorl	%edi, %edi
    000005d5: 	nopl	(%rax) # Size: 3
.Ltmp724:
    000005d8: 	movzwl	(%rsi,%rdi,2), %ebp
    000005dc: 	movw	%bp, 0x2(%rax,%rdi,8)
    000005e1: 	addq	$0x1, %rdi
    000005e5: 	cmpq	%r9, %rdi
    000005e8: 	jne	.Ltmp724 # Offset: 1512
    000005ea: 	jmp	.Ltmp712 # Offset: 1514
    000005ef: 	nop # Size: 1
.Ltmp720:
    000005f0: 	movslq	%r10d, %r10
    000005f3: 	leal	(,%r10,4), %edx
    000005fb: 	addq	%r10, %r10
    000005fe: 	movslq	%edx, %rdx
    00000601: 	addq	%rdx, %rdx
    00000604: 	movq	%rdx, -0x18(%rsp)
    00000609: 	jmp	.Ltmp718 # Offset: 1545
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version6ItEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave4to4_version1ItEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 95
  State       : disassembled
  Address     : 0x12e40
  Size        : 0x2eb
  MaxSize     : 0x2f0
  Offset      : 0x12e40
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version1ItEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp725 # Offset: 7
    0000000d: 	movslq	%r9d, %rax
    00000010: 	pushq	%r15
    00000012: 	movl	%r9d, %r10d
    00000015: 	leaq	(%rax,%rax), %r11
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	pushq	%rbp
    00000020: 	leal	-0x1(%r9), %ebp
    00000024: 	pushq	%rbx
    00000025: 	leaq	(%rdi,%rax,8), %rbx
    00000029: 	leaq	(%rsi,%r11), %rax
    0000002d: 	cmpq	%rax, %rdi
    00000030: 	setae	%al
    00000033: 	cmpq	%rbx, %rsi
    00000036: 	setae	%r12b
    0000003a: 	orl	%r12d, %eax
    0000003d: 	leaq	(%rdx,%r11), %r12
    00000041: 	cmpq	%r12, %rdi
    00000044: 	setae	%r12b
    00000048: 	cmpq	%rbx, %rdx
    0000004b: 	setae	%r13b
    0000004f: 	orl	%r13d, %r12d
    00000052: 	andl	%r12d, %eax
    00000055: 	cmpl	$0x2, %ebp
    00000058: 	seta	%r12b
    0000005c: 	andl	%r12d, %eax
    0000005f: 	leaq	(%rcx,%r11), %r12
    00000063: 	cmpq	%r12, %rdi
    00000066: 	setae	%r12b
    0000006a: 	cmpq	%rbx, %rcx
    0000006d: 	setae	%r13b
    00000071: 	orl	%r13d, %r12d
    00000074: 	testb	%r12b, %al
    00000077: 	je	.Ltmp726 # Offset: 119
    0000007d: 	addq	%r8, %r11
    00000080: 	cmpq	%r11, %rdi
    00000083: 	setae	%al
    00000086: 	cmpq	%rbx, %r8
    00000089: 	setae	%r11b
    0000008d: 	orb	%r11b, %al
    00000090: 	je	.Ltmp726 # Offset: 144
    00000096: 	cmpl	$0x6, %ebp
    00000099: 	jbe	.Ltmp727 # Offset: 153
    0000009f: 	shrl	$0x3, %r10d
    000000a3: 	xorl	%eax, %eax
    000000a5: 	shlq	$0x4, %r10
    000000a9: 	nopl	(%rax) # Size: 7
.Ltmp728:
    000000b0: 	movdqu	(%rsi,%rax), %xmm0
    000000b5: 	movdqu	(%rdx,%rax), %xmm1
    000000ba: 	movdqu	(%rcx,%rax), %xmm5
    000000bf: 	movdqu	(%r8,%rax), %xmm7
    000000c5: 	movdqa	%xmm0, %xmm2
    000000c9: 	movdqa	%xmm1, %xmm3
    000000cd: 	punpcklwd	%xmm5, %xmm2
    000000d1: 	punpcklwd	%xmm7, %xmm3
    000000d5: 	punpckhwd	%xmm5, %xmm0
    000000d9: 	movdqa	%xmm2, %xmm4
    000000dd: 	punpckhwd	%xmm3, %xmm2
    000000e1: 	punpckhwd	%xmm7, %xmm1
    000000e5: 	movups	%xmm2, 0x10(%rdi,%rax,4)
    000000ea: 	movdqa	%xmm0, %xmm2
    000000ee: 	punpcklwd	%xmm3, %xmm4
    000000f2: 	punpckhwd	%xmm1, %xmm0
    000000f6: 	punpcklwd	%xmm1, %xmm2
    000000fa: 	movups	%xmm4, (%rdi,%rax,4)
    000000fe: 	movups	%xmm2, 0x20(%rdi,%rax,4)
    00000103: 	movups	%xmm0, 0x30(%rdi,%rax,4)
    00000108: 	addq	$0x10, %rax
    0000010c: 	cmpq	%rax, %r10
    0000010f: 	jne	.Ltmp728 # Offset: 271
    00000111: 	movl	%r9d, %eax
    00000114: 	andl	$-0x8, %eax
    00000117: 	movl	%eax, %r11d
    0000011a: 	cmpl	%eax, %r9d
    0000011d: 	je	.Ltmp729 # Offset: 285
    00000123: 	movl	%r9d, %r10d
    00000126: 	subl	%eax, %r10d
    00000129: 	leal	-0x1(%r10), %ebx
    0000012d: 	cmpl	$0x2, %ebx
    00000130: 	jbe	.Ltmp730 # Offset: 304
.Ltmp732:
    00000136: 	movq	(%rsi,%rax,2), %xmm0
    0000013b: 	movq	(%rcx,%rax,2), %xmm3
    00000140: 	leaq	(%rdi,%rax,8), %rbx
    00000144: 	movq	(%rdx,%rax,2), %xmm1
    00000149: 	movq	(%r8,%rax,2), %xmm4
    0000014f: 	movl	%r10d, %eax
    00000152: 	movdqa	%xmm0, %xmm2
    00000156: 	punpcklwd	%xmm3, %xmm0
    0000015a: 	andl	$-0x4, %eax
    0000015d: 	punpcklwd	%xmm3, %xmm2
    00000161: 	movdqa	%xmm1, %xmm3
    00000165: 	punpcklwd	%xmm4, %xmm1
    00000169: 	addl	%eax, %r11d
    0000016c: 	punpcklwd	%xmm4, %xmm3
    00000170: 	movdqa	%xmm2, %xmm4
    00000174: 	pshufd	$0xe, %xmm0, %xmm0
    00000179: 	punpcklwd	%xmm3, %xmm2
    0000017d: 	pshufd	$0xe, %xmm1, %xmm1
    00000182: 	punpcklwd	%xmm3, %xmm4
    00000186: 	pshufd	$0xe, %xmm2, %xmm2
    0000018b: 	movq	%xmm4, (%rbx)
    0000018f: 	movq	%xmm2, 0x8(%rbx)
    00000194: 	movdqa	%xmm0, %xmm2
    00000198: 	punpcklwd	%xmm1, %xmm0
    0000019c: 	punpcklwd	%xmm1, %xmm2
    000001a0: 	pshufd	$0xe, %xmm0, %xmm0
    000001a5: 	movq	%xmm2, 0x10(%rbx)
    000001aa: 	movq	%xmm0, 0x18(%rbx)
    000001af: 	cmpl	%eax, %r10d
    000001b2: 	je	.Ltmp729 # Offset: 434
.Ltmp730:
    000001b8: 	movslq	%r11d, %r12
    000001bb: 	leal	(,%r11,4), %eax
    000001c3: 	movzwl	(%rsi,%r12,2), %r13d
    000001c8: 	movslq	%eax, %rbx
    000001cb: 	leaq	(%r12,%r12), %r10
    000001cf: 	leaq	0x1(%rbx), %r14
    000001d3: 	leaq	(%rbx,%rbx), %rbp
    000001d7: 	movw	%r13w, (%rdi,%rbx,2)
    000001dc: 	movzwl	(%rdx,%r12,2), %r15d
    000001e1: 	leaq	(%r14,%r14), %r13
    000001e5: 	movw	%r15w, (%rdi,%r14,2)
    000001ea: 	movzwl	(%rcx,%r12,2), %r14d
    000001ef: 	movw	%r14w, 0x2(%rdi,%r13)
    000001f5: 	movzwl	(%r8,%r12,2), %r12d
    000001fa: 	movw	%r12w, 0x4(%rdi,%r13)
    00000200: 	leal	0x1(%r11), %r12d
    00000204: 	cmpl	%r12d, %r9d
    00000207: 	jle	.Ltmp729 # Offset: 519
    00000209: 	movzwl	0x2(%rsi,%r10), %r12d
    0000020f: 	addl	$0x4, %eax
    00000212: 	addl	$0x2, %r11d
    00000216: 	cltq
    00000218: 	movw	%r12w, 0x8(%rdi,%rbp)
    0000021e: 	movzwl	0x2(%rdx,%r10), %r13d
    00000224: 	addq	$0x1, %rax
    00000228: 	leaq	(%rax,%rax), %r12
    0000022c: 	movw	%r13w, (%rdi,%rax,2)
    00000231: 	movzwl	0x2(%rcx,%r10), %eax
    00000237: 	movw	%ax, 0x2(%rdi,%r12)
    0000023d: 	movzwl	0x2(%r8,%r10), %eax
    00000243: 	movw	%ax, 0x4(%rdi,%r12)
    00000249: 	cmpl	%r11d, %r9d
    0000024c: 	jle	.Ltmp729 # Offset: 588
    0000024e: 	movzwl	0x4(%rsi,%r10), %eax
    00000254: 	addq	$0x9, %rbx
    00000258: 	movw	%ax, 0x10(%rdi,%rbp)
    0000025d: 	movzwl	0x4(%rdx,%r10), %edx
    00000263: 	leaq	(%rbx,%rbx), %rax
    00000267: 	movw	%dx, (%rdi,%rbx,2)
    0000026b: 	movzwl	0x4(%rcx,%r10), %edx
    00000271: 	movw	%dx, 0x2(%rdi,%rax)
    00000276: 	movzwl	0x4(%r8,%r10), %edx
    0000027c: 	movw	%dx, 0x4(%rdi,%rax)
.Ltmp729:
    00000281: 	popq	%rbx
    00000282: 	popq	%rbp
    00000283: 	popq	%r12
    00000285: 	popq	%r13
    00000287: 	popq	%r14
    00000289: 	popq	%r15
    0000028b: 	retq # Offset: 651
    0000028c: 	nopl	(%rax) # Size: 4
.Ltmp726:
    00000290: 	movl	%r9d, %r9d
    00000293: 	xorl	%eax, %eax
    00000295: 	nopl	(%rax) # Size: 3
.Ltmp731:
    00000298: 	movzwl	(%rsi,%rax,2), %r10d
    0000029d: 	movw	%r10w, (%rdi,%rax,8)
    000002a2: 	movzwl	(%rdx,%rax,2), %r10d
    000002a7: 	movw	%r10w, 0x2(%rdi,%rax,8)
    000002ad: 	movzwl	(%rcx,%rax,2), %r10d
    000002b2: 	movw	%r10w, 0x4(%rdi,%rax,8)
    000002b8: 	movzwl	(%r8,%rax,2), %r10d
    000002bd: 	movw	%r10w, 0x6(%rdi,%rax,8)
    000002c3: 	addq	$0x1, %rax
    000002c7: 	cmpq	%rax, %r9
    000002ca: 	jne	.Ltmp731 # Offset: 714
    000002cc: 	popq	%rbx
    000002cd: 	popq	%rbp
    000002ce: 	popq	%r12
    000002d0: 	popq	%r13
    000002d2: 	popq	%r14
    000002d4: 	popq	%r15
    000002d6: 	retq # Offset: 726
    000002d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp725:
    000002e0: 	retq # Offset: 736
.Ltmp727:
    000002e1: 	xorl	%eax, %eax
    000002e3: 	xorl	%r11d, %r11d
    000002e6: 	jmp	.Ltmp732 # Offset: 742
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version1ItEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version2ItEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 96
  State       : disassembled
  Address     : 0x13130
  Size        : 0x559
  MaxSize     : 0x560
  Offset      : 0x13130
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version2ItEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB095:
    00000000: 	endbr64
    00000004: 	movslq	%r9d, %r9
    00000007: 	testq	%r9, %r9
    0000000a: 	je	.Ltmp733 # Offset: 10
    00000010: 	pushq	%r13
    00000012: 	movq	%rsi, %r10
    00000015: 	movq	%rdx, %rsi
    00000018: 	pushq	%r12
    0000001a: 	leaq	-0x1(%r9), %r12
    0000001e: 	cmpq	$0x7, %r12
    00000022: 	pushq	%rbp
    00000023: 	seta	%r11b
    00000027: 	shlq	$0x3, %r12
    0000002b: 	pushq	%rbx
    0000002c: 	leaq	(%r9,%r9), %rbx
    00000030: 	leaq	0x2(%rdi,%r12), %rax
    00000035: 	leaq	(%r10,%rbx), %rdx
    00000039: 	cmpq	%rax, %r10
    0000003c: 	setae	%al
    0000003f: 	cmpq	%rdx, %rdi
    00000042: 	setae	%dl
    00000045: 	orb	%dl, %al
    00000047: 	je	.Ltmp734 # Offset: 71
    0000004d: 	testb	%r11b, %r11b
    00000050: 	je	.Ltmp734 # Offset: 80
    00000056: 	movq	%r9, %r13
    00000059: 	movq	%rdi, %rax
    0000005c: 	xorl	%edx, %edx
    0000005e: 	shrq	$0x3, %r13
    00000062: 	nopw	(%rax,%rax) # Size: 6
.Ltmp735:
    00000068: 	movq	%rdx, %rbp
    0000006b: 	addq	$0x1, %rdx
    0000006f: 	addq	$0x40, %rax
    00000073: 	shlq	$0x4, %rbp
    00000077: 	movdqu	(%r10,%rbp), %xmm0
    0000007d: 	pextrw	$0x0, %xmm0, %ebp
    00000082: 	movw	%bp, -0x40(%rax)
    00000086: 	pextrw	$0x1, %xmm0, %ebp
    0000008b: 	movw	%bp, -0x38(%rax)
    0000008f: 	pextrw	$0x2, %xmm0, %ebp
    00000094: 	movw	%bp, -0x30(%rax)
    00000098: 	pextrw	$0x3, %xmm0, %ebp
    0000009d: 	movw	%bp, -0x28(%rax)
    000000a1: 	pextrw	$0x4, %xmm0, %ebp
    000000a6: 	movw	%bp, -0x20(%rax)
    000000aa: 	pextrw	$0x5, %xmm0, %ebp
    000000af: 	movw	%bp, -0x18(%rax)
    000000b3: 	pextrw	$0x6, %xmm0, %ebp
    000000b8: 	movw	%bp, -0x10(%rax)
    000000bc: 	pextrw	$0x7, %xmm0, %ebp
    000000c1: 	movw	%bp, -0x8(%rax)
    000000c5: 	cmpq	%rdx, %r13
    000000c8: 	jne	.Ltmp735 # Offset: 200
    000000ca: 	movq	%r9, %rax
    000000cd: 	andq	$-0x8, %rax
    000000d1: 	leaq	(%r10,%rax,2), %r10
    000000d5: 	leaq	(%rdi,%rax,8), %rdx
    000000d9: 	cmpq	%rax, %r9
    000000dc: 	je	.Ltmp736 # Offset: 220
    000000de: 	movzwl	(%r10), %ebp
    000000e2: 	movw	%bp, (%rdx)
    000000e5: 	leaq	0x1(%rax), %rbp
    000000e9: 	cmpq	%rbp, %r9
    000000ec: 	jbe	.Ltmp736 # Offset: 236
    000000ee: 	movzwl	0x2(%r10), %ebp
    000000f3: 	movw	%bp, 0x8(%rdx)
    000000f7: 	leaq	0x2(%rax), %rbp
    000000fb: 	cmpq	%rbp, %r9
    000000fe: 	jbe	.Ltmp736 # Offset: 254
    00000100: 	movzwl	0x4(%r10), %ebp
    00000105: 	movw	%bp, 0x10(%rdx)
    00000109: 	leaq	0x3(%rax), %rbp
    0000010d: 	cmpq	%rbp, %r9
    00000110: 	jbe	.Ltmp736 # Offset: 272
    00000112: 	movzwl	0x6(%r10), %ebp
    00000117: 	movw	%bp, 0x18(%rdx)
    0000011b: 	leaq	0x4(%rax), %rbp
    0000011f: 	cmpq	%rbp, %r9
    00000122: 	jbe	.Ltmp736 # Offset: 290
    00000124: 	movzwl	0x8(%r10), %ebp
    00000129: 	movw	%bp, 0x20(%rdx)
    0000012d: 	leaq	0x5(%rax), %rbp
    00000131: 	cmpq	%rbp, %r9
    00000134: 	jbe	.Ltmp736 # Offset: 308
    00000136: 	movzwl	0xa(%r10), %ebp
    0000013b: 	addq	$0x6, %rax
    0000013f: 	movw	%bp, 0x28(%rdx)
    00000143: 	cmpq	%rax, %r9
    00000146: 	jbe	.Ltmp736 # Offset: 326
    00000148: 	movzwl	0xc(%r10), %eax
    0000014d: 	movw	%ax, 0x30(%rdx)
.Ltmp736:
    00000151: 	leaq	0x4(%rdi,%r12), %rax
    00000156: 	leaq	(%rsi,%rbx), %rdx
    0000015a: 	cmpq	%rax, %rsi
    0000015d: 	leaq	0x2(%rdi), %r13
    00000161: 	setae	%al
    00000164: 	cmpq	%rdx, %r13
    00000167: 	setae	%dl
    0000016a: 	orb	%dl, %al
    0000016c: 	je	.Ltmp737 # Offset: 364
    00000172: 	movq	%r9, %rbp
    00000175: 	movq	%r13, %rax
    00000178: 	xorl	%edx, %edx
    0000017a: 	shrq	$0x3, %rbp
    0000017e: 	testb	%r11b, %r11b
    00000181: 	je	.Ltmp737 # Offset: 385
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp738:
    00000190: 	movq	%rdx, %r10
    00000193: 	addq	$0x1, %rdx
    00000197: 	addq	$0x40, %rax
    0000019b: 	shlq	$0x4, %r10
    0000019f: 	movdqu	(%rsi,%r10), %xmm0
    000001a5: 	pextrw	$0x0, %xmm0, %r10d
    000001ab: 	movw	%r10w, -0x40(%rax)
    000001b0: 	pextrw	$0x1, %xmm0, %r10d
    000001b6: 	movw	%r10w, -0x38(%rax)
    000001bb: 	pextrw	$0x2, %xmm0, %r10d
    000001c1: 	movw	%r10w, -0x30(%rax)
    000001c6: 	pextrw	$0x3, %xmm0, %r10d
    000001cc: 	movw	%r10w, -0x28(%rax)
    000001d1: 	pextrw	$0x4, %xmm0, %r10d
    000001d7: 	movw	%r10w, -0x20(%rax)
    000001dc: 	pextrw	$0x5, %xmm0, %r10d
    000001e2: 	movw	%r10w, -0x18(%rax)
    000001e7: 	pextrw	$0x6, %xmm0, %r10d
    000001ed: 	movw	%r10w, -0x10(%rax)
    000001f2: 	pextrw	$0x7, %xmm0, %r10d
    000001f8: 	movw	%r10w, -0x8(%rax)
    000001fd: 	cmpq	%rbp, %rdx
    00000200: 	jne	.Ltmp738 # Offset: 512
    00000202: 	movq	%r9, %rax
    00000205: 	andq	$-0x8, %rax
    00000209: 	leaq	(%rsi,%rax,2), %rsi
    0000020d: 	leaq	(%r13,%rax,8), %rdx
    00000212: 	cmpq	%rax, %r9
    00000215: 	je	.Ltmp739 # Offset: 533
    00000217: 	movzwl	(%rsi), %r10d
    0000021b: 	movw	%r10w, (%rdx)
    0000021f: 	leaq	0x1(%rax), %r10
    00000223: 	cmpq	%r10, %r9
    00000226: 	jbe	.Ltmp739 # Offset: 550
    00000228: 	movzwl	0x2(%rsi), %r10d
    0000022d: 	movw	%r10w, 0x8(%rdx)
    00000232: 	leaq	0x2(%rax), %r10
    00000236: 	cmpq	%r10, %r9
    00000239: 	jbe	.Ltmp739 # Offset: 569
    0000023b: 	movzwl	0x4(%rsi), %r10d
    00000240: 	movw	%r10w, 0x10(%rdx)
    00000245: 	leaq	0x3(%rax), %r10
    00000249: 	cmpq	%r10, %r9
    0000024c: 	jbe	.Ltmp739 # Offset: 588
    0000024e: 	movzwl	0x6(%rsi), %r10d
    00000253: 	movw	%r10w, 0x18(%rdx)
    00000258: 	leaq	0x4(%rax), %r10
    0000025c: 	cmpq	%r10, %r9
    0000025f: 	jbe	.Ltmp739 # Offset: 607
    00000261: 	movzwl	0x8(%rsi), %r10d
    00000266: 	movw	%r10w, 0x20(%rdx)
    0000026b: 	leaq	0x5(%rax), %r10
    0000026f: 	cmpq	%r10, %r9
    00000272: 	jbe	.Ltmp739 # Offset: 626
    00000274: 	movzwl	0xa(%rsi), %r10d
    00000279: 	addq	$0x6, %rax
    0000027d: 	movw	%r10w, 0x28(%rdx)
    00000282: 	cmpq	%rax, %r9
    00000285: 	jbe	.Ltmp739 # Offset: 645
    00000287: 	movzwl	0xc(%rsi), %eax
    0000028b: 	movw	%ax, 0x30(%rdx)
.Ltmp739:
    0000028f: 	leaq	0x6(%rdi,%r12), %rax
    00000294: 	leaq	(%rcx,%rbx), %rdx
    00000298: 	cmpq	%rax, %rcx
    0000029b: 	leaq	0x4(%rdi), %rbp
    0000029f: 	setae	%al
    000002a2: 	cmpq	%rdx, %rbp
    000002a5: 	setae	%dl
    000002a8: 	orb	%dl, %al
    000002aa: 	je	.Ltmp740 # Offset: 682
    000002b0: 	movq	%r9, %r10
    000002b3: 	movq	%rbp, %rax
    000002b6: 	xorl	%edx, %edx
    000002b8: 	shrq	$0x3, %r10
    000002bc: 	testb	%r11b, %r11b
    000002bf: 	je	.Ltmp740 # Offset: 703
    000002c5: 	nopl	(%rax) # Size: 3
.Ltmp741:
    000002c8: 	movq	%rdx, %rsi
    000002cb: 	addq	$0x1, %rdx
    000002cf: 	addq	$0x40, %rax
    000002d3: 	shlq	$0x4, %rsi
    000002d7: 	movdqu	(%rcx,%rsi), %xmm0
    000002dc: 	pextrw	$0x0, %xmm0, %esi
    000002e1: 	movw	%si, -0x40(%rax)
    000002e5: 	pextrw	$0x1, %xmm0, %esi
    000002ea: 	movw	%si, -0x38(%rax)
    000002ee: 	pextrw	$0x2, %xmm0, %esi
    000002f3: 	movw	%si, -0x30(%rax)
    000002f7: 	pextrw	$0x3, %xmm0, %esi
    000002fc: 	movw	%si, -0x28(%rax)
    00000300: 	pextrw	$0x4, %xmm0, %esi
    00000305: 	movw	%si, -0x20(%rax)
    00000309: 	pextrw	$0x5, %xmm0, %esi
    0000030e: 	movw	%si, -0x18(%rax)
    00000312: 	pextrw	$0x6, %xmm0, %esi
    00000317: 	movw	%si, -0x10(%rax)
    0000031b: 	pextrw	$0x7, %xmm0, %esi
    00000320: 	movw	%si, -0x8(%rax)
    00000324: 	cmpq	%rdx, %r10
    00000327: 	jne	.Ltmp741 # Offset: 807
    00000329: 	movq	%r9, %rax
    0000032c: 	andq	$-0x8, %rax
    00000330: 	leaq	(%rcx,%rax,2), %rcx
    00000334: 	leaq	(%rbp,%rax,8), %rdx
    00000339: 	cmpq	%rax, %r9
    0000033c: 	je	.Ltmp742 # Offset: 828
    0000033e: 	movzwl	(%rcx), %esi
    00000341: 	movw	%si, (%rdx)
    00000344: 	leaq	0x1(%rax), %rsi
    00000348: 	cmpq	%rsi, %r9
    0000034b: 	jbe	.Ltmp742 # Offset: 843
    0000034d: 	movzwl	0x2(%rcx), %esi
    00000351: 	movw	%si, 0x8(%rdx)
    00000355: 	leaq	0x2(%rax), %rsi
    00000359: 	cmpq	%rsi, %r9
    0000035c: 	jbe	.Ltmp742 # Offset: 860
    0000035e: 	movzwl	0x4(%rcx), %esi
    00000362: 	movw	%si, 0x10(%rdx)
    00000366: 	leaq	0x3(%rax), %rsi
    0000036a: 	cmpq	%rsi, %r9
    0000036d: 	jbe	.Ltmp742 # Offset: 877
    0000036f: 	movzwl	0x6(%rcx), %esi
    00000373: 	movw	%si, 0x18(%rdx)
    00000377: 	leaq	0x4(%rax), %rsi
    0000037b: 	cmpq	%rsi, %r9
    0000037e: 	jbe	.Ltmp742 # Offset: 894
    00000380: 	movzwl	0x8(%rcx), %esi
    00000384: 	movw	%si, 0x20(%rdx)
    00000388: 	leaq	0x5(%rax), %rsi
    0000038c: 	cmpq	%rsi, %r9
    0000038f: 	jbe	.Ltmp742 # Offset: 911
    00000391: 	movzwl	0xa(%rcx), %esi
    00000395: 	addq	$0x6, %rax
    00000399: 	movw	%si, 0x28(%rdx)
    0000039d: 	cmpq	%rax, %r9
    000003a0: 	jbe	.Ltmp742 # Offset: 928
    000003a2: 	movzwl	0xc(%rcx), %eax
    000003a6: 	movw	%ax, 0x30(%rdx)
.Ltmp742:
    000003aa: 	leaq	(%rdi,%r9,8), %rax
    000003ae: 	leaq	0x6(%rdi), %r10
    000003b2: 	cmpq	%rax, %r8
    000003b5: 	setae	%al
    000003b8: 	addq	%r8, %rbx
    000003bb: 	cmpq	%rbx, %r10
    000003be: 	setae	%dl
    000003c1: 	orb	%dl, %al
    000003c3: 	je	.Ltmp743 # Offset: 963
    000003c9: 	movq	%r9, %rsi
    000003cc: 	movq	%r10, %rax
    000003cf: 	xorl	%edx, %edx
    000003d1: 	shrq	$0x3, %rsi
    000003d5: 	testb	%r11b, %r11b
    000003d8: 	je	.Ltmp743 # Offset: 984
    000003de: 	nop # Size: 2
.Ltmp744:
    000003e0: 	movq	%rdx, %rcx
    000003e3: 	addq	$0x1, %rdx
    000003e7: 	addq	$0x40, %rax
    000003eb: 	shlq	$0x4, %rcx
    000003ef: 	movdqu	(%r8,%rcx), %xmm0
    000003f5: 	pextrw	$0x0, %xmm0, %ecx
    000003fa: 	movw	%cx, -0x40(%rax)
    000003fe: 	pextrw	$0x1, %xmm0, %ecx
    00000403: 	movw	%cx, -0x38(%rax)
    00000407: 	pextrw	$0x2, %xmm0, %ecx
    0000040c: 	movw	%cx, -0x30(%rax)
    00000410: 	pextrw	$0x3, %xmm0, %ecx
    00000415: 	movw	%cx, -0x28(%rax)
    00000419: 	pextrw	$0x4, %xmm0, %ecx
    0000041e: 	movw	%cx, -0x20(%rax)
    00000422: 	pextrw	$0x5, %xmm0, %ecx
    00000427: 	movw	%cx, -0x18(%rax)
    0000042b: 	pextrw	$0x6, %xmm0, %ecx
    00000430: 	movw	%cx, -0x10(%rax)
    00000434: 	pextrw	$0x7, %xmm0, %ecx
    00000439: 	movw	%cx, -0x8(%rax)
    0000043d: 	cmpq	%rdx, %rsi
    00000440: 	jne	.Ltmp744 # Offset: 1088
    00000442: 	movq	%r9, %rax
    00000445: 	andq	$-0x8, %rax
    00000449: 	leaq	(%r8,%rax,2), %rcx
    0000044d: 	leaq	(%r10,%rax,8), %rdx
    00000451: 	cmpq	%rax, %r9
    00000454: 	je	.Ltmp745 # Offset: 1108
    00000456: 	movzwl	(%rcx), %esi
    00000459: 	movw	%si, (%rdx)
    0000045c: 	leaq	0x1(%rax), %rsi
    00000460: 	cmpq	%rsi, %r9
    00000463: 	jbe	.Ltmp745 # Offset: 1123
    00000465: 	movzwl	0x2(%rcx), %esi
    00000469: 	movw	%si, 0x8(%rdx)
    0000046d: 	leaq	0x2(%rax), %rsi
    00000471: 	cmpq	%rsi, %r9
    00000474: 	jbe	.Ltmp745 # Offset: 1140
    00000476: 	movzwl	0x4(%rcx), %esi
    0000047a: 	movw	%si, 0x10(%rdx)
    0000047e: 	leaq	0x3(%rax), %rsi
    00000482: 	cmpq	%rsi, %r9
    00000485: 	jbe	.Ltmp745 # Offset: 1157
    00000487: 	movzwl	0x6(%rcx), %esi
    0000048b: 	movw	%si, 0x18(%rdx)
    0000048f: 	leaq	0x4(%rax), %rsi
    00000493: 	cmpq	%rsi, %r9
    00000496: 	jbe	.Ltmp745 # Offset: 1174
    00000498: 	movzwl	0x8(%rcx), %esi
    0000049c: 	movw	%si, 0x20(%rdx)
    000004a0: 	leaq	0x5(%rax), %rsi
    000004a4: 	cmpq	%rsi, %r9
    000004a7: 	jbe	.Ltmp745 # Offset: 1191
    000004a9: 	movzwl	0xa(%rcx), %esi
    000004ad: 	addq	$0x6, %rax
    000004b1: 	movw	%si, 0x28(%rdx)
    000004b5: 	cmpq	%rax, %r9
    000004b8: 	jbe	.Ltmp745 # Offset: 1208
    000004ba: 	movzwl	0xc(%rcx), %eax
    000004be: 	movw	%ax, 0x30(%rdx)
.Ltmp745:
    000004c2: 	popq	%rbx
    000004c3: 	popq	%rbp
    000004c4: 	popq	%r12
    000004c6: 	popq	%r13
    000004c8: 	retq # Offset: 1224
    000004c9: 	nopl	(%rax) # Size: 7
.Ltmp737:
    000004d0: 	xorl	%eax, %eax
    000004d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp746:
    000004d8: 	movzwl	(%rsi,%rax,2), %edx
    000004dc: 	movw	%dx, 0x2(%rdi,%rax,8)
    000004e1: 	addq	$0x1, %rax
    000004e5: 	cmpq	%rax, %r9
    000004e8: 	jne	.Ltmp746 # Offset: 1256
    000004ea: 	jmp	.Ltmp739 # Offset: 1258
    000004ef: 	nop # Size: 1
.Ltmp734:
    000004f0: 	xorl	%eax, %eax
    000004f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp747:
    000004f8: 	movzwl	(%r10,%rax,2), %edx
    000004fd: 	movw	%dx, (%rdi,%rax,8)
    00000501: 	addq	$0x1, %rax
    00000505: 	cmpq	%rax, %r9
    00000508: 	jne	.Ltmp747 # Offset: 1288
    0000050a: 	jmp	.Ltmp736 # Offset: 1290
    0000050f: 	nop # Size: 1
.Ltmp740:
    00000510: 	xorl	%eax, %eax
    00000512: 	nopw	(%rax,%rax) # Size: 6
.Ltmp748:
    00000518: 	movzwl	(%rcx,%rax,2), %edx
    0000051c: 	movw	%dx, 0x4(%rdi,%rax,8)
    00000521: 	addq	$0x1, %rax
    00000525: 	cmpq	%rax, %r9
    00000528: 	jne	.Ltmp748 # Offset: 1320
    0000052a: 	jmp	.Ltmp742 # Offset: 1322
    0000052f: 	nop # Size: 1
.Ltmp743:
    00000530: 	xorl	%eax, %eax
    00000532: 	nopw	(%rax,%rax) # Size: 6
.Ltmp749:
    00000538: 	movzwl	(%r8,%rax,2), %edx
    0000053d: 	movw	%dx, 0x6(%rdi,%rax,8)
    00000542: 	addq	$0x1, %rax
    00000546: 	cmpq	%rax, %r9
    00000549: 	jne	.Ltmp749 # Offset: 1353
    0000054b: 	popq	%rbx
    0000054c: 	popq	%rbp
    0000054d: 	popq	%r12
    0000054f: 	popq	%r13
    00000551: 	retq # Offset: 1361
    00000552: 	nopw	(%rax,%rax) # Size: 6
.Ltmp733:
    00000558: 	retq # Offset: 1368
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version2ItEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version3ItEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 97
  State       : disassembled
  Address     : 0x13690
  Size        : 0x520
  MaxSize     : 0x520
  Offset      : 0x13690
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version3ItEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB096:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp750 # Offset: 7
    0000000d: 	pushq	%r15
    0000000f: 	movq	%rdi, %rax
    00000012: 	leal	-0x1(%r9), %r15d
    00000016: 	movq	%rdx, %rdi
    00000019: 	pushq	%r14
    0000001b: 	movq	%rcx, %rdx
    0000001e: 	cmpl	$0x2, %r15d
    00000022: 	movl	%r9d, %r11d
    00000025: 	pushq	%r13
    00000027: 	pushq	%r12
    00000029: 	pushq	%rbp
    0000002a: 	pushq	%rbx
    0000002b: 	movslq	%r9d, %rbx
    0000002e: 	leaq	(%rbx,%rbx), %rcx
    00000032: 	leaq	-0x4(%rax,%rbx,8), %r12
    00000037: 	leaq	(%rsi,%rcx), %r10
    0000003b: 	seta	-0x15(%rsp)
    00000040: 	cmpq	%r10, %rax
    00000043: 	movzbl	-0x15(%rsp), %r14d
    00000049: 	setae	%bpl
    0000004d: 	cmpq	%r12, %rsi
    00000050: 	setae	%r10b
    00000054: 	orl	%r10d, %ebp
    00000057: 	leaq	(%rdi,%rcx), %r10
    0000005b: 	cmpq	%r10, %rax
    0000005e: 	setae	%r10b
    00000062: 	cmpq	%r12, %rdi
    00000065: 	setae	%r12b
    00000069: 	orl	%r12d, %r10d
    0000006c: 	testb	%r10b, %bpl
    0000006f: 	je	.Ltmp751 # Offset: 111
    00000075: 	testb	%r14b, %r14b
    00000078: 	je	.Ltmp751 # Offset: 120
    0000007e: 	cmpl	$0x6, %r15d
    00000082: 	jbe	.Ltmp752 # Offset: 130
    00000088: 	movl	%r9d, %r13d
    0000008b: 	movq	%rax, %r10
    0000008e: 	xorl	%ebp, %ebp
    00000090: 	shrl	$0x3, %r13d
    00000094: 	shlq	$0x4, %r13
    00000098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp753:
    000000a0: 	movdqu	(%rsi,%rbp), %xmm1
    000000a5: 	movdqu	(%rdi,%rbp), %xmm0
    000000aa: 	addq	$0x10, %rbp
    000000ae: 	addq	$0x40, %r10
    000000b2: 	pextrw	$0x0, %xmm1, %r12d
    000000b8: 	movw	%r12w, -0x40(%r10)
    000000bd: 	pextrw	$0x1, %xmm1, %r12d
    000000c3: 	movw	%r12w, -0x38(%r10)
    000000c8: 	pextrw	$0x2, %xmm1, %r12d
    000000ce: 	movw	%r12w, -0x30(%r10)
    000000d3: 	pextrw	$0x3, %xmm1, %r12d
    000000d9: 	movw	%r12w, -0x28(%r10)
    000000de: 	pextrw	$0x4, %xmm1, %r12d
    000000e4: 	movw	%r12w, -0x20(%r10)
    000000e9: 	pextrw	$0x5, %xmm1, %r12d
    000000ef: 	movw	%r12w, -0x18(%r10)
    000000f4: 	pextrw	$0x6, %xmm1, %r12d
    000000fa: 	movw	%r12w, -0x10(%r10)
    000000ff: 	pextrw	$0x7, %xmm1, %r12d
    00000105: 	movw	%r12w, -0x8(%r10)
    0000010a: 	pextrw	$0x0, %xmm0, %r12d
    00000110: 	movw	%r12w, -0x3e(%r10)
    00000115: 	pextrw	$0x1, %xmm0, %r12d
    0000011b: 	movw	%r12w, -0x36(%r10)
    00000120: 	pextrw	$0x2, %xmm0, %r12d
    00000126: 	movw	%r12w, -0x2e(%r10)
    0000012b: 	pextrw	$0x3, %xmm0, %r12d
    00000131: 	movw	%r12w, -0x26(%r10)
    00000136: 	pextrw	$0x4, %xmm0, %r12d
    0000013c: 	movw	%r12w, -0x1e(%r10)
    00000141: 	pextrw	$0x5, %xmm0, %r12d
    00000147: 	movw	%r12w, -0x16(%r10)
    0000014c: 	pextrw	$0x6, %xmm0, %r12d
    00000152: 	movw	%r12w, -0xe(%r10)
    00000157: 	pextrw	$0x7, %xmm0, %r12d
    0000015d: 	movw	%r12w, -0x6(%r10)
    00000162: 	cmpq	%r13, %rbp
    00000165: 	jne	.Ltmp753 # Offset: 357
    0000016b: 	movl	%r9d, %r12d
    0000016e: 	andl	$-0x8, %r12d
    00000172: 	movl	%r12d, %r10d
    00000175: 	cmpl	%r12d, %r9d
    00000178: 	je	.Ltmp754 # Offset: 376
    0000017e: 	movl	%r9d, %r13d
    00000181: 	subl	%r12d, %r13d
    00000184: 	leal	-0x1(%r13), %ebp
    00000188: 	cmpl	$0x2, %ebp
    0000018b: 	jbe	.Ltmp755 # Offset: 395
.Ltmp764:
    0000018d: 	movq	(%rsi,%r12,2), %xmm1
    00000193: 	movq	(%rdi,%r12,2), %xmm0
    00000199: 	leaq	(%rax,%r12,8), %rbp
    0000019d: 	pextrw	$0x0, %xmm1, %r12d
    000001a3: 	movw	%r12w, (%rbp)
    000001a8: 	pextrw	$0x1, %xmm1, %r12d
    000001ae: 	movw	%r12w, 0x8(%rbp)
    000001b3: 	pextrw	$0x2, %xmm1, %r12d
    000001b9: 	movw	%r12w, 0x10(%rbp)
    000001be: 	pextrw	$0x3, %xmm1, %r12d
    000001c4: 	movw	%r12w, 0x18(%rbp)
    000001c9: 	pextrw	$0x0, %xmm0, %r12d
    000001cf: 	movw	%r12w, 0x2(%rbp)
    000001d4: 	pextrw	$0x1, %xmm0, %r12d
    000001da: 	movw	%r12w, 0xa(%rbp)
    000001df: 	pextrw	$0x2, %xmm0, %r12d
    000001e5: 	movw	%r12w, 0x12(%rbp)
    000001ea: 	pextrw	$0x3, %xmm0, %r12d
    000001f0: 	movw	%r12w, 0x1a(%rbp)
    000001f5: 	movl	%r13d, %ebp
    000001f8: 	andl	$-0x4, %ebp
    000001fb: 	addl	%ebp, %r10d
    000001fe: 	cmpl	%r13d, %ebp
    00000201: 	je	.Ltmp754 # Offset: 513
.Ltmp755:
    00000207: 	leal	(,%r10,4), %ebp
    0000020f: 	movslq	%r10d, %r14
    00000212: 	movslq	%ebp, %r13
    00000215: 	movl	%ebp, -0x14(%rsp)
    00000219: 	leaq	(%r14,%r14), %r12
    0000021d: 	leaq	(%r13,%r13), %rbp
    00000222: 	movq	%rbp, -0x10(%rsp)
    00000227: 	movzwl	(%rsi,%r14,2), %ebp
    0000022c: 	movw	%bp, (%rax,%r13,2)
    00000231: 	movzwl	(%rdi,%r14,2), %r14d
    00000236: 	movw	%r14w, 0x2(%rax,%r13,2)
    0000023c: 	leal	0x1(%r10), %r13d
    00000240: 	cmpl	%r13d, %r9d
    00000243: 	jle	.Ltmp754 # Offset: 579
    00000245: 	movzwl	0x2(%rsi,%r12), %r13d
    0000024b: 	movl	-0x14(%rsp), %ebp
    0000024f: 	addl	$0x2, %r10d
    00000253: 	movq	-0x10(%rsp), %r14
    00000258: 	addl	$0x4, %ebp
    0000025b: 	movw	%r13w, 0x8(%rax,%r14)
    00000261: 	movzwl	0x2(%rdi,%r12), %r13d
    00000267: 	movslq	%ebp, %rbp
    0000026a: 	movw	%r13w, 0x2(%rax,%rbp,2)
    00000270: 	cmpl	%r10d, %r9d
    00000273: 	jle	.Ltmp754 # Offset: 627
    00000275: 	movzwl	0x4(%rsi,%r12), %esi
    0000027b: 	movw	%si, 0x10(%rax,%r14)
    00000281: 	movzwl	0x4(%rdi,%r12), %esi
    00000287: 	movw	%si, 0xa(%rax,%rbp,2)
.Ltmp754:
    0000028c: 	leaq	(%rdx,%rcx), %rsi
    00000290: 	leaq	0x4(%rax), %r10
    00000294: 	cmpq	%rsi, %r10
    00000297: 	leaq	(%rax,%rbx,8), %rbx
    0000029b: 	setae	%dil
    0000029f: 	cmpq	%rbx, %rdx
    000002a2: 	setae	%sil
    000002a6: 	orl	%esi, %edi
    000002a8: 	leaq	(%r8,%rcx), %rsi
    000002ac: 	cmpq	%rsi, %r10
    000002af: 	setae	%sil
    000002b3: 	cmpq	%rbx, %r8
    000002b6: 	setae	%cl
    000002b9: 	orl	%ecx, %esi
    000002bb: 	testb	%sil, %dil
    000002be: 	je	.Ltmp756 # Offset: 702
    000002c4: 	cmpb	$0x0, -0x15(%rsp)
    000002c9: 	je	.Ltmp756 # Offset: 713
    000002cf: 	cmpl	$0x6, %r15d
    000002d3: 	jbe	.Ltmp757 # Offset: 723
    000002d9: 	movq	%r10, %rcx
    000002dc: 	movl	%r9d, %r10d
    000002df: 	xorl	%esi, %esi
    000002e1: 	shrl	$0x3, %r10d
    000002e5: 	shlq	$0x4, %r10
    000002e9: 	nopl	(%rax) # Size: 7
.Ltmp758:
    000002f0: 	movdqu	(%rdx,%rsi), %xmm1
    000002f5: 	movdqu	(%r8,%rsi), %xmm0
    000002fb: 	addq	$0x10, %rsi
    000002ff: 	addq	$0x40, %rcx
    00000303: 	pextrw	$0x0, %xmm1, %edi
    00000308: 	movw	%di, -0x40(%rcx)
    0000030c: 	pextrw	$0x1, %xmm1, %edi
    00000311: 	movw	%di, -0x38(%rcx)
    00000315: 	pextrw	$0x2, %xmm1, %edi
    0000031a: 	movw	%di, -0x30(%rcx)
    0000031e: 	pextrw	$0x3, %xmm1, %edi
    00000323: 	movw	%di, -0x28(%rcx)
    00000327: 	pextrw	$0x4, %xmm1, %edi
    0000032c: 	movw	%di, -0x20(%rcx)
    00000330: 	pextrw	$0x5, %xmm1, %edi
    00000335: 	movw	%di, -0x18(%rcx)
    00000339: 	pextrw	$0x6, %xmm1, %edi
    0000033e: 	movw	%di, -0x10(%rcx)
    00000342: 	pextrw	$0x7, %xmm1, %edi
    00000347: 	movw	%di, -0x8(%rcx)
    0000034b: 	pextrw	$0x0, %xmm0, %edi
    00000350: 	movw	%di, -0x3e(%rcx)
    00000354: 	pextrw	$0x1, %xmm0, %edi
    00000359: 	movw	%di, -0x36(%rcx)
    0000035d: 	pextrw	$0x2, %xmm0, %edi
    00000362: 	movw	%di, -0x2e(%rcx)
    00000366: 	pextrw	$0x3, %xmm0, %edi
    0000036b: 	movw	%di, -0x26(%rcx)
    0000036f: 	pextrw	$0x4, %xmm0, %edi
    00000374: 	movw	%di, -0x1e(%rcx)
    00000378: 	pextrw	$0x5, %xmm0, %edi
    0000037d: 	movw	%di, -0x16(%rcx)
    00000381: 	pextrw	$0x6, %xmm0, %edi
    00000386: 	movw	%di, -0xe(%rcx)
    0000038a: 	pextrw	$0x7, %xmm0, %edi
    0000038f: 	movw	%di, -0x6(%rcx)
    00000393: 	cmpq	%r10, %rsi
    00000396: 	jne	.Ltmp758 # Offset: 918
    0000039c: 	movl	%r9d, %esi
    0000039f: 	andl	$-0x8, %esi
    000003a2: 	movl	%esi, %edi
    000003a4: 	cmpl	%r9d, %esi
    000003a7: 	je	.Ltmp759 # Offset: 935
    000003ad: 	movl	%r9d, %r11d
    000003b0: 	subl	%esi, %r11d
    000003b3: 	leal	-0x1(%r11), %ecx
    000003b7: 	cmpl	$0x2, %ecx
    000003ba: 	jbe	.Ltmp760 # Offset: 954
.Ltmp763:
    000003bc: 	movq	(%rdx,%rsi,2), %xmm1
    000003c1: 	movq	(%r8,%rsi,2), %xmm0
    000003c7: 	leaq	0x4(%rax,%rsi,8), %rcx
    000003cc: 	pextrw	$0x0, %xmm1, %esi
    000003d1: 	movw	%si, (%rcx)
    000003d4: 	pextrw	$0x1, %xmm1, %esi
    000003d9: 	movw	%si, 0x8(%rcx)
    000003dd: 	pextrw	$0x2, %xmm1, %esi
    000003e2: 	movw	%si, 0x10(%rcx)
    000003e6: 	pextrw	$0x3, %xmm1, %esi
    000003eb: 	movw	%si, 0x18(%rcx)
    000003ef: 	pextrw	$0x0, %xmm0, %esi
    000003f4: 	movw	%si, 0x2(%rcx)
    000003f8: 	pextrw	$0x1, %xmm0, %esi
    000003fd: 	movw	%si, 0xa(%rcx)
    00000401: 	pextrw	$0x2, %xmm0, %esi
    00000406: 	movw	%si, 0x12(%rcx)
    0000040a: 	pextrw	$0x3, %xmm0, %esi
    0000040f: 	movw	%si, 0x1a(%rcx)
    00000413: 	movl	%r11d, %ecx
    00000416: 	andl	$-0x4, %ecx
    00000419: 	addl	%ecx, %edi
    0000041b: 	cmpl	%r11d, %ecx
    0000041e: 	je	.Ltmp759 # Offset: 1054
.Ltmp760:
    00000420: 	movslq	%edi, %r11
    00000423: 	leal	(,%rdi,4), %ecx
    0000042a: 	movzwl	(%rdx,%r11,2), %ebx
    0000042f: 	leal	0x2(%rcx), %esi
    00000432: 	leaq	(%r11,%r11), %r10
    00000436: 	movslq	%esi, %rsi
    00000439: 	movw	%bx, (%rax,%rsi,2)
    0000043d: 	movzwl	(%r8,%r11,2), %r11d
    00000442: 	movw	%r11w, 0x2(%rax,%rsi,2)
    00000448: 	leal	0x1(%rdi), %esi
    0000044b: 	cmpl	%esi, %r9d
    0000044e: 	jle	.Ltmp759 # Offset: 1102
    00000450: 	movzwl	0x2(%rdx,%r10), %r11d
    00000456: 	leal	0x6(%rcx), %esi
    00000459: 	addl	$0x2, %edi
    0000045c: 	movslq	%esi, %rsi
    0000045f: 	movw	%r11w, (%rax,%rsi,2)
    00000464: 	movzwl	0x2(%r8,%r10), %r11d
    0000046a: 	movw	%r11w, 0x2(%rax,%rsi,2)
    00000470: 	cmpl	%r9d, %edi
    00000473: 	jge	.Ltmp759 # Offset: 1139
    00000475: 	movzwl	0x4(%rdx,%r10), %edx
    0000047b: 	movslq	%ecx, %rcx
    0000047e: 	addq	$0xa, %rcx
    00000482: 	movw	%dx, (%rax,%rcx,2)
    00000486: 	movzwl	0x4(%r8,%r10), %edx
    0000048c: 	movw	%dx, 0x2(%rax,%rcx,2)
.Ltmp759:
    00000491: 	popq	%rbx
    00000492: 	popq	%rbp
    00000493: 	popq	%r12
    00000495: 	popq	%r13
    00000497: 	popq	%r14
    00000499: 	popq	%r15
    0000049b: 	retq # Offset: 1179
    0000049c: 	nopl	(%rax) # Size: 4
.Ltmp756:
    000004a0: 	movl	%r9d, %r9d
    000004a3: 	xorl	%ecx, %ecx
    000004a5: 	nopl	(%rax) # Size: 3
.Ltmp761:
    000004a8: 	movzwl	(%rdx,%rcx,2), %esi
    000004ac: 	movw	%si, 0x4(%rax,%rcx,8)
    000004b1: 	movzwl	(%r8,%rcx,2), %esi
    000004b6: 	movw	%si, 0x6(%rax,%rcx,8)
    000004bb: 	addq	$0x1, %rcx
    000004bf: 	cmpq	%r9, %rcx
    000004c2: 	jne	.Ltmp761 # Offset: 1218
    000004c4: 	popq	%rbx
    000004c5: 	popq	%rbp
    000004c6: 	popq	%r12
    000004c8: 	popq	%r13
    000004ca: 	popq	%r14
    000004cc: 	popq	%r15
    000004ce: 	retq # Offset: 1230
    000004cf: 	nop # Size: 1
.Ltmp751:
    000004d0: 	movl	%r9d, %r12d
    000004d3: 	xorl	%r10d, %r10d
    000004d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp762:
    000004e0: 	movzwl	(%rsi,%r10,2), %ebp
    000004e5: 	movw	%bp, (%rax,%r10,8)
    000004ea: 	movzwl	(%rdi,%r10,2), %ebp
    000004ef: 	movw	%bp, 0x2(%rax,%r10,8)
    000004f5: 	addq	$0x1, %r10
    000004f9: 	cmpq	%r12, %r10
    000004fc: 	jne	.Ltmp762 # Offset: 1276
    000004fe: 	jmp	.Ltmp754 # Offset: 1278
    00000503: 	nopl	(%rax,%rax) # Size: 5
.Ltmp750:
    00000508: 	retq # Offset: 1288
.Ltmp757:
    00000509: 	xorl	%esi, %esi
    0000050b: 	xorl	%edi, %edi
    0000050d: 	jmp	.Ltmp763 # Offset: 1293
.Ltmp752:
    00000512: 	movl	%r9d, %r13d
    00000515: 	xorl	%r12d, %r12d
    00000518: 	xorl	%r10d, %r10d
    0000051b: 	jmp	.Ltmp764 # Offset: 1307
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version3ItEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version4ItEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 98
  State       : disassembled
  Address     : 0x13bb0
  Size        : 0x6b0
  MaxSize     : 0x6b0
  Offset      : 0x13bb0
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version4ItEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB097:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r9d, -0x18(%rsp)
    00000013: 	movl	%r9d, -0x14(%rsp)
    00000018: 	movl	$0x0, -0x24(%rsp)
    00000020: 	testl	%r9d, %r9d
    00000023: 	jle	.Ltmp765 # Offset: 35
    00000029: 	movq	%rsi, %r13
    0000002c: 	movq	%rdx, %r15
    0000002f: 	movq	%rcx, %rsi
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp779:
    00000038: 	addl	$0x200, -0x24(%rsp)
    00000040: 	movl	-0x24(%rsp), %eax
    00000044: 	cmpl	-0x18(%rsp), %eax
    00000048: 	jg	.Ltmp766 # Offset: 72
    0000004e: 	movq	$0x1000, -0x20(%rsp)
    00000057: 	movl	$0x400, %ebx
    0000005c: 	movl	$0x200, %edx
.Ltmp780:
    00000061: 	cmpq	$0x8, %rdx
    00000065: 	leaq	-0x8(,%rdx,8), %r9
    0000006d: 	movl	$0x2, %ecx
    00000072: 	seta	%r14b
    00000076: 	leaq	0x2(%r9), %rax
    0000007a: 	leaq	(%rdx,%rdx), %r11
    0000007e: 	testq	%rdx, %rdx
    00000081: 	cmoveq	%rcx, %rax
    00000085: 	cmoveq	%rcx, %r11
    00000089: 	addq	%rdi, %rax
    0000008c: 	cmpq	%rax, %r13
    0000008f: 	leaq	(%r13,%r11), %rax
    00000094: 	setae	%cl
    00000097: 	cmpq	%rax, %rdi
    0000009a: 	setae	%al
    0000009d: 	orb	%cl, %al
    0000009f: 	je	.Ltmp767 # Offset: 159
    000000a5: 	testb	%r14b, %r14b
    000000a8: 	je	.Ltmp767 # Offset: 168
    000000ae: 	testq	%rdx, %rdx
    000000b1: 	movl	$0x1, %r12d
    000000b7: 	movq	%rdi, %rax
    000000ba: 	cmovneq	%rdx, %r12
    000000be: 	xorl	%ecx, %ecx
    000000c0: 	movq	%r12, %rbp
    000000c3: 	shrq	$0x3, %rbp
    000000c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp768:
    000000d0: 	movq	%rcx, %r10
    000000d3: 	addq	$0x1, %rcx
    000000d7: 	addq	$0x40, %rax
    000000db: 	shlq	$0x4, %r10
    000000df: 	movdqu	(%r13,%r10), %xmm0
    000000e6: 	pextrw	$0x0, %xmm0, %r10d
    000000ec: 	movw	%r10w, -0x40(%rax)
    000000f1: 	pextrw	$0x1, %xmm0, %r10d
    000000f7: 	movw	%r10w, -0x38(%rax)
    000000fc: 	pextrw	$0x2, %xmm0, %r10d
    00000102: 	movw	%r10w, -0x30(%rax)
    00000107: 	pextrw	$0x3, %xmm0, %r10d
    0000010d: 	movw	%r10w, -0x28(%rax)
    00000112: 	pextrw	$0x4, %xmm0, %r10d
    00000118: 	movw	%r10w, -0x20(%rax)
    0000011d: 	pextrw	$0x5, %xmm0, %r10d
    00000123: 	movw	%r10w, -0x18(%rax)
    00000128: 	pextrw	$0x6, %xmm0, %r10d
    0000012e: 	movw	%r10w, -0x10(%rax)
    00000133: 	pextrw	$0x7, %xmm0, %r10d
    00000139: 	movw	%r10w, -0x8(%rax)
    0000013e: 	cmpq	%rcx, %rbp
    00000141: 	jne	.Ltmp768 # Offset: 321
    00000143: 	movq	%r12, %rax
    00000146: 	andq	$-0x8, %rax
    0000014a: 	leaq	(%r13,%rax,2), %r10
    0000014f: 	leaq	(%rdi,%rax,8), %rcx
    00000153: 	cmpq	%rax, %r12
    00000156: 	je	.Ltmp769 # Offset: 342
    00000158: 	movzwl	(%r10), %ebp
    0000015c: 	movw	%bp, (%rcx)
    0000015f: 	leaq	0x1(%rax), %rbp
    00000163: 	cmpq	%rbp, %rdx
    00000166: 	jbe	.Ltmp769 # Offset: 358
    00000168: 	movzwl	0x2(%r10), %ebp
    0000016d: 	movw	%bp, 0x8(%rcx)
    00000171: 	leaq	0x2(%rax), %rbp
    00000175: 	cmpq	%rbp, %rdx
    00000178: 	jbe	.Ltmp769 # Offset: 376
    0000017a: 	movzwl	0x4(%r10), %ebp
    0000017f: 	movw	%bp, 0x10(%rcx)
    00000183: 	leaq	0x3(%rax), %rbp
    00000187: 	cmpq	%rbp, %rdx
    0000018a: 	jbe	.Ltmp769 # Offset: 394
    0000018c: 	movzwl	0x6(%r10), %ebp
    00000191: 	movw	%bp, 0x18(%rcx)
    00000195: 	leaq	0x4(%rax), %rbp
    00000199: 	cmpq	%rbp, %rdx
    0000019c: 	jbe	.Ltmp769 # Offset: 412
    0000019e: 	movzwl	0x8(%r10), %ebp
    000001a3: 	movw	%bp, 0x20(%rcx)
    000001a7: 	leaq	0x5(%rax), %rbp
    000001ab: 	cmpq	%rbp, %rdx
    000001ae: 	jbe	.Ltmp769 # Offset: 430
    000001b0: 	movzwl	0xa(%r10), %ebp
    000001b5: 	addq	$0x6, %rax
    000001b9: 	movw	%bp, 0x28(%rcx)
    000001bd: 	cmpq	%rax, %rdx
    000001c0: 	jbe	.Ltmp769 # Offset: 448
    000001c2: 	movzwl	0xc(%r10), %eax
    000001c7: 	movw	%ax, 0x30(%rcx)
.Ltmp769:
    000001cb: 	testq	%rdx, %rdx
    000001ce: 	leaq	0x4(%r9), %rax
    000001d2: 	leaq	0x2(%rdi), %r12
    000001d6: 	movl	$0x4, %ecx
    000001db: 	cmoveq	%rcx, %rax
    000001df: 	addq	%rdi, %rax
    000001e2: 	cmpq	%rax, %r15
    000001e5: 	leaq	(%r15,%r11), %rax
    000001e9: 	setae	%cl
    000001ec: 	cmpq	%rax, %r12
    000001ef: 	setae	%al
    000001f2: 	orb	%cl, %al
    000001f4: 	je	.Ltmp770 # Offset: 500
    000001fa: 	testb	%r14b, %r14b
    000001fd: 	je	.Ltmp770 # Offset: 509
    00000203: 	testq	%rdx, %rdx
    00000206: 	movl	$0x1, %eax
    0000020b: 	cmovneq	%rdx, %rax
    0000020f: 	xorl	%ecx, %ecx
    00000211: 	movq	%rax, %rbp
    00000214: 	movq	%rax, -0x10(%rsp)
    00000219: 	movq	%r12, %rax
    0000021c: 	shrq	$0x3, %rbp
.Ltmp771:
    00000220: 	movq	%rcx, %r10
    00000223: 	addq	$0x1, %rcx
    00000227: 	addq	$0x40, %rax
    0000022b: 	shlq	$0x4, %r10
    0000022f: 	movdqu	(%r15,%r10), %xmm0
    00000235: 	pextrw	$0x0, %xmm0, %r10d
    0000023b: 	movw	%r10w, -0x40(%rax)
    00000240: 	pextrw	$0x1, %xmm0, %r10d
    00000246: 	movw	%r10w, -0x38(%rax)
    0000024b: 	pextrw	$0x2, %xmm0, %r10d
    00000251: 	movw	%r10w, -0x30(%rax)
    00000256: 	pextrw	$0x3, %xmm0, %r10d
    0000025c: 	movw	%r10w, -0x28(%rax)
    00000261: 	pextrw	$0x4, %xmm0, %r10d
    00000267: 	movw	%r10w, -0x20(%rax)
    0000026c: 	pextrw	$0x5, %xmm0, %r10d
    00000272: 	movw	%r10w, -0x18(%rax)
    00000277: 	pextrw	$0x6, %xmm0, %r10d
    0000027d: 	movw	%r10w, -0x10(%rax)
    00000282: 	pextrw	$0x7, %xmm0, %r10d
    00000288: 	movw	%r10w, -0x8(%rax)
    0000028d: 	cmpq	%rcx, %rbp
    00000290: 	jne	.Ltmp771 # Offset: 656
    00000292: 	movq	-0x10(%rsp), %rbp
    00000297: 	movq	%rbp, %rax
    0000029a: 	andq	$-0x8, %rax
    0000029e: 	leaq	(%r15,%rax,2), %rcx
    000002a2: 	leaq	(%r12,%rax,8), %r10
    000002a6: 	cmpq	%rax, %rbp
    000002a9: 	je	.Ltmp772 # Offset: 681
    000002ab: 	movzwl	(%rcx), %ebp
    000002ae: 	movw	%bp, (%r10)
    000002b2: 	leaq	0x1(%rax), %rbp
    000002b6: 	cmpq	%rbp, %rdx
    000002b9: 	jbe	.Ltmp772 # Offset: 697
    000002bb: 	movzwl	0x2(%rcx), %ebp
    000002bf: 	movw	%bp, 0x8(%r10)
    000002c4: 	leaq	0x2(%rax), %rbp
    000002c8: 	cmpq	%rbp, %rdx
    000002cb: 	jbe	.Ltmp772 # Offset: 715
    000002cd: 	movzwl	0x4(%rcx), %ebp
    000002d1: 	movw	%bp, 0x10(%r10)
    000002d6: 	leaq	0x3(%rax), %rbp
    000002da: 	cmpq	%rbp, %rdx
    000002dd: 	jbe	.Ltmp772 # Offset: 733
    000002df: 	movzwl	0x6(%rcx), %ebp
    000002e3: 	movw	%bp, 0x18(%r10)
    000002e8: 	leaq	0x4(%rax), %rbp
    000002ec: 	cmpq	%rbp, %rdx
    000002ef: 	jbe	.Ltmp772 # Offset: 751
    000002f1: 	movzwl	0x8(%rcx), %ebp
    000002f5: 	movw	%bp, 0x20(%r10)
    000002fa: 	leaq	0x5(%rax), %rbp
    000002fe: 	cmpq	%rbp, %rdx
    00000301: 	jbe	.Ltmp772 # Offset: 769
    00000303: 	movzwl	0xa(%rcx), %ebp
    00000307: 	addq	$0x6, %rax
    0000030b: 	movw	%bp, 0x28(%r10)
    00000310: 	cmpq	%rax, %rdx
    00000313: 	jbe	.Ltmp772 # Offset: 787
    00000315: 	movzwl	0xc(%rcx), %eax
    00000319: 	movw	%ax, 0x30(%r10)
.Ltmp772:
    0000031e: 	addq	$0x6, %r9
    00000322: 	movl	$0x6, %eax
    00000327: 	leaq	0x4(%rdi), %rbp
    0000032b: 	testq	%rdx, %rdx
    0000032e: 	cmoveq	%rax, %r9
    00000332: 	leaq	(%rsi,%r11), %rax
    00000336: 	addq	%rdi, %r9
    00000339: 	cmpq	%r9, %rsi
    0000033c: 	setae	%cl
    0000033f: 	cmpq	%rax, %rbp
    00000342: 	setae	%al
    00000345: 	orb	%cl, %al
    00000347: 	je	.Ltmp773 # Offset: 839
    0000034d: 	testb	%r14b, %r14b
    00000350: 	je	.Ltmp773 # Offset: 848
    00000356: 	testq	%rdx, %rdx
    00000359: 	movl	$0x1, %r12d
    0000035f: 	movq	%rbp, %rax
    00000362: 	cmovneq	%rdx, %r12
    00000366: 	xorl	%ecx, %ecx
    00000368: 	movq	%r12, %r10
    0000036b: 	shrq	$0x3, %r10
    0000036f: 	nop # Size: 1
.Ltmp774:
    00000370: 	movq	%rcx, %r9
    00000373: 	addq	$0x1, %rcx
    00000377: 	addq	$0x40, %rax
    0000037b: 	shlq	$0x4, %r9
    0000037f: 	movdqu	(%rsi,%r9), %xmm0
    00000385: 	pextrw	$0x0, %xmm0, %r9d
    0000038b: 	movw	%r9w, -0x40(%rax)
    00000390: 	pextrw	$0x1, %xmm0, %r9d
    00000396: 	movw	%r9w, -0x38(%rax)
    0000039b: 	pextrw	$0x2, %xmm0, %r9d
    000003a1: 	movw	%r9w, -0x30(%rax)
    000003a6: 	pextrw	$0x3, %xmm0, %r9d
    000003ac: 	movw	%r9w, -0x28(%rax)
    000003b1: 	pextrw	$0x4, %xmm0, %r9d
    000003b7: 	movw	%r9w, -0x20(%rax)
    000003bc: 	pextrw	$0x5, %xmm0, %r9d
    000003c2: 	movw	%r9w, -0x18(%rax)
    000003c7: 	pextrw	$0x6, %xmm0, %r9d
    000003cd: 	movw	%r9w, -0x10(%rax)
    000003d2: 	pextrw	$0x7, %xmm0, %r9d
    000003d8: 	movw	%r9w, -0x8(%rax)
    000003dd: 	cmpq	%rcx, %r10
    000003e0: 	jne	.Ltmp774 # Offset: 992
    000003e2: 	movq	%r12, %rax
    000003e5: 	andq	$-0x8, %rax
    000003e9: 	leaq	(%rsi,%rax,2), %rcx
    000003ed: 	leaq	(%rbp,%rax,8), %r9
    000003f2: 	cmpq	%rax, %r12
    000003f5: 	je	.Ltmp775 # Offset: 1013
    000003f7: 	movzwl	(%rcx), %r10d
    000003fb: 	movw	%r10w, (%r9)
    000003ff: 	leaq	0x1(%rax), %r10
    00000403: 	cmpq	%r10, %rdx
    00000406: 	jbe	.Ltmp775 # Offset: 1030
    00000408: 	movzwl	0x2(%rcx), %r10d
    0000040d: 	movw	%r10w, 0x8(%r9)
    00000412: 	leaq	0x2(%rax), %r10
    00000416: 	cmpq	%r10, %rdx
    00000419: 	jbe	.Ltmp775 # Offset: 1049
    0000041b: 	movzwl	0x4(%rcx), %r10d
    00000420: 	movw	%r10w, 0x10(%r9)
    00000425: 	leaq	0x3(%rax), %r10
    00000429: 	cmpq	%r10, %rdx
    0000042c: 	jbe	.Ltmp775 # Offset: 1068
    0000042e: 	movzwl	0x6(%rcx), %r10d
    00000433: 	movw	%r10w, 0x18(%r9)
    00000438: 	leaq	0x4(%rax), %r10
    0000043c: 	cmpq	%r10, %rdx
    0000043f: 	jbe	.Ltmp775 # Offset: 1087
    00000441: 	movzwl	0x8(%rcx), %r10d
    00000446: 	movw	%r10w, 0x20(%r9)
    0000044b: 	leaq	0x5(%rax), %r10
    0000044f: 	cmpq	%r10, %rdx
    00000452: 	jbe	.Ltmp775 # Offset: 1106
    00000454: 	movzwl	0xa(%rcx), %r10d
    00000459: 	addq	$0x6, %rax
    0000045d: 	movw	%r10w, 0x28(%r9)
    00000462: 	cmpq	%rax, %rdx
    00000465: 	jbe	.Ltmp775 # Offset: 1125
    00000467: 	movzwl	0xc(%rcx), %eax
    0000046b: 	movw	%ax, 0x30(%r9)
.Ltmp775:
    00000470: 	testq	%rdx, %rdx
    00000473: 	movl	$0x8, %ecx
    00000478: 	leaq	(,%rdx,8), %rax
    00000480: 	cmoveq	%rcx, %rax
    00000484: 	leaq	0x6(%rdi), %r10
    00000488: 	addq	%rdi, %rax
    0000048b: 	cmpq	%rax, %r8
    0000048e: 	setae	%al
    00000491: 	addq	%r8, %r11
    00000494: 	cmpq	%r11, %r10
    00000497: 	setae	%cl
    0000049a: 	orb	%al, %cl
    0000049c: 	je	.Ltmp776 # Offset: 1180
    000004a2: 	testb	%r14b, %r14b
    000004a5: 	je	.Ltmp776 # Offset: 1189
    000004ab: 	testq	%rdx, %rdx
    000004ae: 	movl	$0x1, %ebp
    000004b3: 	movq	%r10, %rax
    000004b6: 	cmovneq	%rdx, %rbp
    000004ba: 	xorl	%ecx, %ecx
    000004bc: 	movq	%rbp, %r11
    000004bf: 	shrq	$0x3, %r11
    000004c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp777:
    000004c8: 	movq	%rcx, %r9
    000004cb: 	addq	$0x1, %rcx
    000004cf: 	addq	$0x40, %rax
    000004d3: 	shlq	$0x4, %r9
    000004d7: 	movdqu	(%r8,%r9), %xmm0
    000004dd: 	pextrw	$0x0, %xmm0, %r9d
    000004e3: 	movw	%r9w, -0x40(%rax)
    000004e8: 	pextrw	$0x1, %xmm0, %r9d
    000004ee: 	movw	%r9w, -0x38(%rax)
    000004f3: 	pextrw	$0x2, %xmm0, %r9d
    000004f9: 	movw	%r9w, -0x30(%rax)
    000004fe: 	pextrw	$0x3, %xmm0, %r9d
    00000504: 	movw	%r9w, -0x28(%rax)
    00000509: 	pextrw	$0x4, %xmm0, %r9d
    0000050f: 	movw	%r9w, -0x20(%rax)
    00000514: 	pextrw	$0x5, %xmm0, %r9d
    0000051a: 	movw	%r9w, -0x18(%rax)
    0000051f: 	pextrw	$0x6, %xmm0, %r9d
    00000525: 	movw	%r9w, -0x10(%rax)
    0000052a: 	pextrw	$0x7, %xmm0, %r9d
    00000530: 	movw	%r9w, -0x8(%rax)
    00000535: 	cmpq	%rcx, %r11
    00000538: 	jne	.Ltmp777 # Offset: 1336
    0000053a: 	movq	%rbp, %rax
    0000053d: 	andq	$-0x8, %rax
    00000541: 	leaq	(%r8,%rax,2), %rcx
    00000545: 	leaq	(%r10,%rax,8), %r9
    00000549: 	cmpq	%rax, %rbp
    0000054c: 	je	.Ltmp778 # Offset: 1356
    0000054e: 	movzwl	(%rcx), %r10d
    00000552: 	movw	%r10w, (%r9)
    00000556: 	leaq	0x1(%rax), %r10
    0000055a: 	cmpq	%r10, %rdx
    0000055d: 	jbe	.Ltmp778 # Offset: 1373
    0000055f: 	movzwl	0x2(%rcx), %r10d
    00000564: 	movw	%r10w, 0x8(%r9)
    00000569: 	leaq	0x2(%rax), %r10
    0000056d: 	cmpq	%r10, %rdx
    00000570: 	jbe	.Ltmp778 # Offset: 1392
    00000572: 	movzwl	0x4(%rcx), %r10d
    00000577: 	movw	%r10w, 0x10(%r9)
    0000057c: 	leaq	0x3(%rax), %r10
    00000580: 	cmpq	%r10, %rdx
    00000583: 	jbe	.Ltmp778 # Offset: 1411
    00000585: 	movzwl	0x6(%rcx), %r10d
    0000058a: 	movw	%r10w, 0x18(%r9)
    0000058f: 	leaq	0x4(%rax), %r10
    00000593: 	cmpq	%r10, %rdx
    00000596: 	jbe	.Ltmp778 # Offset: 1430
    00000598: 	movzwl	0x8(%rcx), %r10d
    0000059d: 	movw	%r10w, 0x20(%r9)
    000005a2: 	leaq	0x5(%rax), %r10
    000005a6: 	cmpq	%r10, %rdx
    000005a9: 	jbe	.Ltmp778 # Offset: 1449
    000005ab: 	movzwl	0xa(%rcx), %r10d
    000005b0: 	addq	$0x6, %rax
    000005b4: 	movw	%r10w, 0x28(%r9)
    000005b9: 	cmpq	%rax, %rdx
    000005bc: 	jbe	.Ltmp778 # Offset: 1468
    000005be: 	movzwl	0xc(%rcx), %eax
    000005c2: 	movw	%ax, 0x30(%r9)
.Ltmp778:
    000005c7: 	addq	%rbx, %r13
    000005ca: 	addq	%rbx, %r15
    000005cd: 	addq	%rbx, %rsi
    000005d0: 	addq	%rbx, %r8
    000005d3: 	subl	$0x200, -0x14(%rsp)
    000005db: 	movl	-0x18(%rsp), %ebx
    000005df: 	addq	-0x20(%rsp), %rdi
    000005e4: 	cmpl	%ebx, -0x24(%rsp)
    000005e8: 	jl	.Ltmp779 # Offset: 1512
.Ltmp765:
    000005ee: 	popq	%rbx
    000005ef: 	popq	%rbp
    000005f0: 	popq	%r12
    000005f2: 	popq	%r13
    000005f4: 	popq	%r14
    000005f6: 	popq	%r15
    000005f8: 	retq # Offset: 1528
    000005f9: 	nopl	(%rax) # Size: 7
.Ltmp766:
    00000600: 	movslq	-0x14(%rsp), %rdx
    00000605: 	movq	%rdx, %rax
    00000608: 	leaq	(%rdx,%rdx), %rbx
    0000060c: 	shll	$0x2, %eax
    0000060f: 	cltq
    00000611: 	addq	%rax, %rax
    00000614: 	movq	%rax, -0x20(%rsp)
    00000619: 	testq	%rdx, %rdx
    0000061c: 	jne	.Ltmp780 # Offset: 1564
    00000622: 	jmp	.Ltmp778 # Offset: 1570
    00000624: 	nopl	(%rax) # Size: 4
.Ltmp776:
    00000628: 	xorl	%eax, %eax
    0000062a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp781:
    00000630: 	movzwl	(%r8,%rax,2), %ecx
    00000635: 	movw	%cx, 0x6(%rdi,%rax,8)
    0000063a: 	addq	$0x1, %rax
    0000063e: 	cmpq	%rdx, %rax
    00000641: 	jb	.Ltmp781 # Offset: 1601
    00000643: 	jmp	.Ltmp778 # Offset: 1603
    00000645: 	nopl	(%rax) # Size: 3
.Ltmp773:
    00000648: 	xorl	%eax, %eax
    0000064a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp782:
    00000650: 	movzwl	(%rsi,%rax,2), %ecx
    00000654: 	movw	%cx, 0x4(%rdi,%rax,8)
    00000659: 	addq	$0x1, %rax
    0000065d: 	cmpq	%rax, %rdx
    00000660: 	ja	.Ltmp782 # Offset: 1632
    00000662: 	jmp	.Ltmp775 # Offset: 1634
    00000667: 	nopw	(%rax,%rax) # Size: 9
.Ltmp770:
    00000670: 	xorl	%eax, %eax
    00000672: 	nopw	(%rax,%rax) # Size: 6
.Ltmp783:
    00000678: 	movzwl	(%r15,%rax,2), %ecx
    0000067d: 	movw	%cx, 0x2(%rdi,%rax,8)
    00000682: 	addq	$0x1, %rax
    00000686: 	cmpq	%rax, %rdx
    00000689: 	ja	.Ltmp783 # Offset: 1673
    0000068b: 	jmp	.Ltmp772 # Offset: 1675
.Ltmp767:
    00000690: 	xorl	%eax, %eax
    00000692: 	nopw	(%rax,%rax) # Size: 6
.Ltmp784:
    00000698: 	movzwl	(%r13,%rax,2), %ecx
    0000069e: 	movw	%cx, (%rdi,%rax,8)
    000006a2: 	addq	$0x1, %rax
    000006a6: 	cmpq	%rax, %rdx
    000006a9: 	ja	.Ltmp784 # Offset: 1705
    000006ab: 	jmp	.Ltmp769 # Offset: 1707
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version4ItEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version5ItEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 99
  State       : disassembled
  Address     : 0x14260
  Size        : 0x5d5
  MaxSize     : 0x5e0
  Offset      : 0x14260
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version5ItEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB098:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %rax
    00000009: 	movq	%rsi, %rdi
    0000000c: 	movq	%rdx, %rsi
    0000000f: 	pushq	%r14
    00000011: 	pushq	%r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%r9d, -0x24(%rsp)
    0000001c: 	movl	%r9d, -0x18(%rsp)
    00000021: 	movl	$0x0, -0x28(%rsp)
    00000029: 	testl	%r9d, %r9d
    0000002c: 	jle	.Ltmp785 # Offset: 44
    00000032: 	movq	%rcx, %r15
    00000035: 	movq	%r8, %rbp
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp797:
    00000040: 	addl	$0x200, -0x28(%rsp)
    00000048: 	movl	-0x28(%rsp), %edx
    0000004c: 	cmpl	-0x24(%rsp), %edx
    00000050: 	jg	.Ltmp786 # Offset: 80
    00000056: 	movq	$0x1000, -0x20(%rsp)
    0000005f: 	movl	$0x400, %r14d
    00000065: 	movl	$0x200, %edx
.Ltmp798:
    0000006a: 	movslq	%edx, %r10
    0000006d: 	testl	%edx, %edx
    0000006f: 	movl	$0x2, %r11d
    00000075: 	movl	$0x4, %ebx
    0000007a: 	leaq	(%r10,%r10), %r8
    0000007e: 	leaq	-0x4(,%r10,8), %rcx
    00000086: 	movl	%edx, %r9d
    00000089: 	cmovgq	%r8, %r11
    0000008d: 	cmovleq	%rbx, %rcx
    00000091: 	leaq	(%rdi,%r11), %rbx
    00000095: 	addq	%rax, %rcx
    00000098: 	cmpq	%rbx, %rax
    0000009b: 	setae	%r12b
    0000009f: 	cmpq	%rcx, %rdi
    000000a2: 	setae	%bl
    000000a5: 	addq	%rsi, %r11
    000000a8: 	orl	%r12d, %ebx
    000000ab: 	cmpq	%r11, %rax
    000000ae: 	setae	%r11b
    000000b2: 	cmpq	%rcx, %rsi
    000000b5: 	setae	%cl
    000000b8: 	orl	%ecx, %r11d
    000000bb: 	testb	%r11b, %bl
    000000be: 	je	.Ltmp787 # Offset: 190
    000000c4: 	cmpl	$0x3, %edx
    000000c7: 	jle	.Ltmp787 # Offset: 199
    000000cd: 	testl	%edx, %edx
    000000cf: 	movl	$0x1, %r12d
    000000d5: 	cmovgl	%edx, %r12d
    000000d9: 	cmpl	$0x7, %edx
    000000dc: 	jle	.Ltmp788 # Offset: 220
    000000e2: 	movl	%r12d, %r13d
    000000e5: 	movq	%rax, %rcx
    000000e8: 	xorl	%r11d, %r11d
    000000eb: 	shrl	$0x3, %r13d
    000000ef: 	shlq	$0x4, %r13
    000000f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp789:
    000000f8: 	movdqu	(%rdi,%r11), %xmm1
    000000fe: 	movdqu	(%rsi,%r11), %xmm0
    00000104: 	addq	$0x10, %r11
    00000108: 	addq	$0x40, %rcx
    0000010c: 	pextrw	$0x0, %xmm1, %ebx
    00000111: 	movw	%bx, -0x40(%rcx)
    00000115: 	pextrw	$0x1, %xmm1, %ebx
    0000011a: 	movw	%bx, -0x38(%rcx)
    0000011e: 	pextrw	$0x2, %xmm1, %ebx
    00000123: 	movw	%bx, -0x30(%rcx)
    00000127: 	pextrw	$0x3, %xmm1, %ebx
    0000012c: 	movw	%bx, -0x28(%rcx)
    00000130: 	pextrw	$0x4, %xmm1, %ebx
    00000135: 	movw	%bx, -0x20(%rcx)
    00000139: 	pextrw	$0x5, %xmm1, %ebx
    0000013e: 	movw	%bx, -0x18(%rcx)
    00000142: 	pextrw	$0x6, %xmm1, %ebx
    00000147: 	movw	%bx, -0x10(%rcx)
    0000014b: 	pextrw	$0x7, %xmm1, %ebx
    00000150: 	movw	%bx, -0x8(%rcx)
    00000154: 	pextrw	$0x0, %xmm0, %ebx
    00000159: 	movw	%bx, -0x3e(%rcx)
    0000015d: 	pextrw	$0x1, %xmm0, %ebx
    00000162: 	movw	%bx, -0x36(%rcx)
    00000166: 	pextrw	$0x2, %xmm0, %ebx
    0000016b: 	movw	%bx, -0x2e(%rcx)
    0000016f: 	pextrw	$0x3, %xmm0, %ebx
    00000174: 	movw	%bx, -0x26(%rcx)
    00000178: 	pextrw	$0x4, %xmm0, %ebx
    0000017d: 	movw	%bx, -0x1e(%rcx)
    00000181: 	pextrw	$0x5, %xmm0, %ebx
    00000186: 	movw	%bx, -0x16(%rcx)
    0000018a: 	pextrw	$0x6, %xmm0, %ebx
    0000018f: 	movw	%bx, -0xe(%rcx)
    00000193: 	pextrw	$0x7, %xmm0, %ebx
    00000198: 	movw	%bx, -0x6(%rcx)
    0000019c: 	cmpq	%r13, %r11
    0000019f: 	jne	.Ltmp789 # Offset: 415
    000001a5: 	movl	%r12d, %ebx
    000001a8: 	andl	$-0x8, %ebx
    000001ab: 	movl	%ebx, %ecx
    000001ad: 	cmpl	%ebx, %r12d
    000001b0: 	je	.Ltmp790 # Offset: 432
.Ltmp802:
    000001b6: 	subl	%ebx, %r12d
    000001b9: 	leal	-0x1(%r12), %r11d
    000001be: 	cmpl	$0x2, %r11d
    000001c2: 	jbe	.Ltmp791 # Offset: 450
    000001c4: 	movq	(%rdi,%rbx,2), %xmm1
    000001c9: 	movq	(%rsi,%rbx,2), %xmm0
    000001ce: 	leaq	(%rax,%rbx,8), %r11
    000001d2: 	pextrw	$0x0, %xmm1, %ebx
    000001d7: 	movw	%bx, (%r11)
    000001db: 	pextrw	$0x1, %xmm1, %ebx
    000001e0: 	movw	%bx, 0x8(%r11)
    000001e5: 	pextrw	$0x2, %xmm1, %ebx
    000001ea: 	movw	%bx, 0x10(%r11)
    000001ef: 	pextrw	$0x3, %xmm1, %ebx
    000001f4: 	movw	%bx, 0x18(%r11)
    000001f9: 	pextrw	$0x0, %xmm0, %ebx
    000001fe: 	movw	%bx, 0x2(%r11)
    00000203: 	pextrw	$0x1, %xmm0, %ebx
    00000208: 	movw	%bx, 0xa(%r11)
    0000020d: 	pextrw	$0x2, %xmm0, %ebx
    00000212: 	movw	%bx, 0x12(%r11)
    00000217: 	pextrw	$0x3, %xmm0, %ebx
    0000021c: 	movw	%bx, 0x1a(%r11)
    00000221: 	movl	%r12d, %r11d
    00000224: 	andl	$-0x4, %r11d
    00000228: 	addl	%r11d, %ecx
    0000022b: 	cmpl	%r11d, %r12d
    0000022e: 	je	.Ltmp790 # Offset: 558
.Ltmp791:
    00000234: 	leal	(,%rcx,4), %r11d
    0000023c: 	movslq	%ecx, %r13
    0000023f: 	movslq	%r11d, %r12
    00000242: 	movl	%r11d, -0x14(%rsp)
    00000247: 	leaq	(%r13,%r13), %rbx
    0000024c: 	leaq	(%r12,%r12), %r11
    00000250: 	movq	%r11, -0x10(%rsp)
    00000255: 	movzwl	(%rdi,%r13,2), %r11d
    0000025a: 	movw	%r11w, (%rax,%r12,2)
    0000025f: 	movzwl	(%rsi,%r13,2), %r13d
    00000264: 	movw	%r13w, 0x2(%rax,%r12,2)
    0000026a: 	leal	0x1(%rcx), %r12d
    0000026e: 	cmpl	%r12d, %edx
    00000271: 	jle	.Ltmp790 # Offset: 625
    00000273: 	movzwl	0x2(%rdi,%rbx), %r12d
    00000279: 	movl	-0x14(%rsp), %r11d
    0000027e: 	addl	$0x2, %ecx
    00000281: 	movq	-0x10(%rsp), %r13
    00000286: 	addl	$0x4, %r11d
    0000028a: 	movw	%r12w, 0x8(%rax,%r13)
    00000290: 	movzwl	0x2(%rsi,%rbx), %r12d
    00000296: 	movslq	%r11d, %r11
    00000299: 	movw	%r12w, 0x2(%rax,%r11,2)
    0000029f: 	cmpl	%ecx, %edx
    000002a1: 	jle	.Ltmp790 # Offset: 673
    000002a3: 	movzwl	0x4(%rdi,%rbx), %ecx
    000002a8: 	movw	%cx, 0x10(%rax,%r13)
    000002ae: 	movzwl	0x4(%rsi,%rbx), %ecx
    000002b3: 	movw	%cx, 0xa(%rax,%r11,2)
.Ltmp790:
    000002b9: 	leaq	(%rax,%r10,8), %r11
    000002bd: 	leaq	0x4(%rax), %rcx
    000002c1: 	leaq	(%rbp,%r8), %r10
    000002c6: 	leal	-0x1(%rdx), %ebx
    000002c9: 	cmpq	%r10, %rcx
    000002cc: 	setae	%r12b
    000002d0: 	cmpq	%r11, %rbp
    000002d3: 	setae	%r10b
    000002d7: 	addq	%r15, %r8
    000002da: 	orl	%r12d, %r10d
    000002dd: 	cmpq	%r8, %rcx
    000002e0: 	setae	%r8b
    000002e4: 	cmpq	%r11, %r15
    000002e7: 	setae	%r11b
    000002eb: 	orl	%r11d, %r8d
    000002ee: 	testb	%r8b, %r10b
    000002f1: 	je	.Ltmp792 # Offset: 753
    000002f7: 	cmpl	$0x2, %ebx
    000002fa: 	jbe	.Ltmp792 # Offset: 762
    00000300: 	cmpl	$0x6, %ebx
    00000303: 	jbe	.Ltmp793 # Offset: 771
    00000309: 	movl	%edx, %r10d
    0000030c: 	xorl	%r8d, %r8d
    0000030f: 	shrl	$0x3, %r10d
    00000313: 	shlq	$0x4, %r10
    00000317: 	nopw	(%rax,%rax) # Size: 9
.Ltmp794:
    00000320: 	movdqu	(%r15,%r8), %xmm1
    00000326: 	movdqu	(%rbp,%r8), %xmm0
    0000032d: 	addq	$0x10, %r8
    00000331: 	addq	$0x40, %rcx
    00000335: 	pextrw	$0x0, %xmm1, %r9d
    0000033b: 	movw	%r9w, -0x40(%rcx)
    00000340: 	pextrw	$0x1, %xmm1, %r9d
    00000346: 	movw	%r9w, -0x38(%rcx)
    0000034b: 	pextrw	$0x2, %xmm1, %r9d
    00000351: 	movw	%r9w, -0x30(%rcx)
    00000356: 	pextrw	$0x3, %xmm1, %r9d
    0000035c: 	movw	%r9w, -0x28(%rcx)
    00000361: 	pextrw	$0x4, %xmm1, %r9d
    00000367: 	movw	%r9w, -0x20(%rcx)
    0000036c: 	pextrw	$0x5, %xmm1, %r9d
    00000372: 	movw	%r9w, -0x18(%rcx)
    00000377: 	pextrw	$0x6, %xmm1, %r9d
    0000037d: 	movw	%r9w, -0x10(%rcx)
    00000382: 	pextrw	$0x7, %xmm1, %r9d
    00000388: 	movw	%r9w, -0x8(%rcx)
    0000038d: 	pextrw	$0x0, %xmm0, %r9d
    00000393: 	movw	%r9w, -0x3e(%rcx)
    00000398: 	pextrw	$0x1, %xmm0, %r9d
    0000039e: 	movw	%r9w, -0x36(%rcx)
    000003a3: 	pextrw	$0x2, %xmm0, %r9d
    000003a9: 	movw	%r9w, -0x2e(%rcx)
    000003ae: 	pextrw	$0x3, %xmm0, %r9d
    000003b4: 	movw	%r9w, -0x26(%rcx)
    000003b9: 	pextrw	$0x4, %xmm0, %r9d
    000003bf: 	movw	%r9w, -0x1e(%rcx)
    000003c4: 	pextrw	$0x5, %xmm0, %r9d
    000003ca: 	movw	%r9w, -0x16(%rcx)
    000003cf: 	pextrw	$0x6, %xmm0, %r9d
    000003d5: 	movw	%r9w, -0xe(%rcx)
    000003da: 	pextrw	$0x7, %xmm0, %r9d
    000003e0: 	movw	%r9w, -0x6(%rcx)
    000003e5: 	cmpq	%r10, %r8
    000003e8: 	jne	.Ltmp794 # Offset: 1000
    000003ee: 	movl	%edx, %r10d
    000003f1: 	andl	$-0x8, %r10d
    000003f5: 	movl	%r10d, %ecx
    000003f8: 	cmpl	%edx, %r10d
    000003fb: 	je	.Ltmp795 # Offset: 1019
    00000401: 	movl	%edx, %r9d
    00000404: 	subl	%r10d, %r9d
    00000407: 	leal	-0x1(%r9), %r8d
    0000040b: 	cmpl	$0x2, %r8d
    0000040f: 	jbe	.Ltmp796 # Offset: 1039
.Ltmp801:
    00000411: 	movq	(%r15,%r10,2), %xmm1
    00000417: 	movq	(%rbp,%r10,2), %xmm0
    0000041e: 	leaq	0x4(%rax,%r10,8), %r8
    00000423: 	pextrw	$0x0, %xmm1, %r10d
    00000429: 	movw	%r10w, (%r8)
    0000042d: 	pextrw	$0x1, %xmm1, %r10d
    00000433: 	movw	%r10w, 0x8(%r8)
    00000438: 	pextrw	$0x2, %xmm1, %r10d
    0000043e: 	movw	%r10w, 0x10(%r8)
    00000443: 	pextrw	$0x3, %xmm1, %r10d
    00000449: 	movw	%r10w, 0x18(%r8)
    0000044e: 	pextrw	$0x0, %xmm0, %r10d
    00000454: 	movw	%r10w, 0x2(%r8)
    00000459: 	pextrw	$0x1, %xmm0, %r10d
    0000045f: 	movw	%r10w, 0xa(%r8)
    00000464: 	pextrw	$0x2, %xmm0, %r10d
    0000046a: 	movw	%r10w, 0x12(%r8)
    0000046f: 	pextrw	$0x3, %xmm0, %r10d
    00000475: 	movw	%r10w, 0x1a(%r8)
    0000047a: 	movl	%r9d, %r8d
    0000047d: 	andl	$-0x4, %r8d
    00000481: 	addl	%r8d, %ecx
    00000484: 	cmpl	%r8d, %r9d
    00000487: 	je	.Ltmp795 # Offset: 1159
.Ltmp796:
    00000489: 	movslq	%ecx, %r11
    0000048c: 	leal	(,%rcx,4), %r8d
    00000494: 	movzwl	(%r15,%r11,2), %ebx
    00000499: 	leal	0x2(%r8), %r9d
    0000049d: 	leaq	(%r11,%r11), %r10
    000004a1: 	movslq	%r9d, %r9
    000004a4: 	movw	%bx, (%rax,%r9,2)
    000004a9: 	movzwl	(%rbp,%r11,2), %r11d
    000004af: 	movw	%r11w, 0x2(%rax,%r9,2)
    000004b5: 	leal	0x1(%rcx), %r9d
    000004b9: 	cmpl	%r9d, %edx
    000004bc: 	jle	.Ltmp795 # Offset: 1212
    000004be: 	movzwl	0x2(%r15,%r10), %r11d
    000004c4: 	leal	0x6(%r8), %r9d
    000004c8: 	addl	$0x2, %ecx
    000004cb: 	movslq	%r9d, %r9
    000004ce: 	movw	%r11w, (%rax,%r9,2)
    000004d3: 	movzwl	0x2(%rbp,%r10), %r11d
    000004d9: 	movw	%r11w, 0x2(%rax,%r9,2)
    000004df: 	cmpl	%edx, %ecx
    000004e1: 	jge	.Ltmp795 # Offset: 1249
    000004e3: 	movzwl	0x4(%r15,%r10), %edx
    000004e9: 	movslq	%r8d, %r8
    000004ec: 	addq	$0xa, %r8
    000004f0: 	movw	%dx, (%rax,%r8,2)
    000004f5: 	movzwl	0x4(%rbp,%r10), %edx
    000004fb: 	movw	%dx, 0x2(%rax,%r8,2)
.Ltmp795:
    00000501: 	movl	-0x24(%rsp), %ebx
    00000505: 	addq	-0x20(%rsp), %rax
    0000050a: 	addq	%r14, %rdi
    0000050d: 	addq	%r14, %rsi
    00000510: 	subl	$0x200, -0x18(%rsp)
    00000518: 	addq	%r14, %r15
    0000051b: 	addq	%r14, %rbp
    0000051e: 	cmpl	%ebx, -0x28(%rsp)
    00000522: 	jl	.Ltmp797 # Offset: 1314
.Ltmp785:
    00000528: 	popq	%rbx
    00000529: 	popq	%rbp
    0000052a: 	popq	%r12
    0000052c: 	popq	%r13
    0000052e: 	popq	%r14
    00000530: 	popq	%r15
    00000532: 	retq # Offset: 1330
    00000533: 	nopl	(%rax,%rax) # Size: 5
.Ltmp786:
    00000538: 	movl	-0x18(%rsp), %ebx
    0000053c: 	leal	(,%rbx,4), %ecx
    00000543: 	movl	%ebx, %edx
    00000545: 	movslq	%ecx, %rcx
    00000548: 	addq	%rcx, %rcx
    0000054b: 	movq	%rcx, -0x20(%rsp)
    00000550: 	movslq	%ebx, %rcx
    00000553: 	leaq	(%rcx,%rcx), %r14
    00000557: 	testl	%ebx, %ebx
    00000559: 	jg	.Ltmp798 # Offset: 1369
    0000055f: 	jmp	.Ltmp795 # Offset: 1375
    00000561: 	nopl	(%rax) # Size: 7
.Ltmp792:
    00000568: 	movl	%edx, %edx
    0000056a: 	xorl	%ecx, %ecx
    0000056c: 	nopl	(%rax) # Size: 4
.Ltmp799:
    00000570: 	movzwl	(%r15,%rcx,2), %r8d
    00000575: 	movw	%r8w, 0x4(%rax,%rcx,8)
    0000057b: 	movzwl	(%rbp,%rcx,2), %r8d
    00000581: 	movw	%r8w, 0x6(%rax,%rcx,8)
    00000587: 	addq	$0x1, %rcx
    0000058b: 	cmpq	%rdx, %rcx
    0000058e: 	jne	.Ltmp799 # Offset: 1422
    00000590: 	jmp	.Ltmp795 # Offset: 1424
    00000595: 	nopl	(%rax) # Size: 3
.Ltmp787:
    00000598: 	xorl	%ecx, %ecx
    0000059a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp800:
    000005a0: 	movzwl	(%rdi,%rcx,2), %r11d
    000005a5: 	movw	%r11w, (%rax,%rcx,8)
    000005aa: 	movzwl	(%rsi,%rcx,2), %r11d
    000005af: 	movw	%r11w, 0x2(%rax,%rcx,8)
    000005b5: 	addq	$0x1, %rcx
    000005b9: 	cmpl	%ecx, %edx
    000005bb: 	jg	.Ltmp800 # Offset: 1467
    000005bd: 	jmp	.Ltmp790 # Offset: 1469
.Ltmp793:
    000005c2: 	xorl	%r10d, %r10d
    000005c5: 	xorl	%ecx, %ecx
    000005c7: 	jmp	.Ltmp801 # Offset: 1479
.Ltmp788:
    000005cc: 	xorl	%ebx, %ebx
    000005ce: 	xorl	%ecx, %ecx
    000005d0: 	jmp	.Ltmp802 # Offset: 1488
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version5ItEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version6ItEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 100
  State       : disassembled
  Address     : 0x14840
  Size        : 0x7de
  MaxSize     : 0x7e0
  Offset      : 0x14840
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version6ItEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB099:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %rax
    00000009: 	movq	%rsi, %rdi
    0000000c: 	movq	%rdx, %rsi
    0000000f: 	pushq	%r14
    00000011: 	pushq	%r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	movl	%r9d, -0x10(%rsp)
    0000001c: 	movl	%r9d, -0xc(%rsp)
    00000021: 	movl	$0x0, -0x24(%rsp)
    00000029: 	testl	%r9d, %r9d
    0000002c: 	jle	.Ltmp803 # Offset: 44
    00000032: 	movq	%rcx, %r15
    00000035: 	movq	%r8, %rbp
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp817:
    00000040: 	addl	$0x200, -0x24(%rsp)
    00000048: 	movl	-0x24(%rsp), %edx
    0000004c: 	cmpl	-0x10(%rsp), %edx
    00000050: 	jg	.Ltmp804 # Offset: 80
    00000056: 	movq	$0x1000, -0x18(%rsp)
    0000005f: 	movl	$0x400, %r8d
    00000065: 	movl	$0x200, %edx
.Ltmp819:
    0000006a: 	movslq	%edx, %r14
    0000006d: 	testl	%edx, %edx
    0000006f: 	movl	$0x2, %ebx
    00000074: 	leaq	-0x8(,%r14,8), %r11
    0000007c: 	leaq	(%r14,%r14), %rcx
    00000080: 	leaq	0x2(%r11), %r9
    00000084: 	cmovleq	%rbx, %r9
    00000088: 	addq	%rax, %r9
    0000008b: 	cmpq	%r9, %rdi
    0000008e: 	movl	$0x2, %r9d
    00000094: 	setae	%r10b
    00000098: 	testl	%edx, %edx
    0000009a: 	cmovgq	%rcx, %r9
    0000009e: 	addq	%rdi, %r9
    000000a1: 	cmpq	%r9, %rax
    000000a4: 	setae	%r9b
    000000a8: 	orb	%r10b, %r9b
    000000ab: 	je	.Ltmp805 # Offset: 171
    000000b1: 	cmpl	$0x8, %edx
    000000b4: 	jle	.Ltmp805 # Offset: 180
    000000ba: 	testl	%edx, %edx
    000000bc: 	movl	$0x1, %r13d
    000000c2: 	movq	%rdi, %r10
    000000c5: 	movq	%rax, %r9
    000000c8: 	cmovgl	%edx, %r13d
    000000cc: 	movl	%r13d, %ebx
    000000cf: 	shrl	$0x3, %ebx
    000000d2: 	subl	$0x1, %ebx
    000000d5: 	shlq	$0x4, %rbx
    000000d9: 	leaq	0x10(%rdi,%rbx), %r12
    000000de: 	nop # Size: 2
.Ltmp806:
    000000e0: 	movdqu	(%r10), %xmm0
    000000e5: 	addq	$0x10, %r10
    000000e9: 	addq	$0x40, %r9
    000000ed: 	pextrw	$0x0, %xmm0, %ebx
    000000f2: 	movw	%bx, -0x40(%r9)
    000000f7: 	pextrw	$0x1, %xmm0, %ebx
    000000fc: 	movw	%bx, -0x38(%r9)
    00000101: 	pextrw	$0x2, %xmm0, %ebx
    00000106: 	movw	%bx, -0x30(%r9)
    0000010b: 	pextrw	$0x3, %xmm0, %ebx
    00000110: 	movw	%bx, -0x28(%r9)
    00000115: 	pextrw	$0x4, %xmm0, %ebx
    0000011a: 	movw	%bx, -0x20(%r9)
    0000011f: 	pextrw	$0x5, %xmm0, %ebx
    00000124: 	movw	%bx, -0x18(%r9)
    00000129: 	pextrw	$0x6, %xmm0, %ebx
    0000012e: 	movw	%bx, -0x10(%r9)
    00000133: 	pextrw	$0x7, %xmm0, %ebx
    00000138: 	movw	%bx, -0x8(%r9)
    0000013d: 	cmpq	%r12, %r10
    00000140: 	jne	.Ltmp806 # Offset: 320
    00000142: 	movl	%r13d, %r9d
    00000145: 	andl	$-0x8, %r9d
    00000149: 	andl	$0x7, %r13d
    0000014d: 	je	.Ltmp807 # Offset: 333
    00000153: 	movl	%r9d, %r13d
    00000156: 	leal	(,%r9,4), %r12d
    0000015e: 	leaq	(%r13,%r13), %rbx
    00000163: 	movzwl	(%rdi,%r13,2), %r13d
    00000168: 	movslq	%r12d, %r12
    0000016b: 	leaq	(%r12,%r12), %r10
    0000016f: 	movw	%r13w, (%rax,%r12,2)
    00000174: 	leal	0x1(%r9), %r12d
    00000178: 	cmpl	%r12d, %edx
    0000017b: 	jle	.Ltmp807 # Offset: 379
    0000017d: 	movzwl	0x2(%rdi,%rbx), %r12d
    00000183: 	movw	%r12w, 0x8(%rax,%r10)
    00000189: 	leal	0x2(%r9), %r12d
    0000018d: 	cmpl	%r12d, %edx
    00000190: 	jle	.Ltmp807 # Offset: 400
    00000192: 	movzwl	0x4(%rdi,%rbx), %r12d
    00000198: 	movw	%r12w, 0x10(%rax,%r10)
    0000019e: 	leal	0x3(%r9), %r12d
    000001a2: 	cmpl	%r12d, %edx
    000001a5: 	jle	.Ltmp807 # Offset: 421
    000001a7: 	movzwl	0x6(%rdi,%rbx), %r12d
    000001ad: 	movw	%r12w, 0x18(%rax,%r10)
    000001b3: 	leal	0x4(%r9), %r12d
    000001b7: 	cmpl	%r12d, %edx
    000001ba: 	jle	.Ltmp807 # Offset: 442
    000001bc: 	movzwl	0x8(%rdi,%rbx), %r12d
    000001c2: 	movw	%r12w, 0x20(%rax,%r10)
    000001c8: 	leal	0x5(%r9), %r12d
    000001cc: 	cmpl	%r12d, %edx
    000001cf: 	jle	.Ltmp807 # Offset: 463
    000001d1: 	movzwl	0xa(%rdi,%rbx), %r12d
    000001d7: 	addl	$0x6, %r9d
    000001db: 	movw	%r12w, 0x28(%rax,%r10)
    000001e1: 	cmpl	%r9d, %edx
    000001e4: 	jle	.Ltmp807 # Offset: 484
    000001e6: 	movzwl	0xc(%rdi,%rbx), %r9d
    000001ec: 	movw	%r9w, 0x30(%rax,%r10)
.Ltmp807:
    000001f2: 	leal	-0x1(%rdx), %r9d
    000001f6: 	leaq	0x4(%rax,%r11), %r10
    000001fb: 	cmpl	$0x7, %r9d
    000001ff: 	leaq	0x2(%rax), %r9
    00000203: 	seta	%bl
    00000206: 	cmpq	%r10, %rsi
    00000209: 	leaq	(%rsi,%rcx), %r10
    0000020d: 	setae	%r12b
    00000211: 	cmpq	%r10, %r9
    00000214: 	setae	%r10b
    00000218: 	orb	%r12b, %r10b
    0000021b: 	je	.Ltmp808 # Offset: 539
    00000221: 	testb	%bl, %bl
    00000223: 	je	.Ltmp808 # Offset: 547
    00000229: 	movl	%edx, %r12d
    0000022c: 	movq	%rsi, %r10
    0000022f: 	shrl	$0x3, %r12d
    00000233: 	subl	$0x1, %r12d
    00000237: 	shlq	$0x4, %r12
    0000023b: 	leaq	0x10(%rsi,%r12), %r13
.Ltmp809:
    00000240: 	movdqu	(%r10), %xmm0
    00000245: 	addq	$0x10, %r10
    00000249: 	addq	$0x40, %r9
    0000024d: 	pextrw	$0x0, %xmm0, %r12d
    00000253: 	movw	%r12w, -0x40(%r9)
    00000258: 	pextrw	$0x1, %xmm0, %r12d
    0000025e: 	movw	%r12w, -0x38(%r9)
    00000263: 	pextrw	$0x2, %xmm0, %r12d
    00000269: 	movw	%r12w, -0x30(%r9)
    0000026e: 	pextrw	$0x3, %xmm0, %r12d
    00000274: 	movw	%r12w, -0x28(%r9)
    00000279: 	pextrw	$0x4, %xmm0, %r12d
    0000027f: 	movw	%r12w, -0x20(%r9)
    00000284: 	pextrw	$0x5, %xmm0, %r12d
    0000028a: 	movw	%r12w, -0x18(%r9)
    0000028f: 	pextrw	$0x6, %xmm0, %r12d
    00000295: 	movw	%r12w, -0x10(%r9)
    0000029a: 	pextrw	$0x7, %xmm0, %r12d
    000002a0: 	movw	%r12w, -0x8(%r9)
    000002a5: 	cmpq	%r13, %r10
    000002a8: 	jne	.Ltmp809 # Offset: 680
    000002aa: 	movl	%edx, %r9d
    000002ad: 	andl	$-0x8, %r9d
    000002b1: 	testb	$0x7, %dl
    000002b4: 	je	.Ltmp810 # Offset: 692
    000002ba: 	movl	%r9d, %r13d
    000002bd: 	leal	(,%r9,4), %r10d
    000002c5: 	leaq	(%r13,%r13), %r12
    000002ca: 	movq	%r12, -0x20(%rsp)
    000002cf: 	movzwl	(%rsi,%r13,2), %r12d
    000002d4: 	leal	0x1(%r10), %r13d
    000002d8: 	movslq	%r13d, %r13
    000002db: 	movw	%r12w, (%rax,%r13,2)
    000002e0: 	leal	0x1(%r9), %r13d
    000002e4: 	cmpl	%r13d, %edx
    000002e7: 	jle	.Ltmp810 # Offset: 743
    000002ed: 	movq	-0x20(%rsp), %r12
    000002f2: 	leal	0x5(%r10), %r13d
    000002f6: 	movslq	%r13d, %r13
    000002f9: 	movzwl	0x2(%rsi,%r12), %r12d
    000002ff: 	movw	%r12w, (%rax,%r13,2)
    00000304: 	leal	0x2(%r9), %r13d
    00000308: 	cmpl	%r13d, %edx
    0000030b: 	jle	.Ltmp810 # Offset: 779
    00000311: 	movq	-0x20(%rsp), %r12
    00000316: 	leal	0x9(%r10), %r13d
    0000031a: 	movslq	%r13d, %r13
    0000031d: 	movzwl	0x4(%rsi,%r12), %r12d
    00000323: 	movw	%r12w, (%rax,%r13,2)
    00000328: 	leal	0x3(%r9), %r13d
    0000032c: 	cmpl	%r13d, %edx
    0000032f: 	jle	.Ltmp810 # Offset: 815
    00000331: 	movq	-0x20(%rsp), %r12
    00000336: 	leal	0xd(%r10), %r13d
    0000033a: 	movslq	%r13d, %r13
    0000033d: 	movzwl	0x6(%rsi,%r12), %r12d
    00000343: 	movw	%r12w, (%rax,%r13,2)
    00000348: 	leal	0x4(%r9), %r13d
    0000034c: 	cmpl	%r13d, %edx
    0000034f: 	jle	.Ltmp810 # Offset: 847
    00000351: 	movq	-0x20(%rsp), %r12
    00000356: 	leal	0x11(%r10), %r13d
    0000035a: 	movslq	%r13d, %r13
    0000035d: 	movzwl	0x8(%rsi,%r12), %r12d
    00000363: 	movw	%r12w, (%rax,%r13,2)
    00000368: 	leal	0x5(%r9), %r13d
    0000036c: 	cmpl	%r13d, %edx
    0000036f: 	jle	.Ltmp810 # Offset: 879
    00000371: 	movq	-0x20(%rsp), %r12
    00000376: 	leal	0x15(%r10), %r13d
    0000037a: 	addl	$0x6, %r9d
    0000037e: 	movslq	%r13d, %r13
    00000381: 	movzwl	0xa(%rsi,%r12), %r12d
    00000387: 	movw	%r12w, (%rax,%r13,2)
    0000038c: 	cmpl	%r9d, %edx
    0000038f: 	jle	.Ltmp810 # Offset: 911
    00000391: 	movq	-0x20(%rsp), %r9
    00000396: 	addl	$0x19, %r10d
    0000039a: 	movslq	%r10d, %r10
    0000039d: 	movzwl	0xc(%rsi,%r9), %r9d
    000003a3: 	movw	%r9w, (%rax,%r10,2)
.Ltmp810:
    000003a8: 	leaq	0x6(%rax,%r11), %r10
    000003ad: 	leaq	0x4(%rax), %r9
    000003b1: 	cmpq	%r10, %r15
    000003b4: 	leaq	(%r15,%rcx), %r10
    000003b8: 	setae	%r11b
    000003bc: 	cmpq	%r10, %r9
    000003bf: 	setae	%r10b
    000003c3: 	orb	%r11b, %r10b
    000003c6: 	je	.Ltmp811 # Offset: 966
    000003cc: 	testb	%bl, %bl
    000003ce: 	je	.Ltmp811 # Offset: 974
    000003d4: 	movl	%edx, %r11d
    000003d7: 	movq	%r15, %r10
    000003da: 	shrl	$0x3, %r11d
    000003de: 	subl	$0x1, %r11d
    000003e2: 	shlq	$0x4, %r11
    000003e6: 	leaq	0x10(%r15,%r11), %r12
    000003eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp812:
    000003f0: 	movdqu	(%r10), %xmm0
    000003f5: 	addq	$0x10, %r10
    000003f9: 	addq	$0x40, %r9
    000003fd: 	pextrw	$0x0, %xmm0, %r11d
    00000403: 	movw	%r11w, -0x40(%r9)
    00000408: 	pextrw	$0x1, %xmm0, %r11d
    0000040e: 	movw	%r11w, -0x38(%r9)
    00000413: 	pextrw	$0x2, %xmm0, %r11d
    00000419: 	movw	%r11w, -0x30(%r9)
    0000041e: 	pextrw	$0x3, %xmm0, %r11d
    00000424: 	movw	%r11w, -0x28(%r9)
    00000429: 	pextrw	$0x4, %xmm0, %r11d
    0000042f: 	movw	%r11w, -0x20(%r9)
    00000434: 	pextrw	$0x5, %xmm0, %r11d
    0000043a: 	movw	%r11w, -0x18(%r9)
    0000043f: 	pextrw	$0x6, %xmm0, %r11d
    00000445: 	movw	%r11w, -0x10(%r9)
    0000044a: 	pextrw	$0x7, %xmm0, %r11d
    00000450: 	movw	%r11w, -0x8(%r9)
    00000455: 	cmpq	%r10, %r12
    00000458: 	jne	.Ltmp812 # Offset: 1112
    0000045a: 	movl	%edx, %r9d
    0000045d: 	andl	$-0x8, %r9d
    00000461: 	testb	$0x7, %dl
    00000464: 	je	.Ltmp813 # Offset: 1124
    0000046a: 	movl	%r9d, %r12d
    0000046d: 	leal	(,%r9,4), %r10d
    00000475: 	movzwl	(%r15,%r12,2), %r13d
    0000047a: 	leaq	(%r12,%r12), %r11
    0000047e: 	leal	0x2(%r10), %r12d
    00000482: 	movslq	%r12d, %r12
    00000485: 	movw	%r13w, (%rax,%r12,2)
    0000048a: 	leal	0x1(%r9), %r12d
    0000048e: 	cmpl	%r12d, %edx
    00000491: 	jle	.Ltmp813 # Offset: 1169
    00000497: 	movzwl	0x2(%r15,%r11), %r13d
    0000049d: 	leal	0x6(%r10), %r12d
    000004a1: 	movslq	%r12d, %r12
    000004a4: 	movw	%r13w, (%rax,%r12,2)
    000004a9: 	leal	0x2(%r9), %r12d
    000004ad: 	cmpl	%r12d, %edx
    000004b0: 	jle	.Ltmp813 # Offset: 1200
    000004b2: 	movzwl	0x4(%r15,%r11), %r13d
    000004b8: 	leal	0xa(%r10), %r12d
    000004bc: 	movslq	%r12d, %r12
    000004bf: 	movw	%r13w, (%rax,%r12,2)
    000004c4: 	leal	0x3(%r9), %r12d
    000004c8: 	cmpl	%r12d, %edx
    000004cb: 	jle	.Ltmp813 # Offset: 1227
    000004cd: 	movzwl	0x6(%r15,%r11), %r13d
    000004d3: 	leal	0xe(%r10), %r12d
    000004d7: 	movslq	%r12d, %r12
    000004da: 	movw	%r13w, (%rax,%r12,2)
    000004df: 	leal	0x4(%r9), %r12d
    000004e3: 	cmpl	%r12d, %edx
    000004e6: 	jle	.Ltmp813 # Offset: 1254
    000004e8: 	movzwl	0x8(%r15,%r11), %r13d
    000004ee: 	leal	0x12(%r10), %r12d
    000004f2: 	movslq	%r12d, %r12
    000004f5: 	movw	%r13w, (%rax,%r12,2)
    000004fa: 	leal	0x5(%r9), %r12d
    000004fe: 	cmpl	%r12d, %edx
    00000501: 	jle	.Ltmp813 # Offset: 1281
    00000503: 	movzwl	0xa(%r15,%r11), %r13d
    00000509: 	leal	0x16(%r10), %r12d
    0000050d: 	addl	$0x6, %r9d
    00000511: 	movslq	%r12d, %r12
    00000514: 	movw	%r13w, (%rax,%r12,2)
    00000519: 	cmpl	%r9d, %edx
    0000051c: 	jle	.Ltmp813 # Offset: 1308
    0000051e: 	movzwl	0xc(%r15,%r11), %r9d
    00000524: 	addl	$0x1a, %r10d
    00000528: 	movslq	%r10d, %r10
    0000052b: 	movw	%r9w, (%rax,%r10,2)
.Ltmp813:
    00000530: 	leaq	(%rax,%r14,8), %r10
    00000534: 	leaq	0x6(%rax), %r9
    00000538: 	cmpq	%r10, %rbp
    0000053b: 	setae	%r10b
    0000053f: 	addq	%rbp, %rcx
    00000542: 	cmpq	%rcx, %r9
    00000545: 	setae	%cl
    00000548: 	orb	%r10b, %cl
    0000054b: 	je	.Ltmp814 # Offset: 1355
    00000551: 	testb	%bl, %bl
    00000553: 	je	.Ltmp814 # Offset: 1363
    00000559: 	movq	%r9, %rcx
    0000055c: 	movl	%edx, %r9d
    0000055f: 	movq	%rbp, %r10
    00000562: 	shrl	$0x3, %r9d
    00000566: 	subl	$0x1, %r9d
    0000056a: 	shlq	$0x4, %r9
    0000056e: 	leaq	0x10(%rbp,%r9), %r11
    00000573: 	nopl	(%rax,%rax) # Size: 5
.Ltmp815:
    00000578: 	movdqu	(%r10), %xmm0
    0000057d: 	addq	$0x10, %r10
    00000581: 	addq	$0x40, %rcx
    00000585: 	pextrw	$0x0, %xmm0, %r9d
    0000058b: 	movw	%r9w, -0x40(%rcx)
    00000590: 	pextrw	$0x1, %xmm0, %r9d
    00000596: 	movw	%r9w, -0x38(%rcx)
    0000059b: 	pextrw	$0x2, %xmm0, %r9d
    000005a1: 	movw	%r9w, -0x30(%rcx)
    000005a6: 	pextrw	$0x3, %xmm0, %r9d
    000005ac: 	movw	%r9w, -0x28(%rcx)
    000005b1: 	pextrw	$0x4, %xmm0, %r9d
    000005b7: 	movw	%r9w, -0x20(%rcx)
    000005bc: 	pextrw	$0x5, %xmm0, %r9d
    000005c2: 	movw	%r9w, -0x18(%rcx)
    000005c7: 	pextrw	$0x6, %xmm0, %r9d
    000005cd: 	movw	%r9w, -0x10(%rcx)
    000005d2: 	pextrw	$0x7, %xmm0, %r9d
    000005d8: 	movw	%r9w, -0x8(%rcx)
    000005dd: 	cmpq	%r10, %r11
    000005e0: 	jne	.Ltmp815 # Offset: 1504
    000005e2: 	movl	%edx, %ecx
    000005e4: 	andl	$-0x8, %ecx
    000005e7: 	testb	$0x7, %dl
    000005ea: 	je	.Ltmp816 # Offset: 1514
    000005f0: 	movl	%ecx, %r11d
    000005f3: 	leal	(,%rcx,4), %r9d
    000005fb: 	movzwl	(%rbp,%r11,2), %ebx
    00000601: 	leaq	(%r11,%r11), %r10
    00000605: 	leal	0x3(%r9), %r11d
    00000609: 	movslq	%r11d, %r11
    0000060c: 	movw	%bx, (%rax,%r11,2)
    00000611: 	leal	0x1(%rcx), %r11d
    00000615: 	cmpl	%r11d, %edx
    00000618: 	jle	.Ltmp816 # Offset: 1560
    0000061e: 	movzwl	0x2(%rbp,%r10), %ebx
    00000624: 	leal	0x7(%r9), %r11d
    00000628: 	movslq	%r11d, %r11
    0000062b: 	movw	%bx, (%rax,%r11,2)
    00000630: 	leal	0x2(%rcx), %r11d
    00000634: 	cmpl	%r11d, %edx
    00000637: 	jle	.Ltmp816 # Offset: 1591
    00000639: 	movzwl	0x4(%rbp,%r10), %ebx
    0000063f: 	leal	0xb(%r9), %r11d
    00000643: 	movslq	%r11d, %r11
    00000646: 	movw	%bx, (%rax,%r11,2)
    0000064b: 	leal	0x3(%rcx), %r11d
    0000064f: 	cmpl	%edx, %r11d
    00000652: 	jge	.Ltmp816 # Offset: 1618
    00000654: 	movzwl	0x6(%rbp,%r10), %ebx
    0000065a: 	leal	0xf(%r9), %r11d
    0000065e: 	movslq	%r11d, %r11
    00000661: 	movw	%bx, (%rax,%r11,2)
    00000666: 	leal	0x4(%rcx), %r11d
    0000066a: 	cmpl	%r11d, %edx
    0000066d: 	jle	.Ltmp816 # Offset: 1645
    0000066f: 	movzwl	0x8(%rbp,%r10), %ebx
    00000675: 	leal	0x13(%r9), %r11d
    00000679: 	movslq	%r11d, %r11
    0000067c: 	movw	%bx, (%rax,%r11,2)
    00000681: 	leal	0x5(%rcx), %r11d
    00000685: 	cmpl	%r11d, %edx
    00000688: 	jle	.Ltmp816 # Offset: 1672
    0000068a: 	movzwl	0xa(%rbp,%r10), %ebx
    00000690: 	leal	0x17(%r9), %r11d
    00000694: 	addl	$0x6, %ecx
    00000697: 	movslq	%r11d, %r11
    0000069a: 	movw	%bx, (%rax,%r11,2)
    0000069f: 	cmpl	%edx, %ecx
    000006a1: 	jge	.Ltmp816 # Offset: 1697
    000006a3: 	movzwl	0xc(%rbp,%r10), %edx
    000006a9: 	addl	$0x1b, %r9d
    000006ad: 	movslq	%r9d, %r9
    000006b0: 	movw	%dx, (%rax,%r9,2)
.Ltmp816:
    000006b5: 	movl	-0x10(%rsp), %ecx
    000006b9: 	addq	-0x18(%rsp), %rax
    000006be: 	addq	%r8, %rdi
    000006c1: 	addq	%r8, %rsi
    000006c4: 	subl	$0x200, -0xc(%rsp)
    000006cc: 	addq	%r8, %r15
    000006cf: 	addq	%r8, %rbp
    000006d2: 	cmpl	%ecx, -0x24(%rsp)
    000006d6: 	jl	.Ltmp817 # Offset: 1750
.Ltmp803:
    000006dc: 	popq	%rbx
    000006dd: 	popq	%rbp
    000006de: 	popq	%r12
    000006e0: 	popq	%r13
    000006e2: 	popq	%r14
    000006e4: 	popq	%r15
    000006e6: 	retq # Offset: 1766
    000006e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp804:
    000006f0: 	movl	-0xc(%rsp), %ebx
    000006f4: 	movl	%ebx, %edx
    000006f6: 	testl	%ebx, %ebx
    000006f8: 	jle	.Ltmp818 # Offset: 1784
    000006fe: 	leal	(,%rbx,4), %ecx
    00000705: 	movslq	%ebx, %r8
    00000708: 	movslq	%ecx, %rcx
    0000070b: 	addq	%r8, %r8
    0000070e: 	addq	%rcx, %rcx
    00000711: 	movq	%rcx, -0x18(%rsp)
    00000716: 	jmp	.Ltmp819 # Offset: 1814
    0000071b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp814:
    00000720: 	movl	%edx, %edx
    00000722: 	xorl	%ecx, %ecx
    00000724: 	nopl	(%rax) # Size: 4
.Ltmp820:
    00000728: 	movzwl	(%rbp,%rcx,2), %r9d
    0000072e: 	movw	%r9w, 0x6(%rax,%rcx,8)
    00000734: 	addq	$0x1, %rcx
    00000738: 	cmpq	%rdx, %rcx
    0000073b: 	jne	.Ltmp820 # Offset: 1851
    0000073d: 	jmp	.Ltmp816 # Offset: 1853
    00000742: 	nopw	(%rax,%rax) # Size: 6
.Ltmp808:
    00000748: 	movl	%edx, %r10d
    0000074b: 	xorl	%r9d, %r9d
    0000074e: 	nop # Size: 2
.Ltmp821:
    00000750: 	movzwl	(%rsi,%r9,2), %r12d
    00000755: 	movw	%r12w, 0x2(%rax,%r9,8)
    0000075b: 	addq	$0x1, %r9
    0000075f: 	cmpq	%r10, %r9
    00000762: 	jne	.Ltmp821 # Offset: 1890
    00000764: 	jmp	.Ltmp810 # Offset: 1892
    00000769: 	nopl	(%rax) # Size: 7
.Ltmp805:
    00000770: 	xorl	%r9d, %r9d
    00000773: 	nopl	(%rax,%rax) # Size: 5
.Ltmp822:
    00000778: 	movzwl	(%rdi,%r9,2), %r10d
    0000077d: 	movw	%r10w, (%rax,%r9,8)
    00000782: 	addq	$0x1, %r9
    00000786: 	cmpl	%r9d, %edx
    00000789: 	jg	.Ltmp822 # Offset: 1929
    0000078b: 	jmp	.Ltmp807 # Offset: 1931
.Ltmp811:
    00000790: 	movl	%edx, %r10d
    00000793: 	xorl	%r9d, %r9d
    00000796: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp823:
    000007a0: 	movzwl	(%r15,%r9,2), %r11d
    000007a5: 	movw	%r11w, 0x4(%rax,%r9,8)
    000007ab: 	addq	$0x1, %r9
    000007af: 	cmpq	%r10, %r9
    000007b2: 	jne	.Ltmp823 # Offset: 1970
    000007b4: 	jmp	.Ltmp813 # Offset: 1972
    000007b9: 	nopl	(%rax) # Size: 7
.Ltmp818:
    000007c0: 	movslq	%ebx, %r8
    000007c3: 	leal	(,%r8,4), %edx
    000007cb: 	addq	%r8, %r8
    000007ce: 	movslq	%edx, %rdx
    000007d1: 	addq	%rdx, %rdx
    000007d4: 	movq	%rdx, -0x18(%rsp)
    000007d9: 	jmp	.Ltmp816 # Offset: 2009
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version6ItEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave2to2_version1IjEvPT_PKS0_S3_i" after disassembly {
  Number      : 101
  State       : disassembled
  Address     : 0x15020
  Size        : 0x138
  MaxSize     : 0x140
  Offset      : 0x15020
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version1IjEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0100:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp824 # Offset: 6
    0000000c: 	movslq	%ecx, %r8
    0000000f: 	pushq	%rbx
    00000010: 	movl	%ecx, %r9d
    00000013: 	leaq	(,%r8,4), %rax
    0000001b: 	leaq	(%rdi,%r8,8), %r11
    0000001f: 	leaq	(%rsi,%rax), %r10
    00000023: 	cmpq	%r10, %rdi
    00000026: 	setae	%r10b
    0000002a: 	cmpq	%r11, %rsi
    0000002d: 	setae	%bl
    00000030: 	addq	%rdx, %rax
    00000033: 	orl	%ebx, %r10d
    00000036: 	cmpq	%rax, %rdi
    00000039: 	setae	%al
    0000003c: 	cmpq	%r11, %rdx
    0000003f: 	setae	%r11b
    00000043: 	orl	%r11d, %eax
    00000046: 	testb	%al, %r10b
    00000049: 	je	.Ltmp825 # Offset: 73
    0000004f: 	cmpl	$0x1, %ecx
    00000052: 	je	.Ltmp825 # Offset: 82
    00000058: 	leal	-0x1(%rcx), %eax
    0000005b: 	cmpl	$0x2, %eax
    0000005e: 	jbe	.Ltmp826 # Offset: 94
    00000064: 	movl	%ecx, %r8d
    00000067: 	xorl	%eax, %eax
    00000069: 	shrl	$0x2, %r8d
    0000006d: 	shlq	$0x4, %r8
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp827:
    00000078: 	movdqu	(%rsi,%rax), %xmm0
    0000007d: 	movdqu	(%rdx,%rax), %xmm1
    00000082: 	movdqa	%xmm0, %xmm2
    00000086: 	punpckhdq	%xmm1, %xmm0
    0000008a: 	punpckldq	%xmm1, %xmm2
    0000008e: 	movups	%xmm0, 0x10(%rdi,%rax,2)
    00000093: 	movups	%xmm2, (%rdi,%rax,2)
    00000097: 	addq	$0x10, %rax
    0000009b: 	cmpq	%rax, %r8
    0000009e: 	jne	.Ltmp827 # Offset: 158
    000000a0: 	movl	%ecx, %r8d
    000000a3: 	andl	$-0x4, %r8d
    000000a7: 	movl	%r8d, %eax
    000000aa: 	cmpl	%r8d, %ecx
    000000ad: 	je	.Ltmp828 # Offset: 173
    000000af: 	subl	%r8d, %ecx
    000000b2: 	movl	%ecx, %r9d
    000000b5: 	cmpl	$0x1, %ecx
    000000b8: 	je	.Ltmp829 # Offset: 184
.Ltmp831:
    000000ba: 	movl	%r8d, %ecx
    000000bd: 	movq	(%rsi,%rcx,4), %xmm0
    000000c2: 	movq	(%rdx,%rcx,4), %xmm1
    000000c7: 	leaq	(%rdi,%rcx,8), %r8
    000000cb: 	movl	%r9d, %ecx
    000000ce: 	andl	$-0x2, %ecx
    000000d1: 	movdqa	%xmm0, %xmm2
    000000d5: 	punpckldq	%xmm1, %xmm0
    000000d9: 	addl	%ecx, %eax
    000000db: 	punpckldq	%xmm1, %xmm2
    000000df: 	pshufd	$0xe, %xmm0, %xmm0
    000000e4: 	movq	%xmm2, (%r8)
    000000e9: 	movq	%xmm0, 0x8(%r8)
    000000ef: 	cmpl	%ecx, %r9d
    000000f2: 	je	.Ltmp828 # Offset: 242
.Ltmp829:
    000000f4: 	movslq	%eax, %rcx
    000000f7: 	addl	%eax, %eax
    000000f9: 	movl	(%rsi,%rcx,4), %esi
    000000fc: 	cltq
    000000fe: 	movl	%esi, (%rdi,%rax,4)
    00000101: 	movl	(%rdx,%rcx,4), %edx
    00000104: 	movl	%edx, 0x4(%rdi,%rax,4)
.Ltmp828:
    00000108: 	popq	%rbx
    00000109: 	retq # Offset: 265
    0000010a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp825:
    00000110: 	xorl	%eax, %eax
    00000112: 	nopw	(%rax,%rax) # Size: 6
.Ltmp830:
    00000118: 	movl	(%rsi,%rax,4), %ecx
    0000011b: 	movl	%ecx, (%rdi,%rax,8)
    0000011e: 	movl	(%rdx,%rax,4), %ecx
    00000121: 	movl	%ecx, 0x4(%rdi,%rax,8)
    00000125: 	addq	$0x1, %rax
    00000129: 	cmpq	%rax, %r8
    0000012c: 	jne	.Ltmp830 # Offset: 300
    0000012e: 	popq	%rbx
    0000012f: 	retq # Offset: 303
.Ltmp824:
    00000130: 	retq # Offset: 304
.Ltmp826:
    00000131: 	xorl	%r8d, %r8d
    00000134: 	xorl	%eax, %eax
    00000136: 	jmp	.Ltmp831 # Offset: 310
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version1IjEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version2IjEvPT_PKS0_S3_i" after disassembly {
  Number      : 102
  State       : disassembled
  Address     : 0x15160
  Size        : 0x152
  MaxSize     : 0x160
  Offset      : 0x15160
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version2IjEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0101:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp832 # Offset: 6
    0000000c: 	movslq	%ecx, %r8
    0000000f: 	pushq	%rbx
    00000010: 	movl	%ecx, %r11d
    00000013: 	leaq	(,%r8,4), %rax
    0000001b: 	leaq	(%rdi,%r8,8), %r10
    0000001f: 	leaq	(%rsi,%rax), %r9
    00000023: 	cmpq	%r9, %rdi
    00000026: 	setae	%r9b
    0000002a: 	cmpq	%r10, %rsi
    0000002d: 	setae	%bl
    00000030: 	addq	%rdx, %rax
    00000033: 	orl	%ebx, %r9d
    00000036: 	cmpq	%rax, %rdi
    00000039: 	setae	%al
    0000003c: 	cmpq	%r10, %rdx
    0000003f: 	setae	%r10b
    00000043: 	orl	%r10d, %eax
    00000046: 	testb	%al, %r9b
    00000049: 	je	.Ltmp833 # Offset: 73
    0000004f: 	cmpl	$0x1, %ecx
    00000052: 	je	.Ltmp833 # Offset: 82
    00000058: 	leal	-0x1(%rcx), %eax
    0000005b: 	cmpl	$0x2, %eax
    0000005e: 	jbe	.Ltmp834 # Offset: 94
    00000064: 	movl	%ecx, %r8d
    00000067: 	xorl	%eax, %eax
    00000069: 	shrl	$0x2, %r8d
    0000006d: 	shlq	$0x4, %r8
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp835:
    00000078: 	movdqu	(%rsi,%rax), %xmm0
    0000007d: 	movdqu	(%rdx,%rax), %xmm1
    00000082: 	movdqa	%xmm0, %xmm2
    00000086: 	punpckhdq	%xmm1, %xmm0
    0000008a: 	punpckldq	%xmm1, %xmm2
    0000008e: 	movups	%xmm0, 0x10(%rdi,%rax,2)
    00000093: 	movups	%xmm2, (%rdi,%rax,2)
    00000097: 	addq	$0x10, %rax
    0000009b: 	cmpq	%rax, %r8
    0000009e: 	jne	.Ltmp835 # Offset: 158
    000000a0: 	movl	%ecx, %ebx
    000000a2: 	andl	$-0x4, %ebx
    000000a5: 	movl	%ebx, %r10d
    000000a8: 	leaq	(,%r10,4), %r8
    000000b0: 	leaq	(%rdi,%r10,8), %rax
    000000b4: 	leaq	(%rsi,%r8), %r9
    000000b8: 	addq	%rdx, %r8
    000000bb: 	cmpl	%ebx, %ecx
    000000bd: 	je	.Ltmp836 # Offset: 189
    000000bf: 	subl	%ebx, %ecx
    000000c1: 	movl	%ecx, %r11d
    000000c4: 	cmpl	$0x1, %ecx
    000000c7: 	je	.Ltmp837 # Offset: 199
.Ltmp839:
    000000c9: 	movq	(%rdx,%r10,4), %xmm1
    000000cf: 	movq	(%rsi,%r10,4), %xmm0
    000000d5: 	leaq	(%rdi,%r10,8), %rcx
    000000d9: 	movdqa	%xmm0, %xmm2
    000000dd: 	punpckldq	%xmm1, %xmm0
    000000e1: 	punpckldq	%xmm1, %xmm2
    000000e5: 	pshufd	$0xe, %xmm0, %xmm0
    000000ea: 	movq	%xmm2, (%rcx)
    000000ee: 	movq	%xmm0, 0x8(%rcx)
    000000f3: 	movl	%r11d, %ecx
    000000f6: 	andl	$-0x2, %ecx
    000000f9: 	movl	%ecx, %edx
    000000fb: 	leaq	(%rax,%rdx,8), %rax
    000000ff: 	shlq	$0x2, %rdx
    00000103: 	addq	%rdx, %r9
    00000106: 	addq	%rdx, %r8
    00000109: 	cmpl	%ecx, %r11d
    0000010c: 	je	.Ltmp836 # Offset: 268
.Ltmp837:
    0000010e: 	movl	(%r9), %edx
    00000111: 	movl	%edx, (%rax)
    00000113: 	movl	(%r8), %edx
    00000116: 	movl	%edx, 0x4(%rax)
.Ltmp836:
    00000119: 	popq	%rbx
    0000011a: 	retq # Offset: 282
    0000011b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp833:
    00000120: 	xorl	%eax, %eax
    00000122: 	nopw	(%rax,%rax) # Size: 6
.Ltmp838:
    00000128: 	movl	(%rsi,%rax,4), %ecx
    0000012b: 	movl	%ecx, (%rdi,%rax,8)
    0000012e: 	movl	(%rdx,%rax,4), %ecx
    00000131: 	movl	%ecx, 0x4(%rdi,%rax,8)
    00000135: 	addq	$0x1, %rax
    00000139: 	cmpq	%rax, %r8
    0000013c: 	jne	.Ltmp838 # Offset: 316
    0000013e: 	popq	%rbx
    0000013f: 	retq # Offset: 319
.Ltmp832:
    00000140: 	retq # Offset: 320
.Ltmp834:
    00000141: 	movq	%rdx, %r8
    00000144: 	movq	%rsi, %r9
    00000147: 	movq	%rdi, %rax
    0000014a: 	xorl	%r10d, %r10d
    0000014d: 	jmp	.Ltmp839 # Offset: 333
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version2IjEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version3IjEvPT_PKS0_S3_i" after disassembly {
  Number      : 103
  State       : disassembled
  Address     : 0x152c0
  Size        : 0x1d1
  MaxSize     : 0x1e0
  Offset      : 0x152c0
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version3IjEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0102:
    00000000: 	endbr64
    00000004: 	movslq	%ecx, %rcx
    00000007: 	testq	%rcx, %rcx
    0000000a: 	je	.Ltmp840 # Offset: 10
    00000010: 	movq	%rdi, %r8
    00000013: 	leaq	-0x1(%rcx), %rax
    00000017: 	movq	%rsi, %rdi
    0000001a: 	pushq	%rbx
    0000001b: 	cmpq	$0x6, %rax
    0000001f: 	leaq	(,%rcx,4), %rbx
    00000027: 	leaq	0x4(%r8,%rax,8), %rax
    0000002c: 	movq	%rdx, %rsi
    0000002f: 	seta	%r11b
    00000033: 	leaq	(%rdi,%rbx), %rdx
    00000037: 	cmpq	%rax, %rdi
    0000003a: 	setae	%al
    0000003d: 	cmpq	%rdx, %r8
    00000040: 	setae	%dl
    00000043: 	orb	%dl, %al
    00000045: 	je	.Ltmp841 # Offset: 69
    0000004b: 	testb	%r11b, %r11b
    0000004e: 	je	.Ltmp841 # Offset: 78
    00000054: 	movq	%rcx, %r10
    00000057: 	movq	%r8, %rax
    0000005a: 	xorl	%edx, %edx
    0000005c: 	shrq	$0x2, %r10
.Ltmp842:
    00000060: 	movq	%rdx, %r9
    00000063: 	addq	$0x1, %rdx
    00000067: 	addq	$0x20, %rax
    0000006b: 	shlq	$0x4, %r9
    0000006f: 	movdqu	(%rdi,%r9), %xmm0
    00000075: 	pshufd	$0x55, %xmm0, %xmm1
    0000007a: 	movd	%xmm0, -0x20(%rax)
    0000007f: 	movd	%xmm1, -0x18(%rax)
    00000084: 	movdqa	%xmm0, %xmm1
    00000088: 	punpckhdq	%xmm0, %xmm1
    0000008c: 	pshufd	$0xff, %xmm0, %xmm0
    00000091: 	movd	%xmm1, -0x10(%rax)
    00000096: 	movd	%xmm0, -0x8(%rax)
    0000009b: 	cmpq	%r10, %rdx
    0000009e: 	jne	.Ltmp842 # Offset: 158
    000000a0: 	movq	%rcx, %rax
    000000a3: 	andq	$-0x4, %rax
    000000a7: 	leaq	(%rdi,%rax,4), %rdi
    000000ab: 	leaq	(%r8,%rax,8), %rdx
    000000af: 	cmpq	%rax, %rcx
    000000b2: 	je	.Ltmp843 # Offset: 178
    000000b4: 	movl	(%rdi), %r9d
    000000b7: 	movl	%r9d, (%rdx)
    000000ba: 	leaq	0x1(%rax), %r9
    000000be: 	cmpq	%r9, %rcx
    000000c1: 	jbe	.Ltmp843 # Offset: 193
    000000c3: 	movl	0x4(%rdi), %r9d
    000000c7: 	addq	$0x2, %rax
    000000cb: 	movl	%r9d, 0x8(%rdx)
    000000cf: 	cmpq	%rax, %rcx
    000000d2: 	jbe	.Ltmp843 # Offset: 210
    000000d4: 	movl	0x8(%rdi), %eax
    000000d7: 	movl	%eax, 0x10(%rdx)
.Ltmp843:
    000000da: 	leaq	(%r8,%rcx,8), %rax
    000000de: 	leaq	0x4(%r8), %r10
    000000e2: 	cmpq	%rax, %rsi
    000000e5: 	setae	%al
    000000e8: 	addq	%rsi, %rbx
    000000eb: 	cmpq	%rbx, %r10
    000000ee: 	setae	%dl
    000000f1: 	orb	%dl, %al
    000000f3: 	je	.Ltmp844 # Offset: 243
    000000f9: 	movq	%rcx, %r9
    000000fc: 	movq	%r10, %rax
    000000ff: 	xorl	%edx, %edx
    00000101: 	shrq	$0x2, %r9
    00000105: 	testb	%r11b, %r11b
    00000108: 	je	.Ltmp844 # Offset: 264
    0000010e: 	nop # Size: 2
.Ltmp845:
    00000110: 	movq	%rdx, %rdi
    00000113: 	addq	$0x1, %rdx
    00000117: 	addq	$0x20, %rax
    0000011b: 	shlq	$0x4, %rdi
    0000011f: 	movdqu	(%rsi,%rdi), %xmm0
    00000124: 	pshufd	$0x55, %xmm0, %xmm1
    00000129: 	movd	%xmm0, -0x20(%rax)
    0000012e: 	movd	%xmm1, -0x18(%rax)
    00000133: 	movdqa	%xmm0, %xmm1
    00000137: 	punpckhdq	%xmm0, %xmm1
    0000013b: 	pshufd	$0xff, %xmm0, %xmm0
    00000140: 	movd	%xmm1, -0x10(%rax)
    00000145: 	movd	%xmm0, -0x8(%rax)
    0000014a: 	cmpq	%rdx, %r9
    0000014d: 	jne	.Ltmp845 # Offset: 333
    0000014f: 	movq	%rcx, %rax
    00000152: 	andq	$-0x4, %rax
    00000156: 	leaq	(%rsi,%rax,4), %rsi
    0000015a: 	leaq	(%r10,%rax,8), %rdx
    0000015e: 	cmpq	%rax, %rcx
    00000161: 	je	.Ltmp846 # Offset: 353
    00000163: 	movl	(%rsi), %edi
    00000165: 	movl	%edi, (%rdx)
    00000167: 	leaq	0x1(%rax), %rdi
    0000016b: 	cmpq	%rdi, %rcx
    0000016e: 	jbe	.Ltmp846 # Offset: 366
    00000170: 	movl	0x4(%rsi), %edi
    00000173: 	addq	$0x2, %rax
    00000177: 	movl	%edi, 0x8(%rdx)
    0000017a: 	cmpq	%rax, %rcx
    0000017d: 	jbe	.Ltmp846 # Offset: 381
    0000017f: 	movl	0x8(%rsi), %eax
    00000182: 	movl	%eax, 0x10(%rdx)
.Ltmp846:
    00000185: 	popq	%rbx
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp844:
    00000190: 	xorl	%eax, %eax
    00000192: 	nopw	(%rax,%rax) # Size: 6
.Ltmp847:
    00000198: 	movl	(%rsi,%rax,4), %edx
    0000019b: 	movl	%edx, 0x4(%r8,%rax,8)
    000001a0: 	addq	$0x1, %rax
    000001a4: 	cmpq	%rax, %rcx
    000001a7: 	jne	.Ltmp847 # Offset: 423
    000001a9: 	popq	%rbx
    000001aa: 	retq # Offset: 426
    000001ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp841:
    000001b0: 	xorl	%eax, %eax
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp848:
    000001b8: 	movl	(%rdi,%rax,4), %edx
    000001bb: 	movl	%edx, (%r8,%rax,8)
    000001bf: 	addq	$0x1, %rax
    000001c3: 	cmpq	%rax, %rcx
    000001c6: 	jne	.Ltmp848 # Offset: 454
    000001c8: 	jmp	.Ltmp843 # Offset: 456
    000001cd: 	nopl	(%rax) # Size: 3
.Ltmp840:
    000001d0: 	retq # Offset: 464
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version3IjEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version4IjEvPT_PKS0_S3_i" after disassembly {
  Number      : 104
  State       : disassembled
  Address     : 0x154a0
  Size        : 0x295
  MaxSize     : 0x2a0
  Offset      : 0x154a0
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version4IjEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0103:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%ecx, -0xc(%rsp)
    00000012: 	testl	%ecx, %ecx
    00000014: 	jle	.Ltmp849 # Offset: 20
    0000001a: 	movq	%rdi, %r8
    0000001d: 	movl	%ecx, %r14d
    00000020: 	movq	%rsi, %rdi
    00000023: 	xorl	%ebx, %ebx
    00000025: 	movq	%rdx, %rsi
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp857:
    00000030: 	addl	$0x200, %ebx
    00000036: 	cmpl	-0xc(%rsp), %ebx
    0000003a: 	jg	.Ltmp850 # Offset: 58
    00000040: 	movl	$0x800, %r12d
    00000046: 	movl	$0x1000, %ebp
    0000004b: 	movl	$0x200, %ecx
.Ltmp858:
    00000050: 	cmpq	$0x7, %rcx
    00000054: 	movl	$0x4, %edx
    00000059: 	leaq	-0x4(,%rcx,8), %rax
    00000061: 	seta	%r15b
    00000065: 	testq	%rcx, %rcx
    00000068: 	leaq	(,%rcx,4), %r10
    00000070: 	cmoveq	%rdx, %rax
    00000074: 	cmoveq	%rdx, %r10
    00000078: 	addq	%r8, %rax
    0000007b: 	leaq	(%rdi,%r10), %rdx
    0000007f: 	cmpq	%rax, %rdi
    00000082: 	setae	%al
    00000085: 	cmpq	%rdx, %r8
    00000088: 	setae	%dl
    0000008b: 	orb	%dl, %al
    0000008d: 	je	.Ltmp851 # Offset: 141
    00000093: 	testb	%r15b, %r15b
    00000096: 	je	.Ltmp851 # Offset: 150
    0000009c: 	testq	%rcx, %rcx
    0000009f: 	movl	$0x1, %r13d
    000000a5: 	movq	%r8, %rax
    000000a8: 	cmovneq	%rcx, %r13
    000000ac: 	xorl	%edx, %edx
    000000ae: 	movq	%r13, %r11
    000000b1: 	shrq	$0x2, %r11
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp852:
    000000b8: 	movq	%rdx, %r9
    000000bb: 	addq	$0x1, %rdx
    000000bf: 	addq	$0x20, %rax
    000000c3: 	shlq	$0x4, %r9
    000000c7: 	movdqu	(%rdi,%r9), %xmm0
    000000cd: 	pshufd	$0x55, %xmm0, %xmm1
    000000d2: 	movd	%xmm0, -0x20(%rax)
    000000d7: 	movd	%xmm1, -0x18(%rax)
    000000dc: 	movdqa	%xmm0, %xmm1
    000000e0: 	punpckhdq	%xmm0, %xmm1
    000000e4: 	pshufd	$0xff, %xmm0, %xmm0
    000000e9: 	movd	%xmm1, -0x10(%rax)
    000000ee: 	movd	%xmm0, -0x8(%rax)
    000000f3: 	cmpq	%r11, %rdx
    000000f6: 	jne	.Ltmp852 # Offset: 246
    000000f8: 	movq	%r13, %rax
    000000fb: 	andq	$-0x4, %rax
    000000ff: 	leaq	(%rdi,%rax,4), %r9
    00000103: 	leaq	(%r8,%rax,8), %rdx
    00000107: 	cmpq	%rax, %r13
    0000010a: 	je	.Ltmp853 # Offset: 266
    0000010c: 	movl	(%r9), %r11d
    0000010f: 	movl	%r11d, (%rdx)
    00000112: 	leaq	0x1(%rax), %r11
    00000116: 	cmpq	%r11, %rcx
    00000119: 	jbe	.Ltmp853 # Offset: 281
    0000011b: 	movl	0x4(%r9), %r11d
    0000011f: 	addq	$0x2, %rax
    00000123: 	movl	%r11d, 0x8(%rdx)
    00000127: 	cmpq	%rax, %rcx
    0000012a: 	jbe	.Ltmp853 # Offset: 298
    0000012c: 	movl	0x8(%r9), %eax
    00000130: 	movl	%eax, 0x10(%rdx)
.Ltmp853:
    00000133: 	testq	%rcx, %rcx
    00000136: 	movl	$0x8, %edx
    0000013b: 	leaq	(,%rcx,8), %rax
    00000143: 	cmoveq	%rdx, %rax
    00000147: 	leaq	0x4(%r8), %r11
    0000014b: 	addq	%r8, %rax
    0000014e: 	cmpq	%rax, %rsi
    00000151: 	setae	%al
    00000154: 	addq	%rsi, %r10
    00000157: 	cmpq	%r10, %r11
    0000015a: 	setae	%dl
    0000015d: 	orb	%dl, %al
    0000015f: 	je	.Ltmp854 # Offset: 351
    00000165: 	testb	%r15b, %r15b
    00000168: 	je	.Ltmp854 # Offset: 360
    0000016e: 	testq	%rcx, %rcx
    00000171: 	movl	$0x1, %r13d
    00000177: 	movq	%r11, %rax
    0000017a: 	cmovneq	%rcx, %r13
    0000017e: 	xorl	%edx, %edx
    00000180: 	movq	%r13, %r10
    00000183: 	shrq	$0x2, %r10
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp855:
    00000190: 	movq	%rdx, %r9
    00000193: 	addq	$0x1, %rdx
    00000197: 	addq	$0x20, %rax
    0000019b: 	shlq	$0x4, %r9
    0000019f: 	movdqu	(%rsi,%r9), %xmm0
    000001a5: 	pshufd	$0x55, %xmm0, %xmm1
    000001aa: 	movd	%xmm0, -0x20(%rax)
    000001af: 	movd	%xmm1, -0x18(%rax)
    000001b4: 	movdqa	%xmm0, %xmm1
    000001b8: 	punpckhdq	%xmm0, %xmm1
    000001bc: 	pshufd	$0xff, %xmm0, %xmm0
    000001c1: 	movd	%xmm1, -0x10(%rax)
    000001c6: 	movd	%xmm0, -0x8(%rax)
    000001cb: 	cmpq	%rdx, %r10
    000001ce: 	jne	.Ltmp855 # Offset: 462
    000001d0: 	movq	%r13, %rax
    000001d3: 	andq	$-0x4, %rax
    000001d7: 	leaq	(%rsi,%rax,4), %r9
    000001db: 	leaq	(%r11,%rax,8), %rdx
    000001df: 	cmpq	%rax, %r13
    000001e2: 	je	.Ltmp856 # Offset: 482
    000001e4: 	movl	(%r9), %r10d
    000001e7: 	movl	%r10d, (%rdx)
    000001ea: 	leaq	0x1(%rax), %r10
    000001ee: 	cmpq	%r10, %rcx
    000001f1: 	jbe	.Ltmp856 # Offset: 497
    000001f3: 	movl	0x4(%r9), %r10d
    000001f7: 	addq	$0x2, %rax
    000001fb: 	movl	%r10d, 0x8(%rdx)
    000001ff: 	cmpq	%rcx, %rax
    00000202: 	jae	.Ltmp856 # Offset: 514
    00000204: 	movl	0x8(%r9), %eax
    00000208: 	movl	%eax, 0x10(%rdx)
.Ltmp856:
    0000020b: 	addq	%rbp, %r8
    0000020e: 	addq	%r12, %rdi
    00000211: 	addq	%r12, %rsi
    00000214: 	subl	$0x200, %r14d
    0000021b: 	cmpl	-0xc(%rsp), %ebx
    0000021f: 	jl	.Ltmp857 # Offset: 543
.Ltmp849:
    00000225: 	popq	%rbx
    00000226: 	popq	%rbp
    00000227: 	popq	%r12
    00000229: 	popq	%r13
    0000022b: 	popq	%r14
    0000022d: 	popq	%r15
    0000022f: 	retq # Offset: 559
.Ltmp850:
    00000230: 	leal	(%r14,%r14), %ebp
    00000234: 	movslq	%r14d, %rcx
    00000237: 	movslq	%ebp, %rbp
    0000023a: 	leaq	(,%rcx,4), %r12
    00000242: 	shlq	$0x2, %rbp
    00000246: 	testq	%rcx, %rcx
    00000249: 	jne	.Ltmp858 # Offset: 585
    0000024f: 	jmp	.Ltmp856 # Offset: 591
    00000251: 	nopl	(%rax) # Size: 7
.Ltmp854:
    00000258: 	xorl	%eax, %eax
    0000025a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp859:
    00000260: 	movl	(%rsi,%rax,4), %edx
    00000263: 	movl	%edx, 0x4(%r8,%rax,8)
    00000268: 	addq	$0x1, %rax
    0000026c: 	cmpq	%rcx, %rax
    0000026f: 	jb	.Ltmp859 # Offset: 623
    00000271: 	jmp	.Ltmp856 # Offset: 625
    00000273: 	nopl	(%rax,%rax) # Size: 5
.Ltmp851:
    00000278: 	xorl	%eax, %eax
    0000027a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp860:
    00000280: 	movl	(%rdi,%rax,4), %edx
    00000283: 	movl	%edx, (%r8,%rax,8)
    00000287: 	addq	$0x1, %rax
    0000028b: 	cmpq	%rax, %rcx
    0000028e: 	ja	.Ltmp860 # Offset: 654
    00000290: 	jmp	.Ltmp853 # Offset: 656
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version4IjEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version5IjEvPT_PKS0_S3_i" after disassembly {
  Number      : 105
  State       : disassembled
  Address     : 0x15740
  Size        : 0x2be
  MaxSize     : 0x2c0
  Offset      : 0x15740
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version5IjEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0104:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%ecx, -0xc(%rsp)
    00000012: 	testl	%ecx, %ecx
    00000014: 	jle	.Ltmp861 # Offset: 20
    0000001a: 	movl	%ecx, %r11d
    0000001d: 	xorl	%r8d, %r8d
.Ltmp869:
    00000020: 	addl	$0x200, %r8d
    00000027: 	cmpl	-0xc(%rsp), %r8d
    0000002c: 	jg	.Ltmp862 # Offset: 44
    00000032: 	movl	$0x800, %r10d
    00000038: 	movl	$0x1000, %ebp
    0000003d: 	movl	$0x200, %eax
.Ltmp870:
    00000042: 	movslq	%eax, %rbx
    00000045: 	testl	%eax, %eax
    00000047: 	movl	$0x4, %r15d
    0000004d: 	leaq	-0x4(,%rbx,8), %r9
    00000055: 	leaq	(,%rbx,4), %rcx
    0000005d: 	cmovleq	%r15, %r9
    00000061: 	addq	%rdi, %r9
    00000064: 	cmpq	%r9, %rsi
    00000067: 	movl	$0x4, %r9d
    0000006d: 	setae	%r12b
    00000071: 	testl	%eax, %eax
    00000073: 	cmovgq	%rcx, %r9
    00000077: 	addq	%rsi, %r9
    0000007a: 	cmpq	%r9, %rdi
    0000007d: 	setae	%r9b
    00000081: 	orb	%r9b, %r12b
    00000084: 	je	.Ltmp863 # Offset: 132
    0000008a: 	cmpl	$0x7, %eax
    0000008d: 	jle	.Ltmp863 # Offset: 141
    00000093: 	testl	%eax, %eax
    00000095: 	movl	$0x1, %r13d
    0000009b: 	movq	%rsi, %r12
    0000009e: 	movq	%rdi, %r9
    000000a1: 	cmovgl	%eax, %r13d
    000000a5: 	movl	%r13d, %r14d
    000000a8: 	shrl	$0x2, %r14d
    000000ac: 	subl	$0x1, %r14d
    000000b0: 	shlq	$0x4, %r14
    000000b4: 	leaq	0x10(%rsi,%r14), %r14
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp864:
    000000c0: 	movdqu	(%r12), %xmm0
    000000c6: 	addq	$0x10, %r12
    000000ca: 	addq	$0x20, %r9
    000000ce: 	pshufd	$0x55, %xmm0, %xmm1
    000000d3: 	movd	%xmm0, -0x20(%r9)
    000000d9: 	movd	%xmm1, -0x18(%r9)
    000000df: 	movdqa	%xmm0, %xmm1
    000000e3: 	punpckhdq	%xmm0, %xmm1
    000000e7: 	pshufd	$0xff, %xmm0, %xmm0
    000000ec: 	movd	%xmm1, -0x10(%r9)
    000000f2: 	movd	%xmm0, -0x8(%r9)
    000000f8: 	cmpq	%r14, %r12
    000000fb: 	jne	.Ltmp864 # Offset: 251
    000000fd: 	movl	%r13d, %r9d
    00000100: 	andl	$-0x4, %r9d
    00000104: 	andl	$0x3, %r13d
    00000108: 	je	.Ltmp865 # Offset: 264
    0000010a: 	movl	%r9d, %r13d
    0000010d: 	leal	(%r9,%r9), %r12d
    00000111: 	leaq	(,%r13,4), %r15
    00000119: 	movl	(%rsi,%r13,4), %r13d
    0000011d: 	movslq	%r12d, %r12
    00000120: 	leaq	(,%r12,4), %r14
    00000128: 	movl	%r13d, (%rdi,%r12,4)
    0000012c: 	leal	0x1(%r9), %r12d
    00000130: 	cmpl	%r12d, %eax
    00000133: 	jle	.Ltmp865 # Offset: 307
    00000135: 	movl	0x4(%rsi,%r15), %r12d
    0000013a: 	addl	$0x2, %r9d
    0000013e: 	movl	%r12d, 0x8(%rdi,%r14)
    00000143: 	cmpl	%r9d, %eax
    00000146: 	jle	.Ltmp865 # Offset: 326
    00000148: 	movl	0x8(%rsi,%r15), %r9d
    0000014d: 	movl	%r9d, 0x10(%rdi,%r14)
.Ltmp865:
    00000152: 	leaq	(%rdi,%rbx,8), %rbx
    00000156: 	leaq	0x4(%rdi), %r9
    0000015a: 	cmpq	%rbx, %rdx
    0000015d: 	setae	%bl
    00000160: 	addq	%rdx, %rcx
    00000163: 	cmpq	%rcx, %r9
    00000166: 	setae	%cl
    00000169: 	orb	%cl, %bl
    0000016b: 	je	.Ltmp866 # Offset: 363
    00000171: 	leal	-0x1(%rax), %ecx
    00000174: 	cmpl	$0x6, %ecx
    00000177: 	jbe	.Ltmp866 # Offset: 375
    0000017d: 	movq	%r9, %rcx
    00000180: 	movl	%eax, %r9d
    00000183: 	movq	%rdx, %rbx
    00000186: 	shrl	$0x2, %r9d
    0000018a: 	subl	$0x1, %r9d
    0000018e: 	shlq	$0x4, %r9
    00000192: 	leaq	0x10(%rdx,%r9), %r9
    00000197: 	nopw	(%rax,%rax) # Size: 9
.Ltmp867:
    000001a0: 	movdqu	(%rbx), %xmm0
    000001a4: 	addq	$0x10, %rbx
    000001a8: 	addq	$0x20, %rcx
    000001ac: 	pshufd	$0x55, %xmm0, %xmm1
    000001b1: 	movd	%xmm0, -0x20(%rcx)
    000001b6: 	movd	%xmm1, -0x18(%rcx)
    000001bb: 	movdqa	%xmm0, %xmm1
    000001bf: 	punpckhdq	%xmm0, %xmm1
    000001c3: 	pshufd	$0xff, %xmm0, %xmm0
    000001c8: 	movd	%xmm1, -0x10(%rcx)
    000001cd: 	movd	%xmm0, -0x8(%rcx)
    000001d2: 	cmpq	%r9, %rbx
    000001d5: 	jne	.Ltmp867 # Offset: 469
    000001d7: 	movl	%eax, %ecx
    000001d9: 	andl	$-0x4, %ecx
    000001dc: 	testb	$0x3, %al
    000001de: 	je	.Ltmp868 # Offset: 478
    000001e0: 	movl	%ecx, %ebx
    000001e2: 	leal	(%rcx,%rcx), %r9d
    000001e6: 	movl	(%rdx,%rbx,4), %r13d
    000001ea: 	leaq	(,%rbx,4), %r12
    000001f2: 	leal	0x1(%r9), %ebx
    000001f6: 	movslq	%ebx, %rbx
    000001f9: 	movl	%r13d, (%rdi,%rbx,4)
    000001fd: 	leal	0x1(%rcx), %ebx
    00000200: 	cmpl	%ebx, %eax
    00000202: 	jle	.Ltmp868 # Offset: 514
    00000204: 	movl	0x4(%rdx,%r12), %r13d
    00000209: 	leal	0x3(%r9), %ebx
    0000020d: 	addl	$0x2, %ecx
    00000210: 	movslq	%ebx, %rbx
    00000213: 	movl	%r13d, (%rdi,%rbx,4)
    00000217: 	cmpl	%ecx, %eax
    00000219: 	jle	.Ltmp868 # Offset: 537
    0000021b: 	movl	0x8(%rdx,%r12), %eax
    00000220: 	addl	$0x5, %r9d
    00000224: 	movslq	%r9d, %r9
    00000227: 	movl	%eax, (%rdi,%r9,4)
.Ltmp868:
    0000022b: 	addq	%rbp, %rdi
    0000022e: 	addq	%r10, %rsi
    00000231: 	addq	%r10, %rdx
    00000234: 	subl	$0x200, %r11d
    0000023b: 	cmpl	-0xc(%rsp), %r8d
    00000240: 	jl	.Ltmp869 # Offset: 576
.Ltmp861:
    00000246: 	popq	%rbx
    00000247: 	popq	%rbp
    00000248: 	popq	%r12
    0000024a: 	popq	%r13
    0000024c: 	popq	%r14
    0000024e: 	popq	%r15
    00000250: 	retq # Offset: 592
    00000251: 	nopl	(%rax) # Size: 7
.Ltmp862:
    00000258: 	leal	(%r11,%r11), %ebp
    0000025c: 	movslq	%r11d, %r10
    0000025f: 	movl	%r11d, %eax
    00000262: 	movslq	%ebp, %rbp
    00000265: 	shlq	$0x2, %r10
    00000269: 	shlq	$0x2, %rbp
    0000026d: 	testl	%r11d, %r11d
    00000270: 	jg	.Ltmp870 # Offset: 624
    00000276: 	jmp	.Ltmp868 # Offset: 630
    00000278: 	nopl	(%rax,%rax) # Size: 8
.Ltmp866:
    00000280: 	movl	%eax, %eax
    00000282: 	xorl	%ecx, %ecx
    00000284: 	nopl	(%rax) # Size: 4
.Ltmp871:
    00000288: 	movl	(%rdx,%rcx,4), %r9d
    0000028c: 	movl	%r9d, 0x4(%rdi,%rcx,8)
    00000291: 	addq	$0x1, %rcx
    00000295: 	cmpq	%rax, %rcx
    00000298: 	jne	.Ltmp871 # Offset: 664
    0000029a: 	jmp	.Ltmp868 # Offset: 666
    0000029c: 	nopl	(%rax) # Size: 4
.Ltmp863:
    000002a0: 	xorl	%r9d, %r9d
    000002a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp872:
    000002a8: 	movl	(%rsi,%r9,4), %r12d
    000002ac: 	movl	%r12d, (%rdi,%r9,8)
    000002b0: 	addq	$0x1, %r9
    000002b4: 	cmpl	%r9d, %eax
    000002b7: 	jg	.Ltmp872 # Offset: 695
    000002b9: 	jmp	.Ltmp865 # Offset: 697
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version5IjEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version6IjEvPT_PKS0_S3_i" after disassembly {
  Number      : 106
  State       : disassembled
  Address     : 0x15a00
  Size        : 0x27d
  MaxSize     : 0x280
  Offset      : 0x15a00
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version6IjEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0105:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp873 # Offset: 6
    0000000c: 	pushq	%r15
    0000000e: 	movq	%rsi, %r8
    00000011: 	movl	%ecx, %r15d
    00000014: 	movq	%rdx, %rsi
    00000017: 	pushq	%r14
    00000019: 	xorl	%r11d, %r11d
    0000001c: 	pushq	%r13
    0000001e: 	pushq	%r12
    00000020: 	pushq	%rbp
    00000021: 	movl	%ecx, %ebp
    00000023: 	pushq	%rbx
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp881:
    00000028: 	addl	$0x200, %r11d
    0000002f: 	cmpl	%r15d, %r11d
    00000032: 	jg	.Ltmp874 # Offset: 50
    00000038: 	movl	$0x800, %r9d
    0000003e: 	movl	$0x1000, %r10d
    00000044: 	movl	$0x200, %ecx
.Ltmp882:
    00000049: 	movslq	%ecx, %r12
    0000004c: 	testl	%ecx, %ecx
    0000004e: 	movl	$0x4, %edx
    00000053: 	leaq	-0x4(,%r12,8), %rax
    0000005b: 	leaq	(,%r12,4), %rbx
    00000063: 	cmovleq	%rdx, %rax
    00000067: 	addq	%rdi, %rax
    0000006a: 	cmpq	%rax, %r8
    0000006d: 	movl	$0x4, %eax
    00000072: 	setae	%dl
    00000075: 	testl	%ecx, %ecx
    00000077: 	cmovgq	%rbx, %rax
    0000007b: 	addq	%r8, %rax
    0000007e: 	cmpq	%rax, %rdi
    00000081: 	setae	%al
    00000084: 	orb	%al, %dl
    00000086: 	je	.Ltmp875 # Offset: 134
    0000008c: 	cmpl	$0x7, %ecx
    0000008f: 	jle	.Ltmp875 # Offset: 143
    00000095: 	testl	%ecx, %ecx
    00000097: 	movl	$0x1, %r14d
    0000009d: 	movq	%r8, %rdx
    000000a0: 	movq	%rdi, %rax
    000000a3: 	cmovgl	%ecx, %r14d
    000000a7: 	movl	%r14d, %r13d
    000000aa: 	shrl	$0x2, %r13d
    000000ae: 	subl	$0x1, %r13d
    000000b2: 	shlq	$0x4, %r13
    000000b6: 	leaq	0x10(%r8,%r13), %r13
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp876:
    000000c0: 	movdqu	(%rdx), %xmm0
    000000c4: 	addq	$0x10, %rdx
    000000c8: 	addq	$0x20, %rax
    000000cc: 	pshufd	$0x55, %xmm0, %xmm1
    000000d1: 	movd	%xmm0, -0x20(%rax)
    000000d6: 	movd	%xmm1, -0x18(%rax)
    000000db: 	movdqa	%xmm0, %xmm1
    000000df: 	punpckhdq	%xmm0, %xmm1
    000000e3: 	pshufd	$0xff, %xmm0, %xmm0
    000000e8: 	movd	%xmm1, -0x10(%rax)
    000000ed: 	movd	%xmm0, -0x8(%rax)
    000000f2: 	cmpq	%r13, %rdx
    000000f5: 	jne	.Ltmp876 # Offset: 245
    000000f7: 	movl	%r14d, %eax
    000000fa: 	andl	$-0x4, %eax
    000000fd: 	movl	%eax, %edx
    000000ff: 	leaq	(%rdi,%rdx,8), %r13
    00000103: 	cmpl	%eax, %r14d
    00000106: 	je	.Ltmp877 # Offset: 262
    00000108: 	leaq	(,%rdx,4), %r14
    00000110: 	movl	(%r8,%rdx,4), %edx
    00000114: 	movl	%edx, (%r13)
    00000118: 	leal	0x1(%rax), %edx
    0000011b: 	cmpl	%edx, %ecx
    0000011d: 	jle	.Ltmp877 # Offset: 285
    0000011f: 	movl	0x4(%r8,%r14), %edx
    00000124: 	addl	$0x2, %eax
    00000127: 	movl	%edx, 0x8(%r13)
    0000012b: 	cmpl	%eax, %ecx
    0000012d: 	jle	.Ltmp877 # Offset: 301
    0000012f: 	movl	0x8(%r8,%r14), %eax
    00000134: 	movl	%eax, 0x10(%r13)
.Ltmp877:
    00000138: 	leaq	(%rdi,%r12,8), %rax
    0000013c: 	leaq	0x4(%rdi), %r13
    00000140: 	cmpq	%rax, %rsi
    00000143: 	setae	%al
    00000146: 	addq	%rsi, %rbx
    00000149: 	cmpq	%rbx, %r13
    0000014c: 	setae	%dl
    0000014f: 	orb	%dl, %al
    00000151: 	je	.Ltmp878 # Offset: 337
    00000157: 	leal	-0x1(%rcx), %eax
    0000015a: 	cmpl	$0x6, %eax
    0000015d: 	jbe	.Ltmp878 # Offset: 349
    00000163: 	movl	%ecx, %ebx
    00000165: 	movq	%rsi, %rdx
    00000168: 	movq	%r13, %rax
    0000016b: 	shrl	$0x2, %ebx
    0000016e: 	subl	$0x1, %ebx
    00000171: 	shlq	$0x4, %rbx
    00000175: 	leaq	0x10(%rsi,%rbx), %rbx
    0000017a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp879:
    00000180: 	movdqu	(%rdx), %xmm0
    00000184: 	addq	$0x10, %rdx
    00000188: 	addq	$0x20, %rax
    0000018c: 	pshufd	$0x55, %xmm0, %xmm1
    00000191: 	movd	%xmm0, -0x20(%rax)
    00000196: 	movd	%xmm1, -0x18(%rax)
    0000019b: 	movdqa	%xmm0, %xmm1
    0000019f: 	punpckhdq	%xmm0, %xmm1
    000001a3: 	pshufd	$0xff, %xmm0, %xmm0
    000001a8: 	movd	%xmm1, -0x10(%rax)
    000001ad: 	movd	%xmm0, -0x8(%rax)
    000001b2: 	cmpq	%rdx, %rbx
    000001b5: 	jne	.Ltmp879 # Offset: 437
    000001b7: 	movl	%ecx, %eax
    000001b9: 	andl	$-0x4, %eax
    000001bc: 	movl	%eax, %edx
    000001be: 	leaq	(%r13,%rdx,8), %rbx
    000001c3: 	cmpl	%ecx, %eax
    000001c5: 	je	.Ltmp880 # Offset: 453
    000001c7: 	leaq	(,%rdx,4), %r12
    000001cf: 	movl	(%rsi,%rdx,4), %edx
    000001d2: 	movl	%edx, (%rbx)
    000001d4: 	leal	0x1(%rax), %edx
    000001d7: 	cmpl	%edx, %ecx
    000001d9: 	jle	.Ltmp880 # Offset: 473
    000001db: 	movl	0x4(%rsi,%r12), %edx
    000001e0: 	addl	$0x2, %eax
    000001e3: 	movl	%edx, 0x8(%rbx)
    000001e6: 	cmpl	%eax, %ecx
    000001e8: 	jle	.Ltmp880 # Offset: 488
    000001ea: 	movl	0x8(%rsi,%r12), %eax
    000001ef: 	movl	%eax, 0x10(%rbx)
.Ltmp880:
    000001f2: 	addq	%r10, %rdi
    000001f5: 	addq	%r9, %r8
    000001f8: 	addq	%r9, %rsi
    000001fb: 	subl	$0x200, %ebp
    00000201: 	cmpl	%r15d, %r11d
    00000204: 	jl	.Ltmp881 # Offset: 516
    0000020a: 	popq	%rbx
    0000020b: 	popq	%rbp
    0000020c: 	popq	%r12
    0000020e: 	popq	%r13
    00000210: 	popq	%r14
    00000212: 	popq	%r15
    00000214: 	retq # Offset: 532
    00000215: 	nopl	(%rax) # Size: 3
.Ltmp874:
    00000218: 	leal	(%rbp,%rbp), %r10d
    0000021d: 	movslq	%ebp, %r9
    00000220: 	movl	%ebp, %ecx
    00000222: 	movslq	%r10d, %r10
    00000225: 	shlq	$0x2, %r9
    00000229: 	shlq	$0x2, %r10
    0000022d: 	testl	%ebp, %ebp
    0000022f: 	jg	.Ltmp882 # Offset: 559
    00000235: 	jmp	.Ltmp880 # Offset: 565
    00000237: 	nopw	(%rax,%rax) # Size: 9
.Ltmp878:
    00000240: 	movl	%ecx, %ecx
    00000242: 	xorl	%eax, %eax
    00000244: 	nopl	(%rax) # Size: 4
.Ltmp883:
    00000248: 	movl	(%rsi,%rax,4), %edx
    0000024b: 	movl	%edx, 0x4(%rdi,%rax,8)
    0000024f: 	addq	$0x1, %rax
    00000253: 	cmpq	%rcx, %rax
    00000256: 	jne	.Ltmp883 # Offset: 598
    00000258: 	jmp	.Ltmp880 # Offset: 600
    0000025a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp875:
    00000260: 	xorl	%eax, %eax
    00000262: 	nopw	(%rax,%rax) # Size: 6
.Ltmp884:
    00000268: 	movl	(%r8,%rax,4), %edx
    0000026c: 	movl	%edx, (%rdi,%rax,8)
    0000026f: 	addq	$0x1, %rax
    00000273: 	cmpl	%eax, %ecx
    00000275: 	jg	.Ltmp884 # Offset: 629
    00000277: 	jmp	.Ltmp877 # Offset: 631
.Ltmp873:
    0000027c: 	retq # Offset: 636
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version6IjEvPT_PKS0_S3_i"

Binary Function "_Z23interleave3to3_version1IjEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 107
  State       : disassembled
  Address     : 0x15c80
  Size        : 0x39
  MaxSize     : 0x40
  Offset      : 0x15c80
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version1IjEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0106:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r9
    00000007: 	testl	%r8d, %r8d
    0000000a: 	jle	.Ltmp885 # Offset: 10
    0000000c: 	movslq	%r8d, %r8
    0000000f: 	xorl	%eax, %eax
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp886:
    00000018: 	movl	(%r9,%rax,4), %esi
    0000001c: 	addq	$0xc, %rdi
    00000020: 	movl	%esi, -0xc(%rdi)
    00000023: 	movl	(%rdx,%rax,4), %esi
    00000026: 	movl	%esi, -0x8(%rdi)
    00000029: 	movl	(%rcx,%rax,4), %esi
    0000002c: 	addq	$0x1, %rax
    00000030: 	movl	%esi, -0x4(%rdi)
    00000033: 	cmpq	%rax, %r8
    00000036: 	jne	.Ltmp886 # Offset: 54
.Ltmp885:
    00000038: 	retq # Offset: 56
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version1IjEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version2IjEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 108
  State       : disassembled
  Address     : 0x15cc0
  Size        : 0x2d1
  MaxSize     : 0x2e0
  Offset      : 0x15cc0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version2IjEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0107:
    00000000: 	endbr64
    00000004: 	movslq	%r8d, %r8
    00000007: 	testq	%r8, %r8
    0000000a: 	je	.Ltmp887 # Offset: 10
    00000010: 	leaq	-0x1(%r8), %rax
    00000014: 	pushq	%r12
    00000016: 	movq	%rdi, %r9
    00000019: 	movq	%rsi, %rdi
    0000001c: 	cmpq	$0x6, %rax
    00000020: 	pushq	%rbp
    00000021: 	leaq	(,%r8,4), %rbp
    00000029: 	movq	%rdx, %rsi
    0000002c: 	pushq	%rbx
    0000002d: 	leaq	(%r8,%r8,2), %rbx
    00000031: 	seta	%r11b
    00000035: 	leaq	(%rdi,%rbp), %rdx
    00000039: 	shlq	$0x2, %rbx
    0000003d: 	leaq	-0x8(%r9,%rbx), %rax
    00000042: 	cmpq	%rax, %rdi
    00000045: 	setae	%al
    00000048: 	cmpq	%rdx, %r9
    0000004b: 	setae	%dl
    0000004e: 	orb	%dl, %al
    00000050: 	je	.Ltmp888 # Offset: 80
    00000056: 	testb	%r11b, %r11b
    00000059: 	je	.Ltmp888 # Offset: 89
    0000005f: 	movq	%r8, %r12
    00000062: 	movq	%r9, %rax
    00000065: 	xorl	%edx, %edx
    00000067: 	shrq	$0x2, %r12
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp889:
    00000070: 	movq	%rdx, %r10
    00000073: 	addq	$0x1, %rdx
    00000077: 	addq	$0x30, %rax
    0000007b: 	shlq	$0x4, %r10
    0000007f: 	movdqu	(%rdi,%r10), %xmm0
    00000085: 	pshufd	$0x55, %xmm0, %xmm1
    0000008a: 	movd	%xmm0, -0x30(%rax)
    0000008f: 	movd	%xmm1, -0x24(%rax)
    00000094: 	movdqa	%xmm0, %xmm1
    00000098: 	punpckhdq	%xmm0, %xmm1
    0000009c: 	pshufd	$0xff, %xmm0, %xmm0
    000000a1: 	movd	%xmm1, -0x18(%rax)
    000000a6: 	movd	%xmm0, -0xc(%rax)
    000000ab: 	cmpq	%r12, %rdx
    000000ae: 	jne	.Ltmp889 # Offset: 174
    000000b0: 	movq	%r8, %rax
    000000b3: 	andq	$-0x4, %rax
    000000b7: 	leaq	(%rax,%rax,2), %rdx
    000000bb: 	leaq	(%rdi,%rax,4), %rdi
    000000bf: 	leaq	(%r9,%rdx,4), %rdx
    000000c3: 	cmpq	%rax, %r8
    000000c6: 	je	.Ltmp890 # Offset: 198
    000000c8: 	movl	(%rdi), %r10d
    000000cb: 	movl	%r10d, (%rdx)
    000000ce: 	leaq	0x1(%rax), %r10
    000000d2: 	cmpq	%r10, %r8
    000000d5: 	jbe	.Ltmp890 # Offset: 213
    000000d7: 	movl	0x4(%rdi), %r10d
    000000db: 	addq	$0x2, %rax
    000000df: 	movl	%r10d, 0xc(%rdx)
    000000e3: 	cmpq	%rax, %r8
    000000e6: 	jbe	.Ltmp890 # Offset: 230
    000000e8: 	movl	0x8(%rdi), %eax
    000000eb: 	movl	%eax, 0x18(%rdx)
.Ltmp890:
    000000ee: 	leaq	-0x4(%r9,%rbx), %rax
    000000f3: 	leaq	(%rsi,%rbp), %rdx
    000000f7: 	cmpq	%rax, %rsi
    000000fa: 	leaq	0x4(%r9), %r10
    000000fe: 	setae	%al
    00000101: 	cmpq	%rdx, %r10
    00000104: 	setae	%dl
    00000107: 	orb	%dl, %al
    00000109: 	je	.Ltmp891 # Offset: 265
    0000010f: 	movq	%r8, %r12
    00000112: 	movq	%r10, %rax
    00000115: 	xorl	%edx, %edx
    00000117: 	shrq	$0x2, %r12
    0000011b: 	testb	%r11b, %r11b
    0000011e: 	je	.Ltmp891 # Offset: 286
    00000124: 	nopl	(%rax) # Size: 4
.Ltmp892:
    00000128: 	movq	%rdx, %rdi
    0000012b: 	addq	$0x1, %rdx
    0000012f: 	addq	$0x30, %rax
    00000133: 	shlq	$0x4, %rdi
    00000137: 	movdqu	(%rsi,%rdi), %xmm0
    0000013c: 	pshufd	$0x55, %xmm0, %xmm1
    00000141: 	movd	%xmm0, -0x30(%rax)
    00000146: 	movd	%xmm1, -0x24(%rax)
    0000014b: 	movdqa	%xmm0, %xmm1
    0000014f: 	punpckhdq	%xmm0, %xmm1
    00000153: 	pshufd	$0xff, %xmm0, %xmm0
    00000158: 	movd	%xmm1, -0x18(%rax)
    0000015d: 	movd	%xmm0, -0xc(%rax)
    00000162: 	cmpq	%r12, %rdx
    00000165: 	jne	.Ltmp892 # Offset: 357
    00000167: 	movq	%r8, %rax
    0000016a: 	andq	$-0x4, %rax
    0000016e: 	leaq	(%rax,%rax,2), %rdx
    00000172: 	leaq	(%rsi,%rax,4), %rsi
    00000176: 	leaq	(%r10,%rdx,4), %rdx
    0000017a: 	cmpq	%rax, %r8
    0000017d: 	je	.Ltmp893 # Offset: 381
    0000017f: 	movl	(%rsi), %edi
    00000181: 	movl	%edi, (%rdx)
    00000183: 	leaq	0x1(%rax), %rdi
    00000187: 	cmpq	%rdi, %r8
    0000018a: 	jbe	.Ltmp893 # Offset: 394
    0000018c: 	movl	0x4(%rsi), %edi
    0000018f: 	addq	$0x2, %rax
    00000193: 	movl	%edi, 0xc(%rdx)
    00000196: 	cmpq	%rax, %r8
    00000199: 	jbe	.Ltmp893 # Offset: 409
    0000019b: 	movl	0x8(%rsi), %eax
    0000019e: 	movl	%eax, 0x18(%rdx)
.Ltmp893:
    000001a1: 	addq	%r9, %rbx
    000001a4: 	leaq	0x8(%r9), %rdi
    000001a8: 	cmpq	%rbx, %rcx
    000001ab: 	setae	%al
    000001ae: 	addq	%rcx, %rbp
    000001b1: 	cmpq	%rbp, %rdi
    000001b4: 	setae	%dl
    000001b7: 	orb	%dl, %al
    000001b9: 	je	.Ltmp894 # Offset: 441
    000001bf: 	movq	%r8, %r9
    000001c2: 	movq	%rdi, %rax
    000001c5: 	xorl	%edx, %edx
    000001c7: 	shrq	$0x2, %r9
    000001cb: 	testb	%r11b, %r11b
    000001ce: 	je	.Ltmp894 # Offset: 462
    000001d4: 	nopl	(%rax) # Size: 4
.Ltmp895:
    000001d8: 	movq	%rdx, %rsi
    000001db: 	addq	$0x1, %rdx
    000001df: 	addq	$0x30, %rax
    000001e3: 	shlq	$0x4, %rsi
    000001e7: 	movdqu	(%rcx,%rsi), %xmm0
    000001ec: 	pshufd	$0x55, %xmm0, %xmm1
    000001f1: 	movd	%xmm0, -0x30(%rax)
    000001f6: 	movd	%xmm1, -0x24(%rax)
    000001fb: 	movdqa	%xmm0, %xmm1
    000001ff: 	punpckhdq	%xmm0, %xmm1
    00000203: 	pshufd	$0xff, %xmm0, %xmm0
    00000208: 	movd	%xmm1, -0x18(%rax)
    0000020d: 	movd	%xmm0, -0xc(%rax)
    00000212: 	cmpq	%rdx, %r9
    00000215: 	jne	.Ltmp895 # Offset: 533
    00000217: 	movq	%r8, %rax
    0000021a: 	andq	$-0x4, %rax
    0000021e: 	leaq	(%rax,%rax,2), %rdx
    00000222: 	leaq	(%rcx,%rax,4), %rcx
    00000226: 	leaq	(%rdi,%rdx,4), %rdx
    0000022a: 	cmpq	%rax, %r8
    0000022d: 	je	.Ltmp896 # Offset: 557
    0000022f: 	movl	(%rcx), %esi
    00000231: 	movl	%esi, (%rdx)
    00000233: 	leaq	0x1(%rax), %rsi
    00000237: 	cmpq	%rsi, %r8
    0000023a: 	jbe	.Ltmp896 # Offset: 570
    0000023c: 	movl	0x4(%rcx), %esi
    0000023f: 	addq	$0x2, %rax
    00000243: 	movl	%esi, 0xc(%rdx)
    00000246: 	cmpq	%rax, %r8
    00000249: 	jbe	.Ltmp896 # Offset: 585
    0000024b: 	movl	0x8(%rcx), %eax
    0000024e: 	movl	%eax, 0x18(%rdx)
.Ltmp896:
    00000251: 	popq	%rbx
    00000252: 	popq	%rbp
    00000253: 	popq	%r12
    00000255: 	retq # Offset: 597
    00000256: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp894:
    00000260: 	xorl	%eax, %eax
    00000262: 	nopw	(%rax,%rax) # Size: 6
.Ltmp897:
    00000268: 	movl	(%rcx,%rax,4), %edx
    0000026b: 	addq	$0x1, %rax
    0000026f: 	addq	$0xc, %rdi
    00000273: 	movl	%edx, -0xc(%rdi)
    00000276: 	cmpq	%rax, %r8
    00000279: 	jne	.Ltmp897 # Offset: 633
    0000027b: 	popq	%rbx
    0000027c: 	popq	%rbp
    0000027d: 	popq	%r12
    0000027f: 	retq # Offset: 639
.Ltmp888:
    00000280: 	movq	%r9, %rdx
    00000283: 	xorl	%eax, %eax
    00000285: 	nopl	(%rax) # Size: 3
.Ltmp898:
    00000288: 	movl	(%rdi,%rax,4), %r10d
    0000028c: 	addq	$0x1, %rax
    00000290: 	addq	$0xc, %rdx
    00000294: 	movl	%r10d, -0xc(%rdx)
    00000298: 	cmpq	%rax, %r8
    0000029b: 	jne	.Ltmp898 # Offset: 667
    0000029d: 	jmp	.Ltmp890 # Offset: 669
    000002a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp891:
    000002a8: 	xorl	%eax, %eax
    000002aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp899:
    000002b0: 	movl	(%rsi,%rax,4), %edx
    000002b3: 	addq	$0x1, %rax
    000002b7: 	addq	$0xc, %r10
    000002bb: 	movl	%edx, -0xc(%r10)
    000002bf: 	cmpq	%rax, %r8
    000002c2: 	jne	.Ltmp899 # Offset: 706
    000002c4: 	jmp	.Ltmp893 # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp887:
    000002d0: 	retq # Offset: 720
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version2IjEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version3IjEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 109
  State       : disassembled
  Address     : 0x15fa0
  Size        : 0x299
  MaxSize     : 0x2a0
  Offset      : 0x15fa0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version3IjEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0108:
    00000000: 	endbr64
    00000004: 	testl	%r8d, %r8d
    00000007: 	jle	.Ltmp900 # Offset: 7
    0000000d: 	movslq	%r8d, %rax
    00000010: 	pushq	%r15
    00000012: 	movq	%rdx, %r9
    00000015: 	leal	-0x1(%r8), %r11d
    00000019: 	pushq	%r14
    0000001b: 	pushq	%r13
    0000001d: 	pushq	%r12
    0000001f: 	pushq	%rbp
    00000020: 	leaq	(,%rax,4), %rbp
    00000028: 	pushq	%rbx
    00000029: 	leaq	(%rax,%rax,2), %rbx
    0000002d: 	leaq	(%rsi,%rbp), %rax
    00000031: 	shlq	$0x2, %rbx
    00000035: 	cmpq	%rax, %rdi
    00000038: 	leaq	-0x4(%rdi,%rbx), %r10
    0000003d: 	setae	%dl
    00000040: 	cmpq	%r10, %rsi
    00000043: 	setae	%al
    00000046: 	orl	%eax, %edx
    00000048: 	leaq	(%r9,%rbp), %rax
    0000004c: 	cmpq	%rax, %rdi
    0000004f: 	setae	%al
    00000052: 	cmpq	%r10, %r9
    00000055: 	setae	%r10b
    00000059: 	orl	%r10d, %eax
    0000005c: 	testb	%al, %dl
    0000005e: 	je	.Ltmp901 # Offset: 94
    00000064: 	cmpl	$0x4, %r11d
    00000068: 	jbe	.Ltmp901 # Offset: 104
    0000006e: 	movl	%r8d, %r10d
    00000071: 	movq	%rdi, %rax
    00000074: 	xorl	%edx, %edx
    00000076: 	shrl	$0x2, %r10d
    0000007a: 	shlq	$0x4, %r10
    0000007e: 	nop # Size: 2
.Ltmp902:
    00000080: 	movdqu	(%rsi,%rdx), %xmm1
    00000085: 	movdqu	(%r9,%rdx), %xmm0
    0000008b: 	addq	$0x10, %rdx
    0000008f: 	addq	$0x30, %rax
    00000093: 	pshufd	$0x55, %xmm1, %xmm2
    00000098: 	movd	%xmm1, -0x30(%rax)
    0000009d: 	movd	%xmm2, -0x24(%rax)
    000000a2: 	movdqa	%xmm1, %xmm2
    000000a6: 	punpckhdq	%xmm1, %xmm2
    000000aa: 	pshufd	$0xff, %xmm1, %xmm1
    000000af: 	movd	%xmm0, -0x2c(%rax)
    000000b4: 	movd	%xmm1, -0xc(%rax)
    000000b9: 	pshufd	$0x55, %xmm0, %xmm1
    000000be: 	movd	%xmm1, -0x20(%rax)
    000000c3: 	movdqa	%xmm0, %xmm1
    000000c7: 	punpckhdq	%xmm0, %xmm1
    000000cb: 	pshufd	$0xff, %xmm0, %xmm0
    000000d0: 	movd	%xmm2, -0x18(%rax)
    000000d5: 	movd	%xmm1, -0x14(%rax)
    000000da: 	movd	%xmm0, -0x8(%rax)
    000000df: 	cmpq	%rdx, %r10
    000000e2: 	jne	.Ltmp902 # Offset: 226
    000000e4: 	movl	%r8d, %eax
    000000e7: 	andl	$-0x4, %eax
    000000ea: 	testb	$0x3, %r8b
    000000ee: 	je	.Ltmp903 # Offset: 238
    000000f0: 	movl	%eax, %r14d
    000000f3: 	leal	(%rax,%rax,2), %edx
    000000f6: 	movl	(%rsi,%r14,4), %r15d
    000000fa: 	movslq	%edx, %r13
    000000fd: 	leaq	(,%r14,4), %r10
    00000105: 	leaq	(,%r13,4), %r12
    0000010d: 	movl	%r15d, (%rdi,%r13,4)
    00000111: 	movl	(%r9,%r14,4), %r14d
    00000115: 	movl	%r14d, 0x4(%rdi,%r13,4)
    0000011a: 	leal	0x1(%rax), %r13d
    0000011e: 	cmpl	%r13d, %r8d
    00000121: 	jle	.Ltmp903 # Offset: 289
    00000123: 	movl	0x4(%rsi,%r10), %r13d
    00000128: 	addl	$0x3, %edx
    0000012b: 	addl	$0x2, %eax
    0000012e: 	movslq	%edx, %rdx
    00000131: 	movl	%r13d, 0xc(%rdi,%r12)
    00000136: 	movl	0x4(%r9,%r10), %r13d
    0000013b: 	movl	%r13d, 0x4(%rdi,%rdx,4)
    00000140: 	cmpl	%eax, %r8d
    00000143: 	jle	.Ltmp903 # Offset: 323
    00000145: 	movl	0x8(%rsi,%r10), %eax
    0000014a: 	movl	%eax, 0x18(%rdi,%r12)
    0000014f: 	movl	0x8(%r9,%r10), %eax
    00000154: 	movl	%eax, 0x10(%rdi,%rdx,4)
.Ltmp903:
    00000158: 	addq	%rdi, %rbx
    0000015b: 	leaq	0x8(%rdi), %rax
    0000015f: 	cmpq	%rbx, %rcx
    00000162: 	setae	%dl
    00000165: 	addq	%rcx, %rbp
    00000168: 	cmpq	%rbp, %rax
    0000016b: 	setae	%sil
    0000016f: 	orb	%sil, %dl
    00000172: 	movq	%rcx, %rdx
    00000175: 	je	.Ltmp904 # Offset: 373
    0000017b: 	cmpl	$0x6, %r11d
    0000017f: 	jbe	.Ltmp904 # Offset: 383
    00000185: 	movl	%r8d, %esi
    00000188: 	shrl	$0x2, %esi
    0000018b: 	subl	$0x1, %esi
    0000018e: 	shlq	$0x4, %rsi
    00000192: 	leaq	0x10(%rcx,%rsi), %rsi
    00000197: 	nopw	(%rax,%rax) # Size: 9
.Ltmp905:
    000001a0: 	movdqu	(%rdx), %xmm0
    000001a4: 	addq	$0x10, %rdx
    000001a8: 	addq	$0x30, %rax
    000001ac: 	pshufd	$0x55, %xmm0, %xmm1
    000001b1: 	movd	%xmm0, -0x30(%rax)
    000001b6: 	movd	%xmm1, -0x24(%rax)
    000001bb: 	movdqa	%xmm0, %xmm1
    000001bf: 	punpckhdq	%xmm0, %xmm1
    000001c3: 	pshufd	$0xff, %xmm0, %xmm0
    000001c8: 	movd	%xmm1, -0x18(%rax)
    000001cd: 	movd	%xmm0, -0xc(%rax)
    000001d2: 	cmpq	%rdx, %rsi
    000001d5: 	jne	.Ltmp905 # Offset: 469
    000001d7: 	movl	%r8d, %eax
    000001da: 	andl	$-0x4, %eax
    000001dd: 	testb	$0x3, %r8b
    000001e1: 	je	.Ltmp906 # Offset: 481
    000001e3: 	movl	%eax, %esi
    000001e5: 	leal	(%rax,%rax,2), %edx
    000001e8: 	movl	(%rcx,%rsi,4), %r10d
    000001ec: 	leaq	(,%rsi,4), %r9
    000001f4: 	movslq	%edx, %rsi
    000001f7: 	movl	%r10d, 0x8(%rdi,%rsi,4)
    000001fc: 	leal	0x1(%rax), %esi
    000001ff: 	cmpl	%r8d, %esi
    00000202: 	jge	.Ltmp906 # Offset: 514
    00000204: 	movl	0x4(%rcx,%r9), %esi
    00000209: 	addl	$0x3, %edx
    0000020c: 	addl	$0x2, %eax
    0000020f: 	movslq	%edx, %rdx
    00000212: 	movl	%esi, 0x8(%rdi,%rdx,4)
    00000216: 	cmpl	%r8d, %eax
    00000219: 	jge	.Ltmp906 # Offset: 537
    0000021b: 	movl	0x8(%rcx,%r9), %eax
    00000220: 	movl	%eax, 0x14(%rdi,%rdx,4)
.Ltmp906:
    00000224: 	popq	%rbx
    00000225: 	popq	%rbp
    00000226: 	popq	%r12
    00000228: 	popq	%r13
    0000022a: 	popq	%r14
    0000022c: 	popq	%r15
    0000022e: 	retq # Offset: 558
    0000022f: 	nop # Size: 1
.Ltmp904:
    00000230: 	movl	%r11d, %r11d
    00000233: 	leaq	0x4(%rdx,%r11,4), %rsi
    00000238: 	nopl	(%rax,%rax) # Size: 8
.Ltmp907:
    00000240: 	movl	(%rdx), %ecx
    00000242: 	addq	$0x4, %rdx
    00000246: 	addq	$0xc, %rax
    0000024a: 	movl	%ecx, -0xc(%rax)
    0000024d: 	cmpq	%rdx, %rsi
    00000250: 	jne	.Ltmp907 # Offset: 592
    00000252: 	popq	%rbx
    00000253: 	popq	%rbp
    00000254: 	popq	%r12
    00000256: 	popq	%r13
    00000258: 	popq	%r14
    0000025a: 	popq	%r15
    0000025c: 	retq # Offset: 604
    0000025d: 	nopl	(%rax) # Size: 3
.Ltmp901:
    00000260: 	movq	%rdi, %rdx
    00000263: 	movl	%r8d, %r12d
    00000266: 	xorl	%eax, %eax
    00000268: 	nopl	(%rax,%rax) # Size: 8
.Ltmp908:
    00000270: 	movl	(%rsi,%rax,4), %r10d
    00000274: 	addq	$0xc, %rdx
    00000278: 	movl	%r10d, -0xc(%rdx)
    0000027c: 	movl	(%r9,%rax,4), %r10d
    00000280: 	addq	$0x1, %rax
    00000284: 	movl	%r10d, -0x8(%rdx)
    00000288: 	cmpq	%rax, %r12
    0000028b: 	jne	.Ltmp908 # Offset: 651
    0000028d: 	jmp	.Ltmp903 # Offset: 653
    00000292: 	nopw	(%rax,%rax) # Size: 6
.Ltmp900:
    00000298: 	retq # Offset: 664
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version3IjEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version4IjEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 110
  State       : disassembled
  Address     : 0x16240
  Size        : 0x372
  MaxSize     : 0x380
  Offset      : 0x16240
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version4IjEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0109:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r8d, -0x10(%rsp)
    00000013: 	testl	%r8d, %r8d
    00000016: 	jle	.Ltmp909 # Offset: 22
    0000001c: 	movl	%r8d, %ebp
    0000001f: 	xorl	%r15d, %r15d
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp917:
    00000028: 	addl	$0x155, %r15d
    0000002f: 	cmpl	-0x10(%rsp), %r15d
    00000034: 	jg	.Ltmp910 # Offset: 52
    0000003a: 	movq	$0xffc, -0x20(%rsp)
    00000043: 	movl	$0x554, %r9d
    00000049: 	movl	$0x155, %eax
.Ltmp918:
    0000004e: 	movslq	%eax, %r8
    00000051: 	testl	%eax, %eax
    00000053: 	movl	$0x4, %r11d
    00000059: 	movl	$0x8, %ebx
    0000005e: 	leaq	(,%r8,4), %r14
    00000066: 	leaq	(%r8,%r8,2), %r8
    0000006a: 	cmovgq	%r14, %r11
    0000006e: 	shlq	$0x2, %r8
    00000072: 	testl	%eax, %eax
    00000074: 	leaq	-0x4(%r8), %r10
    00000078: 	cmovleq	%rbx, %r10
    0000007c: 	leaq	(%rsi,%r11), %rbx
    00000080: 	addq	%rdi, %r10
    00000083: 	cmpq	%rbx, %rdi
    00000086: 	setae	%r12b
    0000008a: 	cmpq	%r10, %rsi
    0000008d: 	setae	%bl
    00000090: 	addq	%rdx, %r11
    00000093: 	orl	%r12d, %ebx
    00000096: 	cmpq	%r11, %rdi
    00000099: 	setae	%r11b
    0000009d: 	cmpq	%r10, %rdx
    000000a0: 	setae	%r10b
    000000a4: 	orl	%r11d, %r10d
    000000a7: 	testb	%r10b, %bl
    000000aa: 	je	.Ltmp911 # Offset: 170
    000000b0: 	cmpl	$0x5, %eax
    000000b3: 	jle	.Ltmp911 # Offset: 179
    000000b9: 	testl	%eax, %eax
    000000bb: 	movl	$0x1, %ebx
    000000c0: 	movq	%rdi, %r10
    000000c3: 	cmovgl	%eax, %ebx
    000000c6: 	xorl	%r11d, %r11d
    000000c9: 	movl	%ebx, %r12d
    000000cc: 	shrl	$0x2, %r12d
    000000d0: 	shlq	$0x4, %r12
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp912:
    000000d8: 	movdqu	(%rsi,%r11), %xmm1
    000000de: 	movdqu	(%rdx,%r11), %xmm0
    000000e4: 	addq	$0x10, %r11
    000000e8: 	addq	$0x30, %r10
    000000ec: 	pshufd	$0x55, %xmm1, %xmm2
    000000f1: 	movd	%xmm1, -0x30(%r10)
    000000f7: 	movd	%xmm2, -0x24(%r10)
    000000fd: 	movdqa	%xmm1, %xmm2
    00000101: 	punpckhdq	%xmm1, %xmm2
    00000105: 	pshufd	$0xff, %xmm1, %xmm1
    0000010a: 	movd	%xmm0, -0x2c(%r10)
    00000110: 	movd	%xmm1, -0xc(%r10)
    00000116: 	pshufd	$0x55, %xmm0, %xmm1
    0000011b: 	movd	%xmm1, -0x20(%r10)
    00000121: 	movdqa	%xmm0, %xmm1
    00000125: 	punpckhdq	%xmm0, %xmm1
    00000129: 	pshufd	$0xff, %xmm0, %xmm0
    0000012e: 	movd	%xmm2, -0x18(%r10)
    00000134: 	movd	%xmm1, -0x14(%r10)
    0000013a: 	movd	%xmm0, -0x8(%r10)
    00000140: 	cmpq	%r11, %r12
    00000143: 	jne	.Ltmp912 # Offset: 323
    00000145: 	movl	%ebx, %r10d
    00000148: 	andl	$-0x4, %r10d
    0000014c: 	andl	$0x3, %ebx
    0000014f: 	je	.Ltmp913 # Offset: 335
    00000155: 	leal	(%r10,%r10,2), %r11d
    00000159: 	movl	%r10d, %r13d
    0000015c: 	movslq	%r11d, %r12
    0000015f: 	movl	%r11d, -0xc(%rsp)
    00000164: 	leaq	(,%r13,4), %rbx
    0000016c: 	leaq	(,%r12,4), %r11
    00000174: 	movq	%r11, -0x18(%rsp)
    00000179: 	movl	(%rsi,%r13,4), %r11d
    0000017d: 	movl	%r11d, (%rdi,%r12,4)
    00000181: 	movl	(%rdx,%r13,4), %r13d
    00000185: 	movl	%r13d, 0x4(%rdi,%r12,4)
    0000018a: 	leal	0x1(%r10), %r12d
    0000018e: 	cmpl	%r12d, %eax
    00000191: 	jle	.Ltmp913 # Offset: 401
    00000193: 	movl	0x4(%rsi,%rbx), %r12d
    00000198: 	movl	-0xc(%rsp), %r11d
    0000019d: 	addl	$0x2, %r10d
    000001a1: 	movq	-0x18(%rsp), %r13
    000001a6: 	addl	$0x3, %r11d
    000001aa: 	movl	%r12d, 0xc(%rdi,%r13)
    000001af: 	movl	0x4(%rdx,%rbx), %r12d
    000001b4: 	movslq	%r11d, %r11
    000001b7: 	movl	%r12d, 0x4(%rdi,%r11,4)
    000001bc: 	cmpl	%r10d, %eax
    000001bf: 	jle	.Ltmp913 # Offset: 447
    000001c1: 	movl	0x8(%rsi,%rbx), %r10d
    000001c6: 	movl	%r10d, 0x18(%rdi,%r13)
    000001cb: 	movl	0x8(%rdx,%rbx), %r10d
    000001d0: 	movl	%r10d, 0x10(%rdi,%r11,4)
.Ltmp913:
    000001d5: 	addq	%rdi, %r8
    000001d8: 	leaq	0x8(%rdi), %r11
    000001dc: 	leal	-0x1(%rax), %r10d
    000001e0: 	cmpq	%r8, %rcx
    000001e3: 	leaq	(%rcx,%r14), %r8
    000001e7: 	setae	%bl
    000001ea: 	cmpq	%r8, %r11
    000001ed: 	setae	%r8b
    000001f1: 	orb	%bl, %r8b
    000001f4: 	je	.Ltmp914 # Offset: 500
    000001fa: 	cmpl	$0x6, %r10d
    000001fe: 	jbe	.Ltmp914 # Offset: 510
    00000204: 	movq	%r11, %r8
    00000207: 	movl	%eax, %r11d
    0000020a: 	movq	%rcx, %r10
    0000020d: 	shrl	$0x2, %r11d
    00000211: 	subl	$0x1, %r11d
    00000215: 	shlq	$0x4, %r11
    00000219: 	leaq	0x10(%rcx,%r11), %r11
    0000021e: 	nop # Size: 2
.Ltmp915:
    00000220: 	movdqu	(%r10), %xmm0
    00000225: 	addq	$0x10, %r10
    00000229: 	addq	$0x30, %r8
    0000022d: 	pshufd	$0x55, %xmm0, %xmm1
    00000232: 	movd	%xmm0, -0x30(%r8)
    00000238: 	movd	%xmm1, -0x24(%r8)
    0000023e: 	movdqa	%xmm0, %xmm1
    00000242: 	punpckhdq	%xmm0, %xmm1
    00000246: 	pshufd	$0xff, %xmm0, %xmm0
    0000024b: 	movd	%xmm1, -0x18(%r8)
    00000251: 	movd	%xmm0, -0xc(%r8)
    00000257: 	cmpq	%r10, %r11
    0000025a: 	jne	.Ltmp915 # Offset: 602
    0000025c: 	movl	%eax, %r8d
    0000025f: 	andl	$-0x4, %r8d
    00000263: 	testb	$0x3, %al
    00000265: 	je	.Ltmp916 # Offset: 613
    00000267: 	movl	%r8d, %ebx
    0000026a: 	leal	(%r8,%r8,2), %r10d
    0000026e: 	movl	(%rcx,%rbx,4), %r12d
    00000272: 	leaq	(,%rbx,4), %r11
    0000027a: 	movslq	%r10d, %rbx
    0000027d: 	movl	%r12d, 0x8(%rdi,%rbx,4)
    00000282: 	leal	0x1(%r8), %ebx
    00000286: 	cmpl	%eax, %ebx
    00000288: 	jge	.Ltmp916 # Offset: 648
    0000028a: 	movl	0x4(%rcx,%r11), %ebx
    0000028f: 	addl	$0x3, %r10d
    00000293: 	addl	$0x2, %r8d
    00000297: 	movslq	%r10d, %r10
    0000029a: 	movl	%ebx, 0x8(%rdi,%r10,4)
    0000029f: 	cmpl	%eax, %r8d
    000002a2: 	jge	.Ltmp916 # Offset: 674
    000002a4: 	movl	0x8(%rcx,%r11), %eax
    000002a9: 	movl	%eax, 0x14(%rdi,%r10,4)
.Ltmp916:
    000002ae: 	addq	-0x20(%rsp), %rdi
    000002b3: 	addq	%r9, %rsi
    000002b6: 	addq	%r9, %rdx
    000002b9: 	addq	%r9, %rcx
    000002bc: 	subl	$0x155, %ebp
    000002c2: 	cmpl	-0x10(%rsp), %r15d
    000002c7: 	jl	.Ltmp917 # Offset: 711
.Ltmp909:
    000002cd: 	popq	%rbx
    000002ce: 	popq	%rbp
    000002cf: 	popq	%r12
    000002d1: 	popq	%r13
    000002d3: 	popq	%r14
    000002d5: 	popq	%r15
    000002d7: 	retq # Offset: 727
    000002d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp910:
    000002e0: 	leal	(%rbp,%rbp,2), %r8d
    000002e5: 	movslq	%ebp, %r9
    000002e8: 	movl	%ebp, %eax
    000002ea: 	movslq	%r8d, %r8
    000002ed: 	shlq	$0x2, %r9
    000002f1: 	leaq	(,%r8,4), %rbx
    000002f9: 	movq	%rbx, -0x20(%rsp)
    000002fe: 	testl	%ebp, %ebp
    00000300: 	jg	.Ltmp918 # Offset: 768
    00000306: 	jmp	.Ltmp916 # Offset: 774
    00000308: 	nopl	(%rax,%rax) # Size: 8
.Ltmp914:
    00000310: 	movq	%r11, %r8
    00000313: 	movq	%rcx, %rax
    00000316: 	leaq	0x4(%rcx,%r10,4), %r11
    0000031b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp919:
    00000320: 	movl	(%rax), %r10d
    00000323: 	addq	$0x4, %rax
    00000327: 	addq	$0xc, %r8
    0000032b: 	movl	%r10d, -0xc(%r8)
    0000032f: 	cmpq	%rax, %r11
    00000332: 	jne	.Ltmp919 # Offset: 818
    00000334: 	jmp	.Ltmp916 # Offset: 820
    00000339: 	nopl	(%rax) # Size: 7
.Ltmp911:
    00000340: 	movq	%rdi, %r11
    00000343: 	xorl	%r10d, %r10d
    00000346: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp920:
    00000350: 	movl	(%rsi,%r10,4), %ebx
    00000354: 	addq	$0xc, %r11
    00000358: 	movl	%ebx, -0xc(%r11)
    0000035c: 	movl	(%rdx,%r10,4), %ebx
    00000360: 	addq	$0x1, %r10
    00000364: 	movl	%ebx, -0x8(%r11)
    00000368: 	cmpl	%r10d, %eax
    0000036b: 	jg	.Ltmp920 # Offset: 875
    0000036d: 	jmp	.Ltmp913 # Offset: 877
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version4IjEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version5IjEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 111
  State       : disassembled
  Address     : 0x165c0
  Size        : 0x43b
  MaxSize     : 0x440
  Offset      : 0x165c0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version5IjEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0110:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r8d, -0x10(%rsp)
    00000013: 	testl	%r8d, %r8d
    00000016: 	jle	.Ltmp921 # Offset: 22
    0000001c: 	movq	%rdx, %rbx
    0000001f: 	movl	%r8d, %r15d
    00000022: 	movq	%rcx, %rdx
    00000025: 	xorl	%r14d, %r14d
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp932:
    00000030: 	addl	$0x155, %r14d
    00000037: 	cmpl	-0x10(%rsp), %r14d
    0000003c: 	jg	.Ltmp922 # Offset: 60
    00000042: 	movq	$0xffc, -0x20(%rsp)
    0000004b: 	movl	$0x554, %r8d
    00000051: 	movl	$0x155, %eax
.Ltmp934:
    00000056: 	movslq	%eax, %rcx
    00000059: 	movl	$0x4, %r11d
    0000005f: 	leaq	(,%rcx,4), %r13
    00000067: 	leaq	(%rcx,%rcx,2), %rcx
    0000006b: 	shlq	$0x2, %rcx
    0000006f: 	testl	%eax, %eax
    00000071: 	leaq	-0x8(%rcx), %r9
    00000075: 	cmovleq	%r11, %r9
    00000079: 	addq	%rdi, %r9
    0000007c: 	cmpq	%r9, %rsi
    0000007f: 	movl	$0x4, %r9d
    00000085: 	setae	%r10b
    00000089: 	testl	%eax, %eax
    0000008b: 	cmovgq	%r13, %r9
    0000008f: 	addq	%rsi, %r9
    00000092: 	cmpq	%r9, %rdi
    00000095: 	setae	%r9b
    00000099: 	orb	%r10b, %r9b
    0000009c: 	je	.Ltmp923 # Offset: 156
    000000a2: 	cmpl	$0x7, %eax
    000000a5: 	jle	.Ltmp923 # Offset: 165
    000000ab: 	testl	%eax, %eax
    000000ad: 	movl	$0x1, %r11d
    000000b3: 	movq	%rsi, %r10
    000000b6: 	movq	%rdi, %r9
    000000b9: 	cmovgl	%eax, %r11d
    000000bd: 	movl	%r11d, %ebp
    000000c0: 	shrl	$0x2, %ebp
    000000c3: 	subl	$0x1, %ebp
    000000c6: 	shlq	$0x4, %rbp
    000000ca: 	leaq	0x10(%rsi,%rbp), %rbp
    000000cf: 	nop # Size: 1
.Ltmp924:
    000000d0: 	movdqu	(%r10), %xmm0
    000000d5: 	addq	$0x10, %r10
    000000d9: 	addq	$0x30, %r9
    000000dd: 	pshufd	$0x55, %xmm0, %xmm1
    000000e2: 	movd	%xmm0, -0x30(%r9)
    000000e8: 	movd	%xmm1, -0x24(%r9)
    000000ee: 	movdqa	%xmm0, %xmm1
    000000f2: 	punpckhdq	%xmm0, %xmm1
    000000f6: 	pshufd	$0xff, %xmm0, %xmm0
    000000fb: 	movd	%xmm1, -0x18(%r9)
    00000101: 	movd	%xmm0, -0xc(%r9)
    00000107: 	cmpq	%rbp, %r10
    0000010a: 	jne	.Ltmp924 # Offset: 266
    0000010c: 	movl	%r11d, %r9d
    0000010f: 	andl	$-0x4, %r9d
    00000113: 	andl	$0x3, %r11d
    00000117: 	je	.Ltmp925 # Offset: 279
    00000119: 	movl	%r9d, %r11d
    0000011c: 	leal	(%r9,%r9,2), %r10d
    00000120: 	leaq	(,%r11,4), %r12
    00000128: 	movl	(%rsi,%r11,4), %r11d
    0000012c: 	movslq	%r10d, %r10
    0000012f: 	leaq	(,%r10,4), %rbp
    00000137: 	movl	%r11d, (%rdi,%r10,4)
    0000013b: 	leal	0x1(%r9), %r10d
    0000013f: 	cmpl	%r10d, %eax
    00000142: 	jle	.Ltmp925 # Offset: 322
    00000144: 	movl	0x4(%rsi,%r12), %r10d
    00000149: 	addl	$0x2, %r9d
    0000014d: 	movl	%r10d, 0xc(%rdi,%rbp)
    00000152: 	cmpl	%r9d, %eax
    00000155: 	jle	.Ltmp925 # Offset: 341
    00000157: 	movl	0x8(%rsi,%r12), %r9d
    0000015c: 	movl	%r9d, 0x18(%rdi,%rbp)
.Ltmp925:
    00000161: 	leal	-0x1(%rax), %r11d
    00000165: 	leaq	-0x4(%rdi,%rcx), %r10
    0000016a: 	cmpl	$0x6, %r11d
    0000016e: 	movl	%r11d, -0xc(%rsp)
    00000173: 	leaq	0x4(%rdi), %r9
    00000177: 	seta	%r11b
    0000017b: 	cmpq	%r10, %rbx
    0000017e: 	leaq	(%rbx,%r13), %r10
    00000182: 	setae	%bpl
    00000186: 	cmpq	%r10, %r9
    00000189: 	setae	%r10b
    0000018d: 	orb	%bpl, %r10b
    00000190: 	movq	%rbx, %r10
    00000193: 	je	.Ltmp926 # Offset: 403
    00000199: 	testb	%r11b, %r11b
    0000019c: 	je	.Ltmp926 # Offset: 412
    000001a2: 	movl	%eax, %ebp
    000001a4: 	shrl	$0x2, %ebp
    000001a7: 	subl	$0x1, %ebp
    000001aa: 	shlq	$0x4, %rbp
    000001ae: 	leaq	0x10(%rbx,%rbp), %rbp
    000001b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp927:
    000001b8: 	movdqu	(%r10), %xmm0
    000001bd: 	addq	$0x10, %r10
    000001c1: 	addq	$0x30, %r9
    000001c5: 	pshufd	$0x55, %xmm0, %xmm1
    000001ca: 	movd	%xmm0, -0x30(%r9)
    000001d0: 	movd	%xmm1, -0x24(%r9)
    000001d6: 	movdqa	%xmm0, %xmm1
    000001da: 	punpckhdq	%xmm0, %xmm1
    000001de: 	pshufd	$0xff, %xmm0, %xmm0
    000001e3: 	movd	%xmm1, -0x18(%r9)
    000001e9: 	movd	%xmm0, -0xc(%r9)
    000001ef: 	cmpq	%rbp, %r10
    000001f2: 	jne	.Ltmp927 # Offset: 498
    000001f4: 	movl	%eax, %r9d
    000001f7: 	andl	$-0x4, %r9d
    000001fb: 	testb	$0x3, %al
    000001fd: 	je	.Ltmp928 # Offset: 509
    000001ff: 	movl	%r9d, %ebp
    00000202: 	leal	(%r9,%r9,2), %r10d
    00000206: 	leaq	(,%rbp,4), %r12
    0000020e: 	movq	%r12, -0x18(%rsp)
    00000213: 	movl	(%rbx,%rbp,4), %r12d
    00000217: 	leal	0x1(%r10), %ebp
    0000021b: 	movslq	%ebp, %rbp
    0000021e: 	movl	%r12d, (%rdi,%rbp,4)
    00000222: 	leal	0x1(%r9), %ebp
    00000226: 	cmpl	%ebp, %eax
    00000228: 	jle	.Ltmp928 # Offset: 552
    0000022a: 	movq	-0x18(%rsp), %r12
    0000022f: 	leal	0x4(%r10), %ebp
    00000233: 	addl	$0x2, %r9d
    00000237: 	movslq	%ebp, %rbp
    0000023a: 	movl	0x4(%rbx,%r12), %r12d
    0000023f: 	movl	%r12d, (%rdi,%rbp,4)
    00000243: 	cmpl	%r9d, %eax
    00000246: 	jle	.Ltmp928 # Offset: 582
    00000248: 	movq	-0x18(%rsp), %r9
    0000024d: 	addl	$0x7, %r10d
    00000251: 	movslq	%r10d, %r10
    00000254: 	movl	0x8(%rbx,%r9), %r9d
    00000259: 	movl	%r9d, (%rdi,%r10,4)
.Ltmp928:
    0000025d: 	addq	%rdi, %rcx
    00000260: 	leaq	(%rdx,%r13), %r10
    00000264: 	leaq	0x8(%rdi), %r9
    00000268: 	cmpq	%rcx, %rdx
    0000026b: 	setae	%cl
    0000026e: 	cmpq	%r10, %r9
    00000271: 	setae	%r10b
    00000275: 	orb	%cl, %r10b
    00000278: 	je	.Ltmp929 # Offset: 632
    0000027e: 	testb	%r11b, %r11b
    00000281: 	je	.Ltmp929 # Offset: 641
    00000287: 	movl	%eax, %r10d
    0000028a: 	movq	%r9, %rcx
    0000028d: 	movq	%rdx, %r9
    00000290: 	shrl	$0x2, %r10d
    00000294: 	subl	$0x1, %r10d
    00000298: 	shlq	$0x4, %r10
    0000029c: 	leaq	0x10(%rdx,%r10), %r10
    000002a1: 	nopl	(%rax) # Size: 7
.Ltmp930:
    000002a8: 	movdqu	(%r9), %xmm0
    000002ad: 	addq	$0x10, %r9
    000002b1: 	addq	$0x30, %rcx
    000002b5: 	pshufd	$0x55, %xmm0, %xmm1
    000002ba: 	movd	%xmm0, -0x30(%rcx)
    000002bf: 	movd	%xmm1, -0x24(%rcx)
    000002c4: 	movdqa	%xmm0, %xmm1
    000002c8: 	punpckhdq	%xmm0, %xmm1
    000002cc: 	pshufd	$0xff, %xmm0, %xmm0
    000002d1: 	movd	%xmm1, -0x18(%rcx)
    000002d6: 	movd	%xmm0, -0xc(%rcx)
    000002db: 	cmpq	%r9, %r10
    000002de: 	jne	.Ltmp930 # Offset: 734
    000002e0: 	movl	%eax, %ecx
    000002e2: 	andl	$-0x4, %ecx
    000002e5: 	testb	$0x3, %al
    000002e7: 	je	.Ltmp931 # Offset: 743
    000002e9: 	movl	%ecx, %r11d
    000002ec: 	leal	(%rcx,%rcx,2), %r9d
    000002f0: 	movl	(%rdx,%r11,4), %ebp
    000002f4: 	leaq	(,%r11,4), %r10
    000002fc: 	movslq	%r9d, %r11
    000002ff: 	movl	%ebp, 0x8(%rdi,%r11,4)
    00000304: 	leal	0x1(%rcx), %r11d
    00000308: 	cmpl	%r11d, %eax
    0000030b: 	jle	.Ltmp931 # Offset: 779
    0000030d: 	movl	0x4(%rdx,%r10), %r11d
    00000312: 	addl	$0x3, %r9d
    00000316: 	addl	$0x2, %ecx
    00000319: 	movslq	%r9d, %r9
    0000031c: 	movl	%r11d, 0x8(%rdi,%r9,4)
    00000321: 	cmpl	%ecx, %eax
    00000323: 	jle	.Ltmp931 # Offset: 803
    00000325: 	movl	0x8(%rdx,%r10), %eax
    0000032a: 	movl	%eax, 0x14(%rdi,%r9,4)
.Ltmp931:
    0000032f: 	addq	-0x20(%rsp), %rdi
    00000334: 	addq	%r8, %rsi
    00000337: 	addq	%r8, %rbx
    0000033a: 	addq	%r8, %rdx
    0000033d: 	subl	$0x155, %r15d
    00000344: 	cmpl	-0x10(%rsp), %r14d
    00000349: 	jl	.Ltmp932 # Offset: 841
.Ltmp921:
    0000034f: 	popq	%rbx
    00000350: 	popq	%rbp
    00000351: 	popq	%r12
    00000353: 	popq	%r13
    00000355: 	popq	%r14
    00000357: 	popq	%r15
    00000359: 	retq # Offset: 857
    0000035a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp922:
    00000360: 	movl	%r15d, %eax
    00000363: 	testl	%r15d, %r15d
    00000366: 	jle	.Ltmp933 # Offset: 870
    0000036c: 	leal	(%r15,%r15,2), %ecx
    00000370: 	movslq	%r15d, %r8
    00000373: 	movslq	%ecx, %rcx
    00000376: 	shlq	$0x2, %r8
    0000037a: 	shlq	$0x2, %rcx
    0000037e: 	movq	%rcx, -0x20(%rsp)
    00000383: 	jmp	.Ltmp934 # Offset: 899
    00000388: 	nopl	(%rax,%rax) # Size: 8
.Ltmp929:
    00000390: 	movq	%r9, %rcx
    00000393: 	movl	-0xc(%rsp), %r9d
    00000398: 	movq	%rdx, %rax
    0000039b: 	leaq	0x4(%rdx,%r9,4), %r10
.Ltmp935:
    000003a0: 	movl	(%rax), %r9d
    000003a3: 	addq	$0x4, %rax
    000003a7: 	addq	$0xc, %rcx
    000003ab: 	movl	%r9d, -0xc(%rcx)
    000003af: 	cmpq	%rax, %r10
    000003b2: 	jne	.Ltmp935 # Offset: 946
    000003b4: 	jmp	.Ltmp931 # Offset: 948
    000003b9: 	nopl	(%rax) # Size: 7
.Ltmp926:
    000003c0: 	movl	-0xc(%rsp), %ebp
    000003c4: 	leaq	0x4(%rbx,%rbp,4), %rbp
    000003c9: 	nopl	(%rax) # Size: 7
.Ltmp936:
    000003d0: 	movl	(%r10), %r12d
    000003d3: 	addq	$0x4, %r10
    000003d7: 	addq	$0xc, %r9
    000003db: 	movl	%r12d, -0xc(%r9)
    000003df: 	cmpq	%rbp, %r10
    000003e2: 	jne	.Ltmp936 # Offset: 994
    000003e4: 	jmp	.Ltmp928 # Offset: 996
    000003e9: 	nopl	(%rax) # Size: 7
.Ltmp923:
    000003f0: 	movq	%rdi, %r10
    000003f3: 	xorl	%r9d, %r9d
    000003f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp937:
    00000400: 	movl	(%rsi,%r9,4), %r11d
    00000404: 	addq	$0x1, %r9
    00000408: 	addq	$0xc, %r10
    0000040c: 	movl	%r11d, -0xc(%r10)
    00000410: 	cmpl	%r9d, %eax
    00000413: 	jg	.Ltmp937 # Offset: 1043
    00000415: 	jmp	.Ltmp925 # Offset: 1045
    0000041a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp933:
    00000420: 	leal	(%r15,%r15,2), %eax
    00000424: 	movslq	%r15d, %r8
    00000427: 	cltq
    00000429: 	shlq	$0x2, %r8
    0000042d: 	shlq	$0x2, %rax
    00000431: 	movq	%rax, -0x20(%rsp)
    00000436: 	jmp	.Ltmp931 # Offset: 1078
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version5IjEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version1IjEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 112
  State       : disassembled
  Address     : 0x16a00
  Size        : 0x24b
  MaxSize     : 0x250
  Offset      : 0x16a00
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version1IjEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0111:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp938 # Offset: 7
    0000000d: 	pushq	%r13
    0000000f: 	movq	%rdi, %rax
    00000012: 	movl	%esi, %edi
    00000014: 	movq	%rdx, %rsi
    00000017: 	pushq	%r12
    00000019: 	movl	%r9d, %r11d
    0000001c: 	pushq	%rbp
    0000001d: 	movslq	%r9d, %rbp
    00000020: 	pushq	%rbx
    00000021: 	movq	%rbp, %r10
    00000024: 	leaq	(,%rbp,4), %rbx
    0000002c: 	shlq	$0x4, %r10
    00000030: 	leaq	(%rdx,%rbx), %rdx
    00000034: 	addq	%rax, %r10
    00000037: 	cmpq	%rdx, %rax
    0000003a: 	setae	%dl
    0000003d: 	cmpq	%r10, %rsi
    00000040: 	setae	%r12b
    00000044: 	orl	%r12d, %edx
    00000047: 	leaq	(%rcx,%rbx), %r12
    0000004b: 	cmpq	%r12, %rax
    0000004e: 	setae	%r12b
    00000052: 	cmpq	%r10, %rcx
    00000055: 	setae	%r13b
    00000059: 	orl	%r13d, %r12d
    0000005c: 	andl	%r12d, %edx
    0000005f: 	cmpl	$0x1, %r9d
    00000063: 	setne	%r12b
    00000067: 	testb	%r12b, %dl
    0000006a: 	je	.Ltmp939 # Offset: 106
    00000070: 	addq	%r8, %rbx
    00000073: 	cmpq	%rbx, %rax
    00000076: 	setae	%dl
    00000079: 	cmpq	%r10, %r8
    0000007c: 	setae	%r10b
    00000080: 	orb	%r10b, %dl
    00000083: 	je	.Ltmp939 # Offset: 131
    00000089: 	leal	-0x1(%r9), %edx
    0000008d: 	cmpl	$0x2, %edx
    00000090: 	jbe	.Ltmp940 # Offset: 144
    00000096: 	movl	%r9d, %r10d
    00000099: 	movd	%edi, %xmm7
    0000009d: 	xorl	%edx, %edx
    0000009f: 	shrl	$0x2, %r10d
    000000a3: 	pshufd	$0x0, %xmm7, %xmm4
    000000a8: 	shlq	$0x4, %r10
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp941:
    000000b0: 	movdqu	(%rcx,%rdx), %xmm6
    000000b5: 	movdqu	(%rsi,%rdx), %xmm0
    000000ba: 	movdqa	%xmm4, %xmm2
    000000be: 	movdqa	%xmm4, %xmm1
    000000c2: 	punpckldq	%xmm6, %xmm2
    000000c6: 	punpckhdq	%xmm6, %xmm1
    000000ca: 	movdqu	(%r8,%rdx), %xmm6
    000000d0: 	movdqa	%xmm0, %xmm3
    000000d4: 	movdqa	%xmm2, %xmm5
    000000d8: 	punpckldq	%xmm6, %xmm3
    000000dc: 	punpckhdq	%xmm6, %xmm0
    000000e0: 	punpckhdq	%xmm3, %xmm2
    000000e4: 	punpckldq	%xmm3, %xmm5
    000000e8: 	movups	%xmm2, 0x10(%rax,%rdx,4)
    000000ed: 	movdqa	%xmm1, %xmm2
    000000f1: 	punpckhdq	%xmm0, %xmm1
    000000f5: 	punpckldq	%xmm0, %xmm2
    000000f9: 	movups	%xmm5, (%rax,%rdx,4)
    000000fd: 	movups	%xmm2, 0x20(%rax,%rdx,4)
    00000102: 	movups	%xmm1, 0x30(%rax,%rdx,4)
    00000107: 	addq	$0x10, %rdx
    0000010b: 	cmpq	%rdx, %r10
    0000010e: 	jne	.Ltmp941 # Offset: 270
    00000110: 	movl	%r9d, %r10d
    00000113: 	andl	$-0x4, %r10d
    00000117: 	movl	%r10d, %edx
    0000011a: 	cmpl	%r10d, %r9d
    0000011d: 	je	.Ltmp942 # Offset: 285
    00000123: 	movl	%r9d, %r11d
    00000126: 	subl	%r10d, %r11d
    00000129: 	cmpl	$0x1, %r11d
    0000012d: 	je	.Ltmp943 # Offset: 301
.Ltmp945:
    00000133: 	movl	%r10d, %r9d
    00000136: 	movd	%edi, %xmm6
    0000013a: 	movd	%edi, %xmm2
    0000013e: 	movq	(%rsi,%r9,4), %xmm1
    00000144: 	movq	(%rcx,%r9,4), %xmm3
    0000014a: 	pshufd	$0xe0, %xmm6, %xmm0
    0000014f: 	movq	%r9, %r10
    00000152: 	movq	(%r8,%r9,4), %xmm4
    00000158: 	shlq	$0x4, %r10
    0000015c: 	movl	%r11d, %r9d
    0000015f: 	punpckldq	%xmm3, %xmm0
    00000163: 	pshufd	$0xe5, %xmm3, %xmm3
    00000168: 	punpckldq	%xmm3, %xmm2
    0000016c: 	addq	%rax, %r10
    0000016f: 	movdqa	%xmm1, %xmm3
    00000173: 	punpckldq	%xmm4, %xmm1
    00000177: 	andl	$-0x2, %r9d
    0000017b: 	punpckldq	%xmm4, %xmm3
    0000017f: 	movdqa	%xmm0, %xmm4
    00000183: 	pshufd	$0xe, %xmm1, %xmm1
    00000188: 	addl	%r9d, %edx
    0000018b: 	punpckldq	%xmm3, %xmm0
    0000018f: 	punpckldq	%xmm3, %xmm4
    00000193: 	pshufd	$0xe, %xmm0, %xmm0
    00000198: 	movq	%xmm4, (%r10)
    0000019d: 	movq	%xmm0, 0x8(%r10)
    000001a3: 	movdqa	%xmm2, %xmm0
    000001a7: 	punpckldq	%xmm1, %xmm2
    000001ab: 	punpckldq	%xmm1, %xmm0
    000001af: 	pshufd	$0xe, %xmm2, %xmm2
    000001b4: 	movq	%xmm0, 0x10(%r10)
    000001ba: 	movq	%xmm2, 0x18(%r10)
    000001c0: 	cmpl	%r9d, %r11d
    000001c3: 	je	.Ltmp942 # Offset: 451
.Ltmp943:
    000001c5: 	shll	$0x2, %edx
    000001c8: 	movslq	%edx, %rdx
    000001cb: 	movl	%edi, (%rax,%rdx,4)
    000001ce: 	movl	(%rsi,%rdx), %esi
    000001d1: 	leaq	0x1(%rdx), %r9
    000001d5: 	leaq	(,%r9,4), %rdi
    000001dd: 	movl	%esi, (%rax,%r9,4)
    000001e1: 	movl	(%rcx,%rdx), %ecx
    000001e4: 	movl	%ecx, 0x4(%rax,%rdi)
    000001e8: 	movl	(%r8,%rdx), %edx
    000001ec: 	movl	%edx, 0x8(%rax,%rdi)
.Ltmp942:
    000001f0: 	popq	%rbx
    000001f1: 	popq	%rbp
    000001f2: 	popq	%r12
    000001f4: 	popq	%r13
    000001f6: 	retq # Offset: 502
    000001f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp939:
    00000200: 	shlq	$0x2, %rbp
    00000204: 	xorl	%edx, %edx
    00000206: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp944:
    00000210: 	movl	%edi, (%rax,%rdx,4)
    00000213: 	movl	(%rsi,%rdx), %r9d
    00000217: 	movl	%r9d, 0x4(%rax,%rdx,4)
    0000021c: 	movl	(%rcx,%rdx), %r9d
    00000220: 	movl	%r9d, 0x8(%rax,%rdx,4)
    00000225: 	movl	(%r8,%rdx), %r9d
    00000229: 	movl	%r9d, 0xc(%rax,%rdx,4)
    0000022e: 	addq	$0x4, %rdx
    00000232: 	cmpq	%rdx, %rbp
    00000235: 	jne	.Ltmp944 # Offset: 565
    00000237: 	popq	%rbx
    00000238: 	popq	%rbp
    00000239: 	popq	%r12
    0000023b: 	popq	%r13
    0000023d: 	retq # Offset: 573
    0000023e: 	nop # Size: 2
.Ltmp938:
    00000240: 	retq # Offset: 576
.Ltmp940:
    00000241: 	xorl	%r10d, %r10d
    00000244: 	xorl	%edx, %edx
    00000246: 	jmp	.Ltmp945 # Offset: 582
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version1IjEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version2IjEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 113
  State       : disassembled
  Address     : 0x16c50
  Size        : 0x309
  MaxSize     : 0x310
  Offset      : 0x16c50
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version2IjEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0112:
    00000000: 	endbr64
    00000004: 	movslq	%r9d, %r9
    00000007: 	testq	%r9, %r9
    0000000a: 	je	.Ltmp946 # Offset: 10
    00000010: 	pushq	%r14
    00000012: 	movq	%rdx, %r10
    00000015: 	movq	%rcx, %r11
    00000018: 	movq	%rdi, %rdx
    0000001b: 	pushq	%r13
    0000001d: 	xorl	%eax, %eax
    0000001f: 	pushq	%r12
    00000021: 	pushq	%rbp
    00000022: 	pushq	%rbx
    00000023: 	movl	%esi, %ebx
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp947:
    00000028: 	movq	%rax, %rsi
    0000002b: 	addq	$0x1, %rax
    0000002f: 	movl	%ebx, (%rdx)
    00000031: 	addq	$0x10, %rdx
    00000035: 	cmpq	%rax, %r9
    00000038: 	jne	.Ltmp947 # Offset: 56
    0000003a: 	cmpq	$0x6, %rsi
    0000003e: 	movq	%rsi, %r13
    00000041: 	leaq	(,%rax,4), %r12
    00000049: 	seta	%bl
    0000004c: 	shlq	$0x4, %r13
    00000050: 	leaq	(%r10,%r12), %rcx
    00000054: 	leaq	0x4(%rdi), %rbp
    00000058: 	leaq	0x8(%rdi,%r13), %rdx
    0000005d: 	cmpq	%rdx, %r10
    00000060: 	setae	%dl
    00000063: 	cmpq	%rcx, %rbp
    00000066: 	setae	%cl
    00000069: 	orb	%cl, %dl
    0000006b: 	je	.Ltmp948 # Offset: 107
    00000071: 	movq	%rax, %r14
    00000074: 	movq	%rbp, %rdx
    00000077: 	xorl	%ecx, %ecx
    00000079: 	shrq	$0x2, %r14
    0000007d: 	testb	%bl, %bl
    0000007f: 	je	.Ltmp948 # Offset: 127
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp949:
    00000088: 	movq	%rcx, %r9
    0000008b: 	addq	$0x1, %rcx
    0000008f: 	addq	$0x40, %rdx
    00000093: 	shlq	$0x4, %r9
    00000097: 	movdqu	(%r10,%r9), %xmm0
    0000009d: 	pshufd	$0x55, %xmm0, %xmm1
    000000a2: 	movd	%xmm0, -0x40(%rdx)
    000000a7: 	movd	%xmm1, -0x30(%rdx)
    000000ac: 	movdqa	%xmm0, %xmm1
    000000b0: 	punpckhdq	%xmm0, %xmm1
    000000b4: 	pshufd	$0xff, %xmm0, %xmm0
    000000b9: 	movd	%xmm1, -0x20(%rdx)
    000000be: 	movd	%xmm0, -0x10(%rdx)
    000000c3: 	cmpq	%r14, %rcx
    000000c6: 	jne	.Ltmp949 # Offset: 198
    000000c8: 	movq	%rax, %rdx
    000000cb: 	andq	$-0x4, %rdx
    000000cf: 	movq	%rdx, %rcx
    000000d2: 	leaq	(%r10,%rdx,4), %r9
    000000d6: 	shlq	$0x4, %rcx
    000000da: 	addq	%rbp, %rcx
    000000dd: 	cmpq	%rdx, %rax
    000000e0: 	je	.Ltmp950 # Offset: 224
    000000e2: 	movl	(%r9), %r10d
    000000e5: 	movl	%r10d, (%rcx)
    000000e8: 	leaq	0x1(%rdx), %r10
    000000ec: 	cmpq	%r10, %rax
    000000ef: 	jbe	.Ltmp950 # Offset: 239
    000000f1: 	movl	0x4(%r9), %r10d
    000000f5: 	addq	$0x2, %rdx
    000000f9: 	movl	%r10d, 0x10(%rcx)
    000000fd: 	cmpq	%rdx, %rax
    00000100: 	jbe	.Ltmp950 # Offset: 256
    00000102: 	movl	0x8(%r9), %edx
    00000106: 	movl	%edx, 0x20(%rcx)
.Ltmp950:
    00000109: 	leaq	0xc(%rdi,%r13), %rdx
    0000010e: 	leaq	(%r11,%r12), %rcx
    00000112: 	cmpq	%rdx, %r11
    00000115: 	leaq	0x8(%rdi), %r10
    00000119: 	setae	%dl
    0000011c: 	cmpq	%rcx, %r10
    0000011f: 	setae	%cl
    00000122: 	orb	%cl, %dl
    00000124: 	je	.Ltmp951 # Offset: 292
    0000012a: 	movq	%rax, %rbp
    0000012d: 	movq	%r10, %rdx
    00000130: 	xorl	%ecx, %ecx
    00000132: 	shrq	$0x2, %rbp
    00000136: 	testb	%bl, %bl
    00000138: 	je	.Ltmp951 # Offset: 312
    0000013e: 	nop # Size: 2
.Ltmp952:
    00000140: 	movq	%rcx, %r9
    00000143: 	addq	$0x1, %rcx
    00000147: 	addq	$0x40, %rdx
    0000014b: 	shlq	$0x4, %r9
    0000014f: 	movdqu	(%r11,%r9), %xmm0
    00000155: 	pshufd	$0x55, %xmm0, %xmm1
    0000015a: 	movd	%xmm0, -0x40(%rdx)
    0000015f: 	movd	%xmm1, -0x30(%rdx)
    00000164: 	movdqa	%xmm0, %xmm1
    00000168: 	punpckhdq	%xmm0, %xmm1
    0000016c: 	pshufd	$0xff, %xmm0, %xmm0
    00000171: 	movd	%xmm1, -0x20(%rdx)
    00000176: 	movd	%xmm0, -0x10(%rdx)
    0000017b: 	cmpq	%rcx, %rbp
    0000017e: 	jne	.Ltmp952 # Offset: 382
    00000180: 	movq	%rax, %rdx
    00000183: 	andq	$-0x4, %rdx
    00000187: 	movq	%rdx, %rcx
    0000018a: 	leaq	(%r11,%rdx,4), %r9
    0000018e: 	shlq	$0x4, %rcx
    00000192: 	addq	%r10, %rcx
    00000195: 	cmpq	%rdx, %rax
    00000198: 	je	.Ltmp953 # Offset: 408
    0000019a: 	movl	(%r9), %r10d
    0000019d: 	movl	%r10d, (%rcx)
    000001a0: 	leaq	0x1(%rdx), %r10
    000001a4: 	cmpq	%r10, %rax
    000001a7: 	jbe	.Ltmp953 # Offset: 423
    000001a9: 	movl	0x4(%r9), %r10d
    000001ad: 	addq	$0x2, %rdx
    000001b1: 	movl	%r10d, 0x10(%rcx)
    000001b5: 	cmpq	%rdx, %rax
    000001b8: 	jbe	.Ltmp953 # Offset: 440
    000001ba: 	movl	0x8(%r9), %edx
    000001be: 	movl	%edx, 0x20(%rcx)
.Ltmp953:
    000001c1: 	movq	%rax, %rdx
    000001c4: 	leaq	0xc(%rdi), %r9
    000001c8: 	shlq	$0x4, %rdx
    000001cc: 	addq	%rdi, %rdx
    000001cf: 	cmpq	%rdx, %r8
    000001d2: 	setae	%dl
    000001d5: 	addq	%r8, %r12
    000001d8: 	cmpq	%r12, %r9
    000001db: 	setae	%cl
    000001de: 	orb	%cl, %dl
    000001e0: 	je	.Ltmp954 # Offset: 480
    000001e6: 	movq	%rax, %rdi
    000001e9: 	movq	%r9, %rdx
    000001ec: 	xorl	%ecx, %ecx
    000001ee: 	shrq	$0x2, %rdi
    000001f2: 	testb	%bl, %bl
    000001f4: 	je	.Ltmp954 # Offset: 500
    000001fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp955:
    00000200: 	movq	%rcx, %rsi
    00000203: 	addq	$0x1, %rcx
    00000207: 	addq	$0x40, %rdx
    0000020b: 	shlq	$0x4, %rsi
    0000020f: 	movdqu	(%r8,%rsi), %xmm0
    00000215: 	pshufd	$0x55, %xmm0, %xmm1
    0000021a: 	movd	%xmm0, -0x40(%rdx)
    0000021f: 	movd	%xmm1, -0x30(%rdx)
    00000224: 	movdqa	%xmm0, %xmm1
    00000228: 	punpckhdq	%xmm0, %xmm1
    0000022c: 	pshufd	$0xff, %xmm0, %xmm0
    00000231: 	movd	%xmm1, -0x20(%rdx)
    00000236: 	movd	%xmm0, -0x10(%rdx)
    0000023b: 	cmpq	%rcx, %rdi
    0000023e: 	jne	.Ltmp955 # Offset: 574
    00000240: 	movq	%rax, %rdx
    00000243: 	andq	$-0x4, %rdx
    00000247: 	movq	%rdx, %rcx
    0000024a: 	leaq	(%r8,%rdx,4), %rsi
    0000024e: 	shlq	$0x4, %rcx
    00000252: 	addq	%r9, %rcx
    00000255: 	cmpq	%rdx, %rax
    00000258: 	je	.Ltmp956 # Offset: 600
    0000025a: 	movl	(%rsi), %edi
    0000025c: 	movl	%edi, (%rcx)
    0000025e: 	leaq	0x1(%rdx), %rdi
    00000262: 	cmpq	%rdi, %rax
    00000265: 	jbe	.Ltmp956 # Offset: 613
    00000267: 	movl	0x4(%rsi), %edi
    0000026a: 	addq	$0x2, %rdx
    0000026e: 	movl	%edi, 0x10(%rcx)
    00000271: 	cmpq	%rdx, %rax
    00000274: 	jbe	.Ltmp956 # Offset: 628
    00000276: 	movl	0x8(%rsi), %eax
    00000279: 	movl	%eax, 0x20(%rcx)
.Ltmp956:
    0000027c: 	popq	%rbx
    0000027d: 	popq	%rbp
    0000027e: 	popq	%r12
    00000280: 	popq	%r13
    00000282: 	popq	%r14
    00000284: 	retq # Offset: 644
    00000285: 	nopl	(%rax) # Size: 3
.Ltmp954:
    00000288: 	xorl	%eax, %eax
    0000028a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp957:
    00000290: 	movl	(%r8,%rax,4), %edx
    00000294: 	addq	$0x10, %r9
    00000298: 	movl	%edx, -0x10(%r9)
    0000029c: 	movq	%rax, %rdx
    0000029f: 	addq	$0x1, %rax
    000002a3: 	cmpq	%rsi, %rdx
    000002a6: 	jne	.Ltmp957 # Offset: 678
    000002a8: 	popq	%rbx
    000002a9: 	popq	%rbp
    000002aa: 	popq	%r12
    000002ac: 	popq	%r13
    000002ae: 	popq	%r14
    000002b0: 	retq # Offset: 688
    000002b1: 	nopl	(%rax) # Size: 7
.Ltmp948:
    000002b8: 	xorl	%edx, %edx
    000002ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp958:
    000002c0: 	movl	(%r10,%rdx,4), %ecx
    000002c4: 	addq	$0x10, %rbp
    000002c8: 	movl	%ecx, -0x10(%rbp)
    000002cb: 	movq	%rdx, %rcx
    000002ce: 	addq	$0x1, %rdx
    000002d2: 	cmpq	%rcx, %rsi
    000002d5: 	jne	.Ltmp958 # Offset: 725
    000002d7: 	jmp	.Ltmp950 # Offset: 727
    000002dc: 	nopl	(%rax) # Size: 4
.Ltmp951:
    000002e0: 	xorl	%edx, %edx
    000002e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp959:
    000002e8: 	movl	(%r11,%rdx,4), %ecx
    000002ec: 	addq	$0x10, %r10
    000002f0: 	movl	%ecx, -0x10(%r10)
    000002f4: 	movq	%rdx, %rcx
    000002f7: 	addq	$0x1, %rdx
    000002fb: 	cmpq	%rcx, %rsi
    000002fe: 	jne	.Ltmp959 # Offset: 766
    00000300: 	jmp	.Ltmp953 # Offset: 768
    00000305: 	nopl	(%rax) # Size: 3
.Ltmp946:
    00000308: 	retq # Offset: 776
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version2IjEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version3IjEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 114
  State       : disassembled
  Address     : 0x16f60
  Size        : 0x2b1
  MaxSize     : 0x2c0
  Offset      : 0x16f60
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version3IjEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0113:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp960 # Offset: 7
    0000000d: 	movslq	%r9d, %r11
    00000010: 	pushq	%r14
    00000012: 	movq	%rdx, %r10
    00000015: 	movq	%r11, %rax
    00000018: 	pushq	%r13
    0000001a: 	shlq	$0x4, %rax
    0000001e: 	pushq	%r12
    00000020: 	leaq	-0x8(%rdi,%rax), %rax
    00000025: 	pushq	%rbp
    00000026: 	leal	-0x1(%r9), %ebp
    0000002a: 	pushq	%rbx
    0000002b: 	leaq	(,%r11,4), %rbx
    00000033: 	cmpq	%rax, %rdx
    00000036: 	leaq	(%rdx,%rbx), %rdx
    0000003a: 	setae	%al
    0000003d: 	cmpq	%rdx, %rdi
    00000040: 	setae	%dl
    00000043: 	orb	%dl, %al
    00000045: 	je	.Ltmp961 # Offset: 69
    0000004b: 	cmpl	$0x21, %ebp
    0000004e: 	jbe	.Ltmp961 # Offset: 78
    00000054: 	movl	%r9d, %r12d
    00000057: 	movq	%r10, %rdx
    0000005a: 	movq	%rdi, %rax
    0000005d: 	shrl	$0x2, %r12d
    00000061: 	subl	$0x1, %r12d
    00000065: 	shlq	$0x4, %r12
    00000069: 	leaq	0x10(%r10,%r12), %r12
    0000006e: 	nop # Size: 2
.Ltmp962:
    00000070: 	movdqu	(%rdx), %xmm0
    00000074: 	addq	$0x10, %rdx
    00000078: 	movl	%esi, (%rax)
    0000007a: 	addq	$0x40, %rax
    0000007e: 	movl	%esi, -0x30(%rax)
    00000081: 	pshufd	$0x55, %xmm0, %xmm1
    00000086: 	movd	%xmm0, -0x3c(%rax)
    0000008b: 	movd	%xmm1, -0x2c(%rax)
    00000090: 	movdqa	%xmm0, %xmm1
    00000094: 	punpckhdq	%xmm0, %xmm1
    00000098: 	pshufd	$0xff, %xmm0, %xmm0
    0000009d: 	movl	%esi, -0x20(%rax)
    000000a0: 	movl	%esi, -0x10(%rax)
    000000a3: 	movd	%xmm1, -0x1c(%rax)
    000000a8: 	movd	%xmm0, -0xc(%rax)
    000000ad: 	cmpq	%r12, %rdx
    000000b0: 	jne	.Ltmp962 # Offset: 176
    000000b2: 	movl	%r9d, %edx
    000000b5: 	andl	$-0x4, %edx
    000000b8: 	testb	$0x3, %r9b
    000000bc: 	je	.Ltmp963 # Offset: 188
    000000be: 	leal	(,%rdx,4), %eax
    000000c5: 	movslq	%eax, %r13
    000000c8: 	movl	%esi, (%rdi,%r13,4)
    000000cc: 	movl	(%r10,%r13), %r14d
    000000d0: 	leaq	(,%r13,4), %r12
    000000d8: 	movl	%r14d, 0x4(%rdi,%r13,4)
    000000dd: 	leal	0x1(%rdx), %r13d
    000000e1: 	cmpl	%r13d, %r9d
    000000e4: 	jle	.Ltmp963 # Offset: 228
    000000e6: 	leal	0x4(%rax), %r13d
    000000ea: 	movl	%esi, 0x10(%rdi,%r12)
    000000ef: 	addl	$0x2, %edx
    000000f2: 	movslq	%r13d, %r13
    000000f5: 	movl	(%r10,%r13), %r14d
    000000f9: 	movl	%r14d, 0x4(%rdi,%r13,4)
    000000fe: 	cmpl	%edx, %r9d
    00000101: 	jle	.Ltmp963 # Offset: 257
    00000103: 	addl	$0x8, %eax
    00000106: 	movl	%esi, 0x20(%rdi,%r12)
    0000010b: 	cltq
    0000010d: 	movl	(%r10,%rax), %edx
    00000111: 	movl	%edx, 0x4(%rdi,%rax,4)
.Ltmp963:
    00000115: 	leaq	(%rcx,%rbx), %rdx
    00000119: 	leaq	0x8(%rdi), %rax
    0000011d: 	shlq	$0x4, %r11
    00000121: 	addq	%rdi, %r11
    00000124: 	cmpq	%rdx, %rax
    00000127: 	setae	%sil
    0000012b: 	cmpq	%r11, %rcx
    0000012e: 	setae	%dl
    00000131: 	addq	%r8, %rbx
    00000134: 	orl	%edx, %esi
    00000136: 	cmpq	%rbx, %rax
    00000139: 	setae	%dl
    0000013c: 	cmpq	%r11, %r8
    0000013f: 	setae	%r10b
    00000143: 	orl	%r10d, %edx
    00000146: 	testb	%dl, %sil
    00000149: 	je	.Ltmp964 # Offset: 329
    0000014f: 	cmpl	$0x4, %ebp
    00000152: 	jbe	.Ltmp964 # Offset: 338
    00000158: 	movl	%r9d, %esi
    0000015b: 	xorl	%edx, %edx
    0000015d: 	shrl	$0x2, %esi
    00000160: 	shlq	$0x4, %rsi
    00000164: 	nopl	(%rax) # Size: 4
.Ltmp965:
    00000168: 	movdqu	(%rcx,%rdx), %xmm1
    0000016d: 	movdqu	(%r8,%rdx), %xmm0
    00000173: 	addq	$0x10, %rdx
    00000177: 	addq	$0x40, %rax
    0000017b: 	pshufd	$0x55, %xmm1, %xmm2
    00000180: 	movd	%xmm1, -0x40(%rax)
    00000185: 	movd	%xmm2, -0x30(%rax)
    0000018a: 	movdqa	%xmm1, %xmm2
    0000018e: 	punpckhdq	%xmm1, %xmm2
    00000192: 	pshufd	$0xff, %xmm1, %xmm1
    00000197: 	movd	%xmm0, -0x3c(%rax)
    0000019c: 	movd	%xmm1, -0x10(%rax)
    000001a1: 	pshufd	$0x55, %xmm0, %xmm1
    000001a6: 	movd	%xmm1, -0x2c(%rax)
    000001ab: 	movdqa	%xmm0, %xmm1
    000001af: 	punpckhdq	%xmm0, %xmm1
    000001b3: 	pshufd	$0xff, %xmm0, %xmm0
    000001b8: 	movd	%xmm2, -0x20(%rax)
    000001bd: 	movd	%xmm1, -0x1c(%rax)
    000001c2: 	movd	%xmm0, -0xc(%rax)
    000001c7: 	cmpq	%rdx, %rsi
    000001ca: 	jne	.Ltmp965 # Offset: 458
    000001cc: 	movl	%r9d, %edx
    000001cf: 	andl	$-0x4, %edx
    000001d2: 	testb	$0x3, %r9b
    000001d6: 	je	.Ltmp966 # Offset: 470
    000001d8: 	movl	%edx, %esi
    000001da: 	movl	(%rcx,%rsi,4), %r11d
    000001de: 	leaq	(,%rsi,4), %rax
    000001e6: 	leaq	0x2(%rax), %r10
    000001ea: 	movl	%r11d, (%rdi,%r10,4)
    000001ee: 	movl	(%r8,%rsi,4), %esi
    000001f2: 	movl	%esi, 0x4(%rdi,%r10,4)
    000001f7: 	leal	0x1(%rdx), %esi
    000001fa: 	cmpl	%esi, %r9d
    000001fd: 	jle	.Ltmp966 # Offset: 509
    000001ff: 	movl	0x4(%rcx,%rax), %r10d
    00000204: 	leaq	0x6(%rax), %rsi
    00000208: 	addl	$0x2, %edx
    0000020b: 	movl	%r10d, (%rdi,%rsi,4)
    0000020f: 	movl	0x4(%r8,%rax), %r10d
    00000214: 	movl	%r10d, 0x4(%rdi,%rsi,4)
    00000219: 	cmpl	%edx, %r9d
    0000021c: 	jle	.Ltmp966 # Offset: 540
    0000021e: 	movl	0x8(%rcx,%rax), %ecx
    00000222: 	leaq	0xa(%rax), %rdx
    00000226: 	movl	%ecx, (%rdi,%rdx,4)
    00000229: 	movl	0x8(%r8,%rax), %eax
    0000022e: 	movl	%eax, 0x4(%rdi,%rdx,4)
.Ltmp966:
    00000232: 	popq	%rbx
    00000233: 	popq	%rbp
    00000234: 	popq	%r12
    00000236: 	popq	%r13
    00000238: 	popq	%r14
    0000023a: 	retq # Offset: 570
    0000023b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp964:
    00000240: 	movl	%r9d, %r9d
    00000243: 	xorl	%eax, %eax
    00000245: 	shlq	$0x2, %r9
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp967:
    00000250: 	movl	(%rcx,%rax), %edx
    00000253: 	movl	%edx, 0x8(%rdi,%rax,4)
    00000257: 	movl	(%r8,%rax), %edx
    0000025b: 	movl	%edx, 0xc(%rdi,%rax,4)
    0000025f: 	addq	$0x4, %rax
    00000263: 	cmpq	%rax, %r9
    00000266: 	jne	.Ltmp967 # Offset: 614
    00000268: 	popq	%rbx
    00000269: 	popq	%rbp
    0000026a: 	popq	%r12
    0000026c: 	popq	%r13
    0000026e: 	popq	%r14
    00000270: 	retq # Offset: 624
    00000271: 	nopl	(%rax) # Size: 7
.Ltmp961:
    00000278: 	movl	%ebp, %edx
    0000027a: 	movq	%rdi, %rax
    0000027d: 	shlq	$0x4, %rdx
    00000281: 	leaq	0x10(%rdi,%rdx), %r12
    00000286: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp968:
    00000290: 	movl	%esi, (%rax)
    00000292: 	movl	(%r10), %edx
    00000295: 	addq	$0x10, %rax
    00000299: 	addq	$0x4, %r10
    0000029d: 	movl	%edx, -0xc(%rax)
    000002a0: 	cmpq	%rax, %r12
    000002a3: 	jne	.Ltmp968 # Offset: 675
    000002a5: 	jmp	.Ltmp963 # Offset: 677
    000002aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp960:
    000002b0: 	retq # Offset: 688
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version3IjEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version4IjEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 115
  State       : disassembled
  Address     : 0x17220
  Size        : 0x401
  MaxSize     : 0x410
  Offset      : 0x17220
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version4IjEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0114:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r9d, -0x18(%rsp)
    00000013: 	movl	%r9d, -0x14(%rsp)
    00000018: 	testl	%r9d, %r9d
    0000001b: 	jle	.Ltmp969 # Offset: 27
    00000021: 	movq	%rdi, %r13
    00000024: 	movl	%esi, %r14d
    00000027: 	movq	%rcx, %rdi
    0000002a: 	movq	%rdx, %rsi
    0000002d: 	xorl	%r15d, %r15d
.Ltmp981:
    00000030: 	addl	$0x100, %r15d
    00000037: 	cmpl	-0x18(%rsp), %r15d
    0000003c: 	jg	.Ltmp970 # Offset: 60
    00000042: 	movq	$0x1000, -0x20(%rsp)
    0000004b: 	movl	$0x400, %r12d
    00000051: 	movl	$0x100, %eax
.Ltmp982:
    00000056: 	movq	%r13, %rcx
    00000059: 	xorl	%edx, %edx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp971:
    00000060: 	addq	$0x1, %rdx
    00000064: 	movl	%r14d, (%rcx)
    00000067: 	addq	$0x10, %rcx
    0000006b: 	cmpq	%rdx, %rax
    0000006e: 	ja	.Ltmp971 # Offset: 110
    00000070: 	cmpq	$0x7, %rax
    00000074: 	movl	$0x4, %ecx
    00000079: 	leaq	(,%rax,4), %rbx
    00000081: 	seta	-0x21(%rsp)
    00000086: 	leaq	-0x1(%rax), %r9
    0000008a: 	leaq	0x4(%r13), %r11
    0000008e: 	testq	%rax, %rax
    00000091: 	cmoveq	%rcx, %rbx
    00000095: 	shlq	$0x4, %r9
    00000099: 	movl	$0x8, %ecx
    0000009e: 	testq	%rax, %rax
    000000a1: 	leaq	0x8(%r9), %rdx
    000000a5: 	movzbl	-0x21(%rsp), %r10d
    000000ab: 	cmoveq	%rcx, %rdx
    000000af: 	addq	%r13, %rdx
    000000b2: 	cmpq	%rdx, %rsi
    000000b5: 	leaq	(%rsi,%rbx), %rdx
    000000b9: 	setae	%cl
    000000bc: 	cmpq	%rdx, %r11
    000000bf: 	setae	%dl
    000000c2: 	orb	%cl, %dl
    000000c4: 	je	.Ltmp972 # Offset: 196
    000000ca: 	testb	%r10b, %r10b
    000000cd: 	je	.Ltmp972 # Offset: 205
    000000d3: 	testq	%rax, %rax
    000000d6: 	movl	$0x1, %ecx
    000000db: 	movq	%r11, %rdx
    000000de: 	cmovneq	%rax, %rcx
    000000e2: 	movq	%rcx, %rbp
    000000e5: 	movq	%rcx, -0x10(%rsp)
    000000ea: 	xorl	%ecx, %ecx
    000000ec: 	shrq	$0x2, %rbp
.Ltmp973:
    000000f0: 	movq	%rcx, %r10
    000000f3: 	addq	$0x1, %rcx
    000000f7: 	addq	$0x40, %rdx
    000000fb: 	shlq	$0x4, %r10
    000000ff: 	movdqu	(%rsi,%r10), %xmm0
    00000105: 	pshufd	$0x55, %xmm0, %xmm1
    0000010a: 	movd	%xmm0, -0x40(%rdx)
    0000010f: 	movd	%xmm1, -0x30(%rdx)
    00000114: 	movdqa	%xmm0, %xmm1
    00000118: 	punpckhdq	%xmm0, %xmm1
    0000011c: 	pshufd	$0xff, %xmm0, %xmm0
    00000121: 	movd	%xmm1, -0x20(%rdx)
    00000126: 	movd	%xmm0, -0x10(%rdx)
    0000012b: 	cmpq	%rbp, %rcx
    0000012e: 	jne	.Ltmp973 # Offset: 302
    00000130: 	movq	-0x10(%rsp), %rbp
    00000135: 	movq	%rbp, %rdx
    00000138: 	andq	$-0x4, %rdx
    0000013c: 	movq	%rdx, %rcx
    0000013f: 	leaq	(%rsi,%rdx,4), %r10
    00000143: 	shlq	$0x4, %rcx
    00000147: 	addq	%r11, %rcx
    0000014a: 	cmpq	%rdx, %rbp
    0000014d: 	je	.Ltmp974 # Offset: 333
    0000014f: 	movl	(%r10), %r11d
    00000152: 	movl	%r11d, (%rcx)
    00000155: 	leaq	0x1(%rdx), %r11
    00000159: 	cmpq	%r11, %rax
    0000015c: 	jbe	.Ltmp974 # Offset: 348
    0000015e: 	movl	0x4(%r10), %r11d
    00000162: 	addq	$0x2, %rdx
    00000166: 	movl	%r11d, 0x10(%rcx)
    0000016a: 	cmpq	%rdx, %rax
    0000016d: 	jbe	.Ltmp974 # Offset: 365
    0000016f: 	movl	0x8(%r10), %edx
    00000173: 	movl	%edx, 0x20(%rcx)
.Ltmp974:
    00000176: 	addq	$0xc, %r9
    0000017a: 	movl	$0xc, %ecx
    0000017f: 	leaq	(%rdi,%rbx), %rdx
    00000183: 	testq	%rax, %rax
    00000186: 	cmoveq	%rcx, %r9
    0000018a: 	leaq	0x8(%r13), %r10
    0000018e: 	addq	%r13, %r9
    00000191: 	cmpq	%r9, %rdi
    00000194: 	setae	%cl
    00000197: 	cmpq	%rdx, %r10
    0000019a: 	setae	%dl
    0000019d: 	orb	%cl, %dl
    0000019f: 	je	.Ltmp975 # Offset: 415
    000001a5: 	cmpb	$0x0, -0x21(%rsp)
    000001aa: 	je	.Ltmp975 # Offset: 426
    000001b0: 	testq	%rax, %rax
    000001b3: 	movl	$0x1, %ebp
    000001b8: 	movq	%r10, %rdx
    000001bb: 	cmovneq	%rax, %rbp
    000001bf: 	xorl	%ecx, %ecx
    000001c1: 	movq	%rbp, %r11
    000001c4: 	shrq	$0x2, %r11
    000001c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp976:
    000001d0: 	movq	%rcx, %r9
    000001d3: 	addq	$0x1, %rcx
    000001d7: 	addq	$0x40, %rdx
    000001db: 	shlq	$0x4, %r9
    000001df: 	movdqu	(%rdi,%r9), %xmm0
    000001e5: 	pshufd	$0x55, %xmm0, %xmm1
    000001ea: 	movd	%xmm0, -0x40(%rdx)
    000001ef: 	movd	%xmm1, -0x30(%rdx)
    000001f4: 	movdqa	%xmm0, %xmm1
    000001f8: 	punpckhdq	%xmm0, %xmm1
    000001fc: 	pshufd	$0xff, %xmm0, %xmm0
    00000201: 	movd	%xmm1, -0x20(%rdx)
    00000206: 	movd	%xmm0, -0x10(%rdx)
    0000020b: 	cmpq	%r11, %rcx
    0000020e: 	jne	.Ltmp976 # Offset: 526
    00000210: 	movq	%rbp, %rdx
    00000213: 	andq	$-0x4, %rdx
    00000217: 	movq	%rdx, %rcx
    0000021a: 	leaq	(%rdi,%rdx,4), %r9
    0000021e: 	shlq	$0x4, %rcx
    00000222: 	addq	%r10, %rcx
    00000225: 	cmpq	%rdx, %rbp
    00000228: 	je	.Ltmp977 # Offset: 552
    0000022a: 	movl	(%r9), %r10d
    0000022d: 	movl	%r10d, (%rcx)
    00000230: 	leaq	0x1(%rdx), %r10
    00000234: 	cmpq	%r10, %rax
    00000237: 	jbe	.Ltmp977 # Offset: 567
    00000239: 	movl	0x4(%r9), %r10d
    0000023d: 	addq	$0x2, %rdx
    00000241: 	movl	%r10d, 0x10(%rcx)
    00000245: 	cmpq	%rdx, %rax
    00000248: 	jbe	.Ltmp977 # Offset: 584
    0000024a: 	movl	0x8(%r9), %edx
    0000024e: 	movl	%edx, 0x20(%rcx)
.Ltmp977:
    00000251: 	movq	%rax, %rdx
    00000254: 	movl	$0x10, %ecx
    00000259: 	leaq	0xc(%r13), %r10
    0000025d: 	shlq	$0x4, %rdx
    00000261: 	testq	%rax, %rax
    00000264: 	cmoveq	%rcx, %rdx
    00000268: 	addq	%r13, %rdx
    0000026b: 	cmpq	%rdx, %r8
    0000026e: 	setae	%dl
    00000271: 	addq	%r8, %rbx
    00000274: 	cmpq	%rbx, %r10
    00000277: 	setae	%cl
    0000027a: 	orb	%dl, %cl
    0000027c: 	je	.Ltmp978 # Offset: 636
    00000282: 	cmpb	$0x0, -0x21(%rsp)
    00000287: 	je	.Ltmp978 # Offset: 647
    0000028d: 	testq	%rax, %rax
    00000290: 	movl	$0x1, %ebx
    00000295: 	movq	%r10, %rdx
    00000298: 	cmovneq	%rax, %rbx
    0000029c: 	xorl	%ecx, %ecx
    0000029e: 	movq	%rbx, %r11
    000002a1: 	shrq	$0x2, %r11
    000002a5: 	nopl	(%rax) # Size: 3
.Ltmp979:
    000002a8: 	movq	%rcx, %r9
    000002ab: 	addq	$0x1, %rcx
    000002af: 	addq	$0x40, %rdx
    000002b3: 	shlq	$0x4, %r9
    000002b7: 	movdqu	(%r8,%r9), %xmm0
    000002bd: 	pshufd	$0x55, %xmm0, %xmm1
    000002c2: 	movd	%xmm0, -0x40(%rdx)
    000002c7: 	movd	%xmm1, -0x30(%rdx)
    000002cc: 	movdqa	%xmm0, %xmm1
    000002d0: 	punpckhdq	%xmm0, %xmm1
    000002d4: 	pshufd	$0xff, %xmm0, %xmm0
    000002d9: 	movd	%xmm1, -0x20(%rdx)
    000002de: 	movd	%xmm0, -0x10(%rdx)
    000002e3: 	cmpq	%rcx, %r11
    000002e6: 	jne	.Ltmp979 # Offset: 742
    000002e8: 	movq	%rbx, %rdx
    000002eb: 	andq	$-0x4, %rdx
    000002ef: 	movq	%rdx, %rcx
    000002f2: 	leaq	(%r8,%rdx,4), %r9
    000002f6: 	shlq	$0x4, %rcx
    000002fa: 	addq	%r10, %rcx
    000002fd: 	cmpq	%rdx, %rbx
    00000300: 	je	.Ltmp980 # Offset: 768
    00000302: 	movl	(%r9), %r10d
    00000305: 	movl	%r10d, (%rcx)
    00000308: 	leaq	0x1(%rdx), %r10
    0000030c: 	cmpq	%r10, %rax
    0000030f: 	jbe	.Ltmp980 # Offset: 783
    00000311: 	movl	0x4(%r9), %r10d
    00000315: 	addq	$0x2, %rdx
    00000319: 	movl	%r10d, 0x10(%rcx)
    0000031d: 	cmpq	%rdx, %rax
    00000320: 	jbe	.Ltmp980 # Offset: 800
    00000322: 	movl	0x8(%r9), %eax
    00000326: 	movl	%eax, 0x20(%rcx)
.Ltmp980:
    00000329: 	addq	-0x20(%rsp), %r13
    0000032e: 	addq	%r12, %rsi
    00000331: 	addq	%r12, %rdi
    00000334: 	addq	%r12, %r8
    00000337: 	subl	$0x100, -0x14(%rsp)
    0000033f: 	cmpl	-0x18(%rsp), %r15d
    00000344: 	jl	.Ltmp981 # Offset: 836
.Ltmp969:
    0000034a: 	popq	%rbx
    0000034b: 	popq	%rbp
    0000034c: 	popq	%r12
    0000034e: 	popq	%r13
    00000350: 	popq	%r14
    00000352: 	popq	%r15
    00000354: 	retq # Offset: 852
    00000355: 	nopl	(%rax) # Size: 3
.Ltmp970:
    00000358: 	movslq	-0x14(%rsp), %rax
    0000035d: 	leal	(,%rax,4), %edx
    00000364: 	leaq	(,%rax,4), %r12
    0000036c: 	movslq	%edx, %rdx
    0000036f: 	leaq	(,%rdx,4), %rbx
    00000377: 	movq	%rbx, -0x20(%rsp)
    0000037c: 	testq	%rax, %rax
    0000037f: 	jne	.Ltmp982 # Offset: 895
    00000385: 	jmp	.Ltmp980 # Offset: 901
    00000387: 	nopw	(%rax,%rax) # Size: 9
.Ltmp978:
    00000390: 	xorl	%edx, %edx
    00000392: 	nopw	(%rax,%rax) # Size: 6
.Ltmp983:
    00000398: 	movl	(%r8,%rdx,4), %ecx
    0000039c: 	addq	$0x1, %rdx
    000003a0: 	addq	$0x10, %r10
    000003a4: 	movl	%ecx, -0x10(%r10)
    000003a8: 	cmpq	%rax, %rdx
    000003ab: 	jb	.Ltmp983 # Offset: 939
    000003ad: 	jmp	.Ltmp980 # Offset: 941
    000003b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp975:
    000003b8: 	xorl	%edx, %edx
    000003ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp984:
    000003c0: 	movl	(%rdi,%rdx,4), %ecx
    000003c3: 	addq	$0x1, %rdx
    000003c7: 	addq	$0x10, %r10
    000003cb: 	movl	%ecx, -0x10(%r10)
    000003cf: 	cmpq	%rdx, %rax
    000003d2: 	ja	.Ltmp984 # Offset: 978
    000003d4: 	jmp	.Ltmp977 # Offset: 980
    000003d9: 	nopl	(%rax) # Size: 7
.Ltmp972:
    000003e0: 	xorl	%edx, %edx
    000003e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp985:
    000003e8: 	movl	(%rsi,%rdx,4), %ecx
    000003eb: 	addq	$0x1, %rdx
    000003ef: 	addq	$0x10, %r11
    000003f3: 	movl	%ecx, -0x10(%r11)
    000003f7: 	cmpq	%rdx, %rax
    000003fa: 	ja	.Ltmp985 # Offset: 1018
    000003fc: 	jmp	.Ltmp974 # Offset: 1020
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version4IjEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version5IjEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 116
  State       : disassembled
  Address     : 0x17630
  Size        : 0x352
  MaxSize     : 0x360
  Offset      : 0x17630
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version5IjEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0115:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r9d, -0x1c(%rsp)
    00000013: 	testl	%r9d, %r9d
    00000016: 	jle	.Ltmp986 # Offset: 22
    0000001c: 	movq	%rdx, %r11
    0000001f: 	movq	%rcx, %r10
    00000022: 	movl	%r9d, %r14d
    00000025: 	xorl	%r13d, %r13d
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp994:
    00000030: 	addl	$0x100, %r13d
    00000037: 	cmpl	-0x1c(%rsp), %r13d
    0000003c: 	jg	.Ltmp987 # Offset: 60
    00000042: 	movq	$0x1000, -0x18(%rsp)
    0000004b: 	movl	$0x400, %r12d
    00000051: 	movl	$0x100, %ecx
.Ltmp995:
    00000056: 	movslq	%ecx, %r9
    00000059: 	movl	$0x8, %edx
    0000005e: 	movq	%r9, %rax
    00000061: 	leaq	(,%r9,4), %rbx
    00000069: 	shlq	$0x4, %rax
    0000006d: 	subq	$0x8, %rax
    00000071: 	testl	%ecx, %ecx
    00000073: 	cmovleq	%rdx, %rax
    00000077: 	addq	%rdi, %rax
    0000007a: 	cmpq	%rax, %r11
    0000007d: 	movl	$0x4, %eax
    00000082: 	setae	%dl
    00000085: 	testl	%ecx, %ecx
    00000087: 	cmovgq	%rbx, %rax
    0000008b: 	addq	%r11, %rax
    0000008e: 	cmpq	%rax, %rdi
    00000091: 	setae	%al
    00000094: 	orb	%dl, %al
    00000096: 	je	.Ltmp988 # Offset: 150
    0000009c: 	cmpl	$0x22, %ecx
    0000009f: 	jle	.Ltmp988 # Offset: 159
    000000a5: 	testl	%ecx, %ecx
    000000a7: 	movl	$0x1, %r15d
    000000ad: 	movq	%r11, %rdx
    000000b0: 	movq	%rdi, %rax
    000000b3: 	cmovgl	%ecx, %r15d
    000000b7: 	movl	%r15d, %ebp
    000000ba: 	shrl	$0x2, %ebp
    000000bd: 	subl	$0x1, %ebp
    000000c0: 	shlq	$0x4, %rbp
    000000c4: 	leaq	0x10(%r11,%rbp), %rbp
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp989:
    000000d0: 	movdqu	(%rdx), %xmm0
    000000d4: 	addq	$0x10, %rdx
    000000d8: 	movl	%esi, (%rax)
    000000da: 	addq	$0x40, %rax
    000000de: 	movl	%esi, -0x30(%rax)
    000000e1: 	pshufd	$0x55, %xmm0, %xmm1
    000000e6: 	movd	%xmm0, -0x3c(%rax)
    000000eb: 	movd	%xmm1, -0x2c(%rax)
    000000f0: 	movdqa	%xmm0, %xmm1
    000000f4: 	punpckhdq	%xmm0, %xmm1
    000000f8: 	pshufd	$0xff, %xmm0, %xmm0
    000000fd: 	movl	%esi, -0x20(%rax)
    00000100: 	movl	%esi, -0x10(%rax)
    00000103: 	movd	%xmm1, -0x1c(%rax)
    00000108: 	movd	%xmm0, -0xc(%rax)
    0000010d: 	cmpq	%rdx, %rbp
    00000110: 	jne	.Ltmp989 # Offset: 272
    00000112: 	movl	%r15d, %edx
    00000115: 	andl	$-0x4, %edx
    00000118: 	andl	$0x3, %r15d
    0000011c: 	je	.Ltmp990 # Offset: 284
    0000011e: 	leal	(,%rdx,4), %eax
    00000125: 	movslq	%eax, %rbp
    00000128: 	leaq	(,%rbp,4), %r15
    00000130: 	movl	%esi, (%rdi,%rbp,4)
    00000133: 	movq	%r15, -0x10(%rsp)
    00000138: 	movl	(%r11,%rbp), %r15d
    0000013c: 	movl	%r15d, 0x4(%rdi,%rbp,4)
    00000141: 	leal	0x1(%rdx), %ebp
    00000144: 	cmpl	%ebp, %ecx
    00000146: 	jle	.Ltmp990 # Offset: 326
    00000148: 	movq	-0x10(%rsp), %r15
    0000014d: 	leal	0x4(%rax), %ebp
    00000150: 	addl	$0x2, %edx
    00000153: 	movslq	%ebp, %rbp
    00000156: 	movl	%esi, 0x10(%rdi,%r15)
    0000015b: 	movl	(%r11,%rbp), %r15d
    0000015f: 	movl	%r15d, 0x4(%rdi,%rbp,4)
    00000164: 	cmpl	%edx, %ecx
    00000166: 	jle	.Ltmp990 # Offset: 358
    00000168: 	movq	-0x10(%rsp), %rdx
    0000016d: 	addl	$0x8, %eax
    00000170: 	cltq
    00000172: 	movl	%esi, 0x20(%rdi,%rdx)
    00000176: 	movl	(%r11,%rax), %edx
    0000017a: 	movl	%edx, 0x4(%rdi,%rax,4)
.Ltmp990:
    0000017e: 	leaq	(%r8,%rbx), %rdx
    00000182: 	leaq	0x8(%rdi), %rax
    00000186: 	shlq	$0x4, %r9
    0000018a: 	addq	%rdi, %r9
    0000018d: 	cmpq	%rdx, %rax
    00000190: 	setae	%bpl
    00000194: 	cmpq	%r9, %r8
    00000197: 	setae	%dl
    0000019a: 	addq	%r10, %rbx
    0000019d: 	orl	%ebp, %edx
    0000019f: 	cmpq	%rbx, %rax
    000001a2: 	setae	%bl
    000001a5: 	cmpq	%r9, %r10
    000001a8: 	setae	%r9b
    000001ac: 	orl	%ebx, %r9d
    000001af: 	testb	%r9b, %dl
    000001b2: 	je	.Ltmp991 # Offset: 434
    000001b8: 	leal	-0x1(%rcx), %edx
    000001bb: 	cmpl	$0x4, %edx
    000001be: 	jbe	.Ltmp991 # Offset: 446
    000001c4: 	movl	%ecx, %r9d
    000001c7: 	xorl	%edx, %edx
    000001c9: 	shrl	$0x2, %r9d
    000001cd: 	shlq	$0x4, %r9
    000001d1: 	nopl	(%rax) # Size: 7
.Ltmp992:
    000001d8: 	movdqu	(%r10,%rdx), %xmm1
    000001de: 	movdqu	(%r8,%rdx), %xmm0
    000001e4: 	addq	$0x10, %rdx
    000001e8: 	addq	$0x40, %rax
    000001ec: 	pshufd	$0x55, %xmm1, %xmm2
    000001f1: 	movd	%xmm1, -0x40(%rax)
    000001f6: 	movd	%xmm2, -0x30(%rax)
    000001fb: 	movdqa	%xmm1, %xmm2
    000001ff: 	punpckhdq	%xmm1, %xmm2
    00000203: 	pshufd	$0xff, %xmm1, %xmm1
    00000208: 	movd	%xmm0, -0x3c(%rax)
    0000020d: 	movd	%xmm1, -0x10(%rax)
    00000212: 	pshufd	$0x55, %xmm0, %xmm1
    00000217: 	movd	%xmm1, -0x2c(%rax)
    0000021c: 	movdqa	%xmm0, %xmm1
    00000220: 	punpckhdq	%xmm0, %xmm1
    00000224: 	pshufd	$0xff, %xmm0, %xmm0
    00000229: 	movd	%xmm2, -0x20(%rax)
    0000022e: 	movd	%xmm1, -0x1c(%rax)
    00000233: 	movd	%xmm0, -0xc(%rax)
    00000238: 	cmpq	%rdx, %r9
    0000023b: 	jne	.Ltmp992 # Offset: 571
    0000023d: 	movl	%ecx, %edx
    0000023f: 	andl	$-0x4, %edx
    00000242: 	testb	$0x3, %cl
    00000245: 	je	.Ltmp993 # Offset: 581
    00000247: 	movl	%edx, %r9d
    0000024a: 	movl	(%r10,%r9,4), %ebp
    0000024e: 	leaq	(,%r9,4), %rax
    00000256: 	leaq	0x2(%rax), %rbx
    0000025a: 	movl	%ebp, (%rdi,%rbx,4)
    0000025d: 	movl	(%r8,%r9,4), %r9d
    00000261: 	movl	%r9d, 0x4(%rdi,%rbx,4)
    00000266: 	leal	0x1(%rdx), %r9d
    0000026a: 	cmpl	%r9d, %ecx
    0000026d: 	jle	.Ltmp993 # Offset: 621
    0000026f: 	movl	0x4(%r10,%rax), %ebx
    00000274: 	leaq	0x6(%rax), %r9
    00000278: 	addl	$0x2, %edx
    0000027b: 	movl	%ebx, (%rdi,%r9,4)
    0000027f: 	movl	0x4(%r8,%rax), %ebx
    00000284: 	movl	%ebx, 0x4(%rdi,%r9,4)
    00000289: 	cmpl	%edx, %ecx
    0000028b: 	jle	.Ltmp993 # Offset: 651
    0000028d: 	movl	0x8(%r10,%rax), %ecx
    00000292: 	leaq	0xa(%rax), %rdx
    00000296: 	movl	%ecx, (%rdi,%rdx,4)
    00000299: 	movl	0x8(%r8,%rax), %eax
    0000029e: 	movl	%eax, 0x4(%rdi,%rdx,4)
.Ltmp993:
    000002a2: 	addq	-0x18(%rsp), %rdi
    000002a7: 	addq	%r12, %r11
    000002aa: 	addq	%r12, %r10
    000002ad: 	addq	%r12, %r8
    000002b0: 	subl	$0x100, %r14d
    000002b7: 	cmpl	-0x1c(%rsp), %r13d
    000002bc: 	jl	.Ltmp994 # Offset: 700
.Ltmp986:
    000002c2: 	popq	%rbx
    000002c3: 	popq	%rbp
    000002c4: 	popq	%r12
    000002c6: 	popq	%r13
    000002c8: 	popq	%r14
    000002ca: 	popq	%r15
    000002cc: 	retq # Offset: 716
    000002cd: 	nopl	(%rax) # Size: 3
.Ltmp987:
    000002d0: 	leal	(,%r14,4), %eax
    000002d8: 	movslq	%r14d, %r12
    000002db: 	movl	%r14d, %ecx
    000002de: 	cltq
    000002e0: 	shlq	$0x2, %r12
    000002e4: 	shlq	$0x2, %rax
    000002e8: 	movq	%rax, -0x18(%rsp)
    000002ed: 	testl	%r14d, %r14d
    000002f0: 	jg	.Ltmp995 # Offset: 752
    000002f6: 	jmp	.Ltmp993 # Offset: 758
    000002f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp991:
    00000300: 	movl	%ecx, %ecx
    00000302: 	xorl	%eax, %eax
    00000304: 	shlq	$0x2, %rcx
    00000308: 	nopl	(%rax,%rax) # Size: 8
.Ltmp996:
    00000310: 	movl	(%r10,%rax), %edx
    00000314: 	movl	%edx, 0x8(%rdi,%rax,4)
    00000318: 	movl	(%r8,%rax), %edx
    0000031c: 	movl	%edx, 0xc(%rdi,%rax,4)
    00000320: 	addq	$0x4, %rax
    00000324: 	cmpq	%rax, %rcx
    00000327: 	jne	.Ltmp996 # Offset: 807
    00000329: 	jmp	.Ltmp993 # Offset: 809
    0000032e: 	nop # Size: 2
.Ltmp988:
    00000330: 	movq	%rdi, %rdx
    00000333: 	xorl	%eax, %eax
    00000335: 	nopl	(%rax) # Size: 3
.Ltmp997:
    00000338: 	movl	%esi, (%rdx)
    0000033a: 	movl	(%r11,%rax,4), %ebp
    0000033e: 	addq	$0x1, %rax
    00000342: 	addq	$0x10, %rdx
    00000346: 	movl	%ebp, -0xc(%rdx)
    00000349: 	cmpl	%eax, %ecx
    0000034b: 	jg	.Ltmp997 # Offset: 843
    0000034d: 	jmp	.Ltmp990 # Offset: 845
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version5IjEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version6IjEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 117
  State       : disassembled
  Address     : 0x17990
  Size        : 0x3cc
  MaxSize     : 0x3d0
  Offset      : 0x17990
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version6IjEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0116:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r9d, -0x18(%rsp)
    00000013: 	movl	%r9d, -0x14(%rsp)
    00000018: 	testl	%r9d, %r9d
    0000001b: 	jle	.Ltmp998 # Offset: 27
    00000021: 	movq	%rdx, %r11
    00000024: 	movq	%rcx, %r10
    00000027: 	movq	%r8, %r13
    0000002a: 	xorl	%r14d, %r14d
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp1010:
    00000030: 	addl	$0x100, %r14d
    00000037: 	cmpl	-0x18(%rsp), %r14d
    0000003c: 	jg	.Ltmp999 # Offset: 60
    00000042: 	movq	$0x1000, -0x20(%rsp)
    0000004b: 	movl	$0x400, %ebx
    00000050: 	movl	$0x100, %ecx
.Ltmp1012:
    00000055: 	movq	%rdi, %rdx
    00000058: 	xorl	%eax, %eax
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1000:
    00000060: 	addl	$0x1, %eax
    00000063: 	movl	%esi, (%rdx)
    00000065: 	addq	$0x10, %rdx
    00000069: 	cmpl	%ecx, %eax
    0000006b: 	jl	.Ltmp1000 # Offset: 107
    0000006d: 	leal	-0x1(%rcx), %eax
    00000070: 	movslq	%ecx, %r8
    00000073: 	cmpl	$0x6, %eax
    00000076: 	leaq	-0x1(%r8), %rbp
    0000007a: 	leaq	(,%r8,4), %r9
    00000082: 	movl	%eax, -0x10(%rsp)
    00000086: 	seta	%r12b
    0000008a: 	shlq	$0x4, %rbp
    0000008e: 	leaq	0x4(%rdi), %rax
    00000092: 	leaq	0x8(%rdi,%rbp), %rdx
    00000097: 	cmpq	%rdx, %r11
    0000009a: 	leaq	(%r11,%r9), %rdx
    0000009e: 	setae	%r15b
    000000a2: 	cmpq	%rdx, %rax
    000000a5: 	setae	%dl
    000000a8: 	orb	%r15b, %dl
    000000ab: 	movq	%r11, %rdx
    000000ae: 	je	.Ltmp1001 # Offset: 174
    000000b4: 	testb	%r12b, %r12b
    000000b7: 	je	.Ltmp1001 # Offset: 183
    000000bd: 	movl	%ecx, %r15d
    000000c0: 	shrl	$0x2, %r15d
    000000c4: 	subl	$0x1, %r15d
    000000c8: 	shlq	$0x4, %r15
    000000cc: 	leaq	0x10(%r11,%r15), %r15
    000000d1: 	nopl	(%rax) # Size: 7
.Ltmp1002:
    000000d8: 	movdqu	(%rdx), %xmm0
    000000dc: 	addq	$0x10, %rdx
    000000e0: 	addq	$0x40, %rax
    000000e4: 	pshufd	$0x55, %xmm0, %xmm1
    000000e9: 	movd	%xmm0, -0x40(%rax)
    000000ee: 	movd	%xmm1, -0x30(%rax)
    000000f3: 	movdqa	%xmm0, %xmm1
    000000f7: 	punpckhdq	%xmm0, %xmm1
    000000fb: 	pshufd	$0xff, %xmm0, %xmm0
    00000100: 	movd	%xmm1, -0x20(%rax)
    00000105: 	movd	%xmm0, -0x10(%rax)
    0000010a: 	cmpq	%r15, %rdx
    0000010d: 	jne	.Ltmp1002 # Offset: 269
    0000010f: 	movl	%ecx, %eax
    00000111: 	andl	$-0x4, %eax
    00000114: 	testb	$0x3, %cl
    00000117: 	je	.Ltmp1003 # Offset: 279
    00000119: 	movl	%eax, %r15d
    0000011c: 	leaq	(,%r15,4), %rdx
    00000124: 	movl	(%r11,%r15,4), %r15d
    00000128: 	movl	%r15d, 0x4(%rdi,%rdx,4)
    0000012d: 	leal	0x1(%rax), %r15d
    00000131: 	cmpl	%r15d, %ecx
    00000134: 	jle	.Ltmp1003 # Offset: 308
    00000136: 	movl	0x4(%r11,%rdx), %r15d
    0000013b: 	addl	$0x2, %eax
    0000013e: 	movl	%r15d, 0x14(%rdi,%rdx,4)
    00000143: 	cmpl	%eax, %ecx
    00000145: 	jle	.Ltmp1003 # Offset: 325
    00000147: 	movl	0x8(%r11,%rdx), %eax
    0000014c: 	movl	%eax, 0x24(%rdi,%rdx,4)
.Ltmp1003:
    00000150: 	leaq	0xc(%rdi,%rbp), %rdx
    00000155: 	leaq	0x8(%rdi), %rax
    00000159: 	cmpq	%rdx, %r10
    0000015c: 	leaq	(%r10,%r9), %rdx
    00000160: 	setae	%bpl
    00000164: 	cmpq	%rdx, %rax
    00000167: 	setae	%dl
    0000016a: 	orb	%bpl, %dl
    0000016d: 	movq	%r10, %rdx
    00000170: 	je	.Ltmp1004 # Offset: 368
    00000176: 	testb	%r12b, %r12b
    00000179: 	je	.Ltmp1004 # Offset: 377
    0000017f: 	movl	%ecx, %ebp
    00000181: 	shrl	$0x2, %ebp
    00000184: 	subl	$0x1, %ebp
    00000187: 	shlq	$0x4, %rbp
    0000018b: 	leaq	0x10(%r10,%rbp), %rbp
.Ltmp1005:
    00000190: 	movdqu	(%rdx), %xmm0
    00000194: 	addq	$0x10, %rdx
    00000198: 	addq	$0x40, %rax
    0000019c: 	pshufd	$0x55, %xmm0, %xmm1
    000001a1: 	movd	%xmm0, -0x40(%rax)
    000001a6: 	movd	%xmm1, -0x30(%rax)
    000001ab: 	movdqa	%xmm0, %xmm1
    000001af: 	punpckhdq	%xmm0, %xmm1
    000001b3: 	pshufd	$0xff, %xmm0, %xmm0
    000001b8: 	movd	%xmm1, -0x20(%rax)
    000001bd: 	movd	%xmm0, -0x10(%rax)
    000001c2: 	cmpq	%rbp, %rdx
    000001c5: 	jne	.Ltmp1005 # Offset: 453
    000001c7: 	movl	%ecx, %eax
    000001c9: 	andl	$-0x4, %eax
    000001cc: 	testb	$0x3, %cl
    000001cf: 	je	.Ltmp1006 # Offset: 463
    000001d1: 	movl	%eax, %ebp
    000001d3: 	leaq	(,%rbp,4), %rdx
    000001db: 	movl	(%r10,%rbp,4), %ebp
    000001df: 	movl	%ebp, 0x8(%rdi,%rdx,4)
    000001e3: 	leal	0x1(%rax), %ebp
    000001e6: 	cmpl	%ecx, %ebp
    000001e8: 	jge	.Ltmp1006 # Offset: 488
    000001ea: 	movl	0x4(%r10,%rdx), %ebp
    000001ef: 	addl	$0x2, %eax
    000001f2: 	movl	%ebp, 0x18(%rdi,%rdx,4)
    000001f6: 	cmpl	%eax, %ecx
    000001f8: 	jle	.Ltmp1006 # Offset: 504
    000001fa: 	movl	0x8(%r10,%rdx), %eax
    000001ff: 	movl	%eax, 0x28(%rdi,%rdx,4)
.Ltmp1006:
    00000203: 	shlq	$0x4, %r8
    00000207: 	leaq	0xc(%rdi), %rax
    0000020b: 	addq	%rdi, %r8
    0000020e: 	cmpq	%r8, %r13
    00000211: 	setae	%dl
    00000214: 	addq	%r13, %r9
    00000217: 	cmpq	%r9, %rax
    0000021a: 	setae	%r8b
    0000021e: 	orb	%dl, %r8b
    00000221: 	movq	%r13, %rdx
    00000224: 	je	.Ltmp1007 # Offset: 548
    0000022a: 	testb	%r12b, %r12b
    0000022d: 	je	.Ltmp1007 # Offset: 557
    00000233: 	movl	%ecx, %r8d
    00000236: 	shrl	$0x2, %r8d
    0000023a: 	subl	$0x1, %r8d
    0000023e: 	shlq	$0x4, %r8
    00000242: 	leaq	0x10(%r13,%r8), %r8
    00000247: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1008:
    00000250: 	movdqu	(%rdx), %xmm0
    00000254: 	addq	$0x10, %rdx
    00000258: 	addq	$0x40, %rax
    0000025c: 	pshufd	$0x55, %xmm0, %xmm1
    00000261: 	movd	%xmm0, -0x40(%rax)
    00000266: 	movd	%xmm1, -0x30(%rax)
    0000026b: 	movdqa	%xmm0, %xmm1
    0000026f: 	punpckhdq	%xmm0, %xmm1
    00000273: 	pshufd	$0xff, %xmm0, %xmm0
    00000278: 	movd	%xmm1, -0x20(%rax)
    0000027d: 	movd	%xmm0, -0x10(%rax)
    00000282: 	cmpq	%rdx, %r8
    00000285: 	jne	.Ltmp1008 # Offset: 645
    00000287: 	movl	%ecx, %eax
    00000289: 	andl	$-0x4, %eax
    0000028c: 	testb	$0x3, %cl
    0000028f: 	je	.Ltmp1009 # Offset: 655
    00000291: 	movl	%eax, %r8d
    00000294: 	leaq	(,%r8,4), %rdx
    0000029c: 	movl	(%r13,%r8,4), %r8d
    000002a1: 	movl	%r8d, 0xc(%rdi,%rdx,4)
    000002a6: 	leal	0x1(%rax), %r8d
    000002aa: 	cmpl	%r8d, %ecx
    000002ad: 	jle	.Ltmp1009 # Offset: 685
    000002af: 	movl	0x4(%r13,%rdx), %r8d
    000002b4: 	addl	$0x2, %eax
    000002b7: 	movl	%r8d, 0x1c(%rdi,%rdx,4)
    000002bc: 	cmpl	%eax, %ecx
    000002be: 	jle	.Ltmp1009 # Offset: 702
    000002c0: 	movl	0x8(%r13,%rdx), %eax
    000002c5: 	movl	%eax, 0x2c(%rdi,%rdx,4)
.Ltmp1009:
    000002c9: 	addq	-0x20(%rsp), %rdi
    000002ce: 	addq	%rbx, %r11
    000002d1: 	addq	%rbx, %r10
    000002d4: 	addq	%rbx, %r13
    000002d7: 	subl	$0x100, -0x14(%rsp)
    000002df: 	cmpl	-0x18(%rsp), %r14d
    000002e4: 	jl	.Ltmp1010 # Offset: 740
.Ltmp998:
    000002ea: 	popq	%rbx
    000002eb: 	popq	%rbp
    000002ec: 	popq	%r12
    000002ee: 	popq	%r13
    000002f0: 	popq	%r14
    000002f2: 	popq	%r15
    000002f4: 	retq # Offset: 756
    000002f5: 	nopl	(%rax) # Size: 3
.Ltmp999:
    000002f8: 	movslq	-0x14(%rsp), %rbx
    000002fd: 	movl	%ebx, %ecx
    000002ff: 	testl	%ebx, %ebx
    00000301: 	jle	.Ltmp1011 # Offset: 769
    00000307: 	leal	(,%rbx,4), %eax
    0000030e: 	shlq	$0x2, %rbx
    00000312: 	cltq
    00000314: 	shlq	$0x2, %rax
    00000318: 	movq	%rax, -0x20(%rsp)
    0000031d: 	jmp	.Ltmp1012 # Offset: 797
    00000322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1007:
    00000328: 	movl	-0x10(%rsp), %ecx
    0000032c: 	leaq	0x4(%r13,%rcx,4), %r8
    00000331: 	nopl	(%rax) # Size: 7
.Ltmp1013:
    00000338: 	movl	(%rdx), %ecx
    0000033a: 	addq	$0x4, %rdx
    0000033e: 	addq	$0x10, %rax
    00000342: 	movl	%ecx, -0x10(%rax)
    00000345: 	cmpq	%rdx, %r8
    00000348: 	jne	.Ltmp1013 # Offset: 840
    0000034a: 	jmp	.Ltmp1009 # Offset: 842
    0000034f: 	nop # Size: 1
.Ltmp1004:
    00000350: 	movl	-0x10(%rsp), %ebp
    00000354: 	leaq	0x4(%r10,%rbp,4), %rbp
    00000359: 	nopl	(%rax) # Size: 7
.Ltmp1014:
    00000360: 	movl	(%rdx), %r15d
    00000363: 	addq	$0x4, %rdx
    00000367: 	addq	$0x10, %rax
    0000036b: 	movl	%r15d, -0x10(%rax)
    0000036f: 	cmpq	%rbp, %rdx
    00000372: 	jne	.Ltmp1014 # Offset: 882
    00000374: 	jmp	.Ltmp1006 # Offset: 884
    00000379: 	nopl	(%rax) # Size: 7
.Ltmp1001:
    00000380: 	movl	-0x10(%rsp), %r15d
    00000385: 	movl	%ecx, -0xc(%rsp)
    00000389: 	leaq	0x4(%r11,%r15,4), %r15
    0000038e: 	nop # Size: 2
.Ltmp1015:
    00000390: 	movl	(%rdx), %ecx
    00000392: 	addq	$0x4, %rdx
    00000396: 	addq	$0x10, %rax
    0000039a: 	movl	%ecx, -0x10(%rax)
    0000039d: 	cmpq	%r15, %rdx
    000003a0: 	jne	.Ltmp1015 # Offset: 928
    000003a2: 	movl	-0xc(%rsp), %ecx
    000003a6: 	jmp	.Ltmp1003 # Offset: 934
    000003ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1011:
    000003b0: 	leal	(,%rbx,4), %ebx
    000003b7: 	movslq	%ebx, %rbx
    000003ba: 	leaq	(,%rbx,4), %rax
    000003c2: 	movq	%rax, -0x20(%rsp)
    000003c7: 	jmp	.Ltmp1009 # Offset: 967
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version6IjEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave4to4_version1IjEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 118
  State       : disassembled
  Address     : 0x17d60
  Size        : 0x263
  MaxSize     : 0x270
  Offset      : 0x17d60
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version1IjEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0117:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp1016 # Offset: 7
    0000000d: 	pushq	%r13
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, %rdi
    00000015: 	movl	%r9d, %r11d
    00000018: 	pushq	%r12
    0000001a: 	pushq	%rbp
    0000001b: 	movslq	%r9d, %rbp
    0000001e: 	pushq	%rbx
    0000001f: 	movq	%rbp, %r10
    00000022: 	leaq	(,%rbp,4), %rbx
    0000002a: 	shlq	$0x4, %r10
    0000002e: 	leaq	(%rsi,%rbx), %rdx
    00000032: 	addq	%rax, %r10
    00000035: 	cmpq	%rdx, %rax
    00000038: 	setae	%dl
    0000003b: 	cmpq	%r10, %rsi
    0000003e: 	setae	%r12b
    00000042: 	orl	%r12d, %edx
    00000045: 	leaq	(%rdi,%rbx), %r12
    00000049: 	cmpq	%r12, %rax
    0000004c: 	setae	%r12b
    00000050: 	cmpq	%r10, %rdi
    00000053: 	setae	%r13b
    00000057: 	orl	%r13d, %r12d
    0000005a: 	andl	%r12d, %edx
    0000005d: 	cmpl	$0x1, %r9d
    00000061: 	setne	%r12b
    00000065: 	andl	%r12d, %edx
    00000068: 	leaq	(%rcx,%rbx), %r12
    0000006c: 	cmpq	%r12, %rax
    0000006f: 	setae	%r12b
    00000073: 	cmpq	%r10, %rcx
    00000076: 	setae	%r13b
    0000007a: 	orl	%r13d, %r12d
    0000007d: 	testb	%r12b, %dl
    00000080: 	je	.Ltmp1017 # Offset: 128
    00000086: 	addq	%r8, %rbx
    00000089: 	cmpq	%rbx, %rax
    0000008c: 	setae	%dl
    0000008f: 	cmpq	%r10, %r8
    00000092: 	setae	%r10b
    00000096: 	orb	%r10b, %dl
    00000099: 	je	.Ltmp1017 # Offset: 153
    0000009f: 	leal	-0x1(%r9), %edx
    000000a3: 	cmpl	$0x2, %edx
    000000a6: 	jbe	.Ltmp1018 # Offset: 166
    000000ac: 	movl	%r9d, %r10d
    000000af: 	xorl	%edx, %edx
    000000b1: 	shrl	$0x2, %r10d
    000000b5: 	shlq	$0x4, %r10
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp1019:
    000000c0: 	movdqu	(%rsi,%rdx), %xmm0
    000000c5: 	movdqu	(%rdi,%rdx), %xmm1
    000000ca: 	movdqu	(%rcx,%rdx), %xmm5
    000000cf: 	movdqu	(%r8,%rdx), %xmm7
    000000d5: 	movdqa	%xmm0, %xmm2
    000000d9: 	movdqa	%xmm1, %xmm3
    000000dd: 	punpckldq	%xmm5, %xmm2
    000000e1: 	punpckldq	%xmm7, %xmm3
    000000e5: 	punpckhdq	%xmm5, %xmm0
    000000e9: 	movdqa	%xmm2, %xmm4
    000000ed: 	punpckhdq	%xmm3, %xmm2
    000000f1: 	punpckhdq	%xmm7, %xmm1
    000000f5: 	movups	%xmm2, 0x10(%rax,%rdx,4)
    000000fa: 	movdqa	%xmm0, %xmm2
    000000fe: 	punpckldq	%xmm3, %xmm4
    00000102: 	punpckhdq	%xmm1, %xmm0
    00000106: 	punpckldq	%xmm1, %xmm2
    0000010a: 	movups	%xmm4, (%rax,%rdx,4)
    0000010e: 	movups	%xmm2, 0x20(%rax,%rdx,4)
    00000113: 	movups	%xmm0, 0x30(%rax,%rdx,4)
    00000118: 	addq	$0x10, %rdx
    0000011c: 	cmpq	%rdx, %r10
    0000011f: 	jne	.Ltmp1019 # Offset: 287
    00000121: 	movl	%r9d, %r10d
    00000124: 	andl	$-0x4, %r10d
    00000128: 	movl	%r10d, %edx
    0000012b: 	cmpl	%r10d, %r9d
    0000012e: 	je	.Ltmp1020 # Offset: 302
    00000134: 	movl	%r9d, %r11d
    00000137: 	subl	%r10d, %r11d
    0000013a: 	cmpl	$0x1, %r11d
    0000013e: 	je	.Ltmp1021 # Offset: 318
.Ltmp1023:
    00000144: 	movl	%r10d, %r9d
    00000147: 	movq	(%rsi,%r9,4), %xmm0
    0000014d: 	movq	(%rcx,%r9,4), %xmm3
    00000153: 	movq	%r9, %r10
    00000156: 	movq	(%rdi,%r9,4), %xmm1
    0000015c: 	movq	(%r8,%r9,4), %xmm4
    00000162: 	shlq	$0x4, %r10
    00000166: 	movl	%r11d, %r9d
    00000169: 	movdqa	%xmm0, %xmm2
    0000016d: 	punpckldq	%xmm3, %xmm0
    00000171: 	addq	%rax, %r10
    00000174: 	andl	$-0x2, %r9d
    00000178: 	punpckldq	%xmm3, %xmm2
    0000017c: 	movdqa	%xmm1, %xmm3
    00000180: 	punpckldq	%xmm4, %xmm1
    00000184: 	addl	%r9d, %edx
    00000187: 	punpckldq	%xmm4, %xmm3
    0000018b: 	movdqa	%xmm2, %xmm4
    0000018f: 	pshufd	$0xe, %xmm0, %xmm0
    00000194: 	punpckldq	%xmm3, %xmm2
    00000198: 	pshufd	$0xe, %xmm1, %xmm1
    0000019d: 	punpckldq	%xmm3, %xmm4
    000001a1: 	pshufd	$0xe, %xmm2, %xmm2
    000001a6: 	movq	%xmm4, (%r10)
    000001ab: 	movq	%xmm2, 0x8(%r10)
    000001b1: 	movdqa	%xmm0, %xmm2
    000001b5: 	punpckldq	%xmm1, %xmm0
    000001b9: 	punpckldq	%xmm1, %xmm2
    000001bd: 	pshufd	$0xe, %xmm0, %xmm0
    000001c2: 	movq	%xmm2, 0x10(%r10)
    000001c8: 	movq	%xmm0, 0x18(%r10)
    000001ce: 	cmpl	%r9d, %r11d
    000001d1: 	je	.Ltmp1020 # Offset: 465
.Ltmp1021:
    000001d3: 	movslq	%edx, %rdx
    000001d6: 	movl	(%rsi,%rdx,4), %r9d
    000001da: 	movq	%rdx, %rsi
    000001dd: 	shlq	$0x4, %rsi
    000001e1: 	movl	%r9d, (%rax,%rsi)
    000001e5: 	movl	(%rdi,%rdx,4), %edi
    000001e8: 	leaq	0x1(,%rdx,4), %r9
    000001f0: 	leaq	(,%r9,4), %rsi
    000001f8: 	movl	%edi, (%rax,%r9,4)
    000001fc: 	movl	(%rcx,%rdx,4), %ecx
    000001ff: 	movl	%ecx, 0x4(%rax,%rsi)
    00000203: 	movl	(%r8,%rdx,4), %edx
    00000207: 	movl	%edx, 0x8(%rax,%rsi)
.Ltmp1020:
    0000020b: 	popq	%rbx
    0000020c: 	popq	%rbp
    0000020d: 	popq	%r12
    0000020f: 	popq	%r13
    00000211: 	retq # Offset: 529
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1017:
    00000218: 	shlq	$0x2, %rbp
    0000021c: 	xorl	%edx, %edx
    0000021e: 	nop # Size: 2
.Ltmp1022:
    00000220: 	movl	(%rsi,%rdx), %r9d
    00000224: 	movl	%r9d, (%rax,%rdx,4)
    00000228: 	movl	(%rdi,%rdx), %r9d
    0000022c: 	movl	%r9d, 0x4(%rax,%rdx,4)
    00000231: 	movl	(%rcx,%rdx), %r9d
    00000235: 	movl	%r9d, 0x8(%rax,%rdx,4)
    0000023a: 	movl	(%r8,%rdx), %r9d
    0000023e: 	movl	%r9d, 0xc(%rax,%rdx,4)
    00000243: 	addq	$0x4, %rdx
    00000247: 	cmpq	%rdx, %rbp
    0000024a: 	jne	.Ltmp1022 # Offset: 586
    0000024c: 	popq	%rbx
    0000024d: 	popq	%rbp
    0000024e: 	popq	%r12
    00000250: 	popq	%r13
    00000252: 	retq # Offset: 594
    00000253: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1016:
    00000258: 	retq # Offset: 600
.Ltmp1018:
    00000259: 	xorl	%r10d, %r10d
    0000025c: 	xorl	%edx, %edx
    0000025e: 	jmp	.Ltmp1023 # Offset: 606
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version1IjEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version2IjEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 119
  State       : disassembled
  Address     : 0x17fd0
  Size        : 0x3b9
  MaxSize     : 0x3c0
  Offset      : 0x17fd0
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version2IjEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0118:
    00000000: 	endbr64
    00000004: 	movslq	%r9d, %r9
    00000007: 	testq	%r9, %r9
    0000000a: 	je	.Ltmp1024 # Offset: 10
    00000010: 	pushq	%r13
    00000012: 	movq	%rsi, %r10
    00000015: 	movq	%rdx, %rsi
    00000018: 	pushq	%r12
    0000001a: 	leaq	-0x1(%r9), %r12
    0000001e: 	cmpq	$0x6, %r12
    00000022: 	pushq	%rbp
    00000023: 	seta	%r11b
    00000027: 	shlq	$0x4, %r12
    0000002b: 	pushq	%rbx
    0000002c: 	leaq	(,%r9,4), %rbx
    00000034: 	leaq	0x4(%rdi,%r12), %rax
    00000039: 	leaq	(%r10,%rbx), %rdx
    0000003d: 	cmpq	%rax, %r10
    00000040: 	setae	%al
    00000043: 	cmpq	%rdx, %rdi
    00000046: 	setae	%dl
    00000049: 	orb	%dl, %al
    0000004b: 	je	.Ltmp1025 # Offset: 75
    00000051: 	testb	%r11b, %r11b
    00000054: 	je	.Ltmp1025 # Offset: 84
    0000005a: 	movq	%r9, %r13
    0000005d: 	movq	%rdi, %rax
    00000060: 	xorl	%edx, %edx
    00000062: 	shrq	$0x2, %r13
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1026:
    00000070: 	movq	%rdx, %rbp
    00000073: 	addq	$0x1, %rdx
    00000077: 	addq	$0x40, %rax
    0000007b: 	shlq	$0x4, %rbp
    0000007f: 	movdqu	(%r10,%rbp), %xmm0
    00000085: 	pshufd	$0x55, %xmm0, %xmm1
    0000008a: 	movd	%xmm0, -0x40(%rax)
    0000008f: 	movd	%xmm1, -0x30(%rax)
    00000094: 	movdqa	%xmm0, %xmm1
    00000098: 	punpckhdq	%xmm0, %xmm1
    0000009c: 	pshufd	$0xff, %xmm0, %xmm0
    000000a1: 	movd	%xmm1, -0x20(%rax)
    000000a6: 	movd	%xmm0, -0x10(%rax)
    000000ab: 	cmpq	%r13, %rdx
    000000ae: 	jne	.Ltmp1026 # Offset: 174
    000000b0: 	movq	%r9, %rax
    000000b3: 	andq	$-0x4, %rax
    000000b7: 	movq	%rax, %rdx
    000000ba: 	leaq	(%r10,%rax,4), %r10
    000000be: 	shlq	$0x4, %rdx
    000000c2: 	addq	%rdi, %rdx
    000000c5: 	cmpq	%rax, %r9
    000000c8: 	je	.Ltmp1027 # Offset: 200
    000000ca: 	movl	(%r10), %ebp
    000000cd: 	movl	%ebp, (%rdx)
    000000cf: 	leaq	0x1(%rax), %rbp
    000000d3: 	cmpq	%rbp, %r9
    000000d6: 	jbe	.Ltmp1027 # Offset: 214
    000000d8: 	movl	0x4(%r10), %ebp
    000000dc: 	addq	$0x2, %rax
    000000e0: 	movl	%ebp, 0x10(%rdx)
    000000e3: 	cmpq	%rax, %r9
    000000e6: 	jbe	.Ltmp1027 # Offset: 230
    000000e8: 	movl	0x8(%r10), %eax
    000000ec: 	movl	%eax, 0x20(%rdx)
.Ltmp1027:
    000000ef: 	leaq	0x8(%rdi,%r12), %rax
    000000f4: 	leaq	(%rsi,%rbx), %rdx
    000000f8: 	cmpq	%rax, %rsi
    000000fb: 	leaq	0x4(%rdi), %rbp
    000000ff: 	setae	%al
    00000102: 	cmpq	%rdx, %rbp
    00000105: 	setae	%dl
    00000108: 	orb	%dl, %al
    0000010a: 	je	.Ltmp1028 # Offset: 266
    00000110: 	movq	%r9, %r13
    00000113: 	movq	%rbp, %rax
    00000116: 	xorl	%edx, %edx
    00000118: 	shrq	$0x2, %r13
    0000011c: 	testb	%r11b, %r11b
    0000011f: 	je	.Ltmp1028 # Offset: 287
    00000125: 	nopl	(%rax) # Size: 3
.Ltmp1029:
    00000128: 	movq	%rdx, %r10
    0000012b: 	addq	$0x1, %rdx
    0000012f: 	addq	$0x40, %rax
    00000133: 	shlq	$0x4, %r10
    00000137: 	movdqu	(%rsi,%r10), %xmm0
    0000013d: 	pshufd	$0x55, %xmm0, %xmm1
    00000142: 	movd	%xmm0, -0x40(%rax)
    00000147: 	movd	%xmm1, -0x30(%rax)
    0000014c: 	movdqa	%xmm0, %xmm1
    00000150: 	punpckhdq	%xmm0, %xmm1
    00000154: 	pshufd	$0xff, %xmm0, %xmm0
    00000159: 	movd	%xmm1, -0x20(%rax)
    0000015e: 	movd	%xmm0, -0x10(%rax)
    00000163: 	cmpq	%rdx, %r13
    00000166: 	jne	.Ltmp1029 # Offset: 358
    00000168: 	movq	%r9, %rax
    0000016b: 	andq	$-0x4, %rax
    0000016f: 	movq	%rax, %rdx
    00000172: 	leaq	(%rsi,%rax,4), %rsi
    00000176: 	shlq	$0x4, %rdx
    0000017a: 	addq	%rbp, %rdx
    0000017d: 	cmpq	%rax, %r9
    00000180: 	je	.Ltmp1030 # Offset: 384
    00000182: 	movl	(%rsi), %r10d
    00000185: 	movl	%r10d, (%rdx)
    00000188: 	leaq	0x1(%rax), %r10
    0000018c: 	cmpq	%r10, %r9
    0000018f: 	jbe	.Ltmp1030 # Offset: 399
    00000191: 	movl	0x4(%rsi), %r10d
    00000195: 	addq	$0x2, %rax
    00000199: 	movl	%r10d, 0x10(%rdx)
    0000019d: 	cmpq	%rax, %r9
    000001a0: 	jbe	.Ltmp1030 # Offset: 416
    000001a2: 	movl	0x8(%rsi), %eax
    000001a5: 	movl	%eax, 0x20(%rdx)
.Ltmp1030:
    000001a8: 	leaq	0xc(%rdi,%r12), %rax
    000001ad: 	leaq	(%rcx,%rbx), %rdx
    000001b1: 	cmpq	%rax, %rcx
    000001b4: 	leaq	0x8(%rdi), %r10
    000001b8: 	setae	%al
    000001bb: 	cmpq	%rdx, %r10
    000001be: 	setae	%dl
    000001c1: 	orb	%dl, %al
    000001c3: 	je	.Ltmp1031 # Offset: 451
    000001c9: 	movq	%r9, %rbp
    000001cc: 	movq	%r10, %rax
    000001cf: 	xorl	%edx, %edx
    000001d1: 	shrq	$0x2, %rbp
    000001d5: 	testb	%r11b, %r11b
    000001d8: 	je	.Ltmp1031 # Offset: 472
    000001de: 	nop # Size: 2
.Ltmp1032:
    000001e0: 	movq	%rdx, %rsi
    000001e3: 	addq	$0x1, %rdx
    000001e7: 	addq	$0x40, %rax
    000001eb: 	shlq	$0x4, %rsi
    000001ef: 	movdqu	(%rcx,%rsi), %xmm0
    000001f4: 	pshufd	$0x55, %xmm0, %xmm1
    000001f9: 	movd	%xmm0, -0x40(%rax)
    000001fe: 	movd	%xmm1, -0x30(%rax)
    00000203: 	movdqa	%xmm0, %xmm1
    00000207: 	punpckhdq	%xmm0, %xmm1
    0000020b: 	pshufd	$0xff, %xmm0, %xmm0
    00000210: 	movd	%xmm1, -0x20(%rax)
    00000215: 	movd	%xmm0, -0x10(%rax)
    0000021a: 	cmpq	%rdx, %rbp
    0000021d: 	jne	.Ltmp1032 # Offset: 541
    0000021f: 	movq	%r9, %rax
    00000222: 	andq	$-0x4, %rax
    00000226: 	movq	%rax, %rdx
    00000229: 	leaq	(%rcx,%rax,4), %rcx
    0000022d: 	shlq	$0x4, %rdx
    00000231: 	addq	%r10, %rdx
    00000234: 	cmpq	%rax, %r9
    00000237: 	je	.Ltmp1033 # Offset: 567
    00000239: 	movl	(%rcx), %esi
    0000023b: 	movl	%esi, (%rdx)
    0000023d: 	leaq	0x1(%rax), %rsi
    00000241: 	cmpq	%rsi, %r9
    00000244: 	jbe	.Ltmp1033 # Offset: 580
    00000246: 	movl	0x4(%rcx), %esi
    00000249: 	addq	$0x2, %rax
    0000024d: 	movl	%esi, 0x10(%rdx)
    00000250: 	cmpq	%rax, %r9
    00000253: 	jbe	.Ltmp1033 # Offset: 595
    00000255: 	movl	0x8(%rcx), %eax
    00000258: 	movl	%eax, 0x20(%rdx)
.Ltmp1033:
    0000025b: 	movq	%r9, %rax
    0000025e: 	leaq	0xc(%rdi), %rsi
    00000262: 	shlq	$0x4, %rax
    00000266: 	addq	%rdi, %rax
    00000269: 	cmpq	%rax, %r8
    0000026c: 	setae	%al
    0000026f: 	addq	%r8, %rbx
    00000272: 	cmpq	%rbx, %rsi
    00000275: 	setae	%dl
    00000278: 	orb	%dl, %al
    0000027a: 	je	.Ltmp1034 # Offset: 634
    00000280: 	movq	%r9, %rdi
    00000283: 	movq	%rsi, %rax
    00000286: 	xorl	%edx, %edx
    00000288: 	shrq	$0x2, %rdi
    0000028c: 	testb	%r11b, %r11b
    0000028f: 	je	.Ltmp1034 # Offset: 655
    00000295: 	nopl	(%rax) # Size: 3
.Ltmp1035:
    00000298: 	movq	%rdx, %rcx
    0000029b: 	addq	$0x1, %rdx
    0000029f: 	addq	$0x40, %rax
    000002a3: 	shlq	$0x4, %rcx
    000002a7: 	movdqu	(%r8,%rcx), %xmm0
    000002ad: 	pshufd	$0x55, %xmm0, %xmm1
    000002b2: 	movd	%xmm0, -0x40(%rax)
    000002b7: 	movd	%xmm1, -0x30(%rax)
    000002bc: 	movdqa	%xmm0, %xmm1
    000002c0: 	punpckhdq	%xmm0, %xmm1
    000002c4: 	pshufd	$0xff, %xmm0, %xmm0
    000002c9: 	movd	%xmm1, -0x20(%rax)
    000002ce: 	movd	%xmm0, -0x10(%rax)
    000002d3: 	cmpq	%rdx, %rdi
    000002d6: 	jne	.Ltmp1035 # Offset: 726
    000002d8: 	movq	%r9, %rax
    000002db: 	andq	$-0x4, %rax
    000002df: 	movq	%rax, %rdx
    000002e2: 	leaq	(%r8,%rax,4), %rcx
    000002e6: 	shlq	$0x4, %rdx
    000002ea: 	addq	%rsi, %rdx
    000002ed: 	cmpq	%rax, %r9
    000002f0: 	je	.Ltmp1036 # Offset: 752
    000002f2: 	movl	(%rcx), %esi
    000002f4: 	movl	%esi, (%rdx)
    000002f6: 	leaq	0x1(%rax), %rsi
    000002fa: 	cmpq	%rsi, %r9
    000002fd: 	jbe	.Ltmp1036 # Offset: 765
    000002ff: 	movl	0x4(%rcx), %esi
    00000302: 	addq	$0x2, %rax
    00000306: 	movl	%esi, 0x10(%rdx)
    00000309: 	cmpq	%rax, %r9
    0000030c: 	jbe	.Ltmp1036 # Offset: 780
    0000030e: 	movl	0x8(%rcx), %eax
    00000311: 	movl	%eax, 0x20(%rdx)
.Ltmp1036:
    00000314: 	popq	%rbx
    00000315: 	popq	%rbp
    00000316: 	popq	%r12
    00000318: 	popq	%r13
    0000031a: 	retq # Offset: 794
    0000031b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1028:
    00000320: 	xorl	%eax, %eax
    00000322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1037:
    00000328: 	movl	(%rsi,%rax,4), %edx
    0000032b: 	addq	$0x1, %rax
    0000032f: 	addq	$0x10, %rbp
    00000333: 	movl	%edx, -0x10(%rbp)
    00000336: 	cmpq	%rax, %r9
    00000339: 	jne	.Ltmp1037 # Offset: 825
    0000033b: 	jmp	.Ltmp1030 # Offset: 827
.Ltmp1025:
    00000340: 	movq	%rdi, %rdx
    00000343: 	xorl	%eax, %eax
    00000345: 	nopl	(%rax) # Size: 3
.Ltmp1038:
    00000348: 	movl	(%r10,%rax,4), %ebp
    0000034c: 	addq	$0x1, %rax
    00000350: 	addq	$0x10, %rdx
    00000354: 	movl	%ebp, -0x10(%rdx)
    00000357: 	cmpq	%rax, %r9
    0000035a: 	jne	.Ltmp1038 # Offset: 858
    0000035c: 	jmp	.Ltmp1027 # Offset: 860
    00000361: 	nopl	(%rax) # Size: 7
.Ltmp1031:
    00000368: 	xorl	%eax, %eax
    0000036a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1039:
    00000370: 	movl	(%rcx,%rax,4), %edx
    00000373: 	addq	$0x1, %rax
    00000377: 	addq	$0x10, %r10
    0000037b: 	movl	%edx, -0x10(%r10)
    0000037f: 	cmpq	%rax, %r9
    00000382: 	jne	.Ltmp1039 # Offset: 898
    00000384: 	jmp	.Ltmp1033 # Offset: 900
    00000389: 	nopl	(%rax) # Size: 7
.Ltmp1034:
    00000390: 	xorl	%eax, %eax
    00000392: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1040:
    00000398: 	movl	(%r8,%rax,4), %edx
    0000039c: 	addq	$0x1, %rax
    000003a0: 	addq	$0x10, %rsi
    000003a4: 	movl	%edx, -0x10(%rsi)
    000003a7: 	cmpq	%rax, %r9
    000003aa: 	jne	.Ltmp1040 # Offset: 938
    000003ac: 	popq	%rbx
    000003ad: 	popq	%rbp
    000003ae: 	popq	%r12
    000003b0: 	popq	%r13
    000003b2: 	retq # Offset: 946
    000003b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1024:
    000003b8: 	retq # Offset: 952
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version2IjEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version3IjEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 120
  State       : disassembled
  Address     : 0x18390
  Size        : 0x2e9
  MaxSize     : 0x2f0
  Offset      : 0x18390
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version3IjEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0119:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp1041 # Offset: 7
    0000000d: 	leal	-0x1(%r9), %eax
    00000011: 	movslq	%r9d, %r11
    00000014: 	pushq	%r14
    00000016: 	movq	%rdx, %r10
    00000019: 	cmpl	$0x4, %eax
    0000001c: 	movq	%r11, %rax
    0000001f: 	pushq	%r13
    00000021: 	pushq	%r12
    00000023: 	pushq	%rbp
    00000024: 	seta	%bpl
    00000028: 	shlq	$0x4, %rax
    0000002c: 	pushq	%rbx
    0000002d: 	leaq	(,%r11,4), %rbx
    00000035: 	leaq	-0x8(%rdi,%rax), %r12
    0000003a: 	leaq	(%rsi,%rbx), %rax
    0000003e: 	cmpq	%rax, %rdi
    00000041: 	setae	%dl
    00000044: 	cmpq	%r12, %rsi
    00000047: 	setae	%al
    0000004a: 	orl	%eax, %edx
    0000004c: 	leaq	(%r10,%rbx), %rax
    00000050: 	cmpq	%rax, %rdi
    00000053: 	setae	%al
    00000056: 	cmpq	%r12, %r10
    00000059: 	setae	%r12b
    0000005d: 	orl	%r12d, %eax
    00000060: 	testb	%al, %dl
    00000062: 	je	.Ltmp1042 # Offset: 98
    00000068: 	testb	%bpl, %bpl
    0000006b: 	je	.Ltmp1042 # Offset: 107
    00000071: 	movl	%r9d, %r12d
    00000074: 	movq	%rdi, %rax
    00000077: 	xorl	%edx, %edx
    00000079: 	shrl	$0x2, %r12d
    0000007d: 	shlq	$0x4, %r12
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp1043:
    00000088: 	movdqu	(%rsi,%rdx), %xmm1
    0000008d: 	movdqu	(%r10,%rdx), %xmm0
    00000093: 	addq	$0x10, %rdx
    00000097: 	addq	$0x40, %rax
    0000009b: 	pshufd	$0x55, %xmm1, %xmm2
    000000a0: 	movd	%xmm1, -0x40(%rax)
    000000a5: 	movd	%xmm2, -0x30(%rax)
    000000aa: 	movdqa	%xmm1, %xmm2
    000000ae: 	punpckhdq	%xmm1, %xmm2
    000000b2: 	pshufd	$0xff, %xmm1, %xmm1
    000000b7: 	movd	%xmm0, -0x3c(%rax)
    000000bc: 	movd	%xmm1, -0x10(%rax)
    000000c1: 	pshufd	$0x55, %xmm0, %xmm1
    000000c6: 	movd	%xmm1, -0x2c(%rax)
    000000cb: 	movdqa	%xmm0, %xmm1
    000000cf: 	punpckhdq	%xmm0, %xmm1
    000000d3: 	pshufd	$0xff, %xmm0, %xmm0
    000000d8: 	movd	%xmm2, -0x20(%rax)
    000000dd: 	movd	%xmm1, -0x1c(%rax)
    000000e2: 	movd	%xmm0, -0xc(%rax)
    000000e7: 	cmpq	%r12, %rdx
    000000ea: 	jne	.Ltmp1043 # Offset: 234
    000000ec: 	movl	%r9d, %edx
    000000ef: 	andl	$-0x4, %edx
    000000f2: 	testb	$0x3, %r9b
    000000f6: 	je	.Ltmp1044 # Offset: 246
    000000f8: 	movl	%edx, %r12d
    000000fb: 	movl	(%rsi,%r12,4), %r14d
    000000ff: 	movq	%r12, %r13
    00000102: 	leaq	(,%r12,4), %rax
    0000010a: 	shlq	$0x4, %r13
    0000010e: 	movl	%r14d, (%rdi,%r13)
    00000112: 	movl	(%r10,%r12,4), %r12d
    00000116: 	movl	%r12d, 0x4(%rdi,%rax,4)
    0000011b: 	leal	0x1(%rdx), %r12d
    0000011f: 	cmpl	%r12d, %r9d
    00000122: 	jle	.Ltmp1044 # Offset: 290
    00000124: 	movl	0x4(%rsi,%rax), %r12d
    00000129: 	addl	$0x2, %edx
    0000012c: 	movl	%r12d, 0x10(%rdi,%r13)
    00000131: 	movl	0x4(%r10,%rax), %r12d
    00000136: 	movl	%r12d, 0x14(%rdi,%rax,4)
    0000013b: 	cmpl	%edx, %r9d
    0000013e: 	jle	.Ltmp1044 # Offset: 318
    00000140: 	movl	0x8(%rsi,%rax), %edx
    00000144: 	movl	%edx, 0x20(%rdi,%r13)
    00000149: 	movl	0x8(%r10,%rax), %edx
    0000014e: 	movl	%edx, 0x24(%rdi,%rax,4)
.Ltmp1044:
    00000152: 	leaq	(%rcx,%rbx), %rdx
    00000156: 	leaq	0x8(%rdi), %rax
    0000015a: 	shlq	$0x4, %r11
    0000015e: 	addq	%rdi, %r11
    00000161: 	cmpq	%rdx, %rax
    00000164: 	setae	%sil
    00000168: 	cmpq	%r11, %rcx
    0000016b: 	setae	%dl
    0000016e: 	addq	%r8, %rbx
    00000171: 	orl	%edx, %esi
    00000173: 	cmpq	%rbx, %rax
    00000176: 	setae	%dl
    00000179: 	cmpq	%r11, %r8
    0000017c: 	setae	%r10b
    00000180: 	orl	%r10d, %edx
    00000183: 	testb	%dl, %sil
    00000186: 	je	.Ltmp1045 # Offset: 390
    0000018c: 	testb	%bpl, %bpl
    0000018f: 	je	.Ltmp1045 # Offset: 399
    00000195: 	movl	%r9d, %esi
    00000198: 	xorl	%edx, %edx
    0000019a: 	shrl	$0x2, %esi
    0000019d: 	shlq	$0x4, %rsi
    000001a1: 	nopl	(%rax) # Size: 7
.Ltmp1046:
    000001a8: 	movdqu	(%rcx,%rdx), %xmm1
    000001ad: 	movdqu	(%r8,%rdx), %xmm0
    000001b3: 	addq	$0x10, %rdx
    000001b7: 	addq	$0x40, %rax
    000001bb: 	pshufd	$0x55, %xmm1, %xmm2
    000001c0: 	movd	%xmm1, -0x40(%rax)
    000001c5: 	movd	%xmm2, -0x30(%rax)
    000001ca: 	movdqa	%xmm1, %xmm2
    000001ce: 	punpckhdq	%xmm1, %xmm2
    000001d2: 	pshufd	$0xff, %xmm1, %xmm1
    000001d7: 	movd	%xmm0, -0x3c(%rax)
    000001dc: 	movd	%xmm1, -0x10(%rax)
    000001e1: 	pshufd	$0x55, %xmm0, %xmm1
    000001e6: 	movd	%xmm1, -0x2c(%rax)
    000001eb: 	movdqa	%xmm0, %xmm1
    000001ef: 	punpckhdq	%xmm0, %xmm1
    000001f3: 	pshufd	$0xff, %xmm0, %xmm0
    000001f8: 	movd	%xmm2, -0x20(%rax)
    000001fd: 	movd	%xmm1, -0x1c(%rax)
    00000202: 	movd	%xmm0, -0xc(%rax)
    00000207: 	cmpq	%rdx, %rsi
    0000020a: 	jne	.Ltmp1046 # Offset: 522
    0000020c: 	movl	%r9d, %edx
    0000020f: 	andl	$-0x4, %edx
    00000212: 	testb	$0x3, %r9b
    00000216: 	je	.Ltmp1047 # Offset: 534
    00000218: 	movl	%edx, %esi
    0000021a: 	movl	(%rcx,%rsi,4), %r11d
    0000021e: 	leaq	(,%rsi,4), %rax
    00000226: 	leaq	0x2(%rax), %r10
    0000022a: 	movl	%r11d, (%rdi,%r10,4)
    0000022e: 	movl	(%r8,%rsi,4), %esi
    00000232: 	movl	%esi, 0x4(%rdi,%r10,4)
    00000237: 	leal	0x1(%rdx), %esi
    0000023a: 	cmpl	%esi, %r9d
    0000023d: 	jle	.Ltmp1047 # Offset: 573
    0000023f: 	movl	0x4(%rcx,%rax), %r10d
    00000244: 	leaq	0x6(%rax), %rsi
    00000248: 	addl	$0x2, %edx
    0000024b: 	movl	%r10d, (%rdi,%rsi,4)
    0000024f: 	movl	0x4(%r8,%rax), %r10d
    00000254: 	movl	%r10d, 0x4(%rdi,%rsi,4)
    00000259: 	cmpl	%edx, %r9d
    0000025c: 	jle	.Ltmp1047 # Offset: 604
    0000025e: 	movl	0x8(%rcx,%rax), %ecx
    00000262: 	leaq	0xa(%rax), %rdx
    00000266: 	movl	%ecx, (%rdi,%rdx,4)
    00000269: 	movl	0x8(%r8,%rax), %eax
    0000026e: 	movl	%eax, 0x4(%rdi,%rdx,4)
.Ltmp1047:
    00000272: 	popq	%rbx
    00000273: 	popq	%rbp
    00000274: 	popq	%r12
    00000276: 	popq	%r13
    00000278: 	popq	%r14
    0000027a: 	retq # Offset: 634
    0000027b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1045:
    00000280: 	movl	%r9d, %r9d
    00000283: 	xorl	%eax, %eax
    00000285: 	shlq	$0x2, %r9
    00000289: 	nopl	(%rax) # Size: 7
.Ltmp1048:
    00000290: 	movl	(%rcx,%rax), %edx
    00000293: 	movl	%edx, 0x8(%rdi,%rax,4)
    00000297: 	movl	(%r8,%rax), %edx
    0000029b: 	movl	%edx, 0xc(%rdi,%rax,4)
    0000029f: 	addq	$0x4, %rax
    000002a3: 	cmpq	%rax, %r9
    000002a6: 	jne	.Ltmp1048 # Offset: 678
    000002a8: 	popq	%rbx
    000002a9: 	popq	%rbp
    000002aa: 	popq	%r12
    000002ac: 	popq	%r13
    000002ae: 	popq	%r14
    000002b0: 	retq # Offset: 688
    000002b1: 	nopl	(%rax) # Size: 7
.Ltmp1042:
    000002b8: 	movl	%r9d, %r12d
    000002bb: 	xorl	%eax, %eax
    000002bd: 	shlq	$0x2, %r12
    000002c1: 	nopl	(%rax) # Size: 7
.Ltmp1049:
    000002c8: 	movl	(%rsi,%rax), %edx
    000002cb: 	movl	%edx, (%rdi,%rax,4)
    000002ce: 	movl	(%r10,%rax), %edx
    000002d2: 	movl	%edx, 0x4(%rdi,%rax,4)
    000002d6: 	addq	$0x4, %rax
    000002da: 	cmpq	%rax, %r12
    000002dd: 	jne	.Ltmp1049 # Offset: 733
    000002df: 	jmp	.Ltmp1044 # Offset: 735
    000002e4: 	nopl	(%rax) # Size: 4
.Ltmp1041:
    000002e8: 	retq # Offset: 744
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version3IjEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version4IjEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 121
  State       : disassembled
  Address     : 0x18680
  Size        : 0x4ea
  MaxSize     : 0x4f0
  Offset      : 0x18680
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version4IjEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0120:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r9d, -0x18(%rsp)
    00000013: 	movl	%r9d, -0x14(%rsp)
    00000018: 	movl	$0x0, -0x24(%rsp)
    00000020: 	testl	%r9d, %r9d
    00000023: 	jle	.Ltmp1050 # Offset: 35
    00000029: 	movq	%rdi, %r14
    0000002c: 	movq	%rsi, %r15
    0000002f: 	movq	%rcx, %rdi
    00000032: 	movq	%rdx, %rsi
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp1064:
    00000038: 	addl	$0x100, -0x24(%rsp)
    00000040: 	movl	-0x24(%rsp), %eax
    00000044: 	cmpl	-0x18(%rsp), %eax
    00000048: 	jg	.Ltmp1051 # Offset: 72
    0000004e: 	movq	$0x1000, -0x20(%rsp)
    00000057: 	movl	$0x400, %ebp
    0000005c: 	movl	$0x100, %edx
.Ltmp1065:
    00000061: 	cmpq	$0x7, %rdx
    00000065: 	movl	$0x4, %ecx
    0000006a: 	leaq	(,%rdx,4), %rbx
    00000072: 	seta	%r13b
    00000076: 	leaq	-0x1(%rdx), %r9
    0000007a: 	testq	%rdx, %rdx
    0000007d: 	cmoveq	%rcx, %rbx
    00000081: 	shlq	$0x4, %r9
    00000085: 	testq	%rdx, %rdx
    00000088: 	leaq	0x4(%r9), %rax
    0000008c: 	cmoveq	%rcx, %rax
    00000090: 	addq	%r14, %rax
    00000093: 	cmpq	%rax, %r15
    00000096: 	leaq	(%r15,%rbx), %rax
    0000009a: 	setae	%cl
    0000009d: 	cmpq	%rax, %r14
    000000a0: 	setae	%al
    000000a3: 	orb	%cl, %al
    000000a5: 	je	.Ltmp1052 # Offset: 165
    000000ab: 	testb	%r13b, %r13b
    000000ae: 	je	.Ltmp1052 # Offset: 174
    000000b4: 	testq	%rdx, %rdx
    000000b7: 	movl	$0x1, %r12d
    000000bd: 	movq	%r14, %rax
    000000c0: 	cmovneq	%rdx, %r12
    000000c4: 	xorl	%ecx, %ecx
    000000c6: 	movq	%r12, %r11
    000000c9: 	shrq	$0x2, %r11
    000000cd: 	nopl	(%rax) # Size: 3
.Ltmp1053:
    000000d0: 	movq	%rcx, %r10
    000000d3: 	addq	$0x1, %rcx
    000000d7: 	addq	$0x40, %rax
    000000db: 	shlq	$0x4, %r10
    000000df: 	movdqu	(%r15,%r10), %xmm0
    000000e5: 	pshufd	$0x55, %xmm0, %xmm1
    000000ea: 	movd	%xmm0, -0x40(%rax)
    000000ef: 	movd	%xmm1, -0x30(%rax)
    000000f4: 	movdqa	%xmm0, %xmm1
    000000f8: 	punpckhdq	%xmm0, %xmm1
    000000fc: 	pshufd	$0xff, %xmm0, %xmm0
    00000101: 	movd	%xmm1, -0x20(%rax)
    00000106: 	movd	%xmm0, -0x10(%rax)
    0000010b: 	cmpq	%r11, %rcx
    0000010e: 	jne	.Ltmp1053 # Offset: 270
    00000110: 	movq	%r12, %rax
    00000113: 	andq	$-0x4, %rax
    00000117: 	movq	%rax, %rcx
    0000011a: 	leaq	(%r15,%rax,4), %r10
    0000011e: 	shlq	$0x4, %rcx
    00000122: 	addq	%r14, %rcx
    00000125: 	cmpq	%rax, %r12
    00000128: 	je	.Ltmp1054 # Offset: 296
    0000012a: 	movl	(%r10), %r11d
    0000012d: 	movl	%r11d, (%rcx)
    00000130: 	leaq	0x1(%rax), %r11
    00000134: 	cmpq	%r11, %rdx
    00000137: 	jbe	.Ltmp1054 # Offset: 311
    00000139: 	movl	0x4(%r10), %r11d
    0000013d: 	addq	$0x2, %rax
    00000141: 	movl	%r11d, 0x10(%rcx)
    00000145: 	cmpq	%rax, %rdx
    00000148: 	jbe	.Ltmp1054 # Offset: 328
    0000014a: 	movl	0x8(%r10), %eax
    0000014e: 	movl	%eax, 0x20(%rcx)
.Ltmp1054:
    00000151: 	testq	%rdx, %rdx
    00000154: 	leaq	0x8(%r9), %rax
    00000158: 	leaq	0x4(%r14), %r11
    0000015c: 	movl	$0x8, %ecx
    00000161: 	cmoveq	%rcx, %rax
    00000165: 	addq	%r14, %rax
    00000168: 	cmpq	%rax, %rsi
    0000016b: 	leaq	(%rsi,%rbx), %rax
    0000016f: 	setae	%cl
    00000172: 	cmpq	%rax, %r11
    00000175: 	setae	%al
    00000178: 	orb	%cl, %al
    0000017a: 	je	.Ltmp1055 # Offset: 378
    00000180: 	testb	%r13b, %r13b
    00000183: 	je	.Ltmp1055 # Offset: 387
    00000189: 	testq	%rdx, %rdx
    0000018c: 	movl	$0x1, %eax
    00000191: 	cmovneq	%rdx, %rax
    00000195: 	xorl	%ecx, %ecx
    00000197: 	movq	%rax, %r12
    0000019a: 	movq	%rax, -0x10(%rsp)
    0000019f: 	movq	%r11, %rax
    000001a2: 	shrq	$0x2, %r12
    000001a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1056:
    000001b0: 	movq	%rcx, %r10
    000001b3: 	addq	$0x1, %rcx
    000001b7: 	addq	$0x40, %rax
    000001bb: 	shlq	$0x4, %r10
    000001bf: 	movdqu	(%rsi,%r10), %xmm0
    000001c5: 	pshufd	$0x55, %xmm0, %xmm1
    000001ca: 	movd	%xmm0, -0x40(%rax)
    000001cf: 	movd	%xmm1, -0x30(%rax)
    000001d4: 	movdqa	%xmm0, %xmm1
    000001d8: 	punpckhdq	%xmm0, %xmm1
    000001dc: 	pshufd	$0xff, %xmm0, %xmm0
    000001e1: 	movd	%xmm1, -0x20(%rax)
    000001e6: 	movd	%xmm0, -0x10(%rax)
    000001eb: 	cmpq	%r12, %rcx
    000001ee: 	jne	.Ltmp1056 # Offset: 494
    000001f0: 	movq	-0x10(%rsp), %r12
    000001f5: 	movq	%r12, %rax
    000001f8: 	andq	$-0x4, %rax
    000001fc: 	movq	%rax, %rcx
    000001ff: 	leaq	(%rsi,%rax,4), %r10
    00000203: 	shlq	$0x4, %rcx
    00000207: 	addq	%r11, %rcx
    0000020a: 	cmpq	%rax, %r12
    0000020d: 	je	.Ltmp1057 # Offset: 525
    0000020f: 	movl	(%r10), %r11d
    00000212: 	movl	%r11d, (%rcx)
    00000215: 	leaq	0x1(%rax), %r11
    00000219: 	cmpq	%r11, %rdx
    0000021c: 	jbe	.Ltmp1057 # Offset: 540
    0000021e: 	movl	0x4(%r10), %r11d
    00000222: 	addq	$0x2, %rax
    00000226: 	movl	%r11d, 0x10(%rcx)
    0000022a: 	cmpq	%rax, %rdx
    0000022d: 	jbe	.Ltmp1057 # Offset: 557
    0000022f: 	movl	0x8(%r10), %eax
    00000233: 	movl	%eax, 0x20(%rcx)
.Ltmp1057:
    00000236: 	addq	$0xc, %r9
    0000023a: 	movl	$0xc, %eax
    0000023f: 	leaq	0x8(%r14), %r10
    00000243: 	testq	%rdx, %rdx
    00000246: 	cmoveq	%rax, %r9
    0000024a: 	leaq	(%rdi,%rbx), %rax
    0000024e: 	addq	%r14, %r9
    00000251: 	cmpq	%r9, %rdi
    00000254: 	setae	%cl
    00000257: 	cmpq	%rax, %r10
    0000025a: 	setae	%al
    0000025d: 	orb	%cl, %al
    0000025f: 	je	.Ltmp1058 # Offset: 607
    00000265: 	testb	%r13b, %r13b
    00000268: 	je	.Ltmp1058 # Offset: 616
    0000026e: 	testq	%rdx, %rdx
    00000271: 	movl	$0x1, %r12d
    00000277: 	movq	%r10, %rax
    0000027a: 	cmovneq	%rdx, %r12
    0000027e: 	xorl	%ecx, %ecx
    00000280: 	movq	%r12, %r11
    00000283: 	shrq	$0x2, %r11
    00000287: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1059:
    00000290: 	movq	%rcx, %r9
    00000293: 	addq	$0x1, %rcx
    00000297: 	addq	$0x40, %rax
    0000029b: 	shlq	$0x4, %r9
    0000029f: 	movdqu	(%rdi,%r9), %xmm0
    000002a5: 	pshufd	$0x55, %xmm0, %xmm1
    000002aa: 	movd	%xmm0, -0x40(%rax)
    000002af: 	movd	%xmm1, -0x30(%rax)
    000002b4: 	movdqa	%xmm0, %xmm1
    000002b8: 	punpckhdq	%xmm0, %xmm1
    000002bc: 	pshufd	$0xff, %xmm0, %xmm0
    000002c1: 	movd	%xmm1, -0x20(%rax)
    000002c6: 	movd	%xmm0, -0x10(%rax)
    000002cb: 	cmpq	%rcx, %r11
    000002ce: 	jne	.Ltmp1059 # Offset: 718
    000002d0: 	movq	%r12, %rax
    000002d3: 	andq	$-0x4, %rax
    000002d7: 	movq	%rax, %rcx
    000002da: 	leaq	(%rdi,%rax,4), %r9
    000002de: 	shlq	$0x4, %rcx
    000002e2: 	addq	%r10, %rcx
    000002e5: 	cmpq	%rax, %r12
    000002e8: 	je	.Ltmp1060 # Offset: 744
    000002ea: 	movl	(%r9), %r10d
    000002ed: 	movl	%r10d, (%rcx)
    000002f0: 	leaq	0x1(%rax), %r10
    000002f4: 	cmpq	%r10, %rdx
    000002f7: 	jbe	.Ltmp1060 # Offset: 759
    000002f9: 	movl	0x4(%r9), %r10d
    000002fd: 	addq	$0x2, %rax
    00000301: 	movl	%r10d, 0x10(%rcx)
    00000305: 	cmpq	%rax, %rdx
    00000308: 	jbe	.Ltmp1060 # Offset: 776
    0000030a: 	movl	0x8(%r9), %eax
    0000030e: 	movl	%eax, 0x20(%rcx)
.Ltmp1060:
    00000311: 	movq	%rdx, %rax
    00000314: 	movl	$0x10, %ecx
    00000319: 	leaq	0xc(%r14), %r10
    0000031d: 	shlq	$0x4, %rax
    00000321: 	testq	%rdx, %rdx
    00000324: 	cmoveq	%rcx, %rax
    00000328: 	addq	%r14, %rax
    0000032b: 	cmpq	%rax, %r8
    0000032e: 	setae	%al
    00000331: 	addq	%r8, %rbx
    00000334: 	cmpq	%rbx, %r10
    00000337: 	setae	%cl
    0000033a: 	orb	%al, %cl
    0000033c: 	je	.Ltmp1061 # Offset: 828
    00000342: 	testb	%r13b, %r13b
    00000345: 	je	.Ltmp1061 # Offset: 837
    0000034b: 	testq	%rdx, %rdx
    0000034e: 	movl	$0x1, %ebx
    00000353: 	movq	%r10, %rax
    00000356: 	cmovneq	%rdx, %rbx
    0000035a: 	xorl	%ecx, %ecx
    0000035c: 	movq	%rbx, %r11
    0000035f: 	shrq	$0x2, %r11
    00000363: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1062:
    00000368: 	movq	%rcx, %r9
    0000036b: 	addq	$0x1, %rcx
    0000036f: 	addq	$0x40, %rax
    00000373: 	shlq	$0x4, %r9
    00000377: 	movdqu	(%r8,%r9), %xmm0
    0000037d: 	pshufd	$0x55, %xmm0, %xmm1
    00000382: 	movd	%xmm0, -0x40(%rax)
    00000387: 	movd	%xmm1, -0x30(%rax)
    0000038c: 	movdqa	%xmm0, %xmm1
    00000390: 	punpckhdq	%xmm0, %xmm1
    00000394: 	pshufd	$0xff, %xmm0, %xmm0
    00000399: 	movd	%xmm1, -0x20(%rax)
    0000039e: 	movd	%xmm0, -0x10(%rax)
    000003a3: 	cmpq	%rcx, %r11
    000003a6: 	jne	.Ltmp1062 # Offset: 934
    000003a8: 	movq	%rbx, %rax
    000003ab: 	andq	$-0x4, %rax
    000003af: 	movq	%rax, %rcx
    000003b2: 	leaq	(%r8,%rax,4), %r9
    000003b6: 	shlq	$0x4, %rcx
    000003ba: 	addq	%r10, %rcx
    000003bd: 	cmpq	%rax, %rbx
    000003c0: 	je	.Ltmp1063 # Offset: 960
    000003c2: 	movl	(%r9), %r10d
    000003c5: 	movl	%r10d, (%rcx)
    000003c8: 	leaq	0x1(%rax), %r10
    000003cc: 	cmpq	%r10, %rdx
    000003cf: 	jbe	.Ltmp1063 # Offset: 975
    000003d1: 	movl	0x4(%r9), %r10d
    000003d5: 	addq	$0x2, %rax
    000003d9: 	movl	%r10d, 0x10(%rcx)
    000003dd: 	cmpq	%rax, %rdx
    000003e0: 	jbe	.Ltmp1063 # Offset: 992
    000003e2: 	movl	0x8(%r9), %eax
    000003e6: 	movl	%eax, 0x20(%rcx)
.Ltmp1063:
    000003e9: 	movl	-0x18(%rsp), %ebx
    000003ed: 	addq	-0x20(%rsp), %r14
    000003f2: 	addq	%rbp, %r15
    000003f5: 	addq	%rbp, %rsi
    000003f8: 	subl	$0x100, -0x14(%rsp)
    00000400: 	addq	%rbp, %rdi
    00000403: 	addq	%rbp, %r8
    00000406: 	cmpl	%ebx, -0x24(%rsp)
    0000040a: 	jl	.Ltmp1064 # Offset: 1034
.Ltmp1050:
    00000410: 	popq	%rbx
    00000411: 	popq	%rbp
    00000412: 	popq	%r12
    00000414: 	popq	%r13
    00000416: 	popq	%r14
    00000418: 	popq	%r15
    0000041a: 	retq # Offset: 1050
    0000041b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1051:
    00000420: 	movslq	-0x14(%rsp), %rdx
    00000425: 	movq	%rdx, %rax
    00000428: 	leaq	(,%rdx,4), %rbp
    00000430: 	shll	$0x2, %eax
    00000433: 	cltq
    00000435: 	shlq	$0x2, %rax
    00000439: 	movq	%rax, -0x20(%rsp)
    0000043e: 	testq	%rdx, %rdx
    00000441: 	jne	.Ltmp1065 # Offset: 1089
    00000447: 	jmp	.Ltmp1063 # Offset: 1095
    00000449: 	nopl	(%rax) # Size: 7
.Ltmp1061:
    00000450: 	xorl	%eax, %eax
    00000452: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1066:
    00000458: 	movl	(%r8,%rax,4), %ecx
    0000045c: 	addq	$0x1, %rax
    00000460: 	addq	$0x10, %r10
    00000464: 	movl	%ecx, -0x10(%r10)
    00000468: 	cmpq	%rdx, %rax
    0000046b: 	jb	.Ltmp1066 # Offset: 1131
    0000046d: 	jmp	.Ltmp1063 # Offset: 1133
    00000472: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1058:
    00000478: 	xorl	%eax, %eax
    0000047a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1067:
    00000480: 	movl	(%rdi,%rax,4), %ecx
    00000483: 	addq	$0x1, %rax
    00000487: 	addq	$0x10, %r10
    0000048b: 	movl	%ecx, -0x10(%r10)
    0000048f: 	cmpq	%rax, %rdx
    00000492: 	ja	.Ltmp1067 # Offset: 1170
    00000494: 	jmp	.Ltmp1060 # Offset: 1172
    00000499: 	nopl	(%rax) # Size: 7
.Ltmp1055:
    000004a0: 	xorl	%eax, %eax
    000004a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1068:
    000004a8: 	movl	(%rsi,%rax,4), %ecx
    000004ab: 	addq	$0x1, %rax
    000004af: 	addq	$0x10, %r11
    000004b3: 	movl	%ecx, -0x10(%r11)
    000004b7: 	cmpq	%rax, %rdx
    000004ba: 	ja	.Ltmp1068 # Offset: 1210
    000004bc: 	jmp	.Ltmp1057 # Offset: 1212
    000004c1: 	nopl	(%rax) # Size: 7
.Ltmp1052:
    000004c8: 	movq	%r14, %rcx
    000004cb: 	xorl	%eax, %eax
    000004cd: 	nopl	(%rax) # Size: 3
.Ltmp1069:
    000004d0: 	movl	(%r15,%rax,4), %r10d
    000004d4: 	addq	$0x1, %rax
    000004d8: 	addq	$0x10, %rcx
    000004dc: 	movl	%r10d, -0x10(%rcx)
    000004e0: 	cmpq	%rax, %rdx
    000004e3: 	ja	.Ltmp1069 # Offset: 1251
    000004e5: 	jmp	.Ltmp1054 # Offset: 1253
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version4IjEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version5IjEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 122
  State       : disassembled
  Address     : 0x18b70
  Size        : 0x387
  MaxSize     : 0x390
  Offset      : 0x18b70
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version5IjEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0121:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r9d, -0x10(%rsp)
    00000013: 	testl	%r9d, %r9d
    00000016: 	jle	.Ltmp1070 # Offset: 22
    0000001c: 	movq	%rsi, %r11
    0000001f: 	movq	%rdx, %r10
    00000022: 	movq	%rcx, %rsi
    00000025: 	movl	%r9d, %r14d
    00000028: 	xorl	%r13d, %r13d
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1078:
    00000030: 	addl	$0x100, %r13d
    00000037: 	cmpl	-0x10(%rsp), %r13d
    0000003c: 	jg	.Ltmp1071 # Offset: 60
    00000042: 	movq	$0x1000, -0x18(%rsp)
    0000004b: 	movl	$0x400, %ebp
    00000050: 	movl	$0x100, %ecx
.Ltmp1079:
    00000055: 	movslq	%ecx, %r9
    00000058: 	testl	%ecx, %ecx
    0000005a: 	movl	$0x4, %edx
    0000005f: 	movl	$0x8, %ebx
    00000064: 	leaq	(,%r9,4), %r12
    0000006c: 	movq	%r9, %rax
    0000006f: 	cmovgq	%r12, %rdx
    00000073: 	shlq	$0x4, %rax
    00000077: 	subq	$0x8, %rax
    0000007b: 	testl	%ecx, %ecx
    0000007d: 	cmovleq	%rbx, %rax
    00000081: 	leaq	(%r11,%rdx), %rbx
    00000085: 	addq	%rdi, %rax
    00000088: 	cmpq	%rbx, %rdi
    0000008b: 	setae	%r15b
    0000008f: 	cmpq	%rax, %r11
    00000092: 	setae	%bl
    00000095: 	addq	%r10, %rdx
    00000098: 	orl	%r15d, %ebx
    0000009b: 	cmpq	%rdx, %rdi
    0000009e: 	setae	%dl
    000000a1: 	cmpq	%rax, %r10
    000000a4: 	setae	%al
    000000a7: 	orl	%eax, %edx
    000000a9: 	testb	%dl, %bl
    000000ab: 	je	.Ltmp1072 # Offset: 171
    000000b1: 	cmpl	$0x5, %ecx
    000000b4: 	jle	.Ltmp1072 # Offset: 180
    000000ba: 	testl	%ecx, %ecx
    000000bc: 	movl	$0x1, %r15d
    000000c2: 	movq	%rdi, %rax
    000000c5: 	cmovgl	%ecx, %r15d
    000000c9: 	xorl	%edx, %edx
    000000cb: 	movl	%r15d, %ebx
    000000ce: 	shrl	$0x2, %ebx
    000000d1: 	shlq	$0x4, %rbx
    000000d5: 	nopl	(%rax) # Size: 3
.Ltmp1073:
    000000d8: 	movdqu	(%r11,%rdx), %xmm1
    000000de: 	movdqu	(%r10,%rdx), %xmm0
    000000e4: 	addq	$0x10, %rdx
    000000e8: 	addq	$0x40, %rax
    000000ec: 	pshufd	$0x55, %xmm1, %xmm2
    000000f1: 	movd	%xmm1, -0x40(%rax)
    000000f6: 	movd	%xmm2, -0x30(%rax)
    000000fb: 	movdqa	%xmm1, %xmm2
    000000ff: 	punpckhdq	%xmm1, %xmm2
    00000103: 	pshufd	$0xff, %xmm1, %xmm1
    00000108: 	movd	%xmm0, -0x3c(%rax)
    0000010d: 	movd	%xmm1, -0x10(%rax)
    00000112: 	pshufd	$0x55, %xmm0, %xmm1
    00000117: 	movd	%xmm1, -0x2c(%rax)
    0000011c: 	movdqa	%xmm0, %xmm1
    00000120: 	punpckhdq	%xmm0, %xmm1
    00000124: 	pshufd	$0xff, %xmm0, %xmm0
    00000129: 	movd	%xmm2, -0x20(%rax)
    0000012e: 	movd	%xmm1, -0x1c(%rax)
    00000133: 	movd	%xmm0, -0xc(%rax)
    00000138: 	cmpq	%rbx, %rdx
    0000013b: 	jne	.Ltmp1073 # Offset: 315
    0000013d: 	movl	%r15d, %edx
    00000140: 	andl	$-0x4, %edx
    00000143: 	andl	$0x3, %r15d
    00000147: 	je	.Ltmp1074 # Offset: 327
    00000149: 	movl	%edx, %ebx
    0000014b: 	movl	%edx, -0xc(%rsp)
    0000014f: 	movq	%rbx, %r15
    00000152: 	movl	(%r11,%rbx,4), %edx
    00000156: 	leaq	(,%rbx,4), %rax
    0000015e: 	shlq	$0x4, %r15
    00000162: 	movl	%edx, (%rdi,%r15)
    00000166: 	movl	-0xc(%rsp), %edx
    0000016a: 	movl	(%r10,%rbx,4), %ebx
    0000016e: 	movl	%ebx, 0x4(%rdi,%rax,4)
    00000172: 	leal	0x1(%rdx), %ebx
    00000175: 	cmpl	%ebx, %ecx
    00000177: 	jle	.Ltmp1074 # Offset: 375
    00000179: 	movl	0x4(%r11,%rax), %ebx
    0000017e: 	addl	$0x2, %edx
    00000181: 	movl	%ebx, 0x10(%rdi,%r15)
    00000186: 	movl	0x4(%r10,%rax), %ebx
    0000018b: 	movl	%ebx, 0x14(%rdi,%rax,4)
    0000018f: 	cmpl	%edx, %ecx
    00000191: 	jle	.Ltmp1074 # Offset: 401
    00000193: 	movl	0x8(%r11,%rax), %edx
    00000198: 	movl	%edx, 0x20(%rdi,%r15)
    0000019d: 	movl	0x8(%r10,%rax), %edx
    000001a2: 	movl	%edx, 0x24(%rdi,%rax,4)
.Ltmp1074:
    000001a6: 	leaq	(%r8,%r12), %rdx
    000001aa: 	leaq	0x8(%rdi), %rax
    000001ae: 	shlq	$0x4, %r9
    000001b2: 	addq	%rdi, %r9
    000001b5: 	cmpq	%rdx, %rax
    000001b8: 	setae	%bl
    000001bb: 	cmpq	%r9, %r8
    000001be: 	setae	%dl
    000001c1: 	addq	%rsi, %r12
    000001c4: 	orl	%ebx, %edx
    000001c6: 	cmpq	%r12, %rax
    000001c9: 	setae	%bl
    000001cc: 	cmpq	%r9, %rsi
    000001cf: 	setae	%r9b
    000001d3: 	orl	%ebx, %r9d
    000001d6: 	testb	%r9b, %dl
    000001d9: 	je	.Ltmp1075 # Offset: 473
    000001df: 	leal	-0x1(%rcx), %edx
    000001e2: 	cmpl	$0x4, %edx
    000001e5: 	jbe	.Ltmp1075 # Offset: 485
    000001eb: 	movl	%ecx, %r9d
    000001ee: 	xorl	%edx, %edx
    000001f0: 	shrl	$0x2, %r9d
    000001f4: 	shlq	$0x4, %r9
    000001f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1076:
    00000200: 	movdqu	(%rsi,%rdx), %xmm1
    00000205: 	movdqu	(%r8,%rdx), %xmm0
    0000020b: 	addq	$0x10, %rdx
    0000020f: 	addq	$0x40, %rax
    00000213: 	pshufd	$0x55, %xmm1, %xmm2
    00000218: 	movd	%xmm1, -0x40(%rax)
    0000021d: 	movd	%xmm2, -0x30(%rax)
    00000222: 	movdqa	%xmm1, %xmm2
    00000226: 	punpckhdq	%xmm1, %xmm2
    0000022a: 	pshufd	$0xff, %xmm1, %xmm1
    0000022f: 	movd	%xmm0, -0x3c(%rax)
    00000234: 	movd	%xmm1, -0x10(%rax)
    00000239: 	pshufd	$0x55, %xmm0, %xmm1
    0000023e: 	movd	%xmm1, -0x2c(%rax)
    00000243: 	movdqa	%xmm0, %xmm1
    00000247: 	punpckhdq	%xmm0, %xmm1
    0000024b: 	pshufd	$0xff, %xmm0, %xmm0
    00000250: 	movd	%xmm2, -0x20(%rax)
    00000255: 	movd	%xmm1, -0x1c(%rax)
    0000025a: 	movd	%xmm0, -0xc(%rax)
    0000025f: 	cmpq	%rdx, %r9
    00000262: 	jne	.Ltmp1076 # Offset: 610
    00000264: 	movl	%ecx, %edx
    00000266: 	andl	$-0x4, %edx
    00000269: 	testb	$0x3, %cl
    0000026c: 	je	.Ltmp1077 # Offset: 620
    0000026e: 	movl	%edx, %r9d
    00000271: 	movl	(%rsi,%r9,4), %r12d
    00000275: 	leaq	(,%r9,4), %rax
    0000027d: 	leaq	0x2(%rax), %rbx
    00000281: 	movl	%r12d, (%rdi,%rbx,4)
    00000285: 	movl	(%r8,%r9,4), %r9d
    00000289: 	movl	%r9d, 0x4(%rdi,%rbx,4)
    0000028e: 	leal	0x1(%rdx), %r9d
    00000292: 	cmpl	%r9d, %ecx
    00000295: 	jle	.Ltmp1077 # Offset: 661
    00000297: 	movl	0x4(%rsi,%rax), %ebx
    0000029b: 	leaq	0x6(%rax), %r9
    0000029f: 	addl	$0x2, %edx
    000002a2: 	movl	%ebx, (%rdi,%r9,4)
    000002a6: 	movl	0x4(%r8,%rax), %ebx
    000002ab: 	movl	%ebx, 0x4(%rdi,%r9,4)
    000002b0: 	cmpl	%edx, %ecx
    000002b2: 	jle	.Ltmp1077 # Offset: 690
    000002b4: 	movl	0x8(%rsi,%rax), %ecx
    000002b8: 	leaq	0xa(%rax), %rdx
    000002bc: 	movl	%ecx, (%rdi,%rdx,4)
    000002bf: 	movl	0x8(%r8,%rax), %eax
    000002c4: 	movl	%eax, 0x4(%rdi,%rdx,4)
.Ltmp1077:
    000002c8: 	addq	-0x18(%rsp), %rdi
    000002cd: 	addq	%rbp, %r11
    000002d0: 	addq	%rbp, %r10
    000002d3: 	addq	%rbp, %rsi
    000002d6: 	addq	%rbp, %r8
    000002d9: 	subl	$0x100, %r14d
    000002e0: 	cmpl	-0x10(%rsp), %r13d
    000002e5: 	jl	.Ltmp1078 # Offset: 741
.Ltmp1070:
    000002eb: 	popq	%rbx
    000002ec: 	popq	%rbp
    000002ed: 	popq	%r12
    000002ef: 	popq	%r13
    000002f1: 	popq	%r14
    000002f3: 	popq	%r15
    000002f5: 	retq # Offset: 757
    000002f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1071:
    00000300: 	leal	(,%r14,4), %eax
    00000308: 	movslq	%r14d, %rbp
    0000030b: 	movl	%r14d, %ecx
    0000030e: 	cltq
    00000310: 	shlq	$0x2, %rbp
    00000314: 	shlq	$0x2, %rax
    00000318: 	movq	%rax, -0x18(%rsp)
    0000031d: 	testl	%r14d, %r14d
    00000320: 	jg	.Ltmp1079 # Offset: 800
    00000326: 	jmp	.Ltmp1077 # Offset: 806
    00000328: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1075:
    00000330: 	movl	%ecx, %ecx
    00000332: 	xorl	%eax, %eax
    00000334: 	shlq	$0x2, %rcx
    00000338: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1080:
    00000340: 	movl	(%rsi,%rax), %edx
    00000343: 	movl	%edx, 0x8(%rdi,%rax,4)
    00000347: 	movl	(%r8,%rax), %edx
    0000034b: 	movl	%edx, 0xc(%rdi,%rax,4)
    0000034f: 	addq	$0x4, %rax
    00000353: 	cmpq	%rax, %rcx
    00000356: 	jne	.Ltmp1080 # Offset: 854
    00000358: 	jmp	.Ltmp1077 # Offset: 856
    0000035d: 	nopl	(%rax) # Size: 3
.Ltmp1072:
    00000360: 	movq	%rdi, %rdx
    00000363: 	xorl	%eax, %eax
    00000365: 	nopl	(%rax) # Size: 3
.Ltmp1081:
    00000368: 	movl	(%r11,%rax,4), %ebx
    0000036c: 	addq	$0x10, %rdx
    00000370: 	movl	%ebx, -0x10(%rdx)
    00000373: 	movl	(%r10,%rax,4), %ebx
    00000377: 	addq	$0x1, %rax
    0000037b: 	movl	%ebx, -0xc(%rdx)
    0000037e: 	cmpl	%eax, %ecx
    00000380: 	jg	.Ltmp1081 # Offset: 896
    00000382: 	jmp	.Ltmp1074 # Offset: 898
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version5IjEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version6IjEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 123
  State       : disassembled
  Address     : 0x18f00
  Size        : 0x4d4
  MaxSize     : 0x4e0
  Offset      : 0x18f00
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version6IjEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0122:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r9d, -0x18(%rsp)
    00000013: 	movl	%r9d, -0x14(%rsp)
    00000018: 	testl	%r9d, %r9d
    0000001b: 	jle	.Ltmp1082 # Offset: 27
    00000021: 	movq	%rdx, %r11
    00000024: 	movq	%rcx, %r10
    00000027: 	movq	%r8, %r13
    0000002a: 	xorl	%r12d, %r12d
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp1096:
    00000030: 	addl	$0x100, %r12d
    00000037: 	cmpl	-0x18(%rsp), %r12d
    0000003c: 	jg	.Ltmp1083 # Offset: 60
    00000042: 	movq	$0x1000, -0x20(%rsp)
    0000004b: 	movl	$0x400, %ebx
    00000050: 	movl	$0x100, %ecx
.Ltmp1098:
    00000055: 	movslq	%ecx, %r8
    00000058: 	movl	$0x4, %edx
    0000005d: 	leaq	-0x1(%r8), %rbp
    00000061: 	leaq	(,%r8,4), %r9
    00000069: 	shlq	$0x4, %rbp
    0000006d: 	testl	%ecx, %ecx
    0000006f: 	leaq	0x4(%rbp), %rax
    00000073: 	cmovleq	%rdx, %rax
    00000077: 	addq	%rdi, %rax
    0000007a: 	cmpq	%rax, %rsi
    0000007d: 	movl	$0x4, %eax
    00000082: 	setae	%dl
    00000085: 	testl	%ecx, %ecx
    00000087: 	cmovgq	%r9, %rax
    0000008b: 	addq	%rsi, %rax
    0000008e: 	cmpq	%rax, %rdi
    00000091: 	setae	%al
    00000094: 	orb	%dl, %al
    00000096: 	je	.Ltmp1084 # Offset: 150
    0000009c: 	cmpl	$0x7, %ecx
    0000009f: 	jle	.Ltmp1084 # Offset: 159
    000000a5: 	testl	%ecx, %ecx
    000000a7: 	movl	$0x1, %r15d
    000000ad: 	movq	%rsi, %rdx
    000000b0: 	movq	%rdi, %rax
    000000b3: 	cmovgl	%ecx, %r15d
    000000b7: 	movl	%r15d, %r14d
    000000ba: 	shrl	$0x2, %r14d
    000000be: 	subl	$0x1, %r14d
    000000c2: 	shlq	$0x4, %r14
    000000c6: 	leaq	0x10(%rsi,%r14), %r14
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1085:
    000000d0: 	movdqu	(%rdx), %xmm0
    000000d4: 	addq	$0x10, %rdx
    000000d8: 	addq	$0x40, %rax
    000000dc: 	pshufd	$0x55, %xmm0, %xmm1
    000000e1: 	movd	%xmm0, -0x40(%rax)
    000000e6: 	movd	%xmm1, -0x30(%rax)
    000000eb: 	movdqa	%xmm0, %xmm1
    000000ef: 	punpckhdq	%xmm0, %xmm1
    000000f3: 	pshufd	$0xff, %xmm0, %xmm0
    000000f8: 	movd	%xmm1, -0x20(%rax)
    000000fd: 	movd	%xmm0, -0x10(%rax)
    00000102: 	cmpq	%r14, %rdx
    00000105: 	jne	.Ltmp1085 # Offset: 261
    00000107: 	movl	%r15d, %eax
    0000010a: 	andl	$-0x4, %eax
    0000010d: 	andl	$0x3, %r15d
    00000111: 	je	.Ltmp1086 # Offset: 273
    00000113: 	movl	%eax, %edx
    00000115: 	movq	%rdx, %r14
    00000118: 	leaq	(,%rdx,4), %r15
    00000120: 	movl	(%rsi,%rdx,4), %edx
    00000123: 	shlq	$0x4, %r14
    00000127: 	movl	%edx, (%rdi,%r14)
    0000012b: 	leal	0x1(%rax), %edx
    0000012e: 	cmpl	%edx, %ecx
    00000130: 	jle	.Ltmp1086 # Offset: 304
    00000132: 	movl	0x4(%rsi,%r15), %edx
    00000137: 	addl	$0x2, %eax
    0000013a: 	movl	%edx, 0x10(%rdi,%r14)
    0000013f: 	cmpl	%eax, %ecx
    00000141: 	jle	.Ltmp1086 # Offset: 321
    00000143: 	movl	0x8(%rsi,%r15), %eax
    00000148: 	movl	%eax, 0x20(%rdi,%r14)
.Ltmp1086:
    0000014d: 	leal	-0x1(%rcx), %eax
    00000150: 	leaq	0x8(%rdi,%rbp), %rdx
    00000155: 	cmpl	$0x6, %eax
    00000158: 	movl	%eax, -0x10(%rsp)
    0000015c: 	leaq	0x4(%rdi), %rax
    00000160: 	seta	%r14b
    00000164: 	cmpq	%rdx, %r11
    00000167: 	leaq	(%r11,%r9), %rdx
    0000016b: 	setae	%r15b
    0000016f: 	cmpq	%rdx, %rax
    00000172: 	setae	%dl
    00000175: 	orb	%r15b, %dl
    00000178: 	movq	%r11, %rdx
    0000017b: 	je	.Ltmp1087 # Offset: 379
    00000181: 	testb	%r14b, %r14b
    00000184: 	je	.Ltmp1087 # Offset: 388
    0000018a: 	movl	%ecx, %r15d
    0000018d: 	shrl	$0x2, %r15d
    00000191: 	subl	$0x1, %r15d
    00000195: 	shlq	$0x4, %r15
    00000199: 	leaq	0x10(%r11,%r15), %r15
    0000019e: 	nop # Size: 2
.Ltmp1088:
    000001a0: 	movdqu	(%rdx), %xmm0
    000001a4: 	addq	$0x10, %rdx
    000001a8: 	addq	$0x40, %rax
    000001ac: 	pshufd	$0x55, %xmm0, %xmm1
    000001b1: 	movd	%xmm0, -0x40(%rax)
    000001b6: 	movd	%xmm1, -0x30(%rax)
    000001bb: 	movdqa	%xmm0, %xmm1
    000001bf: 	punpckhdq	%xmm0, %xmm1
    000001c3: 	pshufd	$0xff, %xmm0, %xmm0
    000001c8: 	movd	%xmm1, -0x20(%rax)
    000001cd: 	movd	%xmm0, -0x10(%rax)
    000001d2: 	cmpq	%r15, %rdx
    000001d5: 	jne	.Ltmp1088 # Offset: 469
    000001d7: 	movl	%ecx, %eax
    000001d9: 	andl	$-0x4, %eax
    000001dc: 	testb	$0x3, %cl
    000001df: 	je	.Ltmp1089 # Offset: 479
    000001e1: 	movl	%eax, %r15d
    000001e4: 	leaq	(,%r15,4), %rdx
    000001ec: 	movl	(%r11,%r15,4), %r15d
    000001f0: 	movl	%r15d, 0x4(%rdi,%rdx,4)
    000001f5: 	leal	0x1(%rax), %r15d
    000001f9: 	cmpl	%r15d, %ecx
    000001fc: 	jle	.Ltmp1089 # Offset: 508
    000001fe: 	movl	0x4(%r11,%rdx), %r15d
    00000203: 	addl	$0x2, %eax
    00000206: 	movl	%r15d, 0x14(%rdi,%rdx,4)
    0000020b: 	cmpl	%eax, %ecx
    0000020d: 	jle	.Ltmp1089 # Offset: 525
    0000020f: 	movl	0x8(%r11,%rdx), %eax
    00000214: 	movl	%eax, 0x24(%rdi,%rdx,4)
.Ltmp1089:
    00000218: 	leaq	0xc(%rdi,%rbp), %rdx
    0000021d: 	leaq	0x8(%rdi), %rax
    00000221: 	cmpq	%rdx, %r10
    00000224: 	leaq	(%r10,%r9), %rdx
    00000228: 	setae	%bpl
    0000022c: 	cmpq	%rdx, %rax
    0000022f: 	setae	%dl
    00000232: 	orb	%bpl, %dl
    00000235: 	movq	%r10, %rdx
    00000238: 	je	.Ltmp1090 # Offset: 568
    0000023e: 	testb	%r14b, %r14b
    00000241: 	je	.Ltmp1090 # Offset: 577
    00000247: 	movl	%ecx, %ebp
    00000249: 	shrl	$0x2, %ebp
    0000024c: 	subl	$0x1, %ebp
    0000024f: 	shlq	$0x4, %rbp
    00000253: 	leaq	0x10(%r10,%rbp), %rbp
    00000258: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1091:
    00000260: 	movdqu	(%rdx), %xmm0
    00000264: 	addq	$0x10, %rdx
    00000268: 	addq	$0x40, %rax
    0000026c: 	pshufd	$0x55, %xmm0, %xmm1
    00000271: 	movd	%xmm0, -0x40(%rax)
    00000276: 	movd	%xmm1, -0x30(%rax)
    0000027b: 	movdqa	%xmm0, %xmm1
    0000027f: 	punpckhdq	%xmm0, %xmm1
    00000283: 	pshufd	$0xff, %xmm0, %xmm0
    00000288: 	movd	%xmm1, -0x20(%rax)
    0000028d: 	movd	%xmm0, -0x10(%rax)
    00000292: 	cmpq	%rbp, %rdx
    00000295: 	jne	.Ltmp1091 # Offset: 661
    00000297: 	movl	%ecx, %eax
    00000299: 	andl	$-0x4, %eax
    0000029c: 	testb	$0x3, %cl
    0000029f: 	je	.Ltmp1092 # Offset: 671
    000002a1: 	movl	%eax, %ebp
    000002a3: 	leaq	(,%rbp,4), %rdx
    000002ab: 	movl	(%r10,%rbp,4), %ebp
    000002af: 	movl	%ebp, 0x8(%rdi,%rdx,4)
    000002b3: 	leal	0x1(%rax), %ebp
    000002b6: 	cmpl	%ecx, %ebp
    000002b8: 	jge	.Ltmp1092 # Offset: 696
    000002ba: 	movl	0x4(%r10,%rdx), %ebp
    000002bf: 	addl	$0x2, %eax
    000002c2: 	movl	%ebp, 0x18(%rdi,%rdx,4)
    000002c6: 	cmpl	%eax, %ecx
    000002c8: 	jle	.Ltmp1092 # Offset: 712
    000002ca: 	movl	0x8(%r10,%rdx), %eax
    000002cf: 	movl	%eax, 0x28(%rdi,%rdx,4)
.Ltmp1092:
    000002d3: 	shlq	$0x4, %r8
    000002d7: 	leaq	0xc(%rdi), %rax
    000002db: 	addq	%rdi, %r8
    000002de: 	cmpq	%r8, %r13
    000002e1: 	setae	%dl
    000002e4: 	addq	%r13, %r9
    000002e7: 	cmpq	%r9, %rax
    000002ea: 	setae	%r8b
    000002ee: 	orb	%dl, %r8b
    000002f1: 	movq	%r13, %rdx
    000002f4: 	je	.Ltmp1093 # Offset: 756
    000002fa: 	testb	%r14b, %r14b
    000002fd: 	je	.Ltmp1093 # Offset: 765
    00000303: 	movl	%ecx, %r8d
    00000306: 	shrl	$0x2, %r8d
    0000030a: 	subl	$0x1, %r8d
    0000030e: 	shlq	$0x4, %r8
    00000312: 	leaq	0x10(%r13,%r8), %r8
    00000317: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1094:
    00000320: 	movdqu	(%rdx), %xmm0
    00000324: 	addq	$0x10, %rdx
    00000328: 	addq	$0x40, %rax
    0000032c: 	pshufd	$0x55, %xmm0, %xmm1
    00000331: 	movd	%xmm0, -0x40(%rax)
    00000336: 	movd	%xmm1, -0x30(%rax)
    0000033b: 	movdqa	%xmm0, %xmm1
    0000033f: 	punpckhdq	%xmm0, %xmm1
    00000343: 	pshufd	$0xff, %xmm0, %xmm0
    00000348: 	movd	%xmm1, -0x20(%rax)
    0000034d: 	movd	%xmm0, -0x10(%rax)
    00000352: 	cmpq	%rdx, %r8
    00000355: 	jne	.Ltmp1094 # Offset: 853
    00000357: 	movl	%ecx, %eax
    00000359: 	andl	$-0x4, %eax
    0000035c: 	testb	$0x3, %cl
    0000035f: 	je	.Ltmp1095 # Offset: 863
    00000361: 	movl	%eax, %r8d
    00000364: 	leaq	(,%r8,4), %rdx
    0000036c: 	movl	(%r13,%r8,4), %r8d
    00000371: 	movl	%r8d, 0xc(%rdi,%rdx,4)
    00000376: 	leal	0x1(%rax), %r8d
    0000037a: 	cmpl	%r8d, %ecx
    0000037d: 	jle	.Ltmp1095 # Offset: 893
    0000037f: 	movl	0x4(%r13,%rdx), %r8d
    00000384: 	addl	$0x2, %eax
    00000387: 	movl	%r8d, 0x1c(%rdi,%rdx,4)
    0000038c: 	cmpl	%eax, %ecx
    0000038e: 	jle	.Ltmp1095 # Offset: 910
    00000390: 	movl	0x8(%r13,%rdx), %eax
    00000395: 	movl	%eax, 0x2c(%rdi,%rdx,4)
.Ltmp1095:
    00000399: 	addq	-0x20(%rsp), %rdi
    0000039e: 	addq	%rbx, %rsi
    000003a1: 	addq	%rbx, %r11
    000003a4: 	addq	%rbx, %r10
    000003a7: 	subl	$0x100, -0x14(%rsp)
    000003af: 	addq	%rbx, %r13
    000003b2: 	cmpl	-0x18(%rsp), %r12d
    000003b7: 	jl	.Ltmp1096 # Offset: 951
.Ltmp1082:
    000003bd: 	popq	%rbx
    000003be: 	popq	%rbp
    000003bf: 	popq	%r12
    000003c1: 	popq	%r13
    000003c3: 	popq	%r14
    000003c5: 	popq	%r15
    000003c7: 	retq # Offset: 967
    000003c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1083:
    000003d0: 	movslq	-0x14(%rsp), %rbx
    000003d5: 	movl	%ebx, %ecx
    000003d7: 	testl	%ebx, %ebx
    000003d9: 	jle	.Ltmp1097 # Offset: 985
    000003df: 	leal	(,%rbx,4), %eax
    000003e6: 	shlq	$0x2, %rbx
    000003ea: 	cltq
    000003ec: 	shlq	$0x2, %rax
    000003f0: 	movq	%rax, -0x20(%rsp)
    000003f5: 	jmp	.Ltmp1098 # Offset: 1013
    000003fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1093:
    00000400: 	movl	-0x10(%rsp), %ecx
    00000404: 	leaq	0x4(%r13,%rcx,4), %r8
    00000409: 	nopl	(%rax) # Size: 7
.Ltmp1099:
    00000410: 	movl	(%rdx), %ecx
    00000412: 	addq	$0x4, %rdx
    00000416: 	addq	$0x10, %rax
    0000041a: 	movl	%ecx, -0x10(%rax)
    0000041d: 	cmpq	%rdx, %r8
    00000420: 	jne	.Ltmp1099 # Offset: 1056
    00000422: 	jmp	.Ltmp1095 # Offset: 1058
    00000427: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1087:
    00000430: 	movl	-0x10(%rsp), %r15d
    00000435: 	movl	%ecx, -0xc(%rsp)
    00000439: 	leaq	0x4(%r11,%r15,4), %r15
    0000043e: 	nop # Size: 2
.Ltmp1100:
    00000440: 	movl	(%rdx), %ecx
    00000442: 	addq	$0x4, %rdx
    00000446: 	addq	$0x10, %rax
    0000044a: 	movl	%ecx, -0x10(%rax)
    0000044d: 	cmpq	%r15, %rdx
    00000450: 	jne	.Ltmp1100 # Offset: 1104
    00000452: 	movl	-0xc(%rsp), %ecx
    00000456: 	jmp	.Ltmp1089 # Offset: 1110
    0000045b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1084:
    00000460: 	xorl	%eax, %eax
    00000462: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1101:
    00000468: 	movl	(%rsi,%rax,4), %r14d
    0000046c: 	movq	%rax, %rdx
    0000046f: 	addq	$0x1, %rax
    00000473: 	shlq	$0x4, %rdx
    00000477: 	movl	%r14d, (%rdi,%rdx)
    0000047b: 	cmpl	%eax, %ecx
    0000047d: 	jg	.Ltmp1101 # Offset: 1149
    0000047f: 	jmp	.Ltmp1086 # Offset: 1151
    00000484: 	nopl	(%rax) # Size: 4
.Ltmp1090:
    00000488: 	movl	-0x10(%rsp), %ebp
    0000048c: 	leaq	0x4(%r10,%rbp,4), %rbp
    00000491: 	nopl	(%rax) # Size: 7
.Ltmp1102:
    00000498: 	movl	(%rdx), %r15d
    0000049b: 	addq	$0x4, %rdx
    0000049f: 	addq	$0x10, %rax
    000004a3: 	movl	%r15d, -0x10(%rax)
    000004a7: 	cmpq	%rbp, %rdx
    000004aa: 	jne	.Ltmp1102 # Offset: 1194
    000004ac: 	jmp	.Ltmp1092 # Offset: 1196
    000004b1: 	nopl	(%rax) # Size: 7
.Ltmp1097:
    000004b8: 	leal	(,%rbx,4), %ebx
    000004bf: 	movslq	%ebx, %rbx
    000004c2: 	leaq	(,%rbx,4), %rax
    000004ca: 	movq	%rax, -0x20(%rsp)
    000004cf: 	jmp	.Ltmp1095 # Offset: 1231
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version6IjEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave2to2_version1ImEvPT_PKS0_S3_i" after disassembly {
  Number      : 124
  State       : disassembled
  Address     : 0x193e0
  Size        : 0xdb
  MaxSize     : 0xe0
  Offset      : 0x193e0
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version1ImEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0123:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp1103 # Offset: 6
    0000000c: 	movslq	%ecx, %rax
    0000000f: 	leaq	(,%rax,8), %r8
    00000017: 	shlq	$0x4, %rax
    0000001b: 	leaq	(%rsi,%r8), %r9
    0000001f: 	addq	%rdi, %rax
    00000022: 	cmpq	%r9, %rdi
    00000025: 	setae	%r9b
    00000029: 	cmpq	%rax, %rsi
    0000002c: 	setae	%r10b
    00000030: 	addq	%rdx, %r8
    00000033: 	orl	%r10d, %r9d
    00000036: 	cmpq	%r8, %rdi
    00000039: 	setae	%r8b
    0000003d: 	cmpq	%rax, %rdx
    00000040: 	setae	%al
    00000043: 	orl	%r8d, %eax
    00000046: 	testb	%al, %r9b
    00000049: 	je	.Ltmp1104 # Offset: 73
    0000004b: 	leal	-0x1(%rcx), %eax
    0000004e: 	cmpl	$0x1, %eax
    00000051: 	jbe	.Ltmp1104 # Offset: 81
    00000053: 	movl	%ecx, %r8d
    00000056: 	xorl	%eax, %eax
    00000058: 	shrl	%r8d
    0000005b: 	shlq	$0x4, %r8
    0000005f: 	nop # Size: 1
.Ltmp1105:
    00000060: 	movdqu	(%rsi,%rax), %xmm0
    00000065: 	movdqu	(%rdx,%rax), %xmm1
    0000006a: 	movdqa	%xmm0, %xmm2
    0000006e: 	punpckhqdq	%xmm1, %xmm0
    00000072: 	punpcklqdq	%xmm1, %xmm2
    00000076: 	movups	%xmm0, 0x10(%rdi,%rax,2)
    0000007b: 	movups	%xmm2, (%rdi,%rax,2)
    0000007f: 	addq	$0x10, %rax
    00000083: 	cmpq	%r8, %rax
    00000086: 	jne	.Ltmp1105 # Offset: 134
    00000088: 	movl	%ecx, %eax
    0000008a: 	andl	$-0x2, %eax
    0000008d: 	andl	$0x1, %ecx
    00000090: 	je	.Ltmp1103 # Offset: 144
    00000092: 	movl	%eax, %ecx
    00000094: 	addl	%eax, %eax
    00000096: 	movq	(%rsi,%rcx,8), %rsi
    0000009a: 	cltq
    0000009c: 	movq	%rsi, (%rdi,%rax,8)
    000000a0: 	movq	(%rdx,%rcx,8), %rdx
    000000a4: 	movq	%rdx, 0x8(%rdi,%rax,8)
    000000a9: 	retq # Offset: 169
    000000aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1104:
    000000b0: 	movl	%ecx, %ecx
    000000b2: 	xorl	%eax, %eax
    000000b4: 	shlq	$0x3, %rcx
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1106:
    000000c0: 	movq	(%rsi,%rax), %r8
    000000c4: 	movq	%r8, (%rdi,%rax,2)
    000000c8: 	movq	(%rdx,%rax), %r8
    000000cc: 	movq	%r8, 0x8(%rdi,%rax,2)
    000000d1: 	addq	$0x8, %rax
    000000d5: 	cmpq	%rax, %rcx
    000000d8: 	jne	.Ltmp1106 # Offset: 216
.Ltmp1103:
    000000da: 	retq # Offset: 218
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version1ImEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version2ImEvPT_PKS0_S3_i" after disassembly {
  Number      : 125
  State       : disassembled
  Address     : 0x194c0
  Size        : 0xeb
  MaxSize     : 0xf0
  Offset      : 0x194c0
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version2ImEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0124:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp1107 # Offset: 6
    0000000c: 	movslq	%ecx, %rax
    0000000f: 	leaq	(,%rax,8), %r8
    00000017: 	shlq	$0x4, %rax
    0000001b: 	leaq	(%rsi,%r8), %r9
    0000001f: 	addq	%rdi, %rax
    00000022: 	cmpq	%r9, %rdi
    00000025: 	setae	%r9b
    00000029: 	cmpq	%rax, %rsi
    0000002c: 	setae	%r10b
    00000030: 	addq	%rdx, %r8
    00000033: 	orl	%r10d, %r9d
    00000036: 	cmpq	%r8, %rdi
    00000039: 	setae	%r8b
    0000003d: 	cmpq	%rax, %rdx
    00000040: 	setae	%al
    00000043: 	orl	%r8d, %eax
    00000046: 	testb	%al, %r9b
    00000049: 	je	.Ltmp1108 # Offset: 73
    0000004b: 	leal	-0x1(%rcx), %eax
    0000004e: 	cmpl	$0x1, %eax
    00000051: 	jbe	.Ltmp1108 # Offset: 81
    00000053: 	movl	%ecx, %r8d
    00000056: 	xorl	%eax, %eax
    00000058: 	shrl	%r8d
    0000005b: 	shlq	$0x4, %r8
    0000005f: 	nop # Size: 1
.Ltmp1109:
    00000060: 	movdqu	(%rsi,%rax), %xmm0
    00000065: 	movdqu	(%rdx,%rax), %xmm1
    0000006a: 	movdqa	%xmm0, %xmm2
    0000006e: 	punpckhqdq	%xmm1, %xmm0
    00000072: 	punpcklqdq	%xmm1, %xmm2
    00000076: 	movups	%xmm0, 0x10(%rdi,%rax,2)
    0000007b: 	movups	%xmm2, (%rdi,%rax,2)
    0000007f: 	addq	$0x10, %rax
    00000083: 	cmpq	%r8, %rax
    00000086: 	jne	.Ltmp1109 # Offset: 134
    00000088: 	movl	%ecx, %r9d
    0000008b: 	andl	$-0x2, %r9d
    0000008f: 	movl	%r9d, %r8d
    00000092: 	movq	%r8, %rax
    00000095: 	shlq	$0x4, %rax
    00000099: 	addq	%rdi, %rax
    0000009c: 	leaq	(,%r8,8), %rdi
    000000a4: 	addq	%rdi, %rsi
    000000a7: 	addq	%rdi, %rdx
    000000aa: 	cmpl	%r9d, %ecx
    000000ad: 	je	.Ltmp1107 # Offset: 173
    000000af: 	movq	(%rsi), %rcx
    000000b2: 	movq	%rcx, (%rax)
    000000b5: 	movq	(%rdx), %rdx
    000000b8: 	movq	%rdx, 0x8(%rax)
    000000bc: 	retq # Offset: 188
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp1108:
    000000c0: 	movl	%ecx, %ecx
    000000c2: 	xorl	%eax, %eax
    000000c4: 	shlq	$0x3, %rcx
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1110:
    000000d0: 	movq	(%rsi,%rax), %r8
    000000d4: 	movq	%r8, (%rdi,%rax,2)
    000000d8: 	movq	(%rdx,%rax), %r8
    000000dc: 	movq	%r8, 0x8(%rdi,%rax,2)
    000000e1: 	addq	$0x8, %rax
    000000e5: 	cmpq	%rax, %rcx
    000000e8: 	jne	.Ltmp1110 # Offset: 232
.Ltmp1107:
    000000ea: 	retq # Offset: 234
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version2ImEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version3ImEvPT_PKS0_S3_i" after disassembly {
  Number      : 126
  State       : disassembled
  Address     : 0x195b0
  Size        : 0x16e
  MaxSize     : 0x170
  Offset      : 0x195b0
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version3ImEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0125:
    00000000: 	endbr64
    00000004: 	movslq	%ecx, %rcx
    00000007: 	movq	%rdi, %rax
    0000000a: 	movq	%rsi, %r8
    0000000d: 	movq	%rdx, %rdi
    00000010: 	testq	%rcx, %rcx
    00000013: 	je	.Ltmp1111 # Offset: 19
    00000019: 	leaq	-0x1(%rcx), %rdx
    0000001d: 	leaq	(,%rcx,8), %r9
    00000025: 	cmpq	$0xe, %rdx
    00000029: 	seta	%r10b
    0000002d: 	shlq	$0x4, %rdx
    00000031: 	leaq	0x8(%rax,%rdx), %rdx
    00000036: 	cmpq	%rdx, %rsi
    00000039: 	leaq	(%rsi,%r9), %rsi
    0000003d: 	setae	%dl
    00000040: 	cmpq	%rsi, %rax
    00000043: 	setae	%sil
    00000047: 	orb	%sil, %dl
    0000004a: 	je	.Ltmp1112 # Offset: 74
    00000050: 	testb	%r10b, %r10b
    00000053: 	je	.Ltmp1112 # Offset: 83
    00000059: 	movq	%rcx, %r11
    0000005c: 	xorl	%edx, %edx
    0000005e: 	xorl	%esi, %esi
    00000060: 	shrq	%r11
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1113:
    00000068: 	movdqu	(%r8,%rdx), %xmm0
    0000006e: 	addq	$0x1, %rsi
    00000072: 	movq	%xmm0, (%rax,%rdx,2)
    00000077: 	movhps	%xmm0, 0x10(%rax,%rdx,2)
    0000007c: 	addq	$0x10, %rdx
    00000080: 	cmpq	%rsi, %r11
    00000083: 	jne	.Ltmp1113 # Offset: 131
    00000085: 	movq	%rcx, %r11
    00000088: 	andq	$-0x2, %r11
    0000008c: 	movq	%r11, %rsi
    0000008f: 	leaq	(%r8,%r11,8), %rdx
    00000093: 	shlq	$0x4, %rsi
    00000097: 	addq	%rax, %rsi
    0000009a: 	cmpq	%r11, %rcx
    0000009d: 	je	.Ltmp1114 # Offset: 157
    0000009f: 	movq	(%rdx), %rdx
    000000a2: 	movq	%rdx, (%rsi)
.Ltmp1114:
    000000a5: 	movq	%rcx, %rdx
    000000a8: 	leaq	0x8(%rax), %r8
    000000ac: 	shlq	$0x4, %rdx
    000000b0: 	addq	%rax, %rdx
    000000b3: 	cmpq	%rdx, %rdi
    000000b6: 	setae	%dl
    000000b9: 	addq	%rdi, %r9
    000000bc: 	cmpq	%r9, %r8
    000000bf: 	setae	%sil
    000000c3: 	orb	%sil, %dl
    000000c6: 	je	.Ltmp1115 # Offset: 198
    000000cc: 	movq	%rcx, %r9
    000000cf: 	xorl	%edx, %edx
    000000d1: 	xorl	%esi, %esi
    000000d3: 	shrq	%r9
    000000d6: 	testb	%r10b, %r10b
    000000d9: 	je	.Ltmp1115 # Offset: 217
    000000db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1116:
    000000e0: 	movdqu	(%rdi,%rdx), %xmm0
    000000e5: 	addq	$0x1, %rsi
    000000e9: 	movq	%xmm0, 0x8(%rax,%rdx,2)
    000000ef: 	movhps	%xmm0, 0x18(%rax,%rdx,2)
    000000f4: 	addq	$0x10, %rdx
    000000f8: 	cmpq	%rsi, %r9
    000000fb: 	jne	.Ltmp1116 # Offset: 251
    000000fd: 	movq	%rcx, %rsi
    00000100: 	andq	$-0x2, %rsi
    00000104: 	movq	%rsi, %rdx
    00000107: 	leaq	(%rdi,%rsi,8), %rax
    0000010b: 	shlq	$0x4, %rdx
    0000010f: 	addq	%r8, %rdx
    00000112: 	cmpq	%rsi, %rcx
    00000115: 	je	.Ltmp1111 # Offset: 277
    00000117: 	movq	(%rax), %rax
    0000011a: 	movq	%rax, (%rdx)
    0000011d: 	retq # Offset: 285
    0000011e: 	nop # Size: 2
.Ltmp1111:
    00000120: 	retq # Offset: 288
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp1112:
    00000128: 	movq	%rax, %rsi
    0000012b: 	xorl	%edx, %edx
    0000012d: 	nopl	(%rax) # Size: 3
.Ltmp1117:
    00000130: 	movq	(%r8,%rdx,8), %r11
    00000134: 	addq	$0x1, %rdx
    00000138: 	addq	$0x10, %rsi
    0000013c: 	movq	%r11, -0x10(%rsi)
    00000140: 	cmpq	%rdx, %rcx
    00000143: 	jne	.Ltmp1117 # Offset: 323
    00000145: 	jmp	.Ltmp1114 # Offset: 325
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1115:
    00000150: 	xorl	%eax, %eax
    00000152: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1118:
    00000158: 	movq	(%rdi,%rax,8), %rdx
    0000015c: 	addq	$0x1, %rax
    00000160: 	addq	$0x10, %r8
    00000164: 	movq	%rdx, -0x10(%r8)
    00000168: 	cmpq	%rax, %rcx
    0000016b: 	jne	.Ltmp1118 # Offset: 363
    0000016d: 	retq # Offset: 365
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version3ImEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version4ImEvPT_PKS0_S3_i" after disassembly {
  Number      : 127
  State       : disassembled
  Address     : 0x19720
  Size        : 0x223
  MaxSize     : 0x230
  Offset      : 0x19720
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version4ImEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0126:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp1119 # Offset: 6
    0000000c: 	pushq	%r15
    0000000e: 	movq	%rdi, %rax
    00000011: 	movq	%rsi, %r8
    00000014: 	movq	%rdx, %rdi
    00000017: 	pushq	%r14
    00000019: 	xorl	%r10d, %r10d
    0000001c: 	pushq	%r13
    0000001e: 	movl	%ecx, %r13d
    00000021: 	pushq	%r12
    00000023: 	movl	%ecx, %r12d
    00000026: 	pushq	%rbp
    00000027: 	pushq	%rbx
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1127:
    00000030: 	addl	$0x100, %r10d
    00000037: 	cmpl	%r13d, %r10d
    0000003a: 	jg	.Ltmp1120 # Offset: 58
    00000040: 	movl	$0x800, %r11d
    00000046: 	movl	$0x1000, %r9d
    0000004c: 	movl	$0x100, %ecx
.Ltmp1128:
    00000051: 	cmpq	$0xf, %rcx
    00000055: 	movl	$0x8, %ebx
    0000005a: 	leaq	(,%rcx,8), %rbp
    00000062: 	movq	%rcx, %rdx
    00000065: 	seta	%r14b
    00000069: 	testq	%rcx, %rcx
    0000006c: 	cmoveq	%rbx, %rbp
    00000070: 	shlq	$0x4, %rdx
    00000074: 	subq	$0x8, %rdx
    00000078: 	testq	%rcx, %rcx
    0000007b: 	cmoveq	%rbx, %rdx
    0000007f: 	leaq	(%r8,%rbp), %rsi
    00000083: 	addq	%rax, %rdx
    00000086: 	cmpq	%rdx, %r8
    00000089: 	setae	%dl
    0000008c: 	cmpq	%rsi, %rax
    0000008f: 	setae	%sil
    00000093: 	orb	%sil, %dl
    00000096: 	je	.Ltmp1121 # Offset: 150
    0000009c: 	testb	%r14b, %r14b
    0000009f: 	je	.Ltmp1121 # Offset: 159
    000000a5: 	testq	%rcx, %rcx
    000000a8: 	movl	$0x1, %ebx
    000000ad: 	cmovneq	%rcx, %rbx
    000000b1: 	xorl	%edx, %edx
    000000b3: 	xorl	%esi, %esi
    000000b5: 	movq	%rbx, %r15
    000000b8: 	shrq	%r15
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1122:
    000000c0: 	movdqu	(%r8,%rdx), %xmm0
    000000c6: 	addq	$0x1, %rsi
    000000ca: 	movq	%xmm0, (%rax,%rdx,2)
    000000cf: 	movhps	%xmm0, 0x10(%rax,%rdx,2)
    000000d4: 	addq	$0x10, %rdx
    000000d8: 	cmpq	%rsi, %r15
    000000db: 	jne	.Ltmp1122 # Offset: 219
    000000dd: 	movq	%rbx, %r15
    000000e0: 	andq	$-0x2, %r15
    000000e4: 	movq	%r15, %rsi
    000000e7: 	leaq	(%r8,%r15,8), %rdx
    000000eb: 	shlq	$0x4, %rsi
    000000ef: 	addq	%rax, %rsi
    000000f2: 	cmpq	%r15, %rbx
    000000f5: 	je	.Ltmp1123 # Offset: 245
    000000f7: 	movq	(%rdx), %rdx
    000000fa: 	movq	%rdx, (%rsi)
.Ltmp1123:
    000000fd: 	movq	%rcx, %rdx
    00000100: 	movl	$0x10, %esi
    00000105: 	leaq	0x8(%rax), %rbx
    00000109: 	shlq	$0x4, %rdx
    0000010d: 	testq	%rcx, %rcx
    00000110: 	cmoveq	%rsi, %rdx
    00000114: 	addq	%rax, %rdx
    00000117: 	cmpq	%rdx, %rdi
    0000011a: 	setae	%dl
    0000011d: 	addq	%rdi, %rbp
    00000120: 	cmpq	%rbp, %rbx
    00000123: 	setae	%sil
    00000127: 	orb	%sil, %dl
    0000012a: 	je	.Ltmp1124 # Offset: 298
    00000130: 	testb	%r14b, %r14b
    00000133: 	je	.Ltmp1124 # Offset: 307
    00000139: 	testq	%rcx, %rcx
    0000013c: 	movl	$0x1, %esi
    00000141: 	cmoveq	%rsi, %rcx
    00000145: 	xorl	%edx, %edx
    00000147: 	xorl	%esi, %esi
    00000149: 	movq	%rcx, %rbp
    0000014c: 	shrq	%rbp
    0000014f: 	nop # Size: 1
.Ltmp1125:
    00000150: 	movdqu	(%rdi,%rdx), %xmm0
    00000155: 	addq	$0x1, %rsi
    00000159: 	movq	%xmm0, 0x8(%rax,%rdx,2)
    0000015f: 	movhps	%xmm0, 0x18(%rax,%rdx,2)
    00000164: 	addq	$0x10, %rdx
    00000168: 	cmpq	%rsi, %rbp
    0000016b: 	jne	.Ltmp1125 # Offset: 363
    0000016d: 	movq	%rcx, %rbp
    00000170: 	andq	$-0x2, %rbp
    00000174: 	movq	%rbp, %rsi
    00000177: 	leaq	(%rdi,%rbp,8), %rdx
    0000017b: 	shlq	$0x4, %rsi
    0000017f: 	addq	%rbx, %rsi
    00000182: 	cmpq	%rbp, %rcx
    00000185: 	je	.Ltmp1126 # Offset: 389
    00000187: 	movq	(%rdx), %rdx
    0000018a: 	movq	%rdx, (%rsi)
.Ltmp1126:
    0000018d: 	addq	%r9, %rax
    00000190: 	addq	%r11, %r8
    00000193: 	addq	%r11, %rdi
    00000196: 	subl	$0x100, %r12d
    0000019d: 	cmpl	%r13d, %r10d
    000001a0: 	jl	.Ltmp1127 # Offset: 416
    000001a6: 	popq	%rbx
    000001a7: 	popq	%rbp
    000001a8: 	popq	%r12
    000001aa: 	popq	%r13
    000001ac: 	popq	%r14
    000001ae: 	popq	%r15
    000001b0: 	retq # Offset: 432
    000001b1: 	nopl	(%rax) # Size: 7
.Ltmp1120:
    000001b8: 	leal	(%r12,%r12), %r9d
    000001bc: 	movslq	%r12d, %rcx
    000001bf: 	movslq	%r9d, %r9
    000001c2: 	leaq	(,%rcx,8), %r11
    000001ca: 	shlq	$0x3, %r9
    000001ce: 	testq	%rcx, %rcx
    000001d1: 	jne	.Ltmp1128 # Offset: 465
    000001d7: 	jmp	.Ltmp1126 # Offset: 471
    000001d9: 	nopl	(%rax) # Size: 7
.Ltmp1124:
    000001e0: 	xorl	%edx, %edx
    000001e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1129:
    000001e8: 	movq	(%rdi,%rdx,8), %rsi
    000001ec: 	addq	$0x1, %rdx
    000001f0: 	addq	$0x10, %rbx
    000001f4: 	movq	%rsi, -0x10(%rbx)
    000001f8: 	cmpq	%rcx, %rdx
    000001fb: 	jb	.Ltmp1129 # Offset: 507
    000001fd: 	jmp	.Ltmp1126 # Offset: 509
    000001ff: 	nop # Size: 1
.Ltmp1121:
    00000200: 	movq	%rax, %rsi
    00000203: 	xorl	%edx, %edx
    00000205: 	nopl	(%rax) # Size: 3
.Ltmp1130:
    00000208: 	movq	(%r8,%rdx,8), %rbx
    0000020c: 	addq	$0x1, %rdx
    00000210: 	addq	$0x10, %rsi
    00000214: 	movq	%rbx, -0x10(%rsi)
    00000218: 	cmpq	%rdx, %rcx
    0000021b: 	ja	.Ltmp1130 # Offset: 539
    0000021d: 	jmp	.Ltmp1123 # Offset: 541
.Ltmp1119:
    00000222: 	retq # Offset: 546
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version4ImEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version5ImEvPT_PKS0_S3_i" after disassembly {
  Number      : 128
  State       : disassembled
  Address     : 0x19950
  Size        : 0x205
  MaxSize     : 0x210
  Offset      : 0x19950
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version5ImEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0127:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp1131 # Offset: 6
    0000000c: 	pushq	%r15
    0000000e: 	movq	%rdi, %rax
    00000011: 	xorl	%r11d, %r11d
    00000014: 	movq	%rdx, %rdi
    00000017: 	pushq	%r14
    00000019: 	movl	$0x8, %r15d
    0000001f: 	movl	%ecx, %r14d
    00000022: 	pushq	%r13
    00000024: 	pushq	%r12
    00000026: 	pushq	%rbp
    00000027: 	movl	%ecx, %ebp
    00000029: 	pushq	%rbx
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1139:
    00000030: 	addl	$0x100, %r11d
    00000037: 	cmpl	%r14d, %r11d
    0000003a: 	jg	.Ltmp1132 # Offset: 58
    00000040: 	movl	$0x800, %ebx
    00000045: 	movl	$0x1000, %r12d
    0000004b: 	movl	$0x100, %ecx
.Ltmp1140:
    00000050: 	movslq	%ecx, %r9
    00000053: 	movq	%r9, %rdx
    00000056: 	leaq	(,%r9,8), %r10
    0000005e: 	shlq	$0x4, %rdx
    00000062: 	subq	$0x8, %rdx
    00000066: 	testl	%ecx, %ecx
    00000068: 	cmovleq	%r15, %rdx
    0000006c: 	addq	%rax, %rdx
    0000006f: 	cmpq	%rdx, %rsi
    00000072: 	movq	%r15, %rdx
    00000075: 	setae	%r8b
    00000079: 	testl	%ecx, %ecx
    0000007b: 	cmovgq	%r10, %rdx
    0000007f: 	addq	%rsi, %rdx
    00000082: 	cmpq	%rdx, %rax
    00000085: 	setae	%dl
    00000088: 	orb	%r8b, %dl
    0000008b: 	je	.Ltmp1133 # Offset: 139
    00000091: 	cmpl	$0xf, %ecx
    00000094: 	jle	.Ltmp1133 # Offset: 148
    0000009a: 	testl	%ecx, %ecx
    0000009c: 	movl	$0x1, %r8d
    000000a2: 	cmovgl	%ecx, %r8d
    000000a6: 	xorl	%edx, %edx
    000000a8: 	movl	%r8d, %r13d
    000000ab: 	shrl	%r13d
    000000ae: 	shlq	$0x4, %r13
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1134:
    000000b8: 	movdqu	(%rsi,%rdx), %xmm0
    000000bd: 	movq	%xmm0, (%rax,%rdx,2)
    000000c2: 	movhps	%xmm0, 0x10(%rax,%rdx,2)
    000000c7: 	addq	$0x10, %rdx
    000000cb: 	cmpq	%rdx, %r13
    000000ce: 	jne	.Ltmp1134 # Offset: 206
    000000d0: 	movl	%r8d, %edx
    000000d3: 	andl	$-0x2, %edx
    000000d6: 	andl	$0x1, %r8d
    000000da: 	je	.Ltmp1135 # Offset: 218
    000000dc: 	movl	%edx, %r8d
    000000df: 	addl	%edx, %edx
    000000e1: 	movq	(%rsi,%r8,8), %r8
    000000e5: 	movslq	%edx, %rdx
    000000e8: 	movq	%r8, (%rax,%rdx,8)
.Ltmp1135:
    000000ec: 	shlq	$0x4, %r9
    000000f0: 	leaq	0x8(%rax), %rdx
    000000f4: 	leal	-0x1(%rcx), %r8d
    000000f8: 	addq	%rax, %r9
    000000fb: 	cmpq	%r9, %rdi
    000000fe: 	setae	%r9b
    00000102: 	addq	%rdi, %r10
    00000105: 	cmpq	%r10, %rdx
    00000108: 	setae	%r10b
    0000010c: 	orb	%r9b, %r10b
    0000010f: 	je	.Ltmp1136 # Offset: 271
    00000115: 	cmpl	$0xe, %r8d
    00000119: 	jbe	.Ltmp1136 # Offset: 281
    0000011f: 	movl	%ecx, %r8d
    00000122: 	xorl	%edx, %edx
    00000124: 	shrl	%r8d
    00000127: 	shlq	$0x4, %r8
    0000012b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1137:
    00000130: 	movdqu	(%rdi,%rdx), %xmm0
    00000135: 	movq	%xmm0, 0x8(%rax,%rdx,2)
    0000013b: 	movhps	%xmm0, 0x18(%rax,%rdx,2)
    00000140: 	addq	$0x10, %rdx
    00000144: 	cmpq	%r8, %rdx
    00000147: 	jne	.Ltmp1137 # Offset: 327
    00000149: 	movl	%ecx, %edx
    0000014b: 	andl	$-0x2, %edx
    0000014e: 	andl	$0x1, %ecx
    00000151: 	je	.Ltmp1138 # Offset: 337
    00000153: 	movl	%edx, %ecx
    00000155: 	leal	0x1(%rdx,%rdx), %edx
    00000159: 	movq	(%rdi,%rcx,8), %rcx
    0000015d: 	movslq	%edx, %rdx
    00000160: 	movq	%rcx, (%rax,%rdx,8)
.Ltmp1138:
    00000164: 	addq	%r12, %rax
    00000167: 	addq	%rbx, %rsi
    0000016a: 	addq	%rbx, %rdi
    0000016d: 	subl	$0x100, %ebp
    00000173: 	cmpl	%r14d, %r11d
    00000176: 	jl	.Ltmp1139 # Offset: 374
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1132:
    00000190: 	leal	(%rbp,%rbp), %r12d
    00000195: 	movslq	%ebp, %rbx
    00000198: 	movl	%ebp, %ecx
    0000019a: 	movslq	%r12d, %r12
    0000019d: 	shlq	$0x3, %rbx
    000001a1: 	shlq	$0x3, %r12
    000001a5: 	testl	%ebp, %ebp
    000001a7: 	jg	.Ltmp1140 # Offset: 423
    000001ad: 	jmp	.Ltmp1138 # Offset: 429
    000001af: 	nop # Size: 1
.Ltmp1136:
    000001b0: 	movq	%rdi, %rcx
    000001b3: 	leaq	0x8(%rdi,%r8,8), %r9
    000001b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1141:
    000001c0: 	movq	(%rcx), %r8
    000001c3: 	addq	$0x8, %rcx
    000001c7: 	addq	$0x10, %rdx
    000001cb: 	movq	%r8, -0x10(%rdx)
    000001cf: 	cmpq	%rcx, %r9
    000001d2: 	jne	.Ltmp1141 # Offset: 466
    000001d4: 	jmp	.Ltmp1138 # Offset: 468
    000001d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1133:
    000001e0: 	xorl	%edx, %edx
    000001e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1142:
    000001e8: 	movq	(%rsi,%rdx,8), %r13
    000001ec: 	movq	%rdx, %r8
    000001ef: 	addq	$0x1, %rdx
    000001f3: 	shlq	$0x4, %r8
    000001f7: 	movq	%r13, (%rax,%r8)
    000001fb: 	cmpl	%edx, %ecx
    000001fd: 	jg	.Ltmp1142 # Offset: 509
    000001ff: 	jmp	.Ltmp1135 # Offset: 511
.Ltmp1131:
    00000204: 	retq # Offset: 516
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version5ImEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version6ImEvPT_PKS0_S3_i" after disassembly {
  Number      : 129
  State       : disassembled
  Address     : 0x19b60
  Size        : 0x202
  MaxSize     : 0x210
  Offset      : 0x19b60
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version6ImEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0128:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp1143 # Offset: 6
    0000000c: 	pushq	%r15
    0000000e: 	movq	%rdi, %rax
    00000011: 	xorl	%r11d, %r11d
    00000014: 	pushq	%r14
    00000016: 	movl	%ecx, %r14d
    00000019: 	pushq	%r13
    0000001b: 	pushq	%r12
    0000001d: 	pushq	%rbp
    0000001e: 	movl	%ecx, %ebp
    00000020: 	pushq	%rbx
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp1151:
    00000028: 	addl	$0x100, %r11d
    0000002f: 	cmpl	%r14d, %r11d
    00000032: 	jg	.Ltmp1144 # Offset: 50
    00000038: 	movl	$0x800, %r10d
    0000003e: 	movl	$0x1000, %ebx
    00000043: 	movl	$0x100, %edi
.Ltmp1152:
    00000048: 	movslq	%edi, %r9
    0000004b: 	movl	$0x8, %r15d
    00000051: 	movq	%r9, %rcx
    00000054: 	leaq	(,%r9,8), %r12
    0000005c: 	shlq	$0x4, %rcx
    00000060: 	subq	$0x8, %rcx
    00000064: 	testl	%edi, %edi
    00000066: 	cmovleq	%r15, %rcx
    0000006a: 	addq	%rax, %rcx
    0000006d: 	cmpq	%rcx, %rsi
    00000070: 	movl	$0x8, %ecx
    00000075: 	setae	%r8b
    00000079: 	testl	%edi, %edi
    0000007b: 	cmovgq	%r12, %rcx
    0000007f: 	addq	%rsi, %rcx
    00000082: 	cmpq	%rcx, %rax
    00000085: 	setae	%cl
    00000088: 	orb	%cl, %r8b
    0000008b: 	je	.Ltmp1145 # Offset: 139
    00000091: 	cmpl	$0xf, %edi
    00000094: 	jle	.Ltmp1145 # Offset: 148
    0000009a: 	testl	%edi, %edi
    0000009c: 	movl	$0x1, %r13d
    000000a2: 	cmovgl	%edi, %r13d
    000000a6: 	xorl	%ecx, %ecx
    000000a8: 	movl	%r13d, %r8d
    000000ab: 	shrl	%r8d
    000000ae: 	shlq	$0x4, %r8
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1146:
    000000b8: 	movdqu	(%rsi,%rcx), %xmm0
    000000bd: 	movq	%xmm0, (%rax,%rcx,2)
    000000c2: 	movhps	%xmm0, 0x10(%rax,%rcx,2)
    000000c7: 	addq	$0x10, %rcx
    000000cb: 	cmpq	%r8, %rcx
    000000ce: 	jne	.Ltmp1146 # Offset: 206
    000000d0: 	movl	%r13d, %r15d
    000000d3: 	andl	$-0x2, %r15d
    000000d7: 	movl	%r15d, %ecx
    000000da: 	movq	%rcx, %r8
    000000dd: 	shlq	$0x4, %r8
    000000e1: 	addq	%rax, %r8
    000000e4: 	cmpl	%r15d, %r13d
    000000e7: 	je	.Ltmp1147 # Offset: 231
    000000e9: 	movq	(%rsi,%rcx,8), %rcx
    000000ed: 	movq	%rcx, (%r8)
.Ltmp1147:
    000000f0: 	shlq	$0x4, %r9
    000000f4: 	leaq	0x8(%rax), %r8
    000000f8: 	leal	-0x1(%rdi), %ecx
    000000fb: 	addq	%rax, %r9
    000000fe: 	cmpq	%r9, %rdx
    00000101: 	setae	%r9b
    00000105: 	addq	%rdx, %r12
    00000108: 	cmpq	%r12, %r8
    0000010b: 	setae	%r12b
    0000010f: 	orb	%r12b, %r9b
    00000112: 	je	.Ltmp1148 # Offset: 274
    00000118: 	cmpl	$0xe, %ecx
    0000011b: 	jbe	.Ltmp1148 # Offset: 283
    00000121: 	movl	%edi, %r9d
    00000124: 	xorl	%ecx, %ecx
    00000126: 	shrl	%r9d
    00000129: 	shlq	$0x4, %r9
    0000012d: 	nopl	(%rax) # Size: 3
.Ltmp1149:
    00000130: 	movdqu	(%rdx,%rcx), %xmm0
    00000135: 	movq	%xmm0, 0x8(%rax,%rcx,2)
    0000013b: 	movhps	%xmm0, 0x18(%rax,%rcx,2)
    00000140: 	addq	$0x10, %rcx
    00000144: 	cmpq	%r9, %rcx
    00000147: 	jne	.Ltmp1149 # Offset: 327
    00000149: 	movl	%edi, %r12d
    0000014c: 	andl	$-0x2, %r12d
    00000150: 	movl	%r12d, %r9d
    00000153: 	movq	%r9, %rcx
    00000156: 	shlq	$0x4, %rcx
    0000015a: 	addq	%rcx, %r8
    0000015d: 	cmpl	%edi, %r12d
    00000160: 	je	.Ltmp1150 # Offset: 352
    00000162: 	movq	(%rdx,%r9,8), %rcx
    00000166: 	movq	%rcx, (%r8)
.Ltmp1150:
    00000169: 	addq	%rbx, %rax
    0000016c: 	addq	%r10, %rsi
    0000016f: 	addq	%r10, %rdx
    00000172: 	subl	$0x100, %ebp
    00000178: 	cmpl	%r14d, %r11d
    0000017b: 	jl	.Ltmp1151 # Offset: 379
    00000181: 	popq	%rbx
    00000182: 	popq	%rbp
    00000183: 	popq	%r12
    00000185: 	popq	%r13
    00000187: 	popq	%r14
    00000189: 	popq	%r15
    0000018b: 	retq # Offset: 395
    0000018c: 	nopl	(%rax) # Size: 4
.Ltmp1144:
    00000190: 	leal	(%rbp,%rbp), %ebx
    00000194: 	movslq	%ebp, %r10
    00000197: 	movl	%ebp, %edi
    00000199: 	movslq	%ebx, %rbx
    0000019c: 	shlq	$0x3, %r10
    000001a0: 	shlq	$0x3, %rbx
    000001a4: 	testl	%ebp, %ebp
    000001a6: 	jg	.Ltmp1152 # Offset: 422
    000001ac: 	jmp	.Ltmp1150 # Offset: 428
    000001ae: 	nop # Size: 2
.Ltmp1148:
    000001b0: 	shlq	$0x4, %rcx
    000001b4: 	movq	%rdx, %rdi
    000001b7: 	leaq	0x18(%rax,%rcx), %r9
    000001bc: 	nopl	(%rax) # Size: 4
.Ltmp1153:
    000001c0: 	movq	(%rdi), %rcx
    000001c3: 	addq	$0x10, %r8
    000001c7: 	addq	$0x8, %rdi
    000001cb: 	movq	%rcx, -0x10(%r8)
    000001cf: 	cmpq	%r9, %r8
    000001d2: 	jne	.Ltmp1153 # Offset: 466
    000001d4: 	jmp	.Ltmp1150 # Offset: 468
    000001d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1145:
    000001e0: 	movq	%rax, %r8
    000001e3: 	xorl	%ecx, %ecx
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp1154:
    000001e8: 	movq	(%rsi,%rcx,8), %r13
    000001ec: 	addq	$0x1, %rcx
    000001f0: 	addq	$0x10, %r8
    000001f4: 	movq	%r13, -0x10(%r8)
    000001f8: 	cmpl	%ecx, %edi
    000001fa: 	jg	.Ltmp1154 # Offset: 506
    000001fc: 	jmp	.Ltmp1147 # Offset: 508
.Ltmp1143:
    00000201: 	retq # Offset: 513
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version6ImEvPT_PKS0_S3_i"

Binary Function "_Z23interleave3to3_version1ImEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 130
  State       : disassembled
  Address     : 0x19d70
  Size        : 0x141
  MaxSize     : 0x150
  Offset      : 0x19d70
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version1ImEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0129:
    00000000: 	endbr64
    00000004: 	testl	%r8d, %r8d
    00000007: 	jle	.Ltmp1155 # Offset: 7
    0000000d: 	movslq	%r8d, %rax
    00000010: 	movq	%rdx, %r9
    00000013: 	pushq	%rbx
    00000014: 	leaq	(,%rax,8), %rdx
    0000001c: 	leaq	(%rax,%rax,2), %rax
    00000020: 	leaq	(%rdi,%rax,8), %r11
    00000024: 	leaq	(%rsi,%rdx), %rax
    00000028: 	cmpq	%rax, %rdi
    0000002b: 	setae	%al
    0000002e: 	cmpq	%rsi, %r11
    00000031: 	setbe	%r10b
    00000035: 	orl	%r10d, %eax
    00000038: 	leaq	(%r9,%rdx), %r10
    0000003c: 	cmpq	%r10, %rdi
    0000003f: 	setae	%r10b
    00000043: 	cmpq	%r9, %r11
    00000046: 	setbe	%bl
    00000049: 	orl	%ebx, %r10d
    0000004c: 	andl	%r10d, %eax
    0000004f: 	leal	-0x1(%r8), %r10d
    00000053: 	cmpl	$0x1, %r10d
    00000057: 	seta	%r10b
    0000005b: 	testb	%r10b, %al
    0000005e: 	je	.Ltmp1156 # Offset: 94
    00000064: 	addq	%rcx, %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	setae	%al
    0000006d: 	cmpq	%rcx, %r11
    00000070: 	setbe	%dl
    00000073: 	orb	%dl, %al
    00000075: 	je	.Ltmp1156 # Offset: 117
    0000007b: 	movl	%r8d, %r10d
    0000007e: 	movq	%rdi, %rdx
    00000081: 	xorl	%eax, %eax
    00000083: 	shrl	%r10d
    00000086: 	shlq	$0x4, %r10
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1157:
    00000090: 	movdqu	(%rsi,%rax), %xmm1
    00000095: 	movdqu	(%r9,%rax), %xmm0
    0000009b: 	addq	$0x30, %rdx
    0000009f: 	movdqu	(%rcx,%rax), %xmm2
    000000a4: 	addq	$0x10, %rax
    000000a8: 	movdqa	%xmm1, %xmm3
    000000ac: 	punpcklqdq	%xmm0, %xmm3
    000000b0: 	shufpd	$0x1, %xmm1, %xmm0
    000000b5: 	shufpd	$0x2, %xmm2, %xmm0
    000000ba: 	movups	%xmm0, -0x10(%rdx)
    000000be: 	movups	%xmm3, -0x30(%rdx)
    000000c2: 	movdqa	%xmm2, %xmm3
    000000c6: 	shufpd	$0x2, %xmm1, %xmm3
    000000cb: 	movups	%xmm3, -0x20(%rdx)
    000000cf: 	cmpq	%rax, %r10
    000000d2: 	jne	.Ltmp1157 # Offset: 210
    000000d4: 	movl	%r8d, %eax
    000000d7: 	andl	$-0x2, %eax
    000000da: 	andl	$0x1, %r8d
    000000de: 	je	.Ltmp1158 # Offset: 222
    000000e0: 	movl	%eax, %edx
    000000e2: 	leal	(%rax,%rax,2), %eax
    000000e5: 	movq	(%rsi,%rdx,8), %rsi
    000000e9: 	cltq
    000000eb: 	movq	%rsi, (%rdi,%rax,8)
    000000ef: 	movq	(%r9,%rdx,8), %rsi
    000000f3: 	addq	$0x1, %rax
    000000f7: 	movq	%rsi, (%rdi,%rax,8)
    000000fb: 	movq	(%rcx,%rdx,8), %rdx
    000000ff: 	movq	%rdx, 0x8(%rdi,%rax,8)
.Ltmp1158:
    00000104: 	popq	%rbx
    00000105: 	retq # Offset: 261
    00000106: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1156:
    00000110: 	movl	%r8d, %r8d
    00000113: 	xorl	%eax, %eax
    00000115: 	nopl	(%rax) # Size: 3
.Ltmp1159:
    00000118: 	movq	(%rsi,%rax,8), %rdx
    0000011c: 	addq	$0x18, %rdi
    00000120: 	movq	%rdx, -0x18(%rdi)
    00000124: 	movq	(%r9,%rax,8), %rdx
    00000128: 	movq	%rdx, -0x10(%rdi)
    0000012c: 	movq	(%rcx,%rax,8), %rdx
    00000130: 	addq	$0x1, %rax
    00000134: 	movq	%rdx, -0x8(%rdi)
    00000138: 	cmpq	%r8, %rax
    0000013b: 	jne	.Ltmp1159 # Offset: 315
    0000013d: 	popq	%rbx
    0000013e: 	retq # Offset: 318
    0000013f: 	nop # Size: 1
.Ltmp1155:
    00000140: 	retq # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version1ImEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version2ImEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 131
  State       : disassembled
  Address     : 0x19ec0
  Size        : 0x229
  MaxSize     : 0x230
  Offset      : 0x19ec0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version2ImEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0130:
    00000000: 	endbr64
    00000004: 	movslq	%r8d, %r8
    00000007: 	testq	%r8, %r8
    0000000a: 	je	.Ltmp1160 # Offset: 10
    00000010: 	leaq	-0x1(%r8), %rax
    00000014: 	leaq	(%r8,%r8,2), %r11
    00000018: 	movq	%rsi, %r9
    0000001b: 	pushq	%r12
    0000001d: 	cmpq	$0xe, %rax
    00000021: 	pushq	%rbp
    00000022: 	movq	%rdx, %rsi
    00000025: 	seta	%r10b
    00000029: 	shlq	$0x3, %r11
    0000002d: 	pushq	%rbx
    0000002e: 	leaq	(,%r8,8), %rbx
    00000036: 	leaq	-0x10(%rdi,%r11), %rax
    0000003b: 	leaq	(%r9,%rbx), %rdx
    0000003f: 	cmpq	%rax, %r9
    00000042: 	setae	%al
    00000045: 	cmpq	%rdx, %rdi
    00000048: 	setae	%dl
    0000004b: 	orb	%dl, %al
    0000004d: 	je	.Ltmp1161 # Offset: 77
    00000053: 	testb	%r10b, %r10b
    00000056: 	je	.Ltmp1161 # Offset: 86
    0000005c: 	movq	%r8, %r12
    0000005f: 	leaq	0x18(%rdi), %rdx
    00000063: 	xorl	%eax, %eax
    00000065: 	shrq	%r12
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1162:
    00000070: 	movq	%rax, %rbp
    00000073: 	addq	$0x1, %rax
    00000077: 	addq	$0x30, %rdx
    0000007b: 	shlq	$0x4, %rbp
    0000007f: 	movdqu	(%r9,%rbp), %xmm0
    00000085: 	movq	%xmm0, -0x48(%rdx)
    0000008a: 	movhps	%xmm0, -0x30(%rdx)
    0000008e: 	cmpq	%r12, %rax
    00000091: 	jne	.Ltmp1162 # Offset: 145
    00000093: 	movq	%r8, %rbp
    00000096: 	andq	$-0x2, %rbp
    0000009a: 	leaq	(%rbp,%rbp,2), %rdx
    0000009f: 	leaq	(%r9,%rbp,8), %rax
    000000a3: 	leaq	(%rdi,%rdx,8), %rdx
    000000a7: 	cmpq	%rbp, %r8
    000000aa: 	je	.Ltmp1163 # Offset: 170
    000000ac: 	movq	(%rax), %rax
    000000af: 	movq	%rax, (%rdx)
.Ltmp1163:
    000000b2: 	leaq	-0x8(%rdi,%r11), %rax
    000000b7: 	leaq	(%rsi,%rbx), %rdx
    000000bb: 	cmpq	%rax, %rsi
    000000be: 	leaq	0x8(%rdi), %rbp
    000000c2: 	setae	%al
    000000c5: 	cmpq	%rdx, %rbp
    000000c8: 	setae	%dl
    000000cb: 	orb	%dl, %al
    000000cd: 	je	.Ltmp1164 # Offset: 205
    000000d3: 	movq	%r8, %r12
    000000d6: 	leaq	0x20(%rdi), %rdx
    000000da: 	xorl	%eax, %eax
    000000dc: 	shrq	%r12
    000000df: 	testb	%r10b, %r10b
    000000e2: 	je	.Ltmp1164 # Offset: 226
    000000e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1165:
    000000f0: 	movq	%rax, %r9
    000000f3: 	addq	$0x1, %rax
    000000f7: 	addq	$0x30, %rdx
    000000fb: 	shlq	$0x4, %r9
    000000ff: 	movdqu	(%rsi,%r9), %xmm0
    00000105: 	movq	%xmm0, -0x48(%rdx)
    0000010a: 	movhps	%xmm0, -0x30(%rdx)
    0000010e: 	cmpq	%r12, %rax
    00000111: 	jne	.Ltmp1165 # Offset: 273
    00000113: 	movq	%r8, %r9
    00000116: 	andq	$-0x2, %r9
    0000011a: 	leaq	(%r9,%r9,2), %rdx
    0000011e: 	leaq	(%rsi,%r9,8), %rax
    00000122: 	leaq	(%rbp,%rdx,8), %rdx
    00000127: 	cmpq	%r9, %r8
    0000012a: 	je	.Ltmp1166 # Offset: 298
    0000012c: 	movq	(%rax), %rax
    0000012f: 	movq	%rax, (%rdx)
.Ltmp1166:
    00000132: 	addq	%rdi, %r11
    00000135: 	leaq	0x10(%rdi), %r9
    00000139: 	cmpq	%r11, %rcx
    0000013c: 	setae	%al
    0000013f: 	addq	%rcx, %rbx
    00000142: 	cmpq	%rbx, %r9
    00000145: 	setae	%dl
    00000148: 	orb	%dl, %al
    0000014a: 	je	.Ltmp1167 # Offset: 330
    00000150: 	movq	%r8, %r11
    00000153: 	leaq	0x28(%rdi), %rdx
    00000157: 	xorl	%eax, %eax
    00000159: 	shrq	%r11
    0000015c: 	testb	%r10b, %r10b
    0000015f: 	je	.Ltmp1167 # Offset: 351
    00000165: 	nopl	(%rax) # Size: 3
.Ltmp1168:
    00000168: 	movq	%rax, %rsi
    0000016b: 	addq	$0x1, %rax
    0000016f: 	addq	$0x30, %rdx
    00000173: 	shlq	$0x4, %rsi
    00000177: 	movdqu	(%rcx,%rsi), %xmm0
    0000017c: 	movq	%xmm0, -0x48(%rdx)
    00000181: 	movhps	%xmm0, -0x30(%rdx)
    00000185: 	cmpq	%rax, %r11
    00000188: 	jne	.Ltmp1168 # Offset: 392
    0000018a: 	movq	%r8, %rsi
    0000018d: 	andq	$-0x2, %rsi
    00000191: 	leaq	(%rsi,%rsi,2), %rdx
    00000195: 	leaq	(%rcx,%rsi,8), %rax
    00000199: 	leaq	(%r9,%rdx,8), %rdx
    0000019d: 	cmpq	%rsi, %r8
    000001a0: 	je	.Ltmp1169 # Offset: 416
    000001a2: 	movq	(%rax), %rax
    000001a5: 	movq	%rax, (%rdx)
.Ltmp1169:
    000001a8: 	popq	%rbx
    000001a9: 	popq	%rbp
    000001aa: 	popq	%r12
    000001ac: 	retq # Offset: 428
    000001ad: 	nopl	(%rax) # Size: 3
.Ltmp1161:
    000001b0: 	movq	%rdi, %rdx
    000001b3: 	xorl	%eax, %eax
    000001b5: 	nopl	(%rax) # Size: 3
.Ltmp1170:
    000001b8: 	movq	(%r9,%rax,8), %rbp
    000001bc: 	addq	$0x1, %rax
    000001c0: 	addq	$0x18, %rdx
    000001c4: 	movq	%rbp, -0x18(%rdx)
    000001c8: 	cmpq	%rax, %r8
    000001cb: 	jne	.Ltmp1170 # Offset: 459
    000001cd: 	jmp	.Ltmp1163 # Offset: 461
    000001d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1164:
    000001d8: 	xorl	%eax, %eax
    000001da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1171:
    000001e0: 	movq	(%rsi,%rax,8), %rdx
    000001e4: 	addq	$0x1, %rax
    000001e8: 	addq	$0x18, %rbp
    000001ec: 	movq	%rdx, -0x18(%rbp)
    000001f0: 	cmpq	%rax, %r8
    000001f3: 	jne	.Ltmp1171 # Offset: 499
    000001f5: 	jmp	.Ltmp1166 # Offset: 501
    000001fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1167:
    00000200: 	xorl	%eax, %eax
    00000202: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1172:
    00000208: 	movq	(%rcx,%rax,8), %rdx
    0000020c: 	addq	$0x1, %rax
    00000210: 	addq	$0x18, %r9
    00000214: 	movq	%rdx, -0x18(%r9)
    00000218: 	cmpq	%rax, %r8
    0000021b: 	jne	.Ltmp1172 # Offset: 539
    0000021d: 	popq	%rbx
    0000021e: 	popq	%rbp
    0000021f: 	popq	%r12
    00000221: 	retq # Offset: 545
    00000222: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1160:
    00000228: 	retq # Offset: 552
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version2ImEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version3ImEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 132
  State       : disassembled
  Address     : 0x1a0f0
  Size        : 0x1a1
  MaxSize     : 0x1b0
  Offset      : 0x1a0f0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version3ImEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0131:
    00000000: 	endbr64
    00000004: 	testl	%r8d, %r8d
    00000007: 	jle	.Ltmp1173 # Offset: 7
    0000000d: 	movslq	%r8d, %rax
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r9
    00000015: 	leal	-0x1(%r8), %r10d
    00000019: 	pushq	%rbp
    0000001a: 	leaq	(%rax,%rax,2), %r11
    0000001e: 	pushq	%rbx
    0000001f: 	leaq	(,%rax,8), %rbx
    00000027: 	shlq	$0x3, %r11
    0000002b: 	leaq	(%rsi,%rbx), %rax
    0000002f: 	leaq	-0x8(%rdi,%r11), %rbp
    00000034: 	cmpq	%rax, %rdi
    00000037: 	setae	%dl
    0000003a: 	cmpq	%rbp, %rsi
    0000003d: 	setae	%al
    00000040: 	orl	%eax, %edx
    00000042: 	leaq	(%r9,%rbx), %rax
    00000046: 	cmpq	%rax, %rdi
    00000049: 	setae	%al
    0000004c: 	cmpq	%rbp, %r9
    0000004f: 	setae	%bpl
    00000053: 	orl	%ebp, %eax
    00000055: 	testb	%al, %dl
    00000057: 	je	.Ltmp1174 # Offset: 87
    0000005d: 	cmpl	$0x8, %r10d
    00000061: 	jbe	.Ltmp1174 # Offset: 97
    00000067: 	movl	%r8d, %ebp
    0000006a: 	movq	%rdi, %rax
    0000006d: 	xorl	%edx, %edx
    0000006f: 	shrl	%ebp
    00000071: 	shlq	$0x4, %rbp
    00000075: 	nopl	(%rax) # Size: 3
.Ltmp1175:
    00000078: 	movdqu	(%rsi,%rdx), %xmm1
    0000007d: 	movdqu	(%r9,%rdx), %xmm0
    00000083: 	addq	$0x10, %rdx
    00000087: 	addq	$0x30, %rax
    0000008b: 	movq	%xmm1, -0x30(%rax)
    00000090: 	movhps	%xmm1, -0x18(%rax)
    00000094: 	movq	%xmm0, -0x28(%rax)
    00000099: 	movhps	%xmm0, -0x10(%rax)
    0000009d: 	cmpq	%rbp, %rdx
    000000a0: 	jne	.Ltmp1175 # Offset: 160
    000000a2: 	movl	%r8d, %eax
    000000a5: 	andl	$-0x2, %eax
    000000a8: 	testb	$0x1, %r8b
    000000ac: 	je	.Ltmp1176 # Offset: 172
    000000ae: 	movl	%eax, %edx
    000000b0: 	leal	(%rax,%rax,2), %eax
    000000b3: 	movq	(%rsi,%rdx,8), %rsi
    000000b7: 	cltq
    000000b9: 	movq	%rsi, (%rdi,%rax,8)
    000000bd: 	movq	(%r9,%rdx,8), %rdx
    000000c1: 	movq	%rdx, 0x8(%rdi,%rax,8)
.Ltmp1176:
    000000c6: 	addq	%rdi, %r11
    000000c9: 	leaq	0x10(%rdi), %rax
    000000cd: 	cmpq	%r11, %rcx
    000000d0: 	setae	%dl
    000000d3: 	addq	%rcx, %rbx
    000000d6: 	cmpq	%rbx, %rax
    000000d9: 	setae	%sil
    000000dd: 	orb	%sil, %dl
    000000e0: 	je	.Ltmp1177 # Offset: 224
    000000e6: 	cmpl	$0xe, %r10d
    000000ea: 	jbe	.Ltmp1177 # Offset: 234
    000000f0: 	movl	%r8d, %esi
    000000f3: 	movq	%rcx, %rdx
    000000f6: 	shrl	%esi
    000000f8: 	subl	$0x1, %esi
    000000fb: 	shlq	$0x4, %rsi
    000000ff: 	leaq	0x10(%rcx,%rsi), %rsi
    00000104: 	nopl	(%rax) # Size: 4
.Ltmp1178:
    00000108: 	movdqu	(%rdx), %xmm0
    0000010c: 	addq	$0x10, %rdx
    00000110: 	addq	$0x30, %rax
    00000114: 	movq	%xmm0, -0x30(%rax)
    00000119: 	movhps	%xmm0, -0x18(%rax)
    0000011d: 	cmpq	%rdx, %rsi
    00000120: 	jne	.Ltmp1178 # Offset: 288
    00000122: 	movl	%r8d, %eax
    00000125: 	andl	$-0x2, %eax
    00000128: 	andl	$0x1, %r8d
    0000012c: 	je	.Ltmp1179 # Offset: 300
    0000012e: 	movl	%eax, %edx
    00000130: 	leal	(%rax,%rax,2), %eax
    00000133: 	movq	(%rcx,%rdx,8), %rdx
    00000137: 	cltq
    00000139: 	movq	%rdx, 0x10(%rdi,%rax,8)
.Ltmp1179:
    0000013e: 	popq	%rbx
    0000013f: 	popq	%rbp
    00000140: 	popq	%r12
    00000142: 	retq # Offset: 322
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1174:
    00000148: 	movq	%rdi, %rdx
    0000014b: 	movl	%r8d, %r12d
    0000014e: 	xorl	%eax, %eax
.Ltmp1180:
    00000150: 	movq	(%rsi,%rax,8), %rbp
    00000154: 	addq	$0x18, %rdx
    00000158: 	movq	%rbp, -0x18(%rdx)
    0000015c: 	movq	(%r9,%rax,8), %rbp
    00000160: 	addq	$0x1, %rax
    00000164: 	movq	%rbp, -0x10(%rdx)
    00000168: 	cmpq	%r12, %rax
    0000016b: 	jne	.Ltmp1180 # Offset: 363
    0000016d: 	jmp	.Ltmp1176 # Offset: 365
    00000172: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1177:
    00000178: 	movl	%r10d, %r10d
    0000017b: 	leaq	0x8(%rcx,%r10,8), %rsi
.Ltmp1181:
    00000180: 	movq	(%rcx), %rdx
    00000183: 	addq	$0x8, %rcx
    00000187: 	addq	$0x18, %rax
    0000018b: 	movq	%rdx, -0x18(%rax)
    0000018f: 	cmpq	%rcx, %rsi
    00000192: 	jne	.Ltmp1181 # Offset: 402
    00000194: 	popq	%rbx
    00000195: 	popq	%rbp
    00000196: 	popq	%r12
    00000198: 	retq # Offset: 408
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp1173:
    000001a0: 	retq # Offset: 416
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version3ImEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version4ImEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 133
  State       : disassembled
  Address     : 0x1a2a0
  Size        : 0x259
  MaxSize     : 0x260
  Offset      : 0x1a2a0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version4ImEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0132:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r8d, -0xc(%rsp)
    00000013: 	testl	%r8d, %r8d
    00000016: 	jle	.Ltmp1182 # Offset: 22
    0000001c: 	movq	%rsi, %r9
    0000001f: 	movq	%rcx, %r10
    00000022: 	movq	%rdx, %rsi
    00000025: 	movl	%r8d, %r13d
    00000028: 	xorl	%r12d, %r12d
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1190:
    00000030: 	addl	$0xaa, %r12d
    00000037: 	cmpl	-0xc(%rsp), %r12d
    0000003c: 	jg	.Ltmp1183 # Offset: 60
    00000042: 	movl	$0x550, %ebx
    00000047: 	movl	$0xff0, %r14d
    0000004d: 	movl	$0xaa, %ecx
.Ltmp1191:
    00000052: 	movslq	%ecx, %rax
    00000055: 	testl	%ecx, %ecx
    00000057: 	movl	$0x8, %edx
    0000005c: 	movl	$0x10, %r15d
    00000062: 	leaq	(,%rax,8), %rbp
    0000006a: 	leaq	(%rax,%rax,2), %r11
    0000006e: 	cmovgq	%rbp, %rdx
    00000072: 	shlq	$0x3, %r11
    00000076: 	testl	%ecx, %ecx
    00000078: 	leaq	-0x8(%r11), %rax
    0000007c: 	cmovleq	%r15, %rax
    00000080: 	leaq	(%r9,%rdx), %r8
    00000084: 	addq	%rdi, %rax
    00000087: 	cmpq	%r8, %rdi
    0000008a: 	setae	%r15b
    0000008e: 	cmpq	%rax, %r9
    00000091: 	setae	%r8b
    00000095: 	addq	%rsi, %rdx
    00000098: 	orl	%r15d, %r8d
    0000009b: 	cmpq	%rdx, %rdi
    0000009e: 	setae	%dl
    000000a1: 	cmpq	%rax, %rsi
    000000a4: 	setae	%al
    000000a7: 	orl	%edx, %eax
    000000a9: 	testb	%al, %r8b
    000000ac: 	je	.Ltmp1184 # Offset: 172
    000000b2: 	cmpl	$0x9, %ecx
    000000b5: 	jle	.Ltmp1184 # Offset: 181
    000000bb: 	testl	%ecx, %ecx
    000000bd: 	movl	$0x1, %r15d
    000000c3: 	movq	%rdi, %rax
    000000c6: 	cmovgl	%ecx, %r15d
    000000ca: 	xorl	%edx, %edx
    000000cc: 	movl	%r15d, %r8d
    000000cf: 	shrl	%r8d
    000000d2: 	shlq	$0x4, %r8
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1185:
    000000e0: 	movdqu	(%r9,%rdx), %xmm1
    000000e6: 	movdqu	(%rsi,%rdx), %xmm0
    000000eb: 	addq	$0x10, %rdx
    000000ef: 	addq	$0x30, %rax
    000000f3: 	movq	%xmm1, -0x30(%rax)
    000000f8: 	movhps	%xmm1, -0x18(%rax)
    000000fc: 	movq	%xmm0, -0x28(%rax)
    00000101: 	movhps	%xmm0, -0x10(%rax)
    00000105: 	cmpq	%rdx, %r8
    00000108: 	jne	.Ltmp1185 # Offset: 264
    0000010a: 	movl	%r15d, %eax
    0000010d: 	andl	$-0x2, %eax
    00000110: 	andl	$0x1, %r15d
    00000114: 	je	.Ltmp1186 # Offset: 276
    00000116: 	movl	%eax, %edx
    00000118: 	leal	(%rax,%rax,2), %eax
    0000011b: 	movq	(%r9,%rdx,8), %r8
    0000011f: 	cltq
    00000121: 	movq	%r8, (%rdi,%rax,8)
    00000125: 	movq	(%rsi,%rdx,8), %rdx
    00000129: 	movq	%rdx, 0x8(%rdi,%rax,8)
.Ltmp1186:
    0000012e: 	addq	%rdi, %r11
    00000131: 	leaq	0x10(%rdi), %rax
    00000135: 	leal	-0x1(%rcx), %edx
    00000138: 	cmpq	%r11, %r10
    0000013b: 	setae	%r8b
    0000013f: 	addq	%r10, %rbp
    00000142: 	cmpq	%rbp, %rax
    00000145: 	setae	%r11b
    00000149: 	orb	%r8b, %r11b
    0000014c: 	je	.Ltmp1187 # Offset: 332
    00000152: 	cmpl	$0xe, %edx
    00000155: 	jbe	.Ltmp1187 # Offset: 341
    0000015b: 	movl	%ecx, %r8d
    0000015e: 	movq	%r10, %rdx
    00000161: 	shrl	%r8d
    00000164: 	subl	$0x1, %r8d
    00000168: 	shlq	$0x4, %r8
    0000016c: 	leaq	0x10(%r10,%r8), %r8
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp1188:
    00000178: 	movdqu	(%rdx), %xmm0
    0000017c: 	addq	$0x10, %rdx
    00000180: 	addq	$0x30, %rax
    00000184: 	movq	%xmm0, -0x30(%rax)
    00000189: 	movhps	%xmm0, -0x18(%rax)
    0000018d: 	cmpq	%rdx, %r8
    00000190: 	jne	.Ltmp1188 # Offset: 400
    00000192: 	movl	%ecx, %eax
    00000194: 	andl	$-0x2, %eax
    00000197: 	andl	$0x1, %ecx
    0000019a: 	je	.Ltmp1189 # Offset: 410
    0000019c: 	movl	%eax, %edx
    0000019e: 	leal	(%rax,%rax,2), %eax
    000001a1: 	movq	(%r10,%rdx,8), %rdx
    000001a5: 	cltq
    000001a7: 	movq	%rdx, 0x10(%rdi,%rax,8)
.Ltmp1189:
    000001ac: 	addq	%r14, %rdi
    000001af: 	addq	%rbx, %r9
    000001b2: 	addq	%rbx, %rsi
    000001b5: 	addq	%rbx, %r10
    000001b8: 	subl	$0xaa, %r13d
    000001bf: 	cmpl	-0xc(%rsp), %r12d
    000001c4: 	jl	.Ltmp1190 # Offset: 452
.Ltmp1182:
    000001ca: 	popq	%rbx
    000001cb: 	popq	%rbp
    000001cc: 	popq	%r12
    000001ce: 	popq	%r13
    000001d0: 	popq	%r14
    000001d2: 	popq	%r15
    000001d4: 	retq # Offset: 468
    000001d5: 	nopl	(%rax) # Size: 3
.Ltmp1183:
    000001d8: 	leal	(%r13,%r13,2), %r14d
    000001dd: 	movslq	%r13d, %rbx
    000001e0: 	movl	%r13d, %ecx
    000001e3: 	movslq	%r14d, %r14
    000001e6: 	shlq	$0x3, %rbx
    000001ea: 	shlq	$0x3, %r14
    000001ee: 	testl	%r13d, %r13d
    000001f1: 	jg	.Ltmp1191 # Offset: 497
    000001f7: 	jmp	.Ltmp1189 # Offset: 503
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp1187:
    00000200: 	movq	%r10, %rcx
    00000203: 	leaq	0x8(%r10,%rdx,8), %r8
    00000208: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1192:
    00000210: 	movq	(%rcx), %rdx
    00000213: 	addq	$0x8, %rcx
    00000217: 	addq	$0x18, %rax
    0000021b: 	movq	%rdx, -0x18(%rax)
    0000021f: 	cmpq	%r8, %rcx
    00000222: 	jne	.Ltmp1192 # Offset: 546
    00000224: 	jmp	.Ltmp1189 # Offset: 548
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1184:
    00000230: 	movq	%rdi, %rdx
    00000233: 	xorl	%eax, %eax
    00000235: 	nopl	(%rax) # Size: 3
.Ltmp1193:
    00000238: 	movq	(%r9,%rax,8), %r8
    0000023c: 	addq	$0x18, %rdx
    00000240: 	movq	%r8, -0x18(%rdx)
    00000244: 	movq	(%rsi,%rax,8), %r8
    00000248: 	addq	$0x1, %rax
    0000024c: 	movq	%r8, -0x10(%rdx)
    00000250: 	cmpl	%eax, %ecx
    00000252: 	jg	.Ltmp1193 # Offset: 594
    00000254: 	jmp	.Ltmp1186 # Offset: 596
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version4ImEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version5ImEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 134
  State       : disassembled
  Address     : 0x1a500
  Size        : 0x2d1
  MaxSize     : 0x2e0
  Offset      : 0x1a500
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version5ImEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0133:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r8d, -0x10(%rsp)
    00000013: 	testl	%r8d, %r8d
    00000016: 	jle	.Ltmp1194 # Offset: 22
    0000001c: 	movq	%rdx, %r10
    0000001f: 	movq	%rcx, %r9
    00000022: 	movl	%r8d, %r12d
    00000025: 	xorl	%ebp, %ebp
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1205:
    00000030: 	addl	$0xaa, %ebp
    00000036: 	cmpl	-0x10(%rsp), %ebp
    0000003a: 	jg	.Ltmp1195 # Offset: 58
    00000040: 	movq	$0xff0, -0x18(%rsp)
    00000049: 	movl	$0x550, %ebx
    0000004e: 	movl	$0xaa, %ecx
.Ltmp1206:
    00000053: 	movslq	%ecx, %rax
    00000056: 	movl	$0x8, %edx
    0000005b: 	leaq	(%rax,%rax,2), %r8
    0000005f: 	leaq	(,%rax,8), %r11
    00000067: 	shlq	$0x3, %r8
    0000006b: 	testl	%ecx, %ecx
    0000006d: 	leaq	-0x10(%r8), %rax
    00000071: 	cmovleq	%rdx, %rax
    00000075: 	addq	%rdi, %rax
    00000078: 	cmpq	%rax, %rsi
    0000007b: 	movl	$0x8, %eax
    00000080: 	setae	%dl
    00000083: 	testl	%ecx, %ecx
    00000085: 	cmovgq	%r11, %rax
    00000089: 	addq	%rsi, %rax
    0000008c: 	cmpq	%rax, %rdi
    0000008f: 	setae	%al
    00000092: 	orb	%dl, %al
    00000094: 	je	.Ltmp1196 # Offset: 148
    0000009a: 	cmpl	$0xf, %ecx
    0000009d: 	jle	.Ltmp1196 # Offset: 157
    000000a3: 	testl	%ecx, %ecx
    000000a5: 	movl	$0x1, %r14d
    000000ab: 	movq	%rsi, %rdx
    000000ae: 	movq	%rdi, %rax
    000000b1: 	cmovgl	%ecx, %r14d
    000000b5: 	movl	%r14d, %r13d
    000000b8: 	shrl	%r13d
    000000bb: 	subl	$0x1, %r13d
    000000bf: 	shlq	$0x4, %r13
    000000c3: 	leaq	0x10(%rsi,%r13), %r13
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1197:
    000000d0: 	movdqu	(%rdx), %xmm0
    000000d4: 	addq	$0x10, %rdx
    000000d8: 	addq	$0x30, %rax
    000000dc: 	movq	%xmm0, -0x30(%rax)
    000000e1: 	movhps	%xmm0, -0x18(%rax)
    000000e5: 	cmpq	%r13, %rdx
    000000e8: 	jne	.Ltmp1197 # Offset: 232
    000000ea: 	movl	%r14d, %eax
    000000ed: 	andl	$-0x2, %eax
    000000f0: 	andl	$0x1, %r14d
    000000f4: 	je	.Ltmp1198 # Offset: 244
    000000f6: 	movl	%eax, %edx
    000000f8: 	leal	(%rax,%rax,2), %eax
    000000fb: 	movq	(%rsi,%rdx,8), %rdx
    000000ff: 	cltq
    00000101: 	movq	%rdx, (%rdi,%rax,8)
.Ltmp1198:
    00000105: 	leal	-0x1(%rcx), %r14d
    00000109: 	leaq	-0x8(%rdi,%r8), %rdx
    0000010e: 	cmpl	$0xe, %r14d
    00000112: 	leaq	0x8(%rdi), %rax
    00000116: 	seta	%r13b
    0000011a: 	cmpq	%rdx, %r10
    0000011d: 	leaq	(%r10,%r11), %rdx
    00000121: 	setae	%r15b
    00000125: 	cmpq	%rdx, %rax
    00000128: 	setae	%dl
    0000012b: 	orb	%r15b, %dl
    0000012e: 	movq	%r10, %rdx
    00000131: 	je	.Ltmp1199 # Offset: 305
    00000137: 	testb	%r13b, %r13b
    0000013a: 	je	.Ltmp1199 # Offset: 314
    00000140: 	movl	%ecx, %r15d
    00000143: 	shrl	%r15d
    00000146: 	subl	$0x1, %r15d
    0000014a: 	shlq	$0x4, %r15
    0000014e: 	leaq	0x10(%r10,%r15), %r15
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1200:
    00000158: 	movdqu	(%rdx), %xmm0
    0000015c: 	addq	$0x10, %rdx
    00000160: 	addq	$0x30, %rax
    00000164: 	movq	%xmm0, -0x30(%rax)
    00000169: 	movhps	%xmm0, -0x18(%rax)
    0000016d: 	cmpq	%r15, %rdx
    00000170: 	jne	.Ltmp1200 # Offset: 368
    00000172: 	movl	%ecx, %eax
    00000174: 	andl	$-0x2, %eax
    00000177: 	testb	$0x1, %cl
    0000017a: 	je	.Ltmp1201 # Offset: 378
    0000017c: 	movl	%eax, %edx
    0000017e: 	leal	0x1(%rax,%rax,2), %eax
    00000182: 	movq	(%r10,%rdx,8), %rdx
    00000186: 	cltq
    00000188: 	movq	%rdx, (%rdi,%rax,8)
.Ltmp1201:
    0000018c: 	addq	%rdi, %r8
    0000018f: 	leaq	0x10(%rdi), %rdx
    00000193: 	cmpq	%r8, %r9
    00000196: 	setae	%al
    00000199: 	addq	%r9, %r11
    0000019c: 	cmpq	%r11, %rdx
    0000019f: 	setae	%r8b
    000001a3: 	orb	%al, %r8b
    000001a6: 	movq	%r9, %rax
    000001a9: 	je	.Ltmp1202 # Offset: 425
    000001af: 	testb	%r13b, %r13b
    000001b2: 	je	.Ltmp1202 # Offset: 434
    000001b8: 	movl	%ecx, %r8d
    000001bb: 	shrl	%r8d
    000001be: 	subl	$0x1, %r8d
    000001c2: 	shlq	$0x4, %r8
    000001c6: 	leaq	0x10(%r9,%r8), %r8
    000001cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1203:
    000001d0: 	movdqu	(%rax), %xmm0
    000001d4: 	addq	$0x10, %rax
    000001d8: 	addq	$0x30, %rdx
    000001dc: 	movq	%xmm0, -0x30(%rdx)
    000001e1: 	movhps	%xmm0, -0x18(%rdx)
    000001e5: 	cmpq	%rax, %r8
    000001e8: 	jne	.Ltmp1203 # Offset: 488
    000001ea: 	movl	%ecx, %eax
    000001ec: 	andl	$-0x2, %eax
    000001ef: 	andl	$0x1, %ecx
    000001f2: 	je	.Ltmp1204 # Offset: 498
    000001f4: 	movl	%eax, %edx
    000001f6: 	leal	(%rax,%rax,2), %eax
    000001f9: 	movq	(%r9,%rdx,8), %rdx
    000001fd: 	cltq
    000001ff: 	movq	%rdx, 0x10(%rdi,%rax,8)
.Ltmp1204:
    00000204: 	addq	-0x18(%rsp), %rdi
    00000209: 	addq	%rbx, %rsi
    0000020c: 	addq	%rbx, %r10
    0000020f: 	addq	%rbx, %r9
    00000212: 	subl	$0xaa, %r12d
    00000219: 	cmpl	-0x10(%rsp), %ebp
    0000021d: 	jl	.Ltmp1205 # Offset: 541
.Ltmp1194:
    00000223: 	popq	%rbx
    00000224: 	popq	%rbp
    00000225: 	popq	%r12
    00000227: 	popq	%r13
    00000229: 	popq	%r14
    0000022b: 	popq	%r15
    0000022d: 	retq # Offset: 557
    0000022e: 	nop # Size: 2
.Ltmp1195:
    00000230: 	leal	(%r12,%r12,2), %eax
    00000234: 	movslq	%r12d, %rbx
    00000237: 	movl	%r12d, %ecx
    0000023a: 	cltq
    0000023c: 	shlq	$0x3, %rbx
    00000240: 	shlq	$0x3, %rax
    00000244: 	movq	%rax, -0x18(%rsp)
    00000249: 	testl	%r12d, %r12d
    0000024c: 	jg	.Ltmp1206 # Offset: 588
    00000252: 	jmp	.Ltmp1204 # Offset: 594
    00000254: 	nopl	(%rax) # Size: 4
.Ltmp1202:
    00000258: 	movl	%r14d, %r14d
    0000025b: 	leaq	0x8(%r9,%r14,8), %r8
.Ltmp1207:
    00000260: 	movq	(%rax), %rcx
    00000263: 	addq	$0x8, %rax
    00000267: 	addq	$0x18, %rdx
    0000026b: 	movq	%rcx, -0x18(%rdx)
    0000026f: 	cmpq	%rax, %r8
    00000272: 	jne	.Ltmp1207 # Offset: 626
    00000274: 	jmp	.Ltmp1204 # Offset: 628
    00000276: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1199:
    00000280: 	movl	%ecx, -0xc(%rsp)
    00000284: 	movl	%r14d, %r15d
    00000287: 	leaq	0x8(%r10,%r15,8), %r15
    0000028c: 	nopl	(%rax) # Size: 4
.Ltmp1208:
    00000290: 	movq	(%rdx), %rcx
    00000293: 	addq	$0x8, %rdx
    00000297: 	addq	$0x18, %rax
    0000029b: 	movq	%rcx, -0x18(%rax)
    0000029f: 	cmpq	%r15, %rdx
    000002a2: 	jne	.Ltmp1208 # Offset: 674
    000002a4: 	movl	-0xc(%rsp), %ecx
    000002a8: 	jmp	.Ltmp1201 # Offset: 680
    000002ad: 	nopl	(%rax) # Size: 3
.Ltmp1196:
    000002b0: 	movq	%rdi, %rdx
    000002b3: 	xorl	%eax, %eax
    000002b5: 	nopl	(%rax) # Size: 3
.Ltmp1209:
    000002b8: 	movq	(%rsi,%rax,8), %r13
    000002bc: 	addq	$0x1, %rax
    000002c0: 	addq	$0x18, %rdx
    000002c4: 	movq	%r13, -0x18(%rdx)
    000002c8: 	cmpl	%eax, %ecx
    000002ca: 	jg	.Ltmp1209 # Offset: 714
    000002cc: 	jmp	.Ltmp1198 # Offset: 716
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version5ImEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version1ImEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 135
  State       : disassembled
  Address     : 0x1a7e0
  Size        : 0x181
  MaxSize     : 0x190
  Offset      : 0x1a7e0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version1ImEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0134:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp1210 # Offset: 7
    0000000d: 	movq	%rdi, %rax
    00000010: 	movq	%rdx, %rdi
    00000013: 	movslq	%r9d, %rdx
    00000016: 	movq	%rcx, %r10
    00000019: 	movq	%rdx, %r11
    0000001c: 	shlq	$0x3, %rdx
    00000020: 	movq	%rsi, %xmm4
    00000025: 	pushq	%rbx
    00000026: 	shlq	$0x5, %r11
    0000002a: 	leaq	(%rdi,%rdx), %rcx
    0000002e: 	addq	%rax, %r11
    00000031: 	cmpq	%rcx, %rax
    00000034: 	setae	%cl
    00000037: 	cmpq	%r11, %rdi
    0000003a: 	setae	%sil
    0000003e: 	orl	%esi, %ecx
    00000040: 	leaq	(%r10,%rdx), %rsi
    00000044: 	cmpq	%rsi, %rax
    00000047: 	setae	%sil
    0000004b: 	cmpq	%r11, %r10
    0000004e: 	setae	%bl
    00000051: 	orl	%ebx, %esi
    00000053: 	andl	%esi, %ecx
    00000055: 	leal	-0x1(%r9), %esi
    00000059: 	cmpl	$0x1, %esi
    0000005c: 	seta	%sil
    00000060: 	testb	%sil, %cl
    00000063: 	je	.Ltmp1211 # Offset: 99
    00000069: 	addq	%r8, %rdx
    0000006c: 	cmpq	%rdx, %rax
    0000006f: 	setae	%dl
    00000072: 	cmpq	%r11, %r8
    00000075: 	setae	%cl
    00000078: 	orb	%cl, %dl
    0000007a: 	je	.Ltmp1211 # Offset: 122
    00000080: 	movl	%r9d, %ecx
    00000083: 	movdqa	%xmm4, %xmm6
    00000087: 	xorl	%edx, %edx
    00000089: 	shrl	%ecx
    0000008b: 	punpcklqdq	%xmm6, %xmm6
    0000008f: 	shlq	$0x4, %rcx
    00000093: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1212:
    00000098: 	movdqu	(%r10,%rdx), %xmm7
    0000009e: 	movdqu	(%rdi,%rdx), %xmm0
    000000a3: 	movdqa	%xmm6, %xmm2
    000000a7: 	movdqa	%xmm4, %xmm1
    000000ab: 	punpcklqdq	%xmm7, %xmm2
    000000af: 	movhlps	%xmm7, %xmm3
    000000b2: 	movdqu	(%r8,%rdx), %xmm7
    000000b8: 	punpcklqdq	%xmm3, %xmm1
    000000bc: 	movdqa	%xmm0, %xmm3
    000000c0: 	movdqa	%xmm2, %xmm5
    000000c4: 	punpcklqdq	%xmm7, %xmm3
    000000c8: 	punpckhqdq	%xmm7, %xmm0
    000000cc: 	punpckhqdq	%xmm3, %xmm2
    000000d0: 	punpcklqdq	%xmm3, %xmm5
    000000d4: 	movups	%xmm2, 0x10(%rax,%rdx,4)
    000000d9: 	movdqa	%xmm1, %xmm2
    000000dd: 	punpckhqdq	%xmm0, %xmm1
    000000e1: 	punpcklqdq	%xmm0, %xmm2
    000000e5: 	movups	%xmm5, (%rax,%rdx,4)
    000000e9: 	movups	%xmm2, 0x20(%rax,%rdx,4)
    000000ee: 	movups	%xmm1, 0x30(%rax,%rdx,4)
    000000f3: 	addq	$0x10, %rdx
    000000f7: 	cmpq	%rdx, %rcx
    000000fa: 	jne	.Ltmp1212 # Offset: 250
    000000fc: 	movl	%r9d, %ecx
    000000ff: 	andl	$-0x2, %ecx
    00000102: 	andl	$0x1, %r9d
    00000106: 	je	.Ltmp1213 # Offset: 262
    00000108: 	leal	(,%rcx,4), %edx
    0000010f: 	movslq	%edx, %rdx
    00000112: 	movq	%xmm4, (%rax,%rdx,8)
    00000117: 	movq	(%rdi,%rcx,8), %rdi
    0000011b: 	addq	$0x1, %rdx
    0000011f: 	leaq	(,%rdx,8), %rsi
    00000127: 	movq	%rdi, (%rax,%rdx,8)
    0000012b: 	movq	(%r10,%rcx,8), %rdx
    0000012f: 	movq	%rdx, 0x8(%rax,%rsi)
    00000134: 	movq	(%r8,%rcx,8), %rdx
    00000138: 	movq	%rdx, 0x10(%rax,%rsi)
.Ltmp1213:
    0000013d: 	popq	%rbx
    0000013e: 	retq # Offset: 318
    0000013f: 	nop # Size: 1
.Ltmp1211:
    00000140: 	movl	%r9d, %r9d
    00000143: 	xorl	%edx, %edx
    00000145: 	shlq	$0x3, %r9
    00000149: 	nopl	(%rax) # Size: 7
.Ltmp1214:
    00000150: 	movq	%xmm4, (%rax,%rdx,4)
    00000155: 	movq	(%rdi,%rdx), %rcx
    00000159: 	movq	%rcx, 0x8(%rax,%rdx,4)
    0000015e: 	movq	(%r10,%rdx), %rcx
    00000162: 	movq	%rcx, 0x10(%rax,%rdx,4)
    00000167: 	movq	(%r8,%rdx), %rcx
    0000016b: 	movq	%rcx, 0x18(%rax,%rdx,4)
    00000170: 	addq	$0x8, %rdx
    00000174: 	cmpq	%r9, %rdx
    00000177: 	jne	.Ltmp1214 # Offset: 375
    00000179: 	popq	%rbx
    0000017a: 	retq # Offset: 378
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1210:
    00000180: 	retq # Offset: 384
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version1ImEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version2ImEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 136
  State       : disassembled
  Address     : 0x1a970
  Size        : 0x241
  MaxSize     : 0x250
  Offset      : 0x1a970
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version2ImEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0135:
    00000000: 	endbr64
    00000004: 	movslq	%r9d, %r9
    00000007: 	testq	%r9, %r9
    0000000a: 	je	.Ltmp1215 # Offset: 10
    00000010: 	pushq	%r13
    00000012: 	movq	%rdx, %r10
    00000015: 	movq	%rcx, %r11
    00000018: 	movq	%rdi, %rdx
    0000001b: 	pushq	%r12
    0000001d: 	xorl	%eax, %eax
    0000001f: 	pushq	%rbp
    00000020: 	pushq	%rbx
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp1216:
    00000028: 	movq	%rax, %rcx
    0000002b: 	addq	$0x1, %rax
    0000002f: 	movq	%rsi, (%rdx)
    00000032: 	addq	$0x20, %rdx
    00000036: 	cmpq	%rax, %r9
    00000039: 	jne	.Ltmp1216 # Offset: 57
    0000003b: 	cmpq	$0xe, %rcx
    0000003f: 	movq	%rcx, %r12
    00000042: 	leaq	(,%rax,8), %rbp
    0000004a: 	seta	%r9b
    0000004e: 	shlq	$0x5, %r12
    00000052: 	leaq	(%r10,%rbp), %rsi
    00000056: 	leaq	0x8(%rdi), %rbx
    0000005a: 	leaq	0x10(%rdi,%r12), %rdx
    0000005f: 	cmpq	%rdx, %r10
    00000062: 	setae	%dl
    00000065: 	cmpq	%rsi, %rbx
    00000068: 	setae	%sil
    0000006c: 	orb	%sil, %dl
    0000006f: 	je	.Ltmp1217 # Offset: 111
    00000075: 	movq	%rax, %r13
    00000078: 	xorl	%edx, %edx
    0000007a: 	xorl	%esi, %esi
    0000007c: 	shrq	%r13
    0000007f: 	testb	%r9b, %r9b
    00000082: 	je	.Ltmp1217 # Offset: 130
    00000088: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1218:
    00000090: 	movdqu	(%r10,%rdx), %xmm0
    00000096: 	addq	$0x1, %rsi
    0000009a: 	movq	%xmm0, 0x8(%rdi,%rdx,4)
    000000a0: 	movhps	%xmm0, 0x28(%rdi,%rdx,4)
    000000a5: 	addq	$0x10, %rdx
    000000a9: 	cmpq	%rsi, %r13
    000000ac: 	jne	.Ltmp1218 # Offset: 172
    000000ae: 	movq	%rax, %r13
    000000b1: 	andq	$-0x2, %r13
    000000b5: 	movq	%r13, %rsi
    000000b8: 	leaq	(%r10,%r13,8), %rdx
    000000bc: 	shlq	$0x5, %rsi
    000000c0: 	addq	%rbx, %rsi
    000000c3: 	cmpq	%r13, %rax
    000000c6: 	je	.Ltmp1219 # Offset: 198
    000000c8: 	movq	(%rdx), %rdx
    000000cb: 	movq	%rdx, (%rsi)
.Ltmp1219:
    000000ce: 	leaq	0x18(%rdi,%r12), %rdx
    000000d3: 	leaq	(%r11,%rbp), %rsi
    000000d7: 	cmpq	%rdx, %r11
    000000da: 	leaq	0x10(%rdi), %r10
    000000de: 	setae	%dl
    000000e1: 	cmpq	%rsi, %r10
    000000e4: 	setae	%sil
    000000e8: 	orb	%sil, %dl
    000000eb: 	je	.Ltmp1220 # Offset: 235
    000000f1: 	movq	%rax, %rbx
    000000f4: 	xorl	%edx, %edx
    000000f6: 	xorl	%esi, %esi
    000000f8: 	shrq	%rbx
    000000fb: 	testb	%r9b, %r9b
    000000fe: 	je	.Ltmp1220 # Offset: 254
    00000104: 	nopl	(%rax) # Size: 4
.Ltmp1221:
    00000108: 	movdqu	(%r11,%rdx), %xmm0
    0000010e: 	addq	$0x1, %rsi
    00000112: 	movq	%xmm0, 0x10(%rdi,%rdx,4)
    00000118: 	movhps	%xmm0, 0x30(%rdi,%rdx,4)
    0000011d: 	addq	$0x10, %rdx
    00000121: 	cmpq	%rsi, %rbx
    00000124: 	jne	.Ltmp1221 # Offset: 292
    00000126: 	movq	%rax, %rbx
    00000129: 	andq	$-0x2, %rbx
    0000012d: 	movq	%rbx, %rsi
    00000130: 	leaq	(%r11,%rbx,8), %rdx
    00000134: 	shlq	$0x5, %rsi
    00000138: 	addq	%r10, %rsi
    0000013b: 	cmpq	%rbx, %rax
    0000013e: 	je	.Ltmp1222 # Offset: 318
    00000140: 	movq	(%rdx), %rdx
    00000143: 	movq	%rdx, (%rsi)
.Ltmp1222:
    00000146: 	movq	%rax, %rdx
    00000149: 	leaq	0x18(%rdi), %r10
    0000014d: 	shlq	$0x5, %rdx
    00000151: 	addq	%rdi, %rdx
    00000154: 	cmpq	%rdx, %r8
    00000157: 	setae	%dl
    0000015a: 	addq	%r8, %rbp
    0000015d: 	cmpq	%rbp, %r10
    00000160: 	setae	%sil
    00000164: 	orb	%sil, %dl
    00000167: 	je	.Ltmp1223 # Offset: 359
    0000016d: 	movq	%rax, %r11
    00000170: 	xorl	%edx, %edx
    00000172: 	xorl	%esi, %esi
    00000174: 	shrq	%r11
    00000177: 	testb	%r9b, %r9b
    0000017a: 	je	.Ltmp1223 # Offset: 378
.Ltmp1224:
    00000180: 	movdqu	(%r8,%rdx), %xmm0
    00000186: 	addq	$0x1, %rsi
    0000018a: 	movq	%xmm0, 0x18(%rdi,%rdx,4)
    00000190: 	movhps	%xmm0, 0x38(%rdi,%rdx,4)
    00000195: 	addq	$0x10, %rdx
    00000199: 	cmpq	%rsi, %r11
    0000019c: 	jne	.Ltmp1224 # Offset: 412
    0000019e: 	movq	%rax, %rsi
    000001a1: 	andq	$-0x2, %rsi
    000001a5: 	movq	%rsi, %rdx
    000001a8: 	leaq	(%r8,%rsi,8), %rcx
    000001ac: 	shlq	$0x5, %rdx
    000001b0: 	addq	%r10, %rdx
    000001b3: 	cmpq	%rsi, %rax
    000001b6: 	je	.Ltmp1225 # Offset: 438
    000001b8: 	movq	(%rcx), %rax
    000001bb: 	movq	%rax, (%rdx)
.Ltmp1225:
    000001be: 	popq	%rbx
    000001bf: 	popq	%rbp
    000001c0: 	popq	%r12
    000001c2: 	popq	%r13
    000001c4: 	retq # Offset: 452
    000001c5: 	nopl	(%rax) # Size: 3
.Ltmp1217:
    000001c8: 	xorl	%edx, %edx
    000001ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1226:
    000001d0: 	movq	(%r10,%rdx,8), %rsi
    000001d4: 	addq	$0x20, %rbx
    000001d8: 	movq	%rsi, -0x20(%rbx)
    000001dc: 	movq	%rdx, %rsi
    000001df: 	addq	$0x1, %rdx
    000001e3: 	cmpq	%rsi, %rcx
    000001e6: 	jne	.Ltmp1226 # Offset: 486
    000001e8: 	jmp	.Ltmp1219 # Offset: 488
    000001ed: 	nopl	(%rax) # Size: 3
.Ltmp1220:
    000001f0: 	xorl	%edx, %edx
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1227:
    000001f8: 	movq	(%r11,%rdx,8), %rsi
    000001fc: 	addq	$0x20, %r10
    00000200: 	movq	%rsi, -0x20(%r10)
    00000204: 	movq	%rdx, %rsi
    00000207: 	addq	$0x1, %rdx
    0000020b: 	cmpq	%rsi, %rcx
    0000020e: 	jne	.Ltmp1227 # Offset: 526
    00000210: 	jmp	.Ltmp1222 # Offset: 528
    00000215: 	nopl	(%rax) # Size: 3
.Ltmp1223:
    00000218: 	xorl	%eax, %eax
    0000021a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1228:
    00000220: 	movq	(%r8,%rax,8), %rdx
    00000224: 	addq	$0x20, %r10
    00000228: 	movq	%rdx, -0x20(%r10)
    0000022c: 	movq	%rax, %rdx
    0000022f: 	addq	$0x1, %rax
    00000233: 	cmpq	%rcx, %rdx
    00000236: 	jne	.Ltmp1228 # Offset: 566
    00000238: 	popq	%rbx
    00000239: 	popq	%rbp
    0000023a: 	popq	%r12
    0000023c: 	popq	%r13
    0000023e: 	retq # Offset: 574
    0000023f: 	nop # Size: 1
.Ltmp1215:
    00000240: 	retq # Offset: 576
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version2ImEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version3ImEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 137
  State       : disassembled
  Address     : 0x1abc0
  Size        : 0x129
  MaxSize     : 0x130
  Offset      : 0x1abc0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version3ImEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0136:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp1229 # Offset: 7
    0000000d: 	movq	%rsi, %r10
    00000010: 	movq	%rcx, %rsi
    00000013: 	leal	-0x1(%r9), %ecx
    00000017: 	pushq	%rbx
    00000018: 	movq	%rcx, %rbx
    0000001b: 	shlq	$0x5, %rcx
    0000001f: 	movq	%rdi, %rax
    00000022: 	leaq	0x20(%rdi,%rcx), %r11
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1230:
    00000030: 	movq	%r10, (%rax)
    00000033: 	movq	(%rdx), %rcx
    00000036: 	addq	$0x20, %rax
    0000003a: 	addq	$0x8, %rdx
    0000003e: 	movq	%rcx, -0x18(%rax)
    00000042: 	cmpq	%rax, %r11
    00000045: 	jne	.Ltmp1230 # Offset: 69
    00000047: 	movslq	%r9d, %rax
    0000004a: 	leaq	0x10(%rdi), %r10
    0000004e: 	leaq	(,%rax,8), %rdx
    00000056: 	shlq	$0x5, %rax
    0000005a: 	leaq	(%rsi,%rdx), %rcx
    0000005e: 	addq	%rdi, %rax
    00000061: 	cmpq	%rcx, %r10
    00000064: 	setae	%cl
    00000067: 	cmpq	%rax, %rsi
    0000006a: 	setae	%r11b
    0000006e: 	addq	%r8, %rdx
    00000071: 	orl	%r11d, %ecx
    00000074: 	cmpq	%rdx, %r10
    00000077: 	setae	%dl
    0000007a: 	cmpq	%rax, %r8
    0000007d: 	setae	%al
    00000080: 	orl	%edx, %eax
    00000082: 	testb	%al, %cl
    00000084: 	je	.Ltmp1231 # Offset: 132
    00000086: 	cmpl	$0x8, %ebx
    00000089: 	jbe	.Ltmp1231 # Offset: 137
    0000008b: 	movl	%r9d, %edx
    0000008e: 	xorl	%eax, %eax
    00000090: 	shrl	%edx
    00000092: 	shlq	$0x4, %rdx
    00000096: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1232:
    000000a0: 	movdqu	(%rsi,%rax), %xmm1
    000000a5: 	movdqu	(%r8,%rax), %xmm0
    000000ab: 	movq	%xmm1, 0x10(%rdi,%rax,4)
    000000b1: 	movhps	%xmm1, 0x30(%rdi,%rax,4)
    000000b6: 	movq	%xmm0, 0x18(%rdi,%rax,4)
    000000bc: 	movhps	%xmm0, 0x38(%rdi,%rax,4)
    000000c1: 	addq	$0x10, %rax
    000000c5: 	cmpq	%rdx, %rax
    000000c8: 	jne	.Ltmp1232 # Offset: 200
    000000ca: 	movl	%r9d, %eax
    000000cd: 	andl	$-0x2, %eax
    000000d0: 	andl	$0x1, %r9d
    000000d4: 	je	.Ltmp1233 # Offset: 212
    000000d6: 	movl	%eax, %edx
    000000d8: 	leal	0x2(,%rax,4), %eax
    000000df: 	movq	(%rsi,%rdx,8), %rcx
    000000e3: 	cltq
    000000e5: 	movq	%rcx, (%rdi,%rax,8)
    000000e9: 	movq	(%r8,%rdx,8), %rdx
    000000ed: 	movq	%rdx, 0x8(%rdi,%rax,8)
.Ltmp1233:
    000000f2: 	popq	%rbx
    000000f3: 	retq # Offset: 243
    000000f4: 	nopl	(%rax) # Size: 4
.Ltmp1231:
    000000f8: 	movl	%r9d, %r9d
    000000fb: 	xorl	%eax, %eax
    000000fd: 	shlq	$0x3, %r9
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp1234:
    00000108: 	movq	(%rsi,%rax), %rdx
    0000010c: 	movq	%rdx, 0x10(%rdi,%rax,4)
    00000111: 	movq	(%r8,%rax), %rdx
    00000115: 	movq	%rdx, 0x18(%rdi,%rax,4)
    0000011a: 	addq	$0x8, %rax
    0000011e: 	cmpq	%rax, %r9
    00000121: 	jne	.Ltmp1234 # Offset: 289
    00000123: 	popq	%rbx
    00000124: 	retq # Offset: 292
    00000125: 	nopl	(%rax) # Size: 3
.Ltmp1229:
    00000128: 	retq # Offset: 296
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version3ImEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version4ImEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 138
  State       : disassembled
  Address     : 0x1acf0
  Size        : 0x31a
  MaxSize     : 0x320
  Offset      : 0x1acf0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version4ImEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0137:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r9d, -0x10(%rsp)
    00000013: 	movl	%r9d, -0xc(%rsp)
    00000018: 	testl	%r9d, %r9d
    0000001b: 	jle	.Ltmp1235 # Offset: 27
    00000021: 	movq	%rdi, %rax
    00000024: 	movq	%rsi, %r13
    00000027: 	movq	%rdx, %rdi
    0000002a: 	movq	%rcx, %r10
    0000002d: 	xorl	%r12d, %r12d
.Ltmp1247:
    00000030: 	subl	$-0x80, %r12d
    00000034: 	cmpl	-0x10(%rsp), %r12d
    00000039: 	jg	.Ltmp1236 # Offset: 57
    0000003f: 	movq	$0x1000, -0x18(%rsp)
    00000048: 	movl	$0x400, %ebp
    0000004d: 	movl	$0x80, %edx
.Ltmp1248:
    00000052: 	movq	%rax, %rsi
    00000055: 	xorl	%ecx, %ecx
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1237:
    00000060: 	addq	$0x1, %rcx
    00000064: 	movq	%r13, (%rsi)
    00000067: 	addq	$0x20, %rsi
    0000006b: 	cmpq	%rcx, %rdx
    0000006e: 	ja	.Ltmp1237 # Offset: 110
    00000070: 	cmpq	$0xf, %rdx
    00000074: 	movl	$0x8, %esi
    00000079: 	leaq	(,%rdx,8), %rbx
    00000081: 	seta	-0x19(%rsp)
    00000086: 	leaq	-0x1(%rdx), %r9
    0000008a: 	leaq	0x8(%rax), %r11
    0000008e: 	testq	%rdx, %rdx
    00000091: 	cmoveq	%rsi, %rbx
    00000095: 	shlq	$0x5, %r9
    00000099: 	movl	$0x10, %esi
    0000009e: 	testq	%rdx, %rdx
    000000a1: 	leaq	0x10(%r9), %rcx
    000000a5: 	movzbl	-0x19(%rsp), %r15d
    000000ab: 	cmoveq	%rsi, %rcx
    000000af: 	addq	%rax, %rcx
    000000b2: 	cmpq	%rcx, %rdi
    000000b5: 	leaq	(%rdi,%rbx), %rcx
    000000b9: 	setae	%sil
    000000bd: 	cmpq	%rcx, %r11
    000000c0: 	setae	%cl
    000000c3: 	orb	%sil, %cl
    000000c6: 	je	.Ltmp1238 # Offset: 198
    000000cc: 	testb	%r15b, %r15b
    000000cf: 	je	.Ltmp1238 # Offset: 207
    000000d5: 	testq	%rdx, %rdx
    000000d8: 	movl	$0x1, %r14d
    000000de: 	cmovneq	%rdx, %r14
    000000e2: 	xorl	%ecx, %ecx
    000000e4: 	xorl	%esi, %esi
    000000e6: 	movq	%r14, %r15
    000000e9: 	shrq	%r15
    000000ec: 	nopl	(%rax) # Size: 4
.Ltmp1239:
    000000f0: 	movdqu	(%rdi,%rcx), %xmm0
    000000f5: 	addq	$0x1, %rsi
    000000f9: 	movq	%xmm0, 0x8(%rax,%rcx,4)
    000000ff: 	movhps	%xmm0, 0x28(%rax,%rcx,4)
    00000104: 	addq	$0x10, %rcx
    00000108: 	cmpq	%rsi, %r15
    0000010b: 	jne	.Ltmp1239 # Offset: 267
    0000010d: 	movq	%r14, %r15
    00000110: 	andq	$-0x2, %r15
    00000114: 	movq	%r15, %rcx
    00000117: 	leaq	(%rdi,%r15,8), %rsi
    0000011b: 	shlq	$0x5, %rcx
    0000011f: 	addq	%r11, %rcx
    00000122: 	cmpq	%r15, %r14
    00000125: 	je	.Ltmp1240 # Offset: 293
    00000127: 	movq	(%rsi), %rsi
    0000012a: 	movq	%rsi, (%rcx)
.Ltmp1240:
    0000012d: 	addq	$0x18, %r9
    00000131: 	movl	$0x18, %esi
    00000136: 	leaq	(%r10,%rbx), %rcx
    0000013a: 	testq	%rdx, %rdx
    0000013d: 	cmoveq	%rsi, %r9
    00000141: 	leaq	0x10(%rax), %r11
    00000145: 	addq	%rax, %r9
    00000148: 	cmpq	%r9, %r10
    0000014b: 	setae	%sil
    0000014f: 	cmpq	%rcx, %r11
    00000152: 	setae	%cl
    00000155: 	orb	%sil, %cl
    00000158: 	je	.Ltmp1241 # Offset: 344
    0000015e: 	cmpb	$0x0, -0x19(%rsp)
    00000163: 	je	.Ltmp1241 # Offset: 355
    00000169: 	testq	%rdx, %rdx
    0000016c: 	movl	$0x1, %r9d
    00000172: 	cmovneq	%rdx, %r9
    00000176: 	xorl	%ecx, %ecx
    00000178: 	xorl	%esi, %esi
    0000017a: 	movq	%r9, %r14
    0000017d: 	shrq	%r14
.Ltmp1242:
    00000180: 	movdqu	(%r10,%rcx), %xmm0
    00000186: 	addq	$0x1, %rsi
    0000018a: 	movq	%xmm0, 0x10(%rax,%rcx,4)
    00000190: 	movhps	%xmm0, 0x30(%rax,%rcx,4)
    00000195: 	addq	$0x10, %rcx
    00000199: 	cmpq	%rsi, %r14
    0000019c: 	jne	.Ltmp1242 # Offset: 412
    0000019e: 	movq	%r9, %r14
    000001a1: 	andq	$-0x2, %r14
    000001a5: 	movq	%r14, %rcx
    000001a8: 	leaq	(%r10,%r14,8), %rsi
    000001ac: 	shlq	$0x5, %rcx
    000001b0: 	addq	%r11, %rcx
    000001b3: 	cmpq	%r14, %r9
    000001b6: 	je	.Ltmp1243 # Offset: 438
    000001b8: 	movq	(%rsi), %rsi
    000001bb: 	movq	%rsi, (%rcx)
.Ltmp1243:
    000001be: 	movq	%rdx, %rcx
    000001c1: 	movl	$0x20, %r15d
    000001c7: 	leaq	0x18(%rax), %rsi
    000001cb: 	shlq	$0x5, %rcx
    000001cf: 	testq	%rdx, %rdx
    000001d2: 	cmoveq	%r15, %rcx
    000001d6: 	addq	%rax, %rcx
    000001d9: 	cmpq	%rcx, %r8
    000001dc: 	setae	%cl
    000001df: 	addq	%r8, %rbx
    000001e2: 	cmpq	%rbx, %rsi
    000001e5: 	setae	%r9b
    000001e9: 	orb	%cl, %r9b
    000001ec: 	je	.Ltmp1244 # Offset: 492
    000001f2: 	cmpb	$0x0, -0x19(%rsp)
    000001f7: 	je	.Ltmp1244 # Offset: 503
    000001fd: 	testq	%rdx, %rdx
    00000200: 	movl	$0x1, %ebx
    00000205: 	cmoveq	%rbx, %rdx
    00000209: 	xorl	%ecx, %ecx
    0000020b: 	xorl	%r9d, %r9d
    0000020e: 	movq	%rdx, %r11
    00000211: 	shrq	%r11
    00000214: 	nopl	(%rax) # Size: 4
.Ltmp1245:
    00000218: 	movdqu	(%r8,%rcx), %xmm0
    0000021e: 	addq	$0x1, %r9
    00000222: 	movq	%xmm0, 0x18(%rax,%rcx,4)
    00000228: 	movhps	%xmm0, 0x38(%rax,%rcx,4)
    0000022d: 	addq	$0x10, %rcx
    00000231: 	cmpq	%r9, %r11
    00000234: 	jne	.Ltmp1245 # Offset: 564
    00000236: 	movq	%rdx, %r11
    00000239: 	andq	$-0x2, %r11
    0000023d: 	movq	%r11, %rcx
    00000240: 	leaq	(%r8,%r11,8), %r9
    00000244: 	shlq	$0x5, %rcx
    00000248: 	addq	%rsi, %rcx
    0000024b: 	cmpq	%r11, %rdx
    0000024e: 	je	.Ltmp1246 # Offset: 590
    00000250: 	movq	(%r9), %rdx
    00000253: 	movq	%rdx, (%rcx)
.Ltmp1246:
    00000256: 	addl	$-0x80, -0xc(%rsp)
    0000025b: 	addq	-0x18(%rsp), %rax
    00000260: 	addq	%rbp, %rdi
    00000263: 	addq	%rbp, %r10
    00000266: 	addq	%rbp, %r8
    00000269: 	cmpl	-0x10(%rsp), %r12d
    0000026e: 	jl	.Ltmp1247 # Offset: 622
.Ltmp1235:
    00000274: 	popq	%rbx
    00000275: 	popq	%rbp
    00000276: 	popq	%r12
    00000278: 	popq	%r13
    0000027a: 	popq	%r14
    0000027c: 	popq	%r15
    0000027e: 	retq # Offset: 638
    0000027f: 	nop # Size: 1
.Ltmp1236:
    00000280: 	movslq	-0xc(%rsp), %rdx
    00000285: 	leal	(,%rdx,4), %ecx
    0000028c: 	leaq	(,%rdx,8), %rbp
    00000294: 	movslq	%ecx, %rcx
    00000297: 	leaq	(,%rcx,8), %rbx
    0000029f: 	movq	%rbx, -0x18(%rsp)
    000002a4: 	testq	%rdx, %rdx
    000002a7: 	jne	.Ltmp1248 # Offset: 679
    000002ad: 	jmp	.Ltmp1246 # Offset: 685
    000002af: 	nop # Size: 1
.Ltmp1244:
    000002b0: 	xorl	%ecx, %ecx
    000002b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1249:
    000002b8: 	movq	(%r8,%rcx,8), %r9
    000002bc: 	addq	$0x1, %rcx
    000002c0: 	addq	$0x20, %rsi
    000002c4: 	movq	%r9, -0x20(%rsi)
    000002c8: 	cmpq	%rdx, %rcx
    000002cb: 	jb	.Ltmp1249 # Offset: 715
    000002cd: 	jmp	.Ltmp1246 # Offset: 717
    000002cf: 	nop # Size: 1
.Ltmp1241:
    000002d0: 	xorl	%ecx, %ecx
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1250:
    000002d8: 	movq	(%r10,%rcx,8), %rsi
    000002dc: 	addq	$0x1, %rcx
    000002e0: 	addq	$0x20, %r11
    000002e4: 	movq	%rsi, -0x20(%r11)
    000002e8: 	cmpq	%rcx, %rdx
    000002eb: 	ja	.Ltmp1250 # Offset: 747
    000002ed: 	jmp	.Ltmp1243 # Offset: 749
    000002f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1238:
    000002f8: 	xorl	%ecx, %ecx
    000002fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1251:
    00000300: 	movq	(%rdi,%rcx,8), %rsi
    00000304: 	addq	$0x1, %rcx
    00000308: 	addq	$0x20, %r11
    0000030c: 	movq	%rsi, -0x20(%r11)
    00000310: 	cmpq	%rcx, %rdx
    00000313: 	ja	.Ltmp1251 # Offset: 787
    00000315: 	jmp	.Ltmp1240 # Offset: 789
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version4ImEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version5ImEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 139
  State       : disassembled
  Address     : 0x1b010
  Size        : 0x1b6
  MaxSize     : 0x1c0
  Offset      : 0x1b010
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version5ImEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0138:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp1252 # Offset: 7
    0000000d: 	pushq	%r15
    0000000f: 	movq	%rdi, %rax
    00000012: 	movl	%r9d, %r15d
    00000015: 	movq	%rsi, %rdi
    00000018: 	pushq	%r14
    0000001a: 	movq	%rdx, %rsi
    0000001d: 	pushq	%r13
    0000001f: 	pushq	%r12
    00000021: 	pushq	%rbp
    00000022: 	movl	%r9d, %ebp
    00000025: 	pushq	%rbx
    00000026: 	xorl	%ebx, %ebx
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1258:
    00000030: 	subl	$-0x80, %ebx
    00000033: 	cmpl	%r15d, %ebx
    00000036: 	jg	.Ltmp1253 # Offset: 54
    0000003c: 	movl	$0x400, %r10d
    00000042: 	movl	$0x1000, %r13d
    00000048: 	movl	$0x80, %edx
.Ltmp1259:
    0000004d: 	movq	%rax, %r11
    00000050: 	xorl	%r9d, %r9d
    00000053: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1254:
    00000058: 	movq	%rdi, (%r11)
    0000005b: 	movq	(%rsi,%r9,8), %r12
    0000005f: 	addq	$0x1, %r9
    00000063: 	addq	$0x20, %r11
    00000067: 	movq	%r12, -0x18(%r11)
    0000006b: 	cmpl	%r9d, %edx
    0000006e: 	jg	.Ltmp1254 # Offset: 110
    00000070: 	movslq	%edx, %r9
    00000073: 	leaq	0x10(%rax), %r14
    00000077: 	leaq	(,%r9,8), %r11
    0000007f: 	shlq	$0x5, %r9
    00000083: 	leaq	(%r8,%r11), %r12
    00000087: 	addq	%rax, %r9
    0000008a: 	cmpq	%r12, %r14
    0000008d: 	setae	%r12b
    00000091: 	cmpq	%r9, %r8
    00000094: 	setae	-0x9(%rsp)
    00000099: 	addq	%rcx, %r11
    0000009c: 	orb	-0x9(%rsp), %r12b
    000000a1: 	cmpq	%r11, %r14
    000000a4: 	setae	%r11b
    000000a8: 	cmpq	%r9, %rcx
    000000ab: 	setae	%r9b
    000000af: 	orl	%r11d, %r9d
    000000b2: 	testb	%r9b, %r12b
    000000b5: 	je	.Ltmp1255 # Offset: 181
    000000bb: 	leal	-0x1(%rdx), %r9d
    000000bf: 	cmpl	$0x8, %r9d
    000000c3: 	jbe	.Ltmp1255 # Offset: 195
    000000c9: 	movl	%edx, %r11d
    000000cc: 	xorl	%r9d, %r9d
    000000cf: 	shrl	%r11d
    000000d2: 	shlq	$0x4, %r11
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1256:
    000000e0: 	movdqu	(%rcx,%r9), %xmm1
    000000e6: 	movdqu	(%r8,%r9), %xmm0
    000000ec: 	movq	%xmm1, 0x10(%rax,%r9,4)
    000000f3: 	movhps	%xmm1, 0x30(%rax,%r9,4)
    000000f9: 	movq	%xmm0, 0x18(%rax,%r9,4)
    00000100: 	movhps	%xmm0, 0x38(%rax,%r9,4)
    00000106: 	addq	$0x10, %r9
    0000010a: 	cmpq	%r9, %r11
    0000010d: 	jne	.Ltmp1256 # Offset: 269
    0000010f: 	movl	%edx, %r11d
    00000112: 	andl	$-0x2, %r11d
    00000116: 	andl	$0x1, %edx
    00000119: 	je	.Ltmp1257 # Offset: 281
    0000011b: 	movl	%r11d, %r9d
    0000011e: 	leal	0x2(,%r11,4), %edx
    00000126: 	movq	(%rcx,%r9,8), %r11
    0000012a: 	movslq	%edx, %rdx
    0000012d: 	movq	%r11, (%rax,%rdx,8)
    00000131: 	movq	(%r8,%r9,8), %r9
    00000135: 	movq	%r9, 0x8(%rax,%rdx,8)
.Ltmp1257:
    0000013a: 	addq	%r13, %rax
    0000013d: 	addq	%r10, %rsi
    00000140: 	addq	%r10, %rcx
    00000143: 	addq	%r10, %r8
    00000146: 	addl	$-0x80, %ebp
    00000149: 	cmpl	%r15d, %ebx
    0000014c: 	jl	.Ltmp1258 # Offset: 332
    00000152: 	popq	%rbx
    00000153: 	popq	%rbp
    00000154: 	popq	%r12
    00000156: 	popq	%r13
    00000158: 	popq	%r14
    0000015a: 	popq	%r15
    0000015c: 	retq # Offset: 348
    0000015d: 	nopl	(%rax) # Size: 3
.Ltmp1253:
    00000160: 	leal	(,%rbp,4), %r13d
    00000168: 	movslq	%ebp, %r10
    0000016b: 	movl	%ebp, %edx
    0000016d: 	movslq	%r13d, %r13
    00000170: 	shlq	$0x3, %r10
    00000174: 	shlq	$0x3, %r13
    00000178: 	testl	%ebp, %ebp
    0000017a: 	jg	.Ltmp1259 # Offset: 378
    00000180: 	jmp	.Ltmp1257 # Offset: 384
    00000182: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1255:
    00000188: 	movl	%edx, %edx
    0000018a: 	xorl	%r9d, %r9d
    0000018d: 	shlq	$0x3, %rdx
    00000191: 	nopl	(%rax) # Size: 7
.Ltmp1260:
    00000198: 	movq	(%rcx,%r9), %r11
    0000019c: 	movq	%r11, 0x10(%rax,%r9,4)
    000001a1: 	movq	(%r8,%r9), %r11
    000001a5: 	movq	%r11, 0x18(%rax,%r9,4)
    000001aa: 	addq	$0x8, %r9
    000001ae: 	cmpq	%r9, %rdx
    000001b1: 	jne	.Ltmp1260 # Offset: 433
    000001b3: 	jmp	.Ltmp1257 # Offset: 435
.Ltmp1252:
    000001b5: 	retq # Offset: 437
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version5ImEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version6ImEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 140
  State       : disassembled
  Address     : 0x1b1d0
  Size        : 0x31c
  MaxSize     : 0x320
  Offset      : 0x1b1d0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version6ImEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0139:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r9d, -0x24(%rsp)
    00000013: 	movl	%r9d, -0x18(%rsp)
    00000018: 	testl	%r9d, %r9d
    0000001b: 	jle	.Ltmp1261 # Offset: 27
    00000021: 	movq	%rsi, %r12
    00000024: 	movq	%rdi, %rax
    00000027: 	movq	%rdx, %rsi
    0000002a: 	xorl	%r14d, %r14d
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp1273:
    00000030: 	subl	$-0x80, %r14d
    00000034: 	cmpl	-0x24(%rsp), %r14d
    00000039: 	jg	.Ltmp1262 # Offset: 57
    0000003f: 	movq	$0x1000, -0x20(%rsp)
    00000048: 	movl	$0x400, %ebx
    0000004d: 	movl	$0x80, %edx
.Ltmp1275:
    00000052: 	movq	%rax, %r9
    00000055: 	xorl	%edi, %edi
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1263:
    00000060: 	addl	$0x1, %edi
    00000063: 	movq	%r12, (%r9)
    00000066: 	addq	$0x20, %r9
    0000006a: 	cmpl	%edx, %edi
    0000006c: 	jl	.Ltmp1263 # Offset: 108
    0000006e: 	leal	-0x1(%rdx), %edi
    00000071: 	leaq	0x8(%rax), %r9
    00000075: 	cmpl	$0xe, %edi
    00000078: 	movl	%edi, -0x14(%rsp)
    0000007c: 	movslq	%edx, %rdi
    0000007f: 	leaq	-0x1(%rdi), %rbp
    00000083: 	seta	%r13b
    00000087: 	leaq	(,%rdi,8), %r11
    0000008f: 	shlq	$0x5, %rbp
    00000093: 	leaq	0x10(%rax,%rbp), %r10
    00000098: 	cmpq	%r10, %rsi
    0000009b: 	leaq	(%rsi,%r11), %r10
    0000009f: 	setae	%r15b
    000000a3: 	cmpq	%r10, %r9
    000000a6: 	setae	%r10b
    000000aa: 	orb	%r15b, %r10b
    000000ad: 	je	.Ltmp1264 # Offset: 173
    000000b3: 	testb	%r13b, %r13b
    000000b6: 	je	.Ltmp1264 # Offset: 182
    000000bc: 	movl	%edx, %r10d
    000000bf: 	xorl	%r9d, %r9d
    000000c2: 	shrl	%r10d
    000000c5: 	shlq	$0x4, %r10
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp1265:
    000000d0: 	movdqu	(%rsi,%r9), %xmm0
    000000d6: 	movq	%xmm0, 0x8(%rax,%r9,4)
    000000dd: 	movhps	%xmm0, 0x28(%rax,%r9,4)
    000000e3: 	addq	$0x10, %r9
    000000e7: 	cmpq	%r10, %r9
    000000ea: 	jne	.Ltmp1265 # Offset: 234
    000000ec: 	movl	%edx, %r9d
    000000ef: 	andl	$-0x2, %r9d
    000000f3: 	testb	$0x1, %dl
    000000f6: 	je	.Ltmp1266 # Offset: 246
    000000f8: 	movl	%r9d, %r10d
    000000fb: 	leal	0x1(,%r9,4), %r9d
    00000103: 	movq	(%rsi,%r10,8), %r10
    00000107: 	movslq	%r9d, %r9
    0000010a: 	movq	%r10, (%rax,%r9,8)
.Ltmp1266:
    0000010e: 	leaq	0x18(%rax,%rbp), %r9
    00000113: 	leaq	0x10(%rax), %r10
    00000117: 	cmpq	%r9, %rcx
    0000011a: 	leaq	(%rcx,%r11), %r9
    0000011e: 	setae	%bpl
    00000122: 	cmpq	%r9, %r10
    00000125: 	setae	%r9b
    00000129: 	orb	%bpl, %r9b
    0000012c: 	je	.Ltmp1267 # Offset: 300
    00000132: 	testb	%r13b, %r13b
    00000135: 	je	.Ltmp1267 # Offset: 309
    0000013b: 	movl	%edx, %r10d
    0000013e: 	xorl	%r9d, %r9d
    00000141: 	shrl	%r10d
    00000144: 	shlq	$0x4, %r10
    00000148: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1268:
    00000150: 	movdqu	(%rcx,%r9), %xmm0
    00000156: 	movq	%xmm0, 0x10(%rax,%r9,4)
    0000015d: 	movhps	%xmm0, 0x30(%rax,%r9,4)
    00000163: 	addq	$0x10, %r9
    00000167: 	cmpq	%r10, %r9
    0000016a: 	jne	.Ltmp1268 # Offset: 362
    0000016c: 	movl	%edx, %r9d
    0000016f: 	andl	$-0x2, %r9d
    00000173: 	testb	$0x1, %dl
    00000176: 	je	.Ltmp1269 # Offset: 374
    00000178: 	movl	%r9d, %r10d
    0000017b: 	leal	0x2(,%r9,4), %r9d
    00000183: 	movq	(%rcx,%r10,8), %r10
    00000187: 	movslq	%r9d, %r9
    0000018a: 	movq	%r10, (%rax,%r9,8)
.Ltmp1269:
    0000018e: 	shlq	$0x5, %rdi
    00000192: 	leaq	0x18(%rax), %r9
    00000196: 	addq	%rax, %rdi
    00000199: 	cmpq	%rdi, %r8
    0000019c: 	setae	%dil
    000001a0: 	addq	%r8, %r11
    000001a3: 	cmpq	%r11, %r9
    000001a6: 	setae	%r10b
    000001aa: 	orb	%dil, %r10b
    000001ad: 	je	.Ltmp1270 # Offset: 429
    000001b3: 	testb	%r13b, %r13b
    000001b6: 	je	.Ltmp1270 # Offset: 438
    000001bc: 	movl	%edx, %r9d
    000001bf: 	xorl	%edi, %edi
    000001c1: 	shrl	%r9d
    000001c4: 	shlq	$0x4, %r9
    000001c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1271:
    000001d0: 	movdqu	(%r8,%rdi), %xmm0
    000001d6: 	movq	%xmm0, 0x18(%rax,%rdi,4)
    000001dc: 	movhps	%xmm0, 0x38(%rax,%rdi,4)
    000001e1: 	addq	$0x10, %rdi
    000001e5: 	cmpq	%rdi, %r9
    000001e8: 	jne	.Ltmp1271 # Offset: 488
    000001ea: 	movl	%edx, %edi
    000001ec: 	andl	$-0x2, %edi
    000001ef: 	andl	$0x1, %edx
    000001f2: 	je	.Ltmp1272 # Offset: 498
    000001f4: 	movl	%edi, %edx
    000001f6: 	movq	(%r8,%rdx,8), %r9
    000001fa: 	leal	0x3(,%rdi,4), %edx
    00000201: 	movslq	%edx, %rdx
    00000204: 	movq	%r9, (%rax,%rdx,8)
.Ltmp1272:
    00000208: 	addl	$-0x80, -0x18(%rsp)
    0000020d: 	addq	-0x20(%rsp), %rax
    00000212: 	addq	%rbx, %rsi
    00000215: 	addq	%rbx, %rcx
    00000218: 	addq	%rbx, %r8
    0000021b: 	cmpl	-0x24(%rsp), %r14d
    00000220: 	jl	.Ltmp1273 # Offset: 544
.Ltmp1261:
    00000226: 	popq	%rbx
    00000227: 	popq	%rbp
    00000228: 	popq	%r12
    0000022a: 	popq	%r13
    0000022c: 	popq	%r14
    0000022e: 	popq	%r15
    00000230: 	retq # Offset: 560
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp1262:
    00000238: 	movslq	-0x18(%rsp), %rbx
    0000023d: 	movl	%ebx, %edx
    0000023f: 	testl	%ebx, %ebx
    00000241: 	jle	.Ltmp1274 # Offset: 577
    00000247: 	leal	(,%rbx,4), %edi
    0000024e: 	shlq	$0x3, %rbx
    00000252: 	movslq	%edi, %rdi
    00000255: 	shlq	$0x3, %rdi
    00000259: 	movq	%rdi, -0x20(%rsp)
    0000025e: 	jmp	.Ltmp1275 # Offset: 606
    00000263: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1270:
    00000268: 	movl	-0x14(%rsp), %edi
    0000026c: 	movq	%r8, %rdx
    0000026f: 	leaq	0x8(%r8,%rdi,8), %r10
    00000274: 	nopl	(%rax) # Size: 4
.Ltmp1276:
    00000278: 	movq	(%rdx), %rdi
    0000027b: 	addq	$0x8, %rdx
    0000027f: 	addq	$0x20, %r9
    00000283: 	movq	%rdi, -0x20(%r9)
    00000287: 	cmpq	%rdx, %r10
    0000028a: 	jne	.Ltmp1276 # Offset: 650
    0000028c: 	jmp	.Ltmp1272 # Offset: 652
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp1267:
    00000298: 	movl	-0x14(%rsp), %ebp
    0000029c: 	movq	%rcx, %r9
    0000029f: 	leaq	0x8(%rcx,%rbp,8), %rbp
    000002a4: 	nopl	(%rax) # Size: 4
.Ltmp1277:
    000002a8: 	movq	(%r9), %r15
    000002ab: 	addq	$0x8, %r9
    000002af: 	addq	$0x20, %r10
    000002b3: 	movq	%r15, -0x20(%r10)
    000002b7: 	cmpq	%r9, %rbp
    000002ba: 	jne	.Ltmp1277 # Offset: 698
    000002bc: 	jmp	.Ltmp1269 # Offset: 700
    000002c1: 	nopl	(%rax) # Size: 7
.Ltmp1264:
    000002c8: 	movl	-0x14(%rsp), %r15d
    000002cd: 	movq	%rax, -0x10(%rsp)
    000002d2: 	movq	%rsi, %r10
    000002d5: 	leaq	0x8(%rsi,%r15,8), %r15
    000002da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1278:
    000002e0: 	movq	(%r10), %rax
    000002e3: 	addq	$0x8, %r10
    000002e7: 	addq	$0x20, %r9
    000002eb: 	movq	%rax, -0x20(%r9)
    000002ef: 	cmpq	%r10, %r15
    000002f2: 	jne	.Ltmp1278 # Offset: 754
    000002f4: 	movq	-0x10(%rsp), %rax
    000002f9: 	jmp	.Ltmp1266 # Offset: 761
    000002fe: 	nop # Size: 2
.Ltmp1274:
    00000300: 	leal	(,%rbx,4), %edx
    00000307: 	shlq	$0x3, %rbx
    0000030b: 	movslq	%edx, %rdx
    0000030e: 	shlq	$0x3, %rdx
    00000312: 	movq	%rdx, -0x20(%rsp)
    00000317: 	jmp	.Ltmp1272 # Offset: 791
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version6ImEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave4to4_version1ImEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 141
  State       : disassembled
  Address     : 0x1b4f0
  Size        : 0x191
  MaxSize     : 0x1a0
  Offset      : 0x1b4f0
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version1ImEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0140:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp1279 # Offset: 7
    0000000d: 	movq	%rdi, %rax
    00000010: 	movq	%rdx, %rdi
    00000013: 	movslq	%r9d, %rdx
    00000016: 	movq	%rcx, %r10
    00000019: 	leaq	(,%rdx,8), %r11
    00000021: 	shlq	$0x5, %rdx
    00000025: 	pushq	%rbp
    00000026: 	leaq	(%rsi,%r11), %rcx
    0000002a: 	addq	%rax, %rdx
    0000002d: 	pushq	%rbx
    0000002e: 	cmpq	%rcx, %rax
    00000031: 	setae	%cl
    00000034: 	cmpq	%rdx, %rsi
    00000037: 	setae	%bl
    0000003a: 	orl	%ebx, %ecx
    0000003c: 	leaq	(%rdi,%r11), %rbx
    00000040: 	cmpq	%rbx, %rax
    00000043: 	setae	%bl
    00000046: 	cmpq	%rdx, %rdi
    00000049: 	setae	%bpl
    0000004d: 	orl	%ebp, %ebx
    0000004f: 	andl	%ebx, %ecx
    00000051: 	leal	-0x1(%r9), %ebx
    00000055: 	cmpl	$0x1, %ebx
    00000058: 	seta	%bl
    0000005b: 	andl	%ebx, %ecx
    0000005d: 	leaq	(%r10,%r11), %rbx
    00000061: 	cmpq	%rbx, %rax
    00000064: 	setae	%bl
    00000067: 	cmpq	%rdx, %r10
    0000006a: 	setae	%bpl
    0000006e: 	orl	%ebp, %ebx
    00000070: 	testb	%bl, %cl
    00000072: 	je	.Ltmp1280 # Offset: 114
    00000078: 	leaq	(%r8,%r11), %rcx
    0000007c: 	cmpq	%rcx, %rax
    0000007f: 	setae	%cl
    00000082: 	cmpq	%rdx, %r8
    00000085: 	setae	%dl
    00000088: 	orb	%dl, %cl
    0000008a: 	je	.Ltmp1280 # Offset: 138
    00000090: 	movl	%r9d, %ecx
    00000093: 	xorl	%edx, %edx
    00000095: 	shrl	%ecx
    00000097: 	shlq	$0x4, %rcx
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1281:
    000000a0: 	movdqu	(%rsi,%rdx), %xmm0
    000000a5: 	movdqu	(%rdi,%rdx), %xmm1
    000000aa: 	movdqu	(%r10,%rdx), %xmm5
    000000b0: 	movdqu	(%r8,%rdx), %xmm7
    000000b6: 	movdqa	%xmm0, %xmm2
    000000ba: 	movdqa	%xmm1, %xmm3
    000000be: 	punpcklqdq	%xmm5, %xmm2
    000000c2: 	punpcklqdq	%xmm7, %xmm3
    000000c6: 	punpckhqdq	%xmm5, %xmm0
    000000ca: 	movdqa	%xmm2, %xmm4
    000000ce: 	punpckhqdq	%xmm3, %xmm2
    000000d2: 	punpckhqdq	%xmm7, %xmm1
    000000d6: 	movups	%xmm2, 0x10(%rax,%rdx,4)
    000000db: 	movdqa	%xmm0, %xmm2
    000000df: 	punpcklqdq	%xmm3, %xmm4
    000000e3: 	punpckhqdq	%xmm1, %xmm0
    000000e7: 	punpcklqdq	%xmm1, %xmm2
    000000eb: 	movups	%xmm4, (%rax,%rdx,4)
    000000ef: 	movups	%xmm2, 0x20(%rax,%rdx,4)
    000000f4: 	movups	%xmm0, 0x30(%rax,%rdx,4)
    000000f9: 	addq	$0x10, %rdx
    000000fd: 	cmpq	%rdx, %rcx
    00000100: 	jne	.Ltmp1281 # Offset: 256
    00000102: 	movl	%r9d, %edx
    00000105: 	andl	$-0x2, %edx
    00000108: 	andl	$0x1, %r9d
    0000010c: 	je	.Ltmp1282 # Offset: 268
    0000010e: 	movl	%edx, %ecx
    00000110: 	shll	$0x2, %edx
    00000113: 	movq	(%rsi,%rcx,8), %rsi
    00000117: 	movslq	%edx, %rdx
    0000011a: 	movq	%rsi, (%rax,%rdx,8)
    0000011e: 	movq	(%rdi,%rcx,8), %rdi
    00000122: 	addq	$0x1, %rdx
    00000126: 	leaq	(,%rdx,8), %rsi
    0000012e: 	movq	%rdi, (%rax,%rdx,8)
    00000132: 	movq	(%r10,%rcx,8), %rdx
    00000136: 	movq	%rdx, 0x8(%rax,%rsi)
    0000013b: 	movq	(%r8,%rcx,8), %rdx
    0000013f: 	movq	%rdx, 0x10(%rax,%rsi)
.Ltmp1282:
    00000144: 	popq	%rbx
    00000145: 	popq	%rbp
    00000146: 	retq # Offset: 326
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1280:
    00000150: 	movl	%r9d, %r9d
    00000153: 	xorl	%edx, %edx
    00000155: 	shlq	$0x3, %r9
    00000159: 	nopl	(%rax) # Size: 7
.Ltmp1283:
    00000160: 	movq	(%rsi,%rdx), %rcx
    00000164: 	movq	%rcx, (%rax,%rdx,4)
    00000168: 	movq	(%rdi,%rdx), %rcx
    0000016c: 	movq	%rcx, 0x8(%rax,%rdx,4)
    00000171: 	movq	(%r10,%rdx), %rcx
    00000175: 	movq	%rcx, 0x10(%rax,%rdx,4)
    0000017a: 	movq	(%r8,%rdx), %rcx
    0000017e: 	movq	%rcx, 0x18(%rax,%rdx,4)
    00000183: 	addq	$0x8, %rdx
    00000187: 	cmpq	%rdx, %r9
    0000018a: 	jne	.Ltmp1283 # Offset: 394
    0000018c: 	popq	%rbx
    0000018d: 	popq	%rbp
    0000018e: 	retq # Offset: 398
    0000018f: 	nop # Size: 1
.Ltmp1279:
    00000190: 	retq # Offset: 400
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version1ImEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version2ImEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 142
  State       : disassembled
  Address     : 0x1b690
  Size        : 0x2c1
  MaxSize     : 0x2d0
  Offset      : 0x1b690
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version2ImEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0141:
    00000000: 	endbr64
    00000004: 	movslq	%r9d, %r9
    00000007: 	testq	%r9, %r9
    0000000a: 	je	.Ltmp1284 # Offset: 10
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %rax
    00000015: 	movq	%rsi, %r10
    00000018: 	movq	%rdx, %rsi
    0000001b: 	pushq	%rbp
    0000001c: 	leaq	-0x1(%r9), %rbp
    00000020: 	movq	%rcx, %rdi
    00000023: 	cmpq	$0xe, %rbp
    00000027: 	pushq	%rbx
    00000028: 	leaq	(,%r9,8), %rbx
    00000030: 	seta	%r11b
    00000034: 	shlq	$0x5, %rbp
    00000038: 	leaq	(%r10,%rbx), %rcx
    0000003c: 	leaq	0x8(%rax,%rbp), %rdx
    00000041: 	cmpq	%rdx, %r10
    00000044: 	setae	%dl
    00000047: 	cmpq	%rcx, %rax
    0000004a: 	setae	%cl
    0000004d: 	orb	%cl, %dl
    0000004f: 	je	.Ltmp1285 # Offset: 79
    00000055: 	testb	%r11b, %r11b
    00000058: 	je	.Ltmp1285 # Offset: 88
    0000005e: 	movq	%r9, %r12
    00000061: 	xorl	%edx, %edx
    00000063: 	xorl	%ecx, %ecx
    00000065: 	shrq	%r12
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1286:
    00000070: 	movdqu	(%r10,%rdx), %xmm0
    00000076: 	addq	$0x1, %rcx
    0000007a: 	movq	%xmm0, (%rax,%rdx,4)
    0000007f: 	movhps	%xmm0, 0x20(%rax,%rdx,4)
    00000084: 	addq	$0x10, %rdx
    00000088: 	cmpq	%rcx, %r12
    0000008b: 	jne	.Ltmp1286 # Offset: 139
    0000008d: 	movq	%r9, %r12
    00000090: 	andq	$-0x2, %r12
    00000094: 	movq	%r12, %rcx
    00000097: 	leaq	(%r10,%r12,8), %rdx
    0000009b: 	shlq	$0x5, %rcx
    0000009f: 	addq	%rax, %rcx
    000000a2: 	cmpq	%r12, %r9
    000000a5: 	je	.Ltmp1287 # Offset: 165
    000000a7: 	movq	(%rdx), %rdx
    000000aa: 	movq	%rdx, (%rcx)
.Ltmp1287:
    000000ad: 	leaq	0x10(%rax,%rbp), %rdx
    000000b2: 	leaq	(%rsi,%rbx), %rcx
    000000b6: 	cmpq	%rdx, %rsi
    000000b9: 	leaq	0x8(%rax), %r10
    000000bd: 	setae	%dl
    000000c0: 	cmpq	%rcx, %r10
    000000c3: 	setae	%cl
    000000c6: 	orb	%cl, %dl
    000000c8: 	je	.Ltmp1288 # Offset: 200
    000000ce: 	movq	%r9, %r12
    000000d1: 	xorl	%edx, %edx
    000000d3: 	xorl	%ecx, %ecx
    000000d5: 	shrq	%r12
    000000d8: 	testb	%r11b, %r11b
    000000db: 	je	.Ltmp1288 # Offset: 219
    000000e1: 	nopl	(%rax) # Size: 7
.Ltmp1289:
    000000e8: 	movdqu	(%rsi,%rdx), %xmm0
    000000ed: 	addq	$0x1, %rcx
    000000f1: 	movq	%xmm0, 0x8(%rax,%rdx,4)
    000000f7: 	movhps	%xmm0, 0x28(%rax,%rdx,4)
    000000fc: 	addq	$0x10, %rdx
    00000100: 	cmpq	%rcx, %r12
    00000103: 	jne	.Ltmp1289 # Offset: 259
    00000105: 	movq	%r9, %r12
    00000108: 	andq	$-0x2, %r12
    0000010c: 	movq	%r12, %rcx
    0000010f: 	leaq	(%rsi,%r12,8), %rdx
    00000113: 	shlq	$0x5, %rcx
    00000117: 	addq	%r10, %rcx
    0000011a: 	cmpq	%r12, %r9
    0000011d: 	je	.Ltmp1290 # Offset: 285
    0000011f: 	movq	(%rdx), %rdx
    00000122: 	movq	%rdx, (%rcx)
.Ltmp1290:
    00000125: 	leaq	0x18(%rax,%rbp), %rdx
    0000012a: 	leaq	(%rdi,%rbx), %rcx
    0000012e: 	cmpq	%rdx, %rdi
    00000131: 	leaq	0x10(%rax), %rsi
    00000135: 	setae	%dl
    00000138: 	cmpq	%rcx, %rsi
    0000013b: 	setae	%cl
    0000013e: 	orb	%cl, %dl
    00000140: 	je	.Ltmp1291 # Offset: 320
    00000146: 	movq	%r9, %r10
    00000149: 	xorl	%edx, %edx
    0000014b: 	xorl	%ecx, %ecx
    0000014d: 	shrq	%r10
    00000150: 	testb	%r11b, %r11b
    00000153: 	je	.Ltmp1291 # Offset: 339
    00000159: 	nopl	(%rax) # Size: 7
.Ltmp1292:
    00000160: 	movdqu	(%rdi,%rdx), %xmm0
    00000165: 	addq	$0x1, %rcx
    00000169: 	movq	%xmm0, 0x10(%rax,%rdx,4)
    0000016f: 	movhps	%xmm0, 0x30(%rax,%rdx,4)
    00000174: 	addq	$0x10, %rdx
    00000178: 	cmpq	%rcx, %r10
    0000017b: 	jne	.Ltmp1292 # Offset: 379
    0000017d: 	movq	%r9, %r10
    00000180: 	andq	$-0x2, %r10
    00000184: 	movq	%r10, %rcx
    00000187: 	leaq	(%rdi,%r10,8), %rdx
    0000018b: 	shlq	$0x5, %rcx
    0000018f: 	addq	%rsi, %rcx
    00000192: 	cmpq	%r10, %r9
    00000195: 	je	.Ltmp1293 # Offset: 405
    00000197: 	movq	(%rdx), %rdx
    0000019a: 	movq	%rdx, (%rcx)
.Ltmp1293:
    0000019d: 	movq	%r9, %rdx
    000001a0: 	leaq	0x18(%rax), %rsi
    000001a4: 	shlq	$0x5, %rdx
    000001a8: 	addq	%rax, %rdx
    000001ab: 	cmpq	%rdx, %r8
    000001ae: 	setae	%dl
    000001b1: 	addq	%r8, %rbx
    000001b4: 	cmpq	%rbx, %rsi
    000001b7: 	setae	%cl
    000001ba: 	orb	%cl, %dl
    000001bc: 	je	.Ltmp1294 # Offset: 444
    000001c2: 	movq	%r9, %rdi
    000001c5: 	xorl	%edx, %edx
    000001c7: 	xorl	%ecx, %ecx
    000001c9: 	shrq	%rdi
    000001cc: 	testb	%r11b, %r11b
    000001cf: 	je	.Ltmp1294 # Offset: 463
    000001d5: 	nopl	(%rax) # Size: 3
.Ltmp1295:
    000001d8: 	movdqu	(%r8,%rdx), %xmm0
    000001de: 	addq	$0x1, %rcx
    000001e2: 	movq	%xmm0, 0x18(%rax,%rdx,4)
    000001e8: 	movhps	%xmm0, 0x38(%rax,%rdx,4)
    000001ed: 	addq	$0x10, %rdx
    000001f1: 	cmpq	%rcx, %rdi
    000001f4: 	jne	.Ltmp1295 # Offset: 500
    000001f6: 	movq	%r9, %rcx
    000001f9: 	andq	$-0x2, %rcx
    000001fd: 	movq	%rcx, %rdx
    00000200: 	leaq	(%r8,%rcx,8), %rax
    00000204: 	shlq	$0x5, %rdx
    00000208: 	addq	%rsi, %rdx
    0000020b: 	cmpq	%rcx, %r9
    0000020e: 	je	.Ltmp1296 # Offset: 526
    00000210: 	movq	(%rax), %rax
    00000213: 	movq	%rax, (%rdx)
.Ltmp1296:
    00000216: 	popq	%rbx
    00000217: 	popq	%rbp
    00000218: 	popq	%r12
    0000021a: 	retq # Offset: 538
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1285:
    00000220: 	movq	%rax, %rcx
    00000223: 	xorl	%edx, %edx
    00000225: 	nopl	(%rax) # Size: 3
.Ltmp1297:
    00000228: 	movq	(%r10,%rdx,8), %r12
    0000022c: 	addq	$0x1, %rdx
    00000230: 	addq	$0x20, %rcx
    00000234: 	movq	%r12, -0x20(%rcx)
    00000238: 	cmpq	%rdx, %r9
    0000023b: 	jne	.Ltmp1297 # Offset: 571
    0000023d: 	jmp	.Ltmp1287 # Offset: 573
    00000242: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1288:
    00000248: 	xorl	%edx, %edx
    0000024a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1298:
    00000250: 	movq	(%rsi,%rdx,8), %rcx
    00000254: 	addq	$0x1, %rdx
    00000258: 	addq	$0x20, %r10
    0000025c: 	movq	%rcx, -0x20(%r10)
    00000260: 	cmpq	%rdx, %r9
    00000263: 	jne	.Ltmp1298 # Offset: 611
    00000265: 	jmp	.Ltmp1290 # Offset: 613
    0000026a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1291:
    00000270: 	xorl	%edx, %edx
    00000272: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1299:
    00000278: 	movq	(%rdi,%rdx,8), %rcx
    0000027c: 	addq	$0x1, %rdx
    00000280: 	addq	$0x20, %rsi
    00000284: 	movq	%rcx, -0x20(%rsi)
    00000288: 	cmpq	%rdx, %r9
    0000028b: 	jne	.Ltmp1299 # Offset: 651
    0000028d: 	jmp	.Ltmp1293 # Offset: 653
    00000292: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1294:
    00000298: 	xorl	%eax, %eax
    0000029a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1300:
    000002a0: 	movq	(%r8,%rax,8), %rdx
    000002a4: 	addq	$0x1, %rax
    000002a8: 	addq	$0x20, %rsi
    000002ac: 	movq	%rdx, -0x20(%rsi)
    000002b0: 	cmpq	%rax, %r9
    000002b3: 	jne	.Ltmp1300 # Offset: 691
    000002b5: 	popq	%rbx
    000002b6: 	popq	%rbp
    000002b7: 	popq	%r12
    000002b9: 	retq # Offset: 697
    000002ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1284:
    000002c0: 	retq # Offset: 704
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version2ImEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version3ImEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 143
  State       : disassembled
  Address     : 0x1b960
  Size        : 0x1e1
  MaxSize     : 0x1f0
  Offset      : 0x1b960
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version3ImEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0142:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp1301 # Offset: 7
    0000000d: 	movq	%rdi, %rax
    00000010: 	movslq	%r9d, %r11
    00000013: 	movq	%rdx, %rdi
    00000016: 	pushq	%r12
    00000018: 	leal	-0x1(%r9), %edx
    0000001c: 	pushq	%rbp
    0000001d: 	cmpl	$0x8, %edx
    00000020: 	movq	%r11, %rdx
    00000023: 	pushq	%rbx
    00000024: 	leaq	(,%r11,8), %rbx
    0000002c: 	seta	%bpl
    00000030: 	shlq	$0x5, %rdx
    00000034: 	leaq	-0x10(%rax,%rdx), %r12
    00000039: 	leaq	(%rsi,%rbx), %rdx
    0000003d: 	cmpq	%rdx, %rax
    00000040: 	setae	%r10b
    00000044: 	cmpq	%r12, %rsi
    00000047: 	setae	%dl
    0000004a: 	orl	%edx, %r10d
    0000004d: 	leaq	(%rdi,%rbx), %rdx
    00000051: 	cmpq	%rdx, %rax
    00000054: 	setae	%dl
    00000057: 	cmpq	%r12, %rdi
    0000005a: 	setae	%r12b
    0000005e: 	orl	%r12d, %edx
    00000061: 	testb	%dl, %r10b
    00000064: 	je	.Ltmp1302 # Offset: 100
    0000006a: 	testb	%bpl, %bpl
    0000006d: 	je	.Ltmp1302 # Offset: 109
    00000073: 	movl	%r9d, %r10d
    00000076: 	xorl	%edx, %edx
    00000078: 	shrl	%r10d
    0000007b: 	shlq	$0x4, %r10
    0000007f: 	nop # Size: 1
.Ltmp1303:
    00000080: 	movdqu	(%rsi,%rdx), %xmm1
    00000085: 	movdqu	(%rdi,%rdx), %xmm0
    0000008a: 	movq	%xmm1, (%rax,%rdx,4)
    0000008f: 	movhps	%xmm1, 0x20(%rax,%rdx,4)
    00000094: 	movq	%xmm0, 0x8(%rax,%rdx,4)
    0000009a: 	movhps	%xmm0, 0x28(%rax,%rdx,4)
    0000009f: 	addq	$0x10, %rdx
    000000a3: 	cmpq	%r10, %rdx
    000000a6: 	jne	.Ltmp1303 # Offset: 166
    000000a8: 	movl	%r9d, %edx
    000000ab: 	andl	$-0x2, %edx
    000000ae: 	testb	$0x1, %r9b
    000000b2: 	je	.Ltmp1304 # Offset: 178
    000000b4: 	movl	%edx, %r10d
    000000b7: 	shll	$0x2, %edx
    000000ba: 	movq	(%rsi,%r10,8), %rsi
    000000be: 	movslq	%edx, %rdx
    000000c1: 	movq	%rsi, (%rax,%rdx,8)
    000000c5: 	movq	(%rdi,%r10,8), %rsi
    000000c9: 	movq	%rsi, 0x8(%rax,%rdx,8)
.Ltmp1304:
    000000ce: 	leaq	0x10(%rax), %rdx
    000000d2: 	leaq	(%rcx,%rbx), %rsi
    000000d6: 	shlq	$0x5, %r11
    000000da: 	addq	%rax, %r11
    000000dd: 	cmpq	%rsi, %rdx
    000000e0: 	setae	%sil
    000000e4: 	cmpq	%r11, %rcx
    000000e7: 	setae	%dil
    000000eb: 	addq	%r8, %rbx
    000000ee: 	orl	%edi, %esi
    000000f0: 	cmpq	%rbx, %rdx
    000000f3: 	setae	%dl
    000000f6: 	cmpq	%r11, %r8
    000000f9: 	setae	%dil
    000000fd: 	orl	%edi, %edx
    000000ff: 	testb	%dl, %sil
    00000102: 	je	.Ltmp1305 # Offset: 258
    00000108: 	testb	%bpl, %bpl
    0000010b: 	je	.Ltmp1305 # Offset: 267
    00000111: 	movl	%r9d, %esi
    00000114: 	xorl	%edx, %edx
    00000116: 	shrl	%esi
    00000118: 	shlq	$0x4, %rsi
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp1306:
    00000120: 	movdqu	(%rcx,%rdx), %xmm1
    00000125: 	movdqu	(%r8,%rdx), %xmm0
    0000012b: 	movq	%xmm1, 0x10(%rax,%rdx,4)
    00000131: 	movhps	%xmm1, 0x30(%rax,%rdx,4)
    00000136: 	movq	%xmm0, 0x18(%rax,%rdx,4)
    0000013c: 	movhps	%xmm0, 0x38(%rax,%rdx,4)
    00000141: 	addq	$0x10, %rdx
    00000145: 	cmpq	%rdx, %rsi
    00000148: 	jne	.Ltmp1306 # Offset: 328
    0000014a: 	movl	%r9d, %edx
    0000014d: 	andl	$-0x2, %edx
    00000150: 	andl	$0x1, %r9d
    00000154: 	je	.Ltmp1307 # Offset: 340
    00000156: 	movl	%edx, %esi
    00000158: 	leal	0x2(,%rdx,4), %edx
    0000015f: 	movq	(%rcx,%rsi,8), %rcx
    00000163: 	movslq	%edx, %rdx
    00000166: 	movq	%rcx, (%rax,%rdx,8)
    0000016a: 	movq	(%r8,%rsi,8), %rcx
    0000016e: 	movq	%rcx, 0x8(%rax,%rdx,8)
.Ltmp1307:
    00000173: 	popq	%rbx
    00000174: 	popq	%rbp
    00000175: 	popq	%r12
    00000177: 	retq # Offset: 375
    00000178: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1302:
    00000180: 	movl	%r9d, %r12d
    00000183: 	xorl	%edx, %edx
    00000185: 	shlq	$0x3, %r12
    00000189: 	nopl	(%rax) # Size: 7
.Ltmp1308:
    00000190: 	movq	(%rsi,%rdx), %r10
    00000194: 	movq	%r10, (%rax,%rdx,4)
    00000198: 	movq	(%rdi,%rdx), %r10
    0000019c: 	movq	%r10, 0x8(%rax,%rdx,4)
    000001a1: 	addq	$0x8, %rdx
    000001a5: 	cmpq	%r12, %rdx
    000001a8: 	jne	.Ltmp1308 # Offset: 424
    000001aa: 	jmp	.Ltmp1304 # Offset: 426
    000001af: 	nop # Size: 1
.Ltmp1305:
    000001b0: 	movl	%r9d, %r9d
    000001b3: 	xorl	%edx, %edx
    000001b5: 	shlq	$0x3, %r9
    000001b9: 	nopl	(%rax) # Size: 7
.Ltmp1309:
    000001c0: 	movq	(%rcx,%rdx), %rsi
    000001c4: 	movq	%rsi, 0x10(%rax,%rdx,4)
    000001c9: 	movq	(%r8,%rdx), %rsi
    000001cd: 	movq	%rsi, 0x18(%rax,%rdx,4)
    000001d2: 	addq	$0x8, %rdx
    000001d6: 	cmpq	%rdx, %r9
    000001d9: 	jne	.Ltmp1309 # Offset: 473
    000001db: 	popq	%rbx
    000001dc: 	popq	%rbp
    000001dd: 	popq	%r12
    000001df: 	retq # Offset: 479
.Ltmp1301:
    000001e0: 	retq # Offset: 480
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version3ImEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version4ImEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 144
  State       : disassembled
  Address     : 0x1bb50
  Size        : 0x3cb
  MaxSize     : 0x3d0
  Offset      : 0x1bb50
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version4ImEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0143:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %rax
    00000009: 	movq	%rdx, %rdi
    0000000c: 	pushq	%r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%r9d, -0x10(%rsp)
    00000019: 	movl	%r9d, -0xc(%rsp)
    0000001e: 	movl	$0x0, -0x1c(%rsp)
    00000026: 	testl	%r9d, %r9d
    00000029: 	jle	.Ltmp1310 # Offset: 41
    0000002f: 	movq	%rsi, %r13
    00000032: 	movq	%rcx, %r10
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp1324:
    00000038: 	subl	$-0x80, -0x1c(%rsp)
    0000003d: 	movl	-0x1c(%rsp), %ebx
    00000041: 	cmpl	-0x10(%rsp), %ebx
    00000045: 	jg	.Ltmp1311 # Offset: 69
    0000004b: 	movq	$0x1000, -0x18(%rsp)
    00000054: 	movl	$0x400, %ebp
    00000059: 	movl	$0x80, %edx
.Ltmp1325:
    0000005e: 	cmpq	$0xf, %rdx
    00000062: 	movl	$0x8, %ebx
    00000067: 	leaq	(,%rdx,8), %r11
    0000006f: 	seta	%r12b
    00000073: 	leaq	-0x1(%rdx), %r9
    00000077: 	testq	%rdx, %rdx
    0000007a: 	cmoveq	%rbx, %r11
    0000007e: 	shlq	$0x5, %r9
    00000082: 	testq	%rdx, %rdx
    00000085: 	leaq	0x8(%r9), %rcx
    00000089: 	cmoveq	%rbx, %rcx
    0000008d: 	addq	%rax, %rcx
    00000090: 	cmpq	%rcx, %r13
    00000093: 	leaq	(%r13,%r11), %rcx
    00000098: 	setae	%sil
    0000009c: 	cmpq	%rcx, %rax
    0000009f: 	setae	%cl
    000000a2: 	orb	%sil, %cl
    000000a5: 	je	.Ltmp1312 # Offset: 165
    000000ab: 	testb	%r12b, %r12b
    000000ae: 	je	.Ltmp1312 # Offset: 174
    000000b4: 	testq	%rdx, %rdx
    000000b7: 	movl	$0x1, %ebx
    000000bc: 	cmovneq	%rdx, %rbx
    000000c0: 	xorl	%ecx, %ecx
    000000c2: 	xorl	%esi, %esi
    000000c4: 	movq	%rbx, %r14
    000000c7: 	shrq	%r14
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1313:
    000000d0: 	movdqu	(%r13,%rcx), %xmm0
    000000d7: 	addq	$0x1, %rsi
    000000db: 	movq	%xmm0, (%rax,%rcx,4)
    000000e0: 	movhps	%xmm0, 0x20(%rax,%rcx,4)
    000000e5: 	addq	$0x10, %rcx
    000000e9: 	cmpq	%rsi, %r14
    000000ec: 	jne	.Ltmp1313 # Offset: 236
    000000ee: 	movq	%rbx, %r14
    000000f1: 	andq	$-0x2, %r14
    000000f5: 	movq	%r14, %rcx
    000000f8: 	leaq	(%r13,%r14,8), %rsi
    000000fd: 	shlq	$0x5, %rcx
    00000101: 	addq	%rax, %rcx
    00000104: 	cmpq	%r14, %rbx
    00000107: 	je	.Ltmp1314 # Offset: 263
    00000109: 	movq	(%rsi), %rsi
    0000010c: 	movq	%rsi, (%rcx)
.Ltmp1314:
    0000010f: 	testq	%rdx, %rdx
    00000112: 	leaq	0x10(%r9), %rcx
    00000116: 	leaq	0x8(%rax), %rbx
    0000011a: 	movl	$0x10, %esi
    0000011f: 	cmoveq	%rsi, %rcx
    00000123: 	addq	%rax, %rcx
    00000126: 	cmpq	%rcx, %rdi
    00000129: 	leaq	(%rdi,%r11), %rcx
    0000012d: 	setae	%sil
    00000131: 	cmpq	%rcx, %rbx
    00000134: 	setae	%cl
    00000137: 	orb	%sil, %cl
    0000013a: 	je	.Ltmp1315 # Offset: 314
    00000140: 	testb	%r12b, %r12b
    00000143: 	je	.Ltmp1315 # Offset: 323
    00000149: 	testq	%rdx, %rdx
    0000014c: 	movl	$0x1, %r14d
    00000152: 	cmovneq	%rdx, %r14
    00000156: 	xorl	%ecx, %ecx
    00000158: 	xorl	%esi, %esi
    0000015a: 	movq	%r14, %r15
    0000015d: 	shrq	%r15
.Ltmp1316:
    00000160: 	movdqu	(%rdi,%rcx), %xmm0
    00000165: 	addq	$0x1, %rsi
    00000169: 	movq	%xmm0, 0x8(%rax,%rcx,4)
    0000016f: 	movhps	%xmm0, 0x28(%rax,%rcx,4)
    00000174: 	addq	$0x10, %rcx
    00000178: 	cmpq	%rsi, %r15
    0000017b: 	jne	.Ltmp1316 # Offset: 379
    0000017d: 	movq	%r14, %r15
    00000180: 	andq	$-0x2, %r15
    00000184: 	movq	%r15, %rcx
    00000187: 	leaq	(%rdi,%r15,8), %rsi
    0000018b: 	shlq	$0x5, %rcx
    0000018f: 	addq	%rbx, %rcx
    00000192: 	cmpq	%r15, %r14
    00000195: 	je	.Ltmp1317 # Offset: 405
    00000197: 	movq	(%rsi), %rsi
    0000019a: 	movq	%rsi, (%rcx)
.Ltmp1317:
    0000019d: 	addq	$0x18, %r9
    000001a1: 	movl	$0x18, %esi
    000001a6: 	leaq	(%r10,%r11), %rcx
    000001aa: 	testq	%rdx, %rdx
    000001ad: 	cmoveq	%rsi, %r9
    000001b1: 	leaq	0x10(%rax), %rbx
    000001b5: 	addq	%rax, %r9
    000001b8: 	cmpq	%r9, %r10
    000001bb: 	setae	%sil
    000001bf: 	cmpq	%rcx, %rbx
    000001c2: 	setae	%cl
    000001c5: 	orb	%sil, %cl
    000001c8: 	je	.Ltmp1318 # Offset: 456
    000001ce: 	testb	%r12b, %r12b
    000001d1: 	je	.Ltmp1318 # Offset: 465
    000001d7: 	testq	%rdx, %rdx
    000001da: 	movl	$0x1, %r9d
    000001e0: 	cmovneq	%rdx, %r9
    000001e4: 	xorl	%ecx, %ecx
    000001e6: 	xorl	%esi, %esi
    000001e8: 	movq	%r9, %r14
    000001eb: 	shrq	%r14
    000001ee: 	nop # Size: 2
.Ltmp1319:
    000001f0: 	movdqu	(%r10,%rcx), %xmm0
    000001f6: 	addq	$0x1, %rsi
    000001fa: 	movq	%xmm0, 0x10(%rax,%rcx,4)
    00000200: 	movhps	%xmm0, 0x30(%rax,%rcx,4)
    00000205: 	addq	$0x10, %rcx
    00000209: 	cmpq	%rsi, %r14
    0000020c: 	jne	.Ltmp1319 # Offset: 524
    0000020e: 	movq	%r9, %r14
    00000211: 	andq	$-0x2, %r14
    00000215: 	movq	%r14, %rcx
    00000218: 	leaq	(%r10,%r14,8), %rsi
    0000021c: 	shlq	$0x5, %rcx
    00000220: 	addq	%rbx, %rcx
    00000223: 	cmpq	%r14, %r9
    00000226: 	je	.Ltmp1320 # Offset: 550
    00000228: 	movq	(%rsi), %rsi
    0000022b: 	movq	%rsi, (%rcx)
.Ltmp1320:
    0000022e: 	movq	%rdx, %rcx
    00000231: 	movl	$0x20, %ebx
    00000236: 	leaq	0x18(%rax), %rsi
    0000023a: 	shlq	$0x5, %rcx
    0000023e: 	testq	%rdx, %rdx
    00000241: 	cmoveq	%rbx, %rcx
    00000245: 	addq	%rax, %rcx
    00000248: 	cmpq	%rcx, %r8
    0000024b: 	setae	%cl
    0000024e: 	addq	%r8, %r11
    00000251: 	cmpq	%r11, %rsi
    00000254: 	setae	%r9b
    00000258: 	orb	%cl, %r9b
    0000025b: 	je	.Ltmp1321 # Offset: 603
    00000261: 	testb	%r12b, %r12b
    00000264: 	je	.Ltmp1321 # Offset: 612
    0000026a: 	testq	%rdx, %rdx
    0000026d: 	movl	$0x1, %ebx
    00000272: 	cmoveq	%rbx, %rdx
    00000276: 	xorl	%ecx, %ecx
    00000278: 	xorl	%r9d, %r9d
    0000027b: 	movq	%rdx, %r11
    0000027e: 	shrq	%r11
    00000281: 	nopl	(%rax) # Size: 7
.Ltmp1322:
    00000288: 	movdqu	(%r8,%rcx), %xmm0
    0000028e: 	addq	$0x1, %r9
    00000292: 	movq	%xmm0, 0x18(%rax,%rcx,4)
    00000298: 	movhps	%xmm0, 0x38(%rax,%rcx,4)
    0000029d: 	addq	$0x10, %rcx
    000002a1: 	cmpq	%r9, %r11
    000002a4: 	jne	.Ltmp1322 # Offset: 676
    000002a6: 	movq	%rdx, %r11
    000002a9: 	andq	$-0x2, %r11
    000002ad: 	movq	%r11, %rcx
    000002b0: 	leaq	(%r8,%r11,8), %r9
    000002b4: 	shlq	$0x5, %rcx
    000002b8: 	addq	%rsi, %rcx
    000002bb: 	cmpq	%r11, %rdx
    000002be: 	je	.Ltmp1323 # Offset: 702
    000002c0: 	movq	(%r9), %rdx
    000002c3: 	movq	%rdx, (%rcx)
.Ltmp1323:
    000002c6: 	addl	$-0x80, -0xc(%rsp)
    000002cb: 	movl	-0x10(%rsp), %edx
    000002cf: 	addq	%rbp, %r13
    000002d2: 	addq	%rbp, %rdi
    000002d5: 	addq	-0x18(%rsp), %rax
    000002da: 	addq	%rbp, %r10
    000002dd: 	addq	%rbp, %r8
    000002e0: 	cmpl	%edx, -0x1c(%rsp)
    000002e4: 	jl	.Ltmp1324 # Offset: 740
.Ltmp1310:
    000002ea: 	popq	%rbx
    000002eb: 	popq	%rbp
    000002ec: 	popq	%r12
    000002ee: 	popq	%r13
    000002f0: 	popq	%r14
    000002f2: 	popq	%r15
    000002f4: 	retq # Offset: 756
    000002f5: 	nopl	(%rax) # Size: 3
.Ltmp1311:
    000002f8: 	movslq	-0xc(%rsp), %rdx
    000002fd: 	leal	(,%rdx,4), %ecx
    00000304: 	leaq	(,%rdx,8), %rbp
    0000030c: 	movslq	%ecx, %rcx
    0000030f: 	leaq	(,%rcx,8), %rbx
    00000317: 	movq	%rbx, -0x18(%rsp)
    0000031c: 	testq	%rdx, %rdx
    0000031f: 	jne	.Ltmp1325 # Offset: 799
    00000325: 	jmp	.Ltmp1323 # Offset: 805
    00000327: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1321:
    00000330: 	xorl	%ecx, %ecx
    00000332: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1326:
    00000338: 	movq	(%r8,%rcx,8), %r9
    0000033c: 	addq	$0x1, %rcx
    00000340: 	addq	$0x20, %rsi
    00000344: 	movq	%r9, -0x20(%rsi)
    00000348: 	cmpq	%rdx, %rcx
    0000034b: 	jb	.Ltmp1326 # Offset: 843
    0000034d: 	jmp	.Ltmp1323 # Offset: 845
    00000352: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1318:
    00000358: 	xorl	%ecx, %ecx
    0000035a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1327:
    00000360: 	movq	(%r10,%rcx,8), %rsi
    00000364: 	addq	$0x1, %rcx
    00000368: 	addq	$0x20, %rbx
    0000036c: 	movq	%rsi, -0x20(%rbx)
    00000370: 	cmpq	%rcx, %rdx
    00000373: 	ja	.Ltmp1327 # Offset: 883
    00000375: 	jmp	.Ltmp1320 # Offset: 885
    0000037a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1315:
    00000380: 	xorl	%ecx, %ecx
    00000382: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1328:
    00000388: 	movq	(%rdi,%rcx,8), %rsi
    0000038c: 	addq	$0x1, %rcx
    00000390: 	addq	$0x20, %rbx
    00000394: 	movq	%rsi, -0x20(%rbx)
    00000398: 	cmpq	%rcx, %rdx
    0000039b: 	ja	.Ltmp1328 # Offset: 923
    0000039d: 	jmp	.Ltmp1317 # Offset: 925
    000003a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1312:
    000003a8: 	movq	%rax, %rsi
    000003ab: 	xorl	%ecx, %ecx
    000003ad: 	nopl	(%rax) # Size: 3
.Ltmp1329:
    000003b0: 	movq	(%r13,%rcx,8), %rbx
    000003b5: 	addq	$0x1, %rcx
    000003b9: 	addq	$0x20, %rsi
    000003bd: 	movq	%rbx, -0x20(%rsi)
    000003c1: 	cmpq	%rcx, %rdx
    000003c4: 	ja	.Ltmp1329 # Offset: 964
    000003c6: 	jmp	.Ltmp1314 # Offset: 966
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version4ImEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version5ImEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 145
  State       : disassembled
  Address     : 0x1bf20
  Size        : 0x2a2
  MaxSize     : 0x2b0
  Offset      : 0x1bf20
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version5ImEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0144:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r9d, -0x10(%rsp)
    00000013: 	testl	%r9d, %r9d
    00000016: 	jle	.Ltmp1330 # Offset: 22
    0000001c: 	movq	%rdi, %rax
    0000001f: 	movl	%r9d, %r15d
    00000022: 	movq	%rsi, %rdi
    00000025: 	xorl	%r12d, %r12d
    00000028: 	movq	%rdx, %rsi
    0000002b: 	movq	%rcx, %rdx
    0000002e: 	nop # Size: 2
.Ltmp1338:
    00000030: 	subl	$-0x80, %r12d
    00000034: 	cmpl	-0x10(%rsp), %r12d
    00000039: 	jg	.Ltmp1331 # Offset: 57
    0000003f: 	movl	$0x400, %r11d
    00000045: 	movl	$0x1000, %r14d
    0000004b: 	movl	$0x80, %ecx
.Ltmp1339:
    00000050: 	movslq	%ecx, %r9
    00000053: 	testl	%ecx, %ecx
    00000055: 	movl	$0x8, %ebp
    0000005a: 	movl	$0x10, %r13d
    00000060: 	leaq	(,%r9,8), %rbx
    00000068: 	movq	%r9, %r10
    0000006b: 	cmovgq	%rbx, %rbp
    0000006f: 	shlq	$0x5, %r10
    00000073: 	subq	$0x10, %r10
    00000077: 	testl	%ecx, %ecx
    00000079: 	cmovleq	%r13, %r10
    0000007d: 	leaq	(%rdi,%rbp), %r13
    00000081: 	addq	%rax, %r10
    00000084: 	cmpq	%r13, %rax
    00000087: 	setae	-0x9(%rsp)
    0000008c: 	cmpq	%r10, %rdi
    0000008f: 	setae	%r13b
    00000093: 	addq	%rsi, %rbp
    00000096: 	orb	-0x9(%rsp), %r13b
    0000009b: 	cmpq	%rbp, %rax
    0000009e: 	setae	%bpl
    000000a2: 	cmpq	%r10, %rsi
    000000a5: 	setae	%r10b
    000000a9: 	orl	%r10d, %ebp
    000000ac: 	testb	%bpl, %r13b
    000000af: 	je	.Ltmp1332 # Offset: 175
    000000b5: 	cmpl	$0x9, %ecx
    000000b8: 	jle	.Ltmp1332 # Offset: 184
    000000be: 	testl	%ecx, %ecx
    000000c0: 	movl	$0x1, %r13d
    000000c6: 	cmovgl	%ecx, %r13d
    000000ca: 	xorl	%r10d, %r10d
    000000cd: 	movl	%r13d, %ebp
    000000d0: 	shrl	%ebp
    000000d2: 	shlq	$0x4, %rbp
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1333:
    000000e0: 	movdqu	(%rdi,%r10), %xmm1
    000000e6: 	movdqu	(%rsi,%r10), %xmm0
    000000ec: 	movq	%xmm1, (%rax,%r10,4)
    000000f2: 	movhps	%xmm1, 0x20(%rax,%r10,4)
    000000f8: 	movq	%xmm0, 0x8(%rax,%r10,4)
    000000ff: 	movhps	%xmm0, 0x28(%rax,%r10,4)
    00000105: 	addq	$0x10, %r10
    00000109: 	cmpq	%rbp, %r10
    0000010c: 	jne	.Ltmp1333 # Offset: 268
    0000010e: 	movl	%r13d, %r10d
    00000111: 	andl	$-0x2, %r10d
    00000115: 	andl	$0x1, %r13d
    00000119: 	je	.Ltmp1334 # Offset: 281
    0000011b: 	movl	%r10d, %ebp
    0000011e: 	shll	$0x2, %r10d
    00000122: 	movq	(%rdi,%rbp,8), %r13
    00000126: 	movslq	%r10d, %r10
    00000129: 	movq	%r13, (%rax,%r10,8)
    0000012d: 	movq	(%rsi,%rbp,8), %rbp
    00000131: 	movq	%rbp, 0x8(%rax,%r10,8)
.Ltmp1334:
    00000136: 	leaq	(%r8,%rbx), %r10
    0000013a: 	leaq	0x10(%rax), %rbp
    0000013e: 	shlq	$0x5, %r9
    00000142: 	addq	%rax, %r9
    00000145: 	cmpq	%r10, %rbp
    00000148: 	setae	%r13b
    0000014c: 	cmpq	%r9, %r8
    0000014f: 	setae	%r10b
    00000153: 	addq	%rdx, %rbx
    00000156: 	orl	%r13d, %r10d
    00000159: 	cmpq	%rbx, %rbp
    0000015c: 	setae	%bl
    0000015f: 	cmpq	%r9, %rdx
    00000162: 	setae	%r9b
    00000166: 	orl	%ebx, %r9d
    00000169: 	testb	%r9b, %r10b
    0000016c: 	je	.Ltmp1335 # Offset: 364
    00000172: 	leal	-0x1(%rcx), %r9d
    00000176: 	cmpl	$0x8, %r9d
    0000017a: 	jbe	.Ltmp1335 # Offset: 378
    00000180: 	movl	%ecx, %r10d
    00000183: 	xorl	%r9d, %r9d
    00000186: 	shrl	%r10d
    00000189: 	shlq	$0x4, %r10
    0000018d: 	nopl	(%rax) # Size: 3
.Ltmp1336:
    00000190: 	movdqu	(%rdx,%r9), %xmm1
    00000196: 	movdqu	(%r8,%r9), %xmm0
    0000019c: 	movq	%xmm1, 0x10(%rax,%r9,4)
    000001a3: 	movhps	%xmm1, 0x30(%rax,%r9,4)
    000001a9: 	movq	%xmm0, 0x18(%rax,%r9,4)
    000001b0: 	movhps	%xmm0, 0x38(%rax,%r9,4)
    000001b6: 	addq	$0x10, %r9
    000001ba: 	cmpq	%r10, %r9
    000001bd: 	jne	.Ltmp1336 # Offset: 445
    000001bf: 	movl	%ecx, %r10d
    000001c2: 	andl	$-0x2, %r10d
    000001c6: 	andl	$0x1, %ecx
    000001c9: 	je	.Ltmp1337 # Offset: 457
    000001cb: 	movl	%r10d, %r9d
    000001ce: 	leal	0x2(,%r10,4), %ecx
    000001d6: 	movq	(%rdx,%r9,8), %r10
    000001da: 	movslq	%ecx, %rcx
    000001dd: 	movq	%r10, (%rax,%rcx,8)
    000001e1: 	movq	(%r8,%r9,8), %r9
    000001e5: 	movq	%r9, 0x8(%rax,%rcx,8)
.Ltmp1337:
    000001ea: 	addq	%r14, %rax
    000001ed: 	addq	%r11, %rdi
    000001f0: 	addq	%r11, %rsi
    000001f3: 	addq	%r11, %rdx
    000001f6: 	addq	%r11, %r8
    000001f9: 	addl	$-0x80, %r15d
    000001fd: 	cmpl	-0x10(%rsp), %r12d
    00000202: 	jl	.Ltmp1338 # Offset: 514
.Ltmp1330:
    00000208: 	popq	%rbx
    00000209: 	popq	%rbp
    0000020a: 	popq	%r12
    0000020c: 	popq	%r13
    0000020e: 	popq	%r14
    00000210: 	popq	%r15
    00000212: 	retq # Offset: 530
    00000213: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1331:
    00000218: 	leal	(,%r15,4), %r9d
    00000220: 	movslq	%r15d, %r11
    00000223: 	movl	%r15d, %ecx
    00000226: 	movslq	%r9d, %r9
    00000229: 	shlq	$0x3, %r11
    0000022d: 	leaq	(,%r9,8), %r14
    00000235: 	testl	%r15d, %r15d
    00000238: 	jg	.Ltmp1339 # Offset: 568
    0000023e: 	jmp	.Ltmp1337 # Offset: 574
.Ltmp1335:
    00000240: 	movl	%ecx, %ecx
    00000242: 	xorl	%r9d, %r9d
    00000245: 	shlq	$0x3, %rcx
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp1340:
    00000250: 	movq	(%rdx,%r9), %r10
    00000254: 	movq	%r10, 0x10(%rax,%r9,4)
    00000259: 	movq	(%r8,%r9), %r10
    0000025d: 	movq	%r10, 0x18(%rax,%r9,4)
    00000262: 	addq	$0x8, %r9
    00000266: 	cmpq	%r9, %rcx
    00000269: 	jne	.Ltmp1340 # Offset: 617
    0000026b: 	jmp	.Ltmp1337 # Offset: 619
.Ltmp1332:
    00000270: 	movq	%rax, %rbp
    00000273: 	xorl	%r10d, %r10d
    00000276: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1341:
    00000280: 	movq	(%rdi,%r10,8), %r13
    00000284: 	addq	$0x20, %rbp
    00000288: 	movq	%r13, -0x20(%rbp)
    0000028c: 	movq	(%rsi,%r10,8), %r13
    00000290: 	addq	$0x1, %r10
    00000294: 	movq	%r13, -0x18(%rbp)
    00000298: 	cmpl	%r10d, %ecx
    0000029b: 	jg	.Ltmp1341 # Offset: 667
    0000029d: 	jmp	.Ltmp1334 # Offset: 669
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version5ImEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version6ImEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 146
  State       : disassembled
  Address     : 0x1c1d0
  Size        : 0x3c4
  MaxSize     : 0x3d0
  Offset      : 0x1c1d0
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version6ImEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0145:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r9d, -0x24(%rsp)
    00000013: 	movl	%r9d, -0x18(%rsp)
    00000018: 	testl	%r9d, %r9d
    0000001b: 	jle	.Ltmp1342 # Offset: 27
    00000021: 	movq	%rdi, %rax
    00000024: 	movq	%r8, %r12
    00000027: 	movq	%rdx, %rdi
    0000002a: 	xorl	%r14d, %r14d
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp1356:
    00000030: 	subl	$-0x80, %r14d
    00000034: 	cmpl	-0x24(%rsp), %r14d
    00000039: 	jg	.Ltmp1343 # Offset: 57
    0000003f: 	movq	$0x1000, -0x20(%rsp)
    00000048: 	movl	$0x400, %ebx
    0000004d: 	movl	$0x80, %edx
.Ltmp1358:
    00000052: 	movslq	%edx, %r8
    00000055: 	movl	$0x8, %r15d
    0000005b: 	leaq	-0x1(%r8), %rbp
    0000005f: 	leaq	(,%r8,8), %r11
    00000067: 	shlq	$0x5, %rbp
    0000006b: 	testl	%edx, %edx
    0000006d: 	leaq	0x8(%rbp), %r9
    00000071: 	cmovleq	%r15, %r9
    00000075: 	addq	%rax, %r9
    00000078: 	cmpq	%r9, %rsi
    0000007b: 	movl	$0x8, %r9d
    00000081: 	setae	%r10b
    00000085: 	testl	%edx, %edx
    00000087: 	cmovgq	%r11, %r9
    0000008b: 	addq	%rsi, %r9
    0000008e: 	cmpq	%r9, %rax
    00000091: 	setae	%r9b
    00000095: 	orb	%r10b, %r9b
    00000098: 	je	.Ltmp1344 # Offset: 152
    0000009e: 	cmpl	$0xf, %edx
    000000a1: 	jle	.Ltmp1344 # Offset: 161
    000000a7: 	testl	%edx, %edx
    000000a9: 	movl	$0x1, %r13d
    000000af: 	cmovgl	%edx, %r13d
    000000b3: 	xorl	%r9d, %r9d
    000000b6: 	movl	%r13d, %r10d
    000000b9: 	shrl	%r10d
    000000bc: 	shlq	$0x4, %r10
.Ltmp1345:
    000000c0: 	movdqu	(%rsi,%r9), %xmm0
    000000c6: 	movq	%xmm0, (%rax,%r9,4)
    000000cc: 	movhps	%xmm0, 0x20(%rax,%r9,4)
    000000d2: 	addq	$0x10, %r9
    000000d6: 	cmpq	%r9, %r10
    000000d9: 	jne	.Ltmp1345 # Offset: 217
    000000db: 	movl	%r13d, %r9d
    000000de: 	andl	$-0x2, %r9d
    000000e2: 	andl	$0x1, %r13d
    000000e6: 	je	.Ltmp1346 # Offset: 230
    000000e8: 	movl	%r9d, %r10d
    000000eb: 	shll	$0x2, %r9d
    000000ef: 	movq	(%rsi,%r10,8), %r10
    000000f3: 	movslq	%r9d, %r9
    000000f6: 	movq	%r10, (%rax,%r9,8)
.Ltmp1346:
    000000fa: 	leal	-0x1(%rdx), %r15d
    000000fe: 	leaq	0x10(%rax,%rbp), %r10
    00000103: 	cmpl	$0xe, %r15d
    00000107: 	leaq	0x8(%rax), %r9
    0000010b: 	movl	%r15d, -0x14(%rsp)
    00000110: 	seta	%r13b
    00000114: 	cmpq	%r10, %rdi
    00000117: 	leaq	(%rdi,%r11), %r10
    0000011b: 	setae	%r15b
    0000011f: 	cmpq	%r10, %r9
    00000122: 	setae	%r10b
    00000126: 	orb	%r15b, %r10b
    00000129: 	je	.Ltmp1347 # Offset: 297
    0000012f: 	testb	%r13b, %r13b
    00000132: 	je	.Ltmp1347 # Offset: 306
    00000138: 	movl	%edx, %r10d
    0000013b: 	xorl	%r9d, %r9d
    0000013e: 	shrl	%r10d
    00000141: 	shlq	$0x4, %r10
    00000145: 	nopl	(%rax) # Size: 3
.Ltmp1348:
    00000148: 	movdqu	(%rdi,%r9), %xmm0
    0000014e: 	movq	%xmm0, 0x8(%rax,%r9,4)
    00000155: 	movhps	%xmm0, 0x28(%rax,%r9,4)
    0000015b: 	addq	$0x10, %r9
    0000015f: 	cmpq	%r10, %r9
    00000162: 	jne	.Ltmp1348 # Offset: 354
    00000164: 	movl	%edx, %r9d
    00000167: 	andl	$-0x2, %r9d
    0000016b: 	testb	$0x1, %dl
    0000016e: 	je	.Ltmp1349 # Offset: 366
    00000170: 	movl	%r9d, %r10d
    00000173: 	leal	0x1(,%r9,4), %r9d
    0000017b: 	movq	(%rdi,%r10,8), %r10
    0000017f: 	movslq	%r9d, %r9
    00000182: 	movq	%r10, (%rax,%r9,8)
.Ltmp1349:
    00000186: 	leaq	0x18(%rax,%rbp), %r9
    0000018b: 	leaq	0x10(%rax), %r10
    0000018f: 	cmpq	%r9, %rcx
    00000192: 	leaq	(%rcx,%r11), %r9
    00000196: 	setae	%bpl
    0000019a: 	cmpq	%r9, %r10
    0000019d: 	setae	%r9b
    000001a1: 	orb	%bpl, %r9b
    000001a4: 	je	.Ltmp1350 # Offset: 420
    000001aa: 	testb	%r13b, %r13b
    000001ad: 	je	.Ltmp1350 # Offset: 429
    000001b3: 	movl	%edx, %r10d
    000001b6: 	xorl	%r9d, %r9d
    000001b9: 	shrl	%r10d
    000001bc: 	shlq	$0x4, %r10
.Ltmp1351:
    000001c0: 	movdqu	(%rcx,%r9), %xmm0
    000001c6: 	movq	%xmm0, 0x10(%rax,%r9,4)
    000001cd: 	movhps	%xmm0, 0x30(%rax,%r9,4)
    000001d3: 	addq	$0x10, %r9
    000001d7: 	cmpq	%r9, %r10
    000001da: 	jne	.Ltmp1351 # Offset: 474
    000001dc: 	movl	%edx, %r9d
    000001df: 	andl	$-0x2, %r9d
    000001e3: 	testb	$0x1, %dl
    000001e6: 	je	.Ltmp1352 # Offset: 486
    000001e8: 	movl	%r9d, %r10d
    000001eb: 	leal	0x2(,%r9,4), %r9d
    000001f3: 	movq	(%rcx,%r10,8), %r10
    000001f7: 	movslq	%r9d, %r9
    000001fa: 	movq	%r10, (%rax,%r9,8)
.Ltmp1352:
    000001fe: 	shlq	$0x5, %r8
    00000202: 	leaq	0x18(%rax), %r9
    00000206: 	addq	%rax, %r8
    00000209: 	cmpq	%r8, %r12
    0000020c: 	setae	%r8b
    00000210: 	addq	%r12, %r11
    00000213: 	cmpq	%r11, %r9
    00000216: 	setae	%r10b
    0000021a: 	orb	%r8b, %r10b
    0000021d: 	je	.Ltmp1353 # Offset: 541
    00000223: 	testb	%r13b, %r13b
    00000226: 	je	.Ltmp1353 # Offset: 550
    0000022c: 	movl	%edx, %r9d
    0000022f: 	xorl	%r8d, %r8d
    00000232: 	shrl	%r9d
    00000235: 	shlq	$0x4, %r9
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp1354:
    00000240: 	movdqu	(%r12,%r8), %xmm0
    00000246: 	movq	%xmm0, 0x18(%rax,%r8,4)
    0000024d: 	movhps	%xmm0, 0x38(%rax,%r8,4)
    00000253: 	addq	$0x10, %r8
    00000257: 	cmpq	%r9, %r8
    0000025a: 	jne	.Ltmp1354 # Offset: 602
    0000025c: 	movl	%edx, %r8d
    0000025f: 	andl	$-0x2, %r8d
    00000263: 	andl	$0x1, %edx
    00000266: 	je	.Ltmp1355 # Offset: 614
    00000268: 	movl	%r8d, %edx
    0000026b: 	movq	(%r12,%rdx,8), %r9
    0000026f: 	leal	0x3(,%r8,4), %edx
    00000277: 	movslq	%edx, %rdx
    0000027a: 	movq	%r9, (%rax,%rdx,8)
.Ltmp1355:
    0000027e: 	addl	$-0x80, -0x18(%rsp)
    00000283: 	addq	-0x20(%rsp), %rax
    00000288: 	addq	%rbx, %rsi
    0000028b: 	addq	%rbx, %rdi
    0000028e: 	addq	%rbx, %rcx
    00000291: 	addq	%rbx, %r12
    00000294: 	cmpl	-0x24(%rsp), %r14d
    00000299: 	jl	.Ltmp1356 # Offset: 665
.Ltmp1342:
    0000029f: 	popq	%rbx
    000002a0: 	popq	%rbp
    000002a1: 	popq	%r12
    000002a3: 	popq	%r13
    000002a5: 	popq	%r14
    000002a7: 	popq	%r15
    000002a9: 	retq # Offset: 681
    000002aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1343:
    000002b0: 	movslq	-0x18(%rsp), %rbx
    000002b5: 	movl	%ebx, %edx
    000002b7: 	testl	%ebx, %ebx
    000002b9: 	jle	.Ltmp1357 # Offset: 697
    000002bf: 	leal	(,%rbx,4), %r8d
    000002c7: 	shlq	$0x3, %rbx
    000002cb: 	movslq	%r8d, %r8
    000002ce: 	leaq	(,%r8,8), %r15
    000002d6: 	movq	%r15, -0x20(%rsp)
    000002db: 	jmp	.Ltmp1358 # Offset: 731
.Ltmp1353:
    000002e0: 	movl	-0x14(%rsp), %r8d
    000002e5: 	movq	%r12, %rdx
    000002e8: 	leaq	0x8(%r12,%r8,8), %r10
    000002ed: 	nopl	(%rax) # Size: 3
.Ltmp1359:
    000002f0: 	movq	(%rdx), %r8
    000002f3: 	addq	$0x8, %rdx
    000002f7: 	addq	$0x20, %r9
    000002fb: 	movq	%r8, -0x20(%r9)
    000002ff: 	cmpq	%rdx, %r10
    00000302: 	jne	.Ltmp1359 # Offset: 770
    00000304: 	jmp	.Ltmp1355 # Offset: 772
    00000309: 	nopl	(%rax) # Size: 7
.Ltmp1347:
    00000310: 	movl	-0x14(%rsp), %r15d
    00000315: 	movq	%rax, -0x10(%rsp)
    0000031a: 	movq	%rdi, %r10
    0000031d: 	leaq	0x8(%rdi,%r15,8), %r15
    00000322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1360:
    00000328: 	movq	(%r10), %rax
    0000032b: 	addq	$0x8, %r10
    0000032f: 	addq	$0x20, %r9
    00000333: 	movq	%rax, -0x20(%r9)
    00000337: 	cmpq	%r15, %r10
    0000033a: 	jne	.Ltmp1360 # Offset: 826
    0000033c: 	movq	-0x10(%rsp), %rax
    00000341: 	jmp	.Ltmp1349 # Offset: 833
    00000346: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1344:
    00000350: 	xorl	%r9d, %r9d
    00000353: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1361:
    00000358: 	movq	(%rsi,%r9,8), %r13
    0000035c: 	movq	%r9, %r10
    0000035f: 	addq	$0x1, %r9
    00000363: 	shlq	$0x5, %r10
    00000367: 	movq	%r13, (%rax,%r10)
    0000036b: 	cmpl	%r9d, %edx
    0000036e: 	jg	.Ltmp1361 # Offset: 878
    00000370: 	jmp	.Ltmp1346 # Offset: 880
    00000375: 	nopl	(%rax) # Size: 3
.Ltmp1350:
    00000378: 	movl	-0x14(%rsp), %ebp
    0000037c: 	movq	%rcx, %r9
    0000037f: 	leaq	0x8(%rcx,%rbp,8), %rbp
    00000384: 	nopl	(%rax) # Size: 4
.Ltmp1362:
    00000388: 	movq	(%r9), %r15
    0000038b: 	addq	$0x8, %r9
    0000038f: 	addq	$0x20, %r10
    00000393: 	movq	%r15, -0x20(%r10)
    00000397: 	cmpq	%r9, %rbp
    0000039a: 	jne	.Ltmp1362 # Offset: 922
    0000039c: 	jmp	.Ltmp1352 # Offset: 924
    000003a1: 	nopl	(%rax) # Size: 7
.Ltmp1357:
    000003a8: 	leal	(,%rbx,4), %edx
    000003af: 	shlq	$0x3, %rbx
    000003b3: 	movslq	%edx, %rdx
    000003b6: 	shlq	$0x3, %rdx
    000003ba: 	movq	%rdx, -0x20(%rsp)
    000003bf: 	jmp	.Ltmp1355 # Offset: 959
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version6ImEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave2to2_version1IfEvPT_PKS0_S3_i" after disassembly {
  Number      : 147
  State       : disassembled
  Address     : 0x1c5a0
  Size        : 0x14f
  MaxSize     : 0x150
  Offset      : 0x1c5a0
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version1IfEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0146:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp1363 # Offset: 6
    0000000c: 	movslq	%ecx, %r8
    0000000f: 	leaq	(,%r8,4), %rax
    00000017: 	leaq	(%rdi,%r8,8), %r9
    0000001b: 	leaq	(%rsi,%rax), %r8
    0000001f: 	cmpq	%r8, %rdi
    00000022: 	setae	%r8b
    00000026: 	cmpq	%r9, %rsi
    00000029: 	setae	%r10b
    0000002d: 	addq	%rdx, %rax
    00000030: 	orl	%r10d, %r8d
    00000033: 	cmpq	%rax, %rdi
    00000036: 	setae	%al
    00000039: 	cmpq	%r9, %rdx
    0000003c: 	setae	%r9b
    00000040: 	orl	%r9d, %eax
    00000043: 	testb	%al, %r8b
    00000046: 	je	.Ltmp1364 # Offset: 70
    0000004c: 	leal	-0x1(%rcx), %eax
    0000004f: 	cmpl	$0x2, %eax
    00000052: 	jbe	.Ltmp1364 # Offset: 82
    00000058: 	movl	%ecx, %r8d
    0000005b: 	xorl	%eax, %eax
    0000005d: 	shrl	$0x2, %r8d
    00000061: 	shlq	$0x4, %r8
    00000065: 	nopl	(%rax) # Size: 3
.Ltmp1365:
    00000068: 	movups	(%rsi,%rax), %xmm0
    0000006c: 	movups	(%rdx,%rax), %xmm1
    00000070: 	movaps	%xmm0, %xmm2
    00000073: 	unpckhps	%xmm1, %xmm0
    00000076: 	unpcklps	%xmm1, %xmm2
    00000079: 	movups	%xmm0, 0x10(%rdi,%rax,2)
    0000007e: 	movups	%xmm2, (%rdi,%rax,2)
    00000082: 	addq	$0x10, %rax
    00000086: 	cmpq	%rax, %r8
    00000089: 	jne	.Ltmp1365 # Offset: 137
    0000008b: 	movl	%ecx, %r8d
    0000008e: 	andl	$-0x4, %r8d
    00000092: 	testb	$0x3, %cl
    00000095: 	je	.Ltmp1363 # Offset: 149
    0000009b: 	movl	%r8d, %r11d
    0000009e: 	leal	(%r8,%r8), %eax
    000000a2: 	pushq	%rbx
    000000a3: 	movss	(%rsi,%r11,4), %xmm0
    000000a9: 	movslq	%eax, %r10
    000000ac: 	leaq	(,%r11,4), %r9
    000000b4: 	leaq	(,%r10,4), %rbx
    000000bc: 	movss	%xmm0, (%rdi,%r10,4)
    000000c2: 	movss	(%rdx,%r11,4), %xmm0
    000000c8: 	movss	%xmm0, 0x4(%rdi,%r10,4)
    000000cf: 	leal	0x1(%r8), %r10d
    000000d3: 	cmpl	%r10d, %ecx
    000000d6: 	jle	.Ltmp1366 # Offset: 214
    000000d8: 	movss	0x4(%rsi,%r9), %xmm0
    000000df: 	addl	$0x2, %eax
    000000e2: 	addl	$0x2, %r8d
    000000e6: 	cltq
    000000e8: 	movss	%xmm0, 0x8(%rdi,%rbx)
    000000ee: 	movss	0x4(%rdx,%r9), %xmm0
    000000f5: 	movss	%xmm0, 0x4(%rdi,%rax,4)
    000000fb: 	cmpl	%r8d, %ecx
    000000fe: 	jle	.Ltmp1366 # Offset: 254
    00000100: 	movss	0x8(%rsi,%r9), %xmm0
    00000107: 	movss	%xmm0, 0x10(%rdi,%rbx)
    0000010d: 	movss	0x8(%rdx,%r9), %xmm0
    00000114: 	movss	%xmm0, 0xc(%rdi,%rax,4)
.Ltmp1366:
    0000011a: 	popq	%rbx
    0000011b: 	retq # Offset: 283
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp1363:
    00000120: 	retq # Offset: 288
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp1364:
    00000128: 	movl	%ecx, %ecx
    0000012a: 	xorl	%eax, %eax
    0000012c: 	nopl	(%rax) # Size: 4
.Ltmp1367:
    00000130: 	movss	(%rsi,%rax,4), %xmm0
    00000135: 	movss	%xmm0, (%rdi,%rax,8)
    0000013a: 	movss	(%rdx,%rax,4), %xmm0
    0000013f: 	movss	%xmm0, 0x4(%rdi,%rax,8)
    00000145: 	addq	$0x1, %rax
    00000149: 	cmpq	%rax, %rcx
    0000014c: 	jne	.Ltmp1367 # Offset: 332
    0000014e: 	retq # Offset: 334
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version1IfEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version2IfEvPT_PKS0_S3_i" after disassembly {
  Number      : 148
  State       : disassembled
  Address     : 0x1c6f0
  Size        : 0x11f
  MaxSize     : 0x120
  Offset      : 0x1c6f0
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version2IfEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0147:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp1368 # Offset: 6
    0000000c: 	movslq	%ecx, %r8
    0000000f: 	leaq	(,%r8,4), %rax
    00000017: 	leaq	(%rdi,%r8,8), %r9
    0000001b: 	leaq	(%rsi,%rax), %r8
    0000001f: 	cmpq	%r8, %rdi
    00000022: 	setae	%r8b
    00000026: 	cmpq	%r9, %rsi
    00000029: 	setae	%r10b
    0000002d: 	addq	%rdx, %rax
    00000030: 	orl	%r10d, %r8d
    00000033: 	cmpq	%rax, %rdi
    00000036: 	setae	%al
    00000039: 	cmpq	%r9, %rdx
    0000003c: 	setae	%r9b
    00000040: 	orl	%r9d, %eax
    00000043: 	testb	%al, %r8b
    00000046: 	je	.Ltmp1369 # Offset: 70
    0000004c: 	leal	-0x1(%rcx), %eax
    0000004f: 	cmpl	$0x2, %eax
    00000052: 	jbe	.Ltmp1369 # Offset: 82
    00000058: 	movl	%ecx, %r8d
    0000005b: 	xorl	%eax, %eax
    0000005d: 	shrl	$0x2, %r8d
    00000061: 	shlq	$0x4, %r8
    00000065: 	nopl	(%rax) # Size: 3
.Ltmp1370:
    00000068: 	movups	(%rsi,%rax), %xmm0
    0000006c: 	movups	(%rdx,%rax), %xmm1
    00000070: 	movaps	%xmm0, %xmm2
    00000073: 	unpckhps	%xmm1, %xmm0
    00000076: 	unpcklps	%xmm1, %xmm2
    00000079: 	movups	%xmm0, 0x10(%rdi,%rax,2)
    0000007e: 	movups	%xmm2, (%rdi,%rax,2)
    00000082: 	addq	$0x10, %rax
    00000086: 	cmpq	%rax, %r8
    00000089: 	jne	.Ltmp1370 # Offset: 137
    0000008b: 	movl	%ecx, %r8d
    0000008e: 	andl	$-0x4, %r8d
    00000092: 	movl	%r8d, %eax
    00000095: 	leaq	(%rdi,%rax,8), %rdi
    00000099: 	shlq	$0x2, %rax
    0000009d: 	addq	%rax, %rsi
    000000a0: 	addq	%rdx, %rax
    000000a3: 	cmpl	%r8d, %ecx
    000000a6: 	je	.Ltmp1368 # Offset: 166
    000000a8: 	movss	(%rsi), %xmm0
    000000ac: 	leal	0x1(%r8), %edx
    000000b0: 	movss	%xmm0, (%rdi)
    000000b4: 	movss	(%rax), %xmm0
    000000b8: 	movss	%xmm0, 0x4(%rdi)
    000000bd: 	cmpl	%edx, %ecx
    000000bf: 	jle	.Ltmp1368 # Offset: 191
    000000c1: 	movss	0x4(%rsi), %xmm0
    000000c6: 	addl	$0x2, %r8d
    000000ca: 	movss	%xmm0, 0x8(%rdi)
    000000cf: 	movss	0x4(%rax), %xmm0
    000000d4: 	movss	%xmm0, 0xc(%rdi)
    000000d9: 	cmpl	%r8d, %ecx
    000000dc: 	jle	.Ltmp1368 # Offset: 220
    000000de: 	movss	0x8(%rsi), %xmm0
    000000e3: 	movss	%xmm0, 0x10(%rdi)
    000000e8: 	movss	0x8(%rax), %xmm0
    000000ed: 	movss	%xmm0, 0x14(%rdi)
    000000f2: 	retq # Offset: 242
    000000f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1369:
    000000f8: 	movl	%ecx, %ecx
    000000fa: 	xorl	%eax, %eax
    000000fc: 	nopl	(%rax) # Size: 4
.Ltmp1371:
    00000100: 	movss	(%rsi,%rax,4), %xmm0
    00000105: 	movss	%xmm0, (%rdi,%rax,8)
    0000010a: 	movss	(%rdx,%rax,4), %xmm0
    0000010f: 	movss	%xmm0, 0x4(%rdi,%rax,8)
    00000115: 	addq	$0x1, %rax
    00000119: 	cmpq	%rax, %rcx
    0000011c: 	jne	.Ltmp1371 # Offset: 284
.Ltmp1368:
    0000011e: 	retq # Offset: 286
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version2IfEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version3IfEvPT_PKS0_S3_i" after disassembly {
  Number      : 149
  State       : disassembled
  Address     : 0x1c810
  Size        : 0x1e9
  MaxSize     : 0x1f0
  Offset      : 0x1c810
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version3IfEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0148:
    00000000: 	endbr64
    00000004: 	movslq	%ecx, %rcx
    00000007: 	testq	%rcx, %rcx
    0000000a: 	je	.Ltmp1372 # Offset: 10
    00000010: 	movq	%rdi, %r8
    00000013: 	leaq	-0x1(%rcx), %rax
    00000017: 	movq	%rsi, %rdi
    0000001a: 	pushq	%rbx
    0000001b: 	cmpq	$0x6, %rax
    0000001f: 	leaq	(,%rcx,4), %rbx
    00000027: 	leaq	0x4(%r8,%rax,8), %rax
    0000002c: 	movq	%rdx, %rsi
    0000002f: 	seta	%r11b
    00000033: 	leaq	(%rdi,%rbx), %rdx
    00000037: 	cmpq	%rax, %rdi
    0000003a: 	setae	%al
    0000003d: 	cmpq	%rdx, %r8
    00000040: 	setae	%dl
    00000043: 	orb	%dl, %al
    00000045: 	je	.Ltmp1373 # Offset: 69
    0000004b: 	testb	%r11b, %r11b
    0000004e: 	je	.Ltmp1373 # Offset: 78
    00000054: 	movq	%rcx, %r10
    00000057: 	movq	%r8, %rax
    0000005a: 	xorl	%edx, %edx
    0000005c: 	shrq	$0x2, %r10
.Ltmp1374:
    00000060: 	movq	%rdx, %r9
    00000063: 	addq	$0x1, %rdx
    00000067: 	addq	$0x20, %rax
    0000006b: 	shlq	$0x4, %r9
    0000006f: 	movups	(%rdi,%r9), %xmm0
    00000074: 	movaps	%xmm0, %xmm1
    00000077: 	movss	%xmm0, -0x20(%rax)
    0000007c: 	shufps	$0x55, %xmm0, %xmm1
    00000080: 	movss	%xmm1, -0x18(%rax)
    00000085: 	movaps	%xmm0, %xmm1
    00000088: 	unpckhps	%xmm0, %xmm1
    0000008b: 	shufps	$0xff, %xmm0, %xmm0
    0000008f: 	movss	%xmm0, -0x8(%rax)
    00000094: 	movss	%xmm1, -0x10(%rax)
    00000099: 	cmpq	%r10, %rdx
    0000009c: 	jne	.Ltmp1374 # Offset: 156
    0000009e: 	movq	%rcx, %rax
    000000a1: 	andq	$-0x4, %rax
    000000a5: 	leaq	(%rdi,%rax,4), %rdi
    000000a9: 	leaq	(%r8,%rax,8), %rdx
    000000ad: 	cmpq	%rax, %rcx
    000000b0: 	je	.Ltmp1375 # Offset: 176
    000000b2: 	movss	(%rdi), %xmm0
    000000b6: 	leaq	0x1(%rax), %r9
    000000ba: 	movss	%xmm0, (%rdx)
    000000be: 	cmpq	%r9, %rcx
    000000c1: 	jbe	.Ltmp1375 # Offset: 193
    000000c3: 	movss	0x4(%rdi), %xmm0
    000000c8: 	addq	$0x2, %rax
    000000cc: 	movss	%xmm0, 0x8(%rdx)
    000000d1: 	cmpq	%rax, %rcx
    000000d4: 	jbe	.Ltmp1375 # Offset: 212
    000000d6: 	movss	0x8(%rdi), %xmm0
    000000db: 	movss	%xmm0, 0x10(%rdx)
.Ltmp1375:
    000000e0: 	leaq	(%r8,%rcx,8), %rax
    000000e4: 	leaq	0x4(%r8), %r10
    000000e8: 	cmpq	%rax, %rsi
    000000eb: 	setae	%al
    000000ee: 	addq	%rsi, %rbx
    000000f1: 	cmpq	%rbx, %r10
    000000f4: 	setae	%dl
    000000f7: 	orb	%dl, %al
    000000f9: 	je	.Ltmp1376 # Offset: 249
    000000ff: 	movq	%rcx, %r9
    00000102: 	movq	%r10, %rax
    00000105: 	xorl	%edx, %edx
    00000107: 	shrq	$0x2, %r9
    0000010b: 	testb	%r11b, %r11b
    0000010e: 	je	.Ltmp1376 # Offset: 270
    00000114: 	nopl	(%rax) # Size: 4
.Ltmp1377:
    00000118: 	movq	%rdx, %rdi
    0000011b: 	addq	$0x1, %rdx
    0000011f: 	addq	$0x20, %rax
    00000123: 	shlq	$0x4, %rdi
    00000127: 	movups	(%rsi,%rdi), %xmm0
    0000012b: 	movaps	%xmm0, %xmm1
    0000012e: 	movss	%xmm0, -0x20(%rax)
    00000133: 	shufps	$0x55, %xmm0, %xmm1
    00000137: 	movss	%xmm1, -0x18(%rax)
    0000013c: 	movaps	%xmm0, %xmm1
    0000013f: 	unpckhps	%xmm0, %xmm1
    00000142: 	shufps	$0xff, %xmm0, %xmm0
    00000146: 	movss	%xmm0, -0x8(%rax)
    0000014b: 	movss	%xmm1, -0x10(%rax)
    00000150: 	cmpq	%rdx, %r9
    00000153: 	jne	.Ltmp1377 # Offset: 339
    00000155: 	movq	%rcx, %rax
    00000158: 	andq	$-0x4, %rax
    0000015c: 	leaq	(%rsi,%rax,4), %rsi
    00000160: 	leaq	(%r10,%rax,8), %rdx
    00000164: 	cmpq	%rax, %rcx
    00000167: 	je	.Ltmp1378 # Offset: 359
    00000169: 	movss	(%rsi), %xmm0
    0000016d: 	leaq	0x1(%rax), %rdi
    00000171: 	movss	%xmm0, (%rdx)
    00000175: 	cmpq	%rdi, %rcx
    00000178: 	jbe	.Ltmp1378 # Offset: 376
    0000017a: 	movss	0x4(%rsi), %xmm0
    0000017f: 	addq	$0x2, %rax
    00000183: 	movss	%xmm0, 0x8(%rdx)
    00000188: 	cmpq	%rax, %rcx
    0000018b: 	jbe	.Ltmp1378 # Offset: 395
    0000018d: 	movss	0x8(%rsi), %xmm0
    00000192: 	movss	%xmm0, 0x10(%rdx)
.Ltmp1378:
    00000197: 	popq	%rbx
    00000198: 	retq # Offset: 408
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp1376:
    000001a0: 	xorl	%eax, %eax
    000001a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1379:
    000001a8: 	movss	(%rsi,%rax,4), %xmm0
    000001ad: 	movss	%xmm0, 0x4(%r8,%rax,8)
    000001b4: 	addq	$0x1, %rax
    000001b8: 	cmpq	%rax, %rcx
    000001bb: 	jne	.Ltmp1379 # Offset: 443
    000001bd: 	popq	%rbx
    000001be: 	retq # Offset: 446
    000001bf: 	nop # Size: 1
.Ltmp1373:
    000001c0: 	xorl	%eax, %eax
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1380:
    000001c8: 	movss	(%rdi,%rax,4), %xmm0
    000001cd: 	movss	%xmm0, (%r8,%rax,8)
    000001d3: 	addq	$0x1, %rax
    000001d7: 	cmpq	%rax, %rcx
    000001da: 	jne	.Ltmp1380 # Offset: 474
    000001dc: 	jmp	.Ltmp1375 # Offset: 476
    000001e1: 	nopl	(%rax) # Size: 7
.Ltmp1372:
    000001e8: 	retq # Offset: 488
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version3IfEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version4IfEvPT_PKS0_S3_i" after disassembly {
  Number      : 150
  State       : disassembled
  Address     : 0x1ca00
  Size        : 0x2b1
  MaxSize     : 0x2c0
  Offset      : 0x1ca00
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version4IfEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0149:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%ecx, -0xc(%rsp)
    00000012: 	testl	%ecx, %ecx
    00000014: 	jle	.Ltmp1381 # Offset: 20
    0000001a: 	movq	%rdi, %r8
    0000001d: 	movl	%ecx, %r14d
    00000020: 	movq	%rsi, %rdi
    00000023: 	xorl	%ebx, %ebx
    00000025: 	movq	%rdx, %rsi
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1389:
    00000030: 	addl	$0x200, %ebx
    00000036: 	cmpl	-0xc(%rsp), %ebx
    0000003a: 	jg	.Ltmp1382 # Offset: 58
    00000040: 	movl	$0x800, %r12d
    00000046: 	movl	$0x1000, %ebp
    0000004b: 	movl	$0x200, %ecx
.Ltmp1390:
    00000050: 	cmpq	$0x7, %rcx
    00000054: 	movl	$0x4, %edx
    00000059: 	leaq	-0x4(,%rcx,8), %rax
    00000061: 	seta	%r15b
    00000065: 	testq	%rcx, %rcx
    00000068: 	leaq	(,%rcx,4), %r10
    00000070: 	cmoveq	%rdx, %rax
    00000074: 	cmoveq	%rdx, %r10
    00000078: 	addq	%r8, %rax
    0000007b: 	leaq	(%rdi,%r10), %rdx
    0000007f: 	cmpq	%rax, %rdi
    00000082: 	setae	%al
    00000085: 	cmpq	%rdx, %r8
    00000088: 	setae	%dl
    0000008b: 	orb	%dl, %al
    0000008d: 	je	.Ltmp1383 # Offset: 141
    00000093: 	testb	%r15b, %r15b
    00000096: 	je	.Ltmp1383 # Offset: 150
    0000009c: 	testq	%rcx, %rcx
    0000009f: 	movl	$0x1, %r13d
    000000a5: 	movq	%r8, %rax
    000000a8: 	cmovneq	%rcx, %r13
    000000ac: 	xorl	%edx, %edx
    000000ae: 	movq	%r13, %r11
    000000b1: 	shrq	$0x2, %r11
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp1384:
    000000b8: 	movq	%rdx, %r9
    000000bb: 	addq	$0x1, %rdx
    000000bf: 	addq	$0x20, %rax
    000000c3: 	shlq	$0x4, %r9
    000000c7: 	movups	(%rdi,%r9), %xmm0
    000000cc: 	movaps	%xmm0, %xmm1
    000000cf: 	movss	%xmm0, -0x20(%rax)
    000000d4: 	shufps	$0x55, %xmm0, %xmm1
    000000d8: 	movss	%xmm1, -0x18(%rax)
    000000dd: 	movaps	%xmm0, %xmm1
    000000e0: 	unpckhps	%xmm0, %xmm1
    000000e3: 	shufps	$0xff, %xmm0, %xmm0
    000000e7: 	movss	%xmm0, -0x8(%rax)
    000000ec: 	movss	%xmm1, -0x10(%rax)
    000000f1: 	cmpq	%r11, %rdx
    000000f4: 	jne	.Ltmp1384 # Offset: 244
    000000f6: 	movq	%r13, %rax
    000000f9: 	andq	$-0x4, %rax
    000000fd: 	leaq	(%rdi,%rax,4), %r9
    00000101: 	leaq	(%r8,%rax,8), %rdx
    00000105: 	cmpq	%rax, %r13
    00000108: 	je	.Ltmp1385 # Offset: 264
    0000010a: 	movss	(%r9), %xmm0
    0000010f: 	leaq	0x1(%rax), %r11
    00000113: 	movss	%xmm0, (%rdx)
    00000117: 	cmpq	%r11, %rcx
    0000011a: 	jbe	.Ltmp1385 # Offset: 282
    0000011c: 	movss	0x4(%r9), %xmm0
    00000122: 	addq	$0x2, %rax
    00000126: 	movss	%xmm0, 0x8(%rdx)
    0000012b: 	cmpq	%rax, %rcx
    0000012e: 	jbe	.Ltmp1385 # Offset: 302
    00000130: 	movss	0x8(%r9), %xmm0
    00000136: 	movss	%xmm0, 0x10(%rdx)
.Ltmp1385:
    0000013b: 	testq	%rcx, %rcx
    0000013e: 	movl	$0x8, %edx
    00000143: 	leaq	(,%rcx,8), %rax
    0000014b: 	cmoveq	%rdx, %rax
    0000014f: 	leaq	0x4(%r8), %r11
    00000153: 	addq	%r8, %rax
    00000156: 	cmpq	%rax, %rsi
    00000159: 	setae	%al
    0000015c: 	addq	%rsi, %r10
    0000015f: 	cmpq	%r10, %r11
    00000162: 	setae	%dl
    00000165: 	orb	%dl, %al
    00000167: 	je	.Ltmp1386 # Offset: 359
    0000016d: 	testb	%r15b, %r15b
    00000170: 	je	.Ltmp1386 # Offset: 368
    00000176: 	testq	%rcx, %rcx
    00000179: 	movl	$0x1, %r13d
    0000017f: 	movq	%r11, %rax
    00000182: 	cmovneq	%rcx, %r13
    00000186: 	xorl	%edx, %edx
    00000188: 	movq	%r13, %r10
    0000018b: 	shrq	$0x2, %r10
    0000018f: 	nop # Size: 1
.Ltmp1387:
    00000190: 	movq	%rdx, %r9
    00000193: 	addq	$0x1, %rdx
    00000197: 	addq	$0x20, %rax
    0000019b: 	shlq	$0x4, %r9
    0000019f: 	movups	(%rsi,%r9), %xmm0
    000001a4: 	movaps	%xmm0, %xmm1
    000001a7: 	movss	%xmm0, -0x20(%rax)
    000001ac: 	shufps	$0x55, %xmm0, %xmm1
    000001b0: 	movss	%xmm1, -0x18(%rax)
    000001b5: 	movaps	%xmm0, %xmm1
    000001b8: 	unpckhps	%xmm0, %xmm1
    000001bb: 	shufps	$0xff, %xmm0, %xmm0
    000001bf: 	movss	%xmm0, -0x8(%rax)
    000001c4: 	movss	%xmm1, -0x10(%rax)
    000001c9: 	cmpq	%rdx, %r10
    000001cc: 	jne	.Ltmp1387 # Offset: 460
    000001ce: 	movq	%r13, %rax
    000001d1: 	andq	$-0x4, %rax
    000001d5: 	leaq	(%rsi,%rax,4), %r9
    000001d9: 	leaq	(%r11,%rax,8), %rdx
    000001dd: 	cmpq	%rax, %r13
    000001e0: 	je	.Ltmp1388 # Offset: 480
    000001e2: 	movss	(%r9), %xmm0
    000001e7: 	leaq	0x1(%rax), %r10
    000001eb: 	movss	%xmm0, (%rdx)
    000001ef: 	cmpq	%r10, %rcx
    000001f2: 	jbe	.Ltmp1388 # Offset: 498
    000001f4: 	movss	0x4(%r9), %xmm0
    000001fa: 	addq	$0x2, %rax
    000001fe: 	movss	%xmm0, 0x8(%rdx)
    00000203: 	cmpq	%rcx, %rax
    00000206: 	jae	.Ltmp1388 # Offset: 518
    00000208: 	movss	0x8(%r9), %xmm0
    0000020e: 	movss	%xmm0, 0x10(%rdx)
.Ltmp1388:
    00000213: 	addq	%rbp, %r8
    00000216: 	addq	%r12, %rdi
    00000219: 	addq	%r12, %rsi
    0000021c: 	subl	$0x200, %r14d
    00000223: 	cmpl	-0xc(%rsp), %ebx
    00000227: 	jl	.Ltmp1389 # Offset: 551
.Ltmp1381:
    0000022d: 	popq	%rbx
    0000022e: 	popq	%rbp
    0000022f: 	popq	%r12
    00000231: 	popq	%r13
    00000233: 	popq	%r14
    00000235: 	popq	%r15
    00000237: 	retq # Offset: 567
    00000238: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1382:
    00000240: 	leal	(%r14,%r14), %ebp
    00000244: 	movslq	%r14d, %rcx
    00000247: 	movslq	%ebp, %rbp
    0000024a: 	leaq	(,%rcx,4), %r12
    00000252: 	shlq	$0x2, %rbp
    00000256: 	testq	%rcx, %rcx
    00000259: 	jne	.Ltmp1390 # Offset: 601
    0000025f: 	jmp	.Ltmp1388 # Offset: 607
    00000261: 	nopl	(%rax) # Size: 7
.Ltmp1386:
    00000268: 	xorl	%eax, %eax
    0000026a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1391:
    00000270: 	movss	(%rsi,%rax,4), %xmm0
    00000275: 	movss	%xmm0, 0x4(%r8,%rax,8)
    0000027c: 	addq	$0x1, %rax
    00000280: 	cmpq	%rcx, %rax
    00000283: 	jb	.Ltmp1391 # Offset: 643
    00000285: 	jmp	.Ltmp1388 # Offset: 645
    00000287: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1383:
    00000290: 	xorl	%eax, %eax
    00000292: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1392:
    00000298: 	movss	(%rdi,%rax,4), %xmm0
    0000029d: 	movss	%xmm0, (%r8,%rax,8)
    000002a3: 	addq	$0x1, %rax
    000002a7: 	cmpq	%rax, %rcx
    000002aa: 	ja	.Ltmp1392 # Offset: 682
    000002ac: 	jmp	.Ltmp1385 # Offset: 684
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version4IfEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version5IfEvPT_PKS0_S3_i" after disassembly {
  Number      : 151
  State       : disassembled
  Address     : 0x1ccc0
  Size        : 0x2c2
  MaxSize     : 0x2d0
  Offset      : 0x1ccc0
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version5IfEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0150:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%ecx, -0xc(%rsp)
    00000012: 	testl	%ecx, %ecx
    00000014: 	jle	.Ltmp1393 # Offset: 20
    0000001a: 	movl	%ecx, %r11d
    0000001d: 	xorl	%r8d, %r8d
.Ltmp1401:
    00000020: 	addl	$0x200, %r8d
    00000027: 	cmpl	-0xc(%rsp), %r8d
    0000002c: 	jg	.Ltmp1394 # Offset: 44
    00000032: 	movl	$0x800, %r10d
    00000038: 	movl	$0x1000, %ebp
    0000003d: 	movl	$0x200, %eax
.Ltmp1402:
    00000042: 	movslq	%eax, %rbx
    00000045: 	testl	%eax, %eax
    00000047: 	movl	$0x4, %r15d
    0000004d: 	leaq	-0x4(,%rbx,8), %r9
    00000055: 	leaq	(,%rbx,4), %rcx
    0000005d: 	cmovleq	%r15, %r9
    00000061: 	addq	%rdi, %r9
    00000064: 	cmpq	%r9, %rsi
    00000067: 	movl	$0x4, %r9d
    0000006d: 	setae	%r12b
    00000071: 	testl	%eax, %eax
    00000073: 	cmovgq	%rcx, %r9
    00000077: 	addq	%rsi, %r9
    0000007a: 	cmpq	%r9, %rdi
    0000007d: 	setae	%r9b
    00000081: 	orb	%r9b, %r12b
    00000084: 	je	.Ltmp1395 # Offset: 132
    0000008a: 	cmpl	$0x7, %eax
    0000008d: 	jle	.Ltmp1395 # Offset: 141
    00000093: 	testl	%eax, %eax
    00000095: 	movl	$0x1, %r13d
    0000009b: 	movq	%rsi, %r12
    0000009e: 	movq	%rdi, %r9
    000000a1: 	cmovgl	%eax, %r13d
    000000a5: 	movl	%r13d, %r14d
    000000a8: 	shrl	$0x2, %r14d
    000000ac: 	subl	$0x1, %r14d
    000000b0: 	shlq	$0x4, %r14
    000000b4: 	leaq	0x10(%rsi,%r14), %r14
    000000b9: 	nopl	(%rax) # Size: 7
.Ltmp1396:
    000000c0: 	movups	(%r12), %xmm0
    000000c5: 	addq	$0x10, %r12
    000000c9: 	addq	$0x20, %r9
    000000cd: 	movaps	%xmm0, %xmm1
    000000d0: 	movss	%xmm0, -0x20(%r9)
    000000d6: 	shufps	$0x55, %xmm0, %xmm1
    000000da: 	movss	%xmm1, -0x18(%r9)
    000000e0: 	movaps	%xmm0, %xmm1
    000000e3: 	unpckhps	%xmm0, %xmm1
    000000e6: 	shufps	$0xff, %xmm0, %xmm0
    000000ea: 	movss	%xmm0, -0x8(%r9)
    000000f0: 	movss	%xmm1, -0x10(%r9)
    000000f6: 	cmpq	%r14, %r12
    000000f9: 	jne	.Ltmp1396 # Offset: 249
    000000fb: 	movl	%r13d, %r9d
    000000fe: 	andl	$-0x4, %r9d
    00000102: 	andl	$0x3, %r13d
    00000106: 	je	.Ltmp1397 # Offset: 262
    00000108: 	movl	%r9d, %r13d
    0000010b: 	leal	(%r9,%r9), %r12d
    0000010f: 	movss	(%rsi,%r13,4), %xmm0
    00000115: 	movslq	%r12d, %r12
    00000118: 	leaq	(,%r13,4), %r15
    00000120: 	leaq	(,%r12,4), %r14
    00000128: 	movss	%xmm0, (%rdi,%r12,4)
    0000012e: 	leal	0x1(%r9), %r12d
    00000132: 	cmpl	%r12d, %eax
    00000135: 	jle	.Ltmp1397 # Offset: 309
    00000137: 	movss	0x4(%rsi,%r15), %xmm0
    0000013e: 	addl	$0x2, %r9d
    00000142: 	movss	%xmm0, 0x8(%rdi,%r14)
    00000149: 	cmpl	%r9d, %eax
    0000014c: 	jle	.Ltmp1397 # Offset: 332
    0000014e: 	movss	0x8(%rsi,%r15), %xmm0
    00000155: 	movss	%xmm0, 0x10(%rdi,%r14)
.Ltmp1397:
    0000015c: 	leaq	(%rdi,%rbx,8), %rbx
    00000160: 	leaq	0x4(%rdi), %r9
    00000164: 	cmpq	%rbx, %rdx
    00000167: 	setae	%bl
    0000016a: 	addq	%rdx, %rcx
    0000016d: 	cmpq	%rcx, %r9
    00000170: 	setae	%cl
    00000173: 	orb	%cl, %bl
    00000175: 	je	.Ltmp1398 # Offset: 373
    0000017b: 	leal	-0x1(%rax), %ecx
    0000017e: 	cmpl	$0x6, %ecx
    00000181: 	jbe	.Ltmp1398 # Offset: 385
    00000187: 	movq	%r9, %rcx
    0000018a: 	movl	%eax, %r9d
    0000018d: 	movq	%rdx, %rbx
    00000190: 	shrl	$0x2, %r9d
    00000194: 	subl	$0x1, %r9d
    00000198: 	shlq	$0x4, %r9
    0000019c: 	leaq	0x10(%rdx,%r9), %r9
    000001a1: 	nopl	(%rax) # Size: 7
.Ltmp1399:
    000001a8: 	movups	(%rbx), %xmm0
    000001ab: 	addq	$0x10, %rbx
    000001af: 	addq	$0x20, %rcx
    000001b3: 	movaps	%xmm0, %xmm1
    000001b6: 	movss	%xmm0, -0x20(%rcx)
    000001bb: 	shufps	$0x55, %xmm0, %xmm1
    000001bf: 	movss	%xmm1, -0x18(%rcx)
    000001c4: 	movaps	%xmm0, %xmm1
    000001c7: 	unpckhps	%xmm0, %xmm1
    000001ca: 	shufps	$0xff, %xmm0, %xmm0
    000001ce: 	movss	%xmm0, -0x8(%rcx)
    000001d3: 	movss	%xmm1, -0x10(%rcx)
    000001d8: 	cmpq	%r9, %rbx
    000001db: 	jne	.Ltmp1399 # Offset: 475
    000001dd: 	movl	%eax, %ecx
    000001df: 	andl	$-0x4, %ecx
    000001e2: 	testb	$0x3, %al
    000001e4: 	je	.Ltmp1400 # Offset: 484
    000001e6: 	movl	%ecx, %ebx
    000001e8: 	leal	(%rcx,%rcx), %r9d
    000001ec: 	movss	(%rdx,%rbx,4), %xmm0
    000001f1: 	leaq	(,%rbx,4), %r12
    000001f9: 	leal	0x1(%r9), %ebx
    000001fd: 	movslq	%ebx, %rbx
    00000200: 	movss	%xmm0, (%rdi,%rbx,4)
    00000205: 	leal	0x1(%rcx), %ebx
    00000208: 	cmpl	%ebx, %eax
    0000020a: 	jle	.Ltmp1400 # Offset: 522
    0000020c: 	movss	0x4(%rdx,%r12), %xmm0
    00000213: 	leal	0x3(%r9), %ebx
    00000217: 	addl	$0x2, %ecx
    0000021a: 	movslq	%ebx, %rbx
    0000021d: 	movss	%xmm0, (%rdi,%rbx,4)
    00000222: 	cmpl	%ecx, %eax
    00000224: 	jle	.Ltmp1400 # Offset: 548
    00000226: 	movss	0x8(%rdx,%r12), %xmm0
    0000022d: 	addl	$0x5, %r9d
    00000231: 	movslq	%r9d, %r9
    00000234: 	movss	%xmm0, (%rdi,%r9,4)
.Ltmp1400:
    0000023a: 	addq	%rbp, %rdi
    0000023d: 	addq	%r10, %rsi
    00000240: 	addq	%r10, %rdx
    00000243: 	subl	$0x200, %r11d
    0000024a: 	cmpl	-0xc(%rsp), %r8d
    0000024f: 	jl	.Ltmp1401 # Offset: 591
.Ltmp1393:
    00000255: 	popq	%rbx
    00000256: 	popq	%rbp
    00000257: 	popq	%r12
    00000259: 	popq	%r13
    0000025b: 	popq	%r14
    0000025d: 	popq	%r15
    0000025f: 	retq # Offset: 607
.Ltmp1394:
    00000260: 	leal	(%r11,%r11), %ebp
    00000264: 	movslq	%r11d, %r10
    00000267: 	movl	%r11d, %eax
    0000026a: 	movslq	%ebp, %rbp
    0000026d: 	shlq	$0x2, %r10
    00000271: 	shlq	$0x2, %rbp
    00000275: 	testl	%r11d, %r11d
    00000278: 	jg	.Ltmp1402 # Offset: 632
    0000027e: 	jmp	.Ltmp1400 # Offset: 638
.Ltmp1398:
    00000280: 	movl	%eax, %eax
    00000282: 	xorl	%ecx, %ecx
    00000284: 	nopl	(%rax) # Size: 4
.Ltmp1403:
    00000288: 	movss	(%rdx,%rcx,4), %xmm0
    0000028d: 	movss	%xmm0, 0x4(%rdi,%rcx,8)
    00000293: 	addq	$0x1, %rcx
    00000297: 	cmpq	%rax, %rcx
    0000029a: 	jne	.Ltmp1403 # Offset: 666
    0000029c: 	jmp	.Ltmp1400 # Offset: 668
    0000029e: 	nop # Size: 2
.Ltmp1395:
    000002a0: 	xorl	%r9d, %r9d
    000002a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1404:
    000002a8: 	movss	(%rsi,%r9,4), %xmm0
    000002ae: 	movss	%xmm0, (%rdi,%r9,8)
    000002b4: 	addq	$0x1, %r9
    000002b8: 	cmpl	%r9d, %eax
    000002bb: 	jg	.Ltmp1404 # Offset: 699
    000002bd: 	jmp	.Ltmp1397 # Offset: 701
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version5IfEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version6IfEvPT_PKS0_S3_i" after disassembly {
  Number      : 152
  State       : disassembled
  Address     : 0x1cf90
  Size        : 0x291
  MaxSize     : 0x2a0
  Offset      : 0x1cf90
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version6IfEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0151:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp1405 # Offset: 6
    0000000c: 	pushq	%r15
    0000000e: 	movq	%rsi, %r8
    00000011: 	movl	%ecx, %r15d
    00000014: 	movq	%rdx, %rsi
    00000017: 	pushq	%r14
    00000019: 	xorl	%r11d, %r11d
    0000001c: 	pushq	%r13
    0000001e: 	pushq	%r12
    00000020: 	pushq	%rbp
    00000021: 	movl	%ecx, %ebp
    00000023: 	pushq	%rbx
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1413:
    00000028: 	addl	$0x200, %r11d
    0000002f: 	cmpl	%r15d, %r11d
    00000032: 	jg	.Ltmp1406 # Offset: 50
    00000038: 	movl	$0x800, %r9d
    0000003e: 	movl	$0x1000, %r10d
    00000044: 	movl	$0x200, %ecx
.Ltmp1414:
    00000049: 	movslq	%ecx, %r12
    0000004c: 	testl	%ecx, %ecx
    0000004e: 	movl	$0x4, %edx
    00000053: 	leaq	-0x4(,%r12,8), %rax
    0000005b: 	leaq	(,%r12,4), %rbx
    00000063: 	cmovleq	%rdx, %rax
    00000067: 	addq	%rdi, %rax
    0000006a: 	cmpq	%rax, %r8
    0000006d: 	movl	$0x4, %eax
    00000072: 	setae	%dl
    00000075: 	testl	%ecx, %ecx
    00000077: 	cmovgq	%rbx, %rax
    0000007b: 	addq	%r8, %rax
    0000007e: 	cmpq	%rax, %rdi
    00000081: 	setae	%al
    00000084: 	orb	%al, %dl
    00000086: 	je	.Ltmp1407 # Offset: 134
    0000008c: 	cmpl	$0x7, %ecx
    0000008f: 	jle	.Ltmp1407 # Offset: 143
    00000095: 	testl	%ecx, %ecx
    00000097: 	movl	$0x1, %r14d
    0000009d: 	movq	%r8, %rdx
    000000a0: 	movq	%rdi, %rax
    000000a3: 	cmovgl	%ecx, %r14d
    000000a7: 	movl	%r14d, %r13d
    000000aa: 	shrl	$0x2, %r13d
    000000ae: 	subl	$0x1, %r13d
    000000b2: 	shlq	$0x4, %r13
    000000b6: 	leaq	0x10(%r8,%r13), %r13
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1408:
    000000c0: 	movups	(%rdx), %xmm0
    000000c3: 	addq	$0x10, %rdx
    000000c7: 	addq	$0x20, %rax
    000000cb: 	movaps	%xmm0, %xmm1
    000000ce: 	movss	%xmm0, -0x20(%rax)
    000000d3: 	shufps	$0x55, %xmm0, %xmm1
    000000d7: 	movss	%xmm1, -0x18(%rax)
    000000dc: 	movaps	%xmm0, %xmm1
    000000df: 	unpckhps	%xmm0, %xmm1
    000000e2: 	shufps	$0xff, %xmm0, %xmm0
    000000e6: 	movss	%xmm0, -0x8(%rax)
    000000eb: 	movss	%xmm1, -0x10(%rax)
    000000f0: 	cmpq	%r13, %rdx
    000000f3: 	jne	.Ltmp1408 # Offset: 243
    000000f5: 	movl	%r14d, %eax
    000000f8: 	andl	$-0x4, %eax
    000000fb: 	movl	%eax, %edx
    000000fd: 	leaq	(%rdi,%rdx,8), %r13
    00000101: 	cmpl	%eax, %r14d
    00000104: 	je	.Ltmp1409 # Offset: 260
    00000106: 	movss	(%r8,%rdx,4), %xmm0
    0000010c: 	leaq	(,%rdx,4), %r14
    00000114: 	leal	0x1(%rax), %edx
    00000117: 	movss	%xmm0, (%r13)
    0000011d: 	cmpl	%edx, %ecx
    0000011f: 	jle	.Ltmp1409 # Offset: 287
    00000121: 	movss	0x4(%r8,%r14), %xmm0
    00000128: 	addl	$0x2, %eax
    0000012b: 	movss	%xmm0, 0x8(%r13)
    00000131: 	cmpl	%eax, %ecx
    00000133: 	jle	.Ltmp1409 # Offset: 307
    00000135: 	movss	0x8(%r8,%r14), %xmm0
    0000013c: 	movss	%xmm0, 0x10(%r13)
.Ltmp1409:
    00000142: 	leaq	(%rdi,%r12,8), %rax
    00000146: 	leaq	0x4(%rdi), %r13
    0000014a: 	cmpq	%rax, %rsi
    0000014d: 	setae	%al
    00000150: 	addq	%rsi, %rbx
    00000153: 	cmpq	%rbx, %r13
    00000156: 	setae	%dl
    00000159: 	orb	%dl, %al
    0000015b: 	je	.Ltmp1410 # Offset: 347
    00000161: 	leal	-0x1(%rcx), %eax
    00000164: 	cmpl	$0x6, %eax
    00000167: 	jbe	.Ltmp1410 # Offset: 359
    0000016d: 	movl	%ecx, %ebx
    0000016f: 	movq	%rsi, %rdx
    00000172: 	movq	%r13, %rax
    00000175: 	shrl	$0x2, %ebx
    00000178: 	subl	$0x1, %ebx
    0000017b: 	shlq	$0x4, %rbx
    0000017f: 	leaq	0x10(%rsi,%rbx), %rbx
    00000184: 	nopl	(%rax) # Size: 4
.Ltmp1411:
    00000188: 	movups	(%rdx), %xmm0
    0000018b: 	addq	$0x10, %rdx
    0000018f: 	addq	$0x20, %rax
    00000193: 	movaps	%xmm0, %xmm1
    00000196: 	movss	%xmm0, -0x20(%rax)
    0000019b: 	shufps	$0x55, %xmm0, %xmm1
    0000019f: 	movss	%xmm1, -0x18(%rax)
    000001a4: 	movaps	%xmm0, %xmm1
    000001a7: 	unpckhps	%xmm0, %xmm1
    000001aa: 	shufps	$0xff, %xmm0, %xmm0
    000001ae: 	movss	%xmm0, -0x8(%rax)
    000001b3: 	movss	%xmm1, -0x10(%rax)
    000001b8: 	cmpq	%rdx, %rbx
    000001bb: 	jne	.Ltmp1411 # Offset: 443
    000001bd: 	movl	%ecx, %eax
    000001bf: 	andl	$-0x4, %eax
    000001c2: 	movl	%eax, %edx
    000001c4: 	leaq	(%r13,%rdx,8), %rbx
    000001c9: 	cmpl	%ecx, %eax
    000001cb: 	je	.Ltmp1412 # Offset: 459
    000001cd: 	movss	(%rsi,%rdx,4), %xmm0
    000001d2: 	leaq	(,%rdx,4), %r12
    000001da: 	leal	0x1(%rax), %edx
    000001dd: 	movss	%xmm0, (%rbx)
    000001e1: 	cmpl	%edx, %ecx
    000001e3: 	jle	.Ltmp1412 # Offset: 483
    000001e5: 	movss	0x4(%rsi,%r12), %xmm0
    000001ec: 	addl	$0x2, %eax
    000001ef: 	movss	%xmm0, 0x8(%rbx)
    000001f4: 	cmpl	%eax, %ecx
    000001f6: 	jle	.Ltmp1412 # Offset: 502
    000001f8: 	movss	0x8(%rsi,%r12), %xmm0
    000001ff: 	movss	%xmm0, 0x10(%rbx)
.Ltmp1412:
    00000204: 	addq	%r10, %rdi
    00000207: 	addq	%r9, %r8
    0000020a: 	addq	%r9, %rsi
    0000020d: 	subl	$0x200, %ebp
    00000213: 	cmpl	%r15d, %r11d
    00000216: 	jl	.Ltmp1413 # Offset: 534
    0000021c: 	popq	%rbx
    0000021d: 	popq	%rbp
    0000021e: 	popq	%r12
    00000220: 	popq	%r13
    00000222: 	popq	%r14
    00000224: 	popq	%r15
    00000226: 	retq # Offset: 550
    00000227: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1406:
    00000230: 	leal	(%rbp,%rbp), %r10d
    00000235: 	movslq	%ebp, %r9
    00000238: 	movl	%ebp, %ecx
    0000023a: 	movslq	%r10d, %r10
    0000023d: 	shlq	$0x2, %r9
    00000241: 	shlq	$0x2, %r10
    00000245: 	testl	%ebp, %ebp
    00000247: 	jg	.Ltmp1414 # Offset: 583
    0000024d: 	jmp	.Ltmp1412 # Offset: 589
    0000024f: 	nop # Size: 1
.Ltmp1410:
    00000250: 	movl	%ecx, %ecx
    00000252: 	xorl	%eax, %eax
    00000254: 	nopl	(%rax) # Size: 4
.Ltmp1415:
    00000258: 	movss	(%rsi,%rax,4), %xmm0
    0000025d: 	movss	%xmm0, 0x4(%rdi,%rax,8)
    00000263: 	addq	$0x1, %rax
    00000267: 	cmpq	%rcx, %rax
    0000026a: 	jne	.Ltmp1415 # Offset: 618
    0000026c: 	jmp	.Ltmp1412 # Offset: 620
    0000026e: 	nop # Size: 2
.Ltmp1407:
    00000270: 	xorl	%eax, %eax
    00000272: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1416:
    00000278: 	movss	(%r8,%rax,4), %xmm0
    0000027e: 	movss	%xmm0, (%rdi,%rax,8)
    00000283: 	addq	$0x1, %rax
    00000287: 	cmpl	%eax, %ecx
    00000289: 	jg	.Ltmp1416 # Offset: 649
    0000028b: 	jmp	.Ltmp1409 # Offset: 651
.Ltmp1405:
    00000290: 	retq # Offset: 656
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version6IfEvPT_PKS0_S3_i"

Binary Function "_Z23interleave3to3_version1IfEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 153
  State       : disassembled
  Address     : 0x1d230
  Size        : 0x3c
  MaxSize     : 0x40
  Offset      : 0x1d230
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version1IfEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0152:
    00000000: 	endbr64
    00000004: 	testl	%r8d, %r8d
    00000007: 	jle	.Ltmp1417 # Offset: 7
    00000009: 	movslq	%r8d, %r8
    0000000c: 	xorl	%eax, %eax
    0000000e: 	nop # Size: 2
.Ltmp1418:
    00000010: 	movss	(%rsi,%rax,4), %xmm0
    00000015: 	addq	$0xc, %rdi
    00000019: 	movss	%xmm0, -0xc(%rdi)
    0000001e: 	movss	(%rdx,%rax,4), %xmm0
    00000023: 	movss	%xmm0, -0x8(%rdi)
    00000028: 	movss	(%rcx,%rax,4), %xmm0
    0000002d: 	addq	$0x1, %rax
    00000031: 	movss	%xmm0, -0x4(%rdi)
    00000036: 	cmpq	%rax, %r8
    00000039: 	jne	.Ltmp1418 # Offset: 57
.Ltmp1417:
    0000003b: 	retq # Offset: 59
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version1IfEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version2IfEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 154
  State       : disassembled
  Address     : 0x1d270
  Size        : 0x2f9
  MaxSize     : 0x300
  Offset      : 0x1d270
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version2IfEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0153:
    00000000: 	endbr64
    00000004: 	movslq	%r8d, %r8
    00000007: 	testq	%r8, %r8
    0000000a: 	je	.Ltmp1419 # Offset: 10
    00000010: 	leaq	-0x1(%r8), %rax
    00000014: 	pushq	%r12
    00000016: 	movq	%rdi, %r9
    00000019: 	movq	%rsi, %rdi
    0000001c: 	cmpq	$0x6, %rax
    00000020: 	pushq	%rbp
    00000021: 	leaq	(,%r8,4), %rbp
    00000029: 	movq	%rdx, %rsi
    0000002c: 	pushq	%rbx
    0000002d: 	leaq	(%r8,%r8,2), %rbx
    00000031: 	seta	%r11b
    00000035: 	leaq	(%rdi,%rbp), %rdx
    00000039: 	shlq	$0x2, %rbx
    0000003d: 	leaq	-0x8(%r9,%rbx), %rax
    00000042: 	cmpq	%rax, %rdi
    00000045: 	setae	%al
    00000048: 	cmpq	%rdx, %r9
    0000004b: 	setae	%dl
    0000004e: 	orb	%dl, %al
    00000050: 	je	.Ltmp1420 # Offset: 80
    00000056: 	testb	%r11b, %r11b
    00000059: 	je	.Ltmp1420 # Offset: 89
    0000005f: 	movq	%r8, %r12
    00000062: 	movq	%r9, %rax
    00000065: 	xorl	%edx, %edx
    00000067: 	shrq	$0x2, %r12
    0000006b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1421:
    00000070: 	movq	%rdx, %r10
    00000073: 	addq	$0x1, %rdx
    00000077: 	addq	$0x30, %rax
    0000007b: 	shlq	$0x4, %r10
    0000007f: 	movups	(%rdi,%r10), %xmm0
    00000084: 	movaps	%xmm0, %xmm1
    00000087: 	movss	%xmm0, -0x30(%rax)
    0000008c: 	shufps	$0x55, %xmm0, %xmm1
    00000090: 	movss	%xmm1, -0x24(%rax)
    00000095: 	movaps	%xmm0, %xmm1
    00000098: 	unpckhps	%xmm0, %xmm1
    0000009b: 	shufps	$0xff, %xmm0, %xmm0
    0000009f: 	movss	%xmm0, -0xc(%rax)
    000000a4: 	movss	%xmm1, -0x18(%rax)
    000000a9: 	cmpq	%r12, %rdx
    000000ac: 	jne	.Ltmp1421 # Offset: 172
    000000ae: 	movq	%r8, %rax
    000000b1: 	andq	$-0x4, %rax
    000000b5: 	leaq	(%rax,%rax,2), %rdx
    000000b9: 	leaq	(%rdi,%rax,4), %rdi
    000000bd: 	leaq	(%r9,%rdx,4), %rdx
    000000c1: 	cmpq	%rax, %r8
    000000c4: 	je	.Ltmp1422 # Offset: 196
    000000c6: 	movss	(%rdi), %xmm0
    000000ca: 	leaq	0x1(%rax), %r10
    000000ce: 	movss	%xmm0, (%rdx)
    000000d2: 	cmpq	%r10, %r8
    000000d5: 	jbe	.Ltmp1422 # Offset: 213
    000000d7: 	movss	0x4(%rdi), %xmm0
    000000dc: 	addq	$0x2, %rax
    000000e0: 	movss	%xmm0, 0xc(%rdx)
    000000e5: 	cmpq	%rax, %r8
    000000e8: 	jbe	.Ltmp1422 # Offset: 232
    000000ea: 	movss	0x8(%rdi), %xmm0
    000000ef: 	movss	%xmm0, 0x18(%rdx)
.Ltmp1422:
    000000f4: 	leaq	-0x4(%r9,%rbx), %rax
    000000f9: 	leaq	(%rsi,%rbp), %rdx
    000000fd: 	cmpq	%rax, %rsi
    00000100: 	leaq	0x4(%r9), %r10
    00000104: 	setae	%al
    00000107: 	cmpq	%rdx, %r10
    0000010a: 	setae	%dl
    0000010d: 	orb	%dl, %al
    0000010f: 	je	.Ltmp1423 # Offset: 271
    00000115: 	movq	%r8, %r12
    00000118: 	movq	%r10, %rax
    0000011b: 	xorl	%edx, %edx
    0000011d: 	shrq	$0x2, %r12
    00000121: 	testb	%r11b, %r11b
    00000124: 	je	.Ltmp1423 # Offset: 292
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1424:
    00000130: 	movq	%rdx, %rdi
    00000133: 	addq	$0x1, %rdx
    00000137: 	addq	$0x30, %rax
    0000013b: 	shlq	$0x4, %rdi
    0000013f: 	movups	(%rsi,%rdi), %xmm0
    00000143: 	movaps	%xmm0, %xmm1
    00000146: 	movss	%xmm0, -0x30(%rax)
    0000014b: 	shufps	$0x55, %xmm0, %xmm1
    0000014f: 	movss	%xmm1, -0x24(%rax)
    00000154: 	movaps	%xmm0, %xmm1
    00000157: 	unpckhps	%xmm0, %xmm1
    0000015a: 	shufps	$0xff, %xmm0, %xmm0
    0000015e: 	movss	%xmm0, -0xc(%rax)
    00000163: 	movss	%xmm1, -0x18(%rax)
    00000168: 	cmpq	%r12, %rdx
    0000016b: 	jne	.Ltmp1424 # Offset: 363
    0000016d: 	movq	%r8, %rax
    00000170: 	andq	$-0x4, %rax
    00000174: 	leaq	(%rax,%rax,2), %rdx
    00000178: 	leaq	(%rsi,%rax,4), %rsi
    0000017c: 	leaq	(%r10,%rdx,4), %rdx
    00000180: 	cmpq	%rax, %r8
    00000183: 	je	.Ltmp1425 # Offset: 387
    00000185: 	movss	(%rsi), %xmm0
    00000189: 	leaq	0x1(%rax), %rdi
    0000018d: 	movss	%xmm0, (%rdx)
    00000191: 	cmpq	%rdi, %r8
    00000194: 	jbe	.Ltmp1425 # Offset: 404
    00000196: 	movss	0x4(%rsi), %xmm0
    0000019b: 	addq	$0x2, %rax
    0000019f: 	movss	%xmm0, 0xc(%rdx)
    000001a4: 	cmpq	%rax, %r8
    000001a7: 	jbe	.Ltmp1425 # Offset: 423
    000001a9: 	movss	0x8(%rsi), %xmm0
    000001ae: 	movss	%xmm0, 0x18(%rdx)
.Ltmp1425:
    000001b3: 	addq	%r9, %rbx
    000001b6: 	leaq	0x8(%r9), %rdi
    000001ba: 	cmpq	%rbx, %rcx
    000001bd: 	setae	%al
    000001c0: 	addq	%rcx, %rbp
    000001c3: 	cmpq	%rbp, %rdi
    000001c6: 	setae	%dl
    000001c9: 	orb	%dl, %al
    000001cb: 	je	.Ltmp1426 # Offset: 459
    000001d1: 	movq	%r8, %r9
    000001d4: 	movq	%rdi, %rax
    000001d7: 	xorl	%edx, %edx
    000001d9: 	shrq	$0x2, %r9
    000001dd: 	testb	%r11b, %r11b
    000001e0: 	je	.Ltmp1426 # Offset: 480
    000001e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1427:
    000001f0: 	movq	%rdx, %rsi
    000001f3: 	addq	$0x1, %rdx
    000001f7: 	addq	$0x30, %rax
    000001fb: 	shlq	$0x4, %rsi
    000001ff: 	movups	(%rcx,%rsi), %xmm0
    00000203: 	movaps	%xmm0, %xmm1
    00000206: 	movss	%xmm0, -0x30(%rax)
    0000020b: 	shufps	$0x55, %xmm0, %xmm1
    0000020f: 	movss	%xmm1, -0x24(%rax)
    00000214: 	movaps	%xmm0, %xmm1
    00000217: 	unpckhps	%xmm0, %xmm1
    0000021a: 	shufps	$0xff, %xmm0, %xmm0
    0000021e: 	movss	%xmm0, -0xc(%rax)
    00000223: 	movss	%xmm1, -0x18(%rax)
    00000228: 	cmpq	%rdx, %r9
    0000022b: 	jne	.Ltmp1427 # Offset: 555
    0000022d: 	movq	%r8, %rax
    00000230: 	andq	$-0x4, %rax
    00000234: 	leaq	(%rax,%rax,2), %rdx
    00000238: 	leaq	(%rcx,%rax,4), %rcx
    0000023c: 	leaq	(%rdi,%rdx,4), %rdx
    00000240: 	cmpq	%rax, %r8
    00000243: 	je	.Ltmp1428 # Offset: 579
    00000245: 	movss	(%rcx), %xmm0
    00000249: 	leaq	0x1(%rax), %rsi
    0000024d: 	movss	%xmm0, (%rdx)
    00000251: 	cmpq	%rsi, %r8
    00000254: 	jbe	.Ltmp1428 # Offset: 596
    00000256: 	movss	0x4(%rcx), %xmm0
    0000025b: 	addq	$0x2, %rax
    0000025f: 	movss	%xmm0, 0xc(%rdx)
    00000264: 	cmpq	%rax, %r8
    00000267: 	jbe	.Ltmp1428 # Offset: 615
    00000269: 	movss	0x8(%rcx), %xmm0
    0000026e: 	movss	%xmm0, 0x18(%rdx)
.Ltmp1428:
    00000273: 	popq	%rbx
    00000274: 	popq	%rbp
    00000275: 	popq	%r12
    00000277: 	retq # Offset: 631
    00000278: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1426:
    00000280: 	xorl	%eax, %eax
    00000282: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1429:
    00000288: 	movss	(%rcx,%rax,4), %xmm0
    0000028d: 	addq	$0x1, %rax
    00000291: 	addq	$0xc, %rdi
    00000295: 	movss	%xmm0, -0xc(%rdi)
    0000029a: 	cmpq	%rax, %r8
    0000029d: 	jne	.Ltmp1429 # Offset: 669
    0000029f: 	popq	%rbx
    000002a0: 	popq	%rbp
    000002a1: 	popq	%r12
    000002a3: 	retq # Offset: 675
    000002a4: 	nopl	(%rax) # Size: 4
.Ltmp1420:
    000002a8: 	movq	%r9, %rdx
    000002ab: 	xorl	%eax, %eax
    000002ad: 	nopl	(%rax) # Size: 3
.Ltmp1430:
    000002b0: 	movss	(%rdi,%rax,4), %xmm0
    000002b5: 	addq	$0x1, %rax
    000002b9: 	addq	$0xc, %rdx
    000002bd: 	movss	%xmm0, -0xc(%rdx)
    000002c2: 	cmpq	%rax, %r8
    000002c5: 	jne	.Ltmp1430 # Offset: 709
    000002c7: 	jmp	.Ltmp1422 # Offset: 711
    000002cc: 	nopl	(%rax) # Size: 4
.Ltmp1423:
    000002d0: 	xorl	%eax, %eax
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1431:
    000002d8: 	movss	(%rsi,%rax,4), %xmm0
    000002dd: 	addq	$0x1, %rax
    000002e1: 	addq	$0xc, %r10
    000002e5: 	movss	%xmm0, -0xc(%r10)
    000002eb: 	cmpq	%rax, %r8
    000002ee: 	jne	.Ltmp1431 # Offset: 750
    000002f0: 	jmp	.Ltmp1425 # Offset: 752
    000002f5: 	nopl	(%rax) # Size: 3
.Ltmp1419:
    000002f8: 	retq # Offset: 760
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version2IfEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version3IfEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 155
  State       : disassembled
  Address     : 0x1d570
  Size        : 0x2b1
  MaxSize     : 0x2c0
  Offset      : 0x1d570
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version3IfEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0154:
    00000000: 	endbr64
    00000004: 	testl	%r8d, %r8d
    00000007: 	jle	.Ltmp1432 # Offset: 7
    0000000d: 	movslq	%r8d, %rax
    00000010: 	pushq	%r14
    00000012: 	movq	%rdx, %r9
    00000015: 	leal	-0x1(%r8), %r11d
    00000019: 	pushq	%r13
    0000001b: 	pushq	%r12
    0000001d: 	pushq	%rbp
    0000001e: 	leaq	(,%rax,4), %rbp
    00000026: 	pushq	%rbx
    00000027: 	leaq	(%rax,%rax,2), %rbx
    0000002b: 	leaq	(%rsi,%rbp), %rax
    0000002f: 	shlq	$0x2, %rbx
    00000033: 	cmpq	%rax, %rdi
    00000036: 	leaq	-0x4(%rdi,%rbx), %r10
    0000003b: 	setae	%dl
    0000003e: 	cmpq	%r10, %rsi
    00000041: 	setae	%al
    00000044: 	orl	%eax, %edx
    00000046: 	leaq	(%r9,%rbp), %rax
    0000004a: 	cmpq	%rax, %rdi
    0000004d: 	setae	%al
    00000050: 	cmpq	%r10, %r9
    00000053: 	setae	%r10b
    00000057: 	orl	%r10d, %eax
    0000005a: 	testb	%al, %dl
    0000005c: 	je	.Ltmp1433 # Offset: 92
    00000062: 	cmpl	$0x4, %r11d
    00000066: 	jbe	.Ltmp1433 # Offset: 102
    0000006c: 	movl	%r8d, %r10d
    0000006f: 	movq	%rdi, %rax
    00000072: 	xorl	%edx, %edx
    00000074: 	shrl	$0x2, %r10d
    00000078: 	shlq	$0x4, %r10
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp1434:
    00000080: 	movups	(%rsi,%rdx), %xmm1
    00000084: 	movups	(%r9,%rdx), %xmm0
    00000089: 	addq	$0x10, %rdx
    0000008d: 	addq	$0x30, %rax
    00000091: 	movaps	%xmm1, %xmm2
    00000094: 	movss	%xmm1, -0x30(%rax)
    00000099: 	shufps	$0x55, %xmm1, %xmm2
    0000009d: 	movss	%xmm2, -0x24(%rax)
    000000a2: 	movaps	%xmm1, %xmm2
    000000a5: 	unpckhps	%xmm1, %xmm2
    000000a8: 	shufps	$0xff, %xmm1, %xmm1
    000000ac: 	movss	%xmm1, -0xc(%rax)
    000000b1: 	movaps	%xmm0, %xmm1
    000000b4: 	shufps	$0x55, %xmm0, %xmm1
    000000b8: 	movss	%xmm1, -0x20(%rax)
    000000bd: 	movaps	%xmm0, %xmm1
    000000c0: 	unpckhps	%xmm0, %xmm1
    000000c3: 	movss	%xmm0, -0x2c(%rax)
    000000c8: 	shufps	$0xff, %xmm0, %xmm0
    000000cc: 	movss	%xmm2, -0x18(%rax)
    000000d1: 	movss	%xmm1, -0x14(%rax)
    000000d6: 	movss	%xmm0, -0x8(%rax)
    000000db: 	cmpq	%rdx, %r10
    000000de: 	jne	.Ltmp1434 # Offset: 222
    000000e0: 	movl	%r8d, %eax
    000000e3: 	andl	$-0x4, %eax
    000000e6: 	testb	$0x3, %r8b
    000000ea: 	je	.Ltmp1435 # Offset: 234
    000000ec: 	movl	%eax, %r14d
    000000ef: 	leal	(%rax,%rax,2), %edx
    000000f2: 	movss	(%rsi,%r14,4), %xmm0
    000000f8: 	movslq	%edx, %r13
    000000fb: 	leaq	(,%r14,4), %r10
    00000103: 	leaq	(,%r13,4), %r12
    0000010b: 	movss	%xmm0, (%rdi,%r13,4)
    00000111: 	movss	(%r9,%r14,4), %xmm0
    00000117: 	movss	%xmm0, 0x4(%rdi,%r13,4)
    0000011e: 	leal	0x1(%rax), %r13d
    00000122: 	cmpl	%r13d, %r8d
    00000125: 	jle	.Ltmp1435 # Offset: 293
    00000127: 	movss	0x4(%rsi,%r10), %xmm0
    0000012e: 	addl	$0x3, %edx
    00000131: 	addl	$0x2, %eax
    00000134: 	movslq	%edx, %rdx
    00000137: 	movss	%xmm0, 0xc(%rdi,%r12)
    0000013e: 	movss	0x4(%r9,%r10), %xmm0
    00000145: 	movss	%xmm0, 0x4(%rdi,%rdx,4)
    0000014b: 	cmpl	%eax, %r8d
    0000014e: 	jle	.Ltmp1435 # Offset: 334
    00000150: 	movss	0x8(%rsi,%r10), %xmm0
    00000157: 	movss	%xmm0, 0x18(%rdi,%r12)
    0000015e: 	movss	0x8(%r9,%r10), %xmm0
    00000165: 	movss	%xmm0, 0x10(%rdi,%rdx,4)
.Ltmp1435:
    0000016b: 	addq	%rdi, %rbx
    0000016e: 	leaq	0x8(%rdi), %rax
    00000172: 	cmpq	%rbx, %rcx
    00000175: 	setae	%dl
    00000178: 	addq	%rcx, %rbp
    0000017b: 	cmpq	%rbp, %rax
    0000017e: 	setae	%sil
    00000182: 	orb	%sil, %dl
    00000185: 	movq	%rcx, %rdx
    00000188: 	je	.Ltmp1436 # Offset: 392
    0000018e: 	cmpl	$0x6, %r11d
    00000192: 	jbe	.Ltmp1436 # Offset: 402
    00000198: 	movl	%r8d, %esi
    0000019b: 	shrl	$0x2, %esi
    0000019e: 	subl	$0x1, %esi
    000001a1: 	shlq	$0x4, %rsi
    000001a5: 	leaq	0x10(%rcx,%rsi), %rsi
    000001aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1437:
    000001b0: 	movups	(%rdx), %xmm0
    000001b3: 	addq	$0x10, %rdx
    000001b7: 	addq	$0x30, %rax
    000001bb: 	movaps	%xmm0, %xmm1
    000001be: 	movss	%xmm0, -0x30(%rax)
    000001c3: 	shufps	$0x55, %xmm0, %xmm1
    000001c7: 	movss	%xmm1, -0x24(%rax)
    000001cc: 	movaps	%xmm0, %xmm1
    000001cf: 	unpckhps	%xmm0, %xmm1
    000001d2: 	shufps	$0xff, %xmm0, %xmm0
    000001d6: 	movss	%xmm0, -0xc(%rax)
    000001db: 	movss	%xmm1, -0x18(%rax)
    000001e0: 	cmpq	%rdx, %rsi
    000001e3: 	jne	.Ltmp1437 # Offset: 483
    000001e5: 	movl	%r8d, %eax
    000001e8: 	andl	$-0x4, %eax
    000001eb: 	testb	$0x3, %r8b
    000001ef: 	je	.Ltmp1438 # Offset: 495
    000001f1: 	movl	%eax, %esi
    000001f3: 	leal	(%rax,%rax,2), %edx
    000001f6: 	movss	(%rcx,%rsi,4), %xmm0
    000001fb: 	leaq	(,%rsi,4), %r9
    00000203: 	movslq	%edx, %rsi
    00000206: 	movss	%xmm0, 0x8(%rdi,%rsi,4)
    0000020c: 	leal	0x1(%rax), %esi
    0000020f: 	cmpl	%r8d, %esi
    00000212: 	jge	.Ltmp1438 # Offset: 530
    00000214: 	movss	0x4(%rcx,%r9), %xmm0
    0000021b: 	addl	$0x3, %edx
    0000021e: 	addl	$0x2, %eax
    00000221: 	movslq	%edx, %rdx
    00000224: 	movss	%xmm0, 0x8(%rdi,%rdx,4)
    0000022a: 	cmpl	%r8d, %eax
    0000022d: 	jge	.Ltmp1438 # Offset: 557
    0000022f: 	movss	0x8(%rcx,%r9), %xmm0
    00000236: 	movss	%xmm0, 0x14(%rdi,%rdx,4)
.Ltmp1438:
    0000023c: 	popq	%rbx
    0000023d: 	popq	%rbp
    0000023e: 	popq	%r12
    00000240: 	popq	%r13
    00000242: 	popq	%r14
    00000244: 	retq # Offset: 580
    00000245: 	nopl	(%rax) # Size: 3
.Ltmp1436:
    00000248: 	movl	%r11d, %r11d
    0000024b: 	leaq	0x4(%rdx,%r11,4), %rcx
.Ltmp1439:
    00000250: 	movss	(%rdx), %xmm0
    00000254: 	addq	$0x4, %rdx
    00000258: 	addq	$0xc, %rax
    0000025c: 	movss	%xmm0, -0xc(%rax)
    00000261: 	cmpq	%rdx, %rcx
    00000264: 	jne	.Ltmp1439 # Offset: 612
    00000266: 	popq	%rbx
    00000267: 	popq	%rbp
    00000268: 	popq	%r12
    0000026a: 	popq	%r13
    0000026c: 	popq	%r14
    0000026e: 	retq # Offset: 622
    0000026f: 	nop # Size: 1
.Ltmp1433:
    00000270: 	movq	%rdi, %rdx
    00000273: 	movl	%r8d, %r10d
    00000276: 	xorl	%eax, %eax
    00000278: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1440:
    00000280: 	movss	(%rsi,%rax,4), %xmm0
    00000285: 	addq	$0xc, %rdx
    00000289: 	movss	%xmm0, -0xc(%rdx)
    0000028e: 	movss	(%r9,%rax,4), %xmm0
    00000294: 	addq	$0x1, %rax
    00000298: 	movss	%xmm0, -0x8(%rdx)
    0000029d: 	cmpq	%rax, %r10
    000002a0: 	jne	.Ltmp1440 # Offset: 672
    000002a2: 	jmp	.Ltmp1435 # Offset: 674
    000002a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1432:
    000002b0: 	retq # Offset: 688
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version3IfEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version4IfEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 156
  State       : disassembled
  Address     : 0x1d830
  Size        : 0x38a
  MaxSize     : 0x390
  Offset      : 0x1d830
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version4IfEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0155:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r8d, -0x1c(%rsp)
    00000013: 	testl	%r8d, %r8d
    00000016: 	jle	.Ltmp1441 # Offset: 22
    0000001c: 	movl	%r8d, %ebp
    0000001f: 	xorl	%r15d, %r15d
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1449:
    00000028: 	addl	$0x155, %r15d
    0000002f: 	cmpl	-0x1c(%rsp), %r15d
    00000034: 	jg	.Ltmp1442 # Offset: 52
    0000003a: 	movq	$0xffc, -0x18(%rsp)
    00000043: 	movl	$0x554, %r9d
    00000049: 	movl	$0x155, %eax
.Ltmp1450:
    0000004e: 	movslq	%eax, %r8
    00000051: 	testl	%eax, %eax
    00000053: 	movl	$0x4, %r11d
    00000059: 	movl	$0x8, %ebx
    0000005e: 	leaq	(,%r8,4), %r14
    00000066: 	leaq	(%r8,%r8,2), %r8
    0000006a: 	cmovgq	%r14, %r11
    0000006e: 	shlq	$0x2, %r8
    00000072: 	testl	%eax, %eax
    00000074: 	leaq	-0x4(%r8), %r10
    00000078: 	cmovleq	%rbx, %r10
    0000007c: 	leaq	(%rsi,%r11), %rbx
    00000080: 	addq	%rdi, %r10
    00000083: 	cmpq	%rbx, %rdi
    00000086: 	setae	%r12b
    0000008a: 	cmpq	%r10, %rsi
    0000008d: 	setae	%bl
    00000090: 	addq	%rdx, %r11
    00000093: 	orl	%r12d, %ebx
    00000096: 	cmpq	%r11, %rdi
    00000099: 	setae	%r11b
    0000009d: 	cmpq	%r10, %rdx
    000000a0: 	setae	%r10b
    000000a4: 	orl	%r11d, %r10d
    000000a7: 	testb	%r10b, %bl
    000000aa: 	je	.Ltmp1443 # Offset: 170
    000000b0: 	cmpl	$0x5, %eax
    000000b3: 	jle	.Ltmp1443 # Offset: 179
    000000b9: 	testl	%eax, %eax
    000000bb: 	movl	$0x1, %ebx
    000000c0: 	movq	%rdi, %r10
    000000c3: 	cmovgl	%eax, %ebx
    000000c6: 	xorl	%r11d, %r11d
    000000c9: 	movl	%ebx, %r12d
    000000cc: 	shrl	$0x2, %r12d
    000000d0: 	shlq	$0x4, %r12
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp1444:
    000000d8: 	movups	(%rsi,%r11), %xmm1
    000000dd: 	movups	(%rdx,%r11), %xmm0
    000000e2: 	addq	$0x10, %r11
    000000e6: 	addq	$0x30, %r10
    000000ea: 	movaps	%xmm1, %xmm2
    000000ed: 	movss	%xmm1, -0x30(%r10)
    000000f3: 	shufps	$0x55, %xmm1, %xmm2
    000000f7: 	movss	%xmm2, -0x24(%r10)
    000000fd: 	movaps	%xmm1, %xmm2
    00000100: 	unpckhps	%xmm1, %xmm2
    00000103: 	shufps	$0xff, %xmm1, %xmm1
    00000107: 	movss	%xmm1, -0xc(%r10)
    0000010d: 	movaps	%xmm0, %xmm1
    00000110: 	shufps	$0x55, %xmm0, %xmm1
    00000114: 	movss	%xmm1, -0x20(%r10)
    0000011a: 	movaps	%xmm0, %xmm1
    0000011d: 	unpckhps	%xmm0, %xmm1
    00000120: 	movss	%xmm0, -0x2c(%r10)
    00000126: 	shufps	$0xff, %xmm0, %xmm0
    0000012a: 	movss	%xmm2, -0x18(%r10)
    00000130: 	movss	%xmm1, -0x14(%r10)
    00000136: 	movss	%xmm0, -0x8(%r10)
    0000013c: 	cmpq	%r11, %r12
    0000013f: 	jne	.Ltmp1444 # Offset: 319
    00000141: 	movl	%ebx, %r10d
    00000144: 	andl	$-0x4, %r10d
    00000148: 	andl	$0x3, %ebx
    0000014b: 	je	.Ltmp1445 # Offset: 331
    00000151: 	movl	%r10d, %r13d
    00000154: 	leal	(%r10,%r10,2), %r11d
    00000158: 	movss	(%rsi,%r13,4), %xmm0
    0000015e: 	leaq	(,%r13,4), %r12
    00000166: 	movq	%r12, -0x10(%rsp)
    0000016b: 	movslq	%r11d, %r12
    0000016e: 	movss	%xmm0, (%rdi,%r12,4)
    00000174: 	movss	(%rdx,%r13,4), %xmm0
    0000017a: 	leaq	(,%r12,4), %rbx
    00000182: 	movss	%xmm0, 0x4(%rdi,%r12,4)
    00000189: 	leal	0x1(%r10), %r12d
    0000018d: 	cmpl	%r12d, %eax
    00000190: 	jle	.Ltmp1445 # Offset: 400
    00000192: 	movq	-0x10(%rsp), %r12
    00000197: 	addl	$0x3, %r11d
    0000019b: 	addl	$0x2, %r10d
    0000019f: 	movslq	%r11d, %r11
    000001a2: 	movss	0x4(%rsi,%r12), %xmm0
    000001a9: 	movss	%xmm0, 0xc(%rdi,%rbx)
    000001af: 	movss	0x4(%rdx,%r12), %xmm0
    000001b6: 	movss	%xmm0, 0x4(%rdi,%r11,4)
    000001bd: 	cmpl	%r10d, %eax
    000001c0: 	jle	.Ltmp1445 # Offset: 448
    000001c2: 	movss	0x8(%rsi,%r12), %xmm0
    000001c9: 	movss	%xmm0, 0x18(%rdi,%rbx)
    000001cf: 	movss	0x8(%rdx,%r12), %xmm0
    000001d6: 	movss	%xmm0, 0x10(%rdi,%r11,4)
.Ltmp1445:
    000001dd: 	addq	%rdi, %r8
    000001e0: 	leaq	0x8(%rdi), %r11
    000001e4: 	leal	-0x1(%rax), %r10d
    000001e8: 	cmpq	%r8, %rcx
    000001eb: 	leaq	(%rcx,%r14), %r8
    000001ef: 	setae	%bl
    000001f2: 	cmpq	%r8, %r11
    000001f5: 	setae	%r8b
    000001f9: 	orb	%bl, %r8b
    000001fc: 	je	.Ltmp1446 # Offset: 508
    00000202: 	cmpl	$0x6, %r10d
    00000206: 	jbe	.Ltmp1446 # Offset: 518
    0000020c: 	movq	%r11, %r8
    0000020f: 	movl	%eax, %r11d
    00000212: 	movq	%rcx, %r10
    00000215: 	shrl	$0x2, %r11d
    00000219: 	subl	$0x1, %r11d
    0000021d: 	shlq	$0x4, %r11
    00000221: 	leaq	0x10(%rcx,%r11), %r11
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1447:
    00000230: 	movups	(%r10), %xmm0
    00000234: 	addq	$0x10, %r10
    00000238: 	addq	$0x30, %r8
    0000023c: 	movaps	%xmm0, %xmm1
    0000023f: 	movss	%xmm0, -0x30(%r8)
    00000245: 	shufps	$0x55, %xmm0, %xmm1
    00000249: 	movss	%xmm1, -0x24(%r8)
    0000024f: 	movaps	%xmm0, %xmm1
    00000252: 	unpckhps	%xmm0, %xmm1
    00000255: 	shufps	$0xff, %xmm0, %xmm0
    00000259: 	movss	%xmm0, -0xc(%r8)
    0000025f: 	movss	%xmm1, -0x18(%r8)
    00000265: 	cmpq	%r10, %r11
    00000268: 	jne	.Ltmp1447 # Offset: 616
    0000026a: 	movl	%eax, %r8d
    0000026d: 	andl	$-0x4, %r8d
    00000271: 	testb	$0x3, %al
    00000273: 	je	.Ltmp1448 # Offset: 627
    00000275: 	movl	%r8d, %ebx
    00000278: 	leal	(%r8,%r8,2), %r10d
    0000027c: 	movss	(%rcx,%rbx,4), %xmm0
    00000281: 	leaq	(,%rbx,4), %r11
    00000289: 	movslq	%r10d, %rbx
    0000028c: 	movss	%xmm0, 0x8(%rdi,%rbx,4)
    00000292: 	leal	0x1(%r8), %ebx
    00000296: 	cmpl	%eax, %ebx
    00000298: 	jge	.Ltmp1448 # Offset: 664
    0000029a: 	movss	0x4(%rcx,%r11), %xmm0
    000002a1: 	addl	$0x3, %r10d
    000002a5: 	addl	$0x2, %r8d
    000002a9: 	movslq	%r10d, %r10
    000002ac: 	movss	%xmm0, 0x8(%rdi,%r10,4)
    000002b3: 	cmpl	%eax, %r8d
    000002b6: 	jge	.Ltmp1448 # Offset: 694
    000002b8: 	movss	0x8(%rcx,%r11), %xmm0
    000002bf: 	movss	%xmm0, 0x14(%rdi,%r10,4)
.Ltmp1448:
    000002c6: 	addq	-0x18(%rsp), %rdi
    000002cb: 	addq	%r9, %rsi
    000002ce: 	addq	%r9, %rdx
    000002d1: 	addq	%r9, %rcx
    000002d4: 	subl	$0x155, %ebp
    000002da: 	cmpl	-0x1c(%rsp), %r15d
    000002df: 	jl	.Ltmp1449 # Offset: 735
.Ltmp1441:
    000002e5: 	popq	%rbx
    000002e6: 	popq	%rbp
    000002e7: 	popq	%r12
    000002e9: 	popq	%r13
    000002eb: 	popq	%r14
    000002ed: 	popq	%r15
    000002ef: 	retq # Offset: 751
.Ltmp1442:
    000002f0: 	leal	(%rbp,%rbp,2), %r8d
    000002f5: 	movslq	%ebp, %r9
    000002f8: 	movl	%ebp, %eax
    000002fa: 	movslq	%r8d, %r8
    000002fd: 	shlq	$0x2, %r9
    00000301: 	leaq	(,%r8,4), %rbx
    00000309: 	movq	%rbx, -0x18(%rsp)
    0000030e: 	testl	%ebp, %ebp
    00000310: 	jg	.Ltmp1450 # Offset: 784
    00000316: 	jmp	.Ltmp1448 # Offset: 790
    00000318: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1446:
    00000320: 	movq	%rcx, %rax
    00000323: 	movq	%r11, %r8
    00000326: 	leaq	0x4(%rcx,%r10,4), %r10
    0000032b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1451:
    00000330: 	movss	(%rax), %xmm0
    00000334: 	addq	$0x4, %rax
    00000338: 	addq	$0xc, %r8
    0000033c: 	movss	%xmm0, -0xc(%r8)
    00000342: 	cmpq	%rax, %r10
    00000345: 	jne	.Ltmp1451 # Offset: 837
    00000347: 	jmp	.Ltmp1448 # Offset: 839
    0000034c: 	nopl	(%rax) # Size: 4
.Ltmp1443:
    00000350: 	movq	%rdi, %r11
    00000353: 	xorl	%r10d, %r10d
    00000356: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1452:
    00000360: 	movss	(%rsi,%r10,4), %xmm0
    00000366: 	addq	$0xc, %r11
    0000036a: 	movss	%xmm0, -0xc(%r11)
    00000370: 	movss	(%rdx,%r10,4), %xmm0
    00000376: 	addq	$0x1, %r10
    0000037a: 	movss	%xmm0, -0x8(%r11)
    00000380: 	cmpl	%r10d, %eax
    00000383: 	jg	.Ltmp1452 # Offset: 899
    00000385: 	jmp	.Ltmp1445 # Offset: 901
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version4IfEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version5IfEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 157
  State       : disassembled
  Address     : 0x1dbc0
  Size        : 0x44b
  MaxSize     : 0x450
  Offset      : 0x1dbc0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version5IfEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0156:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r8d, -0x1c(%rsp)
    00000013: 	testl	%r8d, %r8d
    00000016: 	jle	.Ltmp1453 # Offset: 22
    0000001c: 	movq	%rdx, %r9
    0000001f: 	movl	%r8d, %ebp
    00000022: 	movq	%rcx, %rdx
    00000025: 	xorl	%r15d, %r15d
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1464:
    00000030: 	addl	$0x155, %r15d
    00000037: 	cmpl	-0x1c(%rsp), %r15d
    0000003c: 	jg	.Ltmp1454 # Offset: 60
    00000042: 	movq	$0xffc, -0x18(%rsp)
    0000004b: 	movl	$0x554, %r10d
    00000051: 	movl	$0x155, %eax
.Ltmp1466:
    00000056: 	movslq	%eax, %rcx
    00000059: 	movl	$0x4, %ebx
    0000005e: 	leaq	(,%rcx,4), %r8
    00000066: 	leaq	(%rcx,%rcx,2), %rcx
    0000006a: 	shlq	$0x2, %rcx
    0000006e: 	testl	%eax, %eax
    00000070: 	leaq	-0x8(%rcx), %r11
    00000074: 	cmovleq	%rbx, %r11
    00000078: 	addq	%rdi, %r11
    0000007b: 	cmpq	%r11, %rsi
    0000007e: 	movl	$0x4, %r11d
    00000084: 	setae	%bl
    00000087: 	testl	%eax, %eax
    00000089: 	cmovgq	%r8, %r11
    0000008d: 	addq	%rsi, %r11
    00000090: 	cmpq	%r11, %rdi
    00000093: 	setae	%r11b
    00000097: 	orb	%bl, %r11b
    0000009a: 	je	.Ltmp1455 # Offset: 154
    000000a0: 	cmpl	$0x7, %eax
    000000a3: 	jle	.Ltmp1455 # Offset: 163
    000000a9: 	testl	%eax, %eax
    000000ab: 	movl	$0x1, %r12d
    000000b1: 	movq	%rsi, %rbx
    000000b4: 	movq	%rdi, %r11
    000000b7: 	cmovgl	%eax, %r12d
    000000bb: 	movl	%r12d, %r13d
    000000be: 	shrl	$0x2, %r13d
    000000c2: 	subl	$0x1, %r13d
    000000c6: 	shlq	$0x4, %r13
    000000ca: 	leaq	0x10(%rsi,%r13), %r13
    000000cf: 	nop # Size: 1
.Ltmp1456:
    000000d0: 	movups	(%rbx), %xmm0
    000000d3: 	addq	$0x10, %rbx
    000000d7: 	addq	$0x30, %r11
    000000db: 	movaps	%xmm0, %xmm1
    000000de: 	movss	%xmm0, -0x30(%r11)
    000000e4: 	shufps	$0x55, %xmm0, %xmm1
    000000e8: 	movss	%xmm1, -0x24(%r11)
    000000ee: 	movaps	%xmm0, %xmm1
    000000f1: 	unpckhps	%xmm0, %xmm1
    000000f4: 	shufps	$0xff, %xmm0, %xmm0
    000000f8: 	movss	%xmm0, -0xc(%r11)
    000000fe: 	movss	%xmm1, -0x18(%r11)
    00000104: 	cmpq	%r13, %rbx
    00000107: 	jne	.Ltmp1456 # Offset: 263
    00000109: 	movl	%r12d, %r11d
    0000010c: 	andl	$-0x4, %r11d
    00000110: 	andl	$0x3, %r12d
    00000114: 	je	.Ltmp1457 # Offset: 276
    00000116: 	movl	%r11d, %r12d
    00000119: 	leal	(%r11,%r11,2), %ebx
    0000011d: 	movss	(%rsi,%r12,4), %xmm0
    00000123: 	movslq	%ebx, %rbx
    00000126: 	leaq	(,%r12,4), %r14
    0000012e: 	leaq	(,%rbx,4), %r13
    00000136: 	movss	%xmm0, (%rdi,%rbx,4)
    0000013b: 	leal	0x1(%r11), %ebx
    0000013f: 	cmpl	%ebx, %eax
    00000141: 	jle	.Ltmp1457 # Offset: 321
    00000143: 	movss	0x4(%rsi,%r14), %xmm0
    0000014a: 	addl	$0x2, %r11d
    0000014e: 	movss	%xmm0, 0xc(%rdi,%r13)
    00000155: 	cmpl	%r11d, %eax
    00000158: 	jle	.Ltmp1457 # Offset: 344
    0000015a: 	movss	0x8(%rsi,%r14), %xmm0
    00000161: 	movss	%xmm0, 0x18(%rdi,%r13)
.Ltmp1457:
    00000168: 	leal	-0x1(%rax), %r14d
    0000016c: 	leaq	-0x4(%rdi,%rcx), %rbx
    00000171: 	cmpl	$0x6, %r14d
    00000175: 	leaq	0x4(%rdi), %r11
    00000179: 	seta	%r12b
    0000017d: 	cmpq	%rbx, %r9
    00000180: 	leaq	(%r9,%r8), %rbx
    00000184: 	setae	%r13b
    00000188: 	cmpq	%rbx, %r11
    0000018b: 	setae	%bl
    0000018e: 	orb	%r13b, %bl
    00000191: 	movq	%r9, %rbx
    00000194: 	je	.Ltmp1458 # Offset: 404
    0000019a: 	testb	%r12b, %r12b
    0000019d: 	je	.Ltmp1458 # Offset: 413
    000001a3: 	movl	%eax, %r13d
    000001a6: 	shrl	$0x2, %r13d
    000001aa: 	subl	$0x1, %r13d
    000001ae: 	shlq	$0x4, %r13
    000001b2: 	leaq	0x10(%r9,%r13), %r13
    000001b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1459:
    000001c0: 	movups	(%rbx), %xmm0
    000001c3: 	addq	$0x10, %rbx
    000001c7: 	addq	$0x30, %r11
    000001cb: 	movaps	%xmm0, %xmm1
    000001ce: 	movss	%xmm0, -0x30(%r11)
    000001d4: 	shufps	$0x55, %xmm0, %xmm1
    000001d8: 	movss	%xmm1, -0x24(%r11)
    000001de: 	movaps	%xmm0, %xmm1
    000001e1: 	unpckhps	%xmm0, %xmm1
    000001e4: 	shufps	$0xff, %xmm0, %xmm0
    000001e8: 	movss	%xmm0, -0xc(%r11)
    000001ee: 	movss	%xmm1, -0x18(%r11)
    000001f4: 	cmpq	%r13, %rbx
    000001f7: 	jne	.Ltmp1459 # Offset: 503
    000001f9: 	movl	%eax, %r11d
    000001fc: 	andl	$-0x4, %r11d
    00000200: 	testb	$0x3, %al
    00000202: 	je	.Ltmp1460 # Offset: 514
    00000204: 	movl	%r11d, %r13d
    00000207: 	leaq	(,%r13,4), %rbx
    0000020f: 	movss	(%r9,%r13,4), %xmm0
    00000215: 	movq	%rbx, -0x10(%rsp)
    0000021a: 	leal	(%r11,%r11,2), %ebx
    0000021e: 	leal	0x1(%rbx), %r13d
    00000222: 	movslq	%r13d, %r13
    00000225: 	movss	%xmm0, (%rdi,%r13,4)
    0000022b: 	leal	0x1(%r11), %r13d
    0000022f: 	cmpl	%r13d, %eax
    00000232: 	jle	.Ltmp1460 # Offset: 562
    00000234: 	movq	-0x10(%rsp), %r13
    00000239: 	addl	$0x2, %r11d
    0000023d: 	movss	0x4(%r9,%r13), %xmm0
    00000244: 	leal	0x4(%rbx), %r13d
    00000248: 	movslq	%r13d, %r13
    0000024b: 	movss	%xmm0, (%rdi,%r13,4)
    00000251: 	cmpl	%r11d, %eax
    00000254: 	jle	.Ltmp1460 # Offset: 596
    00000256: 	movq	-0x10(%rsp), %r13
    0000025b: 	addl	$0x7, %ebx
    0000025e: 	movslq	%ebx, %rbx
    00000261: 	movss	0x8(%r9,%r13), %xmm0
    00000268: 	movss	%xmm0, (%rdi,%rbx,4)
.Ltmp1460:
    0000026d: 	addq	%rdi, %rcx
    00000270: 	leaq	0x8(%rdi), %r11
    00000274: 	cmpq	%rcx, %rdx
    00000277: 	setae	%cl
    0000027a: 	addq	%rdx, %r8
    0000027d: 	cmpq	%r8, %r11
    00000280: 	setae	%r8b
    00000284: 	orb	%cl, %r8b
    00000287: 	je	.Ltmp1461 # Offset: 647
    0000028d: 	testb	%r12b, %r12b
    00000290: 	je	.Ltmp1461 # Offset: 656
    00000296: 	movq	%r11, %rcx
    00000299: 	movl	%eax, %r11d
    0000029c: 	movq	%rdx, %r8
    0000029f: 	shrl	$0x2, %r11d
    000002a3: 	subl	$0x1, %r11d
    000002a7: 	shlq	$0x4, %r11
    000002ab: 	leaq	0x10(%rdx,%r11), %r11
.Ltmp1462:
    000002b0: 	movups	(%r8), %xmm0
    000002b4: 	addq	$0x10, %r8
    000002b8: 	addq	$0x30, %rcx
    000002bc: 	movaps	%xmm0, %xmm1
    000002bf: 	movss	%xmm0, -0x30(%rcx)
    000002c4: 	shufps	$0x55, %xmm0, %xmm1
    000002c8: 	movss	%xmm1, -0x24(%rcx)
    000002cd: 	movaps	%xmm0, %xmm1
    000002d0: 	unpckhps	%xmm0, %xmm1
    000002d3: 	shufps	$0xff, %xmm0, %xmm0
    000002d7: 	movss	%xmm0, -0xc(%rcx)
    000002dc: 	movss	%xmm1, -0x18(%rcx)
    000002e1: 	cmpq	%r8, %r11
    000002e4: 	jne	.Ltmp1462 # Offset: 740
    000002e6: 	movl	%eax, %ecx
    000002e8: 	andl	$-0x4, %ecx
    000002eb: 	testb	$0x3, %al
    000002ed: 	je	.Ltmp1463 # Offset: 749
    000002ef: 	movl	%ecx, %ebx
    000002f1: 	leal	(%rcx,%rcx,2), %r8d
    000002f5: 	movss	(%rdx,%rbx,4), %xmm0
    000002fa: 	leaq	(,%rbx,4), %r11
    00000302: 	movslq	%r8d, %rbx
    00000305: 	movss	%xmm0, 0x8(%rdi,%rbx,4)
    0000030b: 	leal	0x1(%rcx), %ebx
    0000030e: 	cmpl	%ebx, %eax
    00000310: 	jle	.Ltmp1463 # Offset: 784
    00000312: 	movss	0x4(%rdx,%r11), %xmm0
    00000319: 	addl	$0x3, %r8d
    0000031d: 	addl	$0x2, %ecx
    00000320: 	movslq	%r8d, %r8
    00000323: 	movss	%xmm0, 0x8(%rdi,%r8,4)
    0000032a: 	cmpl	%ecx, %eax
    0000032c: 	jle	.Ltmp1463 # Offset: 812
    0000032e: 	movss	0x8(%rdx,%r11), %xmm0
    00000335: 	movss	%xmm0, 0x14(%rdi,%r8,4)
.Ltmp1463:
    0000033c: 	addq	-0x18(%rsp), %rdi
    00000341: 	addq	%r10, %rsi
    00000344: 	addq	%r10, %r9
    00000347: 	addq	%r10, %rdx
    0000034a: 	subl	$0x155, %ebp
    00000350: 	cmpl	-0x1c(%rsp), %r15d
    00000355: 	jl	.Ltmp1464 # Offset: 853
.Ltmp1453:
    0000035b: 	popq	%rbx
    0000035c: 	popq	%rbp
    0000035d: 	popq	%r12
    0000035f: 	popq	%r13
    00000361: 	popq	%r14
    00000363: 	popq	%r15
    00000365: 	retq # Offset: 869
    00000366: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1454:
    00000370: 	movl	%ebp, %eax
    00000372: 	testl	%ebp, %ebp
    00000374: 	jle	.Ltmp1465 # Offset: 884
    0000037a: 	leal	(%rbp,%rbp,2), %ecx
    0000037e: 	movslq	%ebp, %r10
    00000381: 	movslq	%ecx, %rcx
    00000384: 	shlq	$0x2, %r10
    00000388: 	shlq	$0x2, %rcx
    0000038c: 	movq	%rcx, -0x18(%rsp)
    00000391: 	jmp	.Ltmp1466 # Offset: 913
    00000396: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1461:
    000003a0: 	movl	%r14d, %r8d
    000003a3: 	movq	%rdx, %rax
    000003a6: 	movq	%r11, %rcx
    000003a9: 	leaq	0x4(%rdx,%r8,4), %r8
    000003ae: 	nop # Size: 2
.Ltmp1467:
    000003b0: 	movss	(%rax), %xmm0
    000003b4: 	addq	$0x4, %rax
    000003b8: 	addq	$0xc, %rcx
    000003bc: 	movss	%xmm0, -0xc(%rcx)
    000003c1: 	cmpq	%rax, %r8
    000003c4: 	jne	.Ltmp1467 # Offset: 964
    000003c6: 	jmp	.Ltmp1463 # Offset: 966
    000003cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1458:
    000003d0: 	movl	%r14d, %r13d
    000003d3: 	leaq	0x4(%r9,%r13,4), %r13
    000003d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1468:
    000003e0: 	movss	(%rbx), %xmm0
    000003e4: 	addq	$0x4, %rbx
    000003e8: 	addq	$0xc, %r11
    000003ec: 	movss	%xmm0, -0xc(%r11)
    000003f2: 	cmpq	%r13, %rbx
    000003f5: 	jne	.Ltmp1468 # Offset: 1013
    000003f7: 	jmp	.Ltmp1460 # Offset: 1015
    000003fc: 	nopl	(%rax) # Size: 4
.Ltmp1455:
    00000400: 	movq	%rdi, %rbx
    00000403: 	xorl	%r11d, %r11d
    00000406: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1469:
    00000410: 	movss	(%rsi,%r11,4), %xmm0
    00000416: 	addq	$0x1, %r11
    0000041a: 	addq	$0xc, %rbx
    0000041e: 	movss	%xmm0, -0xc(%rbx)
    00000423: 	cmpl	%r11d, %eax
    00000426: 	jg	.Ltmp1469 # Offset: 1062
    00000428: 	jmp	.Ltmp1457 # Offset: 1064
    0000042d: 	nopl	(%rax) # Size: 3
.Ltmp1465:
    00000430: 	leal	(%rbp,%rbp,2), %eax
    00000434: 	movslq	%ebp, %r10
    00000437: 	cltq
    00000439: 	shlq	$0x2, %r10
    0000043d: 	shlq	$0x2, %rax
    00000441: 	movq	%rax, -0x18(%rsp)
    00000446: 	jmp	.Ltmp1463 # Offset: 1094
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version5IfEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version1IfEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 158
  State       : disassembled
  Address     : 0x1e010
  Size        : 0x221
  MaxSize     : 0x230
  Offset      : 0x1e010
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version1IfEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0157:
    00000000: 	endbr64
    00000004: 	testl	%r8d, %r8d
    00000007: 	jle	.Ltmp1470 # Offset: 7
    0000000d: 	movslq	%r8d, %rax
    00000010: 	pushq	%rbp
    00000011: 	movaps	%xmm0, %xmm6
    00000014: 	movq	%rax, %r11
    00000017: 	shlq	$0x2, %rax
    0000001b: 	pushq	%rbx
    0000001c: 	shlq	$0x4, %r11
    00000020: 	leaq	(%rsi,%rax), %r9
    00000024: 	addq	%rdi, %r11
    00000027: 	cmpq	%r9, %rdi
    0000002a: 	setae	%r9b
    0000002e: 	cmpq	%r11, %rsi
    00000031: 	setae	%r10b
    00000035: 	orl	%r10d, %r9d
    00000038: 	leaq	(%rdx,%rax), %r10
    0000003c: 	cmpq	%r10, %rdi
    0000003f: 	setae	%r10b
    00000043: 	cmpq	%r11, %rdx
    00000046: 	setae	%bl
    00000049: 	orl	%ebx, %r10d
    0000004c: 	andl	%r10d, %r9d
    0000004f: 	leal	-0x1(%r8), %r10d
    00000053: 	cmpl	$0x2, %r10d
    00000057: 	seta	%r10b
    0000005b: 	testb	%r10b, %r9b
    0000005e: 	je	.Ltmp1471 # Offset: 94
    00000064: 	addq	%rcx, %rax
    00000067: 	cmpq	%rax, %rdi
    0000006a: 	setae	%al
    0000006d: 	cmpq	%r11, %rcx
    00000070: 	setae	%r9b
    00000074: 	orb	%r9b, %al
    00000077: 	je	.Ltmp1471 # Offset: 119
    0000007d: 	movl	%r8d, %r9d
    00000080: 	movaps	%xmm0, %xmm4
    00000083: 	xorl	%eax, %eax
    00000085: 	shrl	$0x2, %r9d
    00000089: 	shufps	$0x0, %xmm4, %xmm4
    0000008d: 	shlq	$0x4, %r9
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp1472:
    00000098: 	movups	(%rdx,%rax), %xmm7
    0000009c: 	movups	(%rsi,%rax), %xmm0
    000000a0: 	movaps	%xmm4, %xmm2
    000000a3: 	movaps	%xmm4, %xmm1
    000000a6: 	unpcklps	%xmm7, %xmm2
    000000a9: 	unpckhps	%xmm7, %xmm1
    000000ac: 	movups	(%rcx,%rax), %xmm7
    000000b0: 	movaps	%xmm0, %xmm3
    000000b3: 	movaps	%xmm2, %xmm5
    000000b6: 	unpcklps	%xmm7, %xmm3
    000000b9: 	unpckhps	%xmm7, %xmm0
    000000bc: 	unpckhps	%xmm3, %xmm2
    000000bf: 	unpcklps	%xmm3, %xmm5
    000000c2: 	movups	%xmm2, 0x10(%rdi,%rax,4)
    000000c7: 	movaps	%xmm1, %xmm2
    000000ca: 	unpckhps	%xmm0, %xmm1
    000000cd: 	unpcklps	%xmm0, %xmm2
    000000d0: 	movups	%xmm5, (%rdi,%rax,4)
    000000d4: 	movups	%xmm2, 0x20(%rdi,%rax,4)
    000000d9: 	movups	%xmm1, 0x30(%rdi,%rax,4)
    000000de: 	addq	$0x10, %rax
    000000e2: 	cmpq	%rax, %r9
    000000e5: 	jne	.Ltmp1472 # Offset: 229
    000000e7: 	movl	%r8d, %r10d
    000000ea: 	andl	$-0x4, %r10d
    000000ee: 	testb	$0x3, %r8b
    000000f2: 	je	.Ltmp1473 # Offset: 242
    000000f8: 	leal	(,%r10,4), %eax
    00000100: 	movslq	%eax, %r9
    00000103: 	movss	%xmm6, (%rdi,%r9,4)
    00000109: 	movss	(%rsi,%r9), %xmm0
    0000010f: 	leaq	0x1(%r9), %rbp
    00000113: 	leaq	(,%r9,4), %r11
    0000011b: 	leaq	(,%rbp,4), %rbx
    00000123: 	movss	%xmm0, (%rdi,%rbp,4)
    00000128: 	movss	(%rdx,%r9), %xmm0
    0000012e: 	movss	%xmm0, 0x4(%rdi,%rbx)
    00000134: 	movss	(%rcx,%r9), %xmm0
    0000013a: 	leal	0x1(%r10), %r9d
    0000013e: 	movss	%xmm0, 0x8(%rdi,%rbx)
    00000144: 	cmpl	%r9d, %r8d
    00000147: 	jle	.Ltmp1473 # Offset: 327
    0000014d: 	leal	0x4(%rax), %r9d
    00000151: 	movss	%xmm6, 0x10(%rdi,%r11)
    00000158: 	movslq	%r9d, %r9
    0000015b: 	movss	(%rsi,%r9), %xmm0
    00000161: 	leaq	0x1(%r9), %rbp
    00000165: 	leaq	(,%rbp,4), %rbx
    0000016d: 	movss	%xmm0, (%rdi,%rbp,4)
    00000172: 	movss	(%rdx,%r9), %xmm0
    00000178: 	movss	%xmm0, 0x4(%rdi,%rbx)
    0000017e: 	movss	(%rcx,%r9), %xmm0
    00000184: 	leal	0x2(%r10), %r9d
    00000188: 	movss	%xmm0, 0x8(%rdi,%rbx)
    0000018e: 	cmpl	%r9d, %r8d
    00000191: 	jle	.Ltmp1473 # Offset: 401
    00000193: 	addl	$0x8, %eax
    00000196: 	movss	%xmm6, 0x20(%rdi,%r11)
    0000019d: 	cltq
    0000019f: 	movss	(%rsi,%rax), %xmm0
    000001a4: 	leaq	0x1(%rax), %r9
    000001a8: 	leaq	(,%r9,4), %r8
    000001b0: 	movss	%xmm0, (%rdi,%r9,4)
    000001b6: 	movss	(%rdx,%rax), %xmm0
    000001bb: 	movss	%xmm0, 0x4(%rdi,%r8)
    000001c2: 	movss	(%rcx,%rax), %xmm0
    000001c7: 	movss	%xmm0, 0x8(%rdi,%r8)
.Ltmp1473:
    000001ce: 	popq	%rbx
    000001cf: 	popq	%rbp
    000001d0: 	retq # Offset: 464
    000001d1: 	nopl	(%rax) # Size: 7
.Ltmp1471:
    000001d8: 	movl	%r8d, %r8d
    000001db: 	xorl	%eax, %eax
    000001dd: 	shlq	$0x2, %r8
    000001e1: 	nopl	(%rax) # Size: 7
.Ltmp1474:
    000001e8: 	movss	%xmm6, (%rdi,%rax,4)
    000001ed: 	movss	(%rsi,%rax), %xmm0
    000001f2: 	movss	%xmm0, 0x4(%rdi,%rax,4)
    000001f8: 	movss	(%rdx,%rax), %xmm0
    000001fd: 	movss	%xmm0, 0x8(%rdi,%rax,4)
    00000203: 	movss	(%rcx,%rax), %xmm0
    00000208: 	movss	%xmm0, 0xc(%rdi,%rax,4)
    0000020e: 	addq	$0x4, %rax
    00000212: 	cmpq	%rax, %r8
    00000215: 	jne	.Ltmp1474 # Offset: 533
    00000217: 	popq	%rbx
    00000218: 	popq	%rbp
    00000219: 	retq # Offset: 537
    0000021a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1470:
    00000220: 	retq # Offset: 544
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version1IfEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version2IfEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 159
  State       : disassembled
  Address     : 0x1e240
  Size        : 0x331
  MaxSize     : 0x340
  Offset      : 0x1e240
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version2IfEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0158:
    00000000: 	endbr64
    00000004: 	movslq	%r8d, %r8
    00000007: 	testq	%r8, %r8
    0000000a: 	je	.Ltmp1475 # Offset: 10
    00000010: 	pushq	%r14
    00000012: 	movq	%rdi, %r9
    00000015: 	movq	%rdx, %r11
    00000018: 	movq	%rsi, %rdi
    0000001b: 	pushq	%r13
    0000001d: 	movq	%rcx, %r10
    00000020: 	movq	%r9, %rdx
    00000023: 	xorl	%eax, %eax
    00000025: 	pushq	%r12
    00000027: 	pushq	%rbp
    00000028: 	pushq	%rbx
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp1476:
    00000030: 	movq	%rax, %rsi
    00000033: 	addq	$0x1, %rax
    00000037: 	movss	%xmm0, (%rdx)
    0000003b: 	addq	$0x10, %rdx
    0000003f: 	cmpq	%rax, %r8
    00000042: 	jne	.Ltmp1476 # Offset: 66
    00000044: 	cmpq	$0x6, %rsi
    00000048: 	movq	%rsi, %r13
    0000004b: 	leaq	(,%rax,4), %r12
    00000053: 	seta	%bl
    00000056: 	shlq	$0x4, %r13
    0000005a: 	leaq	(%rdi,%r12), %rcx
    0000005e: 	leaq	0x4(%r9), %rbp
    00000062: 	leaq	0x8(%r9,%r13), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	setae	%dl
    0000006d: 	cmpq	%rcx, %rbp
    00000070: 	setae	%cl
    00000073: 	orb	%cl, %dl
    00000075: 	je	.Ltmp1477 # Offset: 117
    0000007b: 	movq	%rax, %r14
    0000007e: 	movq	%rbp, %rdx
    00000081: 	xorl	%ecx, %ecx
    00000083: 	shrq	$0x2, %r14
    00000087: 	testb	%bl, %bl
    00000089: 	je	.Ltmp1477 # Offset: 137
    0000008f: 	nop # Size: 1
.Ltmp1478:
    00000090: 	movq	%rcx, %r8
    00000093: 	addq	$0x1, %rcx
    00000097: 	addq	$0x40, %rdx
    0000009b: 	shlq	$0x4, %r8
    0000009f: 	movups	(%rdi,%r8), %xmm0
    000000a4: 	movaps	%xmm0, %xmm1
    000000a7: 	movss	%xmm0, -0x40(%rdx)
    000000ac: 	shufps	$0x55, %xmm0, %xmm1
    000000b0: 	movss	%xmm1, -0x30(%rdx)
    000000b5: 	movaps	%xmm0, %xmm1
    000000b8: 	unpckhps	%xmm0, %xmm1
    000000bb: 	shufps	$0xff, %xmm0, %xmm0
    000000bf: 	movss	%xmm0, -0x10(%rdx)
    000000c4: 	movss	%xmm1, -0x20(%rdx)
    000000c9: 	cmpq	%r14, %rcx
    000000cc: 	jne	.Ltmp1478 # Offset: 204
    000000ce: 	movq	%rax, %rdx
    000000d1: 	andq	$-0x4, %rdx
    000000d5: 	movq	%rdx, %rcx
    000000d8: 	leaq	(%rdi,%rdx,4), %rdi
    000000dc: 	shlq	$0x4, %rcx
    000000e0: 	addq	%rbp, %rcx
    000000e3: 	cmpq	%rdx, %rax
    000000e6: 	je	.Ltmp1479 # Offset: 230
    000000e8: 	movss	(%rdi), %xmm0
    000000ec: 	leaq	0x1(%rdx), %r8
    000000f0: 	movss	%xmm0, (%rcx)
    000000f4: 	cmpq	%r8, %rax
    000000f7: 	jbe	.Ltmp1479 # Offset: 247
    000000f9: 	movss	0x4(%rdi), %xmm0
    000000fe: 	addq	$0x2, %rdx
    00000102: 	movss	%xmm0, 0x10(%rcx)
    00000107: 	cmpq	%rdx, %rax
    0000010a: 	jbe	.Ltmp1479 # Offset: 266
    0000010c: 	movss	0x8(%rdi), %xmm0
    00000111: 	movss	%xmm0, 0x20(%rcx)
.Ltmp1479:
    00000116: 	leaq	0xc(%r9,%r13), %rdx
    0000011b: 	leaq	(%r11,%r12), %rcx
    0000011f: 	cmpq	%rdx, %r11
    00000122: 	leaq	0x8(%r9), %r8
    00000126: 	setae	%dl
    00000129: 	cmpq	%rcx, %r8
    0000012c: 	setae	%cl
    0000012f: 	orb	%cl, %dl
    00000131: 	je	.Ltmp1480 # Offset: 305
    00000137: 	movq	%rax, %rbp
    0000013a: 	movq	%r8, %rdx
    0000013d: 	xorl	%ecx, %ecx
    0000013f: 	shrq	$0x2, %rbp
    00000143: 	testb	%bl, %bl
    00000145: 	je	.Ltmp1480 # Offset: 325
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1481:
    00000150: 	movq	%rcx, %rdi
    00000153: 	addq	$0x1, %rcx
    00000157: 	addq	$0x40, %rdx
    0000015b: 	shlq	$0x4, %rdi
    0000015f: 	movups	(%r11,%rdi), %xmm0
    00000164: 	movaps	%xmm0, %xmm1
    00000167: 	movss	%xmm0, -0x40(%rdx)
    0000016c: 	shufps	$0x55, %xmm0, %xmm1
    00000170: 	movss	%xmm1, -0x30(%rdx)
    00000175: 	movaps	%xmm0, %xmm1
    00000178: 	unpckhps	%xmm0, %xmm1
    0000017b: 	shufps	$0xff, %xmm0, %xmm0
    0000017f: 	movss	%xmm0, -0x10(%rdx)
    00000184: 	movss	%xmm1, -0x20(%rdx)
    00000189: 	cmpq	%rcx, %rbp
    0000018c: 	jne	.Ltmp1481 # Offset: 396
    0000018e: 	movq	%rax, %rdx
    00000191: 	andq	$-0x4, %rdx
    00000195: 	movq	%rdx, %rcx
    00000198: 	leaq	(%r11,%rdx,4), %rdi
    0000019c: 	shlq	$0x4, %rcx
    000001a0: 	addq	%r8, %rcx
    000001a3: 	cmpq	%rdx, %rax
    000001a6: 	je	.Ltmp1482 # Offset: 422
    000001a8: 	movss	(%rdi), %xmm0
    000001ac: 	leaq	0x1(%rdx), %r8
    000001b0: 	movss	%xmm0, (%rcx)
    000001b4: 	cmpq	%r8, %rax
    000001b7: 	jbe	.Ltmp1482 # Offset: 439
    000001b9: 	movss	0x4(%rdi), %xmm0
    000001be: 	addq	$0x2, %rdx
    000001c2: 	movss	%xmm0, 0x10(%rcx)
    000001c7: 	cmpq	%rdx, %rax
    000001ca: 	jbe	.Ltmp1482 # Offset: 458
    000001cc: 	movss	0x8(%rdi), %xmm0
    000001d1: 	movss	%xmm0, 0x20(%rcx)
.Ltmp1482:
    000001d6: 	movq	%rax, %rdx
    000001d9: 	leaq	0xc(%r9), %rdi
    000001dd: 	shlq	$0x4, %rdx
    000001e1: 	addq	%r9, %rdx
    000001e4: 	cmpq	%rdx, %r10
    000001e7: 	setae	%dl
    000001ea: 	addq	%r10, %r12
    000001ed: 	cmpq	%r12, %rdi
    000001f0: 	setae	%cl
    000001f3: 	orb	%cl, %dl
    000001f5: 	je	.Ltmp1483 # Offset: 501
    000001fb: 	movq	%rax, %r8
    000001fe: 	movq	%rdi, %rdx
    00000201: 	xorl	%ecx, %ecx
    00000203: 	shrq	$0x2, %r8
    00000207: 	testb	%bl, %bl
    00000209: 	je	.Ltmp1483 # Offset: 521
    0000020f: 	nop # Size: 1
.Ltmp1484:
    00000210: 	movq	%rcx, %rsi
    00000213: 	addq	$0x1, %rcx
    00000217: 	addq	$0x40, %rdx
    0000021b: 	shlq	$0x4, %rsi
    0000021f: 	movups	(%r10,%rsi), %xmm0
    00000224: 	movaps	%xmm0, %xmm1
    00000227: 	movss	%xmm0, -0x40(%rdx)
    0000022c: 	shufps	$0x55, %xmm0, %xmm1
    00000230: 	movss	%xmm1, -0x30(%rdx)
    00000235: 	movaps	%xmm0, %xmm1
    00000238: 	unpckhps	%xmm0, %xmm1
    0000023b: 	shufps	$0xff, %xmm0, %xmm0
    0000023f: 	movss	%xmm0, -0x10(%rdx)
    00000244: 	movss	%xmm1, -0x20(%rdx)
    00000249: 	cmpq	%rcx, %r8
    0000024c: 	jne	.Ltmp1484 # Offset: 588
    0000024e: 	movq	%rax, %rdx
    00000251: 	andq	$-0x4, %rdx
    00000255: 	movq	%rdx, %rcx
    00000258: 	leaq	(%r10,%rdx,4), %rsi
    0000025c: 	shlq	$0x4, %rcx
    00000260: 	addq	%rdi, %rcx
    00000263: 	cmpq	%rdx, %rax
    00000266: 	je	.Ltmp1485 # Offset: 614
    00000268: 	movss	(%rsi), %xmm0
    0000026c: 	leaq	0x1(%rdx), %rdi
    00000270: 	movss	%xmm0, (%rcx)
    00000274: 	cmpq	%rdi, %rax
    00000277: 	jbe	.Ltmp1485 # Offset: 631
    00000279: 	movss	0x4(%rsi), %xmm0
    0000027e: 	addq	$0x2, %rdx
    00000282: 	movss	%xmm0, 0x10(%rcx)
    00000287: 	cmpq	%rdx, %rax
    0000028a: 	jbe	.Ltmp1485 # Offset: 650
    0000028c: 	movss	0x8(%rsi), %xmm0
    00000291: 	movss	%xmm0, 0x20(%rcx)
.Ltmp1485:
    00000296: 	popq	%rbx
    00000297: 	popq	%rbp
    00000298: 	popq	%r12
    0000029a: 	popq	%r13
    0000029c: 	popq	%r14
    0000029e: 	retq # Offset: 670
    0000029f: 	nop # Size: 1
.Ltmp1483:
    000002a0: 	xorl	%eax, %eax
    000002a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1486:
    000002a8: 	movss	(%r10,%rax,4), %xmm0
    000002ae: 	movq	%rax, %rdx
    000002b1: 	addq	$0x10, %rdi
    000002b5: 	addq	$0x1, %rax
    000002b9: 	movss	%xmm0, -0x10(%rdi)
    000002be: 	cmpq	%rsi, %rdx
    000002c1: 	jne	.Ltmp1486 # Offset: 705
    000002c3: 	popq	%rbx
    000002c4: 	popq	%rbp
    000002c5: 	popq	%r12
    000002c7: 	popq	%r13
    000002c9: 	popq	%r14
    000002cb: 	retq # Offset: 715
    000002cc: 	nopl	(%rax) # Size: 4
.Ltmp1477:
    000002d0: 	xorl	%edx, %edx
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1487:
    000002d8: 	movss	(%rdi,%rdx,4), %xmm0
    000002dd: 	movq	%rdx, %rcx
    000002e0: 	addq	$0x10, %rbp
    000002e4: 	addq	$0x1, %rdx
    000002e8: 	movss	%xmm0, -0x10(%rbp)
    000002ed: 	cmpq	%rcx, %rsi
    000002f0: 	jne	.Ltmp1487 # Offset: 752
    000002f2: 	jmp	.Ltmp1479 # Offset: 754
    000002f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1480:
    00000300: 	xorl	%edx, %edx
    00000302: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1488:
    00000308: 	movss	(%r11,%rdx,4), %xmm0
    0000030e: 	movq	%rdx, %rcx
    00000311: 	addq	$0x10, %r8
    00000315: 	addq	$0x1, %rdx
    00000319: 	movss	%xmm0, -0x10(%r8)
    0000031f: 	cmpq	%rcx, %rsi
    00000322: 	jne	.Ltmp1488 # Offset: 802
    00000324: 	jmp	.Ltmp1482 # Offset: 804
    00000329: 	nopl	(%rax) # Size: 7
.Ltmp1475:
    00000330: 	retq # Offset: 816
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version2IfEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version3IfEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 160
  State       : disassembled
  Address     : 0x1e580
  Size        : 0x2d1
  MaxSize     : 0x2e0
  Offset      : 0x1e580
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version3IfEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0159:
    00000000: 	endbr64
    00000004: 	testl	%r8d, %r8d
    00000007: 	jle	.Ltmp1489 # Offset: 7
    0000000d: 	movslq	%r8d, %r10
    00000010: 	movq	%rdx, %r9
    00000013: 	pushq	%r12
    00000015: 	movq	%r10, %rax
    00000018: 	leaq	(,%r10,4), %r11
    00000020: 	pushq	%rbp
    00000021: 	shlq	$0x4, %rax
    00000025: 	leaq	(%rsi,%r11), %rdx
    00000029: 	pushq	%rbx
    0000002a: 	leal	-0x1(%r8), %ebx
    0000002e: 	leaq	-0x8(%rdi,%rax), %rax
    00000033: 	cmpq	%rax, %rsi
    00000036: 	setae	%al
    00000039: 	cmpq	%rdx, %rdi
    0000003c: 	setae	%dl
    0000003f: 	orb	%dl, %al
    00000041: 	je	.Ltmp1490 # Offset: 65
    00000047: 	cmpl	$0x21, %ebx
    0000004a: 	jbe	.Ltmp1490 # Offset: 74
    00000050: 	movl	%r8d, %ebp
    00000053: 	movq	%rsi, %rdx
    00000056: 	movq	%rdi, %rax
    00000059: 	shrl	$0x2, %ebp
    0000005c: 	subl	$0x1, %ebp
    0000005f: 	shlq	$0x4, %rbp
    00000063: 	leaq	0x10(%rsi,%rbp), %rbp
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1491:
    00000070: 	movups	(%rdx), %xmm1
    00000073: 	addq	$0x10, %rdx
    00000077: 	movss	%xmm0, (%rax)
    0000007b: 	addq	$0x40, %rax
    0000007f: 	movss	%xmm0, -0x30(%rax)
    00000084: 	movaps	%xmm1, %xmm2
    00000087: 	movss	%xmm1, -0x3c(%rax)
    0000008c: 	shufps	$0x55, %xmm1, %xmm2
    00000090: 	movss	%xmm2, -0x2c(%rax)
    00000095: 	movaps	%xmm1, %xmm2
    00000098: 	unpckhps	%xmm1, %xmm2
    0000009b: 	movss	%xmm0, -0x20(%rax)
    000000a0: 	shufps	$0xff, %xmm1, %xmm1
    000000a4: 	movss	%xmm0, -0x10(%rax)
    000000a9: 	movss	%xmm2, -0x1c(%rax)
    000000ae: 	movss	%xmm1, -0xc(%rax)
    000000b3: 	cmpq	%rbp, %rdx
    000000b6: 	jne	.Ltmp1491 # Offset: 182
    000000b8: 	movl	%r8d, %edx
    000000bb: 	andl	$-0x4, %edx
    000000be: 	testb	$0x3, %r8b
    000000c2: 	je	.Ltmp1492 # Offset: 194
    000000c4: 	leal	(,%rdx,4), %eax
    000000cb: 	movslq	%eax, %r12
    000000ce: 	movss	%xmm0, (%rdi,%r12,4)
    000000d4: 	movss	(%rsi,%r12), %xmm1
    000000da: 	leaq	(,%r12,4), %rbp
    000000e2: 	movss	%xmm1, 0x4(%rdi,%r12,4)
    000000e9: 	leal	0x1(%rdx), %r12d
    000000ed: 	cmpl	%r12d, %r8d
    000000f0: 	jle	.Ltmp1492 # Offset: 240
    000000f2: 	leal	0x4(%rax), %r12d
    000000f6: 	movss	%xmm0, 0x10(%rdi,%rbp)
    000000fc: 	addl	$0x2, %edx
    000000ff: 	movslq	%r12d, %r12
    00000102: 	movss	(%rsi,%r12), %xmm1
    00000108: 	movss	%xmm1, 0x4(%rdi,%r12,4)
    0000010f: 	cmpl	%edx, %r8d
    00000112: 	jle	.Ltmp1492 # Offset: 274
    00000114: 	addl	$0x8, %eax
    00000117: 	movss	%xmm0, 0x20(%rdi,%rbp)
    0000011d: 	cltq
    0000011f: 	movss	(%rsi,%rax), %xmm0
    00000124: 	movss	%xmm0, 0x4(%rdi,%rax,4)
.Ltmp1492:
    0000012a: 	leaq	(%r9,%r11), %rdx
    0000012e: 	leaq	0x8(%rdi), %rax
    00000132: 	shlq	$0x4, %r10
    00000136: 	addq	%rdi, %r10
    00000139: 	cmpq	%rdx, %rax
    0000013c: 	setae	%sil
    00000140: 	cmpq	%r10, %r9
    00000143: 	setae	%dl
    00000146: 	addq	%rcx, %r11
    00000149: 	orl	%edx, %esi
    0000014b: 	cmpq	%r11, %rax
    0000014e: 	setae	%dl
    00000151: 	cmpq	%r10, %rcx
    00000154: 	setae	%r10b
    00000158: 	orl	%r10d, %edx
    0000015b: 	testb	%dl, %sil
    0000015e: 	je	.Ltmp1493 # Offset: 350
    00000164: 	cmpl	$0x4, %ebx
    00000167: 	jbe	.Ltmp1493 # Offset: 359
    0000016d: 	movl	%r8d, %esi
    00000170: 	xorl	%edx, %edx
    00000172: 	shrl	$0x2, %esi
    00000175: 	shlq	$0x4, %rsi
    00000179: 	nopl	(%rax) # Size: 7
.Ltmp1494:
    00000180: 	movups	(%r9,%rdx), %xmm1
    00000185: 	movups	(%rcx,%rdx), %xmm0
    00000189: 	addq	$0x10, %rdx
    0000018d: 	addq	$0x40, %rax
    00000191: 	movaps	%xmm1, %xmm2
    00000194: 	movss	%xmm1, -0x40(%rax)
    00000199: 	shufps	$0x55, %xmm1, %xmm2
    0000019d: 	movss	%xmm2, -0x30(%rax)
    000001a2: 	movaps	%xmm1, %xmm2
    000001a5: 	unpckhps	%xmm1, %xmm2
    000001a8: 	shufps	$0xff, %xmm1, %xmm1
    000001ac: 	movss	%xmm1, -0x10(%rax)
    000001b1: 	movaps	%xmm0, %xmm1
    000001b4: 	shufps	$0x55, %xmm0, %xmm1
    000001b8: 	movss	%xmm1, -0x2c(%rax)
    000001bd: 	movaps	%xmm0, %xmm1
    000001c0: 	unpckhps	%xmm0, %xmm1
    000001c3: 	movss	%xmm0, -0x3c(%rax)
    000001c8: 	shufps	$0xff, %xmm0, %xmm0
    000001cc: 	movss	%xmm2, -0x20(%rax)
    000001d1: 	movss	%xmm1, -0x1c(%rax)
    000001d6: 	movss	%xmm0, -0xc(%rax)
    000001db: 	cmpq	%rdx, %rsi
    000001de: 	jne	.Ltmp1494 # Offset: 478
    000001e0: 	movl	%r8d, %edx
    000001e3: 	andl	$-0x4, %edx
    000001e6: 	testb	$0x3, %r8b
    000001ea: 	je	.Ltmp1495 # Offset: 490
    000001ec: 	movl	%edx, %esi
    000001ee: 	movss	(%r9,%rsi,4), %xmm0
    000001f4: 	leaq	(,%rsi,4), %rax
    000001fc: 	leaq	0x2(%rax), %r10
    00000200: 	movss	%xmm0, (%rdi,%r10,4)
    00000206: 	movss	(%rcx,%rsi,4), %xmm0
    0000020b: 	leal	0x1(%rdx), %esi
    0000020e: 	movss	%xmm0, 0x4(%rdi,%r10,4)
    00000215: 	cmpl	%esi, %r8d
    00000218: 	jle	.Ltmp1495 # Offset: 536
    0000021a: 	movss	0x4(%r9,%rax), %xmm0
    00000221: 	leaq	0x6(%rax), %rsi
    00000225: 	addl	$0x2, %edx
    00000228: 	movss	%xmm0, (%rdi,%rsi,4)
    0000022d: 	movss	0x4(%rcx,%rax), %xmm0
    00000233: 	movss	%xmm0, 0x4(%rdi,%rsi,4)
    00000239: 	cmpl	%edx, %r8d
    0000023c: 	jle	.Ltmp1495 # Offset: 572
    0000023e: 	movss	0x8(%r9,%rax), %xmm0
    00000245: 	leaq	0xa(%rax), %rdx
    00000249: 	movss	%xmm0, (%rdi,%rdx,4)
    0000024e: 	movss	0x8(%rcx,%rax), %xmm0
    00000254: 	movss	%xmm0, 0x4(%rdi,%rdx,4)
.Ltmp1495:
    0000025a: 	popq	%rbx
    0000025b: 	popq	%rbp
    0000025c: 	popq	%r12
    0000025e: 	retq # Offset: 606
    0000025f: 	nop # Size: 1
.Ltmp1493:
    00000260: 	movl	%r8d, %r8d
    00000263: 	xorl	%eax, %eax
    00000265: 	shlq	$0x2, %r8
    00000269: 	nopl	(%rax) # Size: 7
.Ltmp1496:
    00000270: 	movss	(%r9,%rax), %xmm0
    00000276: 	movss	%xmm0, 0x8(%rdi,%rax,4)
    0000027c: 	movss	(%rcx,%rax), %xmm0
    00000281: 	movss	%xmm0, 0xc(%rdi,%rax,4)
    00000287: 	addq	$0x4, %rax
    0000028b: 	cmpq	%rax, %r8
    0000028e: 	jne	.Ltmp1496 # Offset: 654
    00000290: 	popq	%rbx
    00000291: 	popq	%rbp
    00000292: 	popq	%r12
    00000294: 	retq # Offset: 660
    00000295: 	nopl	(%rax) # Size: 3
.Ltmp1490:
    00000298: 	movl	%ebx, %edx
    0000029a: 	movq	%rdi, %rax
    0000029d: 	shlq	$0x4, %rdx
    000002a1: 	leaq	0x10(%rdi,%rdx), %rdx
    000002a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1497:
    000002b0: 	movss	%xmm0, (%rax)
    000002b4: 	movss	(%rsi), %xmm1
    000002b8: 	addq	$0x10, %rax
    000002bc: 	addq	$0x4, %rsi
    000002c0: 	movss	%xmm1, -0xc(%rax)
    000002c5: 	cmpq	%rax, %rdx
    000002c8: 	jne	.Ltmp1497 # Offset: 712
    000002ca: 	jmp	.Ltmp1492 # Offset: 714
    000002cf: 	nop # Size: 1
.Ltmp1489:
    000002d0: 	retq # Offset: 720
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version3IfEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version4IfEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 161
  State       : disassembled
  Address     : 0x1e860
  Size        : 0x41d
  MaxSize     : 0x420
  Offset      : 0x1e860
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version4IfEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0160:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r8d, -0x18(%rsp)
    00000013: 	movl	%r8d, -0x14(%rsp)
    00000018: 	testl	%r8d, %r8d
    0000001b: 	jle	.Ltmp1498 # Offset: 27
    00000021: 	movq	%rdi, %r13
    00000024: 	movaps	%xmm0, %xmm2
    00000027: 	movq	%rdx, %rdi
    0000002a: 	movq	%rcx, %r9
    0000002d: 	xorl	%r15d, %r15d
.Ltmp1510:
    00000030: 	addl	$0x100, %r15d
    00000037: 	cmpl	-0x18(%rsp), %r15d
    0000003c: 	jg	.Ltmp1499 # Offset: 60
    00000042: 	movq	$0x1000, -0x20(%rsp)
    0000004b: 	movl	$0x400, %r12d
    00000051: 	movl	$0x100, %eax
.Ltmp1511:
    00000056: 	movq	%r13, %rcx
    00000059: 	xorl	%edx, %edx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1500:
    00000060: 	addq	$0x1, %rdx
    00000064: 	movss	%xmm2, (%rcx)
    00000068: 	addq	$0x10, %rcx
    0000006c: 	cmpq	%rdx, %rax
    0000006f: 	ja	.Ltmp1500 # Offset: 111
    00000071: 	cmpq	$0x7, %rax
    00000075: 	movl	$0x4, %ecx
    0000007a: 	leaq	(,%rax,4), %rbx
    00000082: 	seta	%r14b
    00000086: 	leaq	-0x1(%rax), %r8
    0000008a: 	leaq	0x4(%r13), %r11
    0000008e: 	testq	%rax, %rax
    00000091: 	cmoveq	%rcx, %rbx
    00000095: 	shlq	$0x4, %r8
    00000099: 	movl	$0x8, %ecx
    0000009e: 	testq	%rax, %rax
    000000a1: 	leaq	0x8(%r8), %rdx
    000000a5: 	cmoveq	%rcx, %rdx
    000000a9: 	addq	%r13, %rdx
    000000ac: 	cmpq	%rdx, %rsi
    000000af: 	leaq	(%rsi,%rbx), %rdx
    000000b3: 	setae	%cl
    000000b6: 	cmpq	%rdx, %r11
    000000b9: 	setae	%dl
    000000bc: 	orb	%cl, %dl
    000000be: 	je	.Ltmp1501 # Offset: 190
    000000c4: 	testb	%r14b, %r14b
    000000c7: 	je	.Ltmp1501 # Offset: 199
    000000cd: 	testq	%rax, %rax
    000000d0: 	movl	$0x1, %ecx
    000000d5: 	movq	%r11, %rdx
    000000d8: 	cmovneq	%rax, %rcx
    000000dc: 	movq	%rcx, %rbp
    000000df: 	movq	%rcx, -0x10(%rsp)
    000000e4: 	xorl	%ecx, %ecx
    000000e6: 	shrq	$0x2, %rbp
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1502:
    000000f0: 	movq	%rcx, %r10
    000000f3: 	addq	$0x1, %rcx
    000000f7: 	addq	$0x40, %rdx
    000000fb: 	shlq	$0x4, %r10
    000000ff: 	movups	(%rsi,%r10), %xmm0
    00000104: 	movaps	%xmm0, %xmm1
    00000107: 	movss	%xmm0, -0x40(%rdx)
    0000010c: 	shufps	$0x55, %xmm0, %xmm1
    00000110: 	movss	%xmm1, -0x30(%rdx)
    00000115: 	movaps	%xmm0, %xmm1
    00000118: 	unpckhps	%xmm0, %xmm1
    0000011b: 	shufps	$0xff, %xmm0, %xmm0
    0000011f: 	movss	%xmm0, -0x10(%rdx)
    00000124: 	movss	%xmm1, -0x20(%rdx)
    00000129: 	cmpq	%rbp, %rcx
    0000012c: 	jne	.Ltmp1502 # Offset: 300
    0000012e: 	movq	-0x10(%rsp), %rbp
    00000133: 	movq	%rbp, %rdx
    00000136: 	andq	$-0x4, %rdx
    0000013a: 	movq	%rdx, %rcx
    0000013d: 	leaq	(%rsi,%rdx,4), %r10
    00000141: 	shlq	$0x4, %rcx
    00000145: 	addq	%r11, %rcx
    00000148: 	cmpq	%rdx, %rbp
    0000014b: 	je	.Ltmp1503 # Offset: 331
    0000014d: 	movss	(%r10), %xmm0
    00000152: 	leaq	0x1(%rdx), %r11
    00000156: 	movss	%xmm0, (%rcx)
    0000015a: 	cmpq	%r11, %rax
    0000015d: 	jbe	.Ltmp1503 # Offset: 349
    0000015f: 	movss	0x4(%r10), %xmm0
    00000165: 	addq	$0x2, %rdx
    00000169: 	movss	%xmm0, 0x10(%rcx)
    0000016e: 	cmpq	%rdx, %rax
    00000171: 	jbe	.Ltmp1503 # Offset: 369
    00000173: 	movss	0x8(%r10), %xmm0
    00000179: 	movss	%xmm0, 0x20(%rcx)
.Ltmp1503:
    0000017e: 	addq	$0xc, %r8
    00000182: 	movl	$0xc, %ecx
    00000187: 	leaq	(%rdi,%rbx), %rdx
    0000018b: 	testq	%rax, %rax
    0000018e: 	cmoveq	%rcx, %r8
    00000192: 	leaq	0x8(%r13), %r10
    00000196: 	addq	%r13, %r8
    00000199: 	cmpq	%r8, %rdi
    0000019c: 	setae	%cl
    0000019f: 	cmpq	%rdx, %r10
    000001a2: 	setae	%dl
    000001a5: 	orb	%cl, %dl
    000001a7: 	je	.Ltmp1504 # Offset: 423
    000001ad: 	testb	%r14b, %r14b
    000001b0: 	je	.Ltmp1504 # Offset: 432
    000001b6: 	testq	%rax, %rax
    000001b9: 	movl	$0x1, %ebp
    000001be: 	movq	%r10, %rdx
    000001c1: 	cmovneq	%rax, %rbp
    000001c5: 	xorl	%ecx, %ecx
    000001c7: 	movq	%rbp, %r11
    000001ca: 	shrq	$0x2, %r11
    000001ce: 	nop # Size: 2
.Ltmp1505:
    000001d0: 	movq	%rcx, %r8
    000001d3: 	addq	$0x1, %rcx
    000001d7: 	addq	$0x40, %rdx
    000001db: 	shlq	$0x4, %r8
    000001df: 	movups	(%rdi,%r8), %xmm0
    000001e4: 	movaps	%xmm0, %xmm1
    000001e7: 	movss	%xmm0, -0x40(%rdx)
    000001ec: 	shufps	$0x55, %xmm0, %xmm1
    000001f0: 	movss	%xmm1, -0x30(%rdx)
    000001f5: 	movaps	%xmm0, %xmm1
    000001f8: 	unpckhps	%xmm0, %xmm1
    000001fb: 	shufps	$0xff, %xmm0, %xmm0
    000001ff: 	movss	%xmm0, -0x10(%rdx)
    00000204: 	movss	%xmm1, -0x20(%rdx)
    00000209: 	cmpq	%r11, %rcx
    0000020c: 	jne	.Ltmp1505 # Offset: 524
    0000020e: 	movq	%rbp, %rdx
    00000211: 	andq	$-0x4, %rdx
    00000215: 	movq	%rdx, %rcx
    00000218: 	leaq	(%rdi,%rdx,4), %r8
    0000021c: 	shlq	$0x4, %rcx
    00000220: 	addq	%r10, %rcx
    00000223: 	cmpq	%rdx, %rbp
    00000226: 	je	.Ltmp1506 # Offset: 550
    00000228: 	movss	(%r8), %xmm0
    0000022d: 	leaq	0x1(%rdx), %r10
    00000231: 	movss	%xmm0, (%rcx)
    00000235: 	cmpq	%r10, %rax
    00000238: 	jbe	.Ltmp1506 # Offset: 568
    0000023a: 	movss	0x4(%r8), %xmm0
    00000240: 	addq	$0x2, %rdx
    00000244: 	movss	%xmm0, 0x10(%rcx)
    00000249: 	cmpq	%rdx, %rax
    0000024c: 	jbe	.Ltmp1506 # Offset: 588
    0000024e: 	movss	0x8(%r8), %xmm0
    00000254: 	movss	%xmm0, 0x20(%rcx)
.Ltmp1506:
    00000259: 	movq	%rax, %rdx
    0000025c: 	movl	$0x10, %ecx
    00000261: 	leaq	0xc(%r13), %r10
    00000265: 	shlq	$0x4, %rdx
    00000269: 	testq	%rax, %rax
    0000026c: 	cmoveq	%rcx, %rdx
    00000270: 	addq	%r13, %rdx
    00000273: 	cmpq	%rdx, %r9
    00000276: 	setae	%dl
    00000279: 	addq	%r9, %rbx
    0000027c: 	cmpq	%rbx, %r10
    0000027f: 	setae	%cl
    00000282: 	orb	%dl, %cl
    00000284: 	je	.Ltmp1507 # Offset: 644
    0000028a: 	testb	%r14b, %r14b
    0000028d: 	je	.Ltmp1507 # Offset: 653
    00000293: 	testq	%rax, %rax
    00000296: 	movl	$0x1, %ebx
    0000029b: 	movq	%r10, %rdx
    0000029e: 	cmovneq	%rax, %rbx
    000002a2: 	xorl	%ecx, %ecx
    000002a4: 	movq	%rbx, %r11
    000002a7: 	shrq	$0x2, %r11
    000002ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1508:
    000002b0: 	movq	%rcx, %r8
    000002b3: 	addq	$0x1, %rcx
    000002b7: 	addq	$0x40, %rdx
    000002bb: 	shlq	$0x4, %r8
    000002bf: 	movups	(%r9,%r8), %xmm0
    000002c4: 	movaps	%xmm0, %xmm1
    000002c7: 	movss	%xmm0, -0x40(%rdx)
    000002cc: 	shufps	$0x55, %xmm0, %xmm1
    000002d0: 	movss	%xmm1, -0x30(%rdx)
    000002d5: 	movaps	%xmm0, %xmm1
    000002d8: 	unpckhps	%xmm0, %xmm1
    000002db: 	shufps	$0xff, %xmm0, %xmm0
    000002df: 	movss	%xmm0, -0x10(%rdx)
    000002e4: 	movss	%xmm1, -0x20(%rdx)
    000002e9: 	cmpq	%rcx, %r11
    000002ec: 	jne	.Ltmp1508 # Offset: 748
    000002ee: 	movq	%rbx, %rdx
    000002f1: 	andq	$-0x4, %rdx
    000002f5: 	movq	%rdx, %rcx
    000002f8: 	leaq	(%r9,%rdx,4), %r8
    000002fc: 	shlq	$0x4, %rcx
    00000300: 	addq	%r10, %rcx
    00000303: 	cmpq	%rdx, %rbx
    00000306: 	je	.Ltmp1509 # Offset: 774
    00000308: 	movss	(%r8), %xmm0
    0000030d: 	leaq	0x1(%rdx), %r10
    00000311: 	movss	%xmm0, (%rcx)
    00000315: 	cmpq	%r10, %rax
    00000318: 	jbe	.Ltmp1509 # Offset: 792
    0000031a: 	movss	0x4(%r8), %xmm0
    00000320: 	addq	$0x2, %rdx
    00000324: 	movss	%xmm0, 0x10(%rcx)
    00000329: 	cmpq	%rdx, %rax
    0000032c: 	jbe	.Ltmp1509 # Offset: 812
    0000032e: 	movss	0x8(%r8), %xmm0
    00000334: 	movss	%xmm0, 0x20(%rcx)
.Ltmp1509:
    00000339: 	addq	-0x20(%rsp), %r13
    0000033e: 	addq	%r12, %rsi
    00000341: 	addq	%r12, %rdi
    00000344: 	addq	%r12, %r9
    00000347: 	subl	$0x100, -0x14(%rsp)
    0000034f: 	cmpl	-0x18(%rsp), %r15d
    00000354: 	jl	.Ltmp1510 # Offset: 852
.Ltmp1498:
    0000035a: 	popq	%rbx
    0000035b: 	popq	%rbp
    0000035c: 	popq	%r12
    0000035e: 	popq	%r13
    00000360: 	popq	%r14
    00000362: 	popq	%r15
    00000364: 	retq # Offset: 868
    00000365: 	nopl	(%rax) # Size: 3
.Ltmp1499:
    00000368: 	movslq	-0x14(%rsp), %rax
    0000036d: 	leal	(,%rax,4), %edx
    00000374: 	leaq	(,%rax,4), %r12
    0000037c: 	movslq	%edx, %rdx
    0000037f: 	leaq	(,%rdx,4), %rbx
    00000387: 	movq	%rbx, -0x20(%rsp)
    0000038c: 	testq	%rax, %rax
    0000038f: 	jne	.Ltmp1511 # Offset: 911
    00000395: 	jmp	.Ltmp1509 # Offset: 917
    00000397: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1507:
    000003a0: 	xorl	%edx, %edx
    000003a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1512:
    000003a8: 	movss	(%r9,%rdx,4), %xmm0
    000003ae: 	addq	$0x1, %rdx
    000003b2: 	addq	$0x10, %r10
    000003b6: 	movss	%xmm0, -0x10(%r10)
    000003bc: 	cmpq	%rax, %rdx
    000003bf: 	jb	.Ltmp1512 # Offset: 959
    000003c1: 	jmp	.Ltmp1509 # Offset: 961
    000003c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1504:
    000003d0: 	xorl	%edx, %edx
    000003d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1513:
    000003d8: 	movss	(%rdi,%rdx,4), %xmm0
    000003dd: 	addq	$0x1, %rdx
    000003e1: 	addq	$0x10, %r10
    000003e5: 	movss	%xmm0, -0x10(%r10)
    000003eb: 	cmpq	%rdx, %rax
    000003ee: 	ja	.Ltmp1513 # Offset: 1006
    000003f0: 	jmp	.Ltmp1506 # Offset: 1008
    000003f5: 	nopl	(%rax) # Size: 3
.Ltmp1501:
    000003f8: 	xorl	%edx, %edx
    000003fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1514:
    00000400: 	movss	(%rsi,%rdx,4), %xmm0
    00000405: 	addq	$0x1, %rdx
    00000409: 	addq	$0x10, %r11
    0000040d: 	movss	%xmm0, -0x10(%r11)
    00000413: 	cmpq	%rdx, %rax
    00000416: 	ja	.Ltmp1514 # Offset: 1046
    00000418: 	jmp	.Ltmp1503 # Offset: 1048
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version4IfEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version5IfEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 162
  State       : disassembled
  Address     : 0x1ec80
  Size        : 0x360
  MaxSize     : 0x360
  Offset      : 0x1ec80
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version5IfEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0161:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r8d, -0xc(%rsp)
    00000013: 	testl	%r8d, %r8d
    00000016: 	jle	.Ltmp1515 # Offset: 22
    0000001c: 	movq	%rsi, %r10
    0000001f: 	movaps	%xmm0, %xmm2
    00000022: 	movq	%rdx, %r9
    00000025: 	movq	%rcx, %rsi
    00000028: 	movl	%r8d, %r13d
    0000002b: 	xorl	%r12d, %r12d
    0000002e: 	nop # Size: 2
.Ltmp1523:
    00000030: 	addl	$0x100, %r12d
    00000037: 	cmpl	-0xc(%rsp), %r12d
    0000003c: 	jg	.Ltmp1516 # Offset: 60
    00000042: 	movl	$0x400, %ebp
    00000047: 	movl	$0x1000, %r14d
    0000004d: 	movl	$0x100, %ecx
.Ltmp1524:
    00000052: 	movslq	%ecx, %r8
    00000055: 	movl	$0x8, %ebx
    0000005a: 	movq	%r8, %rax
    0000005d: 	leaq	(,%r8,4), %r11
    00000065: 	shlq	$0x4, %rax
    00000069: 	subq	$0x8, %rax
    0000006d: 	testl	%ecx, %ecx
    0000006f: 	cmovleq	%rbx, %rax
    00000073: 	addq	%rdi, %rax
    00000076: 	cmpq	%rax, %r10
    00000079: 	movl	$0x4, %eax
    0000007e: 	setae	%dl
    00000081: 	testl	%ecx, %ecx
    00000083: 	cmovgq	%r11, %rax
    00000087: 	addq	%r10, %rax
    0000008a: 	cmpq	%rax, %rdi
    0000008d: 	setae	%al
    00000090: 	orb	%dl, %al
    00000092: 	je	.Ltmp1517 # Offset: 146
    00000098: 	cmpl	$0x22, %ecx
    0000009b: 	jle	.Ltmp1517 # Offset: 155
    000000a1: 	testl	%ecx, %ecx
    000000a3: 	movl	$0x1, %r15d
    000000a9: 	movq	%r10, %rdx
    000000ac: 	movq	%rdi, %rax
    000000af: 	cmovgl	%ecx, %r15d
    000000b3: 	movl	%r15d, %ebx
    000000b6: 	shrl	$0x2, %ebx
    000000b9: 	subl	$0x1, %ebx
    000000bc: 	shlq	$0x4, %rbx
    000000c0: 	leaq	0x10(%r10,%rbx), %rbx
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp1518:
    000000c8: 	movups	(%rdx), %xmm0
    000000cb: 	addq	$0x10, %rdx
    000000cf: 	movss	%xmm2, (%rax)
    000000d3: 	addq	$0x40, %rax
    000000d7: 	movss	%xmm2, -0x30(%rax)
    000000dc: 	movaps	%xmm0, %xmm1
    000000df: 	movss	%xmm0, -0x3c(%rax)
    000000e4: 	shufps	$0x55, %xmm0, %xmm1
    000000e8: 	movss	%xmm1, -0x2c(%rax)
    000000ed: 	movaps	%xmm0, %xmm1
    000000f0: 	unpckhps	%xmm0, %xmm1
    000000f3: 	movss	%xmm2, -0x20(%rax)
    000000f8: 	shufps	$0xff, %xmm0, %xmm0
    000000fc: 	movss	%xmm2, -0x10(%rax)
    00000101: 	movss	%xmm1, -0x1c(%rax)
    00000106: 	movss	%xmm0, -0xc(%rax)
    0000010b: 	cmpq	%rdx, %rbx
    0000010e: 	jne	.Ltmp1518 # Offset: 270
    00000110: 	movl	%r15d, %edx
    00000113: 	andl	$-0x4, %edx
    00000116: 	andl	$0x3, %r15d
    0000011a: 	je	.Ltmp1519 # Offset: 282
    0000011c: 	leal	(,%rdx,4), %eax
    00000123: 	movslq	%eax, %rbx
    00000126: 	movss	%xmm2, (%rdi,%rbx,4)
    0000012b: 	movss	(%r10,%rbx), %xmm0
    00000131: 	leaq	(,%rbx,4), %r15
    00000139: 	movss	%xmm0, 0x4(%rdi,%rbx,4)
    0000013f: 	leal	0x1(%rdx), %ebx
    00000142: 	cmpl	%ebx, %ecx
    00000144: 	jle	.Ltmp1519 # Offset: 324
    00000146: 	leal	0x4(%rax), %ebx
    00000149: 	movss	%xmm2, 0x10(%rdi,%r15)
    00000150: 	addl	$0x2, %edx
    00000153: 	movslq	%ebx, %rbx
    00000156: 	movss	(%r10,%rbx), %xmm0
    0000015c: 	movss	%xmm0, 0x4(%rdi,%rbx,4)
    00000162: 	cmpl	%edx, %ecx
    00000164: 	jle	.Ltmp1519 # Offset: 356
    00000166: 	addl	$0x8, %eax
    00000169: 	movss	%xmm2, 0x20(%rdi,%r15)
    00000170: 	cltq
    00000172: 	movss	(%r10,%rax), %xmm0
    00000178: 	movss	%xmm0, 0x4(%rdi,%rax,4)
.Ltmp1519:
    0000017e: 	leaq	(%rsi,%r11), %rdx
    00000182: 	leaq	0x8(%rdi), %rax
    00000186: 	shlq	$0x4, %r8
    0000018a: 	addq	%rdi, %r8
    0000018d: 	cmpq	%rdx, %rax
    00000190: 	setae	%bl
    00000193: 	cmpq	%r8, %rsi
    00000196: 	setae	%dl
    00000199: 	addq	%r9, %r11
    0000019c: 	orl	%ebx, %edx
    0000019e: 	cmpq	%r11, %rax
    000001a1: 	setae	%r11b
    000001a5: 	cmpq	%r8, %r9
    000001a8: 	setae	%r8b
    000001ac: 	orl	%r11d, %r8d
    000001af: 	testb	%r8b, %dl
    000001b2: 	je	.Ltmp1520 # Offset: 434
    000001b8: 	leal	-0x1(%rcx), %edx
    000001bb: 	cmpl	$0x4, %edx
    000001be: 	jbe	.Ltmp1520 # Offset: 446
    000001c4: 	movl	%ecx, %r8d
    000001c7: 	xorl	%edx, %edx
    000001c9: 	shrl	$0x2, %r8d
    000001cd: 	shlq	$0x4, %r8
    000001d1: 	nopl	(%rax) # Size: 7
.Ltmp1521:
    000001d8: 	movups	(%r9,%rdx), %xmm1
    000001dd: 	movups	(%rsi,%rdx), %xmm0
    000001e1: 	addq	$0x10, %rdx
    000001e5: 	addq	$0x40, %rax
    000001e9: 	movaps	%xmm1, %xmm3
    000001ec: 	movss	%xmm1, -0x40(%rax)
    000001f1: 	shufps	$0x55, %xmm1, %xmm3
    000001f5: 	movss	%xmm3, -0x30(%rax)
    000001fa: 	movaps	%xmm1, %xmm3
    000001fd: 	unpckhps	%xmm1, %xmm3
    00000200: 	shufps	$0xff, %xmm1, %xmm1
    00000204: 	movss	%xmm1, -0x10(%rax)
    00000209: 	movaps	%xmm0, %xmm1
    0000020c: 	shufps	$0x55, %xmm0, %xmm1
    00000210: 	movss	%xmm1, -0x2c(%rax)
    00000215: 	movaps	%xmm0, %xmm1
    00000218: 	unpckhps	%xmm0, %xmm1
    0000021b: 	movss	%xmm0, -0x3c(%rax)
    00000220: 	shufps	$0xff, %xmm0, %xmm0
    00000224: 	movss	%xmm3, -0x20(%rax)
    00000229: 	movss	%xmm1, -0x1c(%rax)
    0000022e: 	movss	%xmm0, -0xc(%rax)
    00000233: 	cmpq	%rdx, %r8
    00000236: 	jne	.Ltmp1521 # Offset: 566
    00000238: 	movl	%ecx, %edx
    0000023a: 	andl	$-0x4, %edx
    0000023d: 	testb	$0x3, %cl
    00000240: 	je	.Ltmp1522 # Offset: 576
    00000242: 	movl	%edx, %r8d
    00000245: 	movss	(%r9,%r8,4), %xmm0
    0000024b: 	leaq	(,%r8,4), %rax
    00000253: 	leaq	0x2(%rax), %r11
    00000257: 	movss	%xmm0, (%rdi,%r11,4)
    0000025d: 	movss	(%rsi,%r8,4), %xmm0
    00000263: 	leal	0x1(%rdx), %r8d
    00000267: 	movss	%xmm0, 0x4(%rdi,%r11,4)
    0000026e: 	cmpl	%r8d, %ecx
    00000271: 	jle	.Ltmp1522 # Offset: 625
    00000273: 	movss	0x4(%r9,%rax), %xmm0
    0000027a: 	leaq	0x6(%rax), %r8
    0000027e: 	addl	$0x2, %edx
    00000281: 	movss	%xmm0, (%rdi,%r8,4)
    00000287: 	movss	0x4(%rsi,%rax), %xmm0
    0000028d: 	movss	%xmm0, 0x4(%rdi,%r8,4)
    00000294: 	cmpl	%edx, %ecx
    00000296: 	jle	.Ltmp1522 # Offset: 662
    00000298: 	movss	0x8(%r9,%rax), %xmm0
    0000029f: 	leaq	0xa(%rax), %rdx
    000002a3: 	movss	%xmm0, (%rdi,%rdx,4)
    000002a8: 	movss	0x8(%rsi,%rax), %xmm0
    000002ae: 	movss	%xmm0, 0x4(%rdi,%rdx,4)
.Ltmp1522:
    000002b4: 	addq	%r14, %rdi
    000002b7: 	addq	%rbp, %r10
    000002ba: 	addq	%rbp, %r9
    000002bd: 	addq	%rbp, %rsi
    000002c0: 	subl	$0x100, %r13d
    000002c7: 	cmpl	-0xc(%rsp), %r12d
    000002cc: 	jl	.Ltmp1523 # Offset: 716
.Ltmp1515:
    000002d2: 	popq	%rbx
    000002d3: 	popq	%rbp
    000002d4: 	popq	%r12
    000002d6: 	popq	%r13
    000002d8: 	popq	%r14
    000002da: 	popq	%r15
    000002dc: 	retq # Offset: 732
    000002dd: 	nopl	(%rax) # Size: 3
.Ltmp1516:
    000002e0: 	leal	(,%r13,4), %r14d
    000002e8: 	movslq	%r13d, %rbp
    000002eb: 	movl	%r13d, %ecx
    000002ee: 	movslq	%r14d, %r14
    000002f1: 	shlq	$0x2, %rbp
    000002f5: 	shlq	$0x2, %r14
    000002f9: 	testl	%r13d, %r13d
    000002fc: 	jg	.Ltmp1524 # Offset: 764
    00000302: 	jmp	.Ltmp1522 # Offset: 770
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp1520:
    00000308: 	movl	%ecx, %ecx
    0000030a: 	xorl	%eax, %eax
    0000030c: 	shlq	$0x2, %rcx
.Ltmp1525:
    00000310: 	movss	(%r9,%rax), %xmm0
    00000316: 	movss	%xmm0, 0x8(%rdi,%rax,4)
    0000031c: 	movss	(%rsi,%rax), %xmm0
    00000321: 	movss	%xmm0, 0xc(%rdi,%rax,4)
    00000327: 	addq	$0x4, %rax
    0000032b: 	cmpq	%rax, %rcx
    0000032e: 	jne	.Ltmp1525 # Offset: 814
    00000330: 	jmp	.Ltmp1522 # Offset: 816
    00000332: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1517:
    00000338: 	movq	%rdi, %rdx
    0000033b: 	xorl	%eax, %eax
    0000033d: 	nopl	(%rax) # Size: 3
.Ltmp1526:
    00000340: 	movss	%xmm2, (%rdx)
    00000344: 	movss	(%r10,%rax,4), %xmm0
    0000034a: 	addq	$0x1, %rax
    0000034e: 	addq	$0x10, %rdx
    00000352: 	movss	%xmm0, -0xc(%rdx)
    00000357: 	cmpl	%eax, %ecx
    00000359: 	jg	.Ltmp1526 # Offset: 857
    0000035b: 	jmp	.Ltmp1519 # Offset: 859
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version5IfEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version6IfEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 163
  State       : disassembled
  Address     : 0x1efe0
  Size        : 0x3f5
  MaxSize     : 0x400
  Offset      : 0x1efe0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version6IfEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0162:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r8d, -0x10(%rsp)
    00000013: 	testl	%r8d, %r8d
    00000016: 	jle	.Ltmp1527 # Offset: 22
    0000001c: 	movq	%rsi, %r10
    0000001f: 	movaps	%xmm0, %xmm2
    00000022: 	movq	%rdx, %r9
    00000025: 	movq	%rcx, %rsi
    00000028: 	movl	%r8d, %r13d
    0000002b: 	xorl	%r14d, %r14d
    0000002e: 	nop # Size: 2
.Ltmp1539:
    00000030: 	addl	$0x100, %r14d
    00000037: 	cmpl	-0x10(%rsp), %r14d
    0000003c: 	jg	.Ltmp1528 # Offset: 60
    00000042: 	movq	$0x1000, -0x18(%rsp)
    0000004b: 	movl	$0x400, %ebx
    00000050: 	movl	$0x100, %ecx
.Ltmp1541:
    00000055: 	movq	%rdi, %rdx
    00000058: 	xorl	%eax, %eax
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1529:
    00000060: 	addl	$0x1, %eax
    00000063: 	movss	%xmm2, (%rdx)
    00000067: 	addq	$0x10, %rdx
    0000006b: 	cmpl	%ecx, %eax
    0000006d: 	jl	.Ltmp1529 # Offset: 109
    0000006f: 	leal	-0x1(%rcx), %eax
    00000072: 	movslq	%ecx, %r8
    00000075: 	cmpl	$0x6, %eax
    00000078: 	leaq	-0x1(%r8), %rbp
    0000007c: 	leaq	(,%r8,4), %r11
    00000084: 	movl	%eax, -0xc(%rsp)
    00000088: 	seta	%r12b
    0000008c: 	shlq	$0x4, %rbp
    00000090: 	leaq	0x4(%rdi), %rax
    00000094: 	leaq	0x8(%rdi,%rbp), %rdx
    00000099: 	cmpq	%rdx, %r10
    0000009c: 	leaq	(%r10,%r11), %rdx
    000000a0: 	setae	%r15b
    000000a4: 	cmpq	%rdx, %rax
    000000a7: 	setae	%dl
    000000aa: 	orb	%r15b, %dl
    000000ad: 	movq	%r10, %rdx
    000000b0: 	je	.Ltmp1530 # Offset: 176
    000000b6: 	testb	%r12b, %r12b
    000000b9: 	je	.Ltmp1530 # Offset: 185
    000000bf: 	movl	%ecx, %r15d
    000000c2: 	shrl	$0x2, %r15d
    000000c6: 	subl	$0x1, %r15d
    000000ca: 	shlq	$0x4, %r15
    000000ce: 	leaq	0x10(%r10,%r15), %r15
    000000d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1531:
    000000d8: 	movups	(%rdx), %xmm0
    000000db: 	addq	$0x10, %rdx
    000000df: 	addq	$0x40, %rax
    000000e3: 	movaps	%xmm0, %xmm1
    000000e6: 	movss	%xmm0, -0x40(%rax)
    000000eb: 	shufps	$0x55, %xmm0, %xmm1
    000000ef: 	movss	%xmm1, -0x30(%rax)
    000000f4: 	movaps	%xmm0, %xmm1
    000000f7: 	unpckhps	%xmm0, %xmm1
    000000fa: 	shufps	$0xff, %xmm0, %xmm0
    000000fe: 	movss	%xmm0, -0x10(%rax)
    00000103: 	movss	%xmm1, -0x20(%rax)
    00000108: 	cmpq	%r15, %rdx
    0000010b: 	jne	.Ltmp1531 # Offset: 267
    0000010d: 	movl	%ecx, %eax
    0000010f: 	andl	$-0x4, %eax
    00000112: 	testb	$0x3, %cl
    00000115: 	je	.Ltmp1532 # Offset: 277
    00000117: 	movl	%eax, %r15d
    0000011a: 	movss	(%r10,%r15,4), %xmm0
    00000120: 	leaq	(,%r15,4), %rdx
    00000128: 	leal	0x1(%rax), %r15d
    0000012c: 	movss	%xmm0, 0x4(%rdi,%rdx,4)
    00000132: 	cmpl	%r15d, %ecx
    00000135: 	jle	.Ltmp1532 # Offset: 309
    00000137: 	movss	0x4(%r10,%rdx), %xmm0
    0000013e: 	addl	$0x2, %eax
    00000141: 	movss	%xmm0, 0x14(%rdi,%rdx,4)
    00000147: 	cmpl	%eax, %ecx
    00000149: 	jle	.Ltmp1532 # Offset: 329
    0000014b: 	movss	0x8(%r10,%rdx), %xmm0
    00000152: 	movss	%xmm0, 0x24(%rdi,%rdx,4)
.Ltmp1532:
    00000158: 	leaq	0xc(%rdi,%rbp), %rdx
    0000015d: 	leaq	0x8(%rdi), %rax
    00000161: 	cmpq	%rdx, %r9
    00000164: 	leaq	(%r9,%r11), %rdx
    00000168: 	setae	%bpl
    0000016c: 	cmpq	%rdx, %rax
    0000016f: 	setae	%dl
    00000172: 	orb	%bpl, %dl
    00000175: 	movq	%r9, %rdx
    00000178: 	je	.Ltmp1533 # Offset: 376
    0000017e: 	testb	%r12b, %r12b
    00000181: 	je	.Ltmp1533 # Offset: 385
    00000187: 	movl	%ecx, %ebp
    00000189: 	shrl	$0x2, %ebp
    0000018c: 	subl	$0x1, %ebp
    0000018f: 	shlq	$0x4, %rbp
    00000193: 	leaq	0x10(%r9,%rbp), %rbp
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1534:
    000001a0: 	movups	(%rdx), %xmm0
    000001a3: 	addq	$0x10, %rdx
    000001a7: 	addq	$0x40, %rax
    000001ab: 	movaps	%xmm0, %xmm1
    000001ae: 	movss	%xmm0, -0x40(%rax)
    000001b3: 	shufps	$0x55, %xmm0, %xmm1
    000001b7: 	movss	%xmm1, -0x30(%rax)
    000001bc: 	movaps	%xmm0, %xmm1
    000001bf: 	unpckhps	%xmm0, %xmm1
    000001c2: 	shufps	$0xff, %xmm0, %xmm0
    000001c6: 	movss	%xmm0, -0x10(%rax)
    000001cb: 	movss	%xmm1, -0x20(%rax)
    000001d0: 	cmpq	%rbp, %rdx
    000001d3: 	jne	.Ltmp1534 # Offset: 467
    000001d5: 	movl	%ecx, %eax
    000001d7: 	andl	$-0x4, %eax
    000001da: 	testb	$0x3, %cl
    000001dd: 	je	.Ltmp1535 # Offset: 477
    000001df: 	movl	%eax, %ebp
    000001e1: 	movss	(%r9,%rbp,4), %xmm0
    000001e7: 	leaq	(,%rbp,4), %rdx
    000001ef: 	leal	0x1(%rax), %ebp
    000001f2: 	movss	%xmm0, 0x8(%rdi,%rdx,4)
    000001f8: 	cmpl	%ecx, %ebp
    000001fa: 	jge	.Ltmp1535 # Offset: 506
    000001fc: 	movss	0x4(%r9,%rdx), %xmm0
    00000203: 	addl	$0x2, %eax
    00000206: 	movss	%xmm0, 0x18(%rdi,%rdx,4)
    0000020c: 	cmpl	%eax, %ecx
    0000020e: 	jle	.Ltmp1535 # Offset: 526
    00000210: 	movss	0x8(%r9,%rdx), %xmm0
    00000217: 	movss	%xmm0, 0x28(%rdi,%rdx,4)
.Ltmp1535:
    0000021d: 	shlq	$0x4, %r8
    00000221: 	leaq	0xc(%rdi), %rax
    00000225: 	addq	%rdi, %r8
    00000228: 	cmpq	%r8, %rsi
    0000022b: 	setae	%dl
    0000022e: 	addq	%rsi, %r11
    00000231: 	cmpq	%r11, %rax
    00000234: 	setae	%r8b
    00000238: 	orb	%dl, %r8b
    0000023b: 	movq	%rsi, %rdx
    0000023e: 	je	.Ltmp1536 # Offset: 574
    00000244: 	testb	%r12b, %r12b
    00000247: 	je	.Ltmp1536 # Offset: 583
    0000024d: 	movl	%ecx, %r8d
    00000250: 	shrl	$0x2, %r8d
    00000254: 	subl	$0x1, %r8d
    00000258: 	shlq	$0x4, %r8
    0000025c: 	leaq	0x10(%rsi,%r8), %r8
    00000261: 	nopl	(%rax) # Size: 7
.Ltmp1537:
    00000268: 	movups	(%rdx), %xmm0
    0000026b: 	addq	$0x10, %rdx
    0000026f: 	addq	$0x40, %rax
    00000273: 	movaps	%xmm0, %xmm1
    00000276: 	movss	%xmm0, -0x40(%rax)
    0000027b: 	shufps	$0x55, %xmm0, %xmm1
    0000027f: 	movss	%xmm1, -0x30(%rax)
    00000284: 	movaps	%xmm0, %xmm1
    00000287: 	unpckhps	%xmm0, %xmm1
    0000028a: 	shufps	$0xff, %xmm0, %xmm0
    0000028e: 	movss	%xmm0, -0x10(%rax)
    00000293: 	movss	%xmm1, -0x20(%rax)
    00000298: 	cmpq	%rdx, %r8
    0000029b: 	jne	.Ltmp1537 # Offset: 667
    0000029d: 	movl	%ecx, %eax
    0000029f: 	andl	$-0x4, %eax
    000002a2: 	testb	$0x3, %cl
    000002a5: 	je	.Ltmp1538 # Offset: 677
    000002a7: 	movl	%eax, %r8d
    000002aa: 	movss	(%rsi,%r8,4), %xmm0
    000002b0: 	leaq	(,%r8,4), %rdx
    000002b8: 	leal	0x1(%rax), %r8d
    000002bc: 	movss	%xmm0, 0xc(%rdi,%rdx,4)
    000002c2: 	cmpl	%r8d, %ecx
    000002c5: 	jle	.Ltmp1538 # Offset: 709
    000002c7: 	movss	0x4(%rsi,%rdx), %xmm0
    000002cd: 	addl	$0x2, %eax
    000002d0: 	movss	%xmm0, 0x1c(%rdi,%rdx,4)
    000002d6: 	cmpl	%eax, %ecx
    000002d8: 	jle	.Ltmp1538 # Offset: 728
    000002da: 	movss	0x8(%rsi,%rdx), %xmm0
    000002e0: 	movss	%xmm0, 0x2c(%rdi,%rdx,4)
.Ltmp1538:
    000002e6: 	addq	-0x18(%rsp), %rdi
    000002eb: 	addq	%rbx, %r10
    000002ee: 	addq	%rbx, %r9
    000002f1: 	addq	%rbx, %rsi
    000002f4: 	subl	$0x100, %r13d
    000002fb: 	cmpl	-0x10(%rsp), %r14d
    00000300: 	jl	.Ltmp1539 # Offset: 768
.Ltmp1527:
    00000306: 	popq	%rbx
    00000307: 	popq	%rbp
    00000308: 	popq	%r12
    0000030a: 	popq	%r13
    0000030c: 	popq	%r14
    0000030e: 	popq	%r15
    00000310: 	retq # Offset: 784
    00000311: 	nopl	(%rax) # Size: 7
.Ltmp1528:
    00000318: 	movl	%r13d, %ecx
    0000031b: 	testl	%r13d, %r13d
    0000031e: 	jle	.Ltmp1540 # Offset: 798
    00000324: 	leal	(,%r13,4), %eax
    0000032c: 	movslq	%r13d, %rbx
    0000032f: 	cltq
    00000331: 	shlq	$0x2, %rbx
    00000335: 	shlq	$0x2, %rax
    00000339: 	movq	%rax, -0x18(%rsp)
    0000033e: 	jmp	.Ltmp1541 # Offset: 830
    00000343: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1536:
    00000348: 	movl	-0xc(%rsp), %ecx
    0000034c: 	leaq	0x4(%rsi,%rcx,4), %rcx
    00000351: 	nopl	(%rax) # Size: 7
.Ltmp1542:
    00000358: 	movss	(%rdx), %xmm0
    0000035c: 	addq	$0x4, %rdx
    00000360: 	addq	$0x10, %rax
    00000364: 	movss	%xmm0, -0x10(%rax)
    00000369: 	cmpq	%rdx, %rcx
    0000036c: 	jne	.Ltmp1542 # Offset: 876
    0000036e: 	jmp	.Ltmp1538 # Offset: 878
    00000373: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1533:
    00000378: 	movl	-0xc(%rsp), %ebp
    0000037c: 	leaq	0x4(%r9,%rbp,4), %rbp
    00000381: 	nopl	(%rax) # Size: 7
.Ltmp1543:
    00000388: 	movss	(%rdx), %xmm0
    0000038c: 	addq	$0x4, %rdx
    00000390: 	addq	$0x10, %rax
    00000394: 	movss	%xmm0, -0x10(%rax)
    00000399: 	cmpq	%rbp, %rdx
    0000039c: 	jne	.Ltmp1543 # Offset: 924
    0000039e: 	jmp	.Ltmp1535 # Offset: 926
    000003a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1530:
    000003a8: 	movl	-0xc(%rsp), %r15d
    000003ad: 	leaq	0x4(%r10,%r15,4), %r15
    000003b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1544:
    000003b8: 	movss	(%rdx), %xmm0
    000003bc: 	addq	$0x4, %rdx
    000003c0: 	addq	$0x10, %rax
    000003c4: 	movss	%xmm0, -0x10(%rax)
    000003c9: 	cmpq	%r15, %rdx
    000003cc: 	jne	.Ltmp1544 # Offset: 972
    000003ce: 	jmp	.Ltmp1532 # Offset: 974
    000003d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1540:
    000003d8: 	leal	(,%r13,4), %ebx
    000003e0: 	movslq	%ebx, %rbx
    000003e3: 	leaq	(,%rbx,4), %rax
    000003eb: 	movq	%rax, -0x18(%rsp)
    000003f0: 	jmp	.Ltmp1538 # Offset: 1008
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version6IfEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave4to4_version1IfEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 164
  State       : disassembled
  Address     : 0x1f3e0
  Size        : 0x239
  MaxSize     : 0x240
  Offset      : 0x1f3e0
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version1IfEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0163:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp1545 # Offset: 7
    0000000d: 	movslq	%r9d, %rax
    00000010: 	pushq	%r12
    00000012: 	leaq	(,%rax,4), %r11
    0000001a: 	shlq	$0x4, %rax
    0000001e: 	pushq	%rbp
    0000001f: 	leaq	(%rsi,%r11), %r10
    00000023: 	addq	%rdi, %rax
    00000026: 	pushq	%rbx
    00000027: 	cmpq	%r10, %rdi
    0000002a: 	setae	%r10b
    0000002e: 	cmpq	%rax, %rsi
    00000031: 	setae	%bl
    00000034: 	orl	%ebx, %r10d
    00000037: 	leaq	(%rdx,%r11), %rbx
    0000003b: 	cmpq	%rbx, %rdi
    0000003e: 	setae	%bl
    00000041: 	cmpq	%rax, %rdx
    00000044: 	setae	%bpl
    00000048: 	orl	%ebp, %ebx
    0000004a: 	andl	%ebx, %r10d
    0000004d: 	leal	-0x1(%r9), %ebx
    00000051: 	cmpl	$0x2, %ebx
    00000054: 	seta	%bl
    00000057: 	andl	%ebx, %r10d
    0000005a: 	leaq	(%rcx,%r11), %rbx
    0000005e: 	cmpq	%rbx, %rdi
    00000061: 	setae	%bl
    00000064: 	cmpq	%rax, %rcx
    00000067: 	setae	%bpl
    0000006b: 	orl	%ebp, %ebx
    0000006d: 	testb	%bl, %r10b
    00000070: 	je	.Ltmp1546 # Offset: 112
    00000076: 	leaq	(%r8,%r11), %r10
    0000007a: 	cmpq	%r10, %rdi
    0000007d: 	setae	%r10b
    00000081: 	cmpq	%rax, %r8
    00000084: 	setae	%al
    00000087: 	orb	%al, %r10b
    0000008a: 	je	.Ltmp1546 # Offset: 138
    00000090: 	movl	%r9d, %r10d
    00000093: 	xorl	%eax, %eax
    00000095: 	shrl	$0x2, %r10d
    00000099: 	shlq	$0x4, %r10
    0000009d: 	nopl	(%rax) # Size: 3
.Ltmp1547:
    000000a0: 	movups	(%rsi,%rax), %xmm0
    000000a4: 	movups	(%rdx,%rax), %xmm1
    000000a8: 	movups	(%rcx,%rax), %xmm5
    000000ac: 	movups	(%r8,%rax), %xmm7
    000000b1: 	movaps	%xmm0, %xmm2
    000000b4: 	movaps	%xmm1, %xmm3
    000000b7: 	unpcklps	%xmm5, %xmm2
    000000ba: 	unpcklps	%xmm7, %xmm3
    000000bd: 	unpckhps	%xmm5, %xmm0
    000000c0: 	movaps	%xmm2, %xmm4
    000000c3: 	unpckhps	%xmm3, %xmm2
    000000c6: 	unpckhps	%xmm7, %xmm1
    000000c9: 	movups	%xmm2, 0x10(%rdi,%rax,4)
    000000ce: 	movaps	%xmm0, %xmm2
    000000d1: 	unpcklps	%xmm3, %xmm4
    000000d4: 	unpckhps	%xmm1, %xmm0
    000000d7: 	unpcklps	%xmm1, %xmm2
    000000da: 	movups	%xmm4, (%rdi,%rax,4)
    000000de: 	movups	%xmm2, 0x20(%rdi,%rax,4)
    000000e3: 	movups	%xmm0, 0x30(%rdi,%rax,4)
    000000e8: 	addq	$0x10, %rax
    000000ec: 	cmpq	%rax, %r10
    000000ef: 	jne	.Ltmp1547 # Offset: 239
    000000f1: 	movl	%r9d, %r11d
    000000f4: 	andl	$-0x4, %r11d
    000000f8: 	testb	$0x3, %r9b
    000000fc: 	je	.Ltmp1548 # Offset: 252
    00000102: 	movl	%r11d, %r10d
    00000105: 	movss	(%rsi,%r10,4), %xmm0
    0000010b: 	movq	%r10, %rbx
    0000010e: 	leaq	(,%r10,4), %rax
    00000116: 	shlq	$0x4, %rbx
    0000011a: 	leaq	0x1(%rax), %r12
    0000011e: 	movss	%xmm0, (%rdi,%rbx)
    00000123: 	movss	(%rdx,%r10,4), %xmm0
    00000129: 	leaq	(,%r12,4), %rbp
    00000131: 	movss	%xmm0, (%rdi,%r12,4)
    00000137: 	movss	(%rcx,%r10,4), %xmm0
    0000013d: 	movss	%xmm0, 0x4(%rdi,%rbp)
    00000143: 	movss	(%r8,%r10,4), %xmm0
    00000149: 	leal	0x1(%r11), %r10d
    0000014d: 	movss	%xmm0, 0x8(%rdi,%rbp)
    00000153: 	cmpl	%r10d, %r9d
    00000156: 	jle	.Ltmp1548 # Offset: 342
    0000015c: 	movss	0x4(%rsi,%rax), %xmm0
    00000162: 	leaq	0x5(%rax), %rbp
    00000166: 	addl	$0x2, %r11d
    0000016a: 	leaq	(,%rbp,4), %r10
    00000172: 	movss	%xmm0, 0x10(%rdi,%rbx)
    00000178: 	movss	0x4(%rdx,%rax), %xmm0
    0000017e: 	movss	%xmm0, (%rdi,%rbp,4)
    00000183: 	movss	0x4(%rcx,%rax), %xmm0
    00000189: 	movss	%xmm0, 0x4(%rdi,%r10)
    00000190: 	movss	0x4(%r8,%rax), %xmm0
    00000197: 	movss	%xmm0, 0x8(%rdi,%r10)
    0000019e: 	cmpl	%r11d, %r9d
    000001a1: 	jle	.Ltmp1548 # Offset: 417
    000001a3: 	movss	0x8(%rsi,%rax), %xmm0
    000001a9: 	leaq	0x9(%rax), %r9
    000001ad: 	leaq	(,%r9,4), %rsi
    000001b5: 	movss	%xmm0, 0x20(%rdi,%rbx)
    000001bb: 	movss	0x8(%rdx,%rax), %xmm0
    000001c1: 	movss	%xmm0, (%rdi,%r9,4)
    000001c7: 	movss	0x8(%rcx,%rax), %xmm0
    000001cd: 	movss	%xmm0, 0x4(%rdi,%rsi)
    000001d3: 	movss	0x8(%r8,%rax), %xmm0
    000001da: 	movss	%xmm0, 0x8(%rdi,%rsi)
.Ltmp1548:
    000001e0: 	popq	%rbx
    000001e1: 	popq	%rbp
    000001e2: 	popq	%r12
    000001e4: 	retq # Offset: 484
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp1546:
    000001e8: 	movl	%r9d, %r9d
    000001eb: 	xorl	%eax, %eax
    000001ed: 	shlq	$0x2, %r9
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp1549:
    000001f8: 	movss	(%rsi,%rax), %xmm0
    000001fd: 	movss	%xmm0, (%rdi,%rax,4)
    00000202: 	movss	(%rdx,%rax), %xmm0
    00000207: 	movss	%xmm0, 0x4(%rdi,%rax,4)
    0000020d: 	movss	(%rcx,%rax), %xmm0
    00000212: 	movss	%xmm0, 0x8(%rdi,%rax,4)
    00000218: 	movss	(%r8,%rax), %xmm0
    0000021e: 	movss	%xmm0, 0xc(%rdi,%rax,4)
    00000224: 	addq	$0x4, %rax
    00000228: 	cmpq	%rax, %r9
    0000022b: 	jne	.Ltmp1549 # Offset: 555
    0000022d: 	popq	%rbx
    0000022e: 	popq	%rbp
    0000022f: 	popq	%r12
    00000231: 	retq # Offset: 561
    00000232: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1545:
    00000238: 	retq # Offset: 568
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version1IfEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version2IfEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 165
  State       : disassembled
  Address     : 0x1f620
  Size        : 0x3e1
  MaxSize     : 0x3f0
  Offset      : 0x1f620
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version2IfEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0164:
    00000000: 	endbr64
    00000004: 	movslq	%r9d, %r9
    00000007: 	testq	%r9, %r9
    0000000a: 	je	.Ltmp1550 # Offset: 10
    00000010: 	pushq	%r13
    00000012: 	movq	%rsi, %r10
    00000015: 	movq	%rdx, %rsi
    00000018: 	pushq	%r12
    0000001a: 	leaq	-0x1(%r9), %r12
    0000001e: 	cmpq	$0x6, %r12
    00000022: 	pushq	%rbp
    00000023: 	seta	%r11b
    00000027: 	shlq	$0x4, %r12
    0000002b: 	pushq	%rbx
    0000002c: 	leaq	(,%r9,4), %rbx
    00000034: 	leaq	0x4(%rdi,%r12), %rax
    00000039: 	leaq	(%r10,%rbx), %rdx
    0000003d: 	cmpq	%rax, %r10
    00000040: 	setae	%al
    00000043: 	cmpq	%rdx, %rdi
    00000046: 	setae	%dl
    00000049: 	orb	%dl, %al
    0000004b: 	je	.Ltmp1551 # Offset: 75
    00000051: 	testb	%r11b, %r11b
    00000054: 	je	.Ltmp1551 # Offset: 84
    0000005a: 	movq	%r9, %r13
    0000005d: 	movq	%rdi, %rax
    00000060: 	xorl	%edx, %edx
    00000062: 	shrq	$0x2, %r13
    00000066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1552:
    00000070: 	movq	%rdx, %rbp
    00000073: 	addq	$0x1, %rdx
    00000077: 	addq	$0x40, %rax
    0000007b: 	shlq	$0x4, %rbp
    0000007f: 	movups	(%r10,%rbp), %xmm0
    00000084: 	movaps	%xmm0, %xmm1
    00000087: 	movss	%xmm0, -0x40(%rax)
    0000008c: 	shufps	$0x55, %xmm0, %xmm1
    00000090: 	movss	%xmm1, -0x30(%rax)
    00000095: 	movaps	%xmm0, %xmm1
    00000098: 	unpckhps	%xmm0, %xmm1
    0000009b: 	shufps	$0xff, %xmm0, %xmm0
    0000009f: 	movss	%xmm0, -0x10(%rax)
    000000a4: 	movss	%xmm1, -0x20(%rax)
    000000a9: 	cmpq	%r13, %rdx
    000000ac: 	jne	.Ltmp1552 # Offset: 172
    000000ae: 	movq	%r9, %rax
    000000b1: 	andq	$-0x4, %rax
    000000b5: 	movq	%rax, %rdx
    000000b8: 	leaq	(%r10,%rax,4), %r10
    000000bc: 	shlq	$0x4, %rdx
    000000c0: 	addq	%rdi, %rdx
    000000c3: 	cmpq	%rax, %r9
    000000c6: 	je	.Ltmp1553 # Offset: 198
    000000c8: 	movss	(%r10), %xmm0
    000000cd: 	leaq	0x1(%rax), %rbp
    000000d1: 	movss	%xmm0, (%rdx)
    000000d5: 	cmpq	%rbp, %r9
    000000d8: 	jbe	.Ltmp1553 # Offset: 216
    000000da: 	movss	0x4(%r10), %xmm0
    000000e0: 	addq	$0x2, %rax
    000000e4: 	movss	%xmm0, 0x10(%rdx)
    000000e9: 	cmpq	%rax, %r9
    000000ec: 	jbe	.Ltmp1553 # Offset: 236
    000000ee: 	movss	0x8(%r10), %xmm0
    000000f4: 	movss	%xmm0, 0x20(%rdx)
.Ltmp1553:
    000000f9: 	leaq	0x8(%rdi,%r12), %rax
    000000fe: 	leaq	(%rsi,%rbx), %rdx
    00000102: 	cmpq	%rax, %rsi
    00000105: 	leaq	0x4(%rdi), %rbp
    00000109: 	setae	%al
    0000010c: 	cmpq	%rdx, %rbp
    0000010f: 	setae	%dl
    00000112: 	orb	%dl, %al
    00000114: 	je	.Ltmp1554 # Offset: 276
    0000011a: 	movq	%r9, %r13
    0000011d: 	movq	%rbp, %rax
    00000120: 	xorl	%edx, %edx
    00000122: 	shrq	$0x2, %r13
    00000126: 	testb	%r11b, %r11b
    00000129: 	je	.Ltmp1554 # Offset: 297
    0000012f: 	nop # Size: 1
.Ltmp1555:
    00000130: 	movq	%rdx, %r10
    00000133: 	addq	$0x1, %rdx
    00000137: 	addq	$0x40, %rax
    0000013b: 	shlq	$0x4, %r10
    0000013f: 	movups	(%rsi,%r10), %xmm0
    00000144: 	movaps	%xmm0, %xmm1
    00000147: 	movss	%xmm0, -0x40(%rax)
    0000014c: 	shufps	$0x55, %xmm0, %xmm1
    00000150: 	movss	%xmm1, -0x30(%rax)
    00000155: 	movaps	%xmm0, %xmm1
    00000158: 	unpckhps	%xmm0, %xmm1
    0000015b: 	shufps	$0xff, %xmm0, %xmm0
    0000015f: 	movss	%xmm0, -0x10(%rax)
    00000164: 	movss	%xmm1, -0x20(%rax)
    00000169: 	cmpq	%rdx, %r13
    0000016c: 	jne	.Ltmp1555 # Offset: 364
    0000016e: 	movq	%r9, %rax
    00000171: 	andq	$-0x4, %rax
    00000175: 	movq	%rax, %rdx
    00000178: 	leaq	(%rsi,%rax,4), %rsi
    0000017c: 	shlq	$0x4, %rdx
    00000180: 	addq	%rbp, %rdx
    00000183: 	cmpq	%rax, %r9
    00000186: 	je	.Ltmp1556 # Offset: 390
    00000188: 	movss	(%rsi), %xmm0
    0000018c: 	leaq	0x1(%rax), %r10
    00000190: 	movss	%xmm0, (%rdx)
    00000194: 	cmpq	%r10, %r9
    00000197: 	jbe	.Ltmp1556 # Offset: 407
    00000199: 	movss	0x4(%rsi), %xmm0
    0000019e: 	addq	$0x2, %rax
    000001a2: 	movss	%xmm0, 0x10(%rdx)
    000001a7: 	cmpq	%rax, %r9
    000001aa: 	jbe	.Ltmp1556 # Offset: 426
    000001ac: 	movss	0x8(%rsi), %xmm0
    000001b1: 	movss	%xmm0, 0x20(%rdx)
.Ltmp1556:
    000001b6: 	leaq	0xc(%rdi,%r12), %rax
    000001bb: 	leaq	(%rcx,%rbx), %rdx
    000001bf: 	cmpq	%rax, %rcx
    000001c2: 	leaq	0x8(%rdi), %r10
    000001c6: 	setae	%al
    000001c9: 	cmpq	%rdx, %r10
    000001cc: 	setae	%dl
    000001cf: 	orb	%dl, %al
    000001d1: 	je	.Ltmp1557 # Offset: 465
    000001d7: 	movq	%r9, %rbp
    000001da: 	movq	%r10, %rax
    000001dd: 	xorl	%edx, %edx
    000001df: 	shrq	$0x2, %rbp
    000001e3: 	testb	%r11b, %r11b
    000001e6: 	je	.Ltmp1557 # Offset: 486
    000001ec: 	nopl	(%rax) # Size: 4
.Ltmp1558:
    000001f0: 	movq	%rdx, %rsi
    000001f3: 	addq	$0x1, %rdx
    000001f7: 	addq	$0x40, %rax
    000001fb: 	shlq	$0x4, %rsi
    000001ff: 	movups	(%rcx,%rsi), %xmm0
    00000203: 	movaps	%xmm0, %xmm1
    00000206: 	movss	%xmm0, -0x40(%rax)
    0000020b: 	shufps	$0x55, %xmm0, %xmm1
    0000020f: 	movss	%xmm1, -0x30(%rax)
    00000214: 	movaps	%xmm0, %xmm1
    00000217: 	unpckhps	%xmm0, %xmm1
    0000021a: 	shufps	$0xff, %xmm0, %xmm0
    0000021e: 	movss	%xmm0, -0x10(%rax)
    00000223: 	movss	%xmm1, -0x20(%rax)
    00000228: 	cmpq	%rdx, %rbp
    0000022b: 	jne	.Ltmp1558 # Offset: 555
    0000022d: 	movq	%r9, %rax
    00000230: 	andq	$-0x4, %rax
    00000234: 	movq	%rax, %rdx
    00000237: 	leaq	(%rcx,%rax,4), %rcx
    0000023b: 	shlq	$0x4, %rdx
    0000023f: 	addq	%r10, %rdx
    00000242: 	cmpq	%rax, %r9
    00000245: 	je	.Ltmp1559 # Offset: 581
    00000247: 	movss	(%rcx), %xmm0
    0000024b: 	leaq	0x1(%rax), %rsi
    0000024f: 	movss	%xmm0, (%rdx)
    00000253: 	cmpq	%rsi, %r9
    00000256: 	jbe	.Ltmp1559 # Offset: 598
    00000258: 	movss	0x4(%rcx), %xmm0
    0000025d: 	addq	$0x2, %rax
    00000261: 	movss	%xmm0, 0x10(%rdx)
    00000266: 	cmpq	%rax, %r9
    00000269: 	jbe	.Ltmp1559 # Offset: 617
    0000026b: 	movss	0x8(%rcx), %xmm0
    00000270: 	movss	%xmm0, 0x20(%rdx)
.Ltmp1559:
    00000275: 	movq	%r9, %rax
    00000278: 	leaq	0xc(%rdi), %rsi
    0000027c: 	shlq	$0x4, %rax
    00000280: 	addq	%rdi, %rax
    00000283: 	cmpq	%rax, %r8
    00000286: 	setae	%al
    00000289: 	addq	%r8, %rbx
    0000028c: 	cmpq	%rbx, %rsi
    0000028f: 	setae	%dl
    00000292: 	orb	%dl, %al
    00000294: 	je	.Ltmp1560 # Offset: 660
    0000029a: 	movq	%r9, %rdi
    0000029d: 	movq	%rsi, %rax
    000002a0: 	xorl	%edx, %edx
    000002a2: 	shrq	$0x2, %rdi
    000002a6: 	testb	%r11b, %r11b
    000002a9: 	je	.Ltmp1560 # Offset: 681
    000002af: 	nop # Size: 1
.Ltmp1561:
    000002b0: 	movq	%rdx, %rcx
    000002b3: 	addq	$0x1, %rdx
    000002b7: 	addq	$0x40, %rax
    000002bb: 	shlq	$0x4, %rcx
    000002bf: 	movups	(%r8,%rcx), %xmm0
    000002c4: 	movaps	%xmm0, %xmm1
    000002c7: 	movss	%xmm0, -0x40(%rax)
    000002cc: 	shufps	$0x55, %xmm0, %xmm1
    000002d0: 	movss	%xmm1, -0x30(%rax)
    000002d5: 	movaps	%xmm0, %xmm1
    000002d8: 	unpckhps	%xmm0, %xmm1
    000002db: 	shufps	$0xff, %xmm0, %xmm0
    000002df: 	movss	%xmm0, -0x10(%rax)
    000002e4: 	movss	%xmm1, -0x20(%rax)
    000002e9: 	cmpq	%rdx, %rdi
    000002ec: 	jne	.Ltmp1561 # Offset: 748
    000002ee: 	movq	%r9, %rax
    000002f1: 	andq	$-0x4, %rax
    000002f5: 	movq	%rax, %rdx
    000002f8: 	leaq	(%r8,%rax,4), %rcx
    000002fc: 	shlq	$0x4, %rdx
    00000300: 	addq	%rsi, %rdx
    00000303: 	cmpq	%rax, %r9
    00000306: 	je	.Ltmp1562 # Offset: 774
    00000308: 	movss	(%rcx), %xmm0
    0000030c: 	leaq	0x1(%rax), %rsi
    00000310: 	movss	%xmm0, (%rdx)
    00000314: 	cmpq	%rsi, %r9
    00000317: 	jbe	.Ltmp1562 # Offset: 791
    00000319: 	movss	0x4(%rcx), %xmm0
    0000031e: 	addq	$0x2, %rax
    00000322: 	movss	%xmm0, 0x10(%rdx)
    00000327: 	cmpq	%rax, %r9
    0000032a: 	jbe	.Ltmp1562 # Offset: 810
    0000032c: 	movss	0x8(%rcx), %xmm0
    00000331: 	movss	%xmm0, 0x20(%rdx)
.Ltmp1562:
    00000336: 	popq	%rbx
    00000337: 	popq	%rbp
    00000338: 	popq	%r12
    0000033a: 	popq	%r13
    0000033c: 	retq # Offset: 828
    0000033d: 	nopl	(%rax) # Size: 3
.Ltmp1554:
    00000340: 	xorl	%eax, %eax
    00000342: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1563:
    00000348: 	movss	(%rsi,%rax,4), %xmm0
    0000034d: 	addq	$0x1, %rax
    00000351: 	addq	$0x10, %rbp
    00000355: 	movss	%xmm0, -0x10(%rbp)
    0000035a: 	cmpq	%rax, %r9
    0000035d: 	jne	.Ltmp1563 # Offset: 861
    0000035f: 	jmp	.Ltmp1556 # Offset: 863
    00000364: 	nopl	(%rax) # Size: 4
.Ltmp1551:
    00000368: 	movq	%rdi, %rdx
    0000036b: 	xorl	%eax, %eax
    0000036d: 	nopl	(%rax) # Size: 3
.Ltmp1564:
    00000370: 	movss	(%r10,%rax,4), %xmm0
    00000376: 	addq	$0x1, %rax
    0000037a: 	addq	$0x10, %rdx
    0000037e: 	movss	%xmm0, -0x10(%rdx)
    00000383: 	cmpq	%rax, %r9
    00000386: 	jne	.Ltmp1564 # Offset: 902
    00000388: 	jmp	.Ltmp1553 # Offset: 904
    0000038d: 	nopl	(%rax) # Size: 3
.Ltmp1557:
    00000390: 	xorl	%eax, %eax
    00000392: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1565:
    00000398: 	movss	(%rcx,%rax,4), %xmm0
    0000039d: 	addq	$0x1, %rax
    000003a1: 	addq	$0x10, %r10
    000003a5: 	movss	%xmm0, -0x10(%r10)
    000003ab: 	cmpq	%rax, %r9
    000003ae: 	jne	.Ltmp1565 # Offset: 942
    000003b0: 	jmp	.Ltmp1559 # Offset: 944
    000003b5: 	nopl	(%rax) # Size: 3
.Ltmp1560:
    000003b8: 	xorl	%eax, %eax
    000003ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1566:
    000003c0: 	movss	(%r8,%rax,4), %xmm0
    000003c6: 	addq	$0x1, %rax
    000003ca: 	addq	$0x10, %rsi
    000003ce: 	movss	%xmm0, -0x10(%rsi)
    000003d3: 	cmpq	%rax, %r9
    000003d6: 	jne	.Ltmp1566 # Offset: 982
    000003d8: 	popq	%rbx
    000003d9: 	popq	%rbp
    000003da: 	popq	%r12
    000003dc: 	popq	%r13
    000003de: 	retq # Offset: 990
    000003df: 	nop # Size: 1
.Ltmp1550:
    000003e0: 	retq # Offset: 992
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version2IfEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version3IfEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 166
  State       : disassembled
  Address     : 0x1fa10
  Size        : 0x309
  MaxSize     : 0x310
  Offset      : 0x1fa10
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version3IfEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0165:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp1567 # Offset: 7
    0000000d: 	leal	-0x1(%r9), %eax
    00000011: 	movslq	%r9d, %r11
    00000014: 	pushq	%r13
    00000016: 	movq	%rdx, %r10
    00000019: 	cmpl	$0x4, %eax
    0000001c: 	movq	%r11, %rax
    0000001f: 	pushq	%r12
    00000021: 	pushq	%rbp
    00000022: 	seta	%bpl
    00000026: 	shlq	$0x4, %rax
    0000002a: 	pushq	%rbx
    0000002b: 	leaq	(,%r11,4), %rbx
    00000033: 	leaq	-0x8(%rdi,%rax), %r12
    00000038: 	leaq	(%rsi,%rbx), %rax
    0000003c: 	cmpq	%rax, %rdi
    0000003f: 	setae	%dl
    00000042: 	cmpq	%r12, %rsi
    00000045: 	setae	%al
    00000048: 	orl	%eax, %edx
    0000004a: 	leaq	(%r10,%rbx), %rax
    0000004e: 	cmpq	%rax, %rdi
    00000051: 	setae	%al
    00000054: 	cmpq	%r12, %r10
    00000057: 	setae	%r12b
    0000005b: 	orl	%r12d, %eax
    0000005e: 	testb	%al, %dl
    00000060: 	je	.Ltmp1568 # Offset: 96
    00000066: 	testb	%bpl, %bpl
    00000069: 	je	.Ltmp1568 # Offset: 105
    0000006f: 	movl	%r9d, %r12d
    00000072: 	movq	%rdi, %rax
    00000075: 	xorl	%edx, %edx
    00000077: 	shrl	$0x2, %r12d
    0000007b: 	shlq	$0x4, %r12
    0000007f: 	nop # Size: 1
.Ltmp1569:
    00000080: 	movups	(%rsi,%rdx), %xmm1
    00000084: 	movups	(%r10,%rdx), %xmm0
    00000089: 	addq	$0x10, %rdx
    0000008d: 	addq	$0x40, %rax
    00000091: 	movaps	%xmm1, %xmm2
    00000094: 	movss	%xmm1, -0x40(%rax)
    00000099: 	shufps	$0x55, %xmm1, %xmm2
    0000009d: 	movss	%xmm2, -0x30(%rax)
    000000a2: 	movaps	%xmm1, %xmm2
    000000a5: 	unpckhps	%xmm1, %xmm2
    000000a8: 	shufps	$0xff, %xmm1, %xmm1
    000000ac: 	movss	%xmm1, -0x10(%rax)
    000000b1: 	movaps	%xmm0, %xmm1
    000000b4: 	shufps	$0x55, %xmm0, %xmm1
    000000b8: 	movss	%xmm1, -0x2c(%rax)
    000000bd: 	movaps	%xmm0, %xmm1
    000000c0: 	unpckhps	%xmm0, %xmm1
    000000c3: 	movss	%xmm0, -0x3c(%rax)
    000000c8: 	shufps	$0xff, %xmm0, %xmm0
    000000cc: 	movss	%xmm2, -0x20(%rax)
    000000d1: 	movss	%xmm1, -0x1c(%rax)
    000000d6: 	movss	%xmm0, -0xc(%rax)
    000000db: 	cmpq	%r12, %rdx
    000000de: 	jne	.Ltmp1569 # Offset: 222
    000000e0: 	movl	%r9d, %edx
    000000e3: 	andl	$-0x4, %edx
    000000e6: 	testb	$0x3, %r9b
    000000ea: 	je	.Ltmp1570 # Offset: 234
    000000ec: 	movl	%edx, %r12d
    000000ef: 	movss	(%rsi,%r12,4), %xmm0
    000000f5: 	movq	%r12, %r13
    000000f8: 	leaq	(,%r12,4), %rax
    00000100: 	shlq	$0x4, %r13
    00000104: 	movss	%xmm0, (%rdi,%r13)
    0000010a: 	movss	(%r10,%r12,4), %xmm0
    00000110: 	leal	0x1(%rdx), %r12d
    00000114: 	movss	%xmm0, 0x4(%rdi,%rax,4)
    0000011a: 	cmpl	%r12d, %r9d
    0000011d: 	jle	.Ltmp1570 # Offset: 285
    0000011f: 	movss	0x4(%rsi,%rax), %xmm0
    00000125: 	addl	$0x2, %edx
    00000128: 	movss	%xmm0, 0x10(%rdi,%r13)
    0000012f: 	movss	0x4(%r10,%rax), %xmm0
    00000136: 	movss	%xmm0, 0x14(%rdi,%rax,4)
    0000013c: 	cmpl	%edx, %r9d
    0000013f: 	jle	.Ltmp1570 # Offset: 319
    00000141: 	movss	0x8(%rsi,%rax), %xmm0
    00000147: 	movss	%xmm0, 0x20(%rdi,%r13)
    0000014e: 	movss	0x8(%r10,%rax), %xmm0
    00000155: 	movss	%xmm0, 0x24(%rdi,%rax,4)
.Ltmp1570:
    0000015b: 	leaq	(%rcx,%rbx), %rdx
    0000015f: 	leaq	0x8(%rdi), %rax
    00000163: 	shlq	$0x4, %r11
    00000167: 	addq	%rdi, %r11
    0000016a: 	cmpq	%rdx, %rax
    0000016d: 	setae	%sil
    00000171: 	cmpq	%r11, %rcx
    00000174: 	setae	%dl
    00000177: 	addq	%r8, %rbx
    0000017a: 	orl	%edx, %esi
    0000017c: 	cmpq	%rbx, %rax
    0000017f: 	setae	%dl
    00000182: 	cmpq	%r11, %r8
    00000185: 	setae	%r10b
    00000189: 	orl	%r10d, %edx
    0000018c: 	testb	%dl, %sil
    0000018f: 	je	.Ltmp1571 # Offset: 399
    00000195: 	testb	%bpl, %bpl
    00000198: 	je	.Ltmp1571 # Offset: 408
    0000019e: 	movl	%r9d, %esi
    000001a1: 	xorl	%edx, %edx
    000001a3: 	shrl	$0x2, %esi
    000001a6: 	shlq	$0x4, %rsi
    000001aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1572:
    000001b0: 	movups	(%rcx,%rdx), %xmm1
    000001b4: 	movups	(%r8,%rdx), %xmm0
    000001b9: 	addq	$0x10, %rdx
    000001bd: 	addq	$0x40, %rax
    000001c1: 	movaps	%xmm1, %xmm2
    000001c4: 	movss	%xmm1, -0x40(%rax)
    000001c9: 	shufps	$0x55, %xmm1, %xmm2
    000001cd: 	movss	%xmm2, -0x30(%rax)
    000001d2: 	movaps	%xmm1, %xmm2
    000001d5: 	unpckhps	%xmm1, %xmm2
    000001d8: 	shufps	$0xff, %xmm1, %xmm1
    000001dc: 	movss	%xmm1, -0x10(%rax)
    000001e1: 	movaps	%xmm0, %xmm1
    000001e4: 	shufps	$0x55, %xmm0, %xmm1
    000001e8: 	movss	%xmm1, -0x2c(%rax)
    000001ed: 	movaps	%xmm0, %xmm1
    000001f0: 	unpckhps	%xmm0, %xmm1
    000001f3: 	movss	%xmm0, -0x3c(%rax)
    000001f8: 	shufps	$0xff, %xmm0, %xmm0
    000001fc: 	movss	%xmm2, -0x20(%rax)
    00000201: 	movss	%xmm1, -0x1c(%rax)
    00000206: 	movss	%xmm0, -0xc(%rax)
    0000020b: 	cmpq	%rdx, %rsi
    0000020e: 	jne	.Ltmp1572 # Offset: 526
    00000210: 	movl	%r9d, %edx
    00000213: 	andl	$-0x4, %edx
    00000216: 	testb	$0x3, %r9b
    0000021a: 	je	.Ltmp1573 # Offset: 538
    0000021c: 	movl	%edx, %esi
    0000021e: 	movss	(%rcx,%rsi,4), %xmm0
    00000223: 	leaq	(,%rsi,4), %rax
    0000022b: 	leaq	0x2(%rax), %r10
    0000022f: 	movss	%xmm0, (%rdi,%r10,4)
    00000235: 	movss	(%r8,%rsi,4), %xmm0
    0000023b: 	leal	0x1(%rdx), %esi
    0000023e: 	movss	%xmm0, 0x4(%rdi,%r10,4)
    00000245: 	cmpl	%esi, %r9d
    00000248: 	jle	.Ltmp1573 # Offset: 584
    0000024a: 	movss	0x4(%rcx,%rax), %xmm0
    00000250: 	leaq	0x6(%rax), %rsi
    00000254: 	addl	$0x2, %edx
    00000257: 	movss	%xmm0, (%rdi,%rsi,4)
    0000025c: 	movss	0x4(%r8,%rax), %xmm0
    00000263: 	movss	%xmm0, 0x4(%rdi,%rsi,4)
    00000269: 	cmpl	%edx, %r9d
    0000026c: 	jle	.Ltmp1573 # Offset: 620
    0000026e: 	movss	0x8(%rcx,%rax), %xmm0
    00000274: 	leaq	0xa(%rax), %rdx
    00000278: 	movss	%xmm0, (%rdi,%rdx,4)
    0000027d: 	movss	0x8(%r8,%rax), %xmm0
    00000284: 	movss	%xmm0, 0x4(%rdi,%rdx,4)
.Ltmp1573:
    0000028a: 	popq	%rbx
    0000028b: 	popq	%rbp
    0000028c: 	popq	%r12
    0000028e: 	popq	%r13
    00000290: 	retq # Offset: 656
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp1571:
    00000298: 	movl	%r9d, %r9d
    0000029b: 	xorl	%eax, %eax
    0000029d: 	shlq	$0x2, %r9
    000002a1: 	nopl	(%rax) # Size: 7
.Ltmp1574:
    000002a8: 	movss	(%rcx,%rax), %xmm0
    000002ad: 	movss	%xmm0, 0x8(%rdi,%rax,4)
    000002b3: 	movss	(%r8,%rax), %xmm0
    000002b9: 	movss	%xmm0, 0xc(%rdi,%rax,4)
    000002bf: 	addq	$0x4, %rax
    000002c3: 	cmpq	%rax, %r9
    000002c6: 	jne	.Ltmp1574 # Offset: 710
    000002c8: 	popq	%rbx
    000002c9: 	popq	%rbp
    000002ca: 	popq	%r12
    000002cc: 	popq	%r13
    000002ce: 	retq # Offset: 718
    000002cf: 	nop # Size: 1
.Ltmp1568:
    000002d0: 	movl	%r9d, %edx
    000002d3: 	xorl	%eax, %eax
    000002d5: 	shlq	$0x2, %rdx
    000002d9: 	nopl	(%rax) # Size: 7
.Ltmp1575:
    000002e0: 	movss	(%rsi,%rax), %xmm0
    000002e5: 	movss	%xmm0, (%rdi,%rax,4)
    000002ea: 	movss	(%r10,%rax), %xmm0
    000002f0: 	movss	%xmm0, 0x4(%rdi,%rax,4)
    000002f6: 	addq	$0x4, %rax
    000002fa: 	cmpq	%rax, %rdx
    000002fd: 	jne	.Ltmp1575 # Offset: 765
    000002ff: 	jmp	.Ltmp1570 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp1567:
    00000308: 	retq # Offset: 776
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version3IfEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version4IfEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 167
  State       : disassembled
  Address     : 0x1fd20
  Size        : 0x505
  MaxSize     : 0x510
  Offset      : 0x1fd20
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version4IfEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0166:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r9d, -0x18(%rsp)
    00000013: 	movl	%r9d, -0x14(%rsp)
    00000018: 	movl	$0x0, -0x24(%rsp)
    00000020: 	testl	%r9d, %r9d
    00000023: 	jle	.Ltmp1576 # Offset: 35
    00000029: 	movq	%rdi, %r14
    0000002c: 	movq	%rsi, %r15
    0000002f: 	movq	%rcx, %rdi
    00000032: 	movq	%rdx, %rsi
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp1590:
    00000038: 	addl	$0x100, -0x24(%rsp)
    00000040: 	movl	-0x24(%rsp), %eax
    00000044: 	cmpl	-0x18(%rsp), %eax
    00000048: 	jg	.Ltmp1577 # Offset: 72
    0000004e: 	movq	$0x1000, -0x20(%rsp)
    00000057: 	movl	$0x400, %ebp
    0000005c: 	movl	$0x100, %edx
.Ltmp1591:
    00000061: 	cmpq	$0x7, %rdx
    00000065: 	movl	$0x4, %ecx
    0000006a: 	leaq	(,%rdx,4), %rbx
    00000072: 	seta	%r13b
    00000076: 	leaq	-0x1(%rdx), %r9
    0000007a: 	testq	%rdx, %rdx
    0000007d: 	cmoveq	%rcx, %rbx
    00000081: 	shlq	$0x4, %r9
    00000085: 	testq	%rdx, %rdx
    00000088: 	leaq	0x4(%r9), %rax
    0000008c: 	cmoveq	%rcx, %rax
    00000090: 	addq	%r14, %rax
    00000093: 	cmpq	%rax, %r15
    00000096: 	leaq	(%r15,%rbx), %rax
    0000009a: 	setae	%cl
    0000009d: 	cmpq	%rax, %r14
    000000a0: 	setae	%al
    000000a3: 	orb	%cl, %al
    000000a5: 	je	.Ltmp1578 # Offset: 165
    000000ab: 	testb	%r13b, %r13b
    000000ae: 	je	.Ltmp1578 # Offset: 174
    000000b4: 	testq	%rdx, %rdx
    000000b7: 	movl	$0x1, %r12d
    000000bd: 	movq	%r14, %rax
    000000c0: 	cmovneq	%rdx, %r12
    000000c4: 	xorl	%ecx, %ecx
    000000c6: 	movq	%r12, %r11
    000000c9: 	shrq	$0x2, %r11
    000000cd: 	nopl	(%rax) # Size: 3
.Ltmp1579:
    000000d0: 	movq	%rcx, %r10
    000000d3: 	addq	$0x1, %rcx
    000000d7: 	addq	$0x40, %rax
    000000db: 	shlq	$0x4, %r10
    000000df: 	movups	(%r15,%r10), %xmm0
    000000e4: 	movaps	%xmm0, %xmm1
    000000e7: 	movss	%xmm0, -0x40(%rax)
    000000ec: 	shufps	$0x55, %xmm0, %xmm1
    000000f0: 	movss	%xmm1, -0x30(%rax)
    000000f5: 	movaps	%xmm0, %xmm1
    000000f8: 	unpckhps	%xmm0, %xmm1
    000000fb: 	shufps	$0xff, %xmm0, %xmm0
    000000ff: 	movss	%xmm0, -0x10(%rax)
    00000104: 	movss	%xmm1, -0x20(%rax)
    00000109: 	cmpq	%r11, %rcx
    0000010c: 	jne	.Ltmp1579 # Offset: 268
    0000010e: 	movq	%r12, %rax
    00000111: 	andq	$-0x4, %rax
    00000115: 	movq	%rax, %rcx
    00000118: 	leaq	(%r15,%rax,4), %r10
    0000011c: 	shlq	$0x4, %rcx
    00000120: 	addq	%r14, %rcx
    00000123: 	cmpq	%rax, %r12
    00000126: 	je	.Ltmp1580 # Offset: 294
    00000128: 	movss	(%r10), %xmm0
    0000012d: 	leaq	0x1(%rax), %r11
    00000131: 	movss	%xmm0, (%rcx)
    00000135: 	cmpq	%r11, %rdx
    00000138: 	jbe	.Ltmp1580 # Offset: 312
    0000013a: 	movss	0x4(%r10), %xmm0
    00000140: 	addq	$0x2, %rax
    00000144: 	movss	%xmm0, 0x10(%rcx)
    00000149: 	cmpq	%rax, %rdx
    0000014c: 	jbe	.Ltmp1580 # Offset: 332
    0000014e: 	movss	0x8(%r10), %xmm0
    00000154: 	movss	%xmm0, 0x20(%rcx)
.Ltmp1580:
    00000159: 	testq	%rdx, %rdx
    0000015c: 	leaq	0x8(%r9), %rax
    00000160: 	leaq	0x4(%r14), %r11
    00000164: 	movl	$0x8, %ecx
    00000169: 	cmoveq	%rcx, %rax
    0000016d: 	addq	%r14, %rax
    00000170: 	cmpq	%rax, %rsi
    00000173: 	leaq	(%rsi,%rbx), %rax
    00000177: 	setae	%cl
    0000017a: 	cmpq	%rax, %r11
    0000017d: 	setae	%al
    00000180: 	orb	%cl, %al
    00000182: 	je	.Ltmp1581 # Offset: 386
    00000188: 	testb	%r13b, %r13b
    0000018b: 	je	.Ltmp1581 # Offset: 395
    00000191: 	testq	%rdx, %rdx
    00000194: 	movl	$0x1, %eax
    00000199: 	cmovneq	%rdx, %rax
    0000019d: 	xorl	%ecx, %ecx
    0000019f: 	movq	%rax, %r12
    000001a2: 	movq	%rax, -0x10(%rsp)
    000001a7: 	movq	%r11, %rax
    000001aa: 	shrq	$0x2, %r12
    000001ae: 	nop # Size: 2
.Ltmp1582:
    000001b0: 	movq	%rcx, %r10
    000001b3: 	addq	$0x1, %rcx
    000001b7: 	addq	$0x40, %rax
    000001bb: 	shlq	$0x4, %r10
    000001bf: 	movups	(%rsi,%r10), %xmm0
    000001c4: 	movaps	%xmm0, %xmm1
    000001c7: 	movss	%xmm0, -0x40(%rax)
    000001cc: 	shufps	$0x55, %xmm0, %xmm1
    000001d0: 	movss	%xmm1, -0x30(%rax)
    000001d5: 	movaps	%xmm0, %xmm1
    000001d8: 	unpckhps	%xmm0, %xmm1
    000001db: 	shufps	$0xff, %xmm0, %xmm0
    000001df: 	movss	%xmm0, -0x10(%rax)
    000001e4: 	movss	%xmm1, -0x20(%rax)
    000001e9: 	cmpq	%r12, %rcx
    000001ec: 	jne	.Ltmp1582 # Offset: 492
    000001ee: 	movq	-0x10(%rsp), %r12
    000001f3: 	movq	%r12, %rax
    000001f6: 	andq	$-0x4, %rax
    000001fa: 	movq	%rax, %rcx
    000001fd: 	leaq	(%rsi,%rax,4), %r10
    00000201: 	shlq	$0x4, %rcx
    00000205: 	addq	%r11, %rcx
    00000208: 	cmpq	%rax, %r12
    0000020b: 	je	.Ltmp1583 # Offset: 523
    0000020d: 	movss	(%r10), %xmm0
    00000212: 	leaq	0x1(%rax), %r11
    00000216: 	movss	%xmm0, (%rcx)
    0000021a: 	cmpq	%r11, %rdx
    0000021d: 	jbe	.Ltmp1583 # Offset: 541
    0000021f: 	movss	0x4(%r10), %xmm0
    00000225: 	addq	$0x2, %rax
    00000229: 	movss	%xmm0, 0x10(%rcx)
    0000022e: 	cmpq	%rax, %rdx
    00000231: 	jbe	.Ltmp1583 # Offset: 561
    00000233: 	movss	0x8(%r10), %xmm0
    00000239: 	movss	%xmm0, 0x20(%rcx)
.Ltmp1583:
    0000023e: 	addq	$0xc, %r9
    00000242: 	movl	$0xc, %eax
    00000247: 	leaq	0x8(%r14), %r10
    0000024b: 	testq	%rdx, %rdx
    0000024e: 	cmoveq	%rax, %r9
    00000252: 	leaq	(%rdi,%rbx), %rax
    00000256: 	addq	%r14, %r9
    00000259: 	cmpq	%r9, %rdi
    0000025c: 	setae	%cl
    0000025f: 	cmpq	%rax, %r10
    00000262: 	setae	%al
    00000265: 	orb	%cl, %al
    00000267: 	je	.Ltmp1584 # Offset: 615
    0000026d: 	testb	%r13b, %r13b
    00000270: 	je	.Ltmp1584 # Offset: 624
    00000276: 	testq	%rdx, %rdx
    00000279: 	movl	$0x1, %r12d
    0000027f: 	movq	%r10, %rax
    00000282: 	cmovneq	%rdx, %r12
    00000286: 	xorl	%ecx, %ecx
    00000288: 	movq	%r12, %r11
    0000028b: 	shrq	$0x2, %r11
    0000028f: 	nop # Size: 1
.Ltmp1585:
    00000290: 	movq	%rcx, %r9
    00000293: 	addq	$0x1, %rcx
    00000297: 	addq	$0x40, %rax
    0000029b: 	shlq	$0x4, %r9
    0000029f: 	movups	(%rdi,%r9), %xmm0
    000002a4: 	movaps	%xmm0, %xmm1
    000002a7: 	movss	%xmm0, -0x40(%rax)
    000002ac: 	shufps	$0x55, %xmm0, %xmm1
    000002b0: 	movss	%xmm1, -0x30(%rax)
    000002b5: 	movaps	%xmm0, %xmm1
    000002b8: 	unpckhps	%xmm0, %xmm1
    000002bb: 	shufps	$0xff, %xmm0, %xmm0
    000002bf: 	movss	%xmm0, -0x10(%rax)
    000002c4: 	movss	%xmm1, -0x20(%rax)
    000002c9: 	cmpq	%rcx, %r11
    000002cc: 	jne	.Ltmp1585 # Offset: 716
    000002ce: 	movq	%r12, %rax
    000002d1: 	andq	$-0x4, %rax
    000002d5: 	movq	%rax, %rcx
    000002d8: 	leaq	(%rdi,%rax,4), %r9
    000002dc: 	shlq	$0x4, %rcx
    000002e0: 	addq	%r10, %rcx
    000002e3: 	cmpq	%rax, %r12
    000002e6: 	je	.Ltmp1586 # Offset: 742
    000002e8: 	movss	(%r9), %xmm0
    000002ed: 	leaq	0x1(%rax), %r10
    000002f1: 	movss	%xmm0, (%rcx)
    000002f5: 	cmpq	%r10, %rdx
    000002f8: 	jbe	.Ltmp1586 # Offset: 760
    000002fa: 	movss	0x4(%r9), %xmm0
    00000300: 	addq	$0x2, %rax
    00000304: 	movss	%xmm0, 0x10(%rcx)
    00000309: 	cmpq	%rax, %rdx
    0000030c: 	jbe	.Ltmp1586 # Offset: 780
    0000030e: 	movss	0x8(%r9), %xmm0
    00000314: 	movss	%xmm0, 0x20(%rcx)
.Ltmp1586:
    00000319: 	movq	%rdx, %rax
    0000031c: 	movl	$0x10, %ecx
    00000321: 	leaq	0xc(%r14), %r10
    00000325: 	shlq	$0x4, %rax
    00000329: 	testq	%rdx, %rdx
    0000032c: 	cmoveq	%rcx, %rax
    00000330: 	addq	%r14, %rax
    00000333: 	cmpq	%rax, %r8
    00000336: 	setae	%al
    00000339: 	addq	%r8, %rbx
    0000033c: 	cmpq	%rbx, %r10
    0000033f: 	setae	%cl
    00000342: 	orb	%al, %cl
    00000344: 	je	.Ltmp1587 # Offset: 836
    0000034a: 	testb	%r13b, %r13b
    0000034d: 	je	.Ltmp1587 # Offset: 845
    00000353: 	testq	%rdx, %rdx
    00000356: 	movl	$0x1, %ebx
    0000035b: 	movq	%r10, %rax
    0000035e: 	cmovneq	%rdx, %rbx
    00000362: 	xorl	%ecx, %ecx
    00000364: 	movq	%rbx, %r11
    00000367: 	shrq	$0x2, %r11
    0000036b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1588:
    00000370: 	movq	%rcx, %r9
    00000373: 	addq	$0x1, %rcx
    00000377: 	addq	$0x40, %rax
    0000037b: 	shlq	$0x4, %r9
    0000037f: 	movups	(%r8,%r9), %xmm0
    00000384: 	movaps	%xmm0, %xmm1
    00000387: 	movss	%xmm0, -0x40(%rax)
    0000038c: 	shufps	$0x55, %xmm0, %xmm1
    00000390: 	movss	%xmm1, -0x30(%rax)
    00000395: 	movaps	%xmm0, %xmm1
    00000398: 	unpckhps	%xmm0, %xmm1
    0000039b: 	shufps	$0xff, %xmm0, %xmm0
    0000039f: 	movss	%xmm0, -0x10(%rax)
    000003a4: 	movss	%xmm1, -0x20(%rax)
    000003a9: 	cmpq	%rcx, %r11
    000003ac: 	jne	.Ltmp1588 # Offset: 940
    000003ae: 	movq	%rbx, %rax
    000003b1: 	andq	$-0x4, %rax
    000003b5: 	movq	%rax, %rcx
    000003b8: 	leaq	(%r8,%rax,4), %r9
    000003bc: 	shlq	$0x4, %rcx
    000003c0: 	addq	%r10, %rcx
    000003c3: 	cmpq	%rax, %rbx
    000003c6: 	je	.Ltmp1589 # Offset: 966
    000003c8: 	movss	(%r9), %xmm0
    000003cd: 	leaq	0x1(%rax), %r10
    000003d1: 	movss	%xmm0, (%rcx)
    000003d5: 	cmpq	%r10, %rdx
    000003d8: 	jbe	.Ltmp1589 # Offset: 984
    000003da: 	movss	0x4(%r9), %xmm0
    000003e0: 	addq	$0x2, %rax
    000003e4: 	movss	%xmm0, 0x10(%rcx)
    000003e9: 	cmpq	%rax, %rdx
    000003ec: 	jbe	.Ltmp1589 # Offset: 1004
    000003ee: 	movss	0x8(%r9), %xmm0
    000003f4: 	movss	%xmm0, 0x20(%rcx)
.Ltmp1589:
    000003f9: 	movl	-0x18(%rsp), %ebx
    000003fd: 	addq	-0x20(%rsp), %r14
    00000402: 	addq	%rbp, %r15
    00000405: 	addq	%rbp, %rsi
    00000408: 	subl	$0x100, -0x14(%rsp)
    00000410: 	addq	%rbp, %rdi
    00000413: 	addq	%rbp, %r8
    00000416: 	cmpl	%ebx, -0x24(%rsp)
    0000041a: 	jl	.Ltmp1590 # Offset: 1050
.Ltmp1576:
    00000420: 	popq	%rbx
    00000421: 	popq	%rbp
    00000422: 	popq	%r12
    00000424: 	popq	%r13
    00000426: 	popq	%r14
    00000428: 	popq	%r15
    0000042a: 	retq # Offset: 1066
    0000042b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1577:
    00000430: 	movslq	-0x14(%rsp), %rdx
    00000435: 	movq	%rdx, %rax
    00000438: 	leaq	(,%rdx,4), %rbp
    00000440: 	shll	$0x2, %eax
    00000443: 	cltq
    00000445: 	shlq	$0x2, %rax
    00000449: 	movq	%rax, -0x20(%rsp)
    0000044e: 	testq	%rdx, %rdx
    00000451: 	jne	.Ltmp1591 # Offset: 1105
    00000457: 	jmp	.Ltmp1589 # Offset: 1111
    00000459: 	nopl	(%rax) # Size: 7
.Ltmp1587:
    00000460: 	xorl	%eax, %eax
    00000462: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1592:
    00000468: 	movss	(%r8,%rax,4), %xmm0
    0000046e: 	addq	$0x1, %rax
    00000472: 	addq	$0x10, %r10
    00000476: 	movss	%xmm0, -0x10(%r10)
    0000047c: 	cmpq	%rdx, %rax
    0000047f: 	jb	.Ltmp1592 # Offset: 1151
    00000481: 	jmp	.Ltmp1589 # Offset: 1153
    00000486: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1584:
    00000490: 	xorl	%eax, %eax
    00000492: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1593:
    00000498: 	movss	(%rdi,%rax,4), %xmm0
    0000049d: 	addq	$0x1, %rax
    000004a1: 	addq	$0x10, %r10
    000004a5: 	movss	%xmm0, -0x10(%r10)
    000004ab: 	cmpq	%rax, %rdx
    000004ae: 	ja	.Ltmp1593 # Offset: 1198
    000004b0: 	jmp	.Ltmp1586 # Offset: 1200
    000004b5: 	nopl	(%rax) # Size: 3
.Ltmp1581:
    000004b8: 	xorl	%eax, %eax
    000004ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1594:
    000004c0: 	movss	(%rsi,%rax,4), %xmm0
    000004c5: 	addq	$0x1, %rax
    000004c9: 	addq	$0x10, %r11
    000004cd: 	movss	%xmm0, -0x10(%r11)
    000004d3: 	cmpq	%rax, %rdx
    000004d6: 	ja	.Ltmp1594 # Offset: 1238
    000004d8: 	jmp	.Ltmp1583 # Offset: 1240
    000004dd: 	nopl	(%rax) # Size: 3
.Ltmp1578:
    000004e0: 	movq	%r14, %rcx
    000004e3: 	xorl	%eax, %eax
    000004e5: 	nopl	(%rax) # Size: 3
.Ltmp1595:
    000004e8: 	movss	(%r15,%rax,4), %xmm0
    000004ee: 	addq	$0x1, %rax
    000004f2: 	addq	$0x10, %rcx
    000004f6: 	movss	%xmm0, -0x10(%rcx)
    000004fb: 	cmpq	%rax, %rdx
    000004fe: 	ja	.Ltmp1595 # Offset: 1278
    00000500: 	jmp	.Ltmp1580 # Offset: 1280
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version4IfEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version5IfEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 168
  State       : disassembled
  Address     : 0x20230
  Size        : 0x3a7
  MaxSize     : 0x3b0
  Offset      : 0x20230
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version5IfEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0167:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r9d, -0x14(%rsp)
    00000013: 	testl	%r9d, %r9d
    00000016: 	jle	.Ltmp1596 # Offset: 22
    0000001c: 	movq	%rsi, %r11
    0000001f: 	movq	%rdx, %r10
    00000022: 	movq	%rcx, %rsi
    00000025: 	movl	%r9d, %r14d
    00000028: 	xorl	%r13d, %r13d
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1604:
    00000030: 	addl	$0x100, %r13d
    00000037: 	cmpl	-0x14(%rsp), %r13d
    0000003c: 	jg	.Ltmp1597 # Offset: 60
    00000042: 	movq	$0x1000, -0x10(%rsp)
    0000004b: 	movl	$0x400, %ebp
    00000050: 	movl	$0x100, %ecx
.Ltmp1605:
    00000055: 	movslq	%ecx, %r9
    00000058: 	testl	%ecx, %ecx
    0000005a: 	movl	$0x4, %edx
    0000005f: 	movl	$0x8, %ebx
    00000064: 	leaq	(,%r9,4), %r12
    0000006c: 	movq	%r9, %rax
    0000006f: 	cmovgq	%r12, %rdx
    00000073: 	shlq	$0x4, %rax
    00000077: 	subq	$0x8, %rax
    0000007b: 	testl	%ecx, %ecx
    0000007d: 	cmovleq	%rbx, %rax
    00000081: 	leaq	(%r11,%rdx), %rbx
    00000085: 	addq	%rdi, %rax
    00000088: 	cmpq	%rbx, %rdi
    0000008b: 	setae	%r15b
    0000008f: 	cmpq	%rax, %r11
    00000092: 	setae	%bl
    00000095: 	addq	%r10, %rdx
    00000098: 	orl	%r15d, %ebx
    0000009b: 	cmpq	%rdx, %rdi
    0000009e: 	setae	%dl
    000000a1: 	cmpq	%rax, %r10
    000000a4: 	setae	%al
    000000a7: 	orl	%eax, %edx
    000000a9: 	testb	%dl, %bl
    000000ab: 	je	.Ltmp1598 # Offset: 171
    000000b1: 	cmpl	$0x5, %ecx
    000000b4: 	jle	.Ltmp1598 # Offset: 180
    000000ba: 	testl	%ecx, %ecx
    000000bc: 	movl	$0x1, %r15d
    000000c2: 	movq	%rdi, %rax
    000000c5: 	cmovgl	%ecx, %r15d
    000000c9: 	xorl	%edx, %edx
    000000cb: 	movl	%r15d, %ebx
    000000ce: 	shrl	$0x2, %ebx
    000000d1: 	shlq	$0x4, %rbx
    000000d5: 	nopl	(%rax) # Size: 3
.Ltmp1599:
    000000d8: 	movups	(%r11,%rdx), %xmm1
    000000dd: 	movups	(%r10,%rdx), %xmm0
    000000e2: 	addq	$0x10, %rdx
    000000e6: 	addq	$0x40, %rax
    000000ea: 	movaps	%xmm1, %xmm2
    000000ed: 	movss	%xmm1, -0x40(%rax)
    000000f2: 	shufps	$0x55, %xmm1, %xmm2
    000000f6: 	movss	%xmm2, -0x30(%rax)
    000000fb: 	movaps	%xmm1, %xmm2
    000000fe: 	unpckhps	%xmm1, %xmm2
    00000101: 	shufps	$0xff, %xmm1, %xmm1
    00000105: 	movss	%xmm1, -0x10(%rax)
    0000010a: 	movaps	%xmm0, %xmm1
    0000010d: 	shufps	$0x55, %xmm0, %xmm1
    00000111: 	movss	%xmm1, -0x2c(%rax)
    00000116: 	movaps	%xmm0, %xmm1
    00000119: 	unpckhps	%xmm0, %xmm1
    0000011c: 	movss	%xmm0, -0x3c(%rax)
    00000121: 	shufps	$0xff, %xmm0, %xmm0
    00000125: 	movss	%xmm2, -0x20(%rax)
    0000012a: 	movss	%xmm1, -0x1c(%rax)
    0000012f: 	movss	%xmm0, -0xc(%rax)
    00000134: 	cmpq	%rbx, %rdx
    00000137: 	jne	.Ltmp1599 # Offset: 311
    00000139: 	movl	%r15d, %edx
    0000013c: 	andl	$-0x4, %edx
    0000013f: 	andl	$0x3, %r15d
    00000143: 	je	.Ltmp1600 # Offset: 323
    00000145: 	movl	%edx, %ebx
    00000147: 	movss	(%r11,%rbx,4), %xmm0
    0000014d: 	movq	%rbx, %r15
    00000150: 	leaq	(,%rbx,4), %rax
    00000158: 	shlq	$0x4, %r15
    0000015c: 	movss	%xmm0, (%rdi,%r15)
    00000162: 	movss	(%r10,%rbx,4), %xmm0
    00000168: 	leal	0x1(%rdx), %ebx
    0000016b: 	movss	%xmm0, 0x4(%rdi,%rax,4)
    00000171: 	cmpl	%ebx, %ecx
    00000173: 	jle	.Ltmp1600 # Offset: 371
    00000175: 	movss	0x4(%r11,%rax), %xmm0
    0000017c: 	addl	$0x2, %edx
    0000017f: 	movss	%xmm0, 0x10(%rdi,%r15)
    00000186: 	movss	0x4(%r10,%rax), %xmm0
    0000018d: 	movss	%xmm0, 0x14(%rdi,%rax,4)
    00000193: 	cmpl	%edx, %ecx
    00000195: 	jle	.Ltmp1600 # Offset: 405
    00000197: 	movss	0x8(%r11,%rax), %xmm0
    0000019e: 	movss	%xmm0, 0x20(%rdi,%r15)
    000001a5: 	movss	0x8(%r10,%rax), %xmm0
    000001ac: 	movss	%xmm0, 0x24(%rdi,%rax,4)
.Ltmp1600:
    000001b2: 	leaq	(%r8,%r12), %rdx
    000001b6: 	leaq	0x8(%rdi), %rax
    000001ba: 	shlq	$0x4, %r9
    000001be: 	addq	%rdi, %r9
    000001c1: 	cmpq	%rdx, %rax
    000001c4: 	setae	%bl
    000001c7: 	cmpq	%r9, %r8
    000001ca: 	setae	%dl
    000001cd: 	addq	%rsi, %r12
    000001d0: 	orl	%ebx, %edx
    000001d2: 	cmpq	%r12, %rax
    000001d5: 	setae	%bl
    000001d8: 	cmpq	%r9, %rsi
    000001db: 	setae	%r9b
    000001df: 	orl	%ebx, %r9d
    000001e2: 	testb	%r9b, %dl
    000001e5: 	je	.Ltmp1601 # Offset: 485
    000001eb: 	leal	-0x1(%rcx), %edx
    000001ee: 	cmpl	$0x4, %edx
    000001f1: 	jbe	.Ltmp1601 # Offset: 497
    000001f7: 	movl	%ecx, %r9d
    000001fa: 	xorl	%edx, %edx
    000001fc: 	shrl	$0x2, %r9d
    00000200: 	shlq	$0x4, %r9
    00000204: 	nopl	(%rax) # Size: 4
.Ltmp1602:
    00000208: 	movups	(%rsi,%rdx), %xmm1
    0000020c: 	movups	(%r8,%rdx), %xmm0
    00000211: 	addq	$0x10, %rdx
    00000215: 	addq	$0x40, %rax
    00000219: 	movaps	%xmm1, %xmm2
    0000021c: 	movss	%xmm1, -0x40(%rax)
    00000221: 	shufps	$0x55, %xmm1, %xmm2
    00000225: 	movss	%xmm2, -0x30(%rax)
    0000022a: 	movaps	%xmm1, %xmm2
    0000022d: 	unpckhps	%xmm1, %xmm2
    00000230: 	shufps	$0xff, %xmm1, %xmm1
    00000234: 	movss	%xmm1, -0x10(%rax)
    00000239: 	movaps	%xmm0, %xmm1
    0000023c: 	shufps	$0x55, %xmm0, %xmm1
    00000240: 	movss	%xmm1, -0x2c(%rax)
    00000245: 	movaps	%xmm0, %xmm1
    00000248: 	unpckhps	%xmm0, %xmm1
    0000024b: 	movss	%xmm0, -0x3c(%rax)
    00000250: 	shufps	$0xff, %xmm0, %xmm0
    00000254: 	movss	%xmm2, -0x20(%rax)
    00000259: 	movss	%xmm1, -0x1c(%rax)
    0000025e: 	movss	%xmm0, -0xc(%rax)
    00000263: 	cmpq	%rdx, %r9
    00000266: 	jne	.Ltmp1602 # Offset: 614
    00000268: 	movl	%ecx, %edx
    0000026a: 	andl	$-0x4, %edx
    0000026d: 	testb	$0x3, %cl
    00000270: 	je	.Ltmp1603 # Offset: 624
    00000272: 	movl	%edx, %r9d
    00000275: 	movss	(%rsi,%r9,4), %xmm0
    0000027b: 	leaq	(,%r9,4), %rax
    00000283: 	leaq	0x2(%rax), %rbx
    00000287: 	movss	%xmm0, (%rdi,%rbx,4)
    0000028c: 	movss	(%r8,%r9,4), %xmm0
    00000292: 	leal	0x1(%rdx), %r9d
    00000296: 	movss	%xmm0, 0x4(%rdi,%rbx,4)
    0000029c: 	cmpl	%r9d, %ecx
    0000029f: 	jle	.Ltmp1603 # Offset: 671
    000002a1: 	movss	0x4(%rsi,%rax), %xmm0
    000002a7: 	leaq	0x6(%rax), %r9
    000002ab: 	addl	$0x2, %edx
    000002ae: 	movss	%xmm0, (%rdi,%r9,4)
    000002b4: 	movss	0x4(%r8,%rax), %xmm0
    000002bb: 	movss	%xmm0, 0x4(%rdi,%r9,4)
    000002c2: 	cmpl	%edx, %ecx
    000002c4: 	jle	.Ltmp1603 # Offset: 708
    000002c6: 	movss	0x8(%rsi,%rax), %xmm0
    000002cc: 	leaq	0xa(%rax), %rdx
    000002d0: 	movss	%xmm0, (%rdi,%rdx,4)
    000002d5: 	movss	0x8(%r8,%rax), %xmm0
    000002dc: 	movss	%xmm0, 0x4(%rdi,%rdx,4)
.Ltmp1603:
    000002e2: 	addq	-0x10(%rsp), %rdi
    000002e7: 	addq	%rbp, %r11
    000002ea: 	addq	%rbp, %r10
    000002ed: 	addq	%rbp, %rsi
    000002f0: 	addq	%rbp, %r8
    000002f3: 	subl	$0x100, %r14d
    000002fa: 	cmpl	-0x14(%rsp), %r13d
    000002ff: 	jl	.Ltmp1604 # Offset: 767
.Ltmp1596:
    00000305: 	popq	%rbx
    00000306: 	popq	%rbp
    00000307: 	popq	%r12
    00000309: 	popq	%r13
    0000030b: 	popq	%r14
    0000030d: 	popq	%r15
    0000030f: 	retq # Offset: 783
.Ltmp1597:
    00000310: 	leal	(,%r14,4), %eax
    00000318: 	movslq	%r14d, %rbp
    0000031b: 	movl	%r14d, %ecx
    0000031e: 	cltq
    00000320: 	shlq	$0x2, %rbp
    00000324: 	shlq	$0x2, %rax
    00000328: 	movq	%rax, -0x10(%rsp)
    0000032d: 	testl	%r14d, %r14d
    00000330: 	jg	.Ltmp1605 # Offset: 816
    00000336: 	jmp	.Ltmp1603 # Offset: 822
    00000338: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1601:
    00000340: 	movl	%ecx, %ecx
    00000342: 	xorl	%eax, %eax
    00000344: 	shlq	$0x2, %rcx
    00000348: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1606:
    00000350: 	movss	(%rsi,%rax), %xmm0
    00000355: 	movss	%xmm0, 0x8(%rdi,%rax,4)
    0000035b: 	movss	(%r8,%rax), %xmm0
    00000361: 	movss	%xmm0, 0xc(%rdi,%rax,4)
    00000367: 	addq	$0x4, %rax
    0000036b: 	cmpq	%rax, %rcx
    0000036e: 	jne	.Ltmp1606 # Offset: 878
    00000370: 	jmp	.Ltmp1603 # Offset: 880
    00000375: 	nopl	(%rax) # Size: 3
.Ltmp1598:
    00000378: 	movq	%rdi, %rdx
    0000037b: 	xorl	%eax, %eax
    0000037d: 	nopl	(%rax) # Size: 3
.Ltmp1607:
    00000380: 	movss	(%r11,%rax,4), %xmm0
    00000386: 	addq	$0x10, %rdx
    0000038a: 	movss	%xmm0, -0x10(%rdx)
    0000038f: 	movss	(%r10,%rax,4), %xmm0
    00000395: 	addq	$0x1, %rax
    00000399: 	movss	%xmm0, -0xc(%rdx)
    0000039e: 	cmpl	%eax, %ecx
    000003a0: 	jg	.Ltmp1607 # Offset: 928
    000003a2: 	jmp	.Ltmp1600 # Offset: 930
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version5IfEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version6IfEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 169
  State       : disassembled
  Address     : 0x205e0
  Size        : 0x4fc
  MaxSize     : 0x500
  Offset      : 0x205e0
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version6IfEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0168:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r9d, -0x1c(%rsp)
    00000013: 	movl	%r9d, -0x10(%rsp)
    00000018: 	testl	%r9d, %r9d
    0000001b: 	jle	.Ltmp1608 # Offset: 27
    00000021: 	movq	%rdx, %r11
    00000024: 	movq	%rcx, %r10
    00000027: 	movq	%r8, %r13
    0000002a: 	xorl	%r12d, %r12d
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp1622:
    00000030: 	addl	$0x100, %r12d
    00000037: 	cmpl	-0x1c(%rsp), %r12d
    0000003c: 	jg	.Ltmp1609 # Offset: 60
    00000042: 	movq	$0x1000, -0x18(%rsp)
    0000004b: 	movl	$0x400, %ebx
    00000050: 	movl	$0x100, %ecx
.Ltmp1624:
    00000055: 	movslq	%ecx, %r8
    00000058: 	movl	$0x4, %edx
    0000005d: 	leaq	-0x1(%r8), %rbp
    00000061: 	leaq	(,%r8,4), %r9
    00000069: 	shlq	$0x4, %rbp
    0000006d: 	testl	%ecx, %ecx
    0000006f: 	leaq	0x4(%rbp), %rax
    00000073: 	cmovleq	%rdx, %rax
    00000077: 	addq	%rdi, %rax
    0000007a: 	cmpq	%rax, %rsi
    0000007d: 	movl	$0x4, %eax
    00000082: 	setae	%dl
    00000085: 	testl	%ecx, %ecx
    00000087: 	cmovgq	%r9, %rax
    0000008b: 	addq	%rsi, %rax
    0000008e: 	cmpq	%rax, %rdi
    00000091: 	setae	%al
    00000094: 	orb	%dl, %al
    00000096: 	je	.Ltmp1610 # Offset: 150
    0000009c: 	cmpl	$0x7, %ecx
    0000009f: 	jle	.Ltmp1610 # Offset: 159
    000000a5: 	testl	%ecx, %ecx
    000000a7: 	movl	$0x1, %r15d
    000000ad: 	movq	%rsi, %rdx
    000000b0: 	movq	%rdi, %rax
    000000b3: 	cmovgl	%ecx, %r15d
    000000b7: 	movl	%r15d, %r14d
    000000ba: 	shrl	$0x2, %r14d
    000000be: 	subl	$0x1, %r14d
    000000c2: 	shlq	$0x4, %r14
    000000c6: 	leaq	0x10(%rsi,%r14), %r14
    000000cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1611:
    000000d0: 	movups	(%rdx), %xmm0
    000000d3: 	addq	$0x10, %rdx
    000000d7: 	addq	$0x40, %rax
    000000db: 	movaps	%xmm0, %xmm1
    000000de: 	movss	%xmm0, -0x40(%rax)
    000000e3: 	shufps	$0x55, %xmm0, %xmm1
    000000e7: 	movss	%xmm1, -0x30(%rax)
    000000ec: 	movaps	%xmm0, %xmm1
    000000ef: 	unpckhps	%xmm0, %xmm1
    000000f2: 	shufps	$0xff, %xmm0, %xmm0
    000000f6: 	movss	%xmm0, -0x10(%rax)
    000000fb: 	movss	%xmm1, -0x20(%rax)
    00000100: 	cmpq	%r14, %rdx
    00000103: 	jne	.Ltmp1611 # Offset: 259
    00000105: 	movl	%r15d, %eax
    00000108: 	andl	$-0x4, %eax
    0000010b: 	andl	$0x3, %r15d
    0000010f: 	je	.Ltmp1612 # Offset: 271
    00000111: 	movl	%eax, %edx
    00000113: 	movss	(%rsi,%rdx,4), %xmm0
    00000118: 	movq	%rdx, %r14
    0000011b: 	leaq	(,%rdx,4), %r15
    00000123: 	leal	0x1(%rax), %edx
    00000126: 	shlq	$0x4, %r14
    0000012a: 	movss	%xmm0, (%rdi,%r14)
    00000130: 	cmpl	%edx, %ecx
    00000132: 	jle	.Ltmp1612 # Offset: 306
    00000134: 	movss	0x4(%rsi,%r15), %xmm0
    0000013b: 	addl	$0x2, %eax
    0000013e: 	movss	%xmm0, 0x10(%rdi,%r14)
    00000145: 	cmpl	%eax, %ecx
    00000147: 	jle	.Ltmp1612 # Offset: 327
    00000149: 	movss	0x8(%rsi,%r15), %xmm0
    00000150: 	movss	%xmm0, 0x20(%rdi,%r14)
.Ltmp1612:
    00000157: 	leal	-0x1(%rcx), %eax
    0000015a: 	leaq	0x8(%rdi,%rbp), %rdx
    0000015f: 	cmpl	$0x6, %eax
    00000162: 	movl	%eax, -0xc(%rsp)
    00000166: 	leaq	0x4(%rdi), %rax
    0000016a: 	seta	%r14b
    0000016e: 	cmpq	%rdx, %r11
    00000171: 	leaq	(%r11,%r9), %rdx
    00000175: 	setae	%r15b
    00000179: 	cmpq	%rdx, %rax
    0000017c: 	setae	%dl
    0000017f: 	orb	%r15b, %dl
    00000182: 	movq	%r11, %rdx
    00000185: 	je	.Ltmp1613 # Offset: 389
    0000018b: 	testb	%r14b, %r14b
    0000018e: 	je	.Ltmp1613 # Offset: 398
    00000194: 	movl	%ecx, %r15d
    00000197: 	shrl	$0x2, %r15d
    0000019b: 	subl	$0x1, %r15d
    0000019f: 	shlq	$0x4, %r15
    000001a3: 	leaq	0x10(%r11,%r15), %r15
    000001a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1614:
    000001b0: 	movups	(%rdx), %xmm0
    000001b3: 	addq	$0x10, %rdx
    000001b7: 	addq	$0x40, %rax
    000001bb: 	movaps	%xmm0, %xmm1
    000001be: 	movss	%xmm0, -0x40(%rax)
    000001c3: 	shufps	$0x55, %xmm0, %xmm1
    000001c7: 	movss	%xmm1, -0x30(%rax)
    000001cc: 	movaps	%xmm0, %xmm1
    000001cf: 	unpckhps	%xmm0, %xmm1
    000001d2: 	shufps	$0xff, %xmm0, %xmm0
    000001d6: 	movss	%xmm0, -0x10(%rax)
    000001db: 	movss	%xmm1, -0x20(%rax)
    000001e0: 	cmpq	%r15, %rdx
    000001e3: 	jne	.Ltmp1614 # Offset: 483
    000001e5: 	movl	%ecx, %eax
    000001e7: 	andl	$-0x4, %eax
    000001ea: 	testb	$0x3, %cl
    000001ed: 	je	.Ltmp1615 # Offset: 493
    000001ef: 	movl	%eax, %r15d
    000001f2: 	movss	(%r11,%r15,4), %xmm0
    000001f8: 	leaq	(,%r15,4), %rdx
    00000200: 	leal	0x1(%rax), %r15d
    00000204: 	movss	%xmm0, 0x4(%rdi,%rdx,4)
    0000020a: 	cmpl	%r15d, %ecx
    0000020d: 	jle	.Ltmp1615 # Offset: 525
    0000020f: 	movss	0x4(%r11,%rdx), %xmm0
    00000216: 	addl	$0x2, %eax
    00000219: 	movss	%xmm0, 0x14(%rdi,%rdx,4)
    0000021f: 	cmpl	%eax, %ecx
    00000221: 	jle	.Ltmp1615 # Offset: 545
    00000223: 	movss	0x8(%r11,%rdx), %xmm0
    0000022a: 	movss	%xmm0, 0x24(%rdi,%rdx,4)
.Ltmp1615:
    00000230: 	leaq	0xc(%rdi,%rbp), %rdx
    00000235: 	leaq	0x8(%rdi), %rax
    00000239: 	cmpq	%rdx, %r10
    0000023c: 	leaq	(%r10,%r9), %rdx
    00000240: 	setae	%bpl
    00000244: 	cmpq	%rdx, %rax
    00000247: 	setae	%dl
    0000024a: 	orb	%bpl, %dl
    0000024d: 	movq	%r10, %rdx
    00000250: 	je	.Ltmp1616 # Offset: 592
    00000256: 	testb	%r14b, %r14b
    00000259: 	je	.Ltmp1616 # Offset: 601
    0000025f: 	movl	%ecx, %ebp
    00000261: 	shrl	$0x2, %ebp
    00000264: 	subl	$0x1, %ebp
    00000267: 	shlq	$0x4, %rbp
    0000026b: 	leaq	0x10(%r10,%rbp), %rbp
.Ltmp1617:
    00000270: 	movups	(%rdx), %xmm0
    00000273: 	addq	$0x10, %rdx
    00000277: 	addq	$0x40, %rax
    0000027b: 	movaps	%xmm0, %xmm1
    0000027e: 	movss	%xmm0, -0x40(%rax)
    00000283: 	shufps	$0x55, %xmm0, %xmm1
    00000287: 	movss	%xmm1, -0x30(%rax)
    0000028c: 	movaps	%xmm0, %xmm1
    0000028f: 	unpckhps	%xmm0, %xmm1
    00000292: 	shufps	$0xff, %xmm0, %xmm0
    00000296: 	movss	%xmm0, -0x10(%rax)
    0000029b: 	movss	%xmm1, -0x20(%rax)
    000002a0: 	cmpq	%rbp, %rdx
    000002a3: 	jne	.Ltmp1617 # Offset: 675
    000002a5: 	movl	%ecx, %eax
    000002a7: 	andl	$-0x4, %eax
    000002aa: 	testb	$0x3, %cl
    000002ad: 	je	.Ltmp1618 # Offset: 685
    000002af: 	movl	%eax, %ebp
    000002b1: 	movss	(%r10,%rbp,4), %xmm0
    000002b7: 	leaq	(,%rbp,4), %rdx
    000002bf: 	leal	0x1(%rax), %ebp
    000002c2: 	movss	%xmm0, 0x8(%rdi,%rdx,4)
    000002c8: 	cmpl	%ecx, %ebp
    000002ca: 	jge	.Ltmp1618 # Offset: 714
    000002cc: 	movss	0x4(%r10,%rdx), %xmm0
    000002d3: 	addl	$0x2, %eax
    000002d6: 	movss	%xmm0, 0x18(%rdi,%rdx,4)
    000002dc: 	cmpl	%eax, %ecx
    000002de: 	jle	.Ltmp1618 # Offset: 734
    000002e0: 	movss	0x8(%r10,%rdx), %xmm0
    000002e7: 	movss	%xmm0, 0x28(%rdi,%rdx,4)
.Ltmp1618:
    000002ed: 	shlq	$0x4, %r8
    000002f1: 	leaq	0xc(%rdi), %rax
    000002f5: 	addq	%rdi, %r8
    000002f8: 	cmpq	%r8, %r13
    000002fb: 	setae	%dl
    000002fe: 	addq	%r13, %r9
    00000301: 	cmpq	%r9, %rax
    00000304: 	setae	%r8b
    00000308: 	orb	%dl, %r8b
    0000030b: 	movq	%r13, %rdx
    0000030e: 	je	.Ltmp1619 # Offset: 782
    00000314: 	testb	%r14b, %r14b
    00000317: 	je	.Ltmp1619 # Offset: 791
    0000031d: 	movl	%ecx, %r8d
    00000320: 	shrl	$0x2, %r8d
    00000324: 	subl	$0x1, %r8d
    00000328: 	shlq	$0x4, %r8
    0000032c: 	leaq	0x10(%r13,%r8), %r8
    00000331: 	nopl	(%rax) # Size: 7
.Ltmp1620:
    00000338: 	movups	(%rdx), %xmm0
    0000033b: 	addq	$0x10, %rdx
    0000033f: 	addq	$0x40, %rax
    00000343: 	movaps	%xmm0, %xmm1
    00000346: 	movss	%xmm0, -0x40(%rax)
    0000034b: 	shufps	$0x55, %xmm0, %xmm1
    0000034f: 	movss	%xmm1, -0x30(%rax)
    00000354: 	movaps	%xmm0, %xmm1
    00000357: 	unpckhps	%xmm0, %xmm1
    0000035a: 	shufps	$0xff, %xmm0, %xmm0
    0000035e: 	movss	%xmm0, -0x10(%rax)
    00000363: 	movss	%xmm1, -0x20(%rax)
    00000368: 	cmpq	%rdx, %r8
    0000036b: 	jne	.Ltmp1620 # Offset: 875
    0000036d: 	movl	%ecx, %eax
    0000036f: 	andl	$-0x4, %eax
    00000372: 	testb	$0x3, %cl
    00000375: 	je	.Ltmp1621 # Offset: 885
    00000377: 	movl	%eax, %r8d
    0000037a: 	movss	(%r13,%r8,4), %xmm0
    00000381: 	leaq	(,%r8,4), %rdx
    00000389: 	leal	0x1(%rax), %r8d
    0000038d: 	movss	%xmm0, 0xc(%rdi,%rdx,4)
    00000393: 	cmpl	%r8d, %ecx
    00000396: 	jle	.Ltmp1621 # Offset: 918
    00000398: 	movss	0x4(%r13,%rdx), %xmm0
    0000039f: 	addl	$0x2, %eax
    000003a2: 	movss	%xmm0, 0x1c(%rdi,%rdx,4)
    000003a8: 	cmpl	%eax, %ecx
    000003aa: 	jle	.Ltmp1621 # Offset: 938
    000003ac: 	movss	0x8(%r13,%rdx), %xmm0
    000003b3: 	movss	%xmm0, 0x2c(%rdi,%rdx,4)
.Ltmp1621:
    000003b9: 	addq	-0x18(%rsp), %rdi
    000003be: 	addq	%rbx, %rsi
    000003c1: 	addq	%rbx, %r11
    000003c4: 	addq	%rbx, %r10
    000003c7: 	subl	$0x100, -0x10(%rsp)
    000003cf: 	addq	%rbx, %r13
    000003d2: 	cmpl	-0x1c(%rsp), %r12d
    000003d7: 	jl	.Ltmp1622 # Offset: 983
.Ltmp1608:
    000003dd: 	popq	%rbx
    000003de: 	popq	%rbp
    000003df: 	popq	%r12
    000003e1: 	popq	%r13
    000003e3: 	popq	%r14
    000003e5: 	popq	%r15
    000003e7: 	retq # Offset: 999
    000003e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1609:
    000003f0: 	movslq	-0x10(%rsp), %rbx
    000003f5: 	movl	%ebx, %ecx
    000003f7: 	testl	%ebx, %ebx
    000003f9: 	jle	.Ltmp1623 # Offset: 1017
    000003ff: 	leal	(,%rbx,4), %eax
    00000406: 	shlq	$0x2, %rbx
    0000040a: 	cltq
    0000040c: 	shlq	$0x2, %rax
    00000410: 	movq	%rax, -0x18(%rsp)
    00000415: 	jmp	.Ltmp1624 # Offset: 1045
    0000041a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1619:
    00000420: 	movl	-0xc(%rsp), %ecx
    00000424: 	leaq	0x4(%r13,%rcx,4), %rcx
    00000429: 	nopl	(%rax) # Size: 7
.Ltmp1625:
    00000430: 	movss	(%rdx), %xmm0
    00000434: 	addq	$0x4, %rdx
    00000438: 	addq	$0x10, %rax
    0000043c: 	movss	%xmm0, -0x10(%rax)
    00000441: 	cmpq	%rdx, %rcx
    00000444: 	jne	.Ltmp1625 # Offset: 1092
    00000446: 	jmp	.Ltmp1621 # Offset: 1094
    0000044b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1613:
    00000450: 	movl	-0xc(%rsp), %r15d
    00000455: 	leaq	0x4(%r11,%r15,4), %r15
    0000045a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1626:
    00000460: 	movss	(%rdx), %xmm0
    00000464: 	addq	$0x4, %rdx
    00000468: 	addq	$0x10, %rax
    0000046c: 	movss	%xmm0, -0x10(%rax)
    00000471: 	cmpq	%r15, %rdx
    00000474: 	jne	.Ltmp1626 # Offset: 1140
    00000476: 	jmp	.Ltmp1615 # Offset: 1142
    0000047b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1610:
    00000480: 	xorl	%eax, %eax
    00000482: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1627:
    00000488: 	movss	(%rsi,%rax,4), %xmm0
    0000048d: 	movq	%rax, %rdx
    00000490: 	addq	$0x1, %rax
    00000494: 	shlq	$0x4, %rdx
    00000498: 	movss	%xmm0, (%rdi,%rdx)
    0000049d: 	cmpl	%eax, %ecx
    0000049f: 	jg	.Ltmp1627 # Offset: 1183
    000004a1: 	jmp	.Ltmp1612 # Offset: 1185
    000004a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1616:
    000004b0: 	movl	-0xc(%rsp), %ebp
    000004b4: 	leaq	0x4(%r10,%rbp,4), %rbp
    000004b9: 	nopl	(%rax) # Size: 7
.Ltmp1628:
    000004c0: 	movss	(%rdx), %xmm0
    000004c4: 	addq	$0x4, %rdx
    000004c8: 	addq	$0x10, %rax
    000004cc: 	movss	%xmm0, -0x10(%rax)
    000004d1: 	cmpq	%rbp, %rdx
    000004d4: 	jne	.Ltmp1628 # Offset: 1236
    000004d6: 	jmp	.Ltmp1618 # Offset: 1238
    000004db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1623:
    000004e0: 	leal	(,%rbx,4), %ebx
    000004e7: 	movslq	%ebx, %rbx
    000004ea: 	leaq	(,%rbx,4), %rax
    000004f2: 	movq	%rax, -0x18(%rsp)
    000004f7: 	jmp	.Ltmp1621 # Offset: 1271
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version6IfEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave2to2_version1IdEvPT_PKS0_S3_i" after disassembly {
  Number      : 170
  State       : disassembled
  Address     : 0x20ae0
  Size        : 0xdf
  MaxSize     : 0xe0
  Offset      : 0x20ae0
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version1IdEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0169:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp1629 # Offset: 6
    0000000c: 	movslq	%ecx, %rax
    0000000f: 	leaq	(,%rax,8), %r8
    00000017: 	shlq	$0x4, %rax
    0000001b: 	leaq	(%rsi,%r8), %r9
    0000001f: 	addq	%rdi, %rax
    00000022: 	cmpq	%r9, %rdi
    00000025: 	setae	%r9b
    00000029: 	cmpq	%rsi, %rax
    0000002c: 	setbe	%r10b
    00000030: 	addq	%rdx, %r8
    00000033: 	orl	%r10d, %r9d
    00000036: 	cmpq	%r8, %rdi
    00000039: 	setae	%r8b
    0000003d: 	cmpq	%rdx, %rax
    00000040: 	setbe	%al
    00000043: 	orl	%r8d, %eax
    00000046: 	testb	%al, %r9b
    00000049: 	je	.Ltmp1630 # Offset: 73
    0000004b: 	leal	-0x1(%rcx), %eax
    0000004e: 	cmpl	$0x1, %eax
    00000051: 	jbe	.Ltmp1630 # Offset: 81
    00000053: 	movl	%ecx, %r8d
    00000056: 	xorl	%eax, %eax
    00000058: 	shrl	%r8d
    0000005b: 	shlq	$0x4, %r8
    0000005f: 	nop # Size: 1
.Ltmp1631:
    00000060: 	movupd	(%rsi,%rax), %xmm0
    00000065: 	movupd	(%rdx,%rax), %xmm1
    0000006a: 	movapd	%xmm0, %xmm2
    0000006e: 	unpckhpd	%xmm1, %xmm0
    00000072: 	unpcklpd	%xmm1, %xmm2
    00000076: 	movups	%xmm0, 0x10(%rdi,%rax,2)
    0000007b: 	movups	%xmm2, (%rdi,%rax,2)
    0000007f: 	addq	$0x10, %rax
    00000083: 	cmpq	%rax, %r8
    00000086: 	jne	.Ltmp1631 # Offset: 134
    00000088: 	movl	%ecx, %eax
    0000008a: 	andl	$-0x2, %eax
    0000008d: 	andl	$0x1, %ecx
    00000090: 	je	.Ltmp1629 # Offset: 144
    00000092: 	movl	%eax, %ecx
    00000094: 	addl	%eax, %eax
    00000096: 	movsd	(%rsi,%rcx,8), %xmm0
    0000009b: 	cltq
    0000009d: 	movsd	%xmm0, (%rdi,%rax,8)
    000000a2: 	movsd	(%rdx,%rcx,8), %xmm0
    000000a7: 	movsd	%xmm0, 0x8(%rdi,%rax,8)
    000000ad: 	retq # Offset: 173
    000000ae: 	nop # Size: 2
.Ltmp1630:
    000000b0: 	movl	%ecx, %ecx
    000000b2: 	xorl	%eax, %eax
    000000b4: 	shlq	$0x3, %rcx
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1632:
    000000c0: 	movsd	(%rsi,%rax), %xmm0
    000000c5: 	movsd	%xmm0, (%rdi,%rax,2)
    000000ca: 	movsd	(%rdx,%rax), %xmm0
    000000cf: 	movsd	%xmm0, 0x8(%rdi,%rax,2)
    000000d5: 	addq	$0x8, %rax
    000000d9: 	cmpq	%rcx, %rax
    000000dc: 	jne	.Ltmp1632 # Offset: 220
.Ltmp1629:
    000000de: 	retq # Offset: 222
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version1IdEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version2IdEvPT_PKS0_S3_i" after disassembly {
  Number      : 171
  State       : disassembled
  Address     : 0x20bc0
  Size        : 0xef
  MaxSize     : 0xf0
  Offset      : 0x20bc0
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version2IdEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0170:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp1633 # Offset: 6
    0000000c: 	movslq	%ecx, %rax
    0000000f: 	leaq	(,%rax,8), %r8
    00000017: 	shlq	$0x4, %rax
    0000001b: 	leaq	(%rsi,%r8), %r9
    0000001f: 	addq	%rdi, %rax
    00000022: 	cmpq	%r9, %rdi
    00000025: 	setae	%r9b
    00000029: 	cmpq	%rax, %rsi
    0000002c: 	setae	%r10b
    00000030: 	addq	%rdx, %r8
    00000033: 	orl	%r10d, %r9d
    00000036: 	cmpq	%r8, %rdi
    00000039: 	setae	%r8b
    0000003d: 	cmpq	%rax, %rdx
    00000040: 	setae	%al
    00000043: 	orl	%r8d, %eax
    00000046: 	testb	%al, %r9b
    00000049: 	je	.Ltmp1634 # Offset: 73
    0000004b: 	leal	-0x1(%rcx), %eax
    0000004e: 	cmpl	$0x1, %eax
    00000051: 	jbe	.Ltmp1634 # Offset: 81
    00000053: 	movl	%ecx, %r8d
    00000056: 	xorl	%eax, %eax
    00000058: 	shrl	%r8d
    0000005b: 	shlq	$0x4, %r8
    0000005f: 	nop # Size: 1
.Ltmp1635:
    00000060: 	movupd	(%rsi,%rax), %xmm0
    00000065: 	movupd	(%rdx,%rax), %xmm1
    0000006a: 	movapd	%xmm0, %xmm2
    0000006e: 	unpckhpd	%xmm1, %xmm0
    00000072: 	unpcklpd	%xmm1, %xmm2
    00000076: 	movups	%xmm0, 0x10(%rdi,%rax,2)
    0000007b: 	movups	%xmm2, (%rdi,%rax,2)
    0000007f: 	addq	$0x10, %rax
    00000083: 	cmpq	%r8, %rax
    00000086: 	jne	.Ltmp1635 # Offset: 134
    00000088: 	movl	%ecx, %r9d
    0000008b: 	andl	$-0x2, %r9d
    0000008f: 	movl	%r9d, %r8d
    00000092: 	movq	%r8, %rax
    00000095: 	shlq	$0x4, %rax
    00000099: 	addq	%rdi, %rax
    0000009c: 	leaq	(,%r8,8), %rdi
    000000a4: 	addq	%rdi, %rsi
    000000a7: 	addq	%rdi, %rdx
    000000aa: 	cmpl	%r9d, %ecx
    000000ad: 	je	.Ltmp1633 # Offset: 173
    000000af: 	movsd	(%rsi), %xmm0
    000000b3: 	movsd	%xmm0, (%rax)
    000000b7: 	movsd	(%rdx), %xmm0
    000000bb: 	movsd	%xmm0, 0x8(%rax)
    000000c0: 	retq # Offset: 192
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp1634:
    000000c8: 	movl	%ecx, %ecx
    000000ca: 	xorl	%eax, %eax
    000000cc: 	shlq	$0x3, %rcx
.Ltmp1636:
    000000d0: 	movsd	(%rsi,%rax), %xmm0
    000000d5: 	movsd	%xmm0, (%rdi,%rax,2)
    000000da: 	movsd	(%rdx,%rax), %xmm0
    000000df: 	movsd	%xmm0, 0x8(%rdi,%rax,2)
    000000e5: 	addq	$0x8, %rax
    000000e9: 	cmpq	%rax, %rcx
    000000ec: 	jne	.Ltmp1636 # Offset: 236
.Ltmp1633:
    000000ee: 	retq # Offset: 238
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version2IdEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version3IdEvPT_PKS0_S3_i" after disassembly {
  Number      : 172
  State       : disassembled
  Address     : 0x20cb0
  Size        : 0x179
  MaxSize     : 0x180
  Offset      : 0x20cb0
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version3IdEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0171:
    00000000: 	endbr64
    00000004: 	movslq	%ecx, %rcx
    00000007: 	movq	%rdi, %rax
    0000000a: 	movq	%rsi, %r8
    0000000d: 	movq	%rdx, %rdi
    00000010: 	testq	%rcx, %rcx
    00000013: 	je	.Ltmp1637 # Offset: 19
    00000019: 	leaq	-0x1(%rcx), %rdx
    0000001d: 	leaq	(,%rcx,8), %r11
    00000025: 	cmpq	$0xe, %rdx
    00000029: 	seta	%r10b
    0000002d: 	shlq	$0x4, %rdx
    00000031: 	leaq	0x8(%rax,%rdx), %rdx
    00000036: 	cmpq	%rdx, %rsi
    00000039: 	leaq	(%rsi,%r11), %rsi
    0000003d: 	setae	%dl
    00000040: 	cmpq	%rsi, %rax
    00000043: 	setae	%sil
    00000047: 	orb	%sil, %dl
    0000004a: 	je	.Ltmp1638 # Offset: 74
    00000050: 	testb	%r10b, %r10b
    00000053: 	je	.Ltmp1638 # Offset: 83
    00000059: 	movq	%rcx, %r9
    0000005c: 	xorl	%edx, %edx
    0000005e: 	xorl	%esi, %esi
    00000060: 	shrq	%r9
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1639:
    00000068: 	movupd	(%r8,%rdx), %xmm0
    0000006e: 	addq	$0x1, %rsi
    00000072: 	movlpd	%xmm0, (%rax,%rdx,2)
    00000077: 	movhpd	%xmm0, 0x10(%rax,%rdx,2)
    0000007d: 	addq	$0x10, %rdx
    00000081: 	cmpq	%rsi, %r9
    00000084: 	jne	.Ltmp1639 # Offset: 132
    00000086: 	movq	%rcx, %r9
    00000089: 	andq	$-0x2, %r9
    0000008d: 	movq	%r9, %rdx
    00000090: 	leaq	(%r8,%r9,8), %rsi
    00000094: 	shlq	$0x4, %rdx
    00000098: 	addq	%rax, %rdx
    0000009b: 	cmpq	%r9, %rcx
    0000009e: 	je	.Ltmp1640 # Offset: 158
    000000a0: 	movsd	(%rsi), %xmm0
    000000a4: 	movsd	%xmm0, (%rdx)
.Ltmp1640:
    000000a8: 	movq	%rcx, %rdx
    000000ab: 	leaq	0x8(%rax), %r8
    000000af: 	shlq	$0x4, %rdx
    000000b3: 	addq	%rax, %rdx
    000000b6: 	cmpq	%rdx, %rdi
    000000b9: 	setae	%dl
    000000bc: 	addq	%rdi, %r11
    000000bf: 	cmpq	%r11, %r8
    000000c2: 	setae	%sil
    000000c6: 	orb	%sil, %dl
    000000c9: 	je	.Ltmp1641 # Offset: 201
    000000cf: 	movq	%rcx, %r9
    000000d2: 	xorl	%edx, %edx
    000000d4: 	xorl	%esi, %esi
    000000d6: 	shrq	%r9
    000000d9: 	testb	%r10b, %r10b
    000000dc: 	je	.Ltmp1641 # Offset: 220
    000000de: 	nop # Size: 2
.Ltmp1642:
    000000e0: 	movupd	(%rdi,%rdx), %xmm0
    000000e5: 	addq	$0x1, %rsi
    000000e9: 	movlpd	%xmm0, 0x8(%rax,%rdx,2)
    000000ef: 	movhpd	%xmm0, 0x18(%rax,%rdx,2)
    000000f5: 	addq	$0x10, %rdx
    000000f9: 	cmpq	%rsi, %r9
    000000fc: 	jne	.Ltmp1642 # Offset: 252
    000000fe: 	movq	%rcx, %rsi
    00000101: 	andq	$-0x2, %rsi
    00000105: 	movq	%rsi, %rax
    00000108: 	leaq	(%rdi,%rsi,8), %rdx
    0000010c: 	shlq	$0x4, %rax
    00000110: 	addq	%r8, %rax
    00000113: 	cmpq	%rsi, %rcx
    00000116: 	je	.Ltmp1637 # Offset: 278
    00000118: 	movsd	(%rdx), %xmm0
    0000011c: 	movsd	%xmm0, (%rax)
    00000120: 	retq # Offset: 288
    00000121: 	nopl	(%rax) # Size: 7
.Ltmp1637:
    00000128: 	retq # Offset: 296
    00000129: 	nopl	(%rax) # Size: 7
.Ltmp1638:
    00000130: 	movq	%rax, %rsi
    00000133: 	xorl	%edx, %edx
    00000135: 	nopl	(%rax) # Size: 3
.Ltmp1643:
    00000138: 	movsd	(%r8,%rdx,8), %xmm0
    0000013e: 	addq	$0x1, %rdx
    00000142: 	addq	$0x10, %rsi
    00000146: 	movsd	%xmm0, -0x10(%rsi)
    0000014b: 	cmpq	%rdx, %rcx
    0000014e: 	jne	.Ltmp1643 # Offset: 334
    00000150: 	jmp	.Ltmp1640 # Offset: 336
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp1641:
    00000158: 	xorl	%eax, %eax
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1644:
    00000160: 	movsd	(%rdi,%rax,8), %xmm0
    00000165: 	addq	$0x1, %rax
    00000169: 	addq	$0x10, %r8
    0000016d: 	movsd	%xmm0, -0x10(%r8)
    00000173: 	cmpq	%rax, %rcx
    00000176: 	jne	.Ltmp1644 # Offset: 374
    00000178: 	retq # Offset: 376
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version3IdEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version4IdEvPT_PKS0_S3_i" after disassembly {
  Number      : 173
  State       : disassembled
  Address     : 0x20e30
  Size        : 0x236
  MaxSize     : 0x240
  Offset      : 0x20e30
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version4IdEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0172:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp1645 # Offset: 6
    0000000c: 	pushq	%r15
    0000000e: 	movq	%rdi, %rax
    00000011: 	movq	%rsi, %r8
    00000014: 	movq	%rdx, %rdi
    00000017: 	pushq	%r14
    00000019: 	xorl	%r10d, %r10d
    0000001c: 	pushq	%r13
    0000001e: 	movl	%ecx, %r13d
    00000021: 	pushq	%r12
    00000023: 	movl	%ecx, %r12d
    00000026: 	pushq	%rbp
    00000027: 	pushq	%rbx
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1653:
    00000030: 	addl	$0x100, %r10d
    00000037: 	cmpl	%r13d, %r10d
    0000003a: 	jg	.Ltmp1646 # Offset: 58
    00000040: 	movl	$0x800, %ebx
    00000045: 	movl	$0x1000, %r11d
    0000004b: 	movl	$0x100, %ecx
.Ltmp1654:
    00000050: 	cmpq	$0xf, %rcx
    00000054: 	movl	$0x8, %esi
    00000059: 	leaq	(,%rcx,8), %rbp
    00000061: 	movq	%rcx, %rdx
    00000064: 	seta	%r14b
    00000068: 	testq	%rcx, %rcx
    0000006b: 	cmoveq	%rsi, %rbp
    0000006f: 	shlq	$0x4, %rdx
    00000073: 	subq	$0x8, %rdx
    00000077: 	testq	%rcx, %rcx
    0000007a: 	cmoveq	%rsi, %rdx
    0000007e: 	leaq	(%r8,%rbp), %rsi
    00000082: 	addq	%rax, %rdx
    00000085: 	cmpq	%rdx, %r8
    00000088: 	setae	%dl
    0000008b: 	cmpq	%rsi, %rax
    0000008e: 	setae	%sil
    00000092: 	orb	%sil, %dl
    00000095: 	je	.Ltmp1647 # Offset: 149
    0000009b: 	testb	%r14b, %r14b
    0000009e: 	je	.Ltmp1647 # Offset: 158
    000000a4: 	testq	%rcx, %rcx
    000000a7: 	movl	$0x1, %r9d
    000000ad: 	cmovneq	%rcx, %r9
    000000b1: 	xorl	%edx, %edx
    000000b3: 	xorl	%esi, %esi
    000000b5: 	movq	%r9, %r15
    000000b8: 	shrq	%r15
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1648:
    000000c0: 	movupd	(%r8,%rdx), %xmm0
    000000c6: 	addq	$0x1, %rsi
    000000ca: 	movlpd	%xmm0, (%rax,%rdx,2)
    000000cf: 	movhpd	%xmm0, 0x10(%rax,%rdx,2)
    000000d5: 	addq	$0x10, %rdx
    000000d9: 	cmpq	%rsi, %r15
    000000dc: 	jne	.Ltmp1648 # Offset: 220
    000000de: 	movq	%r9, %r15
    000000e1: 	andq	$-0x2, %r15
    000000e5: 	movq	%r15, %rdx
    000000e8: 	leaq	(%r8,%r15,8), %rsi
    000000ec: 	shlq	$0x4, %rdx
    000000f0: 	addq	%rax, %rdx
    000000f3: 	cmpq	%r15, %r9
    000000f6: 	je	.Ltmp1649 # Offset: 246
    000000f8: 	movsd	(%rsi), %xmm0
    000000fc: 	movsd	%xmm0, (%rdx)
.Ltmp1649:
    00000100: 	movq	%rcx, %rdx
    00000103: 	movl	$0x10, %esi
    00000108: 	leaq	0x8(%rax), %r9
    0000010c: 	shlq	$0x4, %rdx
    00000110: 	testq	%rcx, %rcx
    00000113: 	cmoveq	%rsi, %rdx
    00000117: 	addq	%rax, %rdx
    0000011a: 	cmpq	%rdx, %rdi
    0000011d: 	setae	%dl
    00000120: 	addq	%rdi, %rbp
    00000123: 	cmpq	%rbp, %r9
    00000126: 	setae	%sil
    0000012a: 	orb	%sil, %dl
    0000012d: 	je	.Ltmp1650 # Offset: 301
    00000133: 	testb	%r14b, %r14b
    00000136: 	je	.Ltmp1650 # Offset: 310
    0000013c: 	testq	%rcx, %rcx
    0000013f: 	movl	$0x1, %esi
    00000144: 	cmoveq	%rsi, %rcx
    00000148: 	xorl	%edx, %edx
    0000014a: 	xorl	%esi, %esi
    0000014c: 	movq	%rcx, %rbp
    0000014f: 	shrq	%rbp
    00000152: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1651:
    00000158: 	movupd	(%rdi,%rdx), %xmm0
    0000015d: 	addq	$0x1, %rsi
    00000161: 	movlpd	%xmm0, 0x8(%rax,%rdx,2)
    00000167: 	movhpd	%xmm0, 0x18(%rax,%rdx,2)
    0000016d: 	addq	$0x10, %rdx
    00000171: 	cmpq	%rsi, %rbp
    00000174: 	jne	.Ltmp1651 # Offset: 372
    00000176: 	movq	%rcx, %rbp
    00000179: 	andq	$-0x2, %rbp
    0000017d: 	movq	%rbp, %rdx
    00000180: 	leaq	(%rdi,%rbp,8), %rsi
    00000184: 	shlq	$0x4, %rdx
    00000188: 	addq	%r9, %rdx
    0000018b: 	cmpq	%rbp, %rcx
    0000018e: 	je	.Ltmp1652 # Offset: 398
    00000190: 	movsd	(%rsi), %xmm0
    00000194: 	movsd	%xmm0, (%rdx)
.Ltmp1652:
    00000198: 	addq	%r11, %rax
    0000019b: 	addq	%rbx, %r8
    0000019e: 	addq	%rbx, %rdi
    000001a1: 	subl	$0x100, %r12d
    000001a8: 	cmpl	%r13d, %r10d
    000001ab: 	jl	.Ltmp1653 # Offset: 427
    000001b1: 	popq	%rbx
    000001b2: 	popq	%rbp
    000001b3: 	popq	%r12
    000001b5: 	popq	%r13
    000001b7: 	popq	%r14
    000001b9: 	popq	%r15
    000001bb: 	retq # Offset: 443
    000001bc: 	nopl	(%rax) # Size: 4
.Ltmp1646:
    000001c0: 	leal	(%r12,%r12), %r11d
    000001c4: 	movslq	%r12d, %rcx
    000001c7: 	movslq	%r11d, %r11
    000001ca: 	leaq	(,%rcx,8), %rbx
    000001d2: 	shlq	$0x3, %r11
    000001d6: 	testq	%rcx, %rcx
    000001d9: 	jne	.Ltmp1654 # Offset: 473
    000001df: 	jmp	.Ltmp1652 # Offset: 479
    000001e1: 	nopl	(%rax) # Size: 7
.Ltmp1650:
    000001e8: 	xorl	%edx, %edx
    000001ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1655:
    000001f0: 	movsd	(%rdi,%rdx,8), %xmm0
    000001f5: 	addq	$0x1, %rdx
    000001f9: 	addq	$0x10, %r9
    000001fd: 	movsd	%xmm0, -0x10(%r9)
    00000203: 	cmpq	%rcx, %rdx
    00000206: 	jb	.Ltmp1655 # Offset: 518
    00000208: 	jmp	.Ltmp1652 # Offset: 520
    0000020a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1647:
    00000210: 	movq	%rax, %rsi
    00000213: 	xorl	%edx, %edx
    00000215: 	nopl	(%rax) # Size: 3
.Ltmp1656:
    00000218: 	movsd	(%r8,%rdx,8), %xmm0
    0000021e: 	addq	$0x1, %rdx
    00000222: 	addq	$0x10, %rsi
    00000226: 	movsd	%xmm0, -0x10(%rsi)
    0000022b: 	cmpq	%rdx, %rcx
    0000022e: 	ja	.Ltmp1656 # Offset: 558
    00000230: 	jmp	.Ltmp1649 # Offset: 560
.Ltmp1645:
    00000235: 	retq # Offset: 565
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version4IdEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version5IdEvPT_PKS0_S3_i" after disassembly {
  Number      : 174
  State       : disassembled
  Address     : 0x21070
  Size        : 0x208
  MaxSize     : 0x210
  Offset      : 0x21070
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version5IdEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0173:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp1657 # Offset: 6
    0000000c: 	pushq	%r15
    0000000e: 	movq	%rdi, %rax
    00000011: 	xorl	%r11d, %r11d
    00000014: 	movq	%rdx, %rdi
    00000017: 	pushq	%r14
    00000019: 	movl	$0x8, %r15d
    0000001f: 	movl	%ecx, %r14d
    00000022: 	pushq	%r13
    00000024: 	pushq	%r12
    00000026: 	pushq	%rbp
    00000027: 	movl	%ecx, %ebp
    00000029: 	pushq	%rbx
    0000002a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1665:
    00000030: 	addl	$0x100, %r11d
    00000037: 	cmpl	%r14d, %r11d
    0000003a: 	jg	.Ltmp1658 # Offset: 58
    00000040: 	movl	$0x800, %r9d
    00000046: 	movl	$0x1000, %r10d
    0000004c: 	movl	$0x100, %ecx
.Ltmp1666:
    00000051: 	movslq	%ecx, %r8
    00000054: 	movq	%r8, %rdx
    00000057: 	leaq	(,%r8,8), %rbx
    0000005f: 	shlq	$0x4, %rdx
    00000063: 	subq	$0x8, %rdx
    00000067: 	testl	%ecx, %ecx
    00000069: 	cmovleq	%r15, %rdx
    0000006d: 	addq	%rax, %rdx
    00000070: 	cmpq	%rdx, %rsi
    00000073: 	movq	%r15, %rdx
    00000076: 	setae	%r12b
    0000007a: 	testl	%ecx, %ecx
    0000007c: 	cmovgq	%rbx, %rdx
    00000080: 	addq	%rsi, %rdx
    00000083: 	cmpq	%rdx, %rax
    00000086: 	setae	%dl
    00000089: 	orb	%r12b, %dl
    0000008c: 	je	.Ltmp1659 # Offset: 140
    00000092: 	cmpl	$0xf, %ecx
    00000095: 	jle	.Ltmp1659 # Offset: 149
    0000009b: 	testl	%ecx, %ecx
    0000009d: 	movl	$0x1, %r12d
    000000a3: 	cmovgl	%ecx, %r12d
    000000a7: 	xorl	%edx, %edx
    000000a9: 	movl	%r12d, %r13d
    000000ac: 	shrl	%r13d
    000000af: 	shlq	$0x4, %r13
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1660:
    000000b8: 	movupd	(%rsi,%rdx), %xmm0
    000000bd: 	movlpd	%xmm0, (%rax,%rdx,2)
    000000c2: 	movhpd	%xmm0, 0x10(%rax,%rdx,2)
    000000c8: 	addq	$0x10, %rdx
    000000cc: 	cmpq	%rdx, %r13
    000000cf: 	jne	.Ltmp1660 # Offset: 207
    000000d1: 	movl	%r12d, %edx
    000000d4: 	andl	$-0x2, %edx
    000000d7: 	andl	$0x1, %r12d
    000000db: 	je	.Ltmp1661 # Offset: 219
    000000dd: 	movl	%edx, %r12d
    000000e0: 	addl	%edx, %edx
    000000e2: 	movsd	(%rsi,%r12,8), %xmm0
    000000e8: 	movslq	%edx, %rdx
    000000eb: 	movsd	%xmm0, (%rax,%rdx,8)
.Ltmp1661:
    000000f0: 	shlq	$0x4, %r8
    000000f4: 	leaq	0x8(%rax), %rdx
    000000f8: 	leal	-0x1(%rcx), %r12d
    000000fc: 	addq	%rax, %r8
    000000ff: 	cmpq	%r8, %rdi
    00000102: 	setae	%r8b
    00000106: 	addq	%rdi, %rbx
    00000109: 	cmpq	%rbx, %rdx
    0000010c: 	setae	%bl
    0000010f: 	orb	%r8b, %bl
    00000112: 	je	.Ltmp1662 # Offset: 274
    00000118: 	cmpl	$0xe, %r12d
    0000011c: 	jbe	.Ltmp1662 # Offset: 284
    00000122: 	movl	%ecx, %r8d
    00000125: 	xorl	%edx, %edx
    00000127: 	shrl	%r8d
    0000012a: 	shlq	$0x4, %r8
    0000012e: 	nop # Size: 2
.Ltmp1663:
    00000130: 	movupd	(%rdi,%rdx), %xmm0
    00000135: 	movlpd	%xmm0, 0x8(%rax,%rdx,2)
    0000013b: 	movhpd	%xmm0, 0x18(%rax,%rdx,2)
    00000141: 	addq	$0x10, %rdx
    00000145: 	cmpq	%r8, %rdx
    00000148: 	jne	.Ltmp1663 # Offset: 328
    0000014a: 	movl	%ecx, %edx
    0000014c: 	andl	$-0x2, %edx
    0000014f: 	andl	$0x1, %ecx
    00000152: 	je	.Ltmp1664 # Offset: 338
    00000154: 	movl	%edx, %ecx
    00000156: 	leal	0x1(%rdx,%rdx), %edx
    0000015a: 	movsd	(%rdi,%rcx,8), %xmm0
    0000015f: 	movslq	%edx, %rdx
    00000162: 	movsd	%xmm0, (%rax,%rdx,8)
.Ltmp1664:
    00000167: 	addq	%r10, %rax
    0000016a: 	addq	%r9, %rsi
    0000016d: 	addq	%r9, %rdi
    00000170: 	subl	$0x100, %ebp
    00000176: 	cmpl	%r14d, %r11d
    00000179: 	jl	.Ltmp1665 # Offset: 377
    0000017f: 	popq	%rbx
    00000180: 	popq	%rbp
    00000181: 	popq	%r12
    00000183: 	popq	%r13
    00000185: 	popq	%r14
    00000187: 	popq	%r15
    00000189: 	retq # Offset: 393
    0000018a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1658:
    00000190: 	leal	(%rbp,%rbp), %r10d
    00000195: 	movslq	%ebp, %r9
    00000198: 	movl	%ebp, %ecx
    0000019a: 	movslq	%r10d, %r10
    0000019d: 	shlq	$0x3, %r9
    000001a1: 	shlq	$0x3, %r10
    000001a5: 	testl	%ebp, %ebp
    000001a7: 	jg	.Ltmp1666 # Offset: 423
    000001ad: 	jmp	.Ltmp1664 # Offset: 429
    000001af: 	nop # Size: 1
.Ltmp1662:
    000001b0: 	movq	%rdi, %rcx
    000001b3: 	leaq	0x8(%rdi,%r12,8), %r8
    000001b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1667:
    000001c0: 	movsd	(%rcx), %xmm0
    000001c4: 	addq	$0x8, %rcx
    000001c8: 	addq	$0x10, %rdx
    000001cc: 	movsd	%xmm0, -0x10(%rdx)
    000001d1: 	cmpq	%rcx, %r8
    000001d4: 	jne	.Ltmp1667 # Offset: 468
    000001d6: 	jmp	.Ltmp1664 # Offset: 470
    000001d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1659:
    000001e0: 	xorl	%edx, %edx
    000001e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1668:
    000001e8: 	movsd	(%rsi,%rdx,8), %xmm0
    000001ed: 	movq	%rdx, %r12
    000001f0: 	addq	$0x1, %rdx
    000001f4: 	shlq	$0x4, %r12
    000001f8: 	movsd	%xmm0, (%rax,%r12)
    000001fe: 	cmpl	%edx, %ecx
    00000200: 	jg	.Ltmp1668 # Offset: 512
    00000202: 	jmp	.Ltmp1661 # Offset: 514
.Ltmp1657:
    00000207: 	retq # Offset: 519
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version5IdEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version6IdEvPT_PKS0_S3_i" after disassembly {
  Number      : 175
  State       : disassembled
  Address     : 0x21280
  Size        : 0x215
  MaxSize     : 0x220
  Offset      : 0x21280
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version6IdEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0174:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp1669 # Offset: 6
    0000000c: 	pushq	%r15
    0000000e: 	movq	%rdi, %rax
    00000011: 	xorl	%r11d, %r11d
    00000014: 	pushq	%r14
    00000016: 	movl	%ecx, %r14d
    00000019: 	pushq	%r13
    0000001b: 	pushq	%r12
    0000001d: 	pushq	%rbp
    0000001e: 	movl	%ecx, %ebp
    00000020: 	pushq	%rbx
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp1677:
    00000028: 	addl	$0x100, %r11d
    0000002f: 	cmpl	%r14d, %r11d
    00000032: 	jg	.Ltmp1670 # Offset: 50
    00000038: 	movl	$0x800, %r10d
    0000003e: 	movl	$0x1000, %ebx
    00000043: 	movl	$0x100, %edi
.Ltmp1678:
    00000048: 	movslq	%edi, %r9
    0000004b: 	movl	$0x8, %r15d
    00000051: 	movq	%r9, %rcx
    00000054: 	leaq	(,%r9,8), %r12
    0000005c: 	shlq	$0x4, %rcx
    00000060: 	subq	$0x8, %rcx
    00000064: 	testl	%edi, %edi
    00000066: 	cmovleq	%r15, %rcx
    0000006a: 	addq	%rax, %rcx
    0000006d: 	cmpq	%rcx, %rsi
    00000070: 	movl	$0x8, %ecx
    00000075: 	setae	%r8b
    00000079: 	testl	%edi, %edi
    0000007b: 	cmovgq	%r12, %rcx
    0000007f: 	addq	%rsi, %rcx
    00000082: 	cmpq	%rcx, %rax
    00000085: 	setae	%cl
    00000088: 	orb	%cl, %r8b
    0000008b: 	je	.Ltmp1671 # Offset: 139
    00000091: 	cmpl	$0xf, %edi
    00000094: 	jle	.Ltmp1671 # Offset: 148
    0000009a: 	testl	%edi, %edi
    0000009c: 	movl	$0x1, %r13d
    000000a2: 	cmovgl	%edi, %r13d
    000000a6: 	xorl	%ecx, %ecx
    000000a8: 	movl	%r13d, %r8d
    000000ab: 	shrl	%r8d
    000000ae: 	shlq	$0x4, %r8
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1672:
    000000b8: 	movupd	(%rsi,%rcx), %xmm0
    000000bd: 	movlpd	%xmm0, (%rax,%rcx,2)
    000000c2: 	movhpd	%xmm0, 0x10(%rax,%rcx,2)
    000000c8: 	addq	$0x10, %rcx
    000000cc: 	cmpq	%r8, %rcx
    000000cf: 	jne	.Ltmp1672 # Offset: 207
    000000d1: 	movl	%r13d, %r15d
    000000d4: 	andl	$-0x2, %r15d
    000000d8: 	movl	%r15d, %r8d
    000000db: 	movq	%r8, %rcx
    000000de: 	shlq	$0x4, %rcx
    000000e2: 	addq	%rax, %rcx
    000000e5: 	cmpl	%r15d, %r13d
    000000e8: 	je	.Ltmp1673 # Offset: 232
    000000ea: 	movsd	(%rsi,%r8,8), %xmm0
    000000f0: 	movsd	%xmm0, (%rcx)
.Ltmp1673:
    000000f4: 	shlq	$0x4, %r9
    000000f8: 	leaq	0x8(%rax), %r8
    000000fc: 	leal	-0x1(%rdi), %ecx
    000000ff: 	addq	%rax, %r9
    00000102: 	cmpq	%r9, %rdx
    00000105: 	setae	%r9b
    00000109: 	addq	%rdx, %r12
    0000010c: 	cmpq	%r12, %r8
    0000010f: 	setae	%r12b
    00000113: 	orb	%r12b, %r9b
    00000116: 	je	.Ltmp1674 # Offset: 278
    0000011c: 	cmpl	$0xe, %ecx
    0000011f: 	jbe	.Ltmp1674 # Offset: 287
    00000125: 	movl	%edi, %r9d
    00000128: 	xorl	%ecx, %ecx
    0000012a: 	shrl	%r9d
    0000012d: 	shlq	$0x4, %r9
    00000131: 	nopl	(%rax) # Size: 7
.Ltmp1675:
    00000138: 	movupd	(%rdx,%rcx), %xmm0
    0000013d: 	movlpd	%xmm0, 0x8(%rax,%rcx,2)
    00000143: 	movhpd	%xmm0, 0x18(%rax,%rcx,2)
    00000149: 	addq	$0x10, %rcx
    0000014d: 	cmpq	%r9, %rcx
    00000150: 	jne	.Ltmp1675 # Offset: 336
    00000152: 	movl	%edi, %r12d
    00000155: 	andl	$-0x2, %r12d
    00000159: 	movl	%r12d, %r9d
    0000015c: 	movq	%r9, %rcx
    0000015f: 	shlq	$0x4, %rcx
    00000163: 	addq	%r8, %rcx
    00000166: 	cmpl	%edi, %r12d
    00000169: 	je	.Ltmp1676 # Offset: 361
    0000016b: 	movsd	(%rdx,%r9,8), %xmm0
    00000171: 	movsd	%xmm0, (%rcx)
.Ltmp1676:
    00000175: 	addq	%rbx, %rax
    00000178: 	addq	%r10, %rsi
    0000017b: 	addq	%r10, %rdx
    0000017e: 	subl	$0x100, %ebp
    00000184: 	cmpl	%r14d, %r11d
    00000187: 	jl	.Ltmp1677 # Offset: 391
    0000018d: 	popq	%rbx
    0000018e: 	popq	%rbp
    0000018f: 	popq	%r12
    00000191: 	popq	%r13
    00000193: 	popq	%r14
    00000195: 	popq	%r15
    00000197: 	retq # Offset: 407
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1670:
    000001a0: 	leal	(%rbp,%rbp), %ebx
    000001a4: 	movslq	%ebp, %r10
    000001a7: 	movl	%ebp, %edi
    000001a9: 	movslq	%ebx, %rbx
    000001ac: 	shlq	$0x3, %r10
    000001b0: 	shlq	$0x3, %rbx
    000001b4: 	testl	%ebp, %ebp
    000001b6: 	jg	.Ltmp1678 # Offset: 438
    000001bc: 	jmp	.Ltmp1676 # Offset: 444
    000001be: 	nop # Size: 2
.Ltmp1674:
    000001c0: 	shlq	$0x4, %rcx
    000001c4: 	movq	%rdx, %rdi
    000001c7: 	leaq	0x18(%rax,%rcx), %rcx
    000001cc: 	nopl	(%rax) # Size: 4
.Ltmp1679:
    000001d0: 	movsd	(%rdi), %xmm0
    000001d4: 	addq	$0x10, %r8
    000001d8: 	addq	$0x8, %rdi
    000001dc: 	movsd	%xmm0, -0x10(%r8)
    000001e2: 	cmpq	%rcx, %r8
    000001e5: 	jne	.Ltmp1679 # Offset: 485
    000001e7: 	jmp	.Ltmp1676 # Offset: 487
    000001e9: 	nopl	(%rax) # Size: 7
.Ltmp1671:
    000001f0: 	movq	%rax, %r8
    000001f3: 	xorl	%ecx, %ecx
    000001f5: 	nopl	(%rax) # Size: 3
.Ltmp1680:
    000001f8: 	movsd	(%rsi,%rcx,8), %xmm0
    000001fd: 	addq	$0x1, %rcx
    00000201: 	addq	$0x10, %r8
    00000205: 	movsd	%xmm0, -0x10(%r8)
    0000020b: 	cmpl	%ecx, %edi
    0000020d: 	jg	.Ltmp1680 # Offset: 525
    0000020f: 	jmp	.Ltmp1673 # Offset: 527
.Ltmp1669:
    00000214: 	retq # Offset: 532
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version6IdEvPT_PKS0_S3_i"

Binary Function "_Z23interleave3to3_version1IdEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 176
  State       : disassembled
  Address     : 0x214a0
  Size        : 0x151
  MaxSize     : 0x160
  Offset      : 0x214a0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version1IdEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0175:
    00000000: 	endbr64
    00000004: 	testl	%r8d, %r8d
    00000007: 	jle	.Ltmp1681 # Offset: 7
    0000000d: 	movslq	%r8d, %rax
    00000010: 	movq	%rdx, %r9
    00000013: 	pushq	%rbx
    00000014: 	leaq	(,%rax,8), %rdx
    0000001c: 	leaq	(%rax,%rax,2), %rax
    00000020: 	leaq	(%rdi,%rax,8), %r11
    00000024: 	leaq	(%rsi,%rdx), %rax
    00000028: 	cmpq	%rax, %rdi
    0000002b: 	setae	%al
    0000002e: 	cmpq	%r11, %rsi
    00000031: 	setae	%r10b
    00000035: 	orl	%r10d, %eax
    00000038: 	leaq	(%r9,%rdx), %r10
    0000003c: 	cmpq	%r10, %rdi
    0000003f: 	setae	%r10b
    00000043: 	cmpq	%r11, %r9
    00000046: 	setae	%bl
    00000049: 	orl	%ebx, %r10d
    0000004c: 	andl	%r10d, %eax
    0000004f: 	leal	-0x1(%r8), %r10d
    00000053: 	cmpl	$0x1, %r10d
    00000057: 	seta	%r10b
    0000005b: 	testb	%r10b, %al
    0000005e: 	je	.Ltmp1682 # Offset: 94
    00000064: 	addq	%rcx, %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	setae	%al
    0000006d: 	cmpq	%r11, %rcx
    00000070: 	setae	%dl
    00000073: 	orb	%dl, %al
    00000075: 	je	.Ltmp1682 # Offset: 117
    0000007b: 	movl	%r8d, %r10d
    0000007e: 	movq	%rdi, %rdx
    00000081: 	xorl	%eax, %eax
    00000083: 	shrl	%r10d
    00000086: 	shlq	$0x4, %r10
    0000008a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1683:
    00000090: 	movupd	(%rsi,%rax), %xmm1
    00000095: 	movupd	(%r9,%rax), %xmm0
    0000009b: 	addq	$0x30, %rdx
    0000009f: 	movupd	(%rcx,%rax), %xmm2
    000000a4: 	addq	$0x10, %rax
    000000a8: 	movapd	%xmm1, %xmm3
    000000ac: 	movapd	%xmm1, %xmm4
    000000b0: 	unpcklpd	%xmm0, %xmm3
    000000b4: 	movsd	%xmm2, %xmm4
    000000b8: 	shufpd	$0x1, %xmm1, %xmm0
    000000bd: 	movsd	%xmm0, %xmm2
    000000c1: 	movups	%xmm3, -0x30(%rdx)
    000000c5: 	movups	%xmm4, -0x20(%rdx)
    000000c9: 	movups	%xmm2, -0x10(%rdx)
    000000cd: 	cmpq	%rax, %r10
    000000d0: 	jne	.Ltmp1683 # Offset: 208
    000000d2: 	movl	%r8d, %eax
    000000d5: 	andl	$-0x2, %eax
    000000d8: 	andl	$0x1, %r8d
    000000dc: 	je	.Ltmp1684 # Offset: 220
    000000de: 	movl	%eax, %edx
    000000e0: 	leal	(%rax,%rax,2), %eax
    000000e3: 	movsd	(%rsi,%rdx,8), %xmm0
    000000e8: 	cltq
    000000ea: 	movsd	%xmm0, (%rdi,%rax,8)
    000000ef: 	movsd	(%r9,%rdx,8), %xmm0
    000000f5: 	addq	$0x1, %rax
    000000f9: 	movsd	%xmm0, (%rdi,%rax,8)
    000000fe: 	movsd	(%rcx,%rdx,8), %xmm0
    00000103: 	movsd	%xmm0, 0x8(%rdi,%rax,8)
.Ltmp1684:
    00000109: 	popq	%rbx
    0000010a: 	retq # Offset: 266
    0000010b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1682:
    00000110: 	movl	%r8d, %r8d
    00000113: 	xorl	%eax, %eax
    00000115: 	nopl	(%rax) # Size: 3
.Ltmp1685:
    00000118: 	movsd	(%rsi,%rax,8), %xmm0
    0000011d: 	addq	$0x18, %rdi
    00000121: 	movsd	%xmm0, -0x18(%rdi)
    00000126: 	movsd	(%r9,%rax,8), %xmm0
    0000012c: 	movsd	%xmm0, -0x10(%rdi)
    00000131: 	movsd	(%rcx,%rax,8), %xmm0
    00000136: 	addq	$0x1, %rax
    0000013a: 	movsd	%xmm0, -0x8(%rdi)
    0000013f: 	cmpq	%rax, %r8
    00000142: 	jne	.Ltmp1685 # Offset: 322
    00000144: 	popq	%rbx
    00000145: 	retq # Offset: 325
    00000146: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1681:
    00000150: 	retq # Offset: 336
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version1IdEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version2IdEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 177
  State       : disassembled
  Address     : 0x21600
  Size        : 0x239
  MaxSize     : 0x240
  Offset      : 0x21600
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version2IdEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0176:
    00000000: 	endbr64
    00000004: 	movslq	%r8d, %r8
    00000007: 	testq	%r8, %r8
    0000000a: 	je	.Ltmp1686 # Offset: 10
    00000010: 	leaq	-0x1(%r8), %rax
    00000014: 	pushq	%r12
    00000016: 	movq	%rsi, %r9
    00000019: 	movq	%rdx, %rsi
    0000001c: 	cmpq	$0xe, %rax
    00000020: 	pushq	%rbp
    00000021: 	leaq	(,%r8,8), %rbp
    00000029: 	pushq	%rbx
    0000002a: 	leaq	(%r8,%r8,2), %rbx
    0000002e: 	seta	%r11b
    00000032: 	leaq	(%r9,%rbp), %rdx
    00000036: 	shlq	$0x3, %rbx
    0000003a: 	leaq	-0x10(%rdi,%rbx), %rax
    0000003f: 	cmpq	%rax, %r9
    00000042: 	setae	%al
    00000045: 	cmpq	%rdx, %rdi
    00000048: 	setae	%dl
    0000004b: 	orb	%dl, %al
    0000004d: 	je	.Ltmp1687 # Offset: 77
    00000053: 	testb	%r11b, %r11b
    00000056: 	je	.Ltmp1687 # Offset: 86
    0000005c: 	movq	%r8, %r12
    0000005f: 	leaq	0x18(%rdi), %rdx
    00000063: 	xorl	%eax, %eax
    00000065: 	shrq	%r12
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1688:
    00000070: 	movq	%rax, %r10
    00000073: 	addq	$0x1, %rax
    00000077: 	addq	$0x30, %rdx
    0000007b: 	shlq	$0x4, %r10
    0000007f: 	movupd	(%r9,%r10), %xmm0
    00000085: 	movlpd	%xmm0, -0x48(%rdx)
    0000008a: 	movhpd	%xmm0, -0x30(%rdx)
    0000008f: 	cmpq	%r12, %rax
    00000092: 	jne	.Ltmp1688 # Offset: 146
    00000094: 	movq	%r8, %r10
    00000097: 	andq	$-0x2, %r10
    0000009b: 	leaq	(%r10,%r10,2), %rax
    0000009f: 	leaq	(%r9,%r10,8), %rdx
    000000a3: 	leaq	(%rdi,%rax,8), %rax
    000000a7: 	cmpq	%r10, %r8
    000000aa: 	je	.Ltmp1689 # Offset: 170
    000000ac: 	movsd	(%rdx), %xmm0
    000000b0: 	movsd	%xmm0, (%rax)
.Ltmp1689:
    000000b4: 	leaq	-0x8(%rdi,%rbx), %rax
    000000b9: 	leaq	(%rsi,%rbp), %rdx
    000000bd: 	cmpq	%rax, %rsi
    000000c0: 	leaq	0x8(%rdi), %r10
    000000c4: 	setae	%al
    000000c7: 	cmpq	%rdx, %r10
    000000ca: 	setae	%dl
    000000cd: 	orb	%dl, %al
    000000cf: 	je	.Ltmp1690 # Offset: 207
    000000d5: 	movq	%r8, %r12
    000000d8: 	leaq	0x20(%rdi), %rdx
    000000dc: 	xorl	%eax, %eax
    000000de: 	shrq	%r12
    000000e1: 	testb	%r11b, %r11b
    000000e4: 	je	.Ltmp1690 # Offset: 228
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1691:
    000000f0: 	movq	%rax, %r9
    000000f3: 	addq	$0x1, %rax
    000000f7: 	addq	$0x30, %rdx
    000000fb: 	shlq	$0x4, %r9
    000000ff: 	movupd	(%rsi,%r9), %xmm0
    00000105: 	movlpd	%xmm0, -0x48(%rdx)
    0000010a: 	movhpd	%xmm0, -0x30(%rdx)
    0000010f: 	cmpq	%r12, %rax
    00000112: 	jne	.Ltmp1691 # Offset: 274
    00000114: 	movq	%r8, %r9
    00000117: 	andq	$-0x2, %r9
    0000011b: 	leaq	(%r9,%r9,2), %rax
    0000011f: 	leaq	(%rsi,%r9,8), %rdx
    00000123: 	leaq	(%r10,%rax,8), %rax
    00000127: 	cmpq	%r9, %r8
    0000012a: 	je	.Ltmp1692 # Offset: 298
    0000012c: 	movsd	(%rdx), %xmm0
    00000130: 	movsd	%xmm0, (%rax)
.Ltmp1692:
    00000134: 	addq	%rdi, %rbx
    00000137: 	leaq	0x10(%rdi), %r9
    0000013b: 	cmpq	%rbx, %rcx
    0000013e: 	setae	%al
    00000141: 	addq	%rcx, %rbp
    00000144: 	cmpq	%rbp, %r9
    00000147: 	setae	%dl
    0000014a: 	orb	%dl, %al
    0000014c: 	je	.Ltmp1693 # Offset: 332
    00000152: 	movq	%r8, %r10
    00000155: 	leaq	0x28(%rdi), %rdx
    00000159: 	xorl	%eax, %eax
    0000015b: 	shrq	%r10
    0000015e: 	testb	%r11b, %r11b
    00000161: 	je	.Ltmp1693 # Offset: 353
    00000167: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1694:
    00000170: 	movq	%rax, %rsi
    00000173: 	addq	$0x1, %rax
    00000177: 	addq	$0x30, %rdx
    0000017b: 	shlq	$0x4, %rsi
    0000017f: 	movupd	(%rcx,%rsi), %xmm0
    00000184: 	movlpd	%xmm0, -0x48(%rdx)
    00000189: 	movhpd	%xmm0, -0x30(%rdx)
    0000018e: 	cmpq	%rax, %r10
    00000191: 	jne	.Ltmp1694 # Offset: 401
    00000193: 	movq	%r8, %rsi
    00000196: 	andq	$-0x2, %rsi
    0000019a: 	leaq	(%rsi,%rsi,2), %rax
    0000019e: 	leaq	(%rcx,%rsi,8), %rdx
    000001a2: 	leaq	(%r9,%rax,8), %rax
    000001a6: 	cmpq	%rsi, %r8
    000001a9: 	je	.Ltmp1695 # Offset: 425
    000001ab: 	movsd	(%rdx), %xmm0
    000001af: 	movsd	%xmm0, (%rax)
.Ltmp1695:
    000001b3: 	popq	%rbx
    000001b4: 	popq	%rbp
    000001b5: 	popq	%r12
    000001b7: 	retq # Offset: 439
    000001b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1687:
    000001c0: 	movq	%rdi, %rdx
    000001c3: 	xorl	%eax, %eax
    000001c5: 	nopl	(%rax) # Size: 3
.Ltmp1696:
    000001c8: 	movsd	(%r9,%rax,8), %xmm0
    000001ce: 	addq	$0x1, %rax
    000001d2: 	addq	$0x18, %rdx
    000001d6: 	movsd	%xmm0, -0x18(%rdx)
    000001db: 	cmpq	%rax, %r8
    000001de: 	jne	.Ltmp1696 # Offset: 478
    000001e0: 	jmp	.Ltmp1689 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp1690:
    000001e8: 	xorl	%eax, %eax
    000001ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1697:
    000001f0: 	movsd	(%rsi,%rax,8), %xmm0
    000001f5: 	addq	$0x1, %rax
    000001f9: 	addq	$0x18, %r10
    000001fd: 	movsd	%xmm0, -0x18(%r10)
    00000203: 	cmpq	%rax, %r8
    00000206: 	jne	.Ltmp1697 # Offset: 518
    00000208: 	jmp	.Ltmp1692 # Offset: 520
    0000020d: 	nopl	(%rax) # Size: 3
.Ltmp1693:
    00000210: 	xorl	%eax, %eax
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1698:
    00000218: 	movsd	(%rcx,%rax,8), %xmm0
    0000021d: 	addq	$0x1, %rax
    00000221: 	addq	$0x18, %r9
    00000225: 	movsd	%xmm0, -0x18(%r9)
    0000022b: 	cmpq	%rax, %r8
    0000022e: 	jne	.Ltmp1698 # Offset: 558
    00000230: 	popq	%rbx
    00000231: 	popq	%rbp
    00000232: 	popq	%r12
    00000234: 	retq # Offset: 564
    00000235: 	nopl	(%rax) # Size: 3
.Ltmp1686:
    00000238: 	retq # Offset: 568
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version2IdEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version3IdEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 178
  State       : disassembled
  Address     : 0x21840
  Size        : 0x1c1
  MaxSize     : 0x1d0
  Offset      : 0x21840
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version3IdEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0177:
    00000000: 	endbr64
    00000004: 	testl	%r8d, %r8d
    00000007: 	jle	.Ltmp1699 # Offset: 7
    0000000d: 	movslq	%r8d, %rax
    00000010: 	pushq	%rbp
    00000011: 	movq	%rdx, %r9
    00000014: 	leal	-0x1(%r8), %r10d
    00000018: 	leaq	(%rax,%rax,2), %r11
    0000001c: 	pushq	%rbx
    0000001d: 	leaq	(,%rax,8), %rbx
    00000025: 	shlq	$0x3, %r11
    00000029: 	leaq	(%rsi,%rbx), %rax
    0000002d: 	leaq	-0x8(%rdi,%r11), %rbp
    00000032: 	cmpq	%rax, %rdi
    00000035: 	setae	%dl
    00000038: 	cmpq	%rbp, %rsi
    0000003b: 	setae	%al
    0000003e: 	orl	%eax, %edx
    00000040: 	leaq	(%r9,%rbx), %rax
    00000044: 	cmpq	%rax, %rdi
    00000047: 	setae	%al
    0000004a: 	cmpq	%rbp, %r9
    0000004d: 	setae	%bpl
    00000051: 	orl	%ebp, %eax
    00000053: 	testb	%al, %dl
    00000055: 	je	.Ltmp1700 # Offset: 85
    0000005b: 	cmpl	$0x8, %r10d
    0000005f: 	jbe	.Ltmp1700 # Offset: 95
    00000065: 	movl	%r8d, %ebp
    00000068: 	movq	%rdi, %rax
    0000006b: 	xorl	%edx, %edx
    0000006d: 	shrl	%ebp
    0000006f: 	shlq	$0x4, %rbp
    00000073: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1701:
    00000078: 	movupd	(%rsi,%rdx), %xmm1
    0000007d: 	movupd	(%r9,%rdx), %xmm0
    00000083: 	addq	$0x10, %rdx
    00000087: 	addq	$0x30, %rax
    0000008b: 	movlpd	%xmm1, -0x30(%rax)
    00000090: 	movhpd	%xmm1, -0x18(%rax)
    00000095: 	movlpd	%xmm0, -0x28(%rax)
    0000009a: 	movhpd	%xmm0, -0x10(%rax)
    0000009f: 	cmpq	%rbp, %rdx
    000000a2: 	jne	.Ltmp1701 # Offset: 162
    000000a4: 	movl	%r8d, %eax
    000000a7: 	andl	$-0x2, %eax
    000000aa: 	testb	$0x1, %r8b
    000000ae: 	je	.Ltmp1702 # Offset: 174
    000000b0: 	movl	%eax, %edx
    000000b2: 	leal	(%rax,%rax,2), %eax
    000000b5: 	movsd	(%rsi,%rdx,8), %xmm0
    000000ba: 	cltq
    000000bc: 	movsd	%xmm0, (%rdi,%rax,8)
    000000c1: 	movsd	(%r9,%rdx,8), %xmm0
    000000c7: 	movsd	%xmm0, 0x8(%rdi,%rax,8)
.Ltmp1702:
    000000cd: 	addq	%rdi, %r11
    000000d0: 	leaq	0x10(%rdi), %rax
    000000d4: 	cmpq	%r11, %rcx
    000000d7: 	setae	%dl
    000000da: 	addq	%rcx, %rbx
    000000dd: 	cmpq	%rbx, %rax
    000000e0: 	setae	%sil
    000000e4: 	orb	%sil, %dl
    000000e7: 	je	.Ltmp1703 # Offset: 231
    000000ed: 	cmpl	$0xe, %r10d
    000000f1: 	jbe	.Ltmp1703 # Offset: 241
    000000f7: 	movl	%r8d, %esi
    000000fa: 	movq	%rcx, %rdx
    000000fd: 	shrl	%esi
    000000ff: 	subl	$0x1, %esi
    00000102: 	shlq	$0x4, %rsi
    00000106: 	leaq	0x10(%rcx,%rsi), %rsi
    0000010b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1704:
    00000110: 	movupd	(%rdx), %xmm0
    00000114: 	addq	$0x10, %rdx
    00000118: 	addq	$0x30, %rax
    0000011c: 	movlpd	%xmm0, -0x30(%rax)
    00000121: 	movhpd	%xmm0, -0x18(%rax)
    00000126: 	cmpq	%rdx, %rsi
    00000129: 	jne	.Ltmp1704 # Offset: 297
    0000012b: 	movl	%r8d, %eax
    0000012e: 	andl	$-0x2, %eax
    00000131: 	andl	$0x1, %r8d
    00000135: 	je	.Ltmp1705 # Offset: 309
    00000137: 	movl	%eax, %edx
    00000139: 	leal	(%rax,%rax,2), %eax
    0000013c: 	movsd	(%rcx,%rdx,8), %xmm0
    00000141: 	cltq
    00000143: 	movsd	%xmm0, 0x10(%rdi,%rax,8)
.Ltmp1705:
    00000149: 	popq	%rbx
    0000014a: 	popq	%rbp
    0000014b: 	retq # Offset: 331
    0000014c: 	nopl	(%rax) # Size: 4
.Ltmp1700:
    00000150: 	movq	%rdi, %rdx
    00000153: 	movl	%r8d, %ebp
    00000156: 	xorl	%eax, %eax
    00000158: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1706:
    00000160: 	movsd	(%rsi,%rax,8), %xmm0
    00000165: 	addq	$0x18, %rdx
    00000169: 	movsd	%xmm0, -0x18(%rdx)
    0000016e: 	movsd	(%r9,%rax,8), %xmm0
    00000174: 	addq	$0x1, %rax
    00000178: 	movsd	%xmm0, -0x10(%rdx)
    0000017d: 	cmpq	%rbp, %rax
    00000180: 	jne	.Ltmp1706 # Offset: 384
    00000182: 	jmp	.Ltmp1702 # Offset: 386
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1703:
    00000190: 	movl	%r10d, %r10d
    00000193: 	leaq	0x8(%rcx,%r10,8), %rdx
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1707:
    000001a0: 	movsd	(%rcx), %xmm0
    000001a4: 	addq	$0x8, %rcx
    000001a8: 	addq	$0x18, %rax
    000001ac: 	movsd	%xmm0, -0x18(%rax)
    000001b1: 	cmpq	%rdx, %rcx
    000001b4: 	jne	.Ltmp1707 # Offset: 436
    000001b6: 	popq	%rbx
    000001b7: 	popq	%rbp
    000001b8: 	retq # Offset: 440
    000001b9: 	nopl	(%rax) # Size: 7
.Ltmp1699:
    000001c0: 	retq # Offset: 448
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version3IdEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version4IdEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 179
  State       : disassembled
  Address     : 0x21a10
  Size        : 0x26e
  MaxSize     : 0x270
  Offset      : 0x21a10
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version4IdEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0178:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r8d, -0xc(%rsp)
    00000013: 	testl	%r8d, %r8d
    00000016: 	jle	.Ltmp1708 # Offset: 22
    0000001c: 	movq	%rsi, %r9
    0000001f: 	movq	%rcx, %r10
    00000022: 	movq	%rdx, %rsi
    00000025: 	movl	%r8d, %r13d
    00000028: 	xorl	%r12d, %r12d
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1716:
    00000030: 	addl	$0xaa, %r12d
    00000037: 	cmpl	-0xc(%rsp), %r12d
    0000003c: 	jg	.Ltmp1709 # Offset: 60
    00000042: 	movl	$0x550, %ebx
    00000047: 	movl	$0xff0, %r14d
    0000004d: 	movl	$0xaa, %ecx
.Ltmp1717:
    00000052: 	movslq	%ecx, %rax
    00000055: 	testl	%ecx, %ecx
    00000057: 	movl	$0x8, %edx
    0000005c: 	movl	$0x10, %r15d
    00000062: 	leaq	(,%rax,8), %rbp
    0000006a: 	leaq	(%rax,%rax,2), %r11
    0000006e: 	cmovgq	%rbp, %rdx
    00000072: 	shlq	$0x3, %r11
    00000076: 	testl	%ecx, %ecx
    00000078: 	leaq	-0x8(%r11), %rax
    0000007c: 	cmovleq	%r15, %rax
    00000080: 	leaq	(%r9,%rdx), %r8
    00000084: 	addq	%rdi, %rax
    00000087: 	cmpq	%r8, %rdi
    0000008a: 	setae	%r15b
    0000008e: 	cmpq	%rax, %r9
    00000091: 	setae	%r8b
    00000095: 	addq	%rsi, %rdx
    00000098: 	orl	%r15d, %r8d
    0000009b: 	cmpq	%rdx, %rdi
    0000009e: 	setae	%dl
    000000a1: 	cmpq	%rax, %rsi
    000000a4: 	setae	%al
    000000a7: 	orl	%edx, %eax
    000000a9: 	testb	%al, %r8b
    000000ac: 	je	.Ltmp1710 # Offset: 172
    000000b2: 	cmpl	$0x9, %ecx
    000000b5: 	jle	.Ltmp1710 # Offset: 181
    000000bb: 	testl	%ecx, %ecx
    000000bd: 	movl	$0x1, %r15d
    000000c3: 	movq	%rdi, %rax
    000000c6: 	cmovgl	%ecx, %r15d
    000000ca: 	xorl	%edx, %edx
    000000cc: 	movl	%r15d, %r8d
    000000cf: 	shrl	%r8d
    000000d2: 	shlq	$0x4, %r8
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1711:
    000000e0: 	movupd	(%r9,%rdx), %xmm1
    000000e6: 	movupd	(%rsi,%rdx), %xmm0
    000000eb: 	addq	$0x10, %rdx
    000000ef: 	addq	$0x30, %rax
    000000f3: 	movlpd	%xmm1, -0x30(%rax)
    000000f8: 	movhpd	%xmm1, -0x18(%rax)
    000000fd: 	movlpd	%xmm0, -0x28(%rax)
    00000102: 	movhpd	%xmm0, -0x10(%rax)
    00000107: 	cmpq	%rdx, %r8
    0000010a: 	jne	.Ltmp1711 # Offset: 266
    0000010c: 	movl	%r15d, %eax
    0000010f: 	andl	$-0x2, %eax
    00000112: 	andl	$0x1, %r15d
    00000116: 	je	.Ltmp1712 # Offset: 278
    00000118: 	movl	%eax, %edx
    0000011a: 	leal	(%rax,%rax,2), %eax
    0000011d: 	movsd	(%r9,%rdx,8), %xmm0
    00000123: 	cltq
    00000125: 	movsd	%xmm0, (%rdi,%rax,8)
    0000012a: 	movsd	(%rsi,%rdx,8), %xmm0
    0000012f: 	movsd	%xmm0, 0x8(%rdi,%rax,8)
.Ltmp1712:
    00000135: 	addq	%rdi, %r11
    00000138: 	leaq	0x10(%rdi), %rax
    0000013c: 	leal	-0x1(%rcx), %edx
    0000013f: 	cmpq	%r11, %r10
    00000142: 	setae	%r8b
    00000146: 	addq	%r10, %rbp
    00000149: 	cmpq	%rbp, %rax
    0000014c: 	setae	%r11b
    00000150: 	orb	%r8b, %r11b
    00000153: 	je	.Ltmp1713 # Offset: 339
    00000159: 	cmpl	$0xe, %edx
    0000015c: 	jbe	.Ltmp1713 # Offset: 348
    00000162: 	movl	%ecx, %r8d
    00000165: 	movq	%r10, %rdx
    00000168: 	shrl	%r8d
    0000016b: 	subl	$0x1, %r8d
    0000016f: 	shlq	$0x4, %r8
    00000173: 	leaq	0x10(%r10,%r8), %r8
    00000178: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1714:
    00000180: 	movupd	(%rdx), %xmm0
    00000184: 	addq	$0x10, %rdx
    00000188: 	addq	$0x30, %rax
    0000018c: 	movlpd	%xmm0, -0x30(%rax)
    00000191: 	movhpd	%xmm0, -0x18(%rax)
    00000196: 	cmpq	%r8, %rdx
    00000199: 	jne	.Ltmp1714 # Offset: 409
    0000019b: 	movl	%ecx, %eax
    0000019d: 	andl	$-0x2, %eax
    000001a0: 	andl	$0x1, %ecx
    000001a3: 	je	.Ltmp1715 # Offset: 419
    000001a5: 	movl	%eax, %edx
    000001a7: 	leal	(%rax,%rax,2), %eax
    000001aa: 	movsd	(%r10,%rdx,8), %xmm0
    000001b0: 	cltq
    000001b2: 	movsd	%xmm0, 0x10(%rdi,%rax,8)
.Ltmp1715:
    000001b8: 	addq	%r14, %rdi
    000001bb: 	addq	%rbx, %r9
    000001be: 	addq	%rbx, %rsi
    000001c1: 	addq	%rbx, %r10
    000001c4: 	subl	$0xaa, %r13d
    000001cb: 	cmpl	-0xc(%rsp), %r12d
    000001d0: 	jl	.Ltmp1716 # Offset: 464
.Ltmp1708:
    000001d6: 	popq	%rbx
    000001d7: 	popq	%rbp
    000001d8: 	popq	%r12
    000001da: 	popq	%r13
    000001dc: 	popq	%r14
    000001de: 	popq	%r15
    000001e0: 	retq # Offset: 480
    000001e1: 	nopl	(%rax) # Size: 7
.Ltmp1709:
    000001e8: 	leal	(%r13,%r13,2), %r14d
    000001ed: 	movslq	%r13d, %rbx
    000001f0: 	movl	%r13d, %ecx
    000001f3: 	movslq	%r14d, %r14
    000001f6: 	shlq	$0x3, %rbx
    000001fa: 	shlq	$0x3, %r14
    000001fe: 	testl	%r13d, %r13d
    00000201: 	jg	.Ltmp1717 # Offset: 513
    00000207: 	jmp	.Ltmp1715 # Offset: 519
    00000209: 	nopl	(%rax) # Size: 7
.Ltmp1713:
    00000210: 	movq	%r10, %rcx
    00000213: 	leaq	0x8(%r10,%rdx,8), %rdx
    00000218: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1718:
    00000220: 	movsd	(%rcx), %xmm0
    00000224: 	addq	$0x8, %rcx
    00000228: 	addq	$0x18, %rax
    0000022c: 	movsd	%xmm0, -0x18(%rax)
    00000231: 	cmpq	%rdx, %rcx
    00000234: 	jne	.Ltmp1718 # Offset: 564
    00000236: 	jmp	.Ltmp1715 # Offset: 566
    00000238: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1710:
    00000240: 	movq	%rdi, %rdx
    00000243: 	xorl	%eax, %eax
    00000245: 	nopl	(%rax) # Size: 3
.Ltmp1719:
    00000248: 	movsd	(%r9,%rax,8), %xmm0
    0000024e: 	addq	$0x18, %rdx
    00000252: 	movsd	%xmm0, -0x18(%rdx)
    00000257: 	movsd	(%rsi,%rax,8), %xmm0
    0000025c: 	addq	$0x1, %rax
    00000260: 	movsd	%xmm0, -0x10(%rdx)
    00000265: 	cmpl	%eax, %ecx
    00000267: 	jg	.Ltmp1719 # Offset: 615
    00000269: 	jmp	.Ltmp1712 # Offset: 617
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version4IdEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version5IdEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 180
  State       : disassembled
  Address     : 0x21c80
  Size        : 0x2f3
  MaxSize     : 0x300
  Offset      : 0x21c80
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version5IdEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0179:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r8d, -0x14(%rsp)
    00000013: 	testl	%r8d, %r8d
    00000016: 	jle	.Ltmp1720 # Offset: 22
    0000001c: 	movq	%rdx, %r10
    0000001f: 	movq	%rcx, %r9
    00000022: 	movl	%r8d, %r12d
    00000025: 	xorl	%ebp, %ebp
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1731:
    00000030: 	addl	$0xaa, %ebp
    00000036: 	cmpl	-0x14(%rsp), %ebp
    0000003a: 	jg	.Ltmp1721 # Offset: 58
    00000040: 	movq	$0xff0, -0x10(%rsp)
    00000049: 	movl	$0x550, %ebx
    0000004e: 	movl	$0xaa, %ecx
.Ltmp1732:
    00000053: 	movslq	%ecx, %rax
    00000056: 	movl	$0x8, %edx
    0000005b: 	leaq	(%rax,%rax,2), %r8
    0000005f: 	leaq	(,%rax,8), %r11
    00000067: 	shlq	$0x3, %r8
    0000006b: 	testl	%ecx, %ecx
    0000006d: 	leaq	-0x10(%r8), %rax
    00000071: 	cmovleq	%rdx, %rax
    00000075: 	addq	%rdi, %rax
    00000078: 	cmpq	%rax, %rsi
    0000007b: 	movl	$0x8, %eax
    00000080: 	setae	%dl
    00000083: 	testl	%ecx, %ecx
    00000085: 	cmovgq	%r11, %rax
    00000089: 	addq	%rsi, %rax
    0000008c: 	cmpq	%rax, %rdi
    0000008f: 	setae	%al
    00000092: 	orb	%dl, %al
    00000094: 	je	.Ltmp1722 # Offset: 148
    0000009a: 	cmpl	$0xf, %ecx
    0000009d: 	jle	.Ltmp1722 # Offset: 157
    000000a3: 	testl	%ecx, %ecx
    000000a5: 	movl	$0x1, %r14d
    000000ab: 	movq	%rsi, %rdx
    000000ae: 	movq	%rdi, %rax
    000000b1: 	cmovgl	%ecx, %r14d
    000000b5: 	movl	%r14d, %r13d
    000000b8: 	shrl	%r13d
    000000bb: 	subl	$0x1, %r13d
    000000bf: 	shlq	$0x4, %r13
    000000c3: 	leaq	0x10(%rsi,%r13), %r13
    000000c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1723:
    000000d0: 	movupd	(%rdx), %xmm0
    000000d4: 	addq	$0x10, %rdx
    000000d8: 	addq	$0x30, %rax
    000000dc: 	movlpd	%xmm0, -0x30(%rax)
    000000e1: 	movhpd	%xmm0, -0x18(%rax)
    000000e6: 	cmpq	%r13, %rdx
    000000e9: 	jne	.Ltmp1723 # Offset: 233
    000000eb: 	movl	%r14d, %eax
    000000ee: 	andl	$-0x2, %eax
    000000f1: 	andl	$0x1, %r14d
    000000f5: 	je	.Ltmp1724 # Offset: 245
    000000f7: 	movl	%eax, %edx
    000000f9: 	leal	(%rax,%rax,2), %eax
    000000fc: 	movsd	(%rsi,%rdx,8), %xmm0
    00000101: 	cltq
    00000103: 	movsd	%xmm0, (%rdi,%rax,8)
.Ltmp1724:
    00000108: 	leal	-0x1(%rcx), %r14d
    0000010c: 	leaq	-0x8(%rdi,%r8), %rdx
    00000111: 	cmpl	$0xe, %r14d
    00000115: 	leaq	0x8(%rdi), %rax
    00000119: 	seta	%r13b
    0000011d: 	cmpq	%rdx, %r10
    00000120: 	leaq	(%r10,%r11), %rdx
    00000124: 	setae	%r15b
    00000128: 	cmpq	%rdx, %rax
    0000012b: 	setae	%dl
    0000012e: 	orb	%r15b, %dl
    00000131: 	movq	%r10, %rdx
    00000134: 	je	.Ltmp1725 # Offset: 308
    0000013a: 	testb	%r13b, %r13b
    0000013d: 	je	.Ltmp1725 # Offset: 317
    00000143: 	movl	%ecx, %r15d
    00000146: 	shrl	%r15d
    00000149: 	subl	$0x1, %r15d
    0000014d: 	shlq	$0x4, %r15
    00000151: 	leaq	0x10(%r10,%r15), %r15
    00000156: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1726:
    00000160: 	movupd	(%rdx), %xmm0
    00000164: 	addq	$0x10, %rdx
    00000168: 	addq	$0x30, %rax
    0000016c: 	movlpd	%xmm0, -0x30(%rax)
    00000171: 	movhpd	%xmm0, -0x18(%rax)
    00000176: 	cmpq	%r15, %rdx
    00000179: 	jne	.Ltmp1726 # Offset: 377
    0000017b: 	movl	%ecx, %eax
    0000017d: 	andl	$-0x2, %eax
    00000180: 	testb	$0x1, %cl
    00000183: 	je	.Ltmp1727 # Offset: 387
    00000185: 	movl	%eax, %edx
    00000187: 	leal	0x1(%rax,%rax,2), %eax
    0000018b: 	movsd	(%r10,%rdx,8), %xmm0
    00000191: 	cltq
    00000193: 	movsd	%xmm0, (%rdi,%rax,8)
.Ltmp1727:
    00000198: 	addq	%rdi, %r8
    0000019b: 	leaq	0x10(%rdi), %rdx
    0000019f: 	cmpq	%r8, %r9
    000001a2: 	setae	%al
    000001a5: 	addq	%r9, %r11
    000001a8: 	cmpq	%r11, %rdx
    000001ab: 	setae	%r8b
    000001af: 	orb	%al, %r8b
    000001b2: 	movq	%r9, %rax
    000001b5: 	je	.Ltmp1728 # Offset: 437
    000001bb: 	testb	%r13b, %r13b
    000001be: 	je	.Ltmp1728 # Offset: 446
    000001c4: 	movl	%ecx, %r8d
    000001c7: 	shrl	%r8d
    000001ca: 	subl	$0x1, %r8d
    000001ce: 	shlq	$0x4, %r8
    000001d2: 	leaq	0x10(%r9,%r8), %r8
    000001d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1729:
    000001e0: 	movupd	(%rax), %xmm0
    000001e4: 	addq	$0x10, %rax
    000001e8: 	addq	$0x30, %rdx
    000001ec: 	movlpd	%xmm0, -0x30(%rdx)
    000001f1: 	movhpd	%xmm0, -0x18(%rdx)
    000001f6: 	cmpq	%rax, %r8
    000001f9: 	jne	.Ltmp1729 # Offset: 505
    000001fb: 	movl	%ecx, %eax
    000001fd: 	andl	$-0x2, %eax
    00000200: 	andl	$0x1, %ecx
    00000203: 	je	.Ltmp1730 # Offset: 515
    00000205: 	movl	%eax, %edx
    00000207: 	leal	(%rax,%rax,2), %eax
    0000020a: 	movsd	(%r9,%rdx,8), %xmm0
    00000210: 	cltq
    00000212: 	movsd	%xmm0, 0x10(%rdi,%rax,8)
.Ltmp1730:
    00000218: 	addq	-0x10(%rsp), %rdi
    0000021d: 	addq	%rbx, %rsi
    00000220: 	addq	%rbx, %r10
    00000223: 	addq	%rbx, %r9
    00000226: 	subl	$0xaa, %r12d
    0000022d: 	cmpl	-0x14(%rsp), %ebp
    00000231: 	jl	.Ltmp1731 # Offset: 561
.Ltmp1720:
    00000237: 	popq	%rbx
    00000238: 	popq	%rbp
    00000239: 	popq	%r12
    0000023b: 	popq	%r13
    0000023d: 	popq	%r14
    0000023f: 	popq	%r15
    00000241: 	retq # Offset: 577
    00000242: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1721:
    00000248: 	leal	(%r12,%r12,2), %eax
    0000024c: 	movslq	%r12d, %rbx
    0000024f: 	movl	%r12d, %ecx
    00000252: 	cltq
    00000254: 	shlq	$0x3, %rbx
    00000258: 	shlq	$0x3, %rax
    0000025c: 	movq	%rax, -0x10(%rsp)
    00000261: 	testl	%r12d, %r12d
    00000264: 	jg	.Ltmp1732 # Offset: 612
    0000026a: 	jmp	.Ltmp1730 # Offset: 618
    0000026c: 	nopl	(%rax) # Size: 4
.Ltmp1728:
    00000270: 	movl	%r14d, %r14d
    00000273: 	leaq	0x8(%r9,%r14,8), %rcx
    00000278: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1733:
    00000280: 	movsd	(%rax), %xmm0
    00000284: 	addq	$0x8, %rax
    00000288: 	addq	$0x18, %rdx
    0000028c: 	movsd	%xmm0, -0x18(%rdx)
    00000291: 	cmpq	%rax, %rcx
    00000294: 	jne	.Ltmp1733 # Offset: 660
    00000296: 	jmp	.Ltmp1730 # Offset: 662
    00000298: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1725:
    000002a0: 	movl	%r14d, %r15d
    000002a3: 	leaq	0x8(%r10,%r15,8), %r15
    000002a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1734:
    000002b0: 	movsd	(%rdx), %xmm0
    000002b4: 	addq	$0x8, %rdx
    000002b8: 	addq	$0x18, %rax
    000002bc: 	movsd	%xmm0, -0x18(%rax)
    000002c1: 	cmpq	%r15, %rdx
    000002c4: 	jne	.Ltmp1734 # Offset: 708
    000002c6: 	jmp	.Ltmp1727 # Offset: 710
    000002cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1722:
    000002d0: 	movq	%rdi, %rdx
    000002d3: 	xorl	%eax, %eax
    000002d5: 	nopl	(%rax) # Size: 3
.Ltmp1735:
    000002d8: 	movsd	(%rsi,%rax,8), %xmm0
    000002dd: 	addq	$0x1, %rax
    000002e1: 	addq	$0x18, %rdx
    000002e5: 	movsd	%xmm0, -0x18(%rdx)
    000002ea: 	cmpl	%eax, %ecx
    000002ec: 	jg	.Ltmp1735 # Offset: 748
    000002ee: 	jmp	.Ltmp1724 # Offset: 750
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version5IdEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version1IdEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 181
  State       : disassembled
  Address     : 0x21f80
  Size        : 0x191
  MaxSize     : 0x1a0
  Offset      : 0x21f80
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version1IdEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0180:
    00000000: 	endbr64
    00000004: 	testl	%r8d, %r8d
    00000007: 	jle	.Ltmp1736 # Offset: 7
    0000000d: 	movq	%rdi, %rax
    00000010: 	movq	%rdx, %rdi
    00000013: 	movslq	%r8d, %rdx
    00000016: 	movq	%rcx, %r9
    00000019: 	movq	%rdx, %r11
    0000001c: 	shlq	$0x3, %rdx
    00000020: 	pushq	%rbx
    00000021: 	shlq	$0x5, %r11
    00000025: 	leaq	(%rsi,%rdx), %rcx
    00000029: 	addq	%rax, %r11
    0000002c: 	cmpq	%rcx, %rax
    0000002f: 	setae	%cl
    00000032: 	cmpq	%r11, %rsi
    00000035: 	setae	%r10b
    00000039: 	orl	%r10d, %ecx
    0000003c: 	leaq	(%rdi,%rdx), %r10
    00000040: 	cmpq	%r10, %rax
    00000043: 	setae	%r10b
    00000047: 	cmpq	%r11, %rdi
    0000004a: 	setae	%bl
    0000004d: 	orl	%ebx, %r10d
    00000050: 	andl	%r10d, %ecx
    00000053: 	leal	-0x1(%r8), %r10d
    00000057: 	cmpl	$0x1, %r10d
    0000005b: 	seta	%r10b
    0000005f: 	testb	%r10b, %cl
    00000062: 	je	.Ltmp1737 # Offset: 98
    00000068: 	addq	%r9, %rdx
    0000006b: 	cmpq	%rdx, %rax
    0000006e: 	setae	%dl
    00000071: 	cmpq	%r11, %r9
    00000074: 	setae	%cl
    00000077: 	orb	%cl, %dl
    00000079: 	je	.Ltmp1737 # Offset: 121
    0000007f: 	movl	%r8d, %ecx
    00000082: 	movapd	%xmm0, %xmm6
    00000086: 	xorl	%edx, %edx
    00000088: 	shrl	%ecx
    0000008a: 	unpcklpd	%xmm6, %xmm6
    0000008e: 	shlq	$0x4, %rcx
    00000092: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1738:
    00000098: 	movupd	(%rsi,%rdx), %xmm4
    0000009d: 	movupd	(%rdi,%rdx), %xmm1
    000000a2: 	movapd	%xmm6, %xmm3
    000000a6: 	movhpd	(%rdi,%rdx), %xmm3
    000000ab: 	movupd	(%r9,%rdx), %xmm2
    000000b1: 	movlpd	0x8(%rsi,%rdx), %xmm2
    000000b7: 	movhpd	(%r9,%rdx), %xmm4
    000000bd: 	movsd	%xmm0, %xmm1
    000000c1: 	movapd	%xmm3, %xmm5
    000000c5: 	unpckhpd	%xmm4, %xmm3
    000000c9: 	unpcklpd	%xmm4, %xmm5
    000000cd: 	movups	%xmm3, 0x10(%rax,%rdx,4)
    000000d2: 	movapd	%xmm1, %xmm3
    000000d6: 	unpckhpd	%xmm2, %xmm1
    000000da: 	unpcklpd	%xmm2, %xmm3
    000000de: 	movups	%xmm5, (%rax,%rdx,4)
    000000e2: 	movups	%xmm3, 0x20(%rax,%rdx,4)
    000000e7: 	movups	%xmm1, 0x30(%rax,%rdx,4)
    000000ec: 	addq	$0x10, %rdx
    000000f0: 	cmpq	%rcx, %rdx
    000000f3: 	jne	.Ltmp1738 # Offset: 243
    000000f5: 	movl	%r8d, %ecx
    000000f8: 	andl	$-0x2, %ecx
    000000fb: 	andl	$0x1, %r8d
    000000ff: 	je	.Ltmp1739 # Offset: 255
    00000101: 	leal	(,%rcx,4), %edx
    00000108: 	movslq	%edx, %rdx
    0000010b: 	movsd	%xmm0, (%rax,%rdx,8)
    00000110: 	movsd	(%rsi,%rcx,8), %xmm0
    00000115: 	addq	$0x1, %rdx
    00000119: 	leaq	(,%rdx,8), %r8
    00000121: 	movsd	%xmm0, (%rax,%rdx,8)
    00000126: 	movsd	(%rdi,%rcx,8), %xmm0
    0000012b: 	movsd	%xmm0, 0x8(%rax,%r8)
    00000132: 	movsd	(%r9,%rcx,8), %xmm0
    00000138: 	movsd	%xmm0, 0x10(%rax,%r8)
.Ltmp1739:
    0000013f: 	popq	%rbx
    00000140: 	retq # Offset: 320
    00000141: 	nopl	(%rax) # Size: 7
.Ltmp1737:
    00000148: 	movl	%r8d, %r8d
    0000014b: 	xorl	%edx, %edx
    0000014d: 	shlq	$0x3, %r8
    00000151: 	nopl	(%rax) # Size: 7
.Ltmp1740:
    00000158: 	movsd	%xmm0, (%rax,%rdx,4)
    0000015d: 	movsd	(%rsi,%rdx), %xmm1
    00000162: 	movsd	%xmm1, 0x8(%rax,%rdx,4)
    00000168: 	movsd	(%rdi,%rdx), %xmm1
    0000016d: 	movsd	%xmm1, 0x10(%rax,%rdx,4)
    00000173: 	movsd	(%r9,%rdx), %xmm1
    00000179: 	movsd	%xmm1, 0x18(%rax,%rdx,4)
    0000017f: 	addq	$0x8, %rdx
    00000183: 	cmpq	%rdx, %r8
    00000186: 	jne	.Ltmp1740 # Offset: 390
    00000188: 	popq	%rbx
    00000189: 	retq # Offset: 393
    0000018a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1736:
    00000190: 	retq # Offset: 400
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version1IdEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version2IdEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 182
  State       : disassembled
  Address     : 0x22120
  Size        : 0x271
  MaxSize     : 0x280
  Offset      : 0x22120
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version2IdEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0181:
    00000000: 	endbr64
    00000004: 	movslq	%r8d, %r8
    00000007: 	testq	%r8, %r8
    0000000a: 	je	.Ltmp1741 # Offset: 10
    00000010: 	pushq	%r13
    00000012: 	movq	%rdx, %r11
    00000015: 	movq	%rsi, %r9
    00000018: 	movq	%rcx, %r10
    0000001b: 	pushq	%r12
    0000001d: 	movq	%rdi, %rdx
    00000020: 	xorl	%eax, %eax
    00000022: 	pushq	%rbp
    00000023: 	pushq	%rbx
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp1742:
    00000028: 	movq	%rax, %rcx
    0000002b: 	addq	$0x1, %rax
    0000002f: 	movsd	%xmm0, (%rdx)
    00000033: 	addq	$0x20, %rdx
    00000037: 	cmpq	%rax, %r8
    0000003a: 	jne	.Ltmp1742 # Offset: 58
    0000003c: 	cmpq	$0xe, %rcx
    00000040: 	movq	%rcx, %r12
    00000043: 	leaq	(,%rax,8), %rbp
    0000004b: 	seta	%bl
    0000004e: 	shlq	$0x5, %r12
    00000052: 	leaq	(%r9,%rbp), %rsi
    00000056: 	leaq	0x8(%rdi), %r8
    0000005a: 	leaq	0x10(%rdi,%r12), %rdx
    0000005f: 	cmpq	%rdx, %r9
    00000062: 	setae	%dl
    00000065: 	cmpq	%rsi, %r8
    00000068: 	setae	%sil
    0000006c: 	orb	%sil, %dl
    0000006f: 	je	.Ltmp1743 # Offset: 111
    00000075: 	movq	%rax, %r13
    00000078: 	xorl	%edx, %edx
    0000007a: 	xorl	%esi, %esi
    0000007c: 	shrq	%r13
    0000007f: 	testb	%bl, %bl
    00000081: 	je	.Ltmp1743 # Offset: 129
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1744:
    00000090: 	movupd	(%r9,%rdx), %xmm0
    00000096: 	addq	$0x1, %rsi
    0000009a: 	movlpd	%xmm0, 0x8(%rdi,%rdx,4)
    000000a0: 	movhpd	%xmm0, 0x28(%rdi,%rdx,4)
    000000a6: 	addq	$0x10, %rdx
    000000aa: 	cmpq	%rsi, %r13
    000000ad: 	jne	.Ltmp1744 # Offset: 173
    000000af: 	movq	%rax, %r13
    000000b2: 	andq	$-0x2, %r13
    000000b6: 	movq	%r13, %rdx
    000000b9: 	leaq	(%r9,%r13,8), %rsi
    000000bd: 	shlq	$0x5, %rdx
    000000c1: 	addq	%r8, %rdx
    000000c4: 	cmpq	%r13, %rax
    000000c7: 	je	.Ltmp1745 # Offset: 199
    000000c9: 	movsd	(%rsi), %xmm0
    000000cd: 	movsd	%xmm0, (%rdx)
.Ltmp1745:
    000000d1: 	leaq	0x18(%rdi,%r12), %rdx
    000000d6: 	leaq	(%r11,%rbp), %rsi
    000000da: 	cmpq	%rdx, %r11
    000000dd: 	leaq	0x10(%rdi), %r8
    000000e1: 	setae	%dl
    000000e4: 	cmpq	%rsi, %r8
    000000e7: 	setae	%sil
    000000eb: 	orb	%sil, %dl
    000000ee: 	je	.Ltmp1746 # Offset: 238
    000000f4: 	movq	%rax, %r9
    000000f7: 	xorl	%edx, %edx
    000000f9: 	xorl	%esi, %esi
    000000fb: 	shrq	%r9
    000000fe: 	testb	%bl, %bl
    00000100: 	je	.Ltmp1746 # Offset: 256
    00000106: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1747:
    00000110: 	movupd	(%r11,%rdx), %xmm0
    00000116: 	addq	$0x1, %rsi
    0000011a: 	movlpd	%xmm0, 0x10(%rdi,%rdx,4)
    00000120: 	movhpd	%xmm0, 0x30(%rdi,%rdx,4)
    00000126: 	addq	$0x10, %rdx
    0000012a: 	cmpq	%rsi, %r9
    0000012d: 	jne	.Ltmp1747 # Offset: 301
    0000012f: 	movq	%rax, %r9
    00000132: 	andq	$-0x2, %r9
    00000136: 	movq	%r9, %rdx
    00000139: 	leaq	(%r11,%r9,8), %rsi
    0000013d: 	shlq	$0x5, %rdx
    00000141: 	addq	%r8, %rdx
    00000144: 	cmpq	%r9, %rax
    00000147: 	je	.Ltmp1748 # Offset: 327
    00000149: 	movsd	(%rsi), %xmm0
    0000014d: 	movsd	%xmm0, (%rdx)
.Ltmp1748:
    00000151: 	movq	%rax, %rdx
    00000154: 	leaq	0x18(%rdi), %r8
    00000158: 	shlq	$0x5, %rdx
    0000015c: 	addq	%rdi, %rdx
    0000015f: 	cmpq	%rdx, %r10
    00000162: 	setae	%dl
    00000165: 	addq	%r10, %rbp
    00000168: 	cmpq	%rbp, %r8
    0000016b: 	setae	%sil
    0000016f: 	orb	%sil, %dl
    00000172: 	je	.Ltmp1749 # Offset: 370
    00000178: 	movq	%rax, %r9
    0000017b: 	xorl	%edx, %edx
    0000017d: 	xorl	%esi, %esi
    0000017f: 	shrq	%r9
    00000182: 	testb	%bl, %bl
    00000184: 	je	.Ltmp1749 # Offset: 388
    0000018a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1750:
    00000190: 	movupd	(%r10,%rdx), %xmm0
    00000196: 	addq	$0x1, %rsi
    0000019a: 	movlpd	%xmm0, 0x18(%rdi,%rdx,4)
    000001a0: 	movhpd	%xmm0, 0x38(%rdi,%rdx,4)
    000001a6: 	addq	$0x10, %rdx
    000001aa: 	cmpq	%rsi, %r9
    000001ad: 	jne	.Ltmp1750 # Offset: 429
    000001af: 	movq	%rax, %rsi
    000001b2: 	andq	$-0x2, %rsi
    000001b6: 	movq	%rsi, %rdx
    000001b9: 	leaq	(%r10,%rsi,8), %rcx
    000001bd: 	shlq	$0x5, %rdx
    000001c1: 	addq	%r8, %rdx
    000001c4: 	cmpq	%rsi, %rax
    000001c7: 	je	.Ltmp1751 # Offset: 455
    000001c9: 	movsd	(%rcx), %xmm0
    000001cd: 	movsd	%xmm0, (%rdx)
.Ltmp1751:
    000001d1: 	popq	%rbx
    000001d2: 	popq	%rbp
    000001d3: 	popq	%r12
    000001d5: 	popq	%r13
    000001d7: 	retq # Offset: 471
    000001d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1743:
    000001e0: 	xorl	%edx, %edx
    000001e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1752:
    000001e8: 	movsd	(%r9,%rdx,8), %xmm0
    000001ee: 	movq	%rdx, %rsi
    000001f1: 	addq	$0x20, %r8
    000001f5: 	addq	$0x1, %rdx
    000001f9: 	movsd	%xmm0, -0x20(%r8)
    000001ff: 	cmpq	%rsi, %rcx
    00000202: 	jne	.Ltmp1752 # Offset: 514
    00000204: 	jmp	.Ltmp1745 # Offset: 516
    00000209: 	nopl	(%rax) # Size: 7
.Ltmp1746:
    00000210: 	xorl	%edx, %edx
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1753:
    00000218: 	movsd	(%r11,%rdx,8), %xmm0
    0000021e: 	movq	%rdx, %rsi
    00000221: 	addq	$0x20, %r8
    00000225: 	addq	$0x1, %rdx
    00000229: 	movsd	%xmm0, -0x20(%r8)
    0000022f: 	cmpq	%rsi, %rcx
    00000232: 	jne	.Ltmp1753 # Offset: 562
    00000234: 	jmp	.Ltmp1748 # Offset: 564
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp1749:
    00000240: 	xorl	%eax, %eax
    00000242: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1754:
    00000248: 	movsd	(%r10,%rax,8), %xmm0
    0000024e: 	movq	%rax, %rdx
    00000251: 	addq	$0x20, %r8
    00000255: 	addq	$0x1, %rax
    00000259: 	movsd	%xmm0, -0x20(%r8)
    0000025f: 	cmpq	%rcx, %rdx
    00000262: 	jne	.Ltmp1754 # Offset: 610
    00000264: 	popq	%rbx
    00000265: 	popq	%rbp
    00000266: 	popq	%r12
    00000268: 	popq	%r13
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1741:
    00000270: 	retq # Offset: 624
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version2IdEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version3IdEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 183
  State       : disassembled
  Address     : 0x223a0
  Size        : 0x131
  MaxSize     : 0x140
  Offset      : 0x223a0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version3IdEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0182:
    00000000: 	endbr64
    00000004: 	testl	%r8d, %r8d
    00000007: 	jle	.Ltmp1755 # Offset: 7
    0000000d: 	leal	-0x1(%r8), %r9d
    00000011: 	pushq	%rbx
    00000012: 	movq	%rdi, %rax
    00000015: 	movq	%r9, %r10
    00000018: 	shlq	$0x5, %r9
    0000001c: 	leaq	0x20(%rdi,%r9), %r9
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp1756:
    00000028: 	movsd	%xmm0, (%rax)
    0000002c: 	movsd	(%rsi), %xmm1
    00000030: 	addq	$0x20, %rax
    00000034: 	addq	$0x8, %rsi
    00000038: 	movsd	%xmm1, -0x18(%rax)
    0000003d: 	cmpq	%rax, %r9
    00000040: 	jne	.Ltmp1756 # Offset: 64
    00000042: 	movslq	%r8d, %rax
    00000045: 	leaq	0x10(%rdi), %r11
    00000049: 	leaq	(,%rax,8), %rsi
    00000051: 	shlq	$0x5, %rax
    00000055: 	leaq	(%rcx,%rsi), %r9
    00000059: 	addq	%rdi, %rax
    0000005c: 	cmpq	%r9, %r11
    0000005f: 	setae	%r9b
    00000063: 	cmpq	%rax, %rcx
    00000066: 	setae	%bl
    00000069: 	addq	%rdx, %rsi
    0000006c: 	orl	%ebx, %r9d
    0000006f: 	cmpq	%rsi, %r11
    00000072: 	setae	%sil
    00000076: 	cmpq	%rax, %rdx
    00000079: 	setae	%al
    0000007c: 	orl	%esi, %eax
    0000007e: 	testb	%al, %r9b
    00000081: 	je	.Ltmp1757 # Offset: 129
    00000083: 	cmpl	$0x8, %r10d
    00000087: 	jbe	.Ltmp1757 # Offset: 135
    00000089: 	movl	%r8d, %esi
    0000008c: 	xorl	%eax, %eax
    0000008e: 	shrl	%esi
    00000090: 	shlq	$0x4, %rsi
    00000094: 	nopl	(%rax) # Size: 4
.Ltmp1758:
    00000098: 	movupd	(%rdx,%rax), %xmm1
    0000009d: 	movupd	(%rcx,%rax), %xmm0
    000000a2: 	movlpd	%xmm1, 0x10(%rdi,%rax,4)
    000000a8: 	movhpd	%xmm1, 0x30(%rdi,%rax,4)
    000000ae: 	movlpd	%xmm0, 0x18(%rdi,%rax,4)
    000000b4: 	movhpd	%xmm0, 0x38(%rdi,%rax,4)
    000000ba: 	addq	$0x10, %rax
    000000be: 	cmpq	%rsi, %rax
    000000c1: 	jne	.Ltmp1758 # Offset: 193
    000000c3: 	movl	%r8d, %eax
    000000c6: 	andl	$-0x2, %eax
    000000c9: 	andl	$0x1, %r8d
    000000cd: 	je	.Ltmp1759 # Offset: 205
    000000cf: 	movl	%eax, %esi
    000000d1: 	leal	0x2(,%rax,4), %eax
    000000d8: 	movsd	(%rdx,%rsi,8), %xmm0
    000000dd: 	cltq
    000000df: 	movsd	%xmm0, (%rdi,%rax,8)
    000000e4: 	movsd	(%rcx,%rsi,8), %xmm0
    000000e9: 	movsd	%xmm0, 0x8(%rdi,%rax,8)
.Ltmp1759:
    000000ef: 	popq	%rbx
    000000f0: 	retq # Offset: 240
    000000f1: 	nopl	(%rax) # Size: 7
.Ltmp1757:
    000000f8: 	movl	%r8d, %r8d
    000000fb: 	xorl	%eax, %eax
    000000fd: 	shlq	$0x3, %r8
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp1760:
    00000108: 	movsd	(%rdx,%rax), %xmm0
    0000010d: 	movsd	%xmm0, 0x10(%rdi,%rax,4)
    00000113: 	movsd	(%rcx,%rax), %xmm0
    00000118: 	movsd	%xmm0, 0x18(%rdi,%rax,4)
    0000011e: 	addq	$0x8, %rax
    00000122: 	cmpq	%rax, %r8
    00000125: 	jne	.Ltmp1760 # Offset: 293
    00000127: 	popq	%rbx
    00000128: 	retq # Offset: 296
    00000129: 	nopl	(%rax) # Size: 7
.Ltmp1755:
    00000130: 	retq # Offset: 304
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version3IdEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version4IdEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 184
  State       : disassembled
  Address     : 0x224e0
  Size        : 0x345
  MaxSize     : 0x350
  Offset      : 0x224e0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version4IdEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0183:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r8d, -0x10(%rsp)
    00000013: 	movl	%r8d, -0xc(%rsp)
    00000018: 	testl	%r8d, %r8d
    0000001b: 	jle	.Ltmp1761 # Offset: 27
    00000021: 	movq	%rdi, %rax
    00000024: 	movq	%rdx, %r9
    00000027: 	movq	%rsi, %rdi
    0000002a: 	movq	%rcx, %r10
    0000002d: 	xorl	%r12d, %r12d
.Ltmp1773:
    00000030: 	subl	$-0x80, %r12d
    00000034: 	cmpl	-0x10(%rsp), %r12d
    00000039: 	jg	.Ltmp1762 # Offset: 57
    0000003f: 	movq	$0x1000, -0x18(%rsp)
    00000048: 	movl	$0x400, %ebp
    0000004d: 	movl	$0x80, %edx
.Ltmp1774:
    00000052: 	movq	%rax, %rsi
    00000055: 	xorl	%ecx, %ecx
    00000057: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1763:
    00000060: 	addq	$0x1, %rcx
    00000064: 	movsd	%xmm0, (%rsi)
    00000068: 	addq	$0x20, %rsi
    0000006c: 	cmpq	%rcx, %rdx
    0000006f: 	ja	.Ltmp1763 # Offset: 111
    00000071: 	cmpq	$0xf, %rdx
    00000075: 	movl	$0x8, %esi
    0000007a: 	leaq	(,%rdx,8), %rbx
    00000082: 	seta	%r13b
    00000086: 	leaq	-0x1(%rdx), %r8
    0000008a: 	leaq	0x8(%rax), %r11
    0000008e: 	testq	%rdx, %rdx
    00000091: 	cmoveq	%rsi, %rbx
    00000095: 	shlq	$0x5, %r8
    00000099: 	movl	$0x10, %esi
    0000009e: 	testq	%rdx, %rdx
    000000a1: 	leaq	0x10(%r8), %rcx
    000000a5: 	cmoveq	%rsi, %rcx
    000000a9: 	addq	%rax, %rcx
    000000ac: 	cmpq	%rcx, %rdi
    000000af: 	leaq	(%rdi,%rbx), %rcx
    000000b3: 	setae	%sil
    000000b7: 	cmpq	%rcx, %r11
    000000ba: 	setae	%cl
    000000bd: 	orb	%sil, %cl
    000000c0: 	je	.Ltmp1764 # Offset: 192
    000000c6: 	testb	%r13b, %r13b
    000000c9: 	je	.Ltmp1764 # Offset: 201
    000000cf: 	testq	%rdx, %rdx
    000000d2: 	movl	$0x1, %r14d
    000000d8: 	cmovneq	%rdx, %r14
    000000dc: 	xorl	%ecx, %ecx
    000000de: 	xorl	%esi, %esi
    000000e0: 	movq	%r14, %r15
    000000e3: 	shrq	%r15
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1765:
    000000f0: 	movupd	(%rdi,%rcx), %xmm1
    000000f5: 	addq	$0x1, %rsi
    000000f9: 	movlpd	%xmm1, 0x8(%rax,%rcx,4)
    000000ff: 	movhpd	%xmm1, 0x28(%rax,%rcx,4)
    00000105: 	addq	$0x10, %rcx
    00000109: 	cmpq	%rsi, %r15
    0000010c: 	jne	.Ltmp1765 # Offset: 268
    0000010e: 	movq	%r14, %r15
    00000111: 	andq	$-0x2, %r15
    00000115: 	movq	%r15, %rcx
    00000118: 	leaq	(%rdi,%r15,8), %rsi
    0000011c: 	shlq	$0x5, %rcx
    00000120: 	addq	%r11, %rcx
    00000123: 	cmpq	%r15, %r14
    00000126: 	je	.Ltmp1766 # Offset: 294
    00000128: 	movsd	(%rsi), %xmm1
    0000012c: 	movsd	%xmm1, (%rcx)
.Ltmp1766:
    00000130: 	addq	$0x18, %r8
    00000134: 	movl	$0x18, %esi
    00000139: 	leaq	(%r9,%rbx), %rcx
    0000013d: 	testq	%rdx, %rdx
    00000140: 	cmoveq	%rsi, %r8
    00000144: 	leaq	0x10(%rax), %r11
    00000148: 	addq	%rax, %r8
    0000014b: 	cmpq	%r8, %r9
    0000014e: 	setae	%sil
    00000152: 	cmpq	%rcx, %r11
    00000155: 	setae	%cl
    00000158: 	orb	%sil, %cl
    0000015b: 	je	.Ltmp1767 # Offset: 347
    00000161: 	testb	%r13b, %r13b
    00000164: 	je	.Ltmp1767 # Offset: 356
    0000016a: 	testq	%rdx, %rdx
    0000016d: 	movl	$0x1, %r8d
    00000173: 	cmovneq	%rdx, %r8
    00000177: 	xorl	%ecx, %ecx
    00000179: 	xorl	%esi, %esi
    0000017b: 	movq	%r8, %r14
    0000017e: 	shrq	%r14
    00000181: 	nopl	(%rax) # Size: 7
.Ltmp1768:
    00000188: 	movupd	(%r9,%rcx), %xmm1
    0000018e: 	addq	$0x1, %rsi
    00000192: 	movlpd	%xmm1, 0x10(%rax,%rcx,4)
    00000198: 	movhpd	%xmm1, 0x30(%rax,%rcx,4)
    0000019e: 	addq	$0x10, %rcx
    000001a2: 	cmpq	%rsi, %r14
    000001a5: 	jne	.Ltmp1768 # Offset: 421
    000001a7: 	movq	%r8, %r14
    000001aa: 	andq	$-0x2, %r14
    000001ae: 	movq	%r14, %rcx
    000001b1: 	leaq	(%r9,%r14,8), %rsi
    000001b5: 	shlq	$0x5, %rcx
    000001b9: 	addq	%r11, %rcx
    000001bc: 	cmpq	%r14, %r8
    000001bf: 	je	.Ltmp1769 # Offset: 447
    000001c1: 	movsd	(%rsi), %xmm1
    000001c5: 	movsd	%xmm1, (%rcx)
.Ltmp1769:
    000001c9: 	movq	%rdx, %rcx
    000001cc: 	movl	$0x20, %esi
    000001d1: 	leaq	0x18(%rax), %r8
    000001d5: 	shlq	$0x5, %rcx
    000001d9: 	testq	%rdx, %rdx
    000001dc: 	cmoveq	%rsi, %rcx
    000001e0: 	addq	%rax, %rcx
    000001e3: 	cmpq	%rcx, %r10
    000001e6: 	setae	%cl
    000001e9: 	addq	%r10, %rbx
    000001ec: 	cmpq	%rbx, %r8
    000001ef: 	setae	%sil
    000001f3: 	orb	%cl, %sil
    000001f6: 	je	.Ltmp1770 # Offset: 502
    000001fc: 	testb	%r13b, %r13b
    000001ff: 	je	.Ltmp1770 # Offset: 511
    00000205: 	testq	%rdx, %rdx
    00000208: 	movl	$0x1, %ebx
    0000020d: 	cmoveq	%rbx, %rdx
    00000211: 	xorl	%ecx, %ecx
    00000213: 	xorl	%esi, %esi
    00000215: 	movq	%rdx, %r11
    00000218: 	shrq	%r11
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1771:
    00000220: 	movupd	(%r10,%rcx), %xmm1
    00000226: 	addq	$0x1, %rsi
    0000022a: 	movlpd	%xmm1, 0x18(%rax,%rcx,4)
    00000230: 	movhpd	%xmm1, 0x38(%rax,%rcx,4)
    00000236: 	addq	$0x10, %rcx
    0000023a: 	cmpq	%rsi, %r11
    0000023d: 	jne	.Ltmp1771 # Offset: 573
    0000023f: 	movq	%rdx, %r11
    00000242: 	andq	$-0x2, %r11
    00000246: 	movq	%r11, %rcx
    00000249: 	leaq	(%r10,%r11,8), %rsi
    0000024d: 	shlq	$0x5, %rcx
    00000251: 	addq	%r8, %rcx
    00000254: 	cmpq	%r11, %rdx
    00000257: 	je	.Ltmp1772 # Offset: 599
    00000259: 	movsd	(%rsi), %xmm1
    0000025d: 	movsd	%xmm1, (%rcx)
.Ltmp1772:
    00000261: 	addl	$-0x80, -0xc(%rsp)
    00000266: 	addq	-0x18(%rsp), %rax
    0000026b: 	addq	%rbp, %rdi
    0000026e: 	addq	%rbp, %r9
    00000271: 	addq	%rbp, %r10
    00000274: 	cmpl	-0x10(%rsp), %r12d
    00000279: 	jl	.Ltmp1773 # Offset: 633
.Ltmp1761:
    0000027f: 	popq	%rbx
    00000280: 	popq	%rbp
    00000281: 	popq	%r12
    00000283: 	popq	%r13
    00000285: 	popq	%r14
    00000287: 	popq	%r15
    00000289: 	retq # Offset: 649
    0000028a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1762:
    00000290: 	movslq	-0xc(%rsp), %rdx
    00000295: 	leal	(,%rdx,4), %ecx
    0000029c: 	leaq	(,%rdx,8), %rbp
    000002a4: 	movslq	%ecx, %rcx
    000002a7: 	leaq	(,%rcx,8), %rbx
    000002af: 	movq	%rbx, -0x18(%rsp)
    000002b4: 	testq	%rdx, %rdx
    000002b7: 	jne	.Ltmp1774 # Offset: 695
    000002bd: 	jmp	.Ltmp1772 # Offset: 701
    000002bf: 	nop # Size: 1
.Ltmp1770:
    000002c0: 	xorl	%ecx, %ecx
    000002c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1775:
    000002c8: 	movsd	(%r10,%rcx,8), %xmm1
    000002ce: 	addq	$0x1, %rcx
    000002d2: 	addq	$0x20, %r8
    000002d6: 	movsd	%xmm1, -0x20(%r8)
    000002dc: 	cmpq	%rdx, %rcx
    000002df: 	jb	.Ltmp1775 # Offset: 735
    000002e1: 	jmp	.Ltmp1772 # Offset: 737
    000002e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1767:
    000002f0: 	xorl	%ecx, %ecx
    000002f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1776:
    000002f8: 	movsd	(%r9,%rcx,8), %xmm1
    000002fe: 	addq	$0x1, %rcx
    00000302: 	addq	$0x20, %r11
    00000306: 	movsd	%xmm1, -0x20(%r11)
    0000030c: 	cmpq	%rcx, %rdx
    0000030f: 	ja	.Ltmp1776 # Offset: 783
    00000311: 	jmp	.Ltmp1769 # Offset: 785
    00000316: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1764:
    00000320: 	xorl	%ecx, %ecx
    00000322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1777:
    00000328: 	movsd	(%rdi,%rcx,8), %xmm1
    0000032d: 	addq	$0x1, %rcx
    00000331: 	addq	$0x20, %r11
    00000335: 	movsd	%xmm1, -0x20(%r11)
    0000033b: 	cmpq	%rcx, %rdx
    0000033e: 	ja	.Ltmp1777 # Offset: 830
    00000340: 	jmp	.Ltmp1766 # Offset: 832
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version4IdEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version5IdEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 185
  State       : disassembled
  Address     : 0x22830
  Size        : 0x1a2
  MaxSize     : 0x1b0
  Offset      : 0x22830
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version5IdEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0184:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movl	%r8d, %r12d
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	testl	%r8d, %r8d
    00000014: 	jle	.Ltmp1778 # Offset: 20
    0000001a: 	movq	%rsi, %r10
    0000001d: 	movl	%r8d, %ebx
    00000020: 	movq	%rdx, %r9
    00000023: 	movq	%rcx, %rsi
    00000026: 	xorl	%r8d, %r8d
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp1784:
    00000030: 	subl	$-0x80, %r8d
    00000034: 	cmpl	%r12d, %r8d
    00000037: 	jg	.Ltmp1779 # Offset: 55
    0000003d: 	movl	$0x400, %r11d
    00000043: 	movl	$0x1000, %ebp
    00000048: 	movl	$0x80, %ecx
.Ltmp1785:
    0000004d: 	movq	%rdi, %rdx
    00000050: 	xorl	%eax, %eax
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1780:
    00000058: 	movsd	%xmm0, (%rdx)
    0000005c: 	movsd	(%r10,%rax,8), %xmm1
    00000062: 	addq	$0x1, %rax
    00000066: 	addq	$0x20, %rdx
    0000006a: 	movsd	%xmm1, -0x18(%rdx)
    0000006f: 	cmpl	%eax, %ecx
    00000071: 	jg	.Ltmp1780 # Offset: 113
    00000073: 	movslq	%ecx, %rax
    00000076: 	leaq	0x10(%rdi), %r14
    0000007a: 	leaq	(,%rax,8), %rdx
    00000082: 	shlq	$0x5, %rax
    00000086: 	leaq	(%rsi,%rdx), %r13
    0000008a: 	addq	%rdi, %rax
    0000008d: 	cmpq	%r13, %r14
    00000090: 	setae	%r15b
    00000094: 	cmpq	%rax, %rsi
    00000097: 	setae	%r13b
    0000009b: 	addq	%r9, %rdx
    0000009e: 	orl	%r15d, %r13d
    000000a1: 	cmpq	%rdx, %r14
    000000a4: 	setae	%dl
    000000a7: 	cmpq	%rax, %r9
    000000aa: 	setae	%al
    000000ad: 	orl	%edx, %eax
    000000af: 	testb	%al, %r13b
    000000b2: 	je	.Ltmp1781 # Offset: 178
    000000b8: 	leal	-0x1(%rcx), %eax
    000000bb: 	cmpl	$0x8, %eax
    000000be: 	jbe	.Ltmp1781 # Offset: 190
    000000c4: 	movl	%ecx, %edx
    000000c6: 	xorl	%eax, %eax
    000000c8: 	shrl	%edx
    000000ca: 	shlq	$0x4, %rdx
    000000ce: 	nop # Size: 2
.Ltmp1782:
    000000d0: 	movupd	(%r9,%rax), %xmm2
    000000d6: 	movupd	(%rsi,%rax), %xmm1
    000000db: 	movlpd	%xmm2, 0x10(%rdi,%rax,4)
    000000e1: 	movhpd	%xmm2, 0x30(%rdi,%rax,4)
    000000e7: 	movlpd	%xmm1, 0x18(%rdi,%rax,4)
    000000ed: 	movhpd	%xmm1, 0x38(%rdi,%rax,4)
    000000f3: 	addq	$0x10, %rax
    000000f7: 	cmpq	%rdx, %rax
    000000fa: 	jne	.Ltmp1782 # Offset: 250
    000000fc: 	movl	%ecx, %eax
    000000fe: 	andl	$-0x2, %eax
    00000101: 	andl	$0x1, %ecx
    00000104: 	je	.Ltmp1783 # Offset: 260
    00000106: 	movl	%eax, %edx
    00000108: 	leal	0x2(,%rax,4), %eax
    0000010f: 	movsd	(%r9,%rdx,8), %xmm1
    00000115: 	cltq
    00000117: 	movsd	%xmm1, (%rdi,%rax,8)
    0000011c: 	movsd	(%rsi,%rdx,8), %xmm1
    00000121: 	movsd	%xmm1, 0x8(%rdi,%rax,8)
.Ltmp1783:
    00000127: 	addq	%rbp, %rdi
    0000012a: 	addq	%r11, %r10
    0000012d: 	addq	%r11, %r9
    00000130: 	addq	%r11, %rsi
    00000133: 	addl	$-0x80, %ebx
    00000136: 	cmpl	%r12d, %r8d
    00000139: 	jl	.Ltmp1784 # Offset: 313
.Ltmp1778:
    0000013f: 	popq	%rbx
    00000140: 	popq	%rbp
    00000141: 	popq	%r12
    00000143: 	popq	%r13
    00000145: 	popq	%r14
    00000147: 	popq	%r15
    00000149: 	retq # Offset: 329
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1779:
    00000150: 	leal	(,%rbx,4), %ebp
    00000157: 	movslq	%ebx, %r11
    0000015a: 	movl	%ebx, %ecx
    0000015c: 	movslq	%ebp, %rbp
    0000015f: 	shlq	$0x3, %r11
    00000163: 	shlq	$0x3, %rbp
    00000167: 	testl	%ebx, %ebx
    00000169: 	jg	.Ltmp1785 # Offset: 361
    0000016f: 	jmp	.Ltmp1783 # Offset: 367
    00000171: 	nopl	(%rax) # Size: 7
.Ltmp1781:
    00000178: 	movl	%ecx, %ecx
    0000017a: 	xorl	%eax, %eax
    0000017c: 	shlq	$0x3, %rcx
.Ltmp1786:
    00000180: 	movsd	(%r9,%rax), %xmm1
    00000186: 	movsd	%xmm1, 0x10(%rdi,%rax,4)
    0000018c: 	movsd	(%rsi,%rax), %xmm1
    00000191: 	movsd	%xmm1, 0x18(%rdi,%rax,4)
    00000197: 	addq	$0x8, %rax
    0000019b: 	cmpq	%rcx, %rax
    0000019e: 	jne	.Ltmp1786 # Offset: 414
    000001a0: 	jmp	.Ltmp1783 # Offset: 416
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version5IdEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version6IdEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 186
  State       : disassembled
  Address     : 0x229e0
  Size        : 0x324
  MaxSize     : 0x330
  Offset      : 0x229e0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version6IdEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0185:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r8d, -0x10(%rsp)
    00000013: 	testl	%r8d, %r8d
    00000016: 	jle	.Ltmp1787 # Offset: 22
    0000001c: 	movq	%rdi, %rax
    0000001f: 	movl	%r8d, %r12d
    00000022: 	movq	%rsi, %rdi
    00000025: 	xorl	%r14d, %r14d
    00000028: 	movq	%rdx, %rsi
    0000002b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1799:
    00000030: 	subl	$-0x80, %r14d
    00000034: 	cmpl	-0x10(%rsp), %r14d
    00000039: 	jg	.Ltmp1788 # Offset: 57
    0000003f: 	movq	$0x1000, -0x18(%rsp)
    00000048: 	movl	$0x400, %ebx
    0000004d: 	movl	$0x80, %edx
.Ltmp1801:
    00000052: 	movq	%rax, %r9
    00000055: 	xorl	%r8d, %r8d
    00000058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1789:
    00000060: 	addl	$0x1, %r8d
    00000064: 	movsd	%xmm0, (%r9)
    00000069: 	addq	$0x20, %r9
    0000006d: 	cmpl	%edx, %r8d
    00000070: 	jl	.Ltmp1789 # Offset: 112
    00000072: 	leal	-0x1(%rdx), %r15d
    00000076: 	movslq	%edx, %r8
    00000079: 	leaq	0x8(%rax), %r9
    0000007d: 	cmpl	$0xe, %r15d
    00000081: 	leaq	-0x1(%r8), %rbp
    00000085: 	movl	%r15d, -0xc(%rsp)
    0000008a: 	leaq	(,%r8,8), %r11
    00000092: 	seta	%r13b
    00000096: 	shlq	$0x5, %rbp
    0000009a: 	leaq	0x10(%rax,%rbp), %r10
    0000009f: 	cmpq	%r10, %rdi
    000000a2: 	leaq	(%rdi,%r11), %r10
    000000a6: 	setae	%r15b
    000000aa: 	cmpq	%r10, %r9
    000000ad: 	setae	%r10b
    000000b1: 	orb	%r15b, %r10b
    000000b4: 	je	.Ltmp1790 # Offset: 180
    000000ba: 	testb	%r13b, %r13b
    000000bd: 	je	.Ltmp1790 # Offset: 189
    000000c3: 	movl	%edx, %r10d
    000000c6: 	xorl	%r9d, %r9d
    000000c9: 	shrl	%r10d
    000000cc: 	shlq	$0x4, %r10
.Ltmp1791:
    000000d0: 	movupd	(%rdi,%r9), %xmm1
    000000d6: 	movlpd	%xmm1, 0x8(%rax,%r9,4)
    000000dd: 	movhpd	%xmm1, 0x28(%rax,%r9,4)
    000000e4: 	addq	$0x10, %r9
    000000e8: 	cmpq	%r10, %r9
    000000eb: 	jne	.Ltmp1791 # Offset: 235
    000000ed: 	movl	%edx, %r9d
    000000f0: 	andl	$-0x2, %r9d
    000000f4: 	testb	$0x1, %dl
    000000f7: 	je	.Ltmp1792 # Offset: 247
    000000f9: 	movl	%r9d, %r10d
    000000fc: 	leal	0x1(,%r9,4), %r9d
    00000104: 	movsd	(%rdi,%r10,8), %xmm1
    0000010a: 	movslq	%r9d, %r9
    0000010d: 	movsd	%xmm1, (%rax,%r9,8)
.Ltmp1792:
    00000113: 	leaq	0x18(%rax,%rbp), %r9
    00000118: 	leaq	0x10(%rax), %r10
    0000011c: 	cmpq	%r9, %rsi
    0000011f: 	leaq	(%rsi,%r11), %r9
    00000123: 	setae	%bpl
    00000127: 	cmpq	%r9, %r10
    0000012a: 	setae	%r9b
    0000012e: 	orb	%bpl, %r9b
    00000131: 	je	.Ltmp1793 # Offset: 305
    00000137: 	testb	%r13b, %r13b
    0000013a: 	je	.Ltmp1793 # Offset: 314
    00000140: 	movl	%edx, %r10d
    00000143: 	xorl	%r9d, %r9d
    00000146: 	shrl	%r10d
    00000149: 	shlq	$0x4, %r10
    0000014d: 	nopl	(%rax) # Size: 3
.Ltmp1794:
    00000150: 	movupd	(%rsi,%r9), %xmm1
    00000156: 	movlpd	%xmm1, 0x10(%rax,%r9,4)
    0000015d: 	movhpd	%xmm1, 0x30(%rax,%r9,4)
    00000164: 	addq	$0x10, %r9
    00000168: 	cmpq	%r10, %r9
    0000016b: 	jne	.Ltmp1794 # Offset: 363
    0000016d: 	movl	%edx, %r9d
    00000170: 	andl	$-0x2, %r9d
    00000174: 	testb	$0x1, %dl
    00000177: 	je	.Ltmp1795 # Offset: 375
    00000179: 	movl	%r9d, %r10d
    0000017c: 	leal	0x2(,%r9,4), %r9d
    00000184: 	movsd	(%rsi,%r10,8), %xmm1
    0000018a: 	movslq	%r9d, %r9
    0000018d: 	movsd	%xmm1, (%rax,%r9,8)
.Ltmp1795:
    00000193: 	shlq	$0x5, %r8
    00000197: 	leaq	0x18(%rax), %r9
    0000019b: 	addq	%rax, %r8
    0000019e: 	cmpq	%r8, %rcx
    000001a1: 	setae	%r8b
    000001a5: 	addq	%rcx, %r11
    000001a8: 	cmpq	%r11, %r9
    000001ab: 	setae	%r10b
    000001af: 	orb	%r8b, %r10b
    000001b2: 	je	.Ltmp1796 # Offset: 434
    000001b8: 	testb	%r13b, %r13b
    000001bb: 	je	.Ltmp1796 # Offset: 443
    000001c1: 	movl	%edx, %r9d
    000001c4: 	xorl	%r8d, %r8d
    000001c7: 	shrl	%r9d
    000001ca: 	shlq	$0x4, %r9
    000001ce: 	nop # Size: 2
.Ltmp1797:
    000001d0: 	movupd	(%rcx,%r8), %xmm1
    000001d6: 	movlpd	%xmm1, 0x18(%rax,%r8,4)
    000001dd: 	movhpd	%xmm1, 0x38(%rax,%r8,4)
    000001e4: 	addq	$0x10, %r8
    000001e8: 	cmpq	%r8, %r9
    000001eb: 	jne	.Ltmp1797 # Offset: 491
    000001ed: 	movl	%edx, %r8d
    000001f0: 	andl	$-0x2, %r8d
    000001f4: 	andl	$0x1, %edx
    000001f7: 	je	.Ltmp1798 # Offset: 503
    000001f9: 	movl	%r8d, %edx
    000001fc: 	movsd	(%rcx,%rdx,8), %xmm1
    00000201: 	leal	0x3(,%r8,4), %edx
    00000209: 	movslq	%edx, %rdx
    0000020c: 	movsd	%xmm1, (%rax,%rdx,8)
.Ltmp1798:
    00000211: 	addq	-0x18(%rsp), %rax
    00000216: 	addq	%rbx, %rdi
    00000219: 	addq	%rbx, %rsi
    0000021c: 	addq	%rbx, %rcx
    0000021f: 	addl	$-0x80, %r12d
    00000223: 	cmpl	-0x10(%rsp), %r14d
    00000228: 	jl	.Ltmp1799 # Offset: 552
.Ltmp1787:
    0000022e: 	popq	%rbx
    0000022f: 	popq	%rbp
    00000230: 	popq	%r12
    00000232: 	popq	%r13
    00000234: 	popq	%r14
    00000236: 	popq	%r15
    00000238: 	retq # Offset: 568
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp1788:
    00000240: 	movl	%r12d, %edx
    00000243: 	testl	%r12d, %r12d
    00000246: 	jle	.Ltmp1800 # Offset: 582
    0000024c: 	leal	(,%r12,4), %r8d
    00000254: 	movslq	%r8d, %r8
    00000257: 	leaq	(,%r8,8), %rbx
    0000025f: 	movq	%rbx, -0x18(%rsp)
    00000264: 	movslq	%r12d, %rbx
    00000267: 	shlq	$0x3, %rbx
    0000026b: 	jmp	.Ltmp1801 # Offset: 619
.Ltmp1796:
    00000270: 	movl	-0xc(%rsp), %r8d
    00000275: 	movq	%rcx, %rdx
    00000278: 	leaq	0x8(%rcx,%r8,8), %r8
    0000027d: 	nopl	(%rax) # Size: 3
.Ltmp1802:
    00000280: 	movsd	(%rdx), %xmm1
    00000284: 	addq	$0x8, %rdx
    00000288: 	addq	$0x20, %r9
    0000028c: 	movsd	%xmm1, -0x20(%r9)
    00000292: 	cmpq	%rdx, %r8
    00000295: 	jne	.Ltmp1802 # Offset: 661
    00000297: 	jmp	.Ltmp1798 # Offset: 663
    0000029c: 	nopl	(%rax) # Size: 4
.Ltmp1793:
    000002a0: 	movl	-0xc(%rsp), %ebp
    000002a4: 	movq	%rsi, %r9
    000002a7: 	leaq	0x8(%rsi,%rbp,8), %rbp
    000002ac: 	nopl	(%rax) # Size: 4
.Ltmp1803:
    000002b0: 	movsd	(%r9), %xmm1
    000002b5: 	addq	$0x8, %r9
    000002b9: 	addq	$0x20, %r10
    000002bd: 	movsd	%xmm1, -0x20(%r10)
    000002c3: 	cmpq	%r9, %rbp
    000002c6: 	jne	.Ltmp1803 # Offset: 710
    000002c8: 	jmp	.Ltmp1795 # Offset: 712
    000002cd: 	nopl	(%rax) # Size: 3
.Ltmp1790:
    000002d0: 	movl	-0xc(%rsp), %r15d
    000002d5: 	movq	%rdi, %r10
    000002d8: 	leaq	0x8(%rdi,%r15,8), %r15
    000002dd: 	nopl	(%rax) # Size: 3
.Ltmp1804:
    000002e0: 	movsd	(%r10), %xmm1
    000002e5: 	addq	$0x8, %r10
    000002e9: 	addq	$0x20, %r9
    000002ed: 	movsd	%xmm1, -0x20(%r9)
    000002f3: 	cmpq	%r10, %r15
    000002f6: 	jne	.Ltmp1804 # Offset: 758
    000002f8: 	jmp	.Ltmp1792 # Offset: 760
    000002fd: 	nopl	(%rax) # Size: 3
.Ltmp1800:
    00000300: 	leal	(,%r12,4), %edx
    00000308: 	movslq	%edx, %rdx
    0000030b: 	leaq	(,%rdx,8), %rbx
    00000313: 	movq	%rbx, -0x18(%rsp)
    00000318: 	movslq	%r12d, %rbx
    0000031b: 	shlq	$0x3, %rbx
    0000031f: 	jmp	.Ltmp1798 # Offset: 799
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version6IdEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave4to4_version1IdEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 187
  State       : disassembled
  Address     : 0x22d10
  Size        : 0x1a9
  MaxSize     : 0x1b0
  Offset      : 0x22d10
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version1IdEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0186:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp1805 # Offset: 7
    0000000d: 	movq	%rdi, %rax
    00000010: 	movq	%rdx, %rdi
    00000013: 	movslq	%r9d, %rdx
    00000016: 	movq	%rcx, %r10
    00000019: 	leaq	(,%rdx,8), %r11
    00000021: 	shlq	$0x5, %rdx
    00000025: 	pushq	%rbp
    00000026: 	leaq	(%rsi,%r11), %rcx
    0000002a: 	addq	%rax, %rdx
    0000002d: 	pushq	%rbx
    0000002e: 	cmpq	%rcx, %rax
    00000031: 	setae	%cl
    00000034: 	cmpq	%rdx, %rsi
    00000037: 	setae	%bl
    0000003a: 	orl	%ebx, %ecx
    0000003c: 	leaq	(%rdi,%r11), %rbx
    00000040: 	cmpq	%rbx, %rax
    00000043: 	setae	%bl
    00000046: 	cmpq	%rdx, %rdi
    00000049: 	setae	%bpl
    0000004d: 	orl	%ebp, %ebx
    0000004f: 	andl	%ebx, %ecx
    00000051: 	leal	-0x1(%r9), %ebx
    00000055: 	cmpl	$0x1, %ebx
    00000058: 	seta	%bl
    0000005b: 	andl	%ebx, %ecx
    0000005d: 	leaq	(%r10,%r11), %rbx
    00000061: 	cmpq	%rbx, %rax
    00000064: 	setae	%bl
    00000067: 	cmpq	%rdx, %r10
    0000006a: 	setae	%bpl
    0000006e: 	orl	%ebp, %ebx
    00000070: 	testb	%bl, %cl
    00000072: 	je	.Ltmp1806 # Offset: 114
    00000078: 	leaq	(%r8,%r11), %rcx
    0000007c: 	cmpq	%rcx, %rax
    0000007f: 	setae	%cl
    00000082: 	cmpq	%rdx, %r8
    00000085: 	setae	%dl
    00000088: 	orb	%dl, %cl
    0000008a: 	je	.Ltmp1806 # Offset: 138
    00000090: 	movl	%r9d, %ecx
    00000093: 	xorl	%edx, %edx
    00000095: 	shrl	%ecx
    00000097: 	shlq	$0x4, %rcx
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1807:
    000000a0: 	movupd	(%rsi,%rdx), %xmm2
    000000a5: 	movupd	(%rdi,%rdx), %xmm3
    000000aa: 	movupd	(%r10,%rdx), %xmm0
    000000b0: 	movlpd	0x8(%rsi,%rdx), %xmm0
    000000b6: 	movhpd	(%r10,%rdx), %xmm2
    000000bc: 	movhpd	(%r8,%rdx), %xmm3
    000000c2: 	movupd	(%r8,%rdx), %xmm1
    000000c8: 	movlpd	0x8(%rdi,%rdx), %xmm1
    000000ce: 	movapd	%xmm2, %xmm4
    000000d2: 	unpckhpd	%xmm3, %xmm2
    000000d6: 	movups	%xmm2, 0x10(%rax,%rdx,4)
    000000db: 	movapd	%xmm0, %xmm2
    000000df: 	unpcklpd	%xmm3, %xmm4
    000000e3: 	unpckhpd	%xmm1, %xmm0
    000000e7: 	unpcklpd	%xmm1, %xmm2
    000000eb: 	movups	%xmm4, (%rax,%rdx,4)
    000000ef: 	movups	%xmm2, 0x20(%rax,%rdx,4)
    000000f4: 	movups	%xmm0, 0x30(%rax,%rdx,4)
    000000f9: 	addq	$0x10, %rdx
    000000fd: 	cmpq	%rcx, %rdx
    00000100: 	jne	.Ltmp1807 # Offset: 256
    00000102: 	movl	%r9d, %edx
    00000105: 	andl	$-0x2, %edx
    00000108: 	andl	$0x1, %r9d
    0000010c: 	je	.Ltmp1808 # Offset: 268
    0000010e: 	movl	%edx, %ecx
    00000110: 	shll	$0x2, %edx
    00000113: 	movsd	(%rsi,%rcx,8), %xmm0
    00000118: 	movslq	%edx, %rdx
    0000011b: 	movsd	%xmm0, (%rax,%rdx,8)
    00000120: 	movsd	(%rdi,%rcx,8), %xmm0
    00000125: 	addq	$0x1, %rdx
    00000129: 	leaq	(,%rdx,8), %rsi
    00000131: 	movsd	%xmm0, (%rax,%rdx,8)
    00000136: 	movsd	(%r10,%rcx,8), %xmm0
    0000013c: 	movsd	%xmm0, 0x8(%rax,%rsi)
    00000142: 	movsd	(%r8,%rcx,8), %xmm0
    00000148: 	movsd	%xmm0, 0x10(%rax,%rsi)
.Ltmp1808:
    0000014e: 	popq	%rbx
    0000014f: 	popq	%rbp
    00000150: 	retq # Offset: 336
    00000151: 	nopl	(%rax) # Size: 7
.Ltmp1806:
    00000158: 	movl	%r9d, %r9d
    0000015b: 	xorl	%edx, %edx
    0000015d: 	shlq	$0x3, %r9
    00000161: 	nopl	(%rax) # Size: 7
.Ltmp1809:
    00000168: 	movsd	(%rsi,%rdx), %xmm0
    0000016d: 	movsd	%xmm0, (%rax,%rdx,4)
    00000172: 	movsd	(%rdi,%rdx), %xmm0
    00000177: 	movsd	%xmm0, 0x8(%rax,%rdx,4)
    0000017d: 	movsd	(%r10,%rdx), %xmm0
    00000183: 	movsd	%xmm0, 0x10(%rax,%rdx,4)
    00000189: 	movsd	(%r8,%rdx), %xmm0
    0000018f: 	movsd	%xmm0, 0x18(%rax,%rdx,4)
    00000195: 	addq	$0x8, %rdx
    00000199: 	cmpq	%rdx, %r9
    0000019c: 	jne	.Ltmp1809 # Offset: 412
    0000019e: 	popq	%rbx
    0000019f: 	popq	%rbp
    000001a0: 	retq # Offset: 416
    000001a1: 	nopl	(%rax) # Size: 7
.Ltmp1805:
    000001a8: 	retq # Offset: 424
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version1IdEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version2IdEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 188
  State       : disassembled
  Address     : 0x22ec0
  Size        : 0x2d1
  MaxSize     : 0x2e0
  Offset      : 0x22ec0
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version2IdEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0187:
    00000000: 	endbr64
    00000004: 	movslq	%r9d, %r9
    00000007: 	testq	%r9, %r9
    0000000a: 	je	.Ltmp1810 # Offset: 10
    00000010: 	pushq	%r12
    00000012: 	movq	%rdi, %rax
    00000015: 	movq	%rsi, %r10
    00000018: 	movq	%rdx, %rsi
    0000001b: 	pushq	%rbp
    0000001c: 	leaq	-0x1(%r9), %rbp
    00000020: 	movq	%rcx, %rdi
    00000023: 	cmpq	$0xe, %rbp
    00000027: 	pushq	%rbx
    00000028: 	leaq	(,%r9,8), %rbx
    00000030: 	seta	%r11b
    00000034: 	shlq	$0x5, %rbp
    00000038: 	leaq	(%r10,%rbx), %rcx
    0000003c: 	leaq	0x8(%rax,%rbp), %rdx
    00000041: 	cmpq	%rdx, %r10
    00000044: 	setae	%dl
    00000047: 	cmpq	%rcx, %rax
    0000004a: 	setae	%cl
    0000004d: 	orb	%cl, %dl
    0000004f: 	je	.Ltmp1811 # Offset: 79
    00000055: 	testb	%r11b, %r11b
    00000058: 	je	.Ltmp1811 # Offset: 88
    0000005e: 	movq	%r9, %r12
    00000061: 	xorl	%edx, %edx
    00000063: 	xorl	%ecx, %ecx
    00000065: 	shrq	%r12
    00000068: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1812:
    00000070: 	movupd	(%r10,%rdx), %xmm0
    00000076: 	addq	$0x1, %rcx
    0000007a: 	movlpd	%xmm0, (%rax,%rdx,4)
    0000007f: 	movhpd	%xmm0, 0x20(%rax,%rdx,4)
    00000085: 	addq	$0x10, %rdx
    00000089: 	cmpq	%rcx, %r12
    0000008c: 	jne	.Ltmp1812 # Offset: 140
    0000008e: 	movq	%r9, %r12
    00000091: 	andq	$-0x2, %r12
    00000095: 	movq	%r12, %rdx
    00000098: 	leaq	(%r10,%r12,8), %rcx
    0000009c: 	shlq	$0x5, %rdx
    000000a0: 	addq	%rax, %rdx
    000000a3: 	cmpq	%r12, %r9
    000000a6: 	je	.Ltmp1813 # Offset: 166
    000000a8: 	movsd	(%rcx), %xmm0
    000000ac: 	movsd	%xmm0, (%rdx)
.Ltmp1813:
    000000b0: 	leaq	0x10(%rax,%rbp), %rdx
    000000b5: 	leaq	(%rsi,%rbx), %rcx
    000000b9: 	cmpq	%rdx, %rsi
    000000bc: 	leaq	0x8(%rax), %r10
    000000c0: 	setae	%dl
    000000c3: 	cmpq	%rcx, %r10
    000000c6: 	setae	%cl
    000000c9: 	orb	%cl, %dl
    000000cb: 	je	.Ltmp1814 # Offset: 203
    000000d1: 	movq	%r9, %r12
    000000d4: 	xorl	%edx, %edx
    000000d6: 	xorl	%ecx, %ecx
    000000d8: 	shrq	%r12
    000000db: 	testb	%r11b, %r11b
    000000de: 	je	.Ltmp1814 # Offset: 222
    000000e4: 	nopl	(%rax) # Size: 4
.Ltmp1815:
    000000e8: 	movupd	(%rsi,%rdx), %xmm0
    000000ed: 	addq	$0x1, %rcx
    000000f1: 	movlpd	%xmm0, 0x8(%rax,%rdx,4)
    000000f7: 	movhpd	%xmm0, 0x28(%rax,%rdx,4)
    000000fd: 	addq	$0x10, %rdx
    00000101: 	cmpq	%rcx, %r12
    00000104: 	jne	.Ltmp1815 # Offset: 260
    00000106: 	movq	%r9, %r12
    00000109: 	andq	$-0x2, %r12
    0000010d: 	movq	%r12, %rdx
    00000110: 	leaq	(%rsi,%r12,8), %rcx
    00000114: 	shlq	$0x5, %rdx
    00000118: 	addq	%r10, %rdx
    0000011b: 	cmpq	%r12, %r9
    0000011e: 	je	.Ltmp1816 # Offset: 286
    00000120: 	movsd	(%rcx), %xmm0
    00000124: 	movsd	%xmm0, (%rdx)
.Ltmp1816:
    00000128: 	leaq	0x18(%rax,%rbp), %rdx
    0000012d: 	leaq	(%rdi,%rbx), %rcx
    00000131: 	cmpq	%rdx, %rdi
    00000134: 	leaq	0x10(%rax), %rsi
    00000138: 	setae	%dl
    0000013b: 	cmpq	%rcx, %rsi
    0000013e: 	setae	%cl
    00000141: 	orb	%cl, %dl
    00000143: 	je	.Ltmp1817 # Offset: 323
    00000149: 	movq	%r9, %r10
    0000014c: 	xorl	%edx, %edx
    0000014e: 	xorl	%ecx, %ecx
    00000150: 	shrq	%r10
    00000153: 	testb	%r11b, %r11b
    00000156: 	je	.Ltmp1817 # Offset: 342
    0000015c: 	nopl	(%rax) # Size: 4
.Ltmp1818:
    00000160: 	movupd	(%rdi,%rdx), %xmm0
    00000165: 	addq	$0x1, %rcx
    00000169: 	movlpd	%xmm0, 0x10(%rax,%rdx,4)
    0000016f: 	movhpd	%xmm0, 0x30(%rax,%rdx,4)
    00000175: 	addq	$0x10, %rdx
    00000179: 	cmpq	%rcx, %r10
    0000017c: 	jne	.Ltmp1818 # Offset: 380
    0000017e: 	movq	%r9, %r10
    00000181: 	andq	$-0x2, %r10
    00000185: 	movq	%r10, %rdx
    00000188: 	leaq	(%rdi,%r10,8), %rcx
    0000018c: 	shlq	$0x5, %rdx
    00000190: 	addq	%rsi, %rdx
    00000193: 	cmpq	%r10, %r9
    00000196: 	je	.Ltmp1819 # Offset: 406
    00000198: 	movsd	(%rcx), %xmm0
    0000019c: 	movsd	%xmm0, (%rdx)
.Ltmp1819:
    000001a0: 	movq	%r9, %rdx
    000001a3: 	leaq	0x18(%rax), %rsi
    000001a7: 	shlq	$0x5, %rdx
    000001ab: 	addq	%rax, %rdx
    000001ae: 	cmpq	%rdx, %r8
    000001b1: 	setae	%dl
    000001b4: 	addq	%r8, %rbx
    000001b7: 	cmpq	%rbx, %rsi
    000001ba: 	setae	%cl
    000001bd: 	orb	%cl, %dl
    000001bf: 	je	.Ltmp1820 # Offset: 447
    000001c5: 	movq	%r9, %rdi
    000001c8: 	xorl	%edx, %edx
    000001ca: 	xorl	%ecx, %ecx
    000001cc: 	shrq	%rdi
    000001cf: 	testb	%r11b, %r11b
    000001d2: 	je	.Ltmp1820 # Offset: 466
    000001d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1821:
    000001e0: 	movupd	(%r8,%rdx), %xmm0
    000001e6: 	addq	$0x1, %rcx
    000001ea: 	movlpd	%xmm0, 0x18(%rax,%rdx,4)
    000001f0: 	movhpd	%xmm0, 0x38(%rax,%rdx,4)
    000001f6: 	addq	$0x10, %rdx
    000001fa: 	cmpq	%rcx, %rdi
    000001fd: 	jne	.Ltmp1821 # Offset: 509
    000001ff: 	movq	%r9, %rcx
    00000202: 	andq	$-0x2, %rcx
    00000206: 	movq	%rcx, %rax
    00000209: 	leaq	(%r8,%rcx,8), %rdx
    0000020d: 	shlq	$0x5, %rax
    00000211: 	addq	%rsi, %rax
    00000214: 	cmpq	%rcx, %r9
    00000217: 	je	.Ltmp1822 # Offset: 535
    00000219: 	movsd	(%rdx), %xmm0
    0000021d: 	movsd	%xmm0, (%rax)
.Ltmp1822:
    00000221: 	popq	%rbx
    00000222: 	popq	%rbp
    00000223: 	popq	%r12
    00000225: 	retq # Offset: 549
    00000226: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1811:
    00000230: 	movq	%rax, %rcx
    00000233: 	xorl	%edx, %edx
    00000235: 	nopl	(%rax) # Size: 3
.Ltmp1823:
    00000238: 	movsd	(%r10,%rdx,8), %xmm0
    0000023e: 	addq	$0x1, %rdx
    00000242: 	addq	$0x20, %rcx
    00000246: 	movsd	%xmm0, -0x20(%rcx)
    0000024b: 	cmpq	%rdx, %r9
    0000024e: 	jne	.Ltmp1823 # Offset: 590
    00000250: 	jmp	.Ltmp1813 # Offset: 592
    00000255: 	nopl	(%rax) # Size: 3
.Ltmp1814:
    00000258: 	xorl	%edx, %edx
    0000025a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1824:
    00000260: 	movsd	(%rsi,%rdx,8), %xmm0
    00000265: 	addq	$0x1, %rdx
    00000269: 	addq	$0x20, %r10
    0000026d: 	movsd	%xmm0, -0x20(%r10)
    00000273: 	cmpq	%rdx, %r9
    00000276: 	jne	.Ltmp1824 # Offset: 630
    00000278: 	jmp	.Ltmp1816 # Offset: 632
    0000027d: 	nopl	(%rax) # Size: 3
.Ltmp1817:
    00000280: 	xorl	%edx, %edx
    00000282: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1825:
    00000288: 	movsd	(%rdi,%rdx,8), %xmm0
    0000028d: 	addq	$0x1, %rdx
    00000291: 	addq	$0x20, %rsi
    00000295: 	movsd	%xmm0, -0x20(%rsi)
    0000029a: 	cmpq	%rdx, %r9
    0000029d: 	jne	.Ltmp1825 # Offset: 669
    0000029f: 	jmp	.Ltmp1819 # Offset: 671
    000002a4: 	nopl	(%rax) # Size: 4
.Ltmp1820:
    000002a8: 	xorl	%eax, %eax
    000002aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1826:
    000002b0: 	movsd	(%r8,%rax,8), %xmm0
    000002b6: 	addq	$0x1, %rax
    000002ba: 	addq	$0x20, %rsi
    000002be: 	movsd	%xmm0, -0x20(%rsi)
    000002c3: 	cmpq	%rax, %r9
    000002c6: 	jne	.Ltmp1826 # Offset: 710
    000002c8: 	popq	%rbx
    000002c9: 	popq	%rbp
    000002ca: 	popq	%r12
    000002cc: 	retq # Offset: 716
    000002cd: 	nopl	(%rax) # Size: 3
.Ltmp1810:
    000002d0: 	retq # Offset: 720
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version2IdEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version3IdEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 189
  State       : disassembled
  Address     : 0x231a0
  Size        : 0x201
  MaxSize     : 0x210
  Offset      : 0x231a0
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version3IdEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0188:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp1827 # Offset: 7
    0000000d: 	movq	%rdi, %rax
    00000010: 	movslq	%r9d, %r11
    00000013: 	movq	%rdx, %rdi
    00000016: 	pushq	%r12
    00000018: 	leal	-0x1(%r9), %edx
    0000001c: 	pushq	%rbp
    0000001d: 	cmpl	$0x8, %edx
    00000020: 	movq	%r11, %rdx
    00000023: 	pushq	%rbx
    00000024: 	leaq	(,%r11,8), %rbx
    0000002c: 	seta	%bpl
    00000030: 	shlq	$0x5, %rdx
    00000034: 	leaq	-0x10(%rax,%rdx), %r12
    00000039: 	leaq	(%rsi,%rbx), %rdx
    0000003d: 	cmpq	%rdx, %rax
    00000040: 	setae	%r10b
    00000044: 	cmpq	%r12, %rsi
    00000047: 	setae	%dl
    0000004a: 	orl	%edx, %r10d
    0000004d: 	leaq	(%rdi,%rbx), %rdx
    00000051: 	cmpq	%rdx, %rax
    00000054: 	setae	%dl
    00000057: 	cmpq	%r12, %rdi
    0000005a: 	setae	%r12b
    0000005e: 	orl	%r12d, %edx
    00000061: 	testb	%dl, %r10b
    00000064: 	je	.Ltmp1828 # Offset: 100
    0000006a: 	testb	%bpl, %bpl
    0000006d: 	je	.Ltmp1828 # Offset: 109
    00000073: 	movl	%r9d, %r10d
    00000076: 	xorl	%edx, %edx
    00000078: 	shrl	%r10d
    0000007b: 	shlq	$0x4, %r10
    0000007f: 	nop # Size: 1
.Ltmp1829:
    00000080: 	movupd	(%rsi,%rdx), %xmm1
    00000085: 	movupd	(%rdi,%rdx), %xmm0
    0000008a: 	movlpd	%xmm1, (%rax,%rdx,4)
    0000008f: 	movhpd	%xmm1, 0x20(%rax,%rdx,4)
    00000095: 	movlpd	%xmm0, 0x8(%rax,%rdx,4)
    0000009b: 	movhpd	%xmm0, 0x28(%rax,%rdx,4)
    000000a1: 	addq	$0x10, %rdx
    000000a5: 	cmpq	%rdx, %r10
    000000a8: 	jne	.Ltmp1829 # Offset: 168
    000000aa: 	movl	%r9d, %edx
    000000ad: 	andl	$-0x2, %edx
    000000b0: 	testb	$0x1, %r9b
    000000b4: 	je	.Ltmp1830 # Offset: 180
    000000b6: 	movl	%edx, %r10d
    000000b9: 	shll	$0x2, %edx
    000000bc: 	movsd	(%rsi,%r10,8), %xmm0
    000000c2: 	movslq	%edx, %rdx
    000000c5: 	movsd	%xmm0, (%rax,%rdx,8)
    000000ca: 	movsd	(%rdi,%r10,8), %xmm0
    000000d0: 	movsd	%xmm0, 0x8(%rax,%rdx,8)
.Ltmp1830:
    000000d6: 	leaq	0x10(%rax), %rdx
    000000da: 	leaq	(%r8,%rbx), %rsi
    000000de: 	shlq	$0x5, %r11
    000000e2: 	addq	%rax, %r11
    000000e5: 	cmpq	%rsi, %rdx
    000000e8: 	setae	%sil
    000000ec: 	cmpq	%r11, %r8
    000000ef: 	setae	%dil
    000000f3: 	addq	%rcx, %rbx
    000000f6: 	orl	%edi, %esi
    000000f8: 	cmpq	%rbx, %rdx
    000000fb: 	setae	%dl
    000000fe: 	cmpq	%r11, %rcx
    00000101: 	setae	%dil
    00000105: 	orl	%edi, %edx
    00000107: 	testb	%dl, %sil
    0000010a: 	je	.Ltmp1831 # Offset: 266
    00000110: 	testb	%bpl, %bpl
    00000113: 	je	.Ltmp1831 # Offset: 275
    00000119: 	movl	%r9d, %esi
    0000011c: 	xorl	%edx, %edx
    0000011e: 	shrl	%esi
    00000120: 	shlq	$0x4, %rsi
    00000124: 	nopl	(%rax) # Size: 4
.Ltmp1832:
    00000128: 	movupd	(%rcx,%rdx), %xmm1
    0000012d: 	movupd	(%r8,%rdx), %xmm0
    00000133: 	movlpd	%xmm1, 0x10(%rax,%rdx,4)
    00000139: 	movhpd	%xmm1, 0x30(%rax,%rdx,4)
    0000013f: 	movlpd	%xmm0, 0x18(%rax,%rdx,4)
    00000145: 	movhpd	%xmm0, 0x38(%rax,%rdx,4)
    0000014b: 	addq	$0x10, %rdx
    0000014f: 	cmpq	%rdx, %rsi
    00000152: 	jne	.Ltmp1832 # Offset: 338
    00000154: 	movl	%r9d, %edx
    00000157: 	andl	$-0x2, %edx
    0000015a: 	andl	$0x1, %r9d
    0000015e: 	je	.Ltmp1833 # Offset: 350
    00000160: 	movl	%edx, %esi
    00000162: 	leal	0x2(,%rdx,4), %edx
    00000169: 	movsd	(%rcx,%rsi,8), %xmm0
    0000016e: 	movslq	%edx, %rdx
    00000171: 	movsd	%xmm0, (%rax,%rdx,8)
    00000176: 	movsd	(%r8,%rsi,8), %xmm0
    0000017c: 	movsd	%xmm0, 0x8(%rax,%rdx,8)
.Ltmp1833:
    00000182: 	popq	%rbx
    00000183: 	popq	%rbp
    00000184: 	popq	%r12
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1828:
    00000190: 	movl	%r9d, %r10d
    00000193: 	xorl	%edx, %edx
    00000195: 	shlq	$0x3, %r10
    00000199: 	nopl	(%rax) # Size: 7
.Ltmp1834:
    000001a0: 	movsd	(%rsi,%rdx), %xmm0
    000001a5: 	movsd	%xmm0, (%rax,%rdx,4)
    000001aa: 	movsd	(%rdi,%rdx), %xmm0
    000001af: 	movsd	%xmm0, 0x8(%rax,%rdx,4)
    000001b5: 	addq	$0x8, %rdx
    000001b9: 	cmpq	%rdx, %r10
    000001bc: 	jne	.Ltmp1834 # Offset: 444
    000001be: 	jmp	.Ltmp1830 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1831:
    000001c8: 	movl	%r9d, %r9d
    000001cb: 	xorl	%edx, %edx
    000001cd: 	shlq	$0x3, %r9
    000001d1: 	nopl	(%rax) # Size: 7
.Ltmp1835:
    000001d8: 	movsd	(%rcx,%rdx), %xmm0
    000001dd: 	movsd	%xmm0, 0x10(%rax,%rdx,4)
    000001e3: 	movsd	(%r8,%rdx), %xmm0
    000001e9: 	movsd	%xmm0, 0x18(%rax,%rdx,4)
    000001ef: 	addq	$0x8, %rdx
    000001f3: 	cmpq	%r9, %rdx
    000001f6: 	jne	.Ltmp1835 # Offset: 502
    000001f8: 	popq	%rbx
    000001f9: 	popq	%rbp
    000001fa: 	popq	%r12
    000001fc: 	retq # Offset: 508
    000001fd: 	nopl	(%rax) # Size: 3
.Ltmp1827:
    00000200: 	retq # Offset: 512
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version3IdEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version4IdEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 190
  State       : disassembled
  Address     : 0x233b0
  Size        : 0x3de
  MaxSize     : 0x3e0
  Offset      : 0x233b0
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version4IdEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0189:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %rax
    00000009: 	movq	%rdx, %rdi
    0000000c: 	pushq	%r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%r9d, -0x10(%rsp)
    00000019: 	movl	%r9d, -0xc(%rsp)
    0000001e: 	movl	$0x0, -0x1c(%rsp)
    00000026: 	testl	%r9d, %r9d
    00000029: 	jle	.Ltmp1836 # Offset: 41
    0000002f: 	movq	%rsi, %r13
    00000032: 	movq	%rcx, %r10
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp1850:
    00000038: 	subl	$-0x80, -0x1c(%rsp)
    0000003d: 	movl	-0x1c(%rsp), %ebx
    00000041: 	cmpl	-0x10(%rsp), %ebx
    00000045: 	jg	.Ltmp1837 # Offset: 69
    0000004b: 	movq	$0x1000, -0x18(%rsp)
    00000054: 	movl	$0x400, %ebp
    00000059: 	movl	$0x80, %edx
.Ltmp1851:
    0000005e: 	cmpq	$0xf, %rdx
    00000062: 	movl	$0x8, %ebx
    00000067: 	leaq	(,%rdx,8), %r11
    0000006f: 	seta	%r12b
    00000073: 	leaq	-0x1(%rdx), %r9
    00000077: 	testq	%rdx, %rdx
    0000007a: 	cmoveq	%rbx, %r11
    0000007e: 	shlq	$0x5, %r9
    00000082: 	testq	%rdx, %rdx
    00000085: 	leaq	0x8(%r9), %rcx
    00000089: 	cmoveq	%rbx, %rcx
    0000008d: 	addq	%rax, %rcx
    00000090: 	cmpq	%rcx, %r13
    00000093: 	leaq	(%r13,%r11), %rcx
    00000098: 	setae	%sil
    0000009c: 	cmpq	%rcx, %rax
    0000009f: 	setae	%cl
    000000a2: 	orb	%sil, %cl
    000000a5: 	je	.Ltmp1838 # Offset: 165
    000000ab: 	testb	%r12b, %r12b
    000000ae: 	je	.Ltmp1838 # Offset: 174
    000000b4: 	testq	%rdx, %rdx
    000000b7: 	movl	$0x1, %ebx
    000000bc: 	cmovneq	%rdx, %rbx
    000000c0: 	xorl	%ecx, %ecx
    000000c2: 	xorl	%esi, %esi
    000000c4: 	movq	%rbx, %r14
    000000c7: 	shrq	%r14
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1839:
    000000d0: 	movupd	(%r13,%rcx), %xmm0
    000000d7: 	addq	$0x1, %rsi
    000000db: 	movlpd	%xmm0, (%rax,%rcx,4)
    000000e0: 	movhpd	%xmm0, 0x20(%rax,%rcx,4)
    000000e6: 	addq	$0x10, %rcx
    000000ea: 	cmpq	%rsi, %r14
    000000ed: 	jne	.Ltmp1839 # Offset: 237
    000000ef: 	movq	%rbx, %r14
    000000f2: 	andq	$-0x2, %r14
    000000f6: 	movq	%r14, %rcx
    000000f9: 	leaq	(%r13,%r14,8), %rsi
    000000fe: 	shlq	$0x5, %rcx
    00000102: 	addq	%rax, %rcx
    00000105: 	cmpq	%r14, %rbx
    00000108: 	je	.Ltmp1840 # Offset: 264
    0000010a: 	movsd	(%rsi), %xmm0
    0000010e: 	movsd	%xmm0, (%rcx)
.Ltmp1840:
    00000112: 	testq	%rdx, %rdx
    00000115: 	leaq	0x10(%r9), %rcx
    00000119: 	leaq	0x8(%rax), %rbx
    0000011d: 	movl	$0x10, %esi
    00000122: 	cmoveq	%rsi, %rcx
    00000126: 	addq	%rax, %rcx
    00000129: 	cmpq	%rcx, %rdi
    0000012c: 	leaq	(%rdi,%r11), %rcx
    00000130: 	setae	%sil
    00000134: 	cmpq	%rcx, %rbx
    00000137: 	setae	%cl
    0000013a: 	orb	%sil, %cl
    0000013d: 	je	.Ltmp1841 # Offset: 317
    00000143: 	testb	%r12b, %r12b
    00000146: 	je	.Ltmp1841 # Offset: 326
    0000014c: 	testq	%rdx, %rdx
    0000014f: 	movl	$0x1, %r14d
    00000155: 	cmovneq	%rdx, %r14
    00000159: 	xorl	%ecx, %ecx
    0000015b: 	xorl	%esi, %esi
    0000015d: 	movq	%r14, %r15
    00000160: 	shrq	%r15
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1842:
    00000168: 	movupd	(%rdi,%rcx), %xmm0
    0000016d: 	addq	$0x1, %rsi
    00000171: 	movlpd	%xmm0, 0x8(%rax,%rcx,4)
    00000177: 	movhpd	%xmm0, 0x28(%rax,%rcx,4)
    0000017d: 	addq	$0x10, %rcx
    00000181: 	cmpq	%rsi, %r15
    00000184: 	jne	.Ltmp1842 # Offset: 388
    00000186: 	movq	%r14, %r15
    00000189: 	andq	$-0x2, %r15
    0000018d: 	movq	%r15, %rcx
    00000190: 	leaq	(%rdi,%r15,8), %rsi
    00000194: 	shlq	$0x5, %rcx
    00000198: 	addq	%rbx, %rcx
    0000019b: 	cmpq	%r15, %r14
    0000019e: 	je	.Ltmp1843 # Offset: 414
    000001a0: 	movsd	(%rsi), %xmm0
    000001a4: 	movsd	%xmm0, (%rcx)
.Ltmp1843:
    000001a8: 	addq	$0x18, %r9
    000001ac: 	movl	$0x18, %esi
    000001b1: 	leaq	(%r10,%r11), %rcx
    000001b5: 	testq	%rdx, %rdx
    000001b8: 	cmoveq	%rsi, %r9
    000001bc: 	leaq	0x10(%rax), %rbx
    000001c0: 	addq	%rax, %r9
    000001c3: 	cmpq	%r9, %r10
    000001c6: 	setae	%sil
    000001ca: 	cmpq	%rcx, %rbx
    000001cd: 	setae	%cl
    000001d0: 	orb	%sil, %cl
    000001d3: 	je	.Ltmp1844 # Offset: 467
    000001d9: 	testb	%r12b, %r12b
    000001dc: 	je	.Ltmp1844 # Offset: 476
    000001e2: 	testq	%rdx, %rdx
    000001e5: 	movl	$0x1, %r9d
    000001eb: 	cmovneq	%rdx, %r9
    000001ef: 	xorl	%ecx, %ecx
    000001f1: 	xorl	%esi, %esi
    000001f3: 	movq	%r9, %r14
    000001f6: 	shrq	%r14
    000001f9: 	nopl	(%rax) # Size: 7
.Ltmp1845:
    00000200: 	movupd	(%r10,%rcx), %xmm0
    00000206: 	addq	$0x1, %rsi
    0000020a: 	movlpd	%xmm0, 0x10(%rax,%rcx,4)
    00000210: 	movhpd	%xmm0, 0x30(%rax,%rcx,4)
    00000216: 	addq	$0x10, %rcx
    0000021a: 	cmpq	%rsi, %r14
    0000021d: 	jne	.Ltmp1845 # Offset: 541
    0000021f: 	movq	%r9, %r14
    00000222: 	andq	$-0x2, %r14
    00000226: 	movq	%r14, %rcx
    00000229: 	leaq	(%r10,%r14,8), %rsi
    0000022d: 	shlq	$0x5, %rcx
    00000231: 	addq	%rbx, %rcx
    00000234: 	cmpq	%r14, %r9
    00000237: 	je	.Ltmp1846 # Offset: 567
    00000239: 	movsd	(%rsi), %xmm0
    0000023d: 	movsd	%xmm0, (%rcx)
.Ltmp1846:
    00000241: 	movq	%rdx, %rcx
    00000244: 	movl	$0x20, %ebx
    00000249: 	leaq	0x18(%rax), %rsi
    0000024d: 	shlq	$0x5, %rcx
    00000251: 	testq	%rdx, %rdx
    00000254: 	cmoveq	%rbx, %rcx
    00000258: 	addq	%rax, %rcx
    0000025b: 	cmpq	%rcx, %r8
    0000025e: 	setae	%cl
    00000261: 	addq	%r8, %r11
    00000264: 	cmpq	%r11, %rsi
    00000267: 	setae	%r9b
    0000026b: 	orb	%cl, %r9b
    0000026e: 	je	.Ltmp1847 # Offset: 622
    00000274: 	testb	%r12b, %r12b
    00000277: 	je	.Ltmp1847 # Offset: 631
    0000027d: 	testq	%rdx, %rdx
    00000280: 	movl	$0x1, %ebx
    00000285: 	cmoveq	%rbx, %rdx
    00000289: 	xorl	%ecx, %ecx
    0000028b: 	xorl	%r9d, %r9d
    0000028e: 	movq	%rdx, %r11
    00000291: 	shrq	%r11
    00000294: 	nopl	(%rax) # Size: 4
.Ltmp1848:
    00000298: 	movupd	(%r8,%rcx), %xmm0
    0000029e: 	addq	$0x1, %r9
    000002a2: 	movlpd	%xmm0, 0x18(%rax,%rcx,4)
    000002a8: 	movhpd	%xmm0, 0x38(%rax,%rcx,4)
    000002ae: 	addq	$0x10, %rcx
    000002b2: 	cmpq	%r9, %r11
    000002b5: 	jne	.Ltmp1848 # Offset: 693
    000002b7: 	movq	%rdx, %r11
    000002ba: 	andq	$-0x2, %r11
    000002be: 	movq	%r11, %rcx
    000002c1: 	leaq	(%r8,%r11,8), %r9
    000002c5: 	shlq	$0x5, %rcx
    000002c9: 	addq	%rsi, %rcx
    000002cc: 	cmpq	%r11, %rdx
    000002cf: 	je	.Ltmp1849 # Offset: 719
    000002d1: 	movsd	(%r9), %xmm0
    000002d6: 	movsd	%xmm0, (%rcx)
.Ltmp1849:
    000002da: 	addl	$-0x80, -0xc(%rsp)
    000002df: 	movl	-0x10(%rsp), %ebx
    000002e3: 	addq	%rbp, %r13
    000002e6: 	addq	%rbp, %rdi
    000002e9: 	addq	-0x18(%rsp), %rax
    000002ee: 	addq	%rbp, %r10
    000002f1: 	addq	%rbp, %r8
    000002f4: 	cmpl	%ebx, -0x1c(%rsp)
    000002f8: 	jl	.Ltmp1850 # Offset: 760
.Ltmp1836:
    000002fe: 	popq	%rbx
    000002ff: 	popq	%rbp
    00000300: 	popq	%r12
    00000302: 	popq	%r13
    00000304: 	popq	%r14
    00000306: 	popq	%r15
    00000308: 	retq # Offset: 776
    00000309: 	nopl	(%rax) # Size: 7
.Ltmp1837:
    00000310: 	movslq	-0xc(%rsp), %rdx
    00000315: 	leal	(,%rdx,4), %ecx
    0000031c: 	leaq	(,%rdx,8), %rbp
    00000324: 	movslq	%ecx, %rcx
    00000327: 	leaq	(,%rcx,8), %rbx
    0000032f: 	movq	%rbx, -0x18(%rsp)
    00000334: 	testq	%rdx, %rdx
    00000337: 	jne	.Ltmp1851 # Offset: 823
    0000033d: 	jmp	.Ltmp1849 # Offset: 829
    0000033f: 	nop # Size: 1
.Ltmp1847:
    00000340: 	xorl	%ecx, %ecx
    00000342: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1852:
    00000348: 	movsd	(%r8,%rcx,8), %xmm0
    0000034e: 	addq	$0x1, %rcx
    00000352: 	addq	$0x20, %rsi
    00000356: 	movsd	%xmm0, -0x20(%rsi)
    0000035b: 	cmpq	%rdx, %rcx
    0000035e: 	jb	.Ltmp1852 # Offset: 862
    00000360: 	jmp	.Ltmp1849 # Offset: 864
    00000365: 	nopl	(%rax) # Size: 3
.Ltmp1844:
    00000368: 	xorl	%ecx, %ecx
    0000036a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1853:
    00000370: 	movsd	(%r10,%rcx,8), %xmm0
    00000376: 	addq	$0x1, %rcx
    0000037a: 	addq	$0x20, %rbx
    0000037e: 	movsd	%xmm0, -0x20(%rbx)
    00000383: 	cmpq	%rcx, %rdx
    00000386: 	ja	.Ltmp1853 # Offset: 902
    00000388: 	jmp	.Ltmp1846 # Offset: 904
    0000038d: 	nopl	(%rax) # Size: 3
.Ltmp1841:
    00000390: 	xorl	%ecx, %ecx
    00000392: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1854:
    00000398: 	movsd	(%rdi,%rcx,8), %xmm0
    0000039d: 	addq	$0x1, %rcx
    000003a1: 	addq	$0x20, %rbx
    000003a5: 	movsd	%xmm0, -0x20(%rbx)
    000003aa: 	cmpq	%rcx, %rdx
    000003ad: 	ja	.Ltmp1854 # Offset: 941
    000003af: 	jmp	.Ltmp1843 # Offset: 943
    000003b4: 	nopl	(%rax) # Size: 4
.Ltmp1838:
    000003b8: 	movq	%rax, %rsi
    000003bb: 	xorl	%ecx, %ecx
    000003bd: 	nopl	(%rax) # Size: 3
.Ltmp1855:
    000003c0: 	movsd	(%r13,%rcx,8), %xmm0
    000003c7: 	addq	$0x1, %rcx
    000003cb: 	addq	$0x20, %rsi
    000003cf: 	movsd	%xmm0, -0x20(%rsi)
    000003d4: 	cmpq	%rcx, %rdx
    000003d7: 	ja	.Ltmp1855 # Offset: 983
    000003d9: 	jmp	.Ltmp1840 # Offset: 985
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version4IdEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version5IdEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 191
  State       : disassembled
  Address     : 0x23790
  Size        : 0x2c8
  MaxSize     : 0x2d0
  Offset      : 0x23790
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version5IdEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0190:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r9d, -0x10(%rsp)
    00000013: 	testl	%r9d, %r9d
    00000016: 	jle	.Ltmp1856 # Offset: 22
    0000001c: 	movq	%rdi, %rax
    0000001f: 	movl	%r9d, %r15d
    00000022: 	movq	%rsi, %rdi
    00000025: 	xorl	%r12d, %r12d
    00000028: 	movq	%rdx, %rsi
    0000002b: 	movq	%rcx, %rdx
    0000002e: 	nop # Size: 2
.Ltmp1864:
    00000030: 	subl	$-0x80, %r12d
    00000034: 	cmpl	-0x10(%rsp), %r12d
    00000039: 	jg	.Ltmp1857 # Offset: 57
    0000003f: 	movl	$0x400, %r11d
    00000045: 	movl	$0x1000, %r14d
    0000004b: 	movl	$0x80, %ecx
.Ltmp1865:
    00000050: 	movslq	%ecx, %r9
    00000053: 	testl	%ecx, %ecx
    00000055: 	movl	$0x8, %ebp
    0000005a: 	movl	$0x10, %r13d
    00000060: 	leaq	(,%r9,8), %rbx
    00000068: 	movq	%r9, %r10
    0000006b: 	cmovgq	%rbx, %rbp
    0000006f: 	shlq	$0x5, %r10
    00000073: 	subq	$0x10, %r10
    00000077: 	testl	%ecx, %ecx
    00000079: 	cmovleq	%r13, %r10
    0000007d: 	leaq	(%rdi,%rbp), %r13
    00000081: 	addq	%rax, %r10
    00000084: 	cmpq	%r13, %rax
    00000087: 	setae	-0x9(%rsp)
    0000008c: 	cmpq	%r10, %rdi
    0000008f: 	setae	%r13b
    00000093: 	addq	%rsi, %rbp
    00000096: 	orb	-0x9(%rsp), %r13b
    0000009b: 	cmpq	%rbp, %rax
    0000009e: 	setae	%bpl
    000000a2: 	cmpq	%r10, %rsi
    000000a5: 	setae	%r10b
    000000a9: 	orl	%r10d, %ebp
    000000ac: 	testb	%bpl, %r13b
    000000af: 	je	.Ltmp1858 # Offset: 175
    000000b5: 	cmpl	$0x9, %ecx
    000000b8: 	jle	.Ltmp1858 # Offset: 184
    000000be: 	testl	%ecx, %ecx
    000000c0: 	movl	$0x1, %r13d
    000000c6: 	cmovgl	%ecx, %r13d
    000000ca: 	xorl	%r10d, %r10d
    000000cd: 	movl	%r13d, %ebp
    000000d0: 	shrl	%ebp
    000000d2: 	shlq	$0x4, %rbp
    000000d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1859:
    000000e0: 	movupd	(%rdi,%r10), %xmm1
    000000e6: 	movupd	(%rsi,%r10), %xmm0
    000000ec: 	movlpd	%xmm1, (%rax,%r10,4)
    000000f2: 	movhpd	%xmm1, 0x20(%rax,%r10,4)
    000000f9: 	movlpd	%xmm0, 0x8(%rax,%r10,4)
    00000100: 	movhpd	%xmm0, 0x28(%rax,%r10,4)
    00000107: 	addq	$0x10, %r10
    0000010b: 	cmpq	%r10, %rbp
    0000010e: 	jne	.Ltmp1859 # Offset: 270
    00000110: 	movl	%r13d, %r10d
    00000113: 	andl	$-0x2, %r10d
    00000117: 	andl	$0x1, %r13d
    0000011b: 	je	.Ltmp1860 # Offset: 283
    0000011d: 	movl	%r10d, %ebp
    00000120: 	shll	$0x2, %r10d
    00000124: 	movsd	(%rdi,%rbp,8), %xmm0
    00000129: 	movslq	%r10d, %r10
    0000012c: 	movsd	%xmm0, (%rax,%r10,8)
    00000132: 	movsd	(%rsi,%rbp,8), %xmm0
    00000137: 	movsd	%xmm0, 0x8(%rax,%r10,8)
.Ltmp1860:
    0000013e: 	leaq	(%r8,%rbx), %r10
    00000142: 	leaq	0x10(%rax), %rbp
    00000146: 	shlq	$0x5, %r9
    0000014a: 	addq	%rax, %r9
    0000014d: 	cmpq	%r10, %rbp
    00000150: 	setae	%r13b
    00000154: 	cmpq	%r9, %r8
    00000157: 	setae	%r10b
    0000015b: 	addq	%rdx, %rbx
    0000015e: 	orl	%r13d, %r10d
    00000161: 	cmpq	%rbx, %rbp
    00000164: 	setae	%bl
    00000167: 	cmpq	%r9, %rdx
    0000016a: 	setae	%r9b
    0000016e: 	orl	%ebx, %r9d
    00000171: 	testb	%r9b, %r10b
    00000174: 	je	.Ltmp1861 # Offset: 372
    0000017a: 	leal	-0x1(%rcx), %r9d
    0000017e: 	cmpl	$0x8, %r9d
    00000182: 	jbe	.Ltmp1861 # Offset: 386
    00000188: 	movl	%ecx, %r10d
    0000018b: 	xorl	%r9d, %r9d
    0000018e: 	shrl	%r10d
    00000191: 	shlq	$0x4, %r10
    00000195: 	nopl	(%rax) # Size: 3
.Ltmp1862:
    00000198: 	movupd	(%rdx,%r9), %xmm1
    0000019e: 	movupd	(%r8,%r9), %xmm0
    000001a4: 	movlpd	%xmm1, 0x10(%rax,%r9,4)
    000001ab: 	movhpd	%xmm1, 0x30(%rax,%r9,4)
    000001b2: 	movlpd	%xmm0, 0x18(%rax,%r9,4)
    000001b9: 	movhpd	%xmm0, 0x38(%rax,%r9,4)
    000001c0: 	addq	$0x10, %r9
    000001c4: 	cmpq	%r10, %r9
    000001c7: 	jne	.Ltmp1862 # Offset: 455
    000001c9: 	movl	%ecx, %r10d
    000001cc: 	andl	$-0x2, %r10d
    000001d0: 	andl	$0x1, %ecx
    000001d3: 	je	.Ltmp1863 # Offset: 467
    000001d5: 	movl	%r10d, %r9d
    000001d8: 	leal	0x2(,%r10,4), %ecx
    000001e0: 	movsd	(%rdx,%r9,8), %xmm0
    000001e6: 	movslq	%ecx, %rcx
    000001e9: 	movsd	%xmm0, (%rax,%rcx,8)
    000001ee: 	movsd	(%r8,%r9,8), %xmm0
    000001f4: 	movsd	%xmm0, 0x8(%rax,%rcx,8)
.Ltmp1863:
    000001fa: 	addq	%r14, %rax
    000001fd: 	addq	%r11, %rdi
    00000200: 	addq	%r11, %rsi
    00000203: 	addq	%r11, %rdx
    00000206: 	addq	%r11, %r8
    00000209: 	addl	$-0x80, %r15d
    0000020d: 	cmpl	-0x10(%rsp), %r12d
    00000212: 	jl	.Ltmp1864 # Offset: 530
.Ltmp1856:
    00000218: 	popq	%rbx
    00000219: 	popq	%rbp
    0000021a: 	popq	%r12
    0000021c: 	popq	%r13
    0000021e: 	popq	%r14
    00000220: 	popq	%r15
    00000222: 	retq # Offset: 546
    00000223: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1857:
    00000228: 	leal	(,%r15,4), %r9d
    00000230: 	movslq	%r15d, %r11
    00000233: 	movl	%r15d, %ecx
    00000236: 	movslq	%r9d, %r9
    00000239: 	shlq	$0x3, %r11
    0000023d: 	leaq	(,%r9,8), %r14
    00000245: 	testl	%r15d, %r15d
    00000248: 	jg	.Ltmp1865 # Offset: 584
    0000024e: 	jmp	.Ltmp1863 # Offset: 590
.Ltmp1861:
    00000250: 	movl	%ecx, %ecx
    00000252: 	xorl	%r9d, %r9d
    00000255: 	shlq	$0x3, %rcx
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp1866:
    00000260: 	movsd	(%rdx,%r9), %xmm0
    00000266: 	movsd	%xmm0, 0x10(%rax,%r9,4)
    0000026d: 	movsd	(%r8,%r9), %xmm0
    00000273: 	movsd	%xmm0, 0x18(%rax,%r9,4)
    0000027a: 	addq	$0x8, %r9
    0000027e: 	cmpq	%r9, %rcx
    00000281: 	jne	.Ltmp1866 # Offset: 641
    00000283: 	jmp	.Ltmp1863 # Offset: 643
    00000288: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1858:
    00000290: 	movq	%rax, %rbp
    00000293: 	xorl	%r10d, %r10d
    00000296: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1867:
    000002a0: 	movsd	(%rdi,%r10,8), %xmm0
    000002a6: 	addq	$0x20, %rbp
    000002aa: 	movsd	%xmm0, -0x20(%rbp)
    000002af: 	movsd	(%rsi,%r10,8), %xmm0
    000002b5: 	addq	$0x1, %r10
    000002b9: 	movsd	%xmm0, -0x18(%rbp)
    000002be: 	cmpl	%r10d, %ecx
    000002c1: 	jg	.Ltmp1867 # Offset: 705
    000002c3: 	jmp	.Ltmp1860 # Offset: 707
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version5IdEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version6IdEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 192
  State       : disassembled
  Address     : 0x23a60
  Size        : 0x3cc
  MaxSize     : 0x3d0
  Offset      : 0x23a60
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version6IdEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0191:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movl	%r9d, -0x1c(%rsp)
    00000013: 	movl	%r9d, -0x10(%rsp)
    00000018: 	testl	%r9d, %r9d
    0000001b: 	jle	.Ltmp1868 # Offset: 27
    00000021: 	movq	%rdi, %rax
    00000024: 	movq	%r8, %r12
    00000027: 	movq	%rdx, %rdi
    0000002a: 	xorl	%r14d, %r14d
    0000002d: 	nopl	(%rax) # Size: 3
.Ltmp1882:
    00000030: 	subl	$-0x80, %r14d
    00000034: 	cmpl	-0x1c(%rsp), %r14d
    00000039: 	jg	.Ltmp1869 # Offset: 57
    0000003f: 	movq	$0x1000, -0x18(%rsp)
    00000048: 	movl	$0x400, %ebx
    0000004d: 	movl	$0x80, %edx
.Ltmp1884:
    00000052: 	movslq	%edx, %r8
    00000055: 	movl	$0x8, %r15d
    0000005b: 	leaq	-0x1(%r8), %rbp
    0000005f: 	leaq	(,%r8,8), %r11
    00000067: 	shlq	$0x5, %rbp
    0000006b: 	testl	%edx, %edx
    0000006d: 	leaq	0x8(%rbp), %r9
    00000071: 	cmovleq	%r15, %r9
    00000075: 	addq	%rax, %r9
    00000078: 	cmpq	%r9, %rsi
    0000007b: 	movl	$0x8, %r9d
    00000081: 	setae	%r10b
    00000085: 	testl	%edx, %edx
    00000087: 	cmovgq	%r11, %r9
    0000008b: 	addq	%rsi, %r9
    0000008e: 	cmpq	%r9, %rax
    00000091: 	setae	%r9b
    00000095: 	orb	%r10b, %r9b
    00000098: 	je	.Ltmp1870 # Offset: 152
    0000009e: 	cmpl	$0xf, %edx
    000000a1: 	jle	.Ltmp1870 # Offset: 161
    000000a7: 	testl	%edx, %edx
    000000a9: 	movl	$0x1, %r13d
    000000af: 	cmovgl	%edx, %r13d
    000000b3: 	xorl	%r9d, %r9d
    000000b6: 	movl	%r13d, %r10d
    000000b9: 	shrl	%r10d
    000000bc: 	shlq	$0x4, %r10
.Ltmp1871:
    000000c0: 	movupd	(%rsi,%r9), %xmm0
    000000c6: 	movlpd	%xmm0, (%rax,%r9,4)
    000000cc: 	movhpd	%xmm0, 0x20(%rax,%r9,4)
    000000d3: 	addq	$0x10, %r9
    000000d7: 	cmpq	%r9, %r10
    000000da: 	jne	.Ltmp1871 # Offset: 218
    000000dc: 	movl	%r13d, %r9d
    000000df: 	andl	$-0x2, %r9d
    000000e3: 	andl	$0x1, %r13d
    000000e7: 	je	.Ltmp1872 # Offset: 231
    000000e9: 	movl	%r9d, %r10d
    000000ec: 	shll	$0x2, %r9d
    000000f0: 	movsd	(%rsi,%r10,8), %xmm0
    000000f6: 	movslq	%r9d, %r9
    000000f9: 	movsd	%xmm0, (%rax,%r9,8)
.Ltmp1872:
    000000ff: 	leal	-0x1(%rdx), %r15d
    00000103: 	leaq	0x10(%rax,%rbp), %r10
    00000108: 	cmpl	$0xe, %r15d
    0000010c: 	leaq	0x8(%rax), %r9
    00000110: 	movl	%r15d, -0xc(%rsp)
    00000115: 	seta	%r13b
    00000119: 	cmpq	%r10, %rdi
    0000011c: 	leaq	(%rdi,%r11), %r10
    00000120: 	setae	%r15b
    00000124: 	cmpq	%r10, %r9
    00000127: 	setae	%r10b
    0000012b: 	orb	%r15b, %r10b
    0000012e: 	je	.Ltmp1873 # Offset: 302
    00000134: 	testb	%r13b, %r13b
    00000137: 	je	.Ltmp1873 # Offset: 311
    0000013d: 	movl	%edx, %r10d
    00000140: 	xorl	%r9d, %r9d
    00000143: 	shrl	%r10d
    00000146: 	shlq	$0x4, %r10
    0000014a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1874:
    00000150: 	movupd	(%rdi,%r9), %xmm0
    00000156: 	movlpd	%xmm0, 0x8(%rax,%r9,4)
    0000015d: 	movhpd	%xmm0, 0x28(%rax,%r9,4)
    00000164: 	addq	$0x10, %r9
    00000168: 	cmpq	%r10, %r9
    0000016b: 	jne	.Ltmp1874 # Offset: 363
    0000016d: 	movl	%edx, %r9d
    00000170: 	andl	$-0x2, %r9d
    00000174: 	testb	$0x1, %dl
    00000177: 	je	.Ltmp1875 # Offset: 375
    00000179: 	movl	%r9d, %r10d
    0000017c: 	leal	0x1(,%r9,4), %r9d
    00000184: 	movsd	(%rdi,%r10,8), %xmm0
    0000018a: 	movslq	%r9d, %r9
    0000018d: 	movsd	%xmm0, (%rax,%r9,8)
.Ltmp1875:
    00000193: 	leaq	0x18(%rax,%rbp), %r9
    00000198: 	leaq	0x10(%rax), %r10
    0000019c: 	cmpq	%r9, %rcx
    0000019f: 	leaq	(%rcx,%r11), %r9
    000001a3: 	setae	%bpl
    000001a7: 	cmpq	%r9, %r10
    000001aa: 	setae	%r9b
    000001ae: 	orb	%bpl, %r9b
    000001b1: 	je	.Ltmp1876 # Offset: 433
    000001b7: 	testb	%r13b, %r13b
    000001ba: 	je	.Ltmp1876 # Offset: 442
    000001c0: 	movl	%edx, %r10d
    000001c3: 	xorl	%r9d, %r9d
    000001c6: 	shrl	%r10d
    000001c9: 	shlq	$0x4, %r10
    000001cd: 	nopl	(%rax) # Size: 3
.Ltmp1877:
    000001d0: 	movupd	(%rcx,%r9), %xmm0
    000001d6: 	movlpd	%xmm0, 0x10(%rax,%r9,4)
    000001dd: 	movhpd	%xmm0, 0x30(%rax,%r9,4)
    000001e4: 	addq	$0x10, %r9
    000001e8: 	cmpq	%r9, %r10
    000001eb: 	jne	.Ltmp1877 # Offset: 491
    000001ed: 	movl	%edx, %r9d
    000001f0: 	andl	$-0x2, %r9d
    000001f4: 	testb	$0x1, %dl
    000001f7: 	je	.Ltmp1878 # Offset: 503
    000001f9: 	movl	%r9d, %r10d
    000001fc: 	leal	0x2(,%r9,4), %r9d
    00000204: 	movsd	(%rcx,%r10,8), %xmm0
    0000020a: 	movslq	%r9d, %r9
    0000020d: 	movsd	%xmm0, (%rax,%r9,8)
.Ltmp1878:
    00000213: 	shlq	$0x5, %r8
    00000217: 	leaq	0x18(%rax), %r9
    0000021b: 	addq	%rax, %r8
    0000021e: 	cmpq	%r8, %r12
    00000221: 	setae	%r8b
    00000225: 	addq	%r12, %r11
    00000228: 	cmpq	%r11, %r9
    0000022b: 	setae	%r10b
    0000022f: 	orb	%r8b, %r10b
    00000232: 	je	.Ltmp1879 # Offset: 562
    00000238: 	testb	%r13b, %r13b
    0000023b: 	je	.Ltmp1879 # Offset: 571
    00000241: 	movl	%edx, %r9d
    00000244: 	xorl	%r8d, %r8d
    00000247: 	shrl	%r9d
    0000024a: 	shlq	$0x4, %r9
    0000024e: 	nop # Size: 2
.Ltmp1880:
    00000250: 	movupd	(%r12,%r8), %xmm0
    00000256: 	movlpd	%xmm0, 0x18(%rax,%r8,4)
    0000025d: 	movhpd	%xmm0, 0x38(%rax,%r8,4)
    00000264: 	addq	$0x10, %r8
    00000268: 	cmpq	%r9, %r8
    0000026b: 	jne	.Ltmp1880 # Offset: 619
    0000026d: 	movl	%edx, %r8d
    00000270: 	andl	$-0x2, %r8d
    00000274: 	andl	$0x1, %edx
    00000277: 	je	.Ltmp1881 # Offset: 631
    00000279: 	movl	%r8d, %edx
    0000027c: 	movsd	(%r12,%rdx,8), %xmm0
    00000282: 	leal	0x3(,%r8,4), %edx
    0000028a: 	movslq	%edx, %rdx
    0000028d: 	movsd	%xmm0, (%rax,%rdx,8)
.Ltmp1881:
    00000292: 	addl	$-0x80, -0x10(%rsp)
    00000297: 	addq	-0x18(%rsp), %rax
    0000029c: 	addq	%rbx, %rsi
    0000029f: 	addq	%rbx, %rdi
    000002a2: 	addq	%rbx, %rcx
    000002a5: 	addq	%rbx, %r12
    000002a8: 	cmpl	-0x1c(%rsp), %r14d
    000002ad: 	jl	.Ltmp1882 # Offset: 685
.Ltmp1868:
    000002b3: 	popq	%rbx
    000002b4: 	popq	%rbp
    000002b5: 	popq	%r12
    000002b7: 	popq	%r13
    000002b9: 	popq	%r14
    000002bb: 	popq	%r15
    000002bd: 	retq # Offset: 701
    000002be: 	nop # Size: 2
.Ltmp1869:
    000002c0: 	movslq	-0x10(%rsp), %rbx
    000002c5: 	movl	%ebx, %edx
    000002c7: 	testl	%ebx, %ebx
    000002c9: 	jle	.Ltmp1883 # Offset: 713
    000002cf: 	leal	(,%rbx,4), %r8d
    000002d7: 	shlq	$0x3, %rbx
    000002db: 	movslq	%r8d, %r8
    000002de: 	leaq	(,%r8,8), %r15
    000002e6: 	movq	%r15, -0x18(%rsp)
    000002eb: 	jmp	.Ltmp1884 # Offset: 747
.Ltmp1879:
    000002f0: 	movl	-0xc(%rsp), %r8d
    000002f5: 	movq	%r12, %rdx
    000002f8: 	leaq	0x8(%r12,%r8,8), %r8
    000002fd: 	nopl	(%rax) # Size: 3
.Ltmp1885:
    00000300: 	movsd	(%rdx), %xmm0
    00000304: 	addq	$0x8, %rdx
    00000308: 	addq	$0x20, %r9
    0000030c: 	movsd	%xmm0, -0x20(%r9)
    00000312: 	cmpq	%rdx, %r8
    00000315: 	jne	.Ltmp1885 # Offset: 789
    00000317: 	jmp	.Ltmp1881 # Offset: 791
    0000031c: 	nopl	(%rax) # Size: 4
.Ltmp1873:
    00000320: 	movl	-0xc(%rsp), %r15d
    00000325: 	movq	%rdi, %r10
    00000328: 	leaq	0x8(%rdi,%r15,8), %r15
    0000032d: 	nopl	(%rax) # Size: 3
.Ltmp1886:
    00000330: 	movsd	(%r10), %xmm0
    00000335: 	addq	$0x8, %r10
    00000339: 	addq	$0x20, %r9
    0000033d: 	movsd	%xmm0, -0x20(%r9)
    00000343: 	cmpq	%r15, %r10
    00000346: 	jne	.Ltmp1886 # Offset: 838
    00000348: 	jmp	.Ltmp1875 # Offset: 840
    0000034d: 	nopl	(%rax) # Size: 3
.Ltmp1870:
    00000350: 	xorl	%r9d, %r9d
    00000353: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1887:
    00000358: 	movsd	(%rsi,%r9,8), %xmm0
    0000035e: 	movq	%r9, %r10
    00000361: 	addq	$0x1, %r9
    00000365: 	shlq	$0x5, %r10
    00000369: 	movsd	%xmm0, (%rax,%r10)
    0000036f: 	cmpl	%r9d, %edx
    00000372: 	jg	.Ltmp1887 # Offset: 882
    00000374: 	jmp	.Ltmp1872 # Offset: 884
    00000379: 	nopl	(%rax) # Size: 7
.Ltmp1876:
    00000380: 	movl	-0xc(%rsp), %ebp
    00000384: 	movq	%rcx, %r9
    00000387: 	leaq	0x8(%rcx,%rbp,8), %rbp
    0000038c: 	nopl	(%rax) # Size: 4
.Ltmp1888:
    00000390: 	movsd	(%r9), %xmm0
    00000395: 	addq	$0x8, %r9
    00000399: 	addq	$0x20, %r10
    0000039d: 	movsd	%xmm0, -0x20(%r10)
    000003a3: 	cmpq	%r9, %rbp
    000003a6: 	jne	.Ltmp1888 # Offset: 934
    000003a8: 	jmp	.Ltmp1878 # Offset: 936
    000003ad: 	nopl	(%rax) # Size: 3
.Ltmp1883:
    000003b0: 	leal	(,%rbx,4), %edx
    000003b7: 	shlq	$0x3, %rbx
    000003bb: 	movslq	%edx, %rdx
    000003be: 	shlq	$0x3, %rdx
    000003c2: 	movq	%rdx, -0x18(%rsp)
    000003c7: 	jmp	.Ltmp1881 # Offset: 967
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version6IdEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave2to2_version1IeEvPT_PKS0_S3_i" after disassembly {
  Number      : 193
  State       : disassembled
  Address     : 0x23e30
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x23e30
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version1IeEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0192:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp1889 # Offset: 6
    00000008: 	movslq	%ecx, %rcx
    0000000b: 	xorl	%eax, %eax
    0000000d: 	shlq	$0x4, %rcx
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp1890:
    00000018: 	fldt	(%rsi,%rax)
    0000001b: 	fstpt	(%rdi,%rax,2)
    0000001e: 	fldt	(%rdx,%rax)
    00000021: 	fstpt	0x10(%rdi,%rax,2)
    00000025: 	addq	$0x10, %rax
    00000029: 	cmpq	%rax, %rcx
    0000002c: 	jne	.Ltmp1890 # Offset: 44
.Ltmp1889:
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version1IeEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version2IeEvPT_PKS0_S3_i" after disassembly {
  Number      : 194
  State       : disassembled
  Address     : 0x23e60
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x23e60
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version2IeEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0193:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp1891 # Offset: 6
    00000008: 	movslq	%ecx, %rcx
    0000000b: 	xorl	%eax, %eax
    0000000d: 	shlq	$0x4, %rcx
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp1892:
    00000018: 	fldt	(%rsi,%rax)
    0000001b: 	fstpt	(%rdi,%rax,2)
    0000001e: 	fldt	(%rdx,%rax)
    00000021: 	fstpt	0x10(%rdi,%rax,2)
    00000025: 	addq	$0x10, %rax
    00000029: 	cmpq	%rcx, %rax
    0000002c: 	jne	.Ltmp1892 # Offset: 44
.Ltmp1891:
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version2IeEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version3IeEvPT_PKS0_S3_i" after disassembly {
  Number      : 195
  State       : disassembled
  Address     : 0x23e90
  Size        : 0x51
  MaxSize     : 0x60
  Offset      : 0x23e90
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version3IeEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0194:
    00000000: 	endbr64
    00000004: 	movslq	%ecx, %rcx
    00000007: 	movq	%rdi, %r9
    0000000a: 	xorl	%eax, %eax
    0000000c: 	xorl	%edi, %edi
    0000000e: 	testq	%rcx, %rcx
    00000011: 	je	.Ltmp1893 # Offset: 17
    00000013: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1894:
    00000018: 	fldt	(%rsi,%rax)
    0000001b: 	movq	%rdi, %r8
    0000001e: 	leaq	0x1(%rdi), %rdi
    00000022: 	fstpt	(%r9,%rax,2)
    00000026: 	addq	$0x10, %rax
    0000002a: 	cmpq	%rdi, %rcx
    0000002d: 	jne	.Ltmp1894 # Offset: 45
    0000002f: 	xorl	%eax, %eax
    00000031: 	xorl	%ecx, %ecx
    00000033: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1895:
    00000038: 	fldt	(%rdx,%rax)
    0000003b: 	movq	%rcx, %rsi
    0000003e: 	addq	$0x1, %rcx
    00000042: 	fstpt	0x10(%r9,%rax,2)
    00000047: 	addq	$0x10, %rax
    0000004b: 	cmpq	%r8, %rsi
    0000004e: 	jne	.Ltmp1895 # Offset: 78
.Ltmp1893:
    00000050: 	retq # Offset: 80
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version3IeEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version4IeEvPT_PKS0_S3_i" after disassembly {
  Number      : 196
  State       : disassembled
  Address     : 0x23ef0
  Size        : 0xad
  MaxSize     : 0xb0
  Offset      : 0x23ef0
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version4IeEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0195:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp1896 # Offset: 6
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %r9
    00000010: 	movq	%rdx, %r8
    00000013: 	movl	%ecx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	xorl	%r10d, %r10d
    00000019: 	movl	%ecx, %ebx
    0000001b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1900:
    00000020: 	subl	$-0x80, %r10d
    00000024: 	cmpl	%ebp, %r10d
    00000027: 	jg	.Ltmp1897 # Offset: 39
    00000029: 	movl	$0x800, %ecx
    0000002e: 	movl	$0x1000, %r11d
    00000034: 	movl	$0x80, %esi
.Ltmp1901:
    00000039: 	xorl	%eax, %eax
    0000003b: 	xorl	%edx, %edx
    0000003d: 	nopl	(%rax) # Size: 3
.Ltmp1898:
    00000040: 	fldt	(%r9,%rax)
    00000044: 	addq	$0x1, %rdx
    00000048: 	fstpt	(%rdi,%rax,2)
    0000004b: 	addq	$0x10, %rax
    0000004f: 	cmpq	%rdx, %rsi
    00000052: 	ja	.Ltmp1898 # Offset: 82
    00000054: 	xorl	%eax, %eax
    00000056: 	xorl	%edx, %edx
    00000058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1899:
    00000060: 	fldt	(%r8,%rax)
    00000064: 	addq	$0x1, %rdx
    00000068: 	fstpt	0x10(%rdi,%rax,2)
    0000006c: 	addq	$0x10, %rax
    00000070: 	cmpq	%rsi, %rdx
    00000073: 	jb	.Ltmp1899 # Offset: 115
.Ltmp1902:
    00000075: 	addq	%r11, %rdi
    00000078: 	addq	%rcx, %r9
    0000007b: 	addq	%rcx, %r8
    0000007e: 	addl	$-0x80, %ebx
    00000081: 	cmpl	%ebp, %r10d
    00000084: 	jl	.Ltmp1900 # Offset: 132
    00000086: 	popq	%rbx
    00000087: 	popq	%rbp
    00000088: 	retq # Offset: 136
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp1897:
    00000090: 	movslq	%ebx, %rsi
    00000093: 	leal	(%rbx,%rbx), %r11d
    00000097: 	movslq	%r11d, %r11
    0000009a: 	movq	%rsi, %rcx
    0000009d: 	shlq	$0x4, %r11
    000000a1: 	shlq	$0x4, %rcx
    000000a5: 	testq	%rsi, %rsi
    000000a8: 	jne	.Ltmp1901 # Offset: 168
    000000aa: 	jmp	.Ltmp1902 # Offset: 170
.Ltmp1896:
    000000ac: 	retq # Offset: 172
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version4IeEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version5IeEvPT_PKS0_S3_i" after disassembly {
  Number      : 197
  State       : disassembled
  Address     : 0x23fa0
  Size        : 0xc1
  MaxSize     : 0xd0
  Offset      : 0x23fa0
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version5IeEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0196:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp1903 # Offset: 6
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdx, %r9
    00000010: 	movl	%ecx, %ebp
    00000012: 	movl	%ecx, %r11d
    00000015: 	pushq	%rbx
    00000016: 	xorl	%r8d, %r8d
    00000019: 	nopl	(%rax) # Size: 7
.Ltmp1907:
    00000020: 	subl	$-0x80, %r8d
    00000024: 	cmpl	%ebp, %r8d
    00000027: 	jg	.Ltmp1904 # Offset: 39
    00000029: 	movl	$0x800, %r10d
    0000002f: 	movl	$0x1000, %ebx
    00000034: 	movl	$0x80, %ecx
.Ltmp1908:
    00000039: 	xorl	%eax, %eax
    0000003b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1905:
    00000040: 	movq	%rax, %rdx
    00000043: 	shlq	$0x4, %rdx
    00000047: 	fldt	(%rsi,%rdx)
    0000004a: 	movq	%rax, %rdx
    0000004d: 	addq	$0x1, %rax
    00000051: 	shlq	$0x5, %rdx
    00000055: 	fstpt	(%rdi,%rdx)
    00000058: 	cmpl	%eax, %ecx
    0000005a: 	jg	.Ltmp1905 # Offset: 90
    0000005c: 	subl	$0x1, %ecx
    0000005f: 	movq	%r9, %rax
    00000062: 	leaq	0x10(%rdi), %rdx
    00000066: 	shlq	$0x4, %rcx
    0000006a: 	leaq	0x10(%r9,%rcx), %rcx
    0000006f: 	nop # Size: 1
.Ltmp1906:
    00000070: 	fldt	(%rax)
    00000072: 	addq	$0x10, %rax
    00000076: 	addq	$0x20, %rdx
    0000007a: 	fstpt	-0x20(%rdx)
    0000007d: 	cmpq	%rax, %rcx
    00000080: 	jne	.Ltmp1906 # Offset: 128
.Ltmp1909:
    00000082: 	addq	%rbx, %rdi
    00000085: 	addq	%r10, %rsi
    00000088: 	addq	%r10, %r9
    0000008b: 	addl	$-0x80, %r11d
    0000008f: 	cmpl	%ebp, %r8d
    00000092: 	jl	.Ltmp1907 # Offset: 146
    00000094: 	popq	%rbx
    00000095: 	popq	%rbp
    00000096: 	retq # Offset: 150
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1904:
    000000a0: 	leal	(%r11,%r11), %ebx
    000000a4: 	movslq	%r11d, %r10
    000000a7: 	movl	%r11d, %ecx
    000000aa: 	movslq	%ebx, %rbx
    000000ad: 	shlq	$0x4, %r10
    000000b1: 	shlq	$0x4, %rbx
    000000b5: 	testl	%r11d, %r11d
    000000b8: 	jg	.Ltmp1908 # Offset: 184
    000000be: 	jmp	.Ltmp1909 # Offset: 190
.Ltmp1903:
    000000c0: 	retq # Offset: 192
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version5IeEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version6IeEvPT_PKS0_S3_i" after disassembly {
  Number      : 198
  State       : disassembled
  Address     : 0x24070
  Size        : 0xbd
  MaxSize     : 0xc0
  Offset      : 0x24070
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version6IeEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0197:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp1910 # Offset: 6
    0000000c: 	pushq	%r12
    0000000e: 	movl	%ecx, %r10d
    00000011: 	movl	%ecx, %r12d
    00000014: 	xorl	%r8d, %r8d
    00000017: 	pushq	%rbp
    00000018: 	movq	%rdx, %rbp
    0000001b: 	pushq	%rbx
    0000001c: 	movq	%rsi, %rbx
    0000001f: 	nop # Size: 1
.Ltmp1914:
    00000020: 	subl	$-0x80, %r8d
    00000024: 	cmpl	%r12d, %r8d
    00000027: 	jg	.Ltmp1911 # Offset: 39
    00000029: 	movl	$0x800, %r9d
    0000002f: 	movl	$0x1000, %r11d
    00000035: 	movl	$0x80, %esi
.Ltmp1915:
    0000003a: 	movq	%rbx, %rcx
    0000003d: 	movq	%rdi, %rdx
    00000040: 	xorl	%eax, %eax
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1912:
    00000048: 	fldt	(%rcx)
    0000004a: 	addl	$0x1, %eax
    0000004d: 	addq	$0x20, %rdx
    00000051: 	addq	$0x10, %rcx
    00000055: 	fstpt	-0x20(%rdx)
    00000058: 	cmpl	%eax, %esi
    0000005a: 	jg	.Ltmp1912 # Offset: 90
    0000005c: 	leal	-0x1(%rsi), %ecx
    0000005f: 	leaq	0x10(%rdi), %rax
    00000063: 	movq	%rbp, %rdx
    00000066: 	shlq	$0x5, %rcx
    0000006a: 	leaq	0x30(%rdi,%rcx), %rcx
    0000006f: 	nop # Size: 1
.Ltmp1913:
    00000070: 	fldt	(%rdx)
    00000072: 	addq	$0x20, %rax
    00000076: 	addq	$0x10, %rdx
    0000007a: 	fstpt	-0x20(%rax)
    0000007d: 	cmpq	%rcx, %rax
    00000080: 	jne	.Ltmp1913 # Offset: 128
.Ltmp1916:
    00000082: 	addq	%r11, %rdi
    00000085: 	addq	%r9, %rbx
    00000088: 	addq	%r9, %rbp
    0000008b: 	addl	$-0x80, %r10d
    0000008f: 	cmpl	%r12d, %r8d
    00000092: 	jl	.Ltmp1914 # Offset: 146
    00000094: 	popq	%rbx
    00000095: 	popq	%rbp
    00000096: 	popq	%r12
    00000098: 	retq # Offset: 152
    00000099: 	nopl	(%rax) # Size: 7
.Ltmp1911:
    000000a0: 	leal	(%r10,%r10), %r11d
    000000a4: 	movslq	%r10d, %r9
    000000a7: 	movl	%r10d, %esi
    000000aa: 	movslq	%r11d, %r11
    000000ad: 	shlq	$0x4, %r9
    000000b1: 	shlq	$0x4, %r11
    000000b5: 	testl	%r10d, %r10d
    000000b8: 	jg	.Ltmp1915 # Offset: 184
    000000ba: 	jmp	.Ltmp1916 # Offset: 186
.Ltmp1910:
    000000bc: 	retq # Offset: 188
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version6IeEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version7IeEvPT_PKS0_S3_i" after disassembly {
  Number      : 199
  State       : disassembled
  Address     : 0x24130
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x24130
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version7IeEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0198:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp1917 # Offset: 6
    00000008: 	movslq	%ecx, %rcx
    0000000b: 	xorl	%eax, %eax
    0000000d: 	shlq	$0x4, %rcx
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp1918:
    00000018: 	fldt	(%rsi,%rax)
    0000001b: 	fstpt	(%rdi,%rax,2)
    0000001e: 	fldt	(%rdx,%rax)
    00000021: 	fstpt	0x10(%rdi,%rax,2)
    00000025: 	addq	$0x10, %rax
    00000029: 	cmpq	%rax, %rcx
    0000002c: 	jne	.Ltmp1918 # Offset: 44
.Ltmp1917:
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version7IeEvPT_PKS0_S3_i"

Binary Function "_Z23interleave2to2_version8IeEvPT_PKS0_S3_i" after disassembly {
  Number      : 200
  State       : disassembled
  Address     : 0x24160
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x24160
  Section     : .text
  Orc Section : .local.text._Z23interleave2to2_version8IeEvPT_PKS0_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0199:
    00000000: 	endbr64
    00000004: 	testl	%ecx, %ecx
    00000006: 	jle	.Ltmp1919 # Offset: 6
    00000008: 	movslq	%ecx, %rcx
    0000000b: 	xorl	%eax, %eax
    0000000d: 	shlq	$0x4, %rcx
    00000011: 	nopl	(%rax) # Size: 7
.Ltmp1920:
    00000018: 	fldt	(%rsi,%rax)
    0000001b: 	fstpt	(%rdi,%rax,2)
    0000001e: 	fldt	(%rdx,%rax)
    00000021: 	fstpt	0x10(%rdi,%rax,2)
    00000025: 	addq	$0x10, %rax
    00000029: 	cmpq	%rax, %rcx
    0000002c: 	jne	.Ltmp1920 # Offset: 44
.Ltmp1919:
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave2to2_version8IeEvPT_PKS0_S3_i"

Binary Function "_Z23interleave3to3_version1IeEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 201
  State       : disassembled
  Address     : 0x24190
  Size        : 0x38
  MaxSize     : 0x40
  Offset      : 0x24190
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version1IeEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0200:
    00000000: 	endbr64
    00000004: 	testl	%r8d, %r8d
    00000007: 	jle	.Ltmp1921 # Offset: 7
    00000009: 	movslq	%r8d, %r8
    0000000c: 	xorl	%eax, %eax
    0000000e: 	shlq	$0x4, %r8
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1922:
    00000018: 	fldt	(%rsi,%rax)
    0000001b: 	addq	$0x30, %rdi
    0000001f: 	fstpt	-0x30(%rdi)
    00000022: 	fldt	(%rdx,%rax)
    00000025: 	fstpt	-0x20(%rdi)
    00000028: 	fldt	(%rcx,%rax)
    0000002b: 	addq	$0x10, %rax
    0000002f: 	fstpt	-0x10(%rdi)
    00000032: 	cmpq	%rax, %r8
    00000035: 	jne	.Ltmp1922 # Offset: 53
.Ltmp1921:
    00000037: 	retq # Offset: 55
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version1IeEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version2IeEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 202
  State       : disassembled
  Address     : 0x241d0
  Size        : 0x81
  MaxSize     : 0x90
  Offset      : 0x241d0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version2IeEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0201:
    00000000: 	endbr64
    00000004: 	movslq	%r8d, %r8
    00000007: 	movq	%rdi, %r10
    0000000a: 	movq	%rdi, %r9
    0000000d: 	xorl	%edi, %edi
    0000000f: 	testq	%r8, %r8
    00000012: 	je	.Ltmp1923 # Offset: 18
    00000014: 	nopl	(%rax) # Size: 4
.Ltmp1924:
    00000018: 	fldt	(%rsi)
    0000001a: 	movq	%rdi, %rax
    0000001d: 	leaq	0x1(%rdi), %rdi
    00000021: 	addq	$0x30, %r9
    00000025: 	addq	$0x10, %rsi
    00000029: 	fstpt	-0x30(%r9)
    0000002d: 	cmpq	%rdi, %r8
    00000030: 	jne	.Ltmp1924 # Offset: 48
    00000032: 	leaq	0x10(%r10), %rdi
    00000036: 	xorl	%esi, %esi
    00000038: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1925:
    00000040: 	fldt	(%rdx)
    00000042: 	movq	%rsi, %r8
    00000045: 	addq	$0x30, %rdi
    00000049: 	addq	$0x10, %rdx
    0000004d: 	addq	$0x1, %rsi
    00000051: 	fstpt	-0x30(%rdi)
    00000054: 	cmpq	%rax, %r8
    00000057: 	jne	.Ltmp1925 # Offset: 87
    00000059: 	leaq	0x20(%r10), %rsi
    0000005d: 	xorl	%edx, %edx
    0000005f: 	nop # Size: 1
.Ltmp1926:
    00000060: 	fldt	(%rcx)
    00000062: 	movq	%rdx, %rdi
    00000065: 	addq	$0x30, %rsi
    00000069: 	addq	$0x10, %rcx
    0000006d: 	addq	$0x1, %rdx
    00000071: 	fstpt	-0x30(%rsi)
    00000074: 	cmpq	%rax, %rdi
    00000077: 	jne	.Ltmp1926 # Offset: 119
    00000079: 	retq # Offset: 121
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1923:
    00000080: 	retq # Offset: 128
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version2IeEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version3IeEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 203
  State       : disassembled
  Address     : 0x24260
  Size        : 0x63
  MaxSize     : 0x70
  Offset      : 0x24260
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version3IeEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0202:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r9
    00000007: 	testl	%r8d, %r8d
    0000000a: 	jle	.Ltmp1927 # Offset: 10
    0000000c: 	leal	-0x1(%r8), %r10d
    00000010: 	movl	%r8d, %r8d
    00000013: 	movq	%rdi, %rsi
    00000016: 	xorl	%eax, %eax
    00000018: 	shlq	$0x4, %r8
    0000001c: 	nopl	(%rax) # Size: 4
.Ltmp1928:
    00000020: 	fldt	(%r9,%rax)
    00000024: 	addq	$0x30, %rsi
    00000028: 	fstpt	-0x30(%rsi)
    0000002b: 	fldt	(%rdx,%rax)
    0000002e: 	addq	$0x10, %rax
    00000032: 	fstpt	-0x20(%rsi)
    00000035: 	cmpq	%rax, %r8
    00000038: 	jne	.Ltmp1928 # Offset: 56
    0000003a: 	movq	%r10, %rdx
    0000003d: 	leaq	0x20(%rdi), %rax
    00000041: 	shlq	$0x4, %rdx
    00000045: 	leaq	0x10(%rcx,%rdx), %rdx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1929:
    00000050: 	fldt	(%rcx)
    00000052: 	addq	$0x10, %rcx
    00000056: 	addq	$0x30, %rax
    0000005a: 	fstpt	-0x30(%rax)
    0000005d: 	cmpq	%rcx, %rdx
    00000060: 	jne	.Ltmp1929 # Offset: 96
.Ltmp1927:
    00000062: 	retq # Offset: 98
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version3IeEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version4IeEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 204
  State       : disassembled
  Address     : 0x242d0
  Size        : 0xd1
  MaxSize     : 0xe0
  Offset      : 0x242d0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version4IeEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0203:
    00000000: 	endbr64
    00000004: 	testl	%r8d, %r8d
    00000007: 	jle	.Ltmp1930 # Offset: 7
    0000000d: 	pushq	%r13
    0000000f: 	xorl	%r11d, %r11d
    00000012: 	movl	%r8d, %r13d
    00000015: 	pushq	%r12
    00000017: 	pushq	%rbp
    00000018: 	movq	%rcx, %rbp
    0000001b: 	pushq	%rbx
    0000001c: 	movq	%rdi, %rbx
    0000001f: 	movq	%rsi, %rdi
    00000022: 	movq	%rdx, %rsi
    00000025: 	nopl	(%rax) # Size: 3
.Ltmp1934:
    00000028: 	addl	$0x55, %r11d
    0000002c: 	cmpl	%r13d, %r11d
    0000002f: 	jg	.Ltmp1931 # Offset: 47
    00000031: 	movl	$0x550, %r10d
    00000037: 	movl	$0xff0, %r12d
    0000003d: 	movl	$0x55, %r9d
.Ltmp1935:
    00000043: 	movq	%rbx, %rdx
    00000046: 	xorl	%eax, %eax
    00000048: 	xorl	%ecx, %ecx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1932:
    00000050: 	fldt	(%rdi,%rax)
    00000053: 	addl	$0x1, %ecx
    00000056: 	addq	$0x30, %rdx
    0000005a: 	fstpt	-0x30(%rdx)
    0000005d: 	fldt	(%rsi,%rax)
    00000060: 	addq	$0x10, %rax
    00000064: 	fstpt	-0x20(%rdx)
    00000067: 	cmpl	%ecx, %r9d
    0000006a: 	jg	.Ltmp1932 # Offset: 106
    0000006c: 	leal	-0x1(%r9), %ecx
    00000070: 	movq	%rbp, %rax
    00000073: 	leaq	0x20(%rbx), %rdx
    00000077: 	shlq	$0x4, %rcx
    0000007b: 	leaq	0x10(%rbp,%rcx), %rcx
.Ltmp1933:
    00000080: 	fldt	(%rax)
    00000082: 	addq	$0x10, %rax
    00000086: 	addq	$0x30, %rdx
    0000008a: 	fstpt	-0x30(%rdx)
    0000008d: 	cmpq	%rax, %rcx
    00000090: 	jne	.Ltmp1933 # Offset: 144
.Ltmp1936:
    00000092: 	addq	%r12, %rbx
    00000095: 	addq	%r10, %rdi
    00000098: 	addq	%r10, %rsi
    0000009b: 	addq	%r10, %rbp
    0000009e: 	subl	$0x55, %r8d
    000000a2: 	cmpl	%r13d, %r11d
    000000a5: 	jl	.Ltmp1934 # Offset: 165
    000000a7: 	popq	%rbx
    000000a8: 	popq	%rbp
    000000a9: 	popq	%r12
    000000ab: 	popq	%r13
    000000ad: 	retq # Offset: 173
    000000ae: 	nop # Size: 2
.Ltmp1931:
    000000b0: 	leal	(%r8,%r8,2), %r12d
    000000b4: 	movslq	%r8d, %r10
    000000b7: 	movl	%r8d, %r9d
    000000ba: 	movslq	%r12d, %r12
    000000bd: 	shlq	$0x4, %r10
    000000c1: 	shlq	$0x4, %r12
    000000c5: 	testl	%r8d, %r8d
    000000c8: 	jg	.Ltmp1935 # Offset: 200
    000000ce: 	jmp	.Ltmp1936 # Offset: 206
.Ltmp1930:
    000000d0: 	retq # Offset: 208
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version4IeEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to3_version5IeEvPT_PKS0_S3_S3_i" after disassembly {
  Number      : 205
  State       : disassembled
  Address     : 0x243b0
  Size        : 0xf8
  MaxSize     : 0x100
  Offset      : 0x243b0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to3_version5IeEvPT_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0204:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movl	%r8d, %ebp
    0000000c: 	pushq	%rbx
    0000000d: 	testl	%r8d, %r8d
    00000010: 	jle	.Ltmp1937 # Offset: 16
    00000016: 	movq	%rsi, %r11
    00000019: 	movq	%rdx, %r10
    0000001c: 	movq	%rcx, %r9
    0000001f: 	xorl	%esi, %esi
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp1942:
    00000028: 	addl	$0x55, %esi
    0000002b: 	cmpl	%ebp, %esi
    0000002d: 	jg	.Ltmp1938 # Offset: 45
    00000033: 	movl	$0x550, %ecx
    00000038: 	movl	$0xff0, %ebx
    0000003d: 	movl	$0x55, %r13d
.Ltmp1943:
    00000043: 	movq	%r11, %r12
    00000046: 	movq	%rdi, %rdx
    00000049: 	xorl	%eax, %eax
    0000004b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1939:
    00000050: 	fldt	(%r12)
    00000054: 	addl	$0x1, %eax
    00000057: 	addq	$0x10, %r12
    0000005b: 	addq	$0x30, %rdx
    0000005f: 	fstpt	-0x30(%rdx)
    00000062: 	cmpl	%eax, %r13d
    00000065: 	jg	.Ltmp1939 # Offset: 101
    00000067: 	subl	$0x1, %r13d
    0000006b: 	movq	%r10, %rax
    0000006e: 	leaq	0x10(%rdi), %rdx
    00000072: 	shlq	$0x4, %r13
    00000076: 	leaq	0x10(%r10,%r13), %r12
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1940:
    00000080: 	fldt	(%rax)
    00000082: 	addq	$0x10, %rax
    00000086: 	addq	$0x30, %rdx
    0000008a: 	fstpt	-0x30(%rdx)
    0000008d: 	cmpq	%rax, %r12
    00000090: 	jne	.Ltmp1940 # Offset: 144
    00000092: 	movq	%r9, %rax
    00000095: 	leaq	0x20(%rdi), %rdx
    00000099: 	leaq	0x10(%r9,%r13), %r12
    0000009e: 	nop # Size: 2
.Ltmp1941:
    000000a0: 	fldt	(%rax)
    000000a2: 	addq	$0x10, %rax
    000000a6: 	addq	$0x30, %rdx
    000000aa: 	fstpt	-0x30(%rdx)
    000000ad: 	cmpq	%rax, %r12
    000000b0: 	jne	.Ltmp1941 # Offset: 176
.Ltmp1944:
    000000b2: 	addq	%rbx, %rdi
    000000b5: 	addq	%rcx, %r11
    000000b8: 	addq	%rcx, %r10
    000000bb: 	addq	%rcx, %r9
    000000be: 	subl	$0x55, %r8d
    000000c2: 	cmpl	%ebp, %esi
    000000c4: 	jl	.Ltmp1942 # Offset: 196
.Ltmp1937:
    000000ca: 	popq	%rbx
    000000cb: 	popq	%rbp
    000000cc: 	popq	%r12
    000000ce: 	popq	%r13
    000000d0: 	retq # Offset: 208
    000000d1: 	nopl	(%rax) # Size: 7
.Ltmp1938:
    000000d8: 	leal	(%r8,%r8,2), %ebx
    000000dc: 	movslq	%r8d, %rcx
    000000df: 	movl	%r8d, %r13d
    000000e2: 	movslq	%ebx, %rbx
    000000e5: 	shlq	$0x4, %rcx
    000000e9: 	shlq	$0x4, %rbx
    000000ed: 	testl	%r8d, %r8d
    000000f0: 	jg	.Ltmp1943 # Offset: 240
    000000f6: 	jmp	.Ltmp1944 # Offset: 246
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to3_version5IeEvPT_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version1IeEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 206
  State       : disassembled
  Address     : 0x244b0
  Size        : 0x53
  MaxSize     : 0x60
  Offset      : 0x244b0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version1IeEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0205:
    00000000: 	endbr64
    00000004: 	fldt	0x8(%rsp)
    00000008: 	testl	%r8d, %r8d
    0000000b: 	jle	.Ltmp1945 # Offset: 11
    0000000d: 	movslq	%r8d, %r8
    00000010: 	xorl	%eax, %eax
    00000012: 	shlq	$0x4, %r8
    00000016: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1946:
    00000020: 	fld	%st(0)
    00000022: 	fstpt	(%rdi,%rax,4)
    00000025: 	fldt	(%rsi,%rax)
    00000028: 	fstpt	0x10(%rdi,%rax,4)
    0000002c: 	fldt	(%rdx,%rax)
    0000002f: 	fstpt	0x20(%rdi,%rax,4)
    00000033: 	fldt	(%rcx,%rax)
    00000036: 	fstpt	0x30(%rdi,%rax,4)
    0000003a: 	addq	$0x10, %rax
    0000003e: 	cmpq	%rax, %r8
    00000041: 	jne	.Ltmp1946 # Offset: 65
    00000043: 	fstp	%st(0)
    00000045: 	jmp	.Ltmp1947 # Offset: 69
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1945:
    00000050: 	fstp	%st(0)
.Ltmp1947:
    00000052: 	retq # Offset: 82
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version1IeEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version2IeEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 207
  State       : disassembled
  Address     : 0x24510
  Size        : 0xab
  MaxSize     : 0xb0
  Offset      : 0x24510
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version2IeEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0206:
    00000000: 	endbr64
    00000004: 	movslq	%r8d, %r8
    00000007: 	movq	%rdx, %r10
    0000000a: 	movq	%rcx, %r9
    0000000d: 	movq	%rsi, %r11
    00000010: 	fldt	0x8(%rsp)
    00000014: 	movq	%rdi, %rcx
    00000017: 	xorl	%edx, %edx
    00000019: 	testq	%r8, %r8
    0000001c: 	je	.Ltmp1948 # Offset: 28
    00000022: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1949:
    00000028: 	movq	%rdx, %rax
    0000002b: 	leaq	0x1(%rdx), %rdx
    0000002f: 	fld	%st(0)
    00000031: 	fstpt	(%rcx)
    00000033: 	addq	$0x40, %rcx
    00000037: 	cmpq	%rdx, %r8
    0000003a: 	jne	.Ltmp1949 # Offset: 58
    0000003c: 	fstp	%st(0)
    0000003e: 	xorl	%edx, %edx
    00000040: 	xorl	%ecx, %ecx
    00000042: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1950:
    00000048: 	fldt	(%r11,%rdx)
    0000004c: 	movq	%rcx, %rsi
    0000004f: 	addq	$0x1, %rcx
    00000053: 	fstpt	0x10(%rdi,%rdx,4)
    00000057: 	addq	$0x10, %rdx
    0000005b: 	cmpq	%rax, %rsi
    0000005e: 	jne	.Ltmp1950 # Offset: 94
    00000060: 	xorl	%edx, %edx
    00000062: 	xorl	%ecx, %ecx
    00000064: 	nopl	(%rax) # Size: 4
.Ltmp1951:
    00000068: 	fldt	(%r10,%rdx)
    0000006c: 	movq	%rcx, %rsi
    0000006f: 	addq	$0x1, %rcx
    00000073: 	fstpt	0x20(%rdi,%rdx,4)
    00000077: 	addq	$0x10, %rdx
    0000007b: 	cmpq	%rax, %rsi
    0000007e: 	jne	.Ltmp1951 # Offset: 126
    00000080: 	xorl	%edx, %edx
    00000082: 	xorl	%ecx, %ecx
    00000084: 	nopl	(%rax) # Size: 4
.Ltmp1952:
    00000088: 	fldt	(%r9,%rdx)
    0000008c: 	movq	%rcx, %rsi
    0000008f: 	addq	$0x1, %rcx
    00000093: 	fstpt	0x30(%rdi,%rdx,4)
    00000097: 	addq	$0x10, %rdx
    0000009b: 	cmpq	%rax, %rsi
    0000009e: 	jne	.Ltmp1952 # Offset: 158
    000000a0: 	jmp	.Ltmp1953 # Offset: 160
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1948:
    000000a8: 	fstp	%st(0)
.Ltmp1953:
    000000aa: 	retq # Offset: 170
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version2IeEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version3IeEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 208
  State       : disassembled
  Address     : 0x245c0
  Size        : 0x6b
  MaxSize     : 0x70
  Offset      : 0x245c0
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version3IeEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0207:
    00000000: 	endbr64
    00000004: 	fldt	0x8(%rsp)
    00000008: 	testl	%r8d, %r8d
    0000000b: 	jle	.Ltmp1954 # Offset: 11
    0000000d: 	leal	-0x1(%r8), %r9d
    00000011: 	movq	%rdi, %rax
    00000014: 	shlq	$0x6, %r9
    00000018: 	leaq	0x40(%rdi,%r9), %r9
    0000001d: 	nopl	(%rax) # Size: 3
.Ltmp1955:
    00000020: 	fld	%st(0)
    00000022: 	fstpt	(%rax)
    00000024: 	fldt	(%rsi)
    00000026: 	addq	$0x40, %rax
    0000002a: 	addq	$0x10, %rsi
    0000002e: 	fstpt	-0x30(%rax)
    00000031: 	cmpq	%rax, %r9
    00000034: 	jne	.Ltmp1955 # Offset: 52
    00000036: 	fstp	%st(0)
    00000038: 	movl	%r8d, %r8d
    0000003b: 	xorl	%eax, %eax
    0000003d: 	shlq	$0x4, %r8
    00000041: 	nopl	(%rax) # Size: 7
.Ltmp1956:
    00000048: 	fldt	(%rdx,%rax)
    0000004b: 	fstpt	0x20(%rdi,%rax,4)
    0000004f: 	fldt	(%rcx,%rax)
    00000052: 	fstpt	0x30(%rdi,%rax,4)
    00000056: 	addq	$0x10, %rax
    0000005a: 	cmpq	%rax, %r8
    0000005d: 	jne	.Ltmp1956 # Offset: 93
    0000005f: 	jmp	.Ltmp1957 # Offset: 95
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp1954:
    00000068: 	fstp	%st(0)
.Ltmp1957:
    0000006a: 	retq # Offset: 106
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version3IeEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version4IeEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 209
  State       : disassembled
  Address     : 0x24630
  Size        : 0x113
  MaxSize     : 0x120
  Offset      : 0x24630
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version4IeEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0208:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	pushq	%rbp
    00000007: 	pushq	%rbx
    00000008: 	fldt	0x20(%rsp)
    0000000c: 	testl	%r8d, %r8d
    0000000f: 	jle	.Ltmp1958 # Offset: 15
    00000015: 	movq	%rsi, %r10
    00000018: 	movq	%rdx, %r9
    0000001b: 	movq	%rcx, %rsi
    0000001e: 	movl	%r8d, %r12d
    00000021: 	movl	%r8d, %ebp
    00000024: 	xorl	%r11d, %r11d
    00000027: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1964:
    00000030: 	addl	$0x40, %r11d
    00000034: 	cmpl	%r12d, %r11d
    00000037: 	jg	.Ltmp1959 # Offset: 55
    0000003d: 	movl	$0x400, %r8d
    00000043: 	movl	$0x1000, %ebx
    00000048: 	movl	$0x40, %eax
.Ltmp1966:
    0000004d: 	movq	%rdi, %rcx
    00000050: 	xorl	%edx, %edx
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1960:
    00000058: 	addq	$0x1, %rdx
    0000005c: 	fld	%st(0)
    0000005e: 	fstpt	(%rcx)
    00000060: 	addq	$0x40, %rcx
    00000064: 	cmpq	%rdx, %rax
    00000067: 	ja	.Ltmp1960 # Offset: 103
    00000069: 	xorl	%edx, %edx
    0000006b: 	xorl	%ecx, %ecx
    0000006d: 	nopl	(%rax) # Size: 3
.Ltmp1961:
    00000070: 	fldt	(%r10,%rdx)
    00000074: 	addq	$0x1, %rcx
    00000078: 	fstpt	0x10(%rdi,%rdx,4)
    0000007c: 	addq	$0x10, %rdx
    00000080: 	cmpq	%rax, %rcx
    00000083: 	jb	.Ltmp1961 # Offset: 131
    00000085: 	xorl	%edx, %edx
    00000087: 	xorl	%ecx, %ecx
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp1962:
    00000090: 	fldt	(%r9,%rdx)
    00000094: 	addq	$0x1, %rcx
    00000098: 	fstpt	0x20(%rdi,%rdx,4)
    0000009c: 	addq	$0x10, %rdx
    000000a0: 	cmpq	%rax, %rcx
    000000a3: 	jb	.Ltmp1962 # Offset: 163
    000000a5: 	xorl	%edx, %edx
    000000a7: 	xorl	%ecx, %ecx
    000000a9: 	nopl	(%rax) # Size: 7
.Ltmp1963:
    000000b0: 	fldt	(%rsi,%rdx)
    000000b3: 	addq	$0x1, %rcx
    000000b7: 	fstpt	0x30(%rdi,%rdx,4)
    000000bb: 	addq	$0x10, %rdx
    000000bf: 	cmpq	%rax, %rcx
    000000c2: 	jb	.Ltmp1963 # Offset: 194
.Ltmp1967:
    000000c4: 	addq	%rbx, %rdi
    000000c7: 	addq	%r8, %r10
    000000ca: 	addq	%r8, %r9
    000000cd: 	addq	%r8, %rsi
    000000d0: 	subl	$0x40, %ebp
    000000d3: 	cmpl	%r12d, %r11d
    000000d6: 	jl	.Ltmp1964 # Offset: 214
    000000dc: 	fstp	%st(0)
    000000de: 	jmp	.Ltmp1965 # Offset: 222
.Ltmp1958:
    000000e0: 	fstp	%st(0)
.Ltmp1965:
    000000e2: 	popq	%rbx
    000000e3: 	popq	%rbp
    000000e4: 	popq	%r12
    000000e6: 	retq # Offset: 230
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1959:
    000000f0: 	movslq	%ebp, %rax
    000000f3: 	leal	(,%rbp,4), %ebx
    000000fa: 	movslq	%ebx, %rbx
    000000fd: 	movq	%rax, %r8
    00000100: 	shlq	$0x4, %rbx
    00000104: 	shlq	$0x4, %r8
    00000108: 	testq	%rax, %rax
    0000010b: 	jne	.Ltmp1966 # Offset: 267
    00000111: 	jmp	.Ltmp1967 # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version4IeEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version5IeEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 210
  State       : disassembled
  Address     : 0x24750
  Size        : 0xe3
  MaxSize     : 0xf0
  Offset      : 0x24750
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version5IeEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0209:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	movl	%r8d, %r13d
    00000009: 	pushq	%r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	fldt	0x28(%rsp)
    00000011: 	testl	%r8d, %r8d
    00000014: 	jle	.Ltmp1968 # Offset: 20
    0000001a: 	movl	%r8d, %ebp
    0000001d: 	movq	%rsi, %rbx
    00000020: 	movq	%rdx, %r10
    00000023: 	movq	%rcx, %r9
    00000026: 	xorl	%r8d, %r8d
    00000029: 	nopl	(%rax) # Size: 7
.Ltmp1972:
    00000030: 	addl	$0x40, %r8d
    00000034: 	cmpl	%r13d, %r8d
    00000037: 	jg	.Ltmp1969 # Offset: 55
    0000003d: 	movl	$0x400, %r11d
    00000043: 	movl	$0x1000, %r12d
    00000049: 	movl	$0x40, %esi
.Ltmp1974:
    0000004e: 	movq	%rdi, %rax
    00000051: 	movq	%rbx, %rcx
    00000054: 	xorl	%edx, %edx
    00000056: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1970:
    00000060: 	fld	%st(0)
    00000062: 	fstpt	(%rax)
    00000064: 	fldt	(%rcx)
    00000066: 	addl	$0x1, %edx
    00000069: 	addq	$0x40, %rax
    0000006d: 	addq	$0x10, %rcx
    00000071: 	fstpt	-0x30(%rax)
    00000074: 	cmpl	%edx, %esi
    00000076: 	jg	.Ltmp1970 # Offset: 118
    00000078: 	shlq	$0x4, %rsi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	nop # Size: 2
.Ltmp1971:
    00000080: 	fldt	(%r10,%rax)
    00000084: 	fstpt	0x20(%rdi,%rax,4)
    00000088: 	fldt	(%r9,%rax)
    0000008c: 	fstpt	0x30(%rdi,%rax,4)
    00000090: 	addq	$0x10, %rax
    00000094: 	cmpq	%rax, %rsi
    00000097: 	jne	.Ltmp1971 # Offset: 151
.Ltmp1975:
    00000099: 	addq	%r12, %rdi
    0000009c: 	addq	%r11, %rbx
    0000009f: 	addq	%r11, %r10
    000000a2: 	addq	%r11, %r9
    000000a5: 	subl	$0x40, %ebp
    000000a8: 	cmpl	%r13d, %r8d
    000000ab: 	jl	.Ltmp1972 # Offset: 171
    000000ad: 	fstp	%st(0)
    000000af: 	jmp	.Ltmp1973 # Offset: 175
.Ltmp1968:
    000000b1: 	fstp	%st(0)
.Ltmp1973:
    000000b3: 	popq	%rbx
    000000b4: 	popq	%rbp
    000000b5: 	popq	%r12
    000000b7: 	popq	%r13
    000000b9: 	retq # Offset: 185
    000000ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1969:
    000000c0: 	leal	(,%rbp,4), %r12d
    000000c8: 	movslq	%ebp, %r11
    000000cb: 	movslq	%ebp, %rsi
    000000ce: 	movslq	%r12d, %r12
    000000d1: 	shlq	$0x4, %r11
    000000d5: 	shlq	$0x4, %r12
    000000d9: 	testl	%ebp, %ebp
    000000db: 	jg	.Ltmp1974 # Offset: 219
    000000e1: 	jmp	.Ltmp1975 # Offset: 225
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version5IeEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave3to4_version6IeEvPT_S0_PKS0_S3_S3_i" after disassembly {
  Number      : 211
  State       : disassembled
  Address     : 0x24840
  Size        : 0x124
  MaxSize     : 0x130
  Offset      : 0x24840
  Section     : .text
  Orc Section : .local.text._Z23interleave3to4_version6IeEvPT_S0_PKS0_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0210:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	fldt	0x28(%rsp)
    0000000e: 	testl	%r8d, %r8d
    00000011: 	jle	.Ltmp1976 # Offset: 17
    00000017: 	movq	%rsi, %rbx
    0000001a: 	movq	%rdx, %r11
    0000001d: 	movq	%rcx, %r10
    00000020: 	movl	%r8d, %r12d
    00000023: 	xorl	%r9d, %r9d
    00000026: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1982:
    00000030: 	addl	$0x40, %r9d
    00000034: 	cmpl	%r12d, %r9d
    00000037: 	jg	.Ltmp1977 # Offset: 55
    0000003d: 	movl	$0x400, %esi
    00000042: 	movl	$0x1000, %ebp
    00000047: 	movl	$0x40, %ecx
.Ltmp1984:
    0000004c: 	movq	%rdi, %rdx
    0000004f: 	xorl	%eax, %eax
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp1978:
    00000058: 	addl	$0x1, %eax
    0000005b: 	fld	%st(0)
    0000005d: 	fstpt	(%rdx)
    0000005f: 	addq	$0x40, %rdx
    00000063: 	cmpl	%ecx, %eax
    00000065: 	jl	.Ltmp1978 # Offset: 101
    00000067: 	subl	$0x1, %ecx
    0000006a: 	movq	%rbx, %rax
    0000006d: 	leaq	0x10(%rdi), %rdx
    00000071: 	shlq	$0x4, %rcx
    00000075: 	leaq	0x10(%rbx,%rcx), %r13
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1979:
    00000080: 	fldt	(%rax)
    00000082: 	addq	$0x10, %rax
    00000086: 	addq	$0x40, %rdx
    0000008a: 	fstpt	-0x40(%rdx)
    0000008d: 	cmpq	%rax, %r13
    00000090: 	jne	.Ltmp1979 # Offset: 144
    00000092: 	movq	%r11, %rax
    00000095: 	leaq	0x20(%rdi), %rdx
    00000099: 	leaq	0x10(%r11,%rcx), %r13
    0000009e: 	nop # Size: 2
.Ltmp1980:
    000000a0: 	fldt	(%rax)
    000000a2: 	addq	$0x10, %rax
    000000a6: 	addq	$0x40, %rdx
    000000aa: 	fstpt	-0x40(%rdx)
    000000ad: 	cmpq	%rax, %r13
    000000b0: 	jne	.Ltmp1980 # Offset: 176
    000000b2: 	movq	%r10, %rax
    000000b5: 	leaq	0x30(%rdi), %rdx
    000000b9: 	leaq	0x10(%r10,%rcx), %rcx
    000000be: 	nop # Size: 2
.Ltmp1981:
    000000c0: 	fldt	(%rax)
    000000c2: 	addq	$0x10, %rax
    000000c6: 	addq	$0x40, %rdx
    000000ca: 	fstpt	-0x40(%rdx)
    000000cd: 	cmpq	%rax, %rcx
    000000d0: 	jne	.Ltmp1981 # Offset: 208
.Ltmp1985:
    000000d2: 	addq	%rbp, %rdi
    000000d5: 	addq	%rsi, %rbx
    000000d8: 	addq	%rsi, %r11
    000000db: 	addq	%rsi, %r10
    000000de: 	subl	$0x40, %r8d
    000000e2: 	cmpl	%r12d, %r9d
    000000e5: 	jl	.Ltmp1982 # Offset: 229
    000000eb: 	fstp	%st(0)
    000000ed: 	jmp	.Ltmp1983 # Offset: 237
.Ltmp1976:
    000000ef: 	fstp	%st(0)
.Ltmp1983:
    000000f1: 	popq	%rbx
    000000f2: 	popq	%rbp
    000000f3: 	popq	%r12
    000000f5: 	popq	%r13
    000000f7: 	retq # Offset: 247
    000000f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1977:
    00000100: 	leal	(,%r8,4), %ebp
    00000108: 	movslq	%r8d, %rsi
    0000010b: 	movl	%r8d, %ecx
    0000010e: 	movslq	%ebp, %rbp
    00000111: 	shlq	$0x4, %rsi
    00000115: 	shlq	$0x4, %rbp
    00000119: 	testl	%r8d, %r8d
    0000011c: 	jg	.Ltmp1984 # Offset: 284
    00000122: 	jmp	.Ltmp1985 # Offset: 290
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave3to4_version6IeEvPT_S0_PKS0_S3_S3_i"

Binary Function "_Z23interleave4to4_version1IeEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 212
  State       : disassembled
  Address     : 0x24970
  Size        : 0x3e
  MaxSize     : 0x40
  Offset      : 0x24970
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version1IeEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0211:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp1986 # Offset: 7
    00000009: 	movslq	%r9d, %r9
    0000000c: 	xorl	%eax, %eax
    0000000e: 	shlq	$0x4, %r9
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1987:
    00000018: 	fldt	(%rsi,%rax)
    0000001b: 	fstpt	(%rdi,%rax,4)
    0000001e: 	fldt	(%rdx,%rax)
    00000021: 	fstpt	0x10(%rdi,%rax,4)
    00000025: 	fldt	(%rcx,%rax)
    00000028: 	fstpt	0x20(%rdi,%rax,4)
    0000002c: 	fldt	(%r8,%rax)
    00000030: 	fstpt	0x30(%rdi,%rax,4)
    00000034: 	addq	$0x10, %rax
    00000038: 	cmpq	%rax, %r9
    0000003b: 	jne	.Ltmp1987 # Offset: 59
.Ltmp1986:
    0000003d: 	retq # Offset: 61
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version1IeEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version2IeEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 213
  State       : disassembled
  Address     : 0x249b0
  Size        : 0x99
  MaxSize     : 0xa0
  Offset      : 0x249b0
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version2IeEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0212:
    00000000: 	endbr64
    00000004: 	movslq	%r9d, %r9
    00000007: 	movq	%rdx, %r11
    0000000a: 	movq	%rcx, %r10
    0000000d: 	xorl	%edx, %edx
    0000000f: 	xorl	%ecx, %ecx
    00000011: 	testq	%r9, %r9
    00000014: 	je	.Ltmp1988 # Offset: 20
    0000001a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1989:
    00000020: 	fldt	(%rsi,%rdx)
    00000023: 	movq	%rcx, %rax
    00000026: 	leaq	0x1(%rcx), %rcx
    0000002a: 	fstpt	(%rdi,%rdx,4)
    0000002d: 	addq	$0x10, %rdx
    00000031: 	cmpq	%rcx, %r9
    00000034: 	jne	.Ltmp1989 # Offset: 52
    00000036: 	xorl	%edx, %edx
    00000038: 	xorl	%ecx, %ecx
    0000003a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1990:
    00000040: 	fldt	(%r11,%rdx)
    00000044: 	movq	%rcx, %rsi
    00000047: 	addq	$0x1, %rcx
    0000004b: 	fstpt	0x10(%rdi,%rdx,4)
    0000004f: 	addq	$0x10, %rdx
    00000053: 	cmpq	%rax, %rsi
    00000056: 	jne	.Ltmp1990 # Offset: 86
    00000058: 	xorl	%edx, %edx
    0000005a: 	xorl	%ecx, %ecx
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp1991:
    00000060: 	fldt	(%r10,%rdx)
    00000064: 	movq	%rcx, %rsi
    00000067: 	addq	$0x1, %rcx
    0000006b: 	fstpt	0x20(%rdi,%rdx,4)
    0000006f: 	addq	$0x10, %rdx
    00000073: 	cmpq	%rax, %rsi
    00000076: 	jne	.Ltmp1991 # Offset: 118
    00000078: 	xorl	%edx, %edx
    0000007a: 	xorl	%ecx, %ecx
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp1992:
    00000080: 	fldt	(%r8,%rdx)
    00000084: 	movq	%rcx, %rsi
    00000087: 	addq	$0x1, %rcx
    0000008b: 	fstpt	0x30(%rdi,%rdx,4)
    0000008f: 	addq	$0x10, %rdx
    00000093: 	cmpq	%rax, %rsi
    00000096: 	jne	.Ltmp1992 # Offset: 150
.Ltmp1988:
    00000098: 	retq # Offset: 152
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version2IeEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version3IeEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 214
  State       : disassembled
  Address     : 0x24a50
  Size        : 0x49
  MaxSize     : 0x50
  Offset      : 0x24a50
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version3IeEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0213:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp1993 # Offset: 7
    00000009: 	movslq	%r9d, %r9
    0000000c: 	xorl	%eax, %eax
    0000000e: 	shlq	$0x4, %r9
    00000012: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1994:
    00000018: 	fldt	(%rsi,%rax)
    0000001b: 	fstpt	(%rdi,%rax,4)
    0000001e: 	fldt	(%rdx,%rax)
    00000021: 	fstpt	0x10(%rdi,%rax,4)
    00000025: 	addq	$0x10, %rax
    00000029: 	cmpq	%rax, %r9
    0000002c: 	jne	.Ltmp1994 # Offset: 44
    0000002e: 	xorl	%eax, %eax
.Ltmp1995:
    00000030: 	fldt	(%rcx,%rax)
    00000033: 	fstpt	0x20(%rdi,%rax,4)
    00000037: 	fldt	(%r8,%rax)
    0000003b: 	fstpt	0x30(%rdi,%rax,4)
    0000003f: 	addq	$0x10, %rax
    00000043: 	cmpq	%rax, %r9
    00000046: 	jne	.Ltmp1995 # Offset: 70
.Ltmp1993:
    00000048: 	retq # Offset: 72
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version3IeEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version4IeEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 215
  State       : disassembled
  Address     : 0x24aa0
  Size        : 0x113
  MaxSize     : 0x120
  Offset      : 0x24aa0
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version4IeEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0214:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movl	%r9d, %r12d
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	testl	%r9d, %r9d
    00000010: 	jle	.Ltmp1996 # Offset: 16
    00000016: 	movq	%rdi, %rax
    00000019: 	movq	%rsi, %r10
    0000001c: 	movl	%r9d, %ebp
    0000001f: 	movq	%rdx, %rdi
    00000022: 	movq	%rcx, %rsi
    00000025: 	xorl	%r9d, %r9d
    00000028: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2002:
    00000030: 	addl	$0x40, %r9d
    00000034: 	cmpl	%r12d, %r9d
    00000037: 	jg	.Ltmp1997 # Offset: 55
    0000003d: 	movl	$0x400, %r11d
    00000043: 	movl	$0x1000, %ebx
    00000048: 	movl	$0x40, %edx
.Ltmp2003:
    0000004d: 	xorl	%ecx, %ecx
    0000004f: 	xorl	%r13d, %r13d
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1998:
    00000058: 	fldt	(%r10,%rcx)
    0000005c: 	addq	$0x1, %r13
    00000060: 	fstpt	(%rax,%rcx,4)
    00000063: 	addq	$0x10, %rcx
    00000067: 	cmpq	%r13, %rdx
    0000006a: 	ja	.Ltmp1998 # Offset: 106
    0000006c: 	xorl	%ecx, %ecx
    0000006e: 	xorl	%r13d, %r13d
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp1999:
    00000078: 	fldt	(%rdi,%rcx)
    0000007b: 	addq	$0x1, %r13
    0000007f: 	fstpt	0x10(%rax,%rcx,4)
    00000083: 	addq	$0x10, %rcx
    00000087: 	cmpq	%rdx, %r13
    0000008a: 	jb	.Ltmp1999 # Offset: 138
    0000008c: 	xorl	%ecx, %ecx
    0000008e: 	xorl	%r13d, %r13d
    00000091: 	nopl	(%rax) # Size: 7
.Ltmp2000:
    00000098: 	fldt	(%rsi,%rcx)
    0000009b: 	addq	$0x1, %r13
    0000009f: 	fstpt	0x20(%rax,%rcx,4)
    000000a3: 	addq	$0x10, %rcx
    000000a7: 	cmpq	%rdx, %r13
    000000aa: 	jb	.Ltmp2000 # Offset: 170
    000000ac: 	xorl	%ecx, %ecx
    000000ae: 	xorl	%r13d, %r13d
    000000b1: 	nopl	(%rax) # Size: 7
.Ltmp2001:
    000000b8: 	fldt	(%r8,%rcx)
    000000bc: 	addq	$0x1, %r13
    000000c0: 	fstpt	0x30(%rax,%rcx,4)
    000000c4: 	addq	$0x10, %rcx
    000000c8: 	cmpq	%rdx, %r13
    000000cb: 	jb	.Ltmp2001 # Offset: 203
.Ltmp2004:
    000000cd: 	addq	%rbx, %rax
    000000d0: 	addq	%r11, %r10
    000000d3: 	addq	%r11, %rdi
    000000d6: 	addq	%r11, %rsi
    000000d9: 	addq	%r11, %r8
    000000dc: 	subl	$0x40, %ebp
    000000df: 	cmpl	%r12d, %r9d
    000000e2: 	jl	.Ltmp2002 # Offset: 226
.Ltmp1996:
    000000e8: 	popq	%rbx
    000000e9: 	popq	%rbp
    000000ea: 	popq	%r12
    000000ec: 	popq	%r13
    000000ee: 	retq # Offset: 238
    000000ef: 	nop # Size: 1
.Ltmp1997:
    000000f0: 	movslq	%ebp, %rdx
    000000f3: 	leal	(,%rbp,4), %ebx
    000000fa: 	movslq	%ebx, %rbx
    000000fd: 	movq	%rdx, %r11
    00000100: 	shlq	$0x4, %rbx
    00000104: 	shlq	$0x4, %r11
    00000108: 	testq	%rdx, %rdx
    0000010b: 	jne	.Ltmp2003 # Offset: 267
    00000111: 	jmp	.Ltmp2004 # Offset: 273
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version4IeEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version5IeEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 216
  State       : disassembled
  Address     : 0x24bc0
  Size        : 0xd4
  MaxSize     : 0xe0
  Offset      : 0x24bc0
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version5IeEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0215:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp2005 # Offset: 7
    0000000d: 	pushq	%r13
    0000000f: 	movq	%rsi, %r11
    00000012: 	movq	%rdx, %r10
    00000015: 	movq	%rcx, %rsi
    00000018: 	pushq	%r12
    0000001a: 	movl	%r9d, %r13d
    0000001d: 	pushq	%rbp
    0000001e: 	movl	%r9d, %ebp
    00000021: 	pushq	%rbx
    00000022: 	xorl	%ebx, %ebx
    00000024: 	nopl	(%rax) # Size: 4
.Ltmp2009:
    00000028: 	addl	$0x40, %ebx
    0000002b: 	cmpl	%r13d, %ebx
    0000002e: 	jg	.Ltmp2006 # Offset: 46
    00000034: 	movl	$0x400, %r9d
    0000003a: 	movl	$0x1000, %r12d
    00000040: 	movl	$0x40, %ecx
.Ltmp2010:
    00000045: 	xorl	%eax, %eax
    00000047: 	xorl	%edx, %edx
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp2007:
    00000050: 	fldt	(%r11,%rax)
    00000054: 	addl	$0x1, %edx
    00000057: 	fstpt	(%rdi,%rax,4)
    0000005a: 	fldt	(%r10,%rax)
    0000005e: 	fstpt	0x10(%rdi,%rax,4)
    00000062: 	addq	$0x10, %rax
    00000066: 	cmpl	%edx, %ecx
    00000068: 	jg	.Ltmp2007 # Offset: 104
    0000006a: 	shlq	$0x4, %rcx
    0000006e: 	xorl	%eax, %eax
.Ltmp2008:
    00000070: 	fldt	(%rsi,%rax)
    00000073: 	fstpt	0x20(%rdi,%rax,4)
    00000077: 	fldt	(%r8,%rax)
    0000007b: 	fstpt	0x30(%rdi,%rax,4)
    0000007f: 	addq	$0x10, %rax
    00000083: 	cmpq	%rax, %rcx
    00000086: 	jne	.Ltmp2008 # Offset: 134
.Ltmp2011:
    00000088: 	addq	%r12, %rdi
    0000008b: 	addq	%r9, %r11
    0000008e: 	addq	%r9, %r10
    00000091: 	addq	%r9, %rsi
    00000094: 	addq	%r9, %r8
    00000097: 	subl	$0x40, %ebp
    0000009a: 	cmpl	%r13d, %ebx
    0000009d: 	jl	.Ltmp2009 # Offset: 157
    0000009f: 	popq	%rbx
    000000a0: 	popq	%rbp
    000000a1: 	popq	%r12
    000000a3: 	popq	%r13
    000000a5: 	retq # Offset: 165
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2006:
    000000b0: 	leal	(,%rbp,4), %r12d
    000000b8: 	movslq	%ebp, %r9
    000000bb: 	movslq	%ebp, %rcx
    000000be: 	movslq	%r12d, %r12
    000000c1: 	shlq	$0x4, %r9
    000000c5: 	shlq	$0x4, %r12
    000000c9: 	testl	%ebp, %ebp
    000000cb: 	jg	.Ltmp2010 # Offset: 203
    000000d1: 	jmp	.Ltmp2011 # Offset: 209
.Ltmp2005:
    000000d3: 	retq # Offset: 211
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version5IeEvPT_PKS0_S3_S3_S3_i"

Binary Function "_Z23interleave4to4_version6IeEvPT_PKS0_S3_S3_S3_i" after disassembly {
  Number      : 217
  State       : disassembled
  Address     : 0x24ca0
  Size        : 0x135
  MaxSize     : 0x140
  Offset      : 0x24ca0
  Section     : .text
  Orc Section : .local.text._Z23interleave4to4_version6IeEvPT_PKS0_S3_S3_S3_i
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0216:
    00000000: 	endbr64
    00000004: 	testl	%r9d, %r9d
    00000007: 	jle	.Ltmp2012 # Offset: 7
    0000000d: 	pushq	%r14
    0000000f: 	movq	%rcx, %r11
    00000012: 	xorl	%r10d, %r10d
    00000015: 	pushq	%r13
    00000017: 	pushq	%r12
    00000019: 	movl	%r9d, %r12d
    0000001c: 	pushq	%rbp
    0000001d: 	pushq	%rbx
    0000001e: 	movq	%rdx, %rbx
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp2018:
    00000028: 	addl	$0x40, %r10d
    0000002c: 	cmpl	%r12d, %r10d
    0000002f: 	jg	.Ltmp2013 # Offset: 47
    00000035: 	movl	$0x400, %ecx
    0000003a: 	movl	$0x1000, %ebp
    0000003f: 	movl	$0x40, %r13d
.Ltmp2019:
    00000045: 	xorl	%eax, %eax
    00000047: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2014:
    00000050: 	movq	%rax, %rdx
    00000053: 	shlq	$0x4, %rdx
    00000057: 	fldt	(%rsi,%rdx)
    0000005a: 	movq	%rax, %rdx
    0000005d: 	addq	$0x1, %rax
    00000061: 	shlq	$0x6, %rdx
    00000065: 	fstpt	(%rdi,%rdx)
    00000068: 	cmpl	%eax, %r13d
    0000006b: 	jg	.Ltmp2014 # Offset: 107
    0000006d: 	subl	$0x1, %r13d
    00000071: 	movq	%rbx, %rax
    00000074: 	leaq	0x10(%rdi), %rdx
    00000078: 	shlq	$0x4, %r13
    0000007c: 	leaq	0x10(%rbx,%r13), %r14
    00000081: 	nopl	(%rax) # Size: 7
.Ltmp2015:
    00000088: 	fldt	(%rax)
    0000008a: 	addq	$0x10, %rax
    0000008e: 	addq	$0x40, %rdx
    00000092: 	fstpt	-0x40(%rdx)
    00000095: 	cmpq	%rax, %r14
    00000098: 	jne	.Ltmp2015 # Offset: 152
    0000009a: 	movq	%r11, %rax
    0000009d: 	leaq	0x20(%rdi), %rdx
    000000a1: 	leaq	0x10(%r11,%r13), %r14
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2016:
    000000b0: 	fldt	(%rax)
    000000b2: 	addq	$0x10, %rax
    000000b6: 	addq	$0x40, %rdx
    000000ba: 	fstpt	-0x40(%rdx)
    000000bd: 	cmpq	%rax, %r14
    000000c0: 	jne	.Ltmp2016 # Offset: 192
    000000c2: 	movq	%r8, %rax
    000000c5: 	leaq	0x30(%rdi), %rdx
    000000c9: 	leaq	0x10(%r8,%r13), %r13
    000000ce: 	nop # Size: 2
.Ltmp2017:
    000000d0: 	fldt	(%rax)
    000000d2: 	addq	$0x10, %rax
    000000d6: 	addq	$0x40, %rdx
    000000da: 	fstpt	-0x40(%rdx)
    000000dd: 	cmpq	%rax, %r13
    000000e0: 	jne	.Ltmp2017 # Offset: 224
.Ltmp2020:
    000000e2: 	addq	%rbp, %rdi
    000000e5: 	addq	%rcx, %rsi
    000000e8: 	addq	%rcx, %rbx
    000000eb: 	addq	%rcx, %r11
    000000ee: 	addq	%rcx, %r8
    000000f1: 	subl	$0x40, %r9d
    000000f5: 	cmpl	%r12d, %r10d
    000000f8: 	jl	.Ltmp2018 # Offset: 248
    000000fe: 	popq	%rbx
    000000ff: 	popq	%rbp
    00000100: 	popq	%r12
    00000102: 	popq	%r13
    00000104: 	popq	%r14
    00000106: 	retq # Offset: 262
    00000107: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2013:
    00000110: 	leal	(,%r9,4), %ebp
    00000118: 	movslq	%r9d, %rcx
    0000011b: 	movl	%r9d, %r13d
    0000011e: 	movslq	%ebp, %rbp
    00000121: 	shlq	$0x4, %rcx
    00000125: 	shlq	$0x4, %rbp
    00000129: 	testl	%r9d, %r9d
    0000012c: 	jg	.Ltmp2019 # Offset: 300
    00000132: 	jmp	.Ltmp2020 # Offset: 306
.Ltmp2012:
    00000134: 	retq # Offset: 308
DWARF CFI Instructions:
    <empty>
End of Function "_Z23interleave4to4_version6IeEvPT_PKS0_S3_S3_S3_i"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 218
  State       : disassembled
  Address     : 0x24de0
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x24de0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0217:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp2021 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp2024:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2023:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp2022 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp2023 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp2024 # Offset: 142
.Ltmp2021:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp2025 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp2026 # Offset: 164
.Ltmp2029:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp2027 # Offset: 177
.Ltmp2028:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp2026 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp2028 # Offset: 214
.Ltmp2027:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp2029 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp2030 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2032:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp2031 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp2031:
    0000010a: 	addq	$0x20, %r13
.Ltmp2026:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp2032 # Offset: 275
.Ltmp2030:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp2033 # Offset: 283
.Ltmp2039:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp2034 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2035:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp2035 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp2034:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp2022:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp2023 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp2024 # Offset: 389
    0000018b: 	jmp	.Ltmp2021 # Offset: 395
.Ltmp2025:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp2030 # Offset: 405
.Ltmp2038:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp2036 # Offset: 422
.Ltmp2037:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp2030 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp2037 # Offset: 463
.Ltmp2036:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp2038 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp2039 # Offset: 482
.Ltmp2033:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 219
  State       : disassembled
  Address     : 0x24fe0
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0x24fe0
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0218:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp2040 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp2041 # Offset: 63
.Ltmp2040:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp2042 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp2043 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp2047:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp2044 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp2045 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp2043:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp2046 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp2047 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2042:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp2048:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp2047 # Offset: 248
.Ltmp2041:
    000000fd: 	leaq	DATAat0x37158(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp2044:
    00000109: 	leaq	DATAat0x37182(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp2045:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp2046:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp2048 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp2049 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp2049:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_" after disassembly {
  Number      : 220
  State       : disassembled
  Address     : 0x25130
  Size        : 0x328
  MaxSize     : 0x330
  Offset      : 0x25130
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0219:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	0x48(%rdi), %r12
    00000019: 	movq	0x28(%rdi), %rsi
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x30(%rdi), %rax
    00000031: 	subq	0x38(%rdi), %rax
    00000035: 	movq	%r12, %r13
    00000038: 	sarq	$0x5, %rax
    0000003c: 	subq	%rsi, %r13
    0000003f: 	movq	%r13, %rcx
    00000042: 	sarq	$0x3, %rcx
    00000046: 	cmpq	$0x1, %r12
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	adcq	$-0x1, %rdx
    00000051: 	shlq	$0x4, %rdx
    00000055: 	addq	%rdx, %rax
    00000058: 	movq	0x20(%rdi), %rdx
    0000005c: 	subq	0x10(%rdi), %rdx
    00000060: 	sarq	$0x5, %rdx
    00000064: 	addq	%rdx, %rax
    00000067: 	movabsq	$0x3ffffffffffffff, %rdx
    00000071: 	cmpq	%rdx, %rax
    00000074: 	je	.Ltmp2050 # Offset: 116
    0000007a: 	movq	0x8(%rdi), %rdx
    0000007e: 	movq	%rdi, %rbx
    00000081: 	movq	(%rdi), %rdi
    00000084: 	movq	%r12, %rax
    00000087: 	subq	%rdi, %rax
    0000008a: 	movq	%rdx, %r8
    0000008d: 	sarq	$0x3, %rax
    00000091: 	subq	%rax, %r8
    00000094: 	cmpq	$0x1, %r8
    00000098: 	jbe	.Ltmp2051 # Offset: 152
.Ltmp2062:
    0000009e: 	movl	$0x200, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	%rax, 0x8(%r12)
    000000ad: 	movq	0x30(%rbx), %r13
    000000b1: 	movq	0x8(%rbp), %r12
    000000b5: 	leaq	0x10(%r13), %rdi
    000000b9: 	movq	%rdi, (%r13)
    000000bd: 	movq	(%rbp), %r14
    000000c1: 	movq	%r14, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp2052 # Offset: 199
    000000c9: 	testq	%r14, %r14
    000000cc: 	je	.Ltmp2053 # Offset: 204
.Ltmp2052:
    000000d2: 	movq	%r12, (%rsp)
    000000d6: 	cmpq	$0xf, %r12
    000000da: 	ja	.Ltmp2054 # Offset: 218
    000000e0: 	cmpq	$0x1, %r12
    000000e4: 	jne	.Ltmp2055 # Offset: 228
    000000e6: 	movzbl	(%r14), %eax
    000000ea: 	movb	%al, 0x10(%r13)
.Ltmp2057:
    000000ee: 	movq	%r12, 0x8(%r13)
    000000f2: 	movb	$0x0, (%rdi,%r12)
    000000f7: 	movq	0x48(%rbx), %rdx
    000000fb: 	movq	0x8(%rdx), %rax
    000000ff: 	addq	$0x8, %rdx
    00000103: 	movq	%rdx, %xmm1
    00000108: 	movq	%rax, %xmm0
    0000010d: 	addq	$0x200, %rax
    00000113: 	punpcklqdq	%xmm0, %xmm0
    00000117: 	movups	%xmm0, 0x30(%rbx)
    0000011b: 	movq	%rax, %xmm0
    00000120: 	punpcklqdq	%xmm1, %xmm0
    00000124: 	movups	%xmm0, 0x40(%rbx)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	subq	%fs:0x28, %rax
    00000136: 	jne	.Ltmp2056 # Offset: 310
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2055:
    00000150: 	testq	%r12, %r12
    00000153: 	je	.Ltmp2057 # Offset: 339
    00000155: 	jmp	.Ltmp2058 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2051:
    00000160: 	leaq	0x2(%rcx), %r14
    00000164: 	leaq	(%r14,%r14), %rax
    00000168: 	cmpq	%rax, %rdx
    0000016b: 	ja	.Ltmp2059 # Offset: 363
    00000171: 	testq	%rdx, %rdx
    00000174: 	movl	$0x1, %eax
    00000179: 	cmovneq	%rdx, %rax
    0000017d: 	leaq	0x2(%rdx,%rax), %r15
    00000182: 	movq	%r15, %rax
    00000185: 	shrq	$0x3c, %rax
    00000189: 	jne	.Ltmp2060 # Offset: 393
    0000018f: 	leaq	(,%r15,8), %rdi
    00000197: 	callq	_Znwm@PLT # Offset: 407
    0000019c: 	movq	0x28(%rbx), %rsi
    000001a0: 	movq	%rax, %r12
    000001a3: 	movq	%r15, %rax
    000001a6: 	subq	%r14, %rax
    000001a9: 	shrq	%rax
    000001ac: 	leaq	(%r12,%rax,8), %r14
    000001b0: 	movq	0x48(%rbx), %rax
    000001b4: 	leaq	0x8(%rax), %rdx
    000001b8: 	cmpq	%rsi, %rdx
    000001bb: 	je	.Ltmp2061 # Offset: 443
    000001bd: 	subq	%rsi, %rdx
    000001c0: 	movq	%r14, %rdi
    000001c3: 	callq	memmove@PLT # Offset: 451
.Ltmp2061:
    000001c8: 	movq	0x8(%rbx), %rax
    000001cc: 	movq	(%rbx), %rdi
    000001cf: 	leaq	(,%rax,8), %rsi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%r12, (%rbx)
    000001df: 	movq	%r15, 0x8(%rbx)
.Ltmp2064:
    000001e3: 	movq	(%r14), %rax
    000001e6: 	movq	(%r14), %xmm0
    000001eb: 	leaq	(%r14,%r13), %r12
    000001ef: 	movq	%r14, 0x28(%rbx)
    000001f3: 	movq	%r12, 0x48(%rbx)
    000001f7: 	addq	$0x200, %rax
    000001fd: 	movq	%rax, %xmm2
    00000202: 	punpcklqdq	%xmm2, %xmm0
    00000206: 	movups	%xmm0, 0x18(%rbx)
    0000020a: 	movq	(%r12), %rax
    0000020e: 	movq	(%r12), %xmm0
    00000214: 	addq	$0x200, %rax
    0000021a: 	movq	%rax, %xmm3
    0000021f: 	punpcklqdq	%xmm3, %xmm0
    00000223: 	movups	%xmm0, 0x38(%rbx)
    00000227: 	jmp	.Ltmp2062 # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp2054:
    00000230: 	movq	%rsp, %rsi
    00000233: 	xorl	%edx, %edx
    00000235: 	movq	%r13, %rdi
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%r13)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%r13)
.Ltmp2058:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r14, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%r13), %rdi
    0000025f: 	jmp	.Ltmp2057 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp2059:
    00000268: 	subq	%r14, %rdx
    0000026b: 	addq	$0x8, %r12
    0000026f: 	shrq	%rdx
    00000272: 	leaq	(%rdi,%rdx,8), %r14
    00000276: 	movq	%r12, %rdx
    00000279: 	subq	%rsi, %rdx
    0000027c: 	cmpq	%r14, %rsi
    0000027f: 	jbe	.Ltmp2063 # Offset: 639
    00000281: 	cmpq	%r12, %rsi
    00000284: 	je	.Ltmp2064 # Offset: 644
    0000028a: 	movq	%r14, %rdi
    0000028d: 	callq	memmove@PLT # Offset: 653
    00000292: 	jmp	.Ltmp2064 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2063:
    000002a0: 	cmpq	%r12, %rsi
    000002a3: 	je	.Ltmp2064 # Offset: 675
    000002a9: 	leaq	0x8(%r13), %rdi
    000002ad: 	subq	%rdx, %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	callq	memmove@PLT # Offset: 691
    000002b8: 	jmp	.Ltmp2064 # Offset: 696
.Ltmp2053:
    000002bd: 	leaq	DATAat0x37158(%rip), %rdi
    000002c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp2060:
    000002d0: 	shrq	$0x3d, %r15
    000002d4: 	je	.Ltmp2065 # Offset: 724
    000002d6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 726
.Ltmp2065:
    000002db: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 731
.Ltmp2050:
    000002e0: 	leaq	DATAat0x37198(%rip), %rdi
    000002e7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 743
.Ltmp2056:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
    000002f1: 	endbr64
    000002f5: 	movq	%rax, %rdi
    000002f8: 	callq	__cxa_begin_catch@PLT # Offset: 760
    000002fd: 	movq	0x48(%rbx), %rax
    00000301: 	movl	$0x200, %esi
    00000306: 	movq	0x8(%rax), %rdi
    0000030a: 	callq	_ZdlPvm@PLT # Offset: 778
    0000030f: 	callq	__cxa_rethrow@PLT # Offset: 783
    00000314: 	endbr64
    00000318: 	movq	%rax, %rbp
    0000031b: 	callq	__cxa_end_catch@PLT # Offset: 795
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Unwind_Resume@PLT # Offset: 803
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_"

Binary Function "_Z19test_interleave3to4IdPFvPddPKdS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 221
  State       : disassembled
  Address     : 0x25460
  Size        : 0x37f
  MaxSize     : 0x380
  Offset      : 0x25460
  Section     : .text
  Orc Section : .local.text._Z19test_interleave3to4IdPFvPddPKdS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0220:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%r8, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rcx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	leal	(,%r9,4), %edx
    0000001d: 	pushq	%rbp
    0000001e: 	movslq	%edx, %rdx
    00000021: 	movl	%r9d, %ebp
    00000024: 	pushq	%rbx
    00000025: 	movq	%rdi, %rbx
    00000028: 	subq	$0x48, %rsp
    0000002c: 	movq	0x80(%rsp), %rax
    00000034: 	movq	%rsi, 0x8(%rsp)
    00000039: 	movq	%rax, 0x10(%rsp)
    0000003e: 	movq	0x88(%rsp), %rax
    00000046: 	movq	%rax, 0x18(%rsp)
    0000004b: 	movq	%fs:0x28, %rax
    00000054: 	movq	%rax, 0x38(%rsp)
    00000059: 	xorl	%eax, %eax
    0000005b: 	shlq	$0x3, %rdx
    0000005f: 	je	.Ltmp2066 # Offset: 95
    00000061: 	xorl	%esi, %esi
    00000063: 	callq	memset@PLT # Offset: 99
.Ltmp2066:
    00000068: 	movq	0x8(%rsp), %rax
    0000006d: 	movsd	(%rax), %xmm0
    00000071: 	movslq	%ebp, %rax
    00000074: 	movq	%rax, %rdx
    00000077: 	movq	%rax, 0x20(%rsp)
    0000007c: 	shlq	$0x3, %rdx
    00000080: 	je	.Ltmp2067 # Offset: 128
    00000082: 	movq	0x8(%rsp), %rsi
    00000087: 	leaq	-0x8(%rdx), %rcx
    0000008b: 	shrq	$0x3, %rcx
    0000008f: 	movq	%rsi, %rax
    00000092: 	addq	$0x1, %rcx
    00000096: 	cmpq	$0x8, %rdx
    0000009a: 	je	.Ltmp2068 # Offset: 154
    0000009c: 	movq	%rcx, %rdx
    0000009f: 	movapd	%xmm0, %xmm1
    000000a3: 	shrq	%rdx
    000000a6: 	unpcklpd	%xmm1, %xmm1
    000000aa: 	shlq	$0x4, %rdx
    000000ae: 	addq	%rsi, %rdx
    000000b1: 	nopl	(%rax) # Size: 7
.Ltmp2069:
    000000b8: 	movups	%xmm1, (%rax)
    000000bb: 	addq	$0x10, %rax
    000000bf: 	cmpq	%rdx, %rax
    000000c2: 	jne	.Ltmp2069 # Offset: 194
    000000c4: 	movq	0x8(%rsp), %rax
    000000c9: 	movq	%rcx, %rdx
    000000cc: 	andq	$-0x2, %rdx
    000000d0: 	leaq	(%rax,%rdx,8), %rax
    000000d4: 	cmpq	%rcx, %rdx
    000000d7: 	je	.Ltmp2067 # Offset: 215
.Ltmp2068:
    000000d9: 	movsd	%xmm0, (%rax)
.Ltmp2067:
    000000dd: 	callq	clock@PLT # Offset: 221
    000000e2: 	xorl	%r15d, %r15d
    000000e5: 	movq	%rax, start_time(%rip)
    000000ec: 	movl	iterations(%rip), %eax
    000000f2: 	testl	%eax, %eax
    000000f4: 	jle	.Ltmp2070 # Offset: 244
    000000f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2071:
    00000100: 	movq	0x8(%rsp), %rax
    00000105: 	movl	%ebp, %r8d
    00000108: 	movq	%r14, %rcx
    0000010b: 	movq	%r13, %rdx
    0000010e: 	movq	%r12, %rsi
    00000111: 	movq	%rbx, %rdi
    00000114: 	addl	$0x1, %r15d
    00000118: 	movsd	(%rax), %xmm0
    0000011c: 	movq	0x10(%rsp), %rax
    00000121: 	callq	*%rax # Offset: 289
    00000123: 	cmpl	%r15d, iterations(%rip)
    0000012a: 	jg	.Ltmp2071 # Offset: 298
.Ltmp2070:
    0000012c: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000133: 	movq	"_ZL7gLabels/1"+48(%rip), %rcx
    0000013a: 	subq	$0x20, %rax
    0000013e: 	cmpq	%rax, %rcx
    00000141: 	je	.Ltmp2072 # Offset: 321
    00000147: 	movq	0x18(%rsp), %rax
    0000014c: 	leaq	0x10(%rcx), %rdi
    00000150: 	movq	%rdi, (%rcx)
    00000153: 	movq	(%rax), %r8
    00000156: 	movq	0x8(%rax), %r15
    0000015a: 	movq	%r8, %rax
    0000015d: 	addq	%r15, %rax
    00000160: 	je	.Ltmp2073 # Offset: 352
    00000162: 	testq	%r8, %r8
    00000165: 	je	.Ltmp2074 # Offset: 357
.Ltmp2073:
    0000016b: 	movq	%r15, 0x30(%rsp)
    00000170: 	cmpq	$0xf, %r15
    00000174: 	ja	.Ltmp2075 # Offset: 372
    0000017a: 	cmpq	$0x1, %r15
    0000017e: 	jne	.Ltmp2076 # Offset: 382
    00000184: 	movzbl	(%r8), %eax
    00000188: 	movb	%al, 0x10(%rcx)
.Ltmp2082:
    0000018b: 	movq	%r15, 0x8(%rcx)
    0000018f: 	movb	$0x0, (%rdi,%r15)
    00000194: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000019b: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001a2: 	addq	$0x20, %rax
    000001a6: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001ad: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000001b4: 	je	.Ltmp2077 # Offset: 436
.Ltmp2083:
    000001ba: 	movq	-0x20(%rax), %r15
    000001be: 	callq	clock@PLT # Offset: 446
    000001c3: 	pxor	%xmm0, %xmm0
    000001c7: 	movq	%rax, end_time(%rip)
    000001ce: 	movq	%r15, %rdi
    000001d1: 	subq	start_time(%rip), %rax
    000001d8: 	cvtsi2sd	%rax, %xmm0
    000001dd: 	divsd	DATAat0x37530(%rip), %xmm0
    000001e5: 	callq	_Z13record_resultdPKc # Offset: 485
    000001ea: 	xorl	%eax, %eax
    000001ec: 	testl	%ebp, %ebp
    000001ee: 	jle	.Ltmp2078 # Offset: 494
.Ltmp2080:
    000001f0: 	movq	0x8(%rsp), %rsi
    000001f5: 	movsd	(%rbx), %xmm0
    000001f9: 	ucomisd	(%rsi,%rax,8), %xmm0
    000001fe: 	jp	.Ltmp2079 # Offset: 510
    00000204: 	jne	.Ltmp2079 # Offset: 516
    0000020a: 	movsd	0x8(%rbx), %xmm0
    0000020f: 	ucomisd	(%r12,%rax,8), %xmm0
    00000215: 	jp	.Ltmp2079 # Offset: 533
    0000021b: 	jne	.Ltmp2079 # Offset: 539
    00000221: 	movsd	0x10(%rbx), %xmm0
    00000226: 	ucomisd	(%r13,%rax,8), %xmm0
    0000022d: 	jp	.Ltmp2079 # Offset: 557
    00000233: 	jne	.Ltmp2079 # Offset: 563
    00000239: 	movsd	0x18(%rbx), %xmm0
    0000023e: 	ucomisd	(%r14,%rax,8), %xmm0
    00000244: 	jp	.Ltmp2079 # Offset: 580
    0000024a: 	jne	.Ltmp2079 # Offset: 586
    00000250: 	addq	$0x20, %rbx
    00000254: 	addq	$0x1, %rax
    00000258: 	cmpq	%rax, 0x20(%rsp)
    0000025d: 	jne	.Ltmp2080 # Offset: 605
.Ltmp2078:
    0000025f: 	movq	0x38(%rsp), %rax
    00000264: 	subq	%fs:0x28, %rax
    0000026d: 	jne	.Ltmp2081 # Offset: 621
    00000273: 	addq	$0x48, %rsp
    00000277: 	popq	%rbx
    00000278: 	popq	%rbp
    00000279: 	popq	%r12
    0000027b: 	popq	%r13
    0000027d: 	popq	%r14
    0000027f: 	popq	%r15
    00000281: 	retq # Offset: 641
    00000282: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2075:
    00000288: 	movq	%rcx, %rdi
    0000028b: 	leaq	0x30(%rsp), %rsi
    00000290: 	xorl	%edx, %edx
    00000292: 	movq	%r8, 0x28(%rsp)
    00000297: 	movq	%rcx, 0x10(%rsp)
    0000029c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 668
    000002a1: 	movq	0x10(%rsp), %rcx
    000002a6: 	movq	0x28(%rsp), %r8
    000002ab: 	movq	%rax, %rdi
    000002ae: 	movq	%rax, (%rcx)
    000002b1: 	movq	0x30(%rsp), %rax
    000002b6: 	movq	%rax, 0x10(%rcx)
.Ltmp2084:
    000002ba: 	movq	%r15, %rdx
    000002bd: 	movq	%r8, %rsi
    000002c0: 	movq	%rcx, 0x10(%rsp)
    000002c5: 	callq	memcpy@PLT # Offset: 709
    000002ca: 	movq	0x10(%rsp), %rcx
    000002cf: 	movq	0x30(%rsp), %r15
    000002d4: 	movq	(%rcx), %rdi
    000002d7: 	jmp	.Ltmp2082 # Offset: 727
    000002dc: 	nopl	(%rax) # Size: 4
.Ltmp2079:
    000002e0: 	movq	0x38(%rsp), %rax
    000002e5: 	subq	%fs:0x28, %rax
    000002ee: 	jne	.Ltmp2081 # Offset: 750
    000002f0: 	movq	0x18(%rsp), %rax
    000002f5: 	leaq	DATAat0x371c8(%rip), %rsi
    000002fc: 	movl	$0x1, %edi
    00000301: 	movq	(%rax), %rdx
    00000304: 	addq	$0x48, %rsp
    00000308: 	xorl	%eax, %eax
    0000030a: 	popq	%rbx
    0000030b: 	popq	%rbp
    0000030c: 	popq	%r12
    0000030e: 	popq	%r13
    00000310: 	popq	%r14
    00000312: 	popq	%r15
    00000314: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 788
    00000319: 	nopl	(%rax) # Size: 7
.Ltmp2072:
    00000320: 	movq	0x18(%rsp), %rsi
    00000325: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000032c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 812
    00000331: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000338: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000033f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000346: 	jne	.Ltmp2083 # Offset: 838
.Ltmp2077:
    0000034c: 	movq	-0x8(%rdx), %rax
    00000350: 	addq	$0x200, %rax
    00000356: 	jmp	.Ltmp2083 # Offset: 854
    0000035b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2076:
    00000360: 	testq	%r15, %r15
    00000363: 	je	.Ltmp2082 # Offset: 867
    00000369: 	jmp	.Ltmp2084 # Offset: 873
.Ltmp2081:
    0000036e: 	callq	__stack_chk_fail@PLT # Offset: 878
.Ltmp2074:
    00000373: 	leaq	DATAat0x37158(%rip), %rdi
    0000037a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 890
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave3to4IdPFvPddPKdS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_interleave2to2IhPFvPhPKhS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z19test_interleave2to2IhPFvPhPKhS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z19test_interleave2to2IhPFvPhPKhS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/interleave.cpp/1
  Number      : 222
  State       : disassembled
  Address     : 0x257e0
  Size        : 0x257
  MaxSize     : 0x260
  Offset      : 0x257e0
  Section     : .text
  Orc Section : .local.text._Z19test_interleave2to2IhPFvPhPKhS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0221:
    00000000: 	pushq	%r15
    00000002: 	movq	%rcx, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%r8, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rdx, %r13
    0000000f: 	movl	$0x27100, %edx
    00000014: 	pushq	%r12
    00000016: 	movq	%rsi, %r12
    00000019: 	xorl	%esi, %esi
    0000001b: 	pushq	%rbp
    0000001c: 	movq	%rdi, %rbp
    0000001f: 	pushq	%rbx
    00000020: 	xorl	%ebx, %ebx
    00000022: 	subq	$0x28, %rsp
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	callq	memset@PLT # Offset: 54
    0000003b: 	callq	clock@PLT # Offset: 59
    00000040: 	movq	%rax, start_time(%rip)
    00000047: 	movl	iterations(%rip), %eax
    0000004d: 	testl	%eax, %eax
    0000004f: 	jle	.Ltmp2085 # Offset: 79
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp2086:
    00000058: 	movl	$0x13880, %ecx
    0000005d: 	movq	%r13, %rdx
    00000060: 	movq	%r12, %rsi
    00000063: 	movq	%rbp, %rdi
    00000066: 	callq	*%r15 # Offset: 102
    00000069: 	addl	$0x1, %ebx
    0000006c: 	cmpl	iterations(%rip), %ebx
    00000072: 	jl	.Ltmp2086 # Offset: 114
.Ltmp2085:
    00000074: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000007b: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000082: 	subq	$0x20, %rax
    00000086: 	cmpq	%rax, %rbx
    00000089: 	je	.Ltmp2087 # Offset: 137
    0000008f: 	leaq	0x10(%rbx), %rdi
    00000093: 	movq	0x8(%r14), %r15
    00000097: 	movq	%rdi, (%rbx)
    0000009a: 	movq	(%r14), %r8
    0000009d: 	movq	%r8, %rax
    000000a0: 	addq	%r15, %rax
    000000a3: 	je	.Ltmp2088 # Offset: 163
    000000a5: 	testq	%r8, %r8
    000000a8: 	je	.Ltmp2089 # Offset: 168
.Ltmp2088:
    000000ae: 	movq	%r15, 0x10(%rsp)
    000000b3: 	cmpq	$0xf, %r15
    000000b7: 	ja	.Ltmp2090 # Offset: 183
    000000bd: 	cmpq	$0x1, %r15
    000000c1: 	jne	.Ltmp2091 # Offset: 193
    000000c7: 	movzbl	(%r8), %eax
    000000cb: 	movb	%al, 0x10(%rbx)
.Ltmp2096:
    000000ce: 	movq	%r15, 0x8(%rbx)
    000000d2: 	movb	$0x0, (%rdi,%r15)
    000000d7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000de: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000e5: 	addq	$0x20, %rax
    000000e9: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000f0: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000f7: 	je	.Ltmp2092 # Offset: 247
.Ltmp2097:
    000000fd: 	movq	-0x20(%rax), %r15
    00000101: 	callq	clock@PLT # Offset: 257
    00000106: 	pxor	%xmm0, %xmm0
    0000010a: 	movq	%rax, end_time(%rip)
    00000111: 	movq	%r15, %rdi
    00000114: 	subq	start_time(%rip), %rax
    0000011b: 	cvtsi2sd	%rax, %xmm0
    00000120: 	divsd	DATAat0x37530(%rip), %xmm0
    00000128: 	callq	_Z13record_resultdPKc # Offset: 296
    0000012d: 	xorl	%eax, %eax
.Ltmp2094:
    0000012f: 	movzbl	(%r12,%rax), %ecx
    00000134: 	cmpb	%cl, (%rbp,%rax,2)
    00000138: 	jne	.Ltmp2093 # Offset: 312
    0000013e: 	movzbl	(%r13,%rax), %edx
    00000144: 	cmpb	%dl, 0x1(%rbp,%rax,2)
    00000148: 	jne	.Ltmp2093 # Offset: 328
    0000014a: 	addq	$0x1, %rax
    0000014e: 	cmpq	$0x13880, %rax
    00000154: 	jne	.Ltmp2094 # Offset: 340
    00000156: 	movq	0x18(%rsp), %rax
    0000015b: 	subq	%fs:0x28, %rax
    00000164: 	jne	.Ltmp2095 # Offset: 356
    0000016a: 	addq	$0x28, %rsp
    0000016e: 	popq	%rbx
    0000016f: 	popq	%rbp
    00000170: 	popq	%r12
    00000172: 	popq	%r13
    00000174: 	popq	%r14
    00000176: 	popq	%r15
    00000178: 	retq # Offset: 376
    00000179: 	nopl	(%rax) # Size: 7
.Ltmp2090:
    00000180: 	movq	%rbx, %rdi
    00000183: 	leaq	0x10(%rsp), %rsi
    00000188: 	xorl	%edx, %edx
    0000018a: 	movq	%r8, 0x8(%rsp)
    0000018f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 399
    00000194: 	movq	0x8(%rsp), %r8
    00000199: 	movq	%rax, (%rbx)
    0000019c: 	movq	%rax, %rdi
    0000019f: 	movq	0x10(%rsp), %rax
    000001a4: 	movq	%rax, 0x10(%rbx)
.Ltmp2098:
    000001a8: 	movq	%r15, %rdx
    000001ab: 	movq	%r8, %rsi
    000001ae: 	callq	memcpy@PLT # Offset: 430
    000001b3: 	movq	0x10(%rsp), %r15
    000001b8: 	movq	(%rbx), %rdi
    000001bb: 	jmp	.Ltmp2096 # Offset: 443
.Ltmp2093:
    000001c0: 	movq	0x18(%rsp), %rax
    000001c5: 	subq	%fs:0x28, %rax
    000001ce: 	jne	.Ltmp2095 # Offset: 462
    000001d0: 	movq	(%r14), %rdx
    000001d3: 	addq	$0x28, %rsp
    000001d7: 	leaq	DATAat0x371c8(%rip), %rsi
    000001de: 	xorl	%eax, %eax
    000001e0: 	popq	%rbx
    000001e1: 	movl	$0x1, %edi
    000001e6: 	popq	%rbp
    000001e7: 	popq	%r12
    000001e9: 	popq	%r13
    000001eb: 	popq	%r14
    000001ed: 	popq	%r15
    000001ef: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 495
    000001f4: 	nopl	(%rax) # Size: 4
.Ltmp2087:
    000001f8: 	movq	%r14, %rsi
    000001fb: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000202: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 514
    00000207: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000020e: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000215: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000021c: 	jne	.Ltmp2097 # Offset: 540
.Ltmp2092:
    00000222: 	movq	-0x8(%rdx), %rax
    00000226: 	addq	$0x200, %rax
    0000022c: 	jmp	.Ltmp2097 # Offset: 556
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp2091:
    00000238: 	testq	%r15, %r15
    0000023b: 	je	.Ltmp2096 # Offset: 571
    00000241: 	jmp	.Ltmp2098 # Offset: 577
.Ltmp2095:
    00000246: 	callq	__stack_chk_fail@PLT # Offset: 582
.Ltmp2089:
    0000024b: 	leaq	DATAat0x37158(%rip), %rdi
    00000252: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 594
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave2to2IhPFvPhPKhS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z19test_interleave2to2IjPFvPjPKjS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z19test_interleave2to2IjPFvPjPKjS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z19test_interleave2to2IjPFvPjPKjS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/interleave.cpp/1
  Number      : 223
  State       : disassembled
  Address     : 0x25a40
  Size        : 0x257
  MaxSize     : 0x260
  Offset      : 0x25a40
  Section     : .text
  Orc Section : .local.text._Z19test_interleave2to2IjPFvPjPKjS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0222:
    00000000: 	pushq	%r15
    00000002: 	movq	%rcx, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%r8, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rdx, %r13
    0000000f: 	movl	$0x9c400, %edx
    00000014: 	pushq	%r12
    00000016: 	movq	%rsi, %r12
    00000019: 	xorl	%esi, %esi
    0000001b: 	pushq	%rbp
    0000001c: 	movq	%rdi, %rbp
    0000001f: 	pushq	%rbx
    00000020: 	xorl	%ebx, %ebx
    00000022: 	subq	$0x28, %rsp
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	callq	memset@PLT # Offset: 54
    0000003b: 	callq	clock@PLT # Offset: 59
    00000040: 	movq	%rax, start_time(%rip)
    00000047: 	movl	iterations(%rip), %eax
    0000004d: 	testl	%eax, %eax
    0000004f: 	jle	.Ltmp2099 # Offset: 79
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp2100:
    00000058: 	movl	$0x13880, %ecx
    0000005d: 	movq	%r13, %rdx
    00000060: 	movq	%r12, %rsi
    00000063: 	movq	%rbp, %rdi
    00000066: 	callq	*%r15 # Offset: 102
    00000069: 	addl	$0x1, %ebx
    0000006c: 	cmpl	iterations(%rip), %ebx
    00000072: 	jl	.Ltmp2100 # Offset: 114
.Ltmp2099:
    00000074: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000007b: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000082: 	subq	$0x20, %rax
    00000086: 	cmpq	%rax, %rbx
    00000089: 	je	.Ltmp2101 # Offset: 137
    0000008f: 	leaq	0x10(%rbx), %rdi
    00000093: 	movq	0x8(%r14), %r15
    00000097: 	movq	%rdi, (%rbx)
    0000009a: 	movq	(%r14), %r8
    0000009d: 	movq	%r8, %rax
    000000a0: 	addq	%r15, %rax
    000000a3: 	je	.Ltmp2102 # Offset: 163
    000000a5: 	testq	%r8, %r8
    000000a8: 	je	.Ltmp2103 # Offset: 168
.Ltmp2102:
    000000ae: 	movq	%r15, 0x10(%rsp)
    000000b3: 	cmpq	$0xf, %r15
    000000b7: 	ja	.Ltmp2104 # Offset: 183
    000000bd: 	cmpq	$0x1, %r15
    000000c1: 	jne	.Ltmp2105 # Offset: 193
    000000c7: 	movzbl	(%r8), %eax
    000000cb: 	movb	%al, 0x10(%rbx)
.Ltmp2110:
    000000ce: 	movq	%r15, 0x8(%rbx)
    000000d2: 	movb	$0x0, (%rdi,%r15)
    000000d7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000de: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000e5: 	addq	$0x20, %rax
    000000e9: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000f0: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000f7: 	je	.Ltmp2106 # Offset: 247
.Ltmp2111:
    000000fd: 	movq	-0x20(%rax), %r15
    00000101: 	callq	clock@PLT # Offset: 257
    00000106: 	pxor	%xmm0, %xmm0
    0000010a: 	movq	%rax, end_time(%rip)
    00000111: 	movq	%r15, %rdi
    00000114: 	subq	start_time(%rip), %rax
    0000011b: 	cvtsi2sd	%rax, %xmm0
    00000120: 	divsd	DATAat0x37530(%rip), %xmm0
    00000128: 	callq	_Z13record_resultdPKc # Offset: 296
    0000012d: 	xorl	%eax, %eax
.Ltmp2108:
    0000012f: 	movl	(%r12,%rax), %ecx
    00000133: 	cmpl	%ecx, (%rbp,%rax,2)
    00000137: 	jne	.Ltmp2107 # Offset: 311
    0000013d: 	movl	(%r13,%rax), %edx
    00000142: 	cmpl	%edx, 0x4(%rbp,%rax,2)
    00000146: 	jne	.Ltmp2107 # Offset: 326
    00000148: 	addq	$0x4, %rax
    0000014c: 	cmpq	$0x4e200, %rax
    00000152: 	jne	.Ltmp2108 # Offset: 338
    00000154: 	movq	0x18(%rsp), %rax
    00000159: 	subq	%fs:0x28, %rax
    00000162: 	jne	.Ltmp2109 # Offset: 354
    00000168: 	addq	$0x28, %rsp
    0000016c: 	popq	%rbx
    0000016d: 	popq	%rbp
    0000016e: 	popq	%r12
    00000170: 	popq	%r13
    00000172: 	popq	%r14
    00000174: 	popq	%r15
    00000176: 	retq # Offset: 374
    00000177: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2104:
    00000180: 	movq	%rbx, %rdi
    00000183: 	leaq	0x10(%rsp), %rsi
    00000188: 	xorl	%edx, %edx
    0000018a: 	movq	%r8, 0x8(%rsp)
    0000018f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 399
    00000194: 	movq	0x8(%rsp), %r8
    00000199: 	movq	%rax, (%rbx)
    0000019c: 	movq	%rax, %rdi
    0000019f: 	movq	0x10(%rsp), %rax
    000001a4: 	movq	%rax, 0x10(%rbx)
.Ltmp2112:
    000001a8: 	movq	%r15, %rdx
    000001ab: 	movq	%r8, %rsi
    000001ae: 	callq	memcpy@PLT # Offset: 430
    000001b3: 	movq	0x10(%rsp), %r15
    000001b8: 	movq	(%rbx), %rdi
    000001bb: 	jmp	.Ltmp2110 # Offset: 443
.Ltmp2107:
    000001c0: 	movq	0x18(%rsp), %rax
    000001c5: 	subq	%fs:0x28, %rax
    000001ce: 	jne	.Ltmp2109 # Offset: 462
    000001d0: 	movq	(%r14), %rdx
    000001d3: 	addq	$0x28, %rsp
    000001d7: 	leaq	DATAat0x371c8(%rip), %rsi
    000001de: 	xorl	%eax, %eax
    000001e0: 	popq	%rbx
    000001e1: 	movl	$0x1, %edi
    000001e6: 	popq	%rbp
    000001e7: 	popq	%r12
    000001e9: 	popq	%r13
    000001eb: 	popq	%r14
    000001ed: 	popq	%r15
    000001ef: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 495
    000001f4: 	nopl	(%rax) # Size: 4
.Ltmp2101:
    000001f8: 	movq	%r14, %rsi
    000001fb: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000202: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 514
    00000207: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000020e: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000215: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000021c: 	jne	.Ltmp2111 # Offset: 540
.Ltmp2106:
    00000222: 	movq	-0x8(%rdx), %rax
    00000226: 	addq	$0x200, %rax
    0000022c: 	jmp	.Ltmp2111 # Offset: 556
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp2105:
    00000238: 	testq	%r15, %r15
    0000023b: 	je	.Ltmp2110 # Offset: 571
    00000241: 	jmp	.Ltmp2112 # Offset: 577
.Ltmp2109:
    00000246: 	callq	__stack_chk_fail@PLT # Offset: 582
.Ltmp2103:
    0000024b: 	leaq	DATAat0x37158(%rip), %rdi
    00000252: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 594
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave2to2IjPFvPjPKjS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z19test_interleave2to2ItPFvPtPKtS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z19test_interleave2to2ItPFvPtPKtS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z19test_interleave2to2ItPFvPtPKtS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/interleave.cpp/1
  Number      : 224
  State       : disassembled
  Address     : 0x25ca0
  Size        : 0x257
  MaxSize     : 0x260
  Offset      : 0x25ca0
  Section     : .text
  Orc Section : .local.text._Z19test_interleave2to2ItPFvPtPKtS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0223:
    00000000: 	pushq	%r15
    00000002: 	movq	%rcx, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%r8, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rdx, %r13
    0000000f: 	movl	$0x4e200, %edx
    00000014: 	pushq	%r12
    00000016: 	movq	%rsi, %r12
    00000019: 	xorl	%esi, %esi
    0000001b: 	pushq	%rbp
    0000001c: 	movq	%rdi, %rbp
    0000001f: 	pushq	%rbx
    00000020: 	xorl	%ebx, %ebx
    00000022: 	subq	$0x28, %rsp
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	callq	memset@PLT # Offset: 54
    0000003b: 	callq	clock@PLT # Offset: 59
    00000040: 	movq	%rax, start_time(%rip)
    00000047: 	movl	iterations(%rip), %eax
    0000004d: 	testl	%eax, %eax
    0000004f: 	jle	.Ltmp2113 # Offset: 79
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp2114:
    00000058: 	movl	$0x13880, %ecx
    0000005d: 	movq	%r13, %rdx
    00000060: 	movq	%r12, %rsi
    00000063: 	movq	%rbp, %rdi
    00000066: 	callq	*%r15 # Offset: 102
    00000069: 	addl	$0x1, %ebx
    0000006c: 	cmpl	iterations(%rip), %ebx
    00000072: 	jl	.Ltmp2114 # Offset: 114
.Ltmp2113:
    00000074: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000007b: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000082: 	subq	$0x20, %rax
    00000086: 	cmpq	%rax, %rbx
    00000089: 	je	.Ltmp2115 # Offset: 137
    0000008f: 	leaq	0x10(%rbx), %rdi
    00000093: 	movq	0x8(%r14), %r15
    00000097: 	movq	%rdi, (%rbx)
    0000009a: 	movq	(%r14), %r8
    0000009d: 	movq	%r8, %rax
    000000a0: 	addq	%r15, %rax
    000000a3: 	je	.Ltmp2116 # Offset: 163
    000000a5: 	testq	%r8, %r8
    000000a8: 	je	.Ltmp2117 # Offset: 168
.Ltmp2116:
    000000ae: 	movq	%r15, 0x10(%rsp)
    000000b3: 	cmpq	$0xf, %r15
    000000b7: 	ja	.Ltmp2118 # Offset: 183
    000000bd: 	cmpq	$0x1, %r15
    000000c1: 	jne	.Ltmp2119 # Offset: 193
    000000c7: 	movzbl	(%r8), %eax
    000000cb: 	movb	%al, 0x10(%rbx)
.Ltmp2124:
    000000ce: 	movq	%r15, 0x8(%rbx)
    000000d2: 	movb	$0x0, (%rdi,%r15)
    000000d7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000de: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000e5: 	addq	$0x20, %rax
    000000e9: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000f0: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000f7: 	je	.Ltmp2120 # Offset: 247
.Ltmp2125:
    000000fd: 	movq	-0x20(%rax), %r15
    00000101: 	callq	clock@PLT # Offset: 257
    00000106: 	pxor	%xmm0, %xmm0
    0000010a: 	movq	%rax, end_time(%rip)
    00000111: 	movq	%r15, %rdi
    00000114: 	subq	start_time(%rip), %rax
    0000011b: 	cvtsi2sd	%rax, %xmm0
    00000120: 	divsd	DATAat0x37530(%rip), %xmm0
    00000128: 	callq	_Z13record_resultdPKc # Offset: 296
    0000012d: 	xorl	%eax, %eax
.Ltmp2122:
    0000012f: 	movzwl	(%r12,%rax), %ecx
    00000134: 	cmpw	%cx, (%rbp,%rax,2)
    00000139: 	jne	.Ltmp2121 # Offset: 313
    0000013f: 	movzwl	(%r13,%rax), %edx
    00000145: 	cmpw	%dx, 0x2(%rbp,%rax,2)
    0000014a: 	jne	.Ltmp2121 # Offset: 330
    0000014c: 	addq	$0x2, %rax
    00000150: 	cmpq	$0x27100, %rax
    00000156: 	jne	.Ltmp2122 # Offset: 342
    00000158: 	movq	0x18(%rsp), %rax
    0000015d: 	subq	%fs:0x28, %rax
    00000166: 	jne	.Ltmp2123 # Offset: 358
    0000016c: 	addq	$0x28, %rsp
    00000170: 	popq	%rbx
    00000171: 	popq	%rbp
    00000172: 	popq	%r12
    00000174: 	popq	%r13
    00000176: 	popq	%r14
    00000178: 	popq	%r15
    0000017a: 	retq # Offset: 378
    0000017b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2118:
    00000180: 	movq	%rbx, %rdi
    00000183: 	leaq	0x10(%rsp), %rsi
    00000188: 	xorl	%edx, %edx
    0000018a: 	movq	%r8, 0x8(%rsp)
    0000018f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 399
    00000194: 	movq	0x8(%rsp), %r8
    00000199: 	movq	%rax, (%rbx)
    0000019c: 	movq	%rax, %rdi
    0000019f: 	movq	0x10(%rsp), %rax
    000001a4: 	movq	%rax, 0x10(%rbx)
.Ltmp2126:
    000001a8: 	movq	%r15, %rdx
    000001ab: 	movq	%r8, %rsi
    000001ae: 	callq	memcpy@PLT # Offset: 430
    000001b3: 	movq	0x10(%rsp), %r15
    000001b8: 	movq	(%rbx), %rdi
    000001bb: 	jmp	.Ltmp2124 # Offset: 443
.Ltmp2121:
    000001c0: 	movq	0x18(%rsp), %rax
    000001c5: 	subq	%fs:0x28, %rax
    000001ce: 	jne	.Ltmp2123 # Offset: 462
    000001d0: 	movq	(%r14), %rdx
    000001d3: 	addq	$0x28, %rsp
    000001d7: 	leaq	DATAat0x371c8(%rip), %rsi
    000001de: 	xorl	%eax, %eax
    000001e0: 	popq	%rbx
    000001e1: 	movl	$0x1, %edi
    000001e6: 	popq	%rbp
    000001e7: 	popq	%r12
    000001e9: 	popq	%r13
    000001eb: 	popq	%r14
    000001ed: 	popq	%r15
    000001ef: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 495
    000001f4: 	nopl	(%rax) # Size: 4
.Ltmp2115:
    000001f8: 	movq	%r14, %rsi
    000001fb: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000202: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 514
    00000207: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000020e: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000215: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000021c: 	jne	.Ltmp2125 # Offset: 540
.Ltmp2120:
    00000222: 	movq	-0x8(%rdx), %rax
    00000226: 	addq	$0x200, %rax
    0000022c: 	jmp	.Ltmp2125 # Offset: 556
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp2119:
    00000238: 	testq	%r15, %r15
    0000023b: 	je	.Ltmp2124 # Offset: 571
    00000241: 	jmp	.Ltmp2126 # Offset: 577
.Ltmp2123:
    00000246: 	callq	__stack_chk_fail@PLT # Offset: 582
.Ltmp2117:
    0000024b: 	leaq	DATAat0x37158(%rip), %rdi
    00000252: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 594
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave2to2ItPFvPtPKtS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z19test_interleave2to2IdPFvPdPKdS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z19test_interleave2to2IdPFvPdPKdS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z19test_interleave2to2IdPFvPdPKdS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/interleave.cpp/1
  Number      : 225
  State       : disassembled
  Address     : 0x25f00
  Size        : 0x267
  MaxSize     : 0x270
  Offset      : 0x25f00
  Section     : .text
  Orc Section : .local.text._Z19test_interleave2to2IdPFvPdPKdS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0224:
    00000000: 	pushq	%r15
    00000002: 	movq	%rcx, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%r8, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rdx, %r13
    0000000f: 	movl	$0x138800, %edx
    00000014: 	pushq	%r12
    00000016: 	movq	%rsi, %r12
    00000019: 	xorl	%esi, %esi
    0000001b: 	pushq	%rbp
    0000001c: 	movq	%rdi, %rbp
    0000001f: 	pushq	%rbx
    00000020: 	xorl	%ebx, %ebx
    00000022: 	subq	$0x28, %rsp
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	callq	memset@PLT # Offset: 54
    0000003b: 	callq	clock@PLT # Offset: 59
    00000040: 	movq	%rax, start_time(%rip)
    00000047: 	movl	iterations(%rip), %eax
    0000004d: 	testl	%eax, %eax
    0000004f: 	jle	.Ltmp2127 # Offset: 79
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp2128:
    00000058: 	movl	$0x13880, %ecx
    0000005d: 	movq	%r13, %rdx
    00000060: 	movq	%r12, %rsi
    00000063: 	movq	%rbp, %rdi
    00000066: 	callq	*%r15 # Offset: 102
    00000069: 	addl	$0x1, %ebx
    0000006c: 	cmpl	iterations(%rip), %ebx
    00000072: 	jl	.Ltmp2128 # Offset: 114
.Ltmp2127:
    00000074: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000007b: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000082: 	subq	$0x20, %rax
    00000086: 	cmpq	%rax, %rbx
    00000089: 	je	.Ltmp2129 # Offset: 137
    0000008f: 	leaq	0x10(%rbx), %rdi
    00000093: 	movq	0x8(%r14), %r15
    00000097: 	movq	%rdi, (%rbx)
    0000009a: 	movq	(%r14), %r8
    0000009d: 	movq	%r8, %rax
    000000a0: 	addq	%r15, %rax
    000000a3: 	je	.Ltmp2130 # Offset: 163
    000000a5: 	testq	%r8, %r8
    000000a8: 	je	.Ltmp2131 # Offset: 168
.Ltmp2130:
    000000ae: 	movq	%r15, 0x10(%rsp)
    000000b3: 	cmpq	$0xf, %r15
    000000b7: 	ja	.Ltmp2132 # Offset: 183
    000000bd: 	cmpq	$0x1, %r15
    000000c1: 	jne	.Ltmp2133 # Offset: 193
    000000c7: 	movzbl	(%r8), %eax
    000000cb: 	movb	%al, 0x10(%rbx)
.Ltmp2138:
    000000ce: 	movq	%r15, 0x8(%rbx)
    000000d2: 	movb	$0x0, (%rdi,%r15)
    000000d7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000de: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000e5: 	addq	$0x20, %rax
    000000e9: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000f0: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000f7: 	je	.Ltmp2134 # Offset: 247
.Ltmp2139:
    000000fd: 	movq	-0x20(%rax), %r15
    00000101: 	callq	clock@PLT # Offset: 257
    00000106: 	pxor	%xmm0, %xmm0
    0000010a: 	movq	%rax, end_time(%rip)
    00000111: 	movq	%r15, %rdi
    00000114: 	subq	start_time(%rip), %rax
    0000011b: 	cvtsi2sd	%rax, %xmm0
    00000120: 	divsd	DATAat0x37530(%rip), %xmm0
    00000128: 	callq	_Z13record_resultdPKc # Offset: 296
    0000012d: 	xorl	%eax, %eax
.Ltmp2136:
    0000012f: 	movsd	(%rbp,%rax,2), %xmm0
    00000135: 	ucomisd	(%r12,%rax), %xmm0
    0000013b: 	jp	.Ltmp2135 # Offset: 315
    00000141: 	jne	.Ltmp2135 # Offset: 321
    00000147: 	movsd	0x8(%rbp,%rax,2), %xmm0
    0000014d: 	ucomisd	(%r13,%rax), %xmm0
    00000154: 	jp	.Ltmp2135 # Offset: 340
    00000156: 	jne	.Ltmp2135 # Offset: 342
    00000158: 	addq	$0x8, %rax
    0000015c: 	cmpq	$0x9c400, %rax
    00000162: 	jne	.Ltmp2136 # Offset: 354
    00000164: 	movq	0x18(%rsp), %rax
    00000169: 	subq	%fs:0x28, %rax
    00000172: 	jne	.Ltmp2137 # Offset: 370
    00000178: 	addq	$0x28, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2132:
    00000190: 	movq	%rbx, %rdi
    00000193: 	leaq	0x10(%rsp), %rsi
    00000198: 	xorl	%edx, %edx
    0000019a: 	movq	%r8, 0x8(%rsp)
    0000019f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 415
    000001a4: 	movq	0x8(%rsp), %r8
    000001a9: 	movq	%rax, (%rbx)
    000001ac: 	movq	%rax, %rdi
    000001af: 	movq	0x10(%rsp), %rax
    000001b4: 	movq	%rax, 0x10(%rbx)
.Ltmp2140:
    000001b8: 	movq	%r15, %rdx
    000001bb: 	movq	%r8, %rsi
    000001be: 	callq	memcpy@PLT # Offset: 446
    000001c3: 	movq	0x10(%rsp), %r15
    000001c8: 	movq	(%rbx), %rdi
    000001cb: 	jmp	.Ltmp2138 # Offset: 459
.Ltmp2135:
    000001d0: 	movq	0x18(%rsp), %rax
    000001d5: 	subq	%fs:0x28, %rax
    000001de: 	jne	.Ltmp2137 # Offset: 478
    000001e0: 	movq	(%r14), %rdx
    000001e3: 	addq	$0x28, %rsp
    000001e7: 	leaq	DATAat0x371c8(%rip), %rsi
    000001ee: 	xorl	%eax, %eax
    000001f0: 	popq	%rbx
    000001f1: 	movl	$0x1, %edi
    000001f6: 	popq	%rbp
    000001f7: 	popq	%r12
    000001f9: 	popq	%r13
    000001fb: 	popq	%r14
    000001fd: 	popq	%r15
    000001ff: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 511
    00000204: 	nopl	(%rax) # Size: 4
.Ltmp2129:
    00000208: 	movq	%r14, %rsi
    0000020b: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000212: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 530
    00000217: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000021e: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000225: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000022c: 	jne	.Ltmp2139 # Offset: 556
.Ltmp2134:
    00000232: 	movq	-0x8(%rdx), %rax
    00000236: 	addq	$0x200, %rax
    0000023c: 	jmp	.Ltmp2139 # Offset: 572
    00000241: 	nopl	(%rax) # Size: 7
.Ltmp2133:
    00000248: 	testq	%r15, %r15
    0000024b: 	je	.Ltmp2138 # Offset: 587
    00000251: 	jmp	.Ltmp2140 # Offset: 593
.Ltmp2137:
    00000256: 	callq	__stack_chk_fail@PLT # Offset: 598
.Ltmp2131:
    0000025b: 	leaq	DATAat0x37158(%rip), %rdi
    00000262: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 610
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave2to2IdPFvPdPKdS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z19test_interleave2to2ImPFvPmPKmS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z19test_interleave2to2ImPFvPmPKmS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z19test_interleave2to2ImPFvPmPKmS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/interleave.cpp/1
  Number      : 226
  State       : disassembled
  Address     : 0x26170
  Size        : 0x257
  MaxSize     : 0x260
  Offset      : 0x26170
  Section     : .text
  Orc Section : .local.text._Z19test_interleave2to2ImPFvPmPKmS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0225:
    00000000: 	pushq	%r15
    00000002: 	movq	%rcx, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%r8, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rdx, %r13
    0000000f: 	movl	$0x138800, %edx
    00000014: 	pushq	%r12
    00000016: 	movq	%rsi, %r12
    00000019: 	xorl	%esi, %esi
    0000001b: 	pushq	%rbp
    0000001c: 	movq	%rdi, %rbp
    0000001f: 	pushq	%rbx
    00000020: 	xorl	%ebx, %ebx
    00000022: 	subq	$0x28, %rsp
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	callq	memset@PLT # Offset: 54
    0000003b: 	callq	clock@PLT # Offset: 59
    00000040: 	movq	%rax, start_time(%rip)
    00000047: 	movl	iterations(%rip), %eax
    0000004d: 	testl	%eax, %eax
    0000004f: 	jle	.Ltmp2141 # Offset: 79
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp2142:
    00000058: 	movl	$0x13880, %ecx
    0000005d: 	movq	%r13, %rdx
    00000060: 	movq	%r12, %rsi
    00000063: 	movq	%rbp, %rdi
    00000066: 	callq	*%r15 # Offset: 102
    00000069: 	addl	$0x1, %ebx
    0000006c: 	cmpl	iterations(%rip), %ebx
    00000072: 	jl	.Ltmp2142 # Offset: 114
.Ltmp2141:
    00000074: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000007b: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000082: 	subq	$0x20, %rax
    00000086: 	cmpq	%rax, %rbx
    00000089: 	je	.Ltmp2143 # Offset: 137
    0000008f: 	leaq	0x10(%rbx), %rdi
    00000093: 	movq	0x8(%r14), %r15
    00000097: 	movq	%rdi, (%rbx)
    0000009a: 	movq	(%r14), %r8
    0000009d: 	movq	%r8, %rax
    000000a0: 	addq	%r15, %rax
    000000a3: 	je	.Ltmp2144 # Offset: 163
    000000a5: 	testq	%r8, %r8
    000000a8: 	je	.Ltmp2145 # Offset: 168
.Ltmp2144:
    000000ae: 	movq	%r15, 0x10(%rsp)
    000000b3: 	cmpq	$0xf, %r15
    000000b7: 	ja	.Ltmp2146 # Offset: 183
    000000bd: 	cmpq	$0x1, %r15
    000000c1: 	jne	.Ltmp2147 # Offset: 193
    000000c7: 	movzbl	(%r8), %eax
    000000cb: 	movb	%al, 0x10(%rbx)
.Ltmp2152:
    000000ce: 	movq	%r15, 0x8(%rbx)
    000000d2: 	movb	$0x0, (%rdi,%r15)
    000000d7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000de: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000e5: 	addq	$0x20, %rax
    000000e9: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000f0: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000f7: 	je	.Ltmp2148 # Offset: 247
.Ltmp2153:
    000000fd: 	movq	-0x20(%rax), %r15
    00000101: 	callq	clock@PLT # Offset: 257
    00000106: 	pxor	%xmm0, %xmm0
    0000010a: 	movq	%rax, end_time(%rip)
    00000111: 	movq	%r15, %rdi
    00000114: 	subq	start_time(%rip), %rax
    0000011b: 	cvtsi2sd	%rax, %xmm0
    00000120: 	divsd	DATAat0x37530(%rip), %xmm0
    00000128: 	callq	_Z13record_resultdPKc # Offset: 296
    0000012d: 	xorl	%eax, %eax
.Ltmp2150:
    0000012f: 	movq	(%r12,%rax), %rcx
    00000133: 	cmpq	%rcx, (%rbp,%rax,2)
    00000138: 	jne	.Ltmp2149 # Offset: 312
    0000013e: 	movq	(%r13,%rax), %rdx
    00000143: 	cmpq	%rdx, 0x8(%rbp,%rax,2)
    00000148: 	jne	.Ltmp2149 # Offset: 328
    0000014a: 	addq	$0x8, %rax
    0000014e: 	cmpq	$0x9c400, %rax
    00000154: 	jne	.Ltmp2150 # Offset: 340
    00000156: 	movq	0x18(%rsp), %rax
    0000015b: 	subq	%fs:0x28, %rax
    00000164: 	jne	.Ltmp2151 # Offset: 356
    0000016a: 	addq	$0x28, %rsp
    0000016e: 	popq	%rbx
    0000016f: 	popq	%rbp
    00000170: 	popq	%r12
    00000172: 	popq	%r13
    00000174: 	popq	%r14
    00000176: 	popq	%r15
    00000178: 	retq # Offset: 376
    00000179: 	nopl	(%rax) # Size: 7
.Ltmp2146:
    00000180: 	movq	%rbx, %rdi
    00000183: 	leaq	0x10(%rsp), %rsi
    00000188: 	xorl	%edx, %edx
    0000018a: 	movq	%r8, 0x8(%rsp)
    0000018f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 399
    00000194: 	movq	0x8(%rsp), %r8
    00000199: 	movq	%rax, (%rbx)
    0000019c: 	movq	%rax, %rdi
    0000019f: 	movq	0x10(%rsp), %rax
    000001a4: 	movq	%rax, 0x10(%rbx)
.Ltmp2154:
    000001a8: 	movq	%r15, %rdx
    000001ab: 	movq	%r8, %rsi
    000001ae: 	callq	memcpy@PLT # Offset: 430
    000001b3: 	movq	0x10(%rsp), %r15
    000001b8: 	movq	(%rbx), %rdi
    000001bb: 	jmp	.Ltmp2152 # Offset: 443
.Ltmp2149:
    000001c0: 	movq	0x18(%rsp), %rax
    000001c5: 	subq	%fs:0x28, %rax
    000001ce: 	jne	.Ltmp2151 # Offset: 462
    000001d0: 	movq	(%r14), %rdx
    000001d3: 	addq	$0x28, %rsp
    000001d7: 	leaq	DATAat0x371c8(%rip), %rsi
    000001de: 	xorl	%eax, %eax
    000001e0: 	popq	%rbx
    000001e1: 	movl	$0x1, %edi
    000001e6: 	popq	%rbp
    000001e7: 	popq	%r12
    000001e9: 	popq	%r13
    000001eb: 	popq	%r14
    000001ed: 	popq	%r15
    000001ef: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 495
    000001f4: 	nopl	(%rax) # Size: 4
.Ltmp2143:
    000001f8: 	movq	%r14, %rsi
    000001fb: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000202: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 514
    00000207: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000020e: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000215: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000021c: 	jne	.Ltmp2153 # Offset: 540
.Ltmp2148:
    00000222: 	movq	-0x8(%rdx), %rax
    00000226: 	addq	$0x200, %rax
    0000022c: 	jmp	.Ltmp2153 # Offset: 556
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp2147:
    00000238: 	testq	%r15, %r15
    0000023b: 	je	.Ltmp2152 # Offset: 571
    00000241: 	jmp	.Ltmp2154 # Offset: 577
.Ltmp2151:
    00000246: 	callq	__stack_chk_fail@PLT # Offset: 582
.Ltmp2145:
    0000024b: 	leaq	DATAat0x37158(%rip), %rdi
    00000252: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 594
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave2to2ImPFvPmPKmS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z19test_interleave2to2IfPFvPfPKfS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z19test_interleave2to2IfPFvPfPKfS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z19test_interleave2to2IfPFvPfPKfS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/interleave.cpp/1
  Number      : 227
  State       : disassembled
  Address     : 0x263d0
  Size        : 0x267
  MaxSize     : 0x270
  Offset      : 0x263d0
  Section     : .text
  Orc Section : .local.text._Z19test_interleave2to2IfPFvPfPKfS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0226:
    00000000: 	pushq	%r15
    00000002: 	movq	%rcx, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%r8, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rdx, %r13
    0000000f: 	movl	$0x9c400, %edx
    00000014: 	pushq	%r12
    00000016: 	movq	%rsi, %r12
    00000019: 	xorl	%esi, %esi
    0000001b: 	pushq	%rbp
    0000001c: 	movq	%rdi, %rbp
    0000001f: 	pushq	%rbx
    00000020: 	xorl	%ebx, %ebx
    00000022: 	subq	$0x28, %rsp
    00000026: 	movq	%fs:0x28, %rax
    0000002f: 	movq	%rax, 0x18(%rsp)
    00000034: 	xorl	%eax, %eax
    00000036: 	callq	memset@PLT # Offset: 54
    0000003b: 	callq	clock@PLT # Offset: 59
    00000040: 	movq	%rax, start_time(%rip)
    00000047: 	movl	iterations(%rip), %eax
    0000004d: 	testl	%eax, %eax
    0000004f: 	jle	.Ltmp2155 # Offset: 79
    00000051: 	nopl	(%rax) # Size: 7
.Ltmp2156:
    00000058: 	movl	$0x13880, %ecx
    0000005d: 	movq	%r13, %rdx
    00000060: 	movq	%r12, %rsi
    00000063: 	movq	%rbp, %rdi
    00000066: 	callq	*%r15 # Offset: 102
    00000069: 	addl	$0x1, %ebx
    0000006c: 	cmpl	iterations(%rip), %ebx
    00000072: 	jl	.Ltmp2156 # Offset: 114
.Ltmp2155:
    00000074: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000007b: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000082: 	subq	$0x20, %rax
    00000086: 	cmpq	%rax, %rbx
    00000089: 	je	.Ltmp2157 # Offset: 137
    0000008f: 	leaq	0x10(%rbx), %rdi
    00000093: 	movq	0x8(%r14), %r15
    00000097: 	movq	%rdi, (%rbx)
    0000009a: 	movq	(%r14), %r8
    0000009d: 	movq	%r8, %rax
    000000a0: 	addq	%r15, %rax
    000000a3: 	je	.Ltmp2158 # Offset: 163
    000000a5: 	testq	%r8, %r8
    000000a8: 	je	.Ltmp2159 # Offset: 168
.Ltmp2158:
    000000ae: 	movq	%r15, 0x10(%rsp)
    000000b3: 	cmpq	$0xf, %r15
    000000b7: 	ja	.Ltmp2160 # Offset: 183
    000000bd: 	cmpq	$0x1, %r15
    000000c1: 	jne	.Ltmp2161 # Offset: 193
    000000c7: 	movzbl	(%r8), %eax
    000000cb: 	movb	%al, 0x10(%rbx)
.Ltmp2166:
    000000ce: 	movq	%r15, 0x8(%rbx)
    000000d2: 	movb	$0x0, (%rdi,%r15)
    000000d7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000de: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000e5: 	addq	$0x20, %rax
    000000e9: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000f0: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000f7: 	je	.Ltmp2162 # Offset: 247
.Ltmp2167:
    000000fd: 	movq	-0x20(%rax), %r15
    00000101: 	callq	clock@PLT # Offset: 257
    00000106: 	pxor	%xmm0, %xmm0
    0000010a: 	movq	%rax, end_time(%rip)
    00000111: 	movq	%r15, %rdi
    00000114: 	subq	start_time(%rip), %rax
    0000011b: 	cvtsi2sd	%rax, %xmm0
    00000120: 	divsd	DATAat0x37530(%rip), %xmm0
    00000128: 	callq	_Z13record_resultdPKc # Offset: 296
    0000012d: 	xorl	%eax, %eax
.Ltmp2164:
    0000012f: 	movss	(%rbp,%rax,2), %xmm0
    00000135: 	ucomiss	(%r12,%rax), %xmm0
    0000013a: 	jp	.Ltmp2163 # Offset: 314
    00000140: 	jne	.Ltmp2163 # Offset: 320
    00000146: 	movss	0x4(%rbp,%rax,2), %xmm0
    0000014c: 	ucomiss	(%r13,%rax), %xmm0
    00000152: 	jp	.Ltmp2163 # Offset: 338
    00000154: 	jne	.Ltmp2163 # Offset: 340
    00000156: 	addq	$0x4, %rax
    0000015a: 	cmpq	$0x4e200, %rax
    00000160: 	jne	.Ltmp2164 # Offset: 352
    00000162: 	movq	0x18(%rsp), %rax
    00000167: 	subq	%fs:0x28, %rax
    00000170: 	jne	.Ltmp2165 # Offset: 368
    00000176: 	addq	$0x28, %rsp
    0000017a: 	popq	%rbx
    0000017b: 	popq	%rbp
    0000017c: 	popq	%r12
    0000017e: 	popq	%r13
    00000180: 	popq	%r14
    00000182: 	popq	%r15
    00000184: 	retq # Offset: 388
    00000185: 	nopl	(%rax) # Size: 3
.Ltmp2160:
    00000188: 	movq	%rbx, %rdi
    0000018b: 	leaq	0x10(%rsp), %rsi
    00000190: 	xorl	%edx, %edx
    00000192: 	movq	%r8, 0x8(%rsp)
    00000197: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 407
    0000019c: 	movq	0x8(%rsp), %r8
    000001a1: 	movq	%rax, (%rbx)
    000001a4: 	movq	%rax, %rdi
    000001a7: 	movq	0x10(%rsp), %rax
    000001ac: 	movq	%rax, 0x10(%rbx)
.Ltmp2168:
    000001b0: 	movq	%r15, %rdx
    000001b3: 	movq	%r8, %rsi
    000001b6: 	callq	memcpy@PLT # Offset: 438
    000001bb: 	movq	0x10(%rsp), %r15
    000001c0: 	movq	(%rbx), %rdi
    000001c3: 	jmp	.Ltmp2166 # Offset: 451
    000001c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2163:
    000001d0: 	movq	0x18(%rsp), %rax
    000001d5: 	subq	%fs:0x28, %rax
    000001de: 	jne	.Ltmp2165 # Offset: 478
    000001e0: 	movq	(%r14), %rdx
    000001e3: 	addq	$0x28, %rsp
    000001e7: 	leaq	DATAat0x371c8(%rip), %rsi
    000001ee: 	xorl	%eax, %eax
    000001f0: 	popq	%rbx
    000001f1: 	movl	$0x1, %edi
    000001f6: 	popq	%rbp
    000001f7: 	popq	%r12
    000001f9: 	popq	%r13
    000001fb: 	popq	%r14
    000001fd: 	popq	%r15
    000001ff: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 511
    00000204: 	nopl	(%rax) # Size: 4
.Ltmp2157:
    00000208: 	movq	%r14, %rsi
    0000020b: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000212: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 530
    00000217: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000021e: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000225: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000022c: 	jne	.Ltmp2167 # Offset: 556
.Ltmp2162:
    00000232: 	movq	-0x8(%rdx), %rax
    00000236: 	addq	$0x200, %rax
    0000023c: 	jmp	.Ltmp2167 # Offset: 572
    00000241: 	nopl	(%rax) # Size: 7
.Ltmp2161:
    00000248: 	testq	%r15, %r15
    0000024b: 	je	.Ltmp2166 # Offset: 587
    00000251: 	jmp	.Ltmp2168 # Offset: 593
.Ltmp2165:
    00000256: 	callq	__stack_chk_fail@PLT # Offset: 598
.Ltmp2159:
    0000025b: 	leaq	DATAat0x37158(%rip), %rdi
    00000262: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 610
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave2to2IfPFvPfPKfS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z19test_interleave3to3IhPFvPhPKhS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z19test_interleave3to3IhPFvPhPKhS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z19test_interleave3to3IhPFvPhPKhS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/interleave.cpp/1
  Number      : 228
  State       : disassembled
  Address     : 0x26640
  Size        : 0x27f
  MaxSize     : 0x280
  Offset      : 0x26640
  Section     : .text
  Orc Section : .local.text._Z19test_interleave3to3IhPFvPhPKhS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0227:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%r8, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rcx, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rdx, %r12
    00000014: 	movl	$0x3a980, %edx
    00000019: 	pushq	%rbp
    0000001a: 	movq	%rsi, %rbp
    0000001d: 	xorl	%esi, %esi
    0000001f: 	pushq	%rbx
    00000020: 	xorl	%ebx, %ebx
    00000022: 	subq	$0x28, %rsp
    00000026: 	movq	%r9, (%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x18(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	callq	memset@PLT # Offset: 58
    0000003f: 	callq	clock@PLT # Offset: 63
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	movl	iterations(%rip), %eax
    00000051: 	testl	%eax, %eax
    00000053: 	jle	.Ltmp2169 # Offset: 83
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp2170:
    00000058: 	movl	$0x13880, %r8d
    0000005e: 	movq	%r13, %rcx
    00000061: 	movq	%r12, %rdx
    00000064: 	movq	%rbp, %rsi
    00000067: 	movq	%r15, %rdi
    0000006a: 	addl	$0x1, %ebx
    0000006d: 	callq	*%r14 # Offset: 109
    00000070: 	cmpl	iterations(%rip), %ebx
    00000076: 	jl	.Ltmp2170 # Offset: 118
.Ltmp2169:
    00000078: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000007f: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000086: 	subq	$0x20, %rax
    0000008a: 	cmpq	%rax, %rbx
    0000008d: 	je	.Ltmp2171 # Offset: 141
    00000093: 	movq	(%rsp), %rax
    00000097: 	leaq	0x10(%rbx), %rdi
    0000009b: 	movq	%rdi, (%rbx)
    0000009e: 	movq	(%rax), %r8
    000000a1: 	movq	0x8(%rax), %r14
    000000a5: 	movq	%r8, %rax
    000000a8: 	addq	%r14, %rax
    000000ab: 	je	.Ltmp2172 # Offset: 171
    000000ad: 	testq	%r8, %r8
    000000b0: 	je	.Ltmp2173 # Offset: 176
.Ltmp2172:
    000000b6: 	movq	%r14, 0x10(%rsp)
    000000bb: 	cmpq	$0xf, %r14
    000000bf: 	ja	.Ltmp2174 # Offset: 191
    000000c5: 	cmpq	$0x1, %r14
    000000c9: 	jne	.Ltmp2175 # Offset: 201
    000000cf: 	movzbl	(%r8), %eax
    000000d3: 	movb	%al, 0x10(%rbx)
.Ltmp2180:
    000000d6: 	movq	%r14, 0x8(%rbx)
    000000da: 	movb	$0x0, (%rdi,%r14)
    000000df: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000e6: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000ed: 	addq	$0x20, %rax
    000000f1: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000f8: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000ff: 	je	.Ltmp2176 # Offset: 255
.Ltmp2181:
    00000105: 	movq	-0x20(%rax), %r14
    00000109: 	callq	clock@PLT # Offset: 265
    0000010e: 	pxor	%xmm0, %xmm0
    00000112: 	movq	%rax, end_time(%rip)
    00000119: 	movq	%r14, %rdi
    0000011c: 	subq	start_time(%rip), %rax
    00000123: 	cvtsi2sd	%rax, %xmm0
    00000128: 	divsd	DATAat0x37530(%rip), %xmm0
    00000130: 	callq	_Z13record_resultdPKc # Offset: 304
    00000135: 	xorl	%eax, %eax
.Ltmp2178:
    00000137: 	movzbl	(%rbp,%rax), %ecx
    0000013c: 	cmpb	%cl, (%r15)
    0000013f: 	jne	.Ltmp2177 # Offset: 319
    00000145: 	movzbl	(%r12,%rax), %edx
    0000014a: 	cmpb	%dl, 0x1(%r15)
    0000014e: 	jne	.Ltmp2177 # Offset: 334
    00000154: 	movzbl	(%r13,%rax), %ecx
    0000015a: 	cmpb	%cl, 0x2(%r15)
    0000015e: 	jne	.Ltmp2177 # Offset: 350
    00000164: 	addq	$0x1, %rax
    00000168: 	addq	$0x3, %r15
    0000016c: 	cmpq	$0x13880, %rax
    00000172: 	jne	.Ltmp2178 # Offset: 370
    00000174: 	movq	0x18(%rsp), %rax
    00000179: 	subq	%fs:0x28, %rax
    00000182: 	jne	.Ltmp2179 # Offset: 386
    00000188: 	addq	$0x28, %rsp
    0000018c: 	popq	%rbx
    0000018d: 	popq	%rbp
    0000018e: 	popq	%r12
    00000190: 	popq	%r13
    00000192: 	popq	%r14
    00000194: 	popq	%r15
    00000196: 	retq # Offset: 406
    00000197: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2174:
    000001a0: 	movq	%rbx, %rdi
    000001a3: 	leaq	0x10(%rsp), %rsi
    000001a8: 	xorl	%edx, %edx
    000001aa: 	movq	%r8, 0x8(%rsp)
    000001af: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 431
    000001b4: 	movq	0x8(%rsp), %r8
    000001b9: 	movq	%rax, (%rbx)
    000001bc: 	movq	%rax, %rdi
    000001bf: 	movq	0x10(%rsp), %rax
    000001c4: 	movq	%rax, 0x10(%rbx)
.Ltmp2182:
    000001c8: 	movq	%r14, %rdx
    000001cb: 	movq	%r8, %rsi
    000001ce: 	callq	memcpy@PLT # Offset: 462
    000001d3: 	movq	0x10(%rsp), %r14
    000001d8: 	movq	(%rbx), %rdi
    000001db: 	jmp	.Ltmp2180 # Offset: 475
.Ltmp2177:
    000001e0: 	movq	0x18(%rsp), %rax
    000001e5: 	subq	%fs:0x28, %rax
    000001ee: 	jne	.Ltmp2179 # Offset: 494
    000001f0: 	movq	(%rsp), %rax
    000001f4: 	leaq	DATAat0x371c8(%rip), %rsi
    000001fb: 	movl	$0x1, %edi
    00000200: 	movq	(%rax), %rdx
    00000203: 	addq	$0x28, %rsp
    00000207: 	xorl	%eax, %eax
    00000209: 	popq	%rbx
    0000020a: 	popq	%rbp
    0000020b: 	popq	%r12
    0000020d: 	popq	%r13
    0000020f: 	popq	%r14
    00000211: 	popq	%r15
    00000213: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 531
    00000218: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2171:
    00000220: 	movq	(%rsp), %rsi
    00000224: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000022b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 555
    00000230: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000237: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000023e: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000245: 	jne	.Ltmp2181 # Offset: 581
.Ltmp2176:
    0000024b: 	movq	-0x8(%rdx), %rax
    0000024f: 	addq	$0x200, %rax
    00000255: 	jmp	.Ltmp2181 # Offset: 597
    0000025a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2175:
    00000260: 	testq	%r14, %r14
    00000263: 	je	.Ltmp2180 # Offset: 611
    00000269: 	jmp	.Ltmp2182 # Offset: 617
.Ltmp2179:
    0000026e: 	callq	__stack_chk_fail@PLT # Offset: 622
.Ltmp2173:
    00000273: 	leaq	DATAat0x37158(%rip), %rdi
    0000027a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 634
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave3to3IhPFvPhPKhS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z19test_interleave3to3ImPFvPmPKmS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z19test_interleave3to3ImPFvPmPKmS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z19test_interleave3to3ImPFvPmPKmS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/interleave.cpp/1
  Number      : 229
  State       : disassembled
  Address     : 0x268c0
  Size        : 0x27f
  MaxSize     : 0x280
  Offset      : 0x268c0
  Section     : .text
  Orc Section : .local.text._Z19test_interleave3to3ImPFvPmPKmS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0228:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%r8, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rcx, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rdx, %r12
    00000014: 	movl	$0x1d4c00, %edx
    00000019: 	pushq	%rbp
    0000001a: 	movq	%rsi, %rbp
    0000001d: 	xorl	%esi, %esi
    0000001f: 	pushq	%rbx
    00000020: 	xorl	%ebx, %ebx
    00000022: 	subq	$0x28, %rsp
    00000026: 	movq	%r9, (%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x18(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	callq	memset@PLT # Offset: 58
    0000003f: 	callq	clock@PLT # Offset: 63
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	movl	iterations(%rip), %eax
    00000051: 	testl	%eax, %eax
    00000053: 	jle	.Ltmp2183 # Offset: 83
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp2184:
    00000058: 	movl	$0x13880, %r8d
    0000005e: 	movq	%r13, %rcx
    00000061: 	movq	%r12, %rdx
    00000064: 	movq	%rbp, %rsi
    00000067: 	movq	%r15, %rdi
    0000006a: 	addl	$0x1, %ebx
    0000006d: 	callq	*%r14 # Offset: 109
    00000070: 	cmpl	iterations(%rip), %ebx
    00000076: 	jl	.Ltmp2184 # Offset: 118
.Ltmp2183:
    00000078: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000007f: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000086: 	subq	$0x20, %rax
    0000008a: 	cmpq	%rax, %rbx
    0000008d: 	je	.Ltmp2185 # Offset: 141
    00000093: 	movq	(%rsp), %rax
    00000097: 	leaq	0x10(%rbx), %rdi
    0000009b: 	movq	%rdi, (%rbx)
    0000009e: 	movq	(%rax), %r8
    000000a1: 	movq	0x8(%rax), %r14
    000000a5: 	movq	%r8, %rax
    000000a8: 	addq	%r14, %rax
    000000ab: 	je	.Ltmp2186 # Offset: 171
    000000ad: 	testq	%r8, %r8
    000000b0: 	je	.Ltmp2187 # Offset: 176
.Ltmp2186:
    000000b6: 	movq	%r14, 0x10(%rsp)
    000000bb: 	cmpq	$0xf, %r14
    000000bf: 	ja	.Ltmp2188 # Offset: 191
    000000c5: 	cmpq	$0x1, %r14
    000000c9: 	jne	.Ltmp2189 # Offset: 201
    000000cf: 	movzbl	(%r8), %eax
    000000d3: 	movb	%al, 0x10(%rbx)
.Ltmp2194:
    000000d6: 	movq	%r14, 0x8(%rbx)
    000000da: 	movb	$0x0, (%rdi,%r14)
    000000df: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000e6: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000ed: 	addq	$0x20, %rax
    000000f1: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000f8: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000ff: 	je	.Ltmp2190 # Offset: 255
.Ltmp2195:
    00000105: 	movq	-0x20(%rax), %r14
    00000109: 	callq	clock@PLT # Offset: 265
    0000010e: 	pxor	%xmm0, %xmm0
    00000112: 	movq	%rax, end_time(%rip)
    00000119: 	movq	%r14, %rdi
    0000011c: 	subq	start_time(%rip), %rax
    00000123: 	cvtsi2sd	%rax, %xmm0
    00000128: 	divsd	DATAat0x37530(%rip), %xmm0
    00000130: 	callq	_Z13record_resultdPKc # Offset: 304
    00000135: 	xorl	%eax, %eax
.Ltmp2192:
    00000137: 	movq	(%rbp,%rax), %rcx
    0000013c: 	cmpq	%rcx, (%r15)
    0000013f: 	jne	.Ltmp2191 # Offset: 319
    00000145: 	movq	(%r12,%rax), %rdx
    00000149: 	cmpq	%rdx, 0x8(%r15)
    0000014d: 	jne	.Ltmp2191 # Offset: 333
    00000153: 	movq	(%r13,%rax), %rcx
    00000158: 	cmpq	%rcx, 0x10(%r15)
    0000015c: 	jne	.Ltmp2191 # Offset: 348
    00000162: 	addq	$0x8, %rax
    00000166: 	addq	$0x18, %r15
    0000016a: 	cmpq	$0x9c400, %rax
    00000170: 	jne	.Ltmp2192 # Offset: 368
    00000172: 	movq	0x18(%rsp), %rax
    00000177: 	subq	%fs:0x28, %rax
    00000180: 	jne	.Ltmp2193 # Offset: 384
    00000186: 	addq	$0x28, %rsp
    0000018a: 	popq	%rbx
    0000018b: 	popq	%rbp
    0000018c: 	popq	%r12
    0000018e: 	popq	%r13
    00000190: 	popq	%r14
    00000192: 	popq	%r15
    00000194: 	retq # Offset: 404
    00000195: 	nopl	(%rax) # Size: 3
.Ltmp2188:
    00000198: 	movq	%rbx, %rdi
    0000019b: 	leaq	0x10(%rsp), %rsi
    000001a0: 	xorl	%edx, %edx
    000001a2: 	movq	%r8, 0x8(%rsp)
    000001a7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 423
    000001ac: 	movq	0x8(%rsp), %r8
    000001b1: 	movq	%rax, (%rbx)
    000001b4: 	movq	%rax, %rdi
    000001b7: 	movq	0x10(%rsp), %rax
    000001bc: 	movq	%rax, 0x10(%rbx)
.Ltmp2196:
    000001c0: 	movq	%r14, %rdx
    000001c3: 	movq	%r8, %rsi
    000001c6: 	callq	memcpy@PLT # Offset: 454
    000001cb: 	movq	0x10(%rsp), %r14
    000001d0: 	movq	(%rbx), %rdi
    000001d3: 	jmp	.Ltmp2194 # Offset: 467
    000001d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2191:
    000001e0: 	movq	0x18(%rsp), %rax
    000001e5: 	subq	%fs:0x28, %rax
    000001ee: 	jne	.Ltmp2193 # Offset: 494
    000001f0: 	movq	(%rsp), %rax
    000001f4: 	leaq	DATAat0x371c8(%rip), %rsi
    000001fb: 	movl	$0x1, %edi
    00000200: 	movq	(%rax), %rdx
    00000203: 	addq	$0x28, %rsp
    00000207: 	xorl	%eax, %eax
    00000209: 	popq	%rbx
    0000020a: 	popq	%rbp
    0000020b: 	popq	%r12
    0000020d: 	popq	%r13
    0000020f: 	popq	%r14
    00000211: 	popq	%r15
    00000213: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 531
    00000218: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2185:
    00000220: 	movq	(%rsp), %rsi
    00000224: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000022b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 555
    00000230: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000237: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000023e: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000245: 	jne	.Ltmp2195 # Offset: 581
.Ltmp2190:
    0000024b: 	movq	-0x8(%rdx), %rax
    0000024f: 	addq	$0x200, %rax
    00000255: 	jmp	.Ltmp2195 # Offset: 597
    0000025a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2189:
    00000260: 	testq	%r14, %r14
    00000263: 	je	.Ltmp2194 # Offset: 611
    00000269: 	jmp	.Ltmp2196 # Offset: 617
.Ltmp2193:
    0000026e: 	callq	__stack_chk_fail@PLT # Offset: 622
.Ltmp2187:
    00000273: 	leaq	DATAat0x37158(%rip), %rdi
    0000027a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 634
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave3to3ImPFvPmPKmS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z19test_interleave2to2IePFvPePKeS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 230
  State       : disassembled
  Address     : 0x26b40
  Size        : 0x2a0
  MaxSize     : 0x2a0
  Offset      : 0x26b40
  Section     : .text
  Orc Section : .local.text._Z19test_interleave2to2IePFvPePKeS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0229:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%r8, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdx, %r13
    00000010: 	leal	(%rcx,%rcx), %edx
    00000013: 	pushq	%r12
    00000015: 	movslq	%edx, %rdx
    00000018: 	movq	%rsi, %r12
    0000001b: 	pushq	%rbp
    0000001c: 	movl	%ecx, %ebp
    0000001e: 	pushq	%rbx
    0000001f: 	movq	%rdi, %rbx
    00000022: 	subq	$0x38, %rsp
    00000026: 	movq	%r9, 0x8(%rsp)
    0000002b: 	movq	%fs:0x28, %rax
    00000034: 	movq	%rax, 0x28(%rsp)
    00000039: 	xorl	%eax, %eax
    0000003b: 	shlq	$0x4, %rdx
    0000003f: 	je	.Ltmp2197 # Offset: 63
    00000041: 	xorl	%esi, %esi
    00000043: 	callq	memset@PLT # Offset: 67
.Ltmp2197:
    00000048: 	callq	clock@PLT # Offset: 72
    0000004d: 	xorl	%r15d, %r15d
    00000050: 	movq	%rax, start_time(%rip)
    00000057: 	movl	iterations(%rip), %eax
    0000005d: 	testl	%eax, %eax
    0000005f: 	jle	.Ltmp2198 # Offset: 95
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp2199:
    00000068: 	movl	%ebp, %ecx
    0000006a: 	movq	%r13, %rdx
    0000006d: 	movq	%r12, %rsi
    00000070: 	movq	%rbx, %rdi
    00000073: 	callq	*%r14 # Offset: 115
    00000076: 	addl	$0x1, %r15d
    0000007a: 	cmpl	%r15d, iterations(%rip)
    00000081: 	jg	.Ltmp2199 # Offset: 129
.Ltmp2198:
    00000083: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000008a: 	movq	"_ZL7gLabels/1"+48(%rip), %rcx
    00000091: 	subq	$0x20, %rax
    00000095: 	cmpq	%rax, %rcx
    00000098: 	je	.Ltmp2200 # Offset: 152
    0000009e: 	movq	0x8(%rsp), %rax
    000000a3: 	leaq	0x10(%rcx), %rdi
    000000a7: 	movq	%rdi, (%rcx)
    000000aa: 	movq	(%rax), %r8
    000000ad: 	movq	0x8(%rax), %r14
    000000b1: 	movq	%r8, %rax
    000000b4: 	addq	%r14, %rax
    000000b7: 	je	.Ltmp2201 # Offset: 183
    000000b9: 	testq	%r8, %r8
    000000bc: 	je	.Ltmp2202 # Offset: 188
.Ltmp2201:
    000000c2: 	movq	%r14, 0x20(%rsp)
    000000c7: 	cmpq	$0xf, %r14
    000000cb: 	ja	.Ltmp2203 # Offset: 203
    000000d1: 	cmpq	$0x1, %r14
    000000d5: 	jne	.Ltmp2204 # Offset: 213
    000000db: 	movzbl	(%r8), %eax
    000000df: 	movb	%al, 0x10(%rcx)
.Ltmp2211:
    000000e2: 	movq	%r14, 0x8(%rcx)
    000000e6: 	movb	$0x0, (%rdi,%r14)
    000000eb: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000f2: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000f9: 	addq	$0x20, %rax
    000000fd: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000104: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000010b: 	je	.Ltmp2205 # Offset: 267
.Ltmp2212:
    00000111: 	movq	-0x20(%rax), %r14
    00000115: 	callq	clock@PLT # Offset: 277
    0000011a: 	pxor	%xmm0, %xmm0
    0000011e: 	movq	%rax, end_time(%rip)
    00000125: 	movq	%r14, %rdi
    00000128: 	subq	start_time(%rip), %rax
    0000012f: 	cvtsi2sd	%rax, %xmm0
    00000134: 	divsd	DATAat0x37530(%rip), %xmm0
    0000013c: 	callq	_Z13record_resultdPKc # Offset: 316
    00000141: 	movslq	%ebp, %rdx
    00000144: 	xorl	%eax, %eax
    00000146: 	shlq	$0x4, %rdx
    0000014a: 	testl	%ebp, %ebp
    0000014c: 	jg	.Ltmp2206 # Offset: 332
    0000014e: 	jmp	.Ltmp2207 # Offset: 334
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2209:
    00000158: 	fldt	(%r13,%rax)
    0000015d: 	fldt	0x10(%rbx,%rax,2)
    00000161: 	fucompi	%st(1), %st
    00000163: 	fstp	%st(0)
    00000165: 	jp	.Ltmp2208 # Offset: 357
    00000167: 	jne	.Ltmp2208 # Offset: 359
    00000169: 	addq	$0x10, %rax
    0000016d: 	cmpq	%rdx, %rax
    00000170: 	je	.Ltmp2207 # Offset: 368
.Ltmp2206:
    00000176: 	fldt	(%r12,%rax)
    0000017a: 	fldt	(%rbx,%rax,2)
    0000017d: 	fucompi	%st(1), %st
    0000017f: 	fstp	%st(0)
    00000181: 	jp	.Ltmp2208 # Offset: 385
    00000183: 	je	.Ltmp2209 # Offset: 387
.Ltmp2208:
    00000185: 	movq	0x28(%rsp), %rax
    0000018a: 	subq	%fs:0x28, %rax
    00000193: 	jne	.Ltmp2210 # Offset: 403
    00000199: 	movq	0x8(%rsp), %rax
    0000019e: 	leaq	DATAat0x371c8(%rip), %rsi
    000001a5: 	movl	$0x1, %edi
    000001aa: 	movq	(%rax), %rdx
    000001ad: 	addq	$0x38, %rsp
    000001b1: 	xorl	%eax, %eax
    000001b3: 	popq	%rbx
    000001b4: 	popq	%rbp
    000001b5: 	popq	%r12
    000001b7: 	popq	%r13
    000001b9: 	popq	%r14
    000001bb: 	popq	%r15
    000001bd: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 445
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2203:
    000001c8: 	movq	%rcx, %rdi
    000001cb: 	leaq	0x20(%rsp), %rsi
    000001d0: 	xorl	%edx, %edx
    000001d2: 	movq	%r8, 0x18(%rsp)
    000001d7: 	movq	%rcx, 0x10(%rsp)
    000001dc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 476
    000001e1: 	movq	0x10(%rsp), %rcx
    000001e6: 	movq	0x18(%rsp), %r8
    000001eb: 	movq	%rax, %rdi
    000001ee: 	movq	%rax, (%rcx)
    000001f1: 	movq	0x20(%rsp), %rax
    000001f6: 	movq	%rax, 0x10(%rcx)
.Ltmp2213:
    000001fa: 	movq	%r14, %rdx
    000001fd: 	movq	%r8, %rsi
    00000200: 	movq	%rcx, 0x10(%rsp)
    00000205: 	callq	memcpy@PLT # Offset: 517
    0000020a: 	movq	0x10(%rsp), %rcx
    0000020f: 	movq	0x20(%rsp), %r14
    00000214: 	movq	(%rcx), %rdi
    00000217: 	jmp	.Ltmp2211 # Offset: 535
    0000021c: 	nopl	(%rax) # Size: 4
.Ltmp2200:
    00000220: 	movq	0x8(%rsp), %rsi
    00000225: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000022c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 556
    00000231: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000238: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000023f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000246: 	jne	.Ltmp2212 # Offset: 582
.Ltmp2205:
    0000024c: 	movq	-0x8(%rdx), %rax
    00000250: 	addq	$0x200, %rax
    00000256: 	jmp	.Ltmp2212 # Offset: 598
    0000025b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2204:
    00000260: 	testq	%r14, %r14
    00000263: 	je	.Ltmp2211 # Offset: 611
    00000269: 	jmp	.Ltmp2213 # Offset: 617
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2207:
    00000270: 	movq	0x28(%rsp), %rax
    00000275: 	subq	%fs:0x28, %rax
    0000027e: 	jne	.Ltmp2210 # Offset: 638
    00000280: 	addq	$0x38, %rsp
    00000284: 	popq	%rbx
    00000285: 	popq	%rbp
    00000286: 	popq	%r12
    00000288: 	popq	%r13
    0000028a: 	popq	%r14
    0000028c: 	popq	%r15
    0000028e: 	retq # Offset: 654
.Ltmp2210:
    0000028f: 	callq	__stack_chk_fail@PLT # Offset: 655
.Ltmp2202:
    00000294: 	leaq	DATAat0x37158(%rip), %rdi
    0000029b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 667
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave2to2IePFvPePKeS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_interleave3to3IfPFvPfPKfS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z19test_interleave3to3IfPFvPfPKfS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z19test_interleave3to3IfPFvPfPKfS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/interleave.cpp/1
  Number      : 231
  State       : disassembled
  Address     : 0x26de0
  Size        : 0x28f
  MaxSize     : 0x290
  Offset      : 0x26de0
  Section     : .text
  Orc Section : .local.text._Z19test_interleave3to3IfPFvPfPKfS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0230:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%r8, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rcx, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rdx, %r12
    00000014: 	movl	$0xea600, %edx
    00000019: 	pushq	%rbp
    0000001a: 	movq	%rsi, %rbp
    0000001d: 	xorl	%esi, %esi
    0000001f: 	pushq	%rbx
    00000020: 	xorl	%ebx, %ebx
    00000022: 	subq	$0x28, %rsp
    00000026: 	movq	%r9, (%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x18(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	callq	memset@PLT # Offset: 58
    0000003f: 	callq	clock@PLT # Offset: 63
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	movl	iterations(%rip), %eax
    00000051: 	testl	%eax, %eax
    00000053: 	jle	.Ltmp2214 # Offset: 83
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp2215:
    00000058: 	movl	$0x13880, %r8d
    0000005e: 	movq	%r13, %rcx
    00000061: 	movq	%r12, %rdx
    00000064: 	movq	%rbp, %rsi
    00000067: 	movq	%r15, %rdi
    0000006a: 	addl	$0x1, %ebx
    0000006d: 	callq	*%r14 # Offset: 109
    00000070: 	cmpl	iterations(%rip), %ebx
    00000076: 	jl	.Ltmp2215 # Offset: 118
.Ltmp2214:
    00000078: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000007f: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000086: 	subq	$0x20, %rax
    0000008a: 	cmpq	%rax, %rbx
    0000008d: 	je	.Ltmp2216 # Offset: 141
    00000093: 	movq	(%rsp), %rax
    00000097: 	leaq	0x10(%rbx), %rdi
    0000009b: 	movq	%rdi, (%rbx)
    0000009e: 	movq	(%rax), %r8
    000000a1: 	movq	0x8(%rax), %r14
    000000a5: 	movq	%r8, %rax
    000000a8: 	addq	%r14, %rax
    000000ab: 	je	.Ltmp2217 # Offset: 171
    000000ad: 	testq	%r8, %r8
    000000b0: 	je	.Ltmp2218 # Offset: 176
.Ltmp2217:
    000000b6: 	movq	%r14, 0x10(%rsp)
    000000bb: 	cmpq	$0xf, %r14
    000000bf: 	ja	.Ltmp2219 # Offset: 191
    000000c5: 	cmpq	$0x1, %r14
    000000c9: 	jne	.Ltmp2220 # Offset: 201
    000000cf: 	movzbl	(%r8), %eax
    000000d3: 	movb	%al, 0x10(%rbx)
.Ltmp2225:
    000000d6: 	movq	%r14, 0x8(%rbx)
    000000da: 	movb	$0x0, (%rdi,%r14)
    000000df: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000e6: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000ed: 	addq	$0x20, %rax
    000000f1: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000f8: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000ff: 	je	.Ltmp2221 # Offset: 255
.Ltmp2226:
    00000105: 	movq	-0x20(%rax), %r14
    00000109: 	callq	clock@PLT # Offset: 265
    0000010e: 	pxor	%xmm0, %xmm0
    00000112: 	movq	%rax, end_time(%rip)
    00000119: 	movq	%r14, %rdi
    0000011c: 	subq	start_time(%rip), %rax
    00000123: 	cvtsi2sd	%rax, %xmm0
    00000128: 	divsd	DATAat0x37530(%rip), %xmm0
    00000130: 	callq	_Z13record_resultdPKc # Offset: 304
    00000135: 	xorl	%eax, %eax
.Ltmp2223:
    00000137: 	movss	(%r15), %xmm0
    0000013c: 	ucomiss	(%rbp,%rax), %xmm0
    00000141: 	jp	.Ltmp2222 # Offset: 321
    00000147: 	jne	.Ltmp2222 # Offset: 327
    0000014d: 	movss	0x4(%r15), %xmm0
    00000153: 	ucomiss	(%r12,%rax), %xmm0
    00000158: 	jp	.Ltmp2222 # Offset: 344
    0000015e: 	jne	.Ltmp2222 # Offset: 350
    00000164: 	movss	0x8(%r15), %xmm0
    0000016a: 	ucomiss	(%r13,%rax), %xmm0
    00000170: 	jp	.Ltmp2222 # Offset: 368
    00000172: 	jne	.Ltmp2222 # Offset: 370
    00000174: 	addq	$0x4, %rax
    00000178: 	addq	$0xc, %r15
    0000017c: 	cmpq	$0x4e200, %rax
    00000182: 	jne	.Ltmp2223 # Offset: 386
    00000184: 	movq	0x18(%rsp), %rax
    00000189: 	subq	%fs:0x28, %rax
    00000192: 	jne	.Ltmp2224 # Offset: 402
    00000198: 	addq	$0x28, %rsp
    0000019c: 	popq	%rbx
    0000019d: 	popq	%rbp
    0000019e: 	popq	%r12
    000001a0: 	popq	%r13
    000001a2: 	popq	%r14
    000001a4: 	popq	%r15
    000001a6: 	retq # Offset: 422
    000001a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2219:
    000001b0: 	movq	%rbx, %rdi
    000001b3: 	leaq	0x10(%rsp), %rsi
    000001b8: 	xorl	%edx, %edx
    000001ba: 	movq	%r8, 0x8(%rsp)
    000001bf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 447
    000001c4: 	movq	0x8(%rsp), %r8
    000001c9: 	movq	%rax, (%rbx)
    000001cc: 	movq	%rax, %rdi
    000001cf: 	movq	0x10(%rsp), %rax
    000001d4: 	movq	%rax, 0x10(%rbx)
.Ltmp2227:
    000001d8: 	movq	%r14, %rdx
    000001db: 	movq	%r8, %rsi
    000001de: 	callq	memcpy@PLT # Offset: 478
    000001e3: 	movq	0x10(%rsp), %r14
    000001e8: 	movq	(%rbx), %rdi
    000001eb: 	jmp	.Ltmp2225 # Offset: 491
.Ltmp2222:
    000001f0: 	movq	0x18(%rsp), %rax
    000001f5: 	subq	%fs:0x28, %rax
    000001fe: 	jne	.Ltmp2224 # Offset: 510
    00000200: 	movq	(%rsp), %rax
    00000204: 	leaq	DATAat0x371c8(%rip), %rsi
    0000020b: 	movl	$0x1, %edi
    00000210: 	movq	(%rax), %rdx
    00000213: 	addq	$0x28, %rsp
    00000217: 	xorl	%eax, %eax
    00000219: 	popq	%rbx
    0000021a: 	popq	%rbp
    0000021b: 	popq	%r12
    0000021d: 	popq	%r13
    0000021f: 	popq	%r14
    00000221: 	popq	%r15
    00000223: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 547
    00000228: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2216:
    00000230: 	movq	(%rsp), %rsi
    00000234: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000023b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 571
    00000240: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000247: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000024e: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000255: 	jne	.Ltmp2226 # Offset: 597
.Ltmp2221:
    0000025b: 	movq	-0x8(%rdx), %rax
    0000025f: 	addq	$0x200, %rax
    00000265: 	jmp	.Ltmp2226 # Offset: 613
    0000026a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2220:
    00000270: 	testq	%r14, %r14
    00000273: 	je	.Ltmp2225 # Offset: 627
    00000279: 	jmp	.Ltmp2227 # Offset: 633
.Ltmp2224:
    0000027e: 	callq	__stack_chk_fail@PLT # Offset: 638
.Ltmp2218:
    00000283: 	leaq	DATAat0x37158(%rip), %rdi
    0000028a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 650
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave3to3IfPFvPfPKfS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z19test_interleave3to3ItPFvPtPKtS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z19test_interleave3to3ItPFvPtPKtS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z19test_interleave3to3ItPFvPtPKtS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/interleave.cpp/1
  Number      : 232
  State       : disassembled
  Address     : 0x27070
  Size        : 0x27f
  MaxSize     : 0x280
  Offset      : 0x27070
  Section     : .text
  Orc Section : .local.text._Z19test_interleave3to3ItPFvPtPKtS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0231:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%r8, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rcx, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rdx, %r12
    00000014: 	movl	$0x75300, %edx
    00000019: 	pushq	%rbp
    0000001a: 	movq	%rsi, %rbp
    0000001d: 	xorl	%esi, %esi
    0000001f: 	pushq	%rbx
    00000020: 	xorl	%ebx, %ebx
    00000022: 	subq	$0x28, %rsp
    00000026: 	movq	%r9, (%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x18(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	callq	memset@PLT # Offset: 58
    0000003f: 	callq	clock@PLT # Offset: 63
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	movl	iterations(%rip), %eax
    00000051: 	testl	%eax, %eax
    00000053: 	jle	.Ltmp2228 # Offset: 83
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp2229:
    00000058: 	movl	$0x13880, %r8d
    0000005e: 	movq	%r13, %rcx
    00000061: 	movq	%r12, %rdx
    00000064: 	movq	%rbp, %rsi
    00000067: 	movq	%r15, %rdi
    0000006a: 	addl	$0x1, %ebx
    0000006d: 	callq	*%r14 # Offset: 109
    00000070: 	cmpl	iterations(%rip), %ebx
    00000076: 	jl	.Ltmp2229 # Offset: 118
.Ltmp2228:
    00000078: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000007f: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000086: 	subq	$0x20, %rax
    0000008a: 	cmpq	%rax, %rbx
    0000008d: 	je	.Ltmp2230 # Offset: 141
    00000093: 	movq	(%rsp), %rax
    00000097: 	leaq	0x10(%rbx), %rdi
    0000009b: 	movq	%rdi, (%rbx)
    0000009e: 	movq	(%rax), %r8
    000000a1: 	movq	0x8(%rax), %r14
    000000a5: 	movq	%r8, %rax
    000000a8: 	addq	%r14, %rax
    000000ab: 	je	.Ltmp2231 # Offset: 171
    000000ad: 	testq	%r8, %r8
    000000b0: 	je	.Ltmp2232 # Offset: 176
.Ltmp2231:
    000000b6: 	movq	%r14, 0x10(%rsp)
    000000bb: 	cmpq	$0xf, %r14
    000000bf: 	ja	.Ltmp2233 # Offset: 191
    000000c5: 	cmpq	$0x1, %r14
    000000c9: 	jne	.Ltmp2234 # Offset: 201
    000000cf: 	movzbl	(%r8), %eax
    000000d3: 	movb	%al, 0x10(%rbx)
.Ltmp2239:
    000000d6: 	movq	%r14, 0x8(%rbx)
    000000da: 	movb	$0x0, (%rdi,%r14)
    000000df: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000e6: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000ed: 	addq	$0x20, %rax
    000000f1: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000f8: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000ff: 	je	.Ltmp2235 # Offset: 255
.Ltmp2240:
    00000105: 	movq	-0x20(%rax), %r14
    00000109: 	callq	clock@PLT # Offset: 265
    0000010e: 	pxor	%xmm0, %xmm0
    00000112: 	movq	%rax, end_time(%rip)
    00000119: 	movq	%r14, %rdi
    0000011c: 	subq	start_time(%rip), %rax
    00000123: 	cvtsi2sd	%rax, %xmm0
    00000128: 	divsd	DATAat0x37530(%rip), %xmm0
    00000130: 	callq	_Z13record_resultdPKc # Offset: 304
    00000135: 	xorl	%eax, %eax
.Ltmp2237:
    00000137: 	movzwl	(%rbp,%rax), %ecx
    0000013c: 	cmpw	%cx, (%r15)
    00000140: 	jne	.Ltmp2236 # Offset: 320
    00000146: 	movzwl	(%r12,%rax), %edx
    0000014b: 	cmpw	%dx, 0x2(%r15)
    00000150: 	jne	.Ltmp2236 # Offset: 336
    00000156: 	movzwl	(%r13,%rax), %ecx
    0000015c: 	cmpw	%cx, 0x4(%r15)
    00000161: 	jne	.Ltmp2236 # Offset: 353
    00000163: 	addq	$0x2, %rax
    00000167: 	addq	$0x6, %r15
    0000016b: 	cmpq	$0x27100, %rax
    00000171: 	jne	.Ltmp2237 # Offset: 369
    00000173: 	movq	0x18(%rsp), %rax
    00000178: 	subq	%fs:0x28, %rax
    00000181: 	jne	.Ltmp2238 # Offset: 385
    00000187: 	addq	$0x28, %rsp
    0000018b: 	popq	%rbx
    0000018c: 	popq	%rbp
    0000018d: 	popq	%r12
    0000018f: 	popq	%r13
    00000191: 	popq	%r14
    00000193: 	popq	%r15
    00000195: 	retq # Offset: 405
    00000196: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2233:
    000001a0: 	movq	%rbx, %rdi
    000001a3: 	leaq	0x10(%rsp), %rsi
    000001a8: 	xorl	%edx, %edx
    000001aa: 	movq	%r8, 0x8(%rsp)
    000001af: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 431
    000001b4: 	movq	0x8(%rsp), %r8
    000001b9: 	movq	%rax, (%rbx)
    000001bc: 	movq	%rax, %rdi
    000001bf: 	movq	0x10(%rsp), %rax
    000001c4: 	movq	%rax, 0x10(%rbx)
.Ltmp2241:
    000001c8: 	movq	%r14, %rdx
    000001cb: 	movq	%r8, %rsi
    000001ce: 	callq	memcpy@PLT # Offset: 462
    000001d3: 	movq	0x10(%rsp), %r14
    000001d8: 	movq	(%rbx), %rdi
    000001db: 	jmp	.Ltmp2239 # Offset: 475
.Ltmp2236:
    000001e0: 	movq	0x18(%rsp), %rax
    000001e5: 	subq	%fs:0x28, %rax
    000001ee: 	jne	.Ltmp2238 # Offset: 494
    000001f0: 	movq	(%rsp), %rax
    000001f4: 	leaq	DATAat0x371c8(%rip), %rsi
    000001fb: 	movl	$0x1, %edi
    00000200: 	movq	(%rax), %rdx
    00000203: 	addq	$0x28, %rsp
    00000207: 	xorl	%eax, %eax
    00000209: 	popq	%rbx
    0000020a: 	popq	%rbp
    0000020b: 	popq	%r12
    0000020d: 	popq	%r13
    0000020f: 	popq	%r14
    00000211: 	popq	%r15
    00000213: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 531
    00000218: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2230:
    00000220: 	movq	(%rsp), %rsi
    00000224: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000022b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 555
    00000230: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000237: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000023e: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000245: 	jne	.Ltmp2240 # Offset: 581
.Ltmp2235:
    0000024b: 	movq	-0x8(%rdx), %rax
    0000024f: 	addq	$0x200, %rax
    00000255: 	jmp	.Ltmp2240 # Offset: 597
    0000025a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2234:
    00000260: 	testq	%r14, %r14
    00000263: 	je	.Ltmp2239 # Offset: 611
    00000269: 	jmp	.Ltmp2241 # Offset: 617
.Ltmp2238:
    0000026e: 	callq	__stack_chk_fail@PLT # Offset: 622
.Ltmp2232:
    00000273: 	leaq	DATAat0x37158(%rip), %rdi
    0000027a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 634
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave3to3ItPFvPtPKtS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z19test_interleave3to3IjPFvPjPKjS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z19test_interleave3to3IjPFvPjPKjS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z19test_interleave3to3IjPFvPjPKjS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/interleave.cpp/1
  Number      : 233
  State       : disassembled
  Address     : 0x272f0
  Size        : 0x26f
  MaxSize     : 0x270
  Offset      : 0x272f0
  Section     : .text
  Orc Section : .local.text._Z19test_interleave3to3IjPFvPjPKjS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0232:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %r15
    00000005: 	pushq	%r14
    00000007: 	movq	%r8, %r14
    0000000a: 	pushq	%r13
    0000000c: 	movq	%rcx, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rdx, %r12
    00000014: 	movl	$0xea600, %edx
    00000019: 	pushq	%rbp
    0000001a: 	movq	%rsi, %rbp
    0000001d: 	xorl	%esi, %esi
    0000001f: 	pushq	%rbx
    00000020: 	xorl	%ebx, %ebx
    00000022: 	subq	$0x28, %rsp
    00000026: 	movq	%r9, (%rsp)
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x18(%rsp)
    00000038: 	xorl	%eax, %eax
    0000003a: 	callq	memset@PLT # Offset: 58
    0000003f: 	callq	clock@PLT # Offset: 63
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	movl	iterations(%rip), %eax
    00000051: 	testl	%eax, %eax
    00000053: 	jle	.Ltmp2242 # Offset: 83
    00000055: 	nopl	(%rax) # Size: 3
.Ltmp2243:
    00000058: 	movl	$0x13880, %r8d
    0000005e: 	movq	%r13, %rcx
    00000061: 	movq	%r12, %rdx
    00000064: 	movq	%rbp, %rsi
    00000067: 	movq	%r15, %rdi
    0000006a: 	addl	$0x1, %ebx
    0000006d: 	callq	*%r14 # Offset: 109
    00000070: 	cmpl	iterations(%rip), %ebx
    00000076: 	jl	.Ltmp2243 # Offset: 118
.Ltmp2242:
    00000078: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000007f: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000086: 	subq	$0x20, %rax
    0000008a: 	cmpq	%rax, %rbx
    0000008d: 	je	.Ltmp2244 # Offset: 141
    00000093: 	movq	(%rsp), %rax
    00000097: 	leaq	0x10(%rbx), %rdi
    0000009b: 	movq	%rdi, (%rbx)
    0000009e: 	movq	(%rax), %r8
    000000a1: 	movq	0x8(%rax), %r14
    000000a5: 	movq	%r8, %rax
    000000a8: 	addq	%r14, %rax
    000000ab: 	je	.Ltmp2245 # Offset: 171
    000000ad: 	testq	%r8, %r8
    000000b0: 	je	.Ltmp2246 # Offset: 176
.Ltmp2245:
    000000b6: 	movq	%r14, 0x10(%rsp)
    000000bb: 	cmpq	$0xf, %r14
    000000bf: 	ja	.Ltmp2247 # Offset: 191
    000000c5: 	cmpq	$0x1, %r14
    000000c9: 	jne	.Ltmp2248 # Offset: 201
    000000cf: 	movzbl	(%r8), %eax
    000000d3: 	movb	%al, 0x10(%rbx)
.Ltmp2253:
    000000d6: 	movq	%r14, 0x8(%rbx)
    000000da: 	movb	$0x0, (%rdi,%r14)
    000000df: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000e6: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000ed: 	addq	$0x20, %rax
    000000f1: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000f8: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000ff: 	je	.Ltmp2249 # Offset: 255
.Ltmp2254:
    00000105: 	movq	-0x20(%rax), %r14
    00000109: 	callq	clock@PLT # Offset: 265
    0000010e: 	pxor	%xmm0, %xmm0
    00000112: 	movq	%rax, end_time(%rip)
    00000119: 	movq	%r14, %rdi
    0000011c: 	subq	start_time(%rip), %rax
    00000123: 	cvtsi2sd	%rax, %xmm0
    00000128: 	divsd	DATAat0x37530(%rip), %xmm0
    00000130: 	callq	_Z13record_resultdPKc # Offset: 304
    00000135: 	xorl	%eax, %eax
.Ltmp2251:
    00000137: 	movl	(%rbp,%rax), %ecx
    0000013b: 	cmpl	%ecx, (%r15)
    0000013e: 	jne	.Ltmp2250 # Offset: 318
    00000144: 	movl	(%r12,%rax), %edx
    00000148: 	cmpl	%edx, 0x4(%r15)
    0000014c: 	jne	.Ltmp2250 # Offset: 332
    00000152: 	movl	(%r13,%rax), %ecx
    00000157: 	cmpl	%ecx, 0x8(%r15)
    0000015b: 	jne	.Ltmp2250 # Offset: 347
    0000015d: 	addq	$0x4, %rax
    00000161: 	addq	$0xc, %r15
    00000165: 	cmpq	$0x4e200, %rax
    0000016b: 	jne	.Ltmp2251 # Offset: 363
    0000016d: 	movq	0x18(%rsp), %rax
    00000172: 	subq	%fs:0x28, %rax
    0000017b: 	jne	.Ltmp2252 # Offset: 379
    00000181: 	addq	$0x28, %rsp
    00000185: 	popq	%rbx
    00000186: 	popq	%rbp
    00000187: 	popq	%r12
    00000189: 	popq	%r13
    0000018b: 	popq	%r14
    0000018d: 	popq	%r15
    0000018f: 	retq # Offset: 399
.Ltmp2247:
    00000190: 	movq	%rbx, %rdi
    00000193: 	leaq	0x10(%rsp), %rsi
    00000198: 	xorl	%edx, %edx
    0000019a: 	movq	%r8, 0x8(%rsp)
    0000019f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 415
    000001a4: 	movq	0x8(%rsp), %r8
    000001a9: 	movq	%rax, (%rbx)
    000001ac: 	movq	%rax, %rdi
    000001af: 	movq	0x10(%rsp), %rax
    000001b4: 	movq	%rax, 0x10(%rbx)
.Ltmp2255:
    000001b8: 	movq	%r14, %rdx
    000001bb: 	movq	%r8, %rsi
    000001be: 	callq	memcpy@PLT # Offset: 446
    000001c3: 	movq	0x10(%rsp), %r14
    000001c8: 	movq	(%rbx), %rdi
    000001cb: 	jmp	.Ltmp2253 # Offset: 459
.Ltmp2250:
    000001d0: 	movq	0x18(%rsp), %rax
    000001d5: 	subq	%fs:0x28, %rax
    000001de: 	jne	.Ltmp2252 # Offset: 478
    000001e0: 	movq	(%rsp), %rax
    000001e4: 	leaq	DATAat0x371c8(%rip), %rsi
    000001eb: 	movl	$0x1, %edi
    000001f0: 	movq	(%rax), %rdx
    000001f3: 	addq	$0x28, %rsp
    000001f7: 	xorl	%eax, %eax
    000001f9: 	popq	%rbx
    000001fa: 	popq	%rbp
    000001fb: 	popq	%r12
    000001fd: 	popq	%r13
    000001ff: 	popq	%r14
    00000201: 	popq	%r15
    00000203: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 515
    00000208: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2244:
    00000210: 	movq	(%rsp), %rsi
    00000214: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000021b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 539
    00000220: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000227: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000022e: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000235: 	jne	.Ltmp2254 # Offset: 565
.Ltmp2249:
    0000023b: 	movq	-0x8(%rdx), %rax
    0000023f: 	addq	$0x200, %rax
    00000245: 	jmp	.Ltmp2254 # Offset: 581
    0000024a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2248:
    00000250: 	testq	%r14, %r14
    00000253: 	je	.Ltmp2253 # Offset: 595
    00000259: 	jmp	.Ltmp2255 # Offset: 601
.Ltmp2252:
    0000025e: 	callq	__stack_chk_fail@PLT # Offset: 606
.Ltmp2246:
    00000263: 	leaq	DATAat0x37158(%rip), %rdi
    0000026a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 618
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave3to3IjPFvPjPKjS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z19test_interleave4to4IhPFvPhPKhS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z19test_interleave4to4IhPFvPhPKhS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z19test_interleave4to4IhPFvPhPKhS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/interleave.cpp/1
  Number      : 234
  State       : disassembled
  Address     : 0x27560
  Size        : 0x2b7
  MaxSize     : 0x2c0
  Offset      : 0x27560
  Section     : .text
  Orc Section : .local.text._Z19test_interleave4to4IhPFvPhPKhS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0233:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %r15
    00000005: 	pushq	%r14
    00000007: 	xorl	%r14d, %r14d
    0000000a: 	pushq	%r13
    0000000c: 	movq	%r8, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rcx, %r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rdx, %rbp
    00000018: 	movl	$0x4e200, %edx
    0000001d: 	pushq	%rbx
    0000001e: 	movq	%rsi, %rbx
    00000021: 	xorl	%esi, %esi
    00000023: 	subq	$0x38, %rsp
    00000027: 	movq	0x70(%rsp), %rax
    0000002c: 	movq	%r9, 0x8(%rsp)
    00000031: 	movq	%rax, 0x10(%rsp)
    00000036: 	movq	%fs:0x28, %rax
    0000003f: 	movq	%rax, 0x28(%rsp)
    00000044: 	xorl	%eax, %eax
    00000046: 	callq	memset@PLT # Offset: 70
    0000004b: 	callq	clock@PLT # Offset: 75
    00000050: 	movq	%rax, start_time(%rip)
    00000057: 	movl	iterations(%rip), %eax
    0000005d: 	testl	%eax, %eax
    0000005f: 	jle	.Ltmp2256 # Offset: 95
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp2257:
    00000068: 	movq	0x8(%rsp), %rax
    0000006d: 	movq	%r13, %r8
    00000070: 	movq	%r12, %rcx
    00000073: 	movq	%rbp, %rdx
    00000076: 	movl	$0x13880, %r9d
    0000007c: 	movq	%rbx, %rsi
    0000007f: 	movq	%r15, %rdi
    00000082: 	addl	$0x1, %r14d
    00000086: 	callq	*%rax # Offset: 134
    00000088: 	cmpl	iterations(%rip), %r14d
    0000008f: 	jl	.Ltmp2257 # Offset: 143
.Ltmp2256:
    00000091: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000098: 	movq	"_ZL7gLabels/1"+48(%rip), %rcx
    0000009f: 	subq	$0x20, %rax
    000000a3: 	cmpq	%rax, %rcx
    000000a6: 	je	.Ltmp2258 # Offset: 166
    000000ac: 	movq	0x10(%rsp), %rax
    000000b1: 	leaq	0x10(%rcx), %rdi
    000000b5: 	movq	%rdi, (%rcx)
    000000b8: 	movq	(%rax), %r8
    000000bb: 	movq	0x8(%rax), %r14
    000000bf: 	movq	%r8, %rax
    000000c2: 	addq	%r14, %rax
    000000c5: 	je	.Ltmp2259 # Offset: 197
    000000c7: 	testq	%r8, %r8
    000000ca: 	je	.Ltmp2260 # Offset: 202
.Ltmp2259:
    000000d0: 	movq	%r14, 0x20(%rsp)
    000000d5: 	cmpq	$0xf, %r14
    000000d9: 	ja	.Ltmp2261 # Offset: 217
    000000df: 	cmpq	$0x1, %r14
    000000e3: 	jne	.Ltmp2262 # Offset: 227
    000000e9: 	movzbl	(%r8), %eax
    000000ed: 	movb	%al, 0x10(%rcx)
.Ltmp2267:
    000000f0: 	movq	%r14, 0x8(%rcx)
    000000f4: 	movb	$0x0, (%rdi,%r14)
    000000f9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000100: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000107: 	addq	$0x20, %rax
    0000010b: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000112: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000119: 	je	.Ltmp2263 # Offset: 281
.Ltmp2268:
    0000011f: 	movq	-0x20(%rax), %r14
    00000123: 	callq	clock@PLT # Offset: 291
    00000128: 	pxor	%xmm0, %xmm0
    0000012c: 	movq	%rax, end_time(%rip)
    00000133: 	movq	%r14, %rdi
    00000136: 	subq	start_time(%rip), %rax
    0000013d: 	cvtsi2sd	%rax, %xmm0
    00000142: 	divsd	DATAat0x37530(%rip), %xmm0
    0000014a: 	callq	_Z13record_resultdPKc # Offset: 330
    0000014f: 	xorl	%eax, %eax
.Ltmp2265:
    00000151: 	movzbl	(%rbx,%rax), %edx
    00000155: 	cmpb	%dl, (%r15,%rax,4)
    00000159: 	jne	.Ltmp2264 # Offset: 345
    0000015f: 	movzbl	(%rbp,%rax), %esi
    00000164: 	cmpb	%sil, 0x1(%r15,%rax,4)
    00000169: 	jne	.Ltmp2264 # Offset: 361
    0000016f: 	movzbl	(%r12,%rax), %ecx
    00000174: 	cmpb	%cl, 0x2(%r15,%rax,4)
    00000179: 	jne	.Ltmp2264 # Offset: 377
    0000017f: 	movzbl	(%r13,%rax), %edi
    00000185: 	cmpb	%dil, 0x3(%r15,%rax,4)
    0000018a: 	jne	.Ltmp2264 # Offset: 394
    00000190: 	addq	$0x1, %rax
    00000194: 	cmpq	$0x13880, %rax
    0000019a: 	jne	.Ltmp2265 # Offset: 410
    0000019c: 	movq	0x28(%rsp), %rax
    000001a1: 	subq	%fs:0x28, %rax
    000001aa: 	jne	.Ltmp2266 # Offset: 426
    000001b0: 	addq	$0x38, %rsp
    000001b4: 	popq	%rbx
    000001b5: 	popq	%rbp
    000001b6: 	popq	%r12
    000001b8: 	popq	%r13
    000001ba: 	popq	%r14
    000001bc: 	popq	%r15
    000001be: 	retq # Offset: 446
    000001bf: 	nop # Size: 1
.Ltmp2261:
    000001c0: 	movq	%rcx, %rdi
    000001c3: 	leaq	0x20(%rsp), %rsi
    000001c8: 	xorl	%edx, %edx
    000001ca: 	movq	%r8, 0x18(%rsp)
    000001cf: 	movq	%rcx, 0x8(%rsp)
    000001d4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 468
    000001d9: 	movq	0x8(%rsp), %rcx
    000001de: 	movq	0x18(%rsp), %r8
    000001e3: 	movq	%rax, %rdi
    000001e6: 	movq	%rax, (%rcx)
    000001e9: 	movq	0x20(%rsp), %rax
    000001ee: 	movq	%rax, 0x10(%rcx)
.Ltmp2269:
    000001f2: 	movq	%r14, %rdx
    000001f5: 	movq	%r8, %rsi
    000001f8: 	movq	%rcx, 0x8(%rsp)
    000001fd: 	callq	memcpy@PLT # Offset: 509
    00000202: 	movq	0x8(%rsp), %rcx
    00000207: 	movq	0x20(%rsp), %r14
    0000020c: 	movq	(%rcx), %rdi
    0000020f: 	jmp	.Ltmp2267 # Offset: 527
    00000214: 	nopl	(%rax) # Size: 4
.Ltmp2264:
    00000218: 	movq	0x28(%rsp), %rax
    0000021d: 	subq	%fs:0x28, %rax
    00000226: 	jne	.Ltmp2266 # Offset: 550
    00000228: 	movq	0x10(%rsp), %rax
    0000022d: 	leaq	DATAat0x371c8(%rip), %rsi
    00000234: 	movl	$0x1, %edi
    00000239: 	movq	(%rax), %rdx
    0000023c: 	addq	$0x38, %rsp
    00000240: 	xorl	%eax, %eax
    00000242: 	popq	%rbx
    00000243: 	popq	%rbp
    00000244: 	popq	%r12
    00000246: 	popq	%r13
    00000248: 	popq	%r14
    0000024a: 	popq	%r15
    0000024c: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 588
    00000251: 	nopl	(%rax) # Size: 7
.Ltmp2258:
    00000258: 	movq	0x10(%rsp), %rsi
    0000025d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000264: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 612
    00000269: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000270: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000277: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000027e: 	jne	.Ltmp2268 # Offset: 638
.Ltmp2263:
    00000284: 	movq	-0x8(%rdx), %rax
    00000288: 	addq	$0x200, %rax
    0000028e: 	jmp	.Ltmp2268 # Offset: 654
    00000293: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2262:
    00000298: 	testq	%r14, %r14
    0000029b: 	je	.Ltmp2267 # Offset: 667
    000002a1: 	jmp	.Ltmp2269 # Offset: 673
.Ltmp2266:
    000002a6: 	callq	__stack_chk_fail@PLT # Offset: 678
.Ltmp2260:
    000002ab: 	leaq	DATAat0x37158(%rip), %rdi
    000002b2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 690
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave4to4IhPFvPhPKhS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z19test_interleave4to4ItPFvPtPKtS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z19test_interleave4to4ItPFvPtPKtS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z19test_interleave4to4ItPFvPtPKtS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/interleave.cpp/1
  Number      : 235
  State       : disassembled
  Address     : 0x27820
  Size        : 0x2bf
  MaxSize     : 0x2c0
  Offset      : 0x27820
  Section     : .text
  Orc Section : .local.text._Z19test_interleave4to4ItPFvPtPKtS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0234:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %r15
    00000005: 	pushq	%r14
    00000007: 	xorl	%r14d, %r14d
    0000000a: 	pushq	%r13
    0000000c: 	movq	%r8, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rcx, %r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rdx, %rbp
    00000018: 	movl	$0x9c400, %edx
    0000001d: 	pushq	%rbx
    0000001e: 	movq	%rsi, %rbx
    00000021: 	xorl	%esi, %esi
    00000023: 	subq	$0x38, %rsp
    00000027: 	movq	0x70(%rsp), %rax
    0000002c: 	movq	%r9, 0x8(%rsp)
    00000031: 	movq	%rax, 0x10(%rsp)
    00000036: 	movq	%fs:0x28, %rax
    0000003f: 	movq	%rax, 0x28(%rsp)
    00000044: 	xorl	%eax, %eax
    00000046: 	callq	memset@PLT # Offset: 70
    0000004b: 	callq	clock@PLT # Offset: 75
    00000050: 	movq	%rax, start_time(%rip)
    00000057: 	movl	iterations(%rip), %eax
    0000005d: 	testl	%eax, %eax
    0000005f: 	jle	.Ltmp2270 # Offset: 95
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp2271:
    00000068: 	movq	0x8(%rsp), %rax
    0000006d: 	movq	%r13, %r8
    00000070: 	movq	%r12, %rcx
    00000073: 	movq	%rbp, %rdx
    00000076: 	movl	$0x13880, %r9d
    0000007c: 	movq	%rbx, %rsi
    0000007f: 	movq	%r15, %rdi
    00000082: 	addl	$0x1, %r14d
    00000086: 	callq	*%rax # Offset: 134
    00000088: 	cmpl	iterations(%rip), %r14d
    0000008f: 	jl	.Ltmp2271 # Offset: 143
.Ltmp2270:
    00000091: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000098: 	movq	"_ZL7gLabels/1"+48(%rip), %rcx
    0000009f: 	subq	$0x20, %rax
    000000a3: 	cmpq	%rax, %rcx
    000000a6: 	je	.Ltmp2272 # Offset: 166
    000000ac: 	movq	0x10(%rsp), %rax
    000000b1: 	leaq	0x10(%rcx), %rdi
    000000b5: 	movq	%rdi, (%rcx)
    000000b8: 	movq	(%rax), %r8
    000000bb: 	movq	0x8(%rax), %r14
    000000bf: 	movq	%r8, %rax
    000000c2: 	addq	%r14, %rax
    000000c5: 	je	.Ltmp2273 # Offset: 197
    000000c7: 	testq	%r8, %r8
    000000ca: 	je	.Ltmp2274 # Offset: 202
.Ltmp2273:
    000000d0: 	movq	%r14, 0x20(%rsp)
    000000d5: 	cmpq	$0xf, %r14
    000000d9: 	ja	.Ltmp2275 # Offset: 217
    000000df: 	cmpq	$0x1, %r14
    000000e3: 	jne	.Ltmp2276 # Offset: 227
    000000e9: 	movzbl	(%r8), %eax
    000000ed: 	movb	%al, 0x10(%rcx)
.Ltmp2281:
    000000f0: 	movq	%r14, 0x8(%rcx)
    000000f4: 	movb	$0x0, (%rdi,%r14)
    000000f9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000100: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000107: 	addq	$0x20, %rax
    0000010b: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000112: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000119: 	je	.Ltmp2277 # Offset: 281
.Ltmp2282:
    0000011f: 	movq	-0x20(%rax), %r14
    00000123: 	callq	clock@PLT # Offset: 291
    00000128: 	pxor	%xmm0, %xmm0
    0000012c: 	movq	%rax, end_time(%rip)
    00000133: 	movq	%r14, %rdi
    00000136: 	subq	start_time(%rip), %rax
    0000013d: 	cvtsi2sd	%rax, %xmm0
    00000142: 	divsd	DATAat0x37530(%rip), %xmm0
    0000014a: 	callq	_Z13record_resultdPKc # Offset: 330
    0000014f: 	xorl	%eax, %eax
.Ltmp2279:
    00000151: 	movzwl	(%rbx,%rax), %edx
    00000155: 	cmpw	%dx, (%r15,%rax,4)
    0000015a: 	jne	.Ltmp2278 # Offset: 346
    00000160: 	movzwl	(%rbp,%rax), %esi
    00000165: 	cmpw	%si, 0x2(%r15,%rax,4)
    0000016b: 	jne	.Ltmp2278 # Offset: 363
    00000171: 	movzwl	(%r12,%rax), %ecx
    00000176: 	cmpw	%cx, 0x4(%r15,%rax,4)
    0000017c: 	jne	.Ltmp2278 # Offset: 380
    00000182: 	movzwl	(%r13,%rax), %edi
    00000188: 	cmpw	%di, 0x6(%r15,%rax,4)
    0000018e: 	jne	.Ltmp2278 # Offset: 398
    00000194: 	addq	$0x2, %rax
    00000198: 	cmpq	$0x27100, %rax
    0000019e: 	jne	.Ltmp2279 # Offset: 414
    000001a0: 	movq	0x28(%rsp), %rax
    000001a5: 	subq	%fs:0x28, %rax
    000001ae: 	jne	.Ltmp2280 # Offset: 430
    000001b4: 	addq	$0x38, %rsp
    000001b8: 	popq	%rbx
    000001b9: 	popq	%rbp
    000001ba: 	popq	%r12
    000001bc: 	popq	%r13
    000001be: 	popq	%r14
    000001c0: 	popq	%r15
    000001c2: 	retq # Offset: 450
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2275:
    000001c8: 	movq	%rcx, %rdi
    000001cb: 	leaq	0x20(%rsp), %rsi
    000001d0: 	xorl	%edx, %edx
    000001d2: 	movq	%r8, 0x18(%rsp)
    000001d7: 	movq	%rcx, 0x8(%rsp)
    000001dc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 476
    000001e1: 	movq	0x8(%rsp), %rcx
    000001e6: 	movq	0x18(%rsp), %r8
    000001eb: 	movq	%rax, %rdi
    000001ee: 	movq	%rax, (%rcx)
    000001f1: 	movq	0x20(%rsp), %rax
    000001f6: 	movq	%rax, 0x10(%rcx)
.Ltmp2283:
    000001fa: 	movq	%r14, %rdx
    000001fd: 	movq	%r8, %rsi
    00000200: 	movq	%rcx, 0x8(%rsp)
    00000205: 	callq	memcpy@PLT # Offset: 517
    0000020a: 	movq	0x8(%rsp), %rcx
    0000020f: 	movq	0x20(%rsp), %r14
    00000214: 	movq	(%rcx), %rdi
    00000217: 	jmp	.Ltmp2281 # Offset: 535
    0000021c: 	nopl	(%rax) # Size: 4
.Ltmp2278:
    00000220: 	movq	0x28(%rsp), %rax
    00000225: 	subq	%fs:0x28, %rax
    0000022e: 	jne	.Ltmp2280 # Offset: 558
    00000230: 	movq	0x10(%rsp), %rax
    00000235: 	leaq	DATAat0x371c8(%rip), %rsi
    0000023c: 	movl	$0x1, %edi
    00000241: 	movq	(%rax), %rdx
    00000244: 	addq	$0x38, %rsp
    00000248: 	xorl	%eax, %eax
    0000024a: 	popq	%rbx
    0000024b: 	popq	%rbp
    0000024c: 	popq	%r12
    0000024e: 	popq	%r13
    00000250: 	popq	%r14
    00000252: 	popq	%r15
    00000254: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp2272:
    00000260: 	movq	0x10(%rsp), %rsi
    00000265: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000026c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 620
    00000271: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000278: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000027f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000286: 	jne	.Ltmp2282 # Offset: 646
.Ltmp2277:
    0000028c: 	movq	-0x8(%rdx), %rax
    00000290: 	addq	$0x200, %rax
    00000296: 	jmp	.Ltmp2282 # Offset: 662
    0000029b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2276:
    000002a0: 	testq	%r14, %r14
    000002a3: 	je	.Ltmp2281 # Offset: 675
    000002a9: 	jmp	.Ltmp2283 # Offset: 681
.Ltmp2280:
    000002ae: 	callq	__stack_chk_fail@PLT # Offset: 686
.Ltmp2274:
    000002b3: 	leaq	DATAat0x37158(%rip), %rdi
    000002ba: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 698
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave4to4ItPFvPtPKtS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z19test_interleave4to4ImPFvPmPKmS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z19test_interleave4to4ImPFvPmPKmS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z19test_interleave4to4ImPFvPmPKmS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/interleave.cpp/1
  Number      : 236
  State       : disassembled
  Address     : 0x27ae0
  Size        : 0x2b7
  MaxSize     : 0x2c0
  Offset      : 0x27ae0
  Section     : .text
  Orc Section : .local.text._Z19test_interleave4to4ImPFvPmPKmS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0235:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %r15
    00000005: 	pushq	%r14
    00000007: 	xorl	%r14d, %r14d
    0000000a: 	pushq	%r13
    0000000c: 	movq	%r8, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rcx, %r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rdx, %rbp
    00000018: 	movl	$0x271000, %edx
    0000001d: 	pushq	%rbx
    0000001e: 	movq	%rsi, %rbx
    00000021: 	xorl	%esi, %esi
    00000023: 	subq	$0x38, %rsp
    00000027: 	movq	0x70(%rsp), %rax
    0000002c: 	movq	%r9, 0x8(%rsp)
    00000031: 	movq	%rax, 0x10(%rsp)
    00000036: 	movq	%fs:0x28, %rax
    0000003f: 	movq	%rax, 0x28(%rsp)
    00000044: 	xorl	%eax, %eax
    00000046: 	callq	memset@PLT # Offset: 70
    0000004b: 	callq	clock@PLT # Offset: 75
    00000050: 	movq	%rax, start_time(%rip)
    00000057: 	movl	iterations(%rip), %eax
    0000005d: 	testl	%eax, %eax
    0000005f: 	jle	.Ltmp2284 # Offset: 95
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp2285:
    00000068: 	movq	0x8(%rsp), %rax
    0000006d: 	movq	%r13, %r8
    00000070: 	movq	%r12, %rcx
    00000073: 	movq	%rbp, %rdx
    00000076: 	movl	$0x13880, %r9d
    0000007c: 	movq	%rbx, %rsi
    0000007f: 	movq	%r15, %rdi
    00000082: 	addl	$0x1, %r14d
    00000086: 	callq	*%rax # Offset: 134
    00000088: 	cmpl	iterations(%rip), %r14d
    0000008f: 	jl	.Ltmp2285 # Offset: 143
.Ltmp2284:
    00000091: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000098: 	movq	"_ZL7gLabels/1"+48(%rip), %rcx
    0000009f: 	subq	$0x20, %rax
    000000a3: 	cmpq	%rax, %rcx
    000000a6: 	je	.Ltmp2286 # Offset: 166
    000000ac: 	movq	0x10(%rsp), %rax
    000000b1: 	leaq	0x10(%rcx), %rdi
    000000b5: 	movq	%rdi, (%rcx)
    000000b8: 	movq	(%rax), %r8
    000000bb: 	movq	0x8(%rax), %r14
    000000bf: 	movq	%r8, %rax
    000000c2: 	addq	%r14, %rax
    000000c5: 	je	.Ltmp2287 # Offset: 197
    000000c7: 	testq	%r8, %r8
    000000ca: 	je	.Ltmp2288 # Offset: 202
.Ltmp2287:
    000000d0: 	movq	%r14, 0x20(%rsp)
    000000d5: 	cmpq	$0xf, %r14
    000000d9: 	ja	.Ltmp2289 # Offset: 217
    000000df: 	cmpq	$0x1, %r14
    000000e3: 	jne	.Ltmp2290 # Offset: 227
    000000e9: 	movzbl	(%r8), %eax
    000000ed: 	movb	%al, 0x10(%rcx)
.Ltmp2295:
    000000f0: 	movq	%r14, 0x8(%rcx)
    000000f4: 	movb	$0x0, (%rdi,%r14)
    000000f9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000100: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000107: 	addq	$0x20, %rax
    0000010b: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000112: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000119: 	je	.Ltmp2291 # Offset: 281
.Ltmp2296:
    0000011f: 	movq	-0x20(%rax), %r14
    00000123: 	callq	clock@PLT # Offset: 291
    00000128: 	pxor	%xmm0, %xmm0
    0000012c: 	movq	%rax, end_time(%rip)
    00000133: 	movq	%r14, %rdi
    00000136: 	subq	start_time(%rip), %rax
    0000013d: 	cvtsi2sd	%rax, %xmm0
    00000142: 	divsd	DATAat0x37530(%rip), %xmm0
    0000014a: 	callq	_Z13record_resultdPKc # Offset: 330
    0000014f: 	xorl	%eax, %eax
.Ltmp2293:
    00000151: 	movq	(%rbx,%rax), %rdx
    00000155: 	cmpq	%rdx, (%r15,%rax,4)
    00000159: 	jne	.Ltmp2292 # Offset: 345
    0000015f: 	movq	(%rbp,%rax), %rsi
    00000164: 	cmpq	%rsi, 0x8(%r15,%rax,4)
    00000169: 	jne	.Ltmp2292 # Offset: 361
    0000016f: 	movq	(%r12,%rax), %rcx
    00000173: 	cmpq	%rcx, 0x10(%r15,%rax,4)
    00000178: 	jne	.Ltmp2292 # Offset: 376
    0000017e: 	movq	(%r13,%rax), %rdi
    00000183: 	cmpq	%rdi, 0x18(%r15,%rax,4)
    00000188: 	jne	.Ltmp2292 # Offset: 392
    0000018e: 	addq	$0x8, %rax
    00000192: 	cmpq	$0x9c400, %rax
    00000198: 	jne	.Ltmp2293 # Offset: 408
    0000019a: 	movq	0x28(%rsp), %rax
    0000019f: 	subq	%fs:0x28, %rax
    000001a8: 	jne	.Ltmp2294 # Offset: 424
    000001ae: 	addq	$0x38, %rsp
    000001b2: 	popq	%rbx
    000001b3: 	popq	%rbp
    000001b4: 	popq	%r12
    000001b6: 	popq	%r13
    000001b8: 	popq	%r14
    000001ba: 	popq	%r15
    000001bc: 	retq # Offset: 444
    000001bd: 	nopl	(%rax) # Size: 3
.Ltmp2289:
    000001c0: 	movq	%rcx, %rdi
    000001c3: 	leaq	0x20(%rsp), %rsi
    000001c8: 	xorl	%edx, %edx
    000001ca: 	movq	%r8, 0x18(%rsp)
    000001cf: 	movq	%rcx, 0x8(%rsp)
    000001d4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 468
    000001d9: 	movq	0x8(%rsp), %rcx
    000001de: 	movq	0x18(%rsp), %r8
    000001e3: 	movq	%rax, %rdi
    000001e6: 	movq	%rax, (%rcx)
    000001e9: 	movq	0x20(%rsp), %rax
    000001ee: 	movq	%rax, 0x10(%rcx)
.Ltmp2297:
    000001f2: 	movq	%r14, %rdx
    000001f5: 	movq	%r8, %rsi
    000001f8: 	movq	%rcx, 0x8(%rsp)
    000001fd: 	callq	memcpy@PLT # Offset: 509
    00000202: 	movq	0x8(%rsp), %rcx
    00000207: 	movq	0x20(%rsp), %r14
    0000020c: 	movq	(%rcx), %rdi
    0000020f: 	jmp	.Ltmp2295 # Offset: 527
    00000214: 	nopl	(%rax) # Size: 4
.Ltmp2292:
    00000218: 	movq	0x28(%rsp), %rax
    0000021d: 	subq	%fs:0x28, %rax
    00000226: 	jne	.Ltmp2294 # Offset: 550
    00000228: 	movq	0x10(%rsp), %rax
    0000022d: 	leaq	DATAat0x371c8(%rip), %rsi
    00000234: 	movl	$0x1, %edi
    00000239: 	movq	(%rax), %rdx
    0000023c: 	addq	$0x38, %rsp
    00000240: 	xorl	%eax, %eax
    00000242: 	popq	%rbx
    00000243: 	popq	%rbp
    00000244: 	popq	%r12
    00000246: 	popq	%r13
    00000248: 	popq	%r14
    0000024a: 	popq	%r15
    0000024c: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 588
    00000251: 	nopl	(%rax) # Size: 7
.Ltmp2286:
    00000258: 	movq	0x10(%rsp), %rsi
    0000025d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000264: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 612
    00000269: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000270: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000277: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000027e: 	jne	.Ltmp2296 # Offset: 638
.Ltmp2291:
    00000284: 	movq	-0x8(%rdx), %rax
    00000288: 	addq	$0x200, %rax
    0000028e: 	jmp	.Ltmp2296 # Offset: 654
    00000293: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2290:
    00000298: 	testq	%r14, %r14
    0000029b: 	je	.Ltmp2295 # Offset: 667
    000002a1: 	jmp	.Ltmp2297 # Offset: 673
.Ltmp2294:
    000002a6: 	callq	__stack_chk_fail@PLT # Offset: 678
.Ltmp2288:
    000002ab: 	leaq	DATAat0x37158(%rip), %rdi
    000002b2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 690
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave4to4ImPFvPmPKmS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z19test_interleave3to3IdPFvPdPKdS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 237
  State       : disassembled
  Address     : 0x27da0
  Size        : 0x2b8
  MaxSize     : 0x2c0
  Offset      : 0x27da0
  Section     : .text
  Orc Section : .local.text._Z19test_interleave3to3IdPFvPdPKdS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0236:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rcx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	leal	(%r8,%r8,2), %edx
    00000019: 	pushq	%rbp
    0000001a: 	movslq	%edx, %rdx
    0000001d: 	movq	%rsi, %rbp
    00000020: 	pushq	%rbx
    00000021: 	movl	%r8d, %ebx
    00000024: 	subq	$0x38, %rsp
    00000028: 	movq	0x70(%rsp), %rax
    0000002d: 	movq	%r9, 0x8(%rsp)
    00000032: 	movq	%rax, 0x10(%rsp)
    00000037: 	movq	%fs:0x28, %rax
    00000040: 	movq	%rax, 0x28(%rsp)
    00000045: 	xorl	%eax, %eax
    00000047: 	shlq	$0x3, %rdx
    0000004b: 	je	.Ltmp2298 # Offset: 75
    0000004d: 	xorl	%esi, %esi
    0000004f: 	callq	memset@PLT # Offset: 79
.Ltmp2298:
    00000054: 	callq	clock@PLT # Offset: 84
    00000059: 	xorl	%r14d, %r14d
    0000005c: 	movq	%rax, start_time(%rip)
    00000063: 	movl	iterations(%rip), %eax
    00000069: 	testl	%eax, %eax
    0000006b: 	jle	.Ltmp2299 # Offset: 107
    0000006d: 	nopl	(%rax) # Size: 3
.Ltmp2300:
    00000070: 	movq	0x8(%rsp), %rax
    00000075: 	movl	%ebx, %r8d
    00000078: 	movq	%r13, %rcx
    0000007b: 	movq	%r12, %rdx
    0000007e: 	movq	%rbp, %rsi
    00000081: 	movq	%r15, %rdi
    00000084: 	addl	$0x1, %r14d
    00000088: 	callq	*%rax # Offset: 136
    0000008a: 	cmpl	%r14d, iterations(%rip)
    00000091: 	jg	.Ltmp2300 # Offset: 145
.Ltmp2299:
    00000093: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000009a: 	movq	"_ZL7gLabels/1"+48(%rip), %rcx
    000000a1: 	subq	$0x20, %rax
    000000a5: 	cmpq	%rax, %rcx
    000000a8: 	je	.Ltmp2301 # Offset: 168
    000000ae: 	movq	0x10(%rsp), %rax
    000000b3: 	leaq	0x10(%rcx), %rdi
    000000b7: 	movq	%rdi, (%rcx)
    000000ba: 	movq	(%rax), %r8
    000000bd: 	movq	0x8(%rax), %r14
    000000c1: 	movq	%r8, %rax
    000000c4: 	addq	%r14, %rax
    000000c7: 	je	.Ltmp2302 # Offset: 199
    000000c9: 	testq	%r8, %r8
    000000cc: 	je	.Ltmp2303 # Offset: 204
.Ltmp2302:
    000000d2: 	movq	%r14, 0x20(%rsp)
    000000d7: 	cmpq	$0xf, %r14
    000000db: 	ja	.Ltmp2304 # Offset: 219
    000000e1: 	cmpq	$0x1, %r14
    000000e5: 	jne	.Ltmp2305 # Offset: 229
    000000eb: 	movzbl	(%r8), %eax
    000000ef: 	movb	%al, 0x10(%rcx)
.Ltmp2312:
    000000f2: 	movq	%r14, 0x8(%rcx)
    000000f6: 	movb	$0x0, (%rdi,%r14)
    000000fb: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000102: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000109: 	addq	$0x20, %rax
    0000010d: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000114: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000011b: 	je	.Ltmp2306 # Offset: 283
.Ltmp2313:
    00000121: 	movq	-0x20(%rax), %r14
    00000125: 	callq	clock@PLT # Offset: 293
    0000012a: 	pxor	%xmm0, %xmm0
    0000012e: 	movq	%rax, end_time(%rip)
    00000135: 	movq	%r14, %rdi
    00000138: 	subq	start_time(%rip), %rax
    0000013f: 	cvtsi2sd	%rax, %xmm0
    00000144: 	divsd	DATAat0x37530(%rip), %xmm0
    0000014c: 	callq	_Z13record_resultdPKc # Offset: 332
    00000151: 	movslq	%ebx, %rdx
    00000154: 	xorl	%eax, %eax
    00000156: 	testl	%ebx, %ebx
    00000158: 	jg	.Ltmp2307 # Offset: 344
    0000015a: 	jmp	.Ltmp2308 # Offset: 346
    0000015f: 	nop # Size: 1
.Ltmp2310:
    00000160: 	movsd	0x8(%r15), %xmm0
    00000166: 	ucomisd	(%r12,%rax,8), %xmm0
    0000016c: 	jp	.Ltmp2309 # Offset: 364
    0000016e: 	jne	.Ltmp2309 # Offset: 366
    00000170: 	movsd	0x10(%r15), %xmm0
    00000176: 	ucomisd	(%r13,%rax,8), %xmm0
    0000017d: 	jp	.Ltmp2309 # Offset: 381
    0000017f: 	jne	.Ltmp2309 # Offset: 383
    00000181: 	addq	$0x1, %rax
    00000185: 	addq	$0x18, %r15
    00000189: 	cmpq	%rax, %rdx
    0000018c: 	je	.Ltmp2308 # Offset: 396
.Ltmp2307:
    00000192: 	movsd	(%r15), %xmm0
    00000197: 	ucomisd	(%rbp,%rax,8), %xmm0
    0000019d: 	jp	.Ltmp2309 # Offset: 413
    0000019f: 	je	.Ltmp2310 # Offset: 415
.Ltmp2309:
    000001a1: 	movq	0x28(%rsp), %rax
    000001a6: 	subq	%fs:0x28, %rax
    000001af: 	jne	.Ltmp2311 # Offset: 431
    000001b5: 	movq	0x10(%rsp), %rax
    000001ba: 	leaq	DATAat0x371c8(%rip), %rsi
    000001c1: 	movl	$0x1, %edi
    000001c6: 	movq	(%rax), %rdx
    000001c9: 	addq	$0x38, %rsp
    000001cd: 	xorl	%eax, %eax
    000001cf: 	popq	%rbx
    000001d0: 	popq	%rbp
    000001d1: 	popq	%r12
    000001d3: 	popq	%r13
    000001d5: 	popq	%r14
    000001d7: 	popq	%r15
    000001d9: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp2304:
    000001e0: 	movq	%rcx, %rdi
    000001e3: 	leaq	0x20(%rsp), %rsi
    000001e8: 	xorl	%edx, %edx
    000001ea: 	movq	%r8, 0x18(%rsp)
    000001ef: 	movq	%rcx, 0x8(%rsp)
    000001f4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 500
    000001f9: 	movq	0x8(%rsp), %rcx
    000001fe: 	movq	0x18(%rsp), %r8
    00000203: 	movq	%rax, %rdi
    00000206: 	movq	%rax, (%rcx)
    00000209: 	movq	0x20(%rsp), %rax
    0000020e: 	movq	%rax, 0x10(%rcx)
.Ltmp2314:
    00000212: 	movq	%r14, %rdx
    00000215: 	movq	%r8, %rsi
    00000218: 	movq	%rcx, 0x8(%rsp)
    0000021d: 	callq	memcpy@PLT # Offset: 541
    00000222: 	movq	0x8(%rsp), %rcx
    00000227: 	movq	0x20(%rsp), %r14
    0000022c: 	movq	(%rcx), %rdi
    0000022f: 	jmp	.Ltmp2312 # Offset: 559
    00000234: 	nopl	(%rax) # Size: 4
.Ltmp2301:
    00000238: 	movq	0x10(%rsp), %rsi
    0000023d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000244: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 580
    00000249: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000250: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000257: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000025e: 	jne	.Ltmp2313 # Offset: 606
.Ltmp2306:
    00000264: 	movq	-0x8(%rdx), %rax
    00000268: 	addq	$0x200, %rax
    0000026e: 	jmp	.Ltmp2313 # Offset: 622
    00000273: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2305:
    00000278: 	testq	%r14, %r14
    0000027b: 	je	.Ltmp2312 # Offset: 635
    00000281: 	jmp	.Ltmp2314 # Offset: 641
    00000283: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2308:
    00000288: 	movq	0x28(%rsp), %rax
    0000028d: 	subq	%fs:0x28, %rax
    00000296: 	jne	.Ltmp2311 # Offset: 662
    00000298: 	addq	$0x38, %rsp
    0000029c: 	popq	%rbx
    0000029d: 	popq	%rbp
    0000029e: 	popq	%r12
    000002a0: 	popq	%r13
    000002a2: 	popq	%r14
    000002a4: 	popq	%r15
    000002a6: 	retq # Offset: 678
.Ltmp2311:
    000002a7: 	callq	__stack_chk_fail@PLT # Offset: 679
.Ltmp2303:
    000002ac: 	leaq	DATAat0x37158(%rip), %rdi
    000002b3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 691
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave3to3IdPFvPdPKdS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_interleave4to4IjPFvPjPKjS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z19test_interleave4to4IjPFvPjPKjS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z19test_interleave4to4IjPFvPjPKjS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/interleave.cpp/1
  Number      : 238
  State       : disassembled
  Address     : 0x28060
  Size        : 0x2b7
  MaxSize     : 0x2c0
  Offset      : 0x28060
  Section     : .text
  Orc Section : .local.text._Z19test_interleave4to4IjPFvPjPKjS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0237:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %r15
    00000005: 	pushq	%r14
    00000007: 	xorl	%r14d, %r14d
    0000000a: 	pushq	%r13
    0000000c: 	movq	%r8, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rcx, %r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rdx, %rbp
    00000018: 	movl	$0x138800, %edx
    0000001d: 	pushq	%rbx
    0000001e: 	movq	%rsi, %rbx
    00000021: 	xorl	%esi, %esi
    00000023: 	subq	$0x38, %rsp
    00000027: 	movq	0x70(%rsp), %rax
    0000002c: 	movq	%r9, 0x8(%rsp)
    00000031: 	movq	%rax, 0x10(%rsp)
    00000036: 	movq	%fs:0x28, %rax
    0000003f: 	movq	%rax, 0x28(%rsp)
    00000044: 	xorl	%eax, %eax
    00000046: 	callq	memset@PLT # Offset: 70
    0000004b: 	callq	clock@PLT # Offset: 75
    00000050: 	movq	%rax, start_time(%rip)
    00000057: 	movl	iterations(%rip), %eax
    0000005d: 	testl	%eax, %eax
    0000005f: 	jle	.Ltmp2315 # Offset: 95
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp2316:
    00000068: 	movq	0x8(%rsp), %rax
    0000006d: 	movq	%r13, %r8
    00000070: 	movq	%r12, %rcx
    00000073: 	movq	%rbp, %rdx
    00000076: 	movl	$0x13880, %r9d
    0000007c: 	movq	%rbx, %rsi
    0000007f: 	movq	%r15, %rdi
    00000082: 	addl	$0x1, %r14d
    00000086: 	callq	*%rax # Offset: 134
    00000088: 	cmpl	iterations(%rip), %r14d
    0000008f: 	jl	.Ltmp2316 # Offset: 143
.Ltmp2315:
    00000091: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000098: 	movq	"_ZL7gLabels/1"+48(%rip), %rcx
    0000009f: 	subq	$0x20, %rax
    000000a3: 	cmpq	%rax, %rcx
    000000a6: 	je	.Ltmp2317 # Offset: 166
    000000ac: 	movq	0x10(%rsp), %rax
    000000b1: 	leaq	0x10(%rcx), %rdi
    000000b5: 	movq	%rdi, (%rcx)
    000000b8: 	movq	(%rax), %r8
    000000bb: 	movq	0x8(%rax), %r14
    000000bf: 	movq	%r8, %rax
    000000c2: 	addq	%r14, %rax
    000000c5: 	je	.Ltmp2318 # Offset: 197
    000000c7: 	testq	%r8, %r8
    000000ca: 	je	.Ltmp2319 # Offset: 202
.Ltmp2318:
    000000d0: 	movq	%r14, 0x20(%rsp)
    000000d5: 	cmpq	$0xf, %r14
    000000d9: 	ja	.Ltmp2320 # Offset: 217
    000000df: 	cmpq	$0x1, %r14
    000000e3: 	jne	.Ltmp2321 # Offset: 227
    000000e9: 	movzbl	(%r8), %eax
    000000ed: 	movb	%al, 0x10(%rcx)
.Ltmp2326:
    000000f0: 	movq	%r14, 0x8(%rcx)
    000000f4: 	movb	$0x0, (%rdi,%r14)
    000000f9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000100: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000107: 	addq	$0x20, %rax
    0000010b: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000112: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000119: 	je	.Ltmp2322 # Offset: 281
.Ltmp2327:
    0000011f: 	movq	-0x20(%rax), %r14
    00000123: 	callq	clock@PLT # Offset: 291
    00000128: 	pxor	%xmm0, %xmm0
    0000012c: 	movq	%rax, end_time(%rip)
    00000133: 	movq	%r14, %rdi
    00000136: 	subq	start_time(%rip), %rax
    0000013d: 	cvtsi2sd	%rax, %xmm0
    00000142: 	divsd	DATAat0x37530(%rip), %xmm0
    0000014a: 	callq	_Z13record_resultdPKc # Offset: 330
    0000014f: 	xorl	%eax, %eax
.Ltmp2324:
    00000151: 	movl	(%rbx,%rax), %edx
    00000154: 	cmpl	%edx, (%r15,%rax,4)
    00000158: 	jne	.Ltmp2323 # Offset: 344
    0000015e: 	movl	(%rbp,%rax), %esi
    00000162: 	cmpl	%esi, 0x4(%r15,%rax,4)
    00000167: 	jne	.Ltmp2323 # Offset: 359
    0000016d: 	movl	(%r12,%rax), %ecx
    00000171: 	cmpl	%ecx, 0x8(%r15,%rax,4)
    00000176: 	jne	.Ltmp2323 # Offset: 374
    0000017c: 	movl	(%r13,%rax), %edi
    00000181: 	cmpl	%edi, 0xc(%r15,%rax,4)
    00000186: 	jne	.Ltmp2323 # Offset: 390
    0000018c: 	addq	$0x4, %rax
    00000190: 	cmpq	$0x4e200, %rax
    00000196: 	jne	.Ltmp2324 # Offset: 406
    00000198: 	movq	0x28(%rsp), %rax
    0000019d: 	subq	%fs:0x28, %rax
    000001a6: 	jne	.Ltmp2325 # Offset: 422
    000001ac: 	addq	$0x38, %rsp
    000001b0: 	popq	%rbx
    000001b1: 	popq	%rbp
    000001b2: 	popq	%r12
    000001b4: 	popq	%r13
    000001b6: 	popq	%r14
    000001b8: 	popq	%r15
    000001ba: 	retq # Offset: 442
    000001bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2320:
    000001c0: 	movq	%rcx, %rdi
    000001c3: 	leaq	0x20(%rsp), %rsi
    000001c8: 	xorl	%edx, %edx
    000001ca: 	movq	%r8, 0x18(%rsp)
    000001cf: 	movq	%rcx, 0x8(%rsp)
    000001d4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 468
    000001d9: 	movq	0x8(%rsp), %rcx
    000001de: 	movq	0x18(%rsp), %r8
    000001e3: 	movq	%rax, %rdi
    000001e6: 	movq	%rax, (%rcx)
    000001e9: 	movq	0x20(%rsp), %rax
    000001ee: 	movq	%rax, 0x10(%rcx)
.Ltmp2328:
    000001f2: 	movq	%r14, %rdx
    000001f5: 	movq	%r8, %rsi
    000001f8: 	movq	%rcx, 0x8(%rsp)
    000001fd: 	callq	memcpy@PLT # Offset: 509
    00000202: 	movq	0x8(%rsp), %rcx
    00000207: 	movq	0x20(%rsp), %r14
    0000020c: 	movq	(%rcx), %rdi
    0000020f: 	jmp	.Ltmp2326 # Offset: 527
    00000214: 	nopl	(%rax) # Size: 4
.Ltmp2323:
    00000218: 	movq	0x28(%rsp), %rax
    0000021d: 	subq	%fs:0x28, %rax
    00000226: 	jne	.Ltmp2325 # Offset: 550
    00000228: 	movq	0x10(%rsp), %rax
    0000022d: 	leaq	DATAat0x371c8(%rip), %rsi
    00000234: 	movl	$0x1, %edi
    00000239: 	movq	(%rax), %rdx
    0000023c: 	addq	$0x38, %rsp
    00000240: 	xorl	%eax, %eax
    00000242: 	popq	%rbx
    00000243: 	popq	%rbp
    00000244: 	popq	%r12
    00000246: 	popq	%r13
    00000248: 	popq	%r14
    0000024a: 	popq	%r15
    0000024c: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 588
    00000251: 	nopl	(%rax) # Size: 7
.Ltmp2317:
    00000258: 	movq	0x10(%rsp), %rsi
    0000025d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000264: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 612
    00000269: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000270: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000277: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000027e: 	jne	.Ltmp2327 # Offset: 638
.Ltmp2322:
    00000284: 	movq	-0x8(%rdx), %rax
    00000288: 	addq	$0x200, %rax
    0000028e: 	jmp	.Ltmp2327 # Offset: 654
    00000293: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2321:
    00000298: 	testq	%r14, %r14
    0000029b: 	je	.Ltmp2326 # Offset: 667
    000002a1: 	jmp	.Ltmp2328 # Offset: 673
.Ltmp2325:
    000002a6: 	callq	__stack_chk_fail@PLT # Offset: 678
.Ltmp2319:
    000002ab: 	leaq	DATAat0x37158(%rip), %rdi
    000002b2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 690
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave4to4IjPFvPjPKjS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z19test_interleave4to4IfPFvPfPKfS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z19test_interleave4to4IfPFvPfPKfS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z19test_interleave4to4IfPFvPfPKfS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/interleave.cpp/1
  Number      : 239
  State       : disassembled
  Address     : 0x28320
  Size        : 0x2d7
  MaxSize     : 0x2e0
  Offset      : 0x28320
  Section     : .text
  Orc Section : .local.text._Z19test_interleave4to4IfPFvPfPKfS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0238:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %r15
    00000005: 	pushq	%r14
    00000007: 	xorl	%r14d, %r14d
    0000000a: 	pushq	%r13
    0000000c: 	movq	%r8, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rcx, %r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rdx, %rbp
    00000018: 	movl	$0x138800, %edx
    0000001d: 	pushq	%rbx
    0000001e: 	movq	%rsi, %rbx
    00000021: 	xorl	%esi, %esi
    00000023: 	subq	$0x38, %rsp
    00000027: 	movq	0x70(%rsp), %rax
    0000002c: 	movq	%r9, 0x8(%rsp)
    00000031: 	movq	%rax, 0x10(%rsp)
    00000036: 	movq	%fs:0x28, %rax
    0000003f: 	movq	%rax, 0x28(%rsp)
    00000044: 	xorl	%eax, %eax
    00000046: 	callq	memset@PLT # Offset: 70
    0000004b: 	callq	clock@PLT # Offset: 75
    00000050: 	movq	%rax, start_time(%rip)
    00000057: 	movl	iterations(%rip), %eax
    0000005d: 	testl	%eax, %eax
    0000005f: 	jle	.Ltmp2329 # Offset: 95
    00000061: 	nopl	(%rax) # Size: 7
.Ltmp2330:
    00000068: 	movq	0x8(%rsp), %rax
    0000006d: 	movq	%r13, %r8
    00000070: 	movq	%r12, %rcx
    00000073: 	movq	%rbp, %rdx
    00000076: 	movl	$0x13880, %r9d
    0000007c: 	movq	%rbx, %rsi
    0000007f: 	movq	%r15, %rdi
    00000082: 	addl	$0x1, %r14d
    00000086: 	callq	*%rax # Offset: 134
    00000088: 	cmpl	iterations(%rip), %r14d
    0000008f: 	jl	.Ltmp2330 # Offset: 143
.Ltmp2329:
    00000091: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000098: 	movq	"_ZL7gLabels/1"+48(%rip), %rcx
    0000009f: 	subq	$0x20, %rax
    000000a3: 	cmpq	%rax, %rcx
    000000a6: 	je	.Ltmp2331 # Offset: 166
    000000ac: 	movq	0x10(%rsp), %rax
    000000b1: 	leaq	0x10(%rcx), %rdi
    000000b5: 	movq	%rdi, (%rcx)
    000000b8: 	movq	(%rax), %r8
    000000bb: 	movq	0x8(%rax), %r14
    000000bf: 	movq	%r8, %rax
    000000c2: 	addq	%r14, %rax
    000000c5: 	je	.Ltmp2332 # Offset: 197
    000000c7: 	testq	%r8, %r8
    000000ca: 	je	.Ltmp2333 # Offset: 202
.Ltmp2332:
    000000d0: 	movq	%r14, 0x20(%rsp)
    000000d5: 	cmpq	$0xf, %r14
    000000d9: 	ja	.Ltmp2334 # Offset: 217
    000000df: 	cmpq	$0x1, %r14
    000000e3: 	jne	.Ltmp2335 # Offset: 227
    000000e9: 	movzbl	(%r8), %eax
    000000ed: 	movb	%al, 0x10(%rcx)
.Ltmp2340:
    000000f0: 	movq	%r14, 0x8(%rcx)
    000000f4: 	movb	$0x0, (%rdi,%r14)
    000000f9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000100: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000107: 	addq	$0x20, %rax
    0000010b: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000112: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000119: 	je	.Ltmp2336 # Offset: 281
.Ltmp2341:
    0000011f: 	movq	-0x20(%rax), %r14
    00000123: 	callq	clock@PLT # Offset: 291
    00000128: 	pxor	%xmm0, %xmm0
    0000012c: 	movq	%rax, end_time(%rip)
    00000133: 	movq	%r14, %rdi
    00000136: 	subq	start_time(%rip), %rax
    0000013d: 	cvtsi2sd	%rax, %xmm0
    00000142: 	divsd	DATAat0x37530(%rip), %xmm0
    0000014a: 	callq	_Z13record_resultdPKc # Offset: 330
    0000014f: 	xorl	%eax, %eax
.Ltmp2338:
    00000151: 	movss	(%r15,%rax,4), %xmm0
    00000157: 	ucomiss	(%rbx,%rax), %xmm0
    0000015b: 	jp	.Ltmp2337 # Offset: 347
    00000161: 	jne	.Ltmp2337 # Offset: 353
    00000167: 	movss	0x4(%r15,%rax,4), %xmm0
    0000016e: 	ucomiss	(%rbp,%rax), %xmm0
    00000173: 	jp	.Ltmp2337 # Offset: 371
    00000179: 	jne	.Ltmp2337 # Offset: 377
    0000017f: 	movss	0x8(%r15,%rax,4), %xmm0
    00000186: 	ucomiss	(%r12,%rax), %xmm0
    0000018b: 	jp	.Ltmp2337 # Offset: 395
    00000191: 	jne	.Ltmp2337 # Offset: 401
    00000197: 	movss	0xc(%r15,%rax,4), %xmm0
    0000019e: 	ucomiss	(%r13,%rax), %xmm0
    000001a4: 	jp	.Ltmp2337 # Offset: 420
    000001aa: 	jne	.Ltmp2337 # Offset: 426
    000001b0: 	addq	$0x4, %rax
    000001b4: 	cmpq	$0x4e200, %rax
    000001ba: 	jne	.Ltmp2338 # Offset: 442
    000001bc: 	movq	0x28(%rsp), %rax
    000001c1: 	subq	%fs:0x28, %rax
    000001ca: 	jne	.Ltmp2339 # Offset: 458
    000001d0: 	addq	$0x38, %rsp
    000001d4: 	popq	%rbx
    000001d5: 	popq	%rbp
    000001d6: 	popq	%r12
    000001d8: 	popq	%r13
    000001da: 	popq	%r14
    000001dc: 	popq	%r15
    000001de: 	retq # Offset: 478
    000001df: 	nop # Size: 1
.Ltmp2334:
    000001e0: 	movq	%rcx, %rdi
    000001e3: 	leaq	0x20(%rsp), %rsi
    000001e8: 	xorl	%edx, %edx
    000001ea: 	movq	%r8, 0x18(%rsp)
    000001ef: 	movq	%rcx, 0x8(%rsp)
    000001f4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 500
    000001f9: 	movq	0x8(%rsp), %rcx
    000001fe: 	movq	0x18(%rsp), %r8
    00000203: 	movq	%rax, %rdi
    00000206: 	movq	%rax, (%rcx)
    00000209: 	movq	0x20(%rsp), %rax
    0000020e: 	movq	%rax, 0x10(%rcx)
.Ltmp2342:
    00000212: 	movq	%r14, %rdx
    00000215: 	movq	%r8, %rsi
    00000218: 	movq	%rcx, 0x8(%rsp)
    0000021d: 	callq	memcpy@PLT # Offset: 541
    00000222: 	movq	0x8(%rsp), %rcx
    00000227: 	movq	0x20(%rsp), %r14
    0000022c: 	movq	(%rcx), %rdi
    0000022f: 	jmp	.Ltmp2340 # Offset: 559
    00000234: 	nopl	(%rax) # Size: 4
.Ltmp2337:
    00000238: 	movq	0x28(%rsp), %rax
    0000023d: 	subq	%fs:0x28, %rax
    00000246: 	jne	.Ltmp2339 # Offset: 582
    00000248: 	movq	0x10(%rsp), %rax
    0000024d: 	leaq	DATAat0x371c8(%rip), %rsi
    00000254: 	movl	$0x1, %edi
    00000259: 	movq	(%rax), %rdx
    0000025c: 	addq	$0x38, %rsp
    00000260: 	xorl	%eax, %eax
    00000262: 	popq	%rbx
    00000263: 	popq	%rbp
    00000264: 	popq	%r12
    00000266: 	popq	%r13
    00000268: 	popq	%r14
    0000026a: 	popq	%r15
    0000026c: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 620
    00000271: 	nopl	(%rax) # Size: 7
.Ltmp2331:
    00000278: 	movq	0x10(%rsp), %rsi
    0000027d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000284: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 644
    00000289: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000290: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000297: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000029e: 	jne	.Ltmp2341 # Offset: 670
.Ltmp2336:
    000002a4: 	movq	-0x8(%rdx), %rax
    000002a8: 	addq	$0x200, %rax
    000002ae: 	jmp	.Ltmp2341 # Offset: 686
    000002b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2335:
    000002b8: 	testq	%r14, %r14
    000002bb: 	je	.Ltmp2340 # Offset: 699
    000002c1: 	jmp	.Ltmp2342 # Offset: 705
.Ltmp2339:
    000002c6: 	callq	__stack_chk_fail@PLT # Offset: 710
.Ltmp2333:
    000002cb: 	leaq	DATAat0x37158(%rip), %rdi
    000002d2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 722
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave4to4IfPFvPfPKfS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z19test_interleave3to3IePFvPePKeS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 240
  State       : disassembled
  Address     : 0x28600
  Size        : 0x2c8
  MaxSize     : 0x2d0
  Offset      : 0x28600
  Section     : .text
  Orc Section : .local.text._Z19test_interleave3to3IePFvPePKeS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0239:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rcx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	leal	(%r8,%r8,2), %edx
    00000019: 	pushq	%rbp
    0000001a: 	movslq	%edx, %rdx
    0000001d: 	movq	%rsi, %rbp
    00000020: 	pushq	%rbx
    00000021: 	movl	%r8d, %ebx
    00000024: 	subq	$0x38, %rsp
    00000028: 	movq	0x70(%rsp), %rax
    0000002d: 	movq	%r9, 0x8(%rsp)
    00000032: 	movq	%rax, 0x10(%rsp)
    00000037: 	movq	%fs:0x28, %rax
    00000040: 	movq	%rax, 0x28(%rsp)
    00000045: 	xorl	%eax, %eax
    00000047: 	shlq	$0x4, %rdx
    0000004b: 	je	.Ltmp2343 # Offset: 75
    0000004d: 	xorl	%esi, %esi
    0000004f: 	callq	memset@PLT # Offset: 79
.Ltmp2343:
    00000054: 	callq	clock@PLT # Offset: 84
    00000059: 	xorl	%r14d, %r14d
    0000005c: 	movq	%rax, start_time(%rip)
    00000063: 	movl	iterations(%rip), %eax
    00000069: 	testl	%eax, %eax
    0000006b: 	jle	.Ltmp2344 # Offset: 107
    0000006d: 	nopl	(%rax) # Size: 3
.Ltmp2345:
    00000070: 	movq	0x8(%rsp), %rax
    00000075: 	movl	%ebx, %r8d
    00000078: 	movq	%r13, %rcx
    0000007b: 	movq	%r12, %rdx
    0000007e: 	movq	%rbp, %rsi
    00000081: 	movq	%r15, %rdi
    00000084: 	addl	$0x1, %r14d
    00000088: 	callq	*%rax # Offset: 136
    0000008a: 	cmpl	%r14d, iterations(%rip)
    00000091: 	jg	.Ltmp2345 # Offset: 145
.Ltmp2344:
    00000093: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000009a: 	movq	"_ZL7gLabels/1"+48(%rip), %rcx
    000000a1: 	subq	$0x20, %rax
    000000a5: 	cmpq	%rax, %rcx
    000000a8: 	je	.Ltmp2346 # Offset: 168
    000000ae: 	movq	0x10(%rsp), %rax
    000000b3: 	leaq	0x10(%rcx), %rdi
    000000b7: 	movq	%rdi, (%rcx)
    000000ba: 	movq	(%rax), %r8
    000000bd: 	movq	0x8(%rax), %r14
    000000c1: 	movq	%r8, %rax
    000000c4: 	addq	%r14, %rax
    000000c7: 	je	.Ltmp2347 # Offset: 199
    000000c9: 	testq	%r8, %r8
    000000cc: 	je	.Ltmp2348 # Offset: 204
.Ltmp2347:
    000000d2: 	movq	%r14, 0x20(%rsp)
    000000d7: 	cmpq	$0xf, %r14
    000000db: 	ja	.Ltmp2349 # Offset: 219
    000000e1: 	cmpq	$0x1, %r14
    000000e5: 	jne	.Ltmp2350 # Offset: 229
    000000eb: 	movzbl	(%r8), %eax
    000000ef: 	movb	%al, 0x10(%rcx)
.Ltmp2357:
    000000f2: 	movq	%r14, 0x8(%rcx)
    000000f6: 	movb	$0x0, (%rdi,%r14)
    000000fb: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000102: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000109: 	addq	$0x20, %rax
    0000010d: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000114: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000011b: 	je	.Ltmp2351 # Offset: 283
.Ltmp2358:
    00000121: 	movq	-0x20(%rax), %r14
    00000125: 	callq	clock@PLT # Offset: 293
    0000012a: 	pxor	%xmm0, %xmm0
    0000012e: 	movq	%rax, end_time(%rip)
    00000135: 	movq	%r14, %rdi
    00000138: 	subq	start_time(%rip), %rax
    0000013f: 	cvtsi2sd	%rax, %xmm0
    00000144: 	divsd	DATAat0x37530(%rip), %xmm0
    0000014c: 	callq	_Z13record_resultdPKc # Offset: 332
    00000151: 	movslq	%ebx, %rdx
    00000154: 	xorl	%eax, %eax
    00000156: 	shlq	$0x4, %rdx
    0000015a: 	testl	%ebx, %ebx
    0000015c: 	jg	.Ltmp2352 # Offset: 348
    0000015e: 	jmp	.Ltmp2353 # Offset: 350
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2355:
    00000168: 	fldt	(%r12,%rax)
    0000016c: 	fldt	0x10(%r15)
    00000170: 	fucompi	%st(1), %st
    00000172: 	fstp	%st(0)
    00000174: 	jp	.Ltmp2354 # Offset: 372
    00000176: 	jne	.Ltmp2354 # Offset: 374
    00000178: 	fldt	(%r13,%rax)
    0000017d: 	fldt	0x20(%r15)
    00000181: 	fucompi	%st(1), %st
    00000183: 	fstp	%st(0)
    00000185: 	jp	.Ltmp2354 # Offset: 389
    00000187: 	jne	.Ltmp2354 # Offset: 391
    00000189: 	addq	$0x10, %rax
    0000018d: 	addq	$0x30, %r15
    00000191: 	cmpq	%rax, %rdx
    00000194: 	je	.Ltmp2353 # Offset: 404
.Ltmp2352:
    0000019a: 	fldt	(%rbp,%rax)
    0000019e: 	fldt	(%r15)
    000001a1: 	fucompi	%st(1), %st
    000001a3: 	fstp	%st(0)
    000001a5: 	jp	.Ltmp2354 # Offset: 421
    000001a7: 	je	.Ltmp2355 # Offset: 423
.Ltmp2354:
    000001a9: 	movq	0x28(%rsp), %rax
    000001ae: 	subq	%fs:0x28, %rax
    000001b7: 	jne	.Ltmp2356 # Offset: 439
    000001bd: 	movq	0x10(%rsp), %rax
    000001c2: 	leaq	DATAat0x371c8(%rip), %rsi
    000001c9: 	movl	$0x1, %edi
    000001ce: 	movq	(%rax), %rdx
    000001d1: 	addq	$0x38, %rsp
    000001d5: 	xorl	%eax, %eax
    000001d7: 	popq	%rbx
    000001d8: 	popq	%rbp
    000001d9: 	popq	%r12
    000001db: 	popq	%r13
    000001dd: 	popq	%r14
    000001df: 	popq	%r15
    000001e1: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 481
    000001e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2349:
    000001f0: 	movq	%rcx, %rdi
    000001f3: 	leaq	0x20(%rsp), %rsi
    000001f8: 	xorl	%edx, %edx
    000001fa: 	movq	%r8, 0x18(%rsp)
    000001ff: 	movq	%rcx, 0x8(%rsp)
    00000204: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 516
    00000209: 	movq	0x8(%rsp), %rcx
    0000020e: 	movq	0x18(%rsp), %r8
    00000213: 	movq	%rax, %rdi
    00000216: 	movq	%rax, (%rcx)
    00000219: 	movq	0x20(%rsp), %rax
    0000021e: 	movq	%rax, 0x10(%rcx)
.Ltmp2359:
    00000222: 	movq	%r14, %rdx
    00000225: 	movq	%r8, %rsi
    00000228: 	movq	%rcx, 0x8(%rsp)
    0000022d: 	callq	memcpy@PLT # Offset: 557
    00000232: 	movq	0x8(%rsp), %rcx
    00000237: 	movq	0x20(%rsp), %r14
    0000023c: 	movq	(%rcx), %rdi
    0000023f: 	jmp	.Ltmp2357 # Offset: 575
    00000244: 	nopl	(%rax) # Size: 4
.Ltmp2346:
    00000248: 	movq	0x10(%rsp), %rsi
    0000024d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000254: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 596
    00000259: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000260: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000267: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000026e: 	jne	.Ltmp2358 # Offset: 622
.Ltmp2351:
    00000274: 	movq	-0x8(%rdx), %rax
    00000278: 	addq	$0x200, %rax
    0000027e: 	jmp	.Ltmp2358 # Offset: 638
    00000283: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2350:
    00000288: 	testq	%r14, %r14
    0000028b: 	je	.Ltmp2357 # Offset: 651
    00000291: 	jmp	.Ltmp2359 # Offset: 657
    00000293: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2353:
    00000298: 	movq	0x28(%rsp), %rax
    0000029d: 	subq	%fs:0x28, %rax
    000002a6: 	jne	.Ltmp2356 # Offset: 678
    000002a8: 	addq	$0x38, %rsp
    000002ac: 	popq	%rbx
    000002ad: 	popq	%rbp
    000002ae: 	popq	%r12
    000002b0: 	popq	%r13
    000002b2: 	popq	%r14
    000002b4: 	popq	%r15
    000002b6: 	retq # Offset: 694
.Ltmp2356:
    000002b7: 	callq	__stack_chk_fail@PLT # Offset: 695
.Ltmp2348:
    000002bc: 	leaq	DATAat0x37158(%rip), %rdi
    000002c3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 707
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave3to3IePFvPePKeS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_interleave4to4IePFvPePKeS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 241
  State       : disassembled
  Address     : 0x288d0
  Size        : 0x30f
  MaxSize     : 0x310
  Offset      : 0x288d0
  Section     : .text
  Orc Section : .local.text._Z19test_interleave4to4IePFvPePKeS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0240:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%r8, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rcx, %r13
    00000013: 	pushq	%r12
    00000015: 	movq	%rdx, %r12
    00000018: 	leal	(,%r9,4), %edx
    00000020: 	pushq	%rbp
    00000021: 	movslq	%edx, %rdx
    00000024: 	movq	%rsi, %rbp
    00000027: 	pushq	%rbx
    00000028: 	movl	%r9d, %ebx
    0000002b: 	subq	$0x38, %rsp
    0000002f: 	movq	0x70(%rsp), %rax
    00000034: 	movq	%rax, 0x8(%rsp)
    00000039: 	movq	0x78(%rsp), %rax
    0000003e: 	movq	%rax, 0x10(%rsp)
    00000043: 	movq	%fs:0x28, %rax
    0000004c: 	movq	%rax, 0x28(%rsp)
    00000051: 	xorl	%eax, %eax
    00000053: 	shlq	$0x4, %rdx
    00000057: 	je	.Ltmp2360 # Offset: 87
    00000059: 	xorl	%esi, %esi
    0000005b: 	callq	memset@PLT # Offset: 91
.Ltmp2360:
    00000060: 	callq	clock@PLT # Offset: 96
    00000065: 	movl	iterations(%rip), %edx
    0000006b: 	movq	%rax, start_time(%rip)
    00000072: 	xorl	%eax, %eax
    00000074: 	testl	%edx, %edx
    00000076: 	jle	.Ltmp2361 # Offset: 118
    00000078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2362:
    00000080: 	movl	%eax, (%rsp)
    00000083: 	movl	%ebx, %r9d
    00000086: 	movq	0x8(%rsp), %rax
    0000008b: 	movq	%r14, %r8
    0000008e: 	movq	%r13, %rcx
    00000091: 	movq	%r12, %rdx
    00000094: 	movq	%rbp, %rsi
    00000097: 	movq	%r15, %rdi
    0000009a: 	callq	*%rax # Offset: 154
    0000009c: 	movl	(%rsp), %eax
    0000009f: 	addl	$0x1, %eax
    000000a2: 	cmpl	%eax, iterations(%rip)
    000000a8: 	jg	.Ltmp2362 # Offset: 168
.Ltmp2361:
    000000aa: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000b1: 	movq	"_ZL7gLabels/1"+48(%rip), %rcx
    000000b8: 	subq	$0x20, %rax
    000000bc: 	cmpq	%rax, %rcx
    000000bf: 	je	.Ltmp2363 # Offset: 191
    000000c5: 	movq	0x10(%rsp), %rax
    000000ca: 	leaq	0x10(%rcx), %rdi
    000000ce: 	movq	%rdi, (%rcx)
    000000d1: 	movq	(%rax), %r8
    000000d4: 	movq	0x8(%rax), %r9
    000000d8: 	movq	%r8, %rax
    000000db: 	addq	%r9, %rax
    000000de: 	je	.Ltmp2364 # Offset: 222
    000000e0: 	testq	%r8, %r8
    000000e3: 	je	.Ltmp2365 # Offset: 227
.Ltmp2364:
    000000e9: 	movq	%r9, 0x20(%rsp)
    000000ee: 	cmpq	$0xf, %r9
    000000f2: 	ja	.Ltmp2366 # Offset: 242
    000000f8: 	cmpq	$0x1, %r9
    000000fc: 	jne	.Ltmp2367 # Offset: 252
    00000102: 	movzbl	(%r8), %eax
    00000106: 	movb	%al, 0x10(%rcx)
.Ltmp2373:
    00000109: 	movq	%r9, 0x8(%rcx)
    0000010d: 	movb	$0x0, (%rdi,%r9)
    00000112: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000119: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000120: 	addq	$0x20, %rax
    00000124: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000012b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000132: 	je	.Ltmp2368 # Offset: 306
.Ltmp2374:
    00000138: 	movq	-0x20(%rax), %rdi
    0000013c: 	movq	%rdi, (%rsp)
    00000140: 	callq	clock@PLT # Offset: 320
    00000145: 	movq	(%rsp), %rdi
    00000149: 	pxor	%xmm0, %xmm0
    0000014d: 	movq	%rax, end_time(%rip)
    00000154: 	subq	start_time(%rip), %rax
    0000015b: 	cvtsi2sd	%rax, %xmm0
    00000160: 	divsd	DATAat0x37530(%rip), %xmm0
    00000168: 	callq	_Z13record_resultdPKc # Offset: 360
    0000016d: 	movslq	%ebx, %rdx
    00000170: 	xorl	%eax, %eax
    00000172: 	shlq	$0x4, %rdx
    00000176: 	testl	%ebx, %ebx
    00000178: 	jle	.Ltmp2369 # Offset: 376
.Ltmp2371:
    0000017a: 	fldt	(%rbp,%rax)
    0000017e: 	fldt	(%r15,%rax,4)
    00000182: 	fucompi	%st(1), %st
    00000184: 	fstp	%st(0)
    00000186: 	jp	.Ltmp2370 # Offset: 390
    0000018c: 	jne	.Ltmp2370 # Offset: 396
    00000192: 	fldt	(%r12,%rax)
    00000196: 	fldt	0x10(%r15,%rax,4)
    0000019b: 	fucompi	%st(1), %st
    0000019d: 	fstp	%st(0)
    0000019f: 	jp	.Ltmp2370 # Offset: 415
    000001a5: 	jne	.Ltmp2370 # Offset: 421
    000001ab: 	fldt	(%r13,%rax)
    000001b0: 	fldt	0x20(%r15,%rax,4)
    000001b5: 	fucompi	%st(1), %st
    000001b7: 	fstp	%st(0)
    000001b9: 	jp	.Ltmp2370 # Offset: 441
    000001bf: 	jne	.Ltmp2370 # Offset: 447
    000001c5: 	fldt	(%r14,%rax)
    000001c9: 	fldt	0x30(%r15,%rax,4)
    000001ce: 	fucompi	%st(1), %st
    000001d0: 	fstp	%st(0)
    000001d2: 	jp	.Ltmp2370 # Offset: 466
    000001d8: 	jne	.Ltmp2370 # Offset: 472
    000001de: 	addq	$0x10, %rax
    000001e2: 	cmpq	%rax, %rdx
    000001e5: 	jne	.Ltmp2371 # Offset: 485
.Ltmp2369:
    000001e7: 	movq	0x28(%rsp), %rax
    000001ec: 	subq	%fs:0x28, %rax
    000001f5: 	jne	.Ltmp2372 # Offset: 501
    000001fb: 	addq	$0x38, %rsp
    000001ff: 	popq	%rbx
    00000200: 	popq	%rbp
    00000201: 	popq	%r12
    00000203: 	popq	%r13
    00000205: 	popq	%r14
    00000207: 	popq	%r15
    00000209: 	retq # Offset: 521
    0000020a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2366:
    00000210: 	movq	%rcx, %rdi
    00000213: 	leaq	0x20(%rsp), %rsi
    00000218: 	xorl	%edx, %edx
    0000021a: 	movq	%r9, 0x18(%rsp)
    0000021f: 	movq	%r8, 0x8(%rsp)
    00000224: 	movq	%rcx, (%rsp)
    00000228: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 552
    0000022d: 	movq	(%rsp), %rcx
    00000231: 	movq	0x8(%rsp), %r8
    00000236: 	movq	%rax, %rdi
    00000239: 	movq	0x18(%rsp), %r9
    0000023e: 	movq	%rax, (%rcx)
    00000241: 	movq	0x20(%rsp), %rax
    00000246: 	movq	%rax, 0x10(%rcx)
.Ltmp2375:
    0000024a: 	movq	%r9, %rdx
    0000024d: 	movq	%r8, %rsi
    00000250: 	movq	%rcx, (%rsp)
    00000254: 	callq	memcpy@PLT # Offset: 596
    00000259: 	movq	(%rsp), %rcx
    0000025d: 	movq	0x20(%rsp), %r9
    00000262: 	movq	(%rcx), %rdi
    00000265: 	jmp	.Ltmp2373 # Offset: 613
    0000026a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2370:
    00000270: 	movq	0x28(%rsp), %rax
    00000275: 	subq	%fs:0x28, %rax
    0000027e: 	jne	.Ltmp2372 # Offset: 638
    00000280: 	movq	0x10(%rsp), %rax
    00000285: 	leaq	DATAat0x371c8(%rip), %rsi
    0000028c: 	movl	$0x1, %edi
    00000291: 	movq	(%rax), %rdx
    00000294: 	addq	$0x38, %rsp
    00000298: 	xorl	%eax, %eax
    0000029a: 	popq	%rbx
    0000029b: 	popq	%rbp
    0000029c: 	popq	%r12
    0000029e: 	popq	%r13
    000002a0: 	popq	%r14
    000002a2: 	popq	%r15
    000002a4: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 676
    000002a9: 	nopl	(%rax) # Size: 7
.Ltmp2363:
    000002b0: 	movq	0x10(%rsp), %rsi
    000002b5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002bc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 700
    000002c1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002c8: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000002cf: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000002d6: 	jne	.Ltmp2374 # Offset: 726
.Ltmp2368:
    000002dc: 	movq	-0x8(%rdx), %rax
    000002e0: 	addq	$0x200, %rax
    000002e6: 	jmp	.Ltmp2374 # Offset: 742
    000002eb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2367:
    000002f0: 	testq	%r9, %r9
    000002f3: 	je	.Ltmp2373 # Offset: 755
    000002f9: 	jmp	.Ltmp2375 # Offset: 761
.Ltmp2372:
    000002fe: 	callq	__stack_chk_fail@PLT # Offset: 766
.Ltmp2365:
    00000303: 	leaq	DATAat0x37158(%rip), %rdi
    0000030a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 778
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave4to4IePFvPePKeS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_interleave4to4IdPFvPdPKdS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 242
  State       : disassembled
  Address     : 0x28be0
  Size        : 0x2ff
  MaxSize     : 0x300
  Offset      : 0x28be0
  Section     : .text
  Orc Section : .local.text._Z19test_interleave4to4IdPFvPdPKdS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0241:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rcx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	leal	(,%r9,4), %edx
    0000001d: 	pushq	%rbp
    0000001e: 	movslq	%edx, %rdx
    00000021: 	movq	%rsi, %rbp
    00000024: 	pushq	%rbx
    00000025: 	movl	%r9d, %ebx
    00000028: 	subq	$0x38, %rsp
    0000002c: 	movq	0x70(%rsp), %rax
    00000031: 	movq	%r8, (%rsp)
    00000035: 	movq	%rax, 0x8(%rsp)
    0000003a: 	movq	0x78(%rsp), %rax
    0000003f: 	movq	%rax, 0x10(%rsp)
    00000044: 	movq	%fs:0x28, %rax
    0000004d: 	movq	%rax, 0x28(%rsp)
    00000052: 	xorl	%eax, %eax
    00000054: 	shlq	$0x3, %rdx
    00000058: 	je	.Ltmp2376 # Offset: 88
    0000005a: 	xorl	%esi, %esi
    0000005c: 	callq	memset@PLT # Offset: 92
.Ltmp2376:
    00000061: 	callq	clock@PLT # Offset: 97
    00000066: 	xorl	%r15d, %r15d
    00000069: 	movq	%rax, start_time(%rip)
    00000070: 	movl	iterations(%rip), %eax
    00000076: 	testl	%eax, %eax
    00000078: 	jle	.Ltmp2377 # Offset: 120
    0000007a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2378:
    00000080: 	movq	(%rsp), %r8
    00000084: 	movq	0x8(%rsp), %rax
    00000089: 	movl	%ebx, %r9d
    0000008c: 	movq	%r13, %rcx
    0000008f: 	movq	%r12, %rdx
    00000092: 	movq	%rbp, %rsi
    00000095: 	movq	%r14, %rdi
    00000098: 	addl	$0x1, %r15d
    0000009c: 	callq	*%rax # Offset: 156
    0000009e: 	cmpl	%r15d, iterations(%rip)
    000000a5: 	jg	.Ltmp2378 # Offset: 165
.Ltmp2377:
    000000a7: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000ae: 	movq	"_ZL7gLabels/1"+48(%rip), %rcx
    000000b5: 	subq	$0x20, %rax
    000000b9: 	cmpq	%rax, %rcx
    000000bc: 	je	.Ltmp2379 # Offset: 188
    000000c2: 	movq	0x10(%rsp), %rax
    000000c7: 	leaq	0x10(%rcx), %rdi
    000000cb: 	movq	%rdi, (%rcx)
    000000ce: 	movq	(%rax), %r8
    000000d1: 	movq	0x8(%rax), %r15
    000000d5: 	movq	%r8, %rax
    000000d8: 	addq	%r15, %rax
    000000db: 	je	.Ltmp2380 # Offset: 219
    000000dd: 	testq	%r8, %r8
    000000e0: 	je	.Ltmp2381 # Offset: 224
.Ltmp2380:
    000000e6: 	movq	%r15, 0x20(%rsp)
    000000eb: 	cmpq	$0xf, %r15
    000000ef: 	ja	.Ltmp2382 # Offset: 239
    000000f5: 	cmpq	$0x1, %r15
    000000f9: 	jne	.Ltmp2383 # Offset: 249
    000000ff: 	movzbl	(%r8), %eax
    00000103: 	movb	%al, 0x10(%rcx)
.Ltmp2389:
    00000106: 	movq	%r15, 0x8(%rcx)
    0000010a: 	movb	$0x0, (%rdi,%r15)
    0000010f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000116: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000011d: 	addq	$0x20, %rax
    00000121: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000128: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000012f: 	je	.Ltmp2384 # Offset: 303
.Ltmp2390:
    00000135: 	movq	-0x20(%rax), %r15
    00000139: 	callq	clock@PLT # Offset: 313
    0000013e: 	pxor	%xmm0, %xmm0
    00000142: 	movq	%rax, end_time(%rip)
    00000149: 	movq	%r15, %rdi
    0000014c: 	subq	start_time(%rip), %rax
    00000153: 	cvtsi2sd	%rax, %xmm0
    00000158: 	divsd	DATAat0x37530(%rip), %xmm0
    00000160: 	callq	_Z13record_resultdPKc # Offset: 352
    00000165: 	movslq	%ebx, %rdx
    00000168: 	xorl	%eax, %eax
    0000016a: 	testl	%ebx, %ebx
    0000016c: 	jle	.Ltmp2385 # Offset: 364
.Ltmp2387:
    0000016e: 	movsd	(%r14), %xmm0
    00000173: 	ucomisd	(%rbp,%rax,8), %xmm0
    00000179: 	jp	.Ltmp2386 # Offset: 377
    0000017f: 	jne	.Ltmp2386 # Offset: 383
    00000185: 	movsd	0x8(%r14), %xmm0
    0000018b: 	ucomisd	(%r12,%rax,8), %xmm0
    00000191: 	jp	.Ltmp2386 # Offset: 401
    00000197: 	jne	.Ltmp2386 # Offset: 407
    0000019d: 	movsd	0x10(%r14), %xmm0
    000001a3: 	ucomisd	(%r13,%rax,8), %xmm0
    000001aa: 	jp	.Ltmp2386 # Offset: 426
    000001b0: 	jne	.Ltmp2386 # Offset: 432
    000001b6: 	movq	(%rsp), %rbx
    000001ba: 	movsd	0x18(%r14), %xmm0
    000001c0: 	ucomisd	(%rbx,%rax,8), %xmm0
    000001c5: 	jp	.Ltmp2386 # Offset: 453
    000001cb: 	jne	.Ltmp2386 # Offset: 459
    000001d1: 	addq	$0x1, %rax
    000001d5: 	addq	$0x20, %r14
    000001d9: 	cmpq	%rax, %rdx
    000001dc: 	jne	.Ltmp2387 # Offset: 476
.Ltmp2385:
    000001de: 	movq	0x28(%rsp), %rax
    000001e3: 	subq	%fs:0x28, %rax
    000001ec: 	jne	.Ltmp2388 # Offset: 492
    000001f2: 	addq	$0x38, %rsp
    000001f6: 	popq	%rbx
    000001f7: 	popq	%rbp
    000001f8: 	popq	%r12
    000001fa: 	popq	%r13
    000001fc: 	popq	%r14
    000001fe: 	popq	%r15
    00000200: 	retq # Offset: 512
    00000201: 	nopl	(%rax) # Size: 7
.Ltmp2382:
    00000208: 	movq	%rcx, %rdi
    0000020b: 	leaq	0x20(%rsp), %rsi
    00000210: 	xorl	%edx, %edx
    00000212: 	movq	%r8, 0x18(%rsp)
    00000217: 	movq	%rcx, 0x8(%rsp)
    0000021c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 540
    00000221: 	movq	0x8(%rsp), %rcx
    00000226: 	movq	0x18(%rsp), %r8
    0000022b: 	movq	%rax, %rdi
    0000022e: 	movq	%rax, (%rcx)
    00000231: 	movq	0x20(%rsp), %rax
    00000236: 	movq	%rax, 0x10(%rcx)
.Ltmp2391:
    0000023a: 	movq	%r15, %rdx
    0000023d: 	movq	%r8, %rsi
    00000240: 	movq	%rcx, 0x8(%rsp)
    00000245: 	callq	memcpy@PLT # Offset: 581
    0000024a: 	movq	0x8(%rsp), %rcx
    0000024f: 	movq	0x20(%rsp), %r15
    00000254: 	movq	(%rcx), %rdi
    00000257: 	jmp	.Ltmp2389 # Offset: 599
    0000025c: 	nopl	(%rax) # Size: 4
.Ltmp2386:
    00000260: 	movq	0x28(%rsp), %rax
    00000265: 	subq	%fs:0x28, %rax
    0000026e: 	jne	.Ltmp2388 # Offset: 622
    00000270: 	movq	0x10(%rsp), %rax
    00000275: 	leaq	DATAat0x371c8(%rip), %rsi
    0000027c: 	movl	$0x1, %edi
    00000281: 	movq	(%rax), %rdx
    00000284: 	addq	$0x38, %rsp
    00000288: 	xorl	%eax, %eax
    0000028a: 	popq	%rbx
    0000028b: 	popq	%rbp
    0000028c: 	popq	%r12
    0000028e: 	popq	%r13
    00000290: 	popq	%r14
    00000292: 	popq	%r15
    00000294: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 660
    00000299: 	nopl	(%rax) # Size: 7
.Ltmp2379:
    000002a0: 	movq	0x10(%rsp), %rsi
    000002a5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002ac: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 684
    000002b1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002b8: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000002bf: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000002c6: 	jne	.Ltmp2390 # Offset: 710
.Ltmp2384:
    000002cc: 	movq	-0x8(%rdx), %rax
    000002d0: 	addq	$0x200, %rax
    000002d6: 	jmp	.Ltmp2390 # Offset: 726
    000002db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2383:
    000002e0: 	testq	%r15, %r15
    000002e3: 	je	.Ltmp2389 # Offset: 739
    000002e9: 	jmp	.Ltmp2391 # Offset: 745
.Ltmp2388:
    000002ee: 	callq	__stack_chk_fail@PLT # Offset: 750
.Ltmp2381:
    000002f3: 	leaq	DATAat0x37158(%rip), %rdi
    000002fa: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 762
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave4to4IdPFvPdPKdS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIdEvv" after disassembly {
  Number      : 243
  State       : disassembled
  Address     : 0x28ee0
  Size        : 0x1c4c
  MaxSize     : 0x1c50
  Offset      : 0x28ee0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIdEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0242:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	$0x656c, %edi
    0000000a: 	movq	%rsp, %rbp
    0000000d: 	pushq	%r15
    0000000f: 	pushq	%r14
    00000011: 	pushq	%r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbx
    00000016: 	subq	$0x128, %rsp
    0000001d: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm1
    00000025: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm2
    0000002d: 	movq	%fs:0x28, %rax
    00000036: 	movq	%rax, -0x38(%rbp)
    0000003a: 	xorl	%eax, %eax
    0000003c: 	leaq	-0xd0(%rbp), %rax
    00000043: 	movw	%di, -0xcc(%rbp)
    0000004a: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    00000051: 	movq	%rax, -0x120(%rbp)
    00000058: 	movhlps	%xmm1, %xmm5
    0000005b: 	movq	%xmm2, %rsi
    00000060: 	movq	%rax, -0xe0(%rbp)
    00000067: 	movq	%xmm5, %rcx
    0000006c: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000073: 	leaq	0x8(%rcx), %r12
    00000077: 	movb	$0x0, -0xca(%rbp)
    0000007e: 	movq	%rax, -0x108(%rbp)
    00000085: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000008c: 	movl	$0x62756f64, -0xd0(%rbp)
    00000096: 	movq	$0x6, -0xd8(%rbp)
    000000a1: 	movq	%rax, -0x118(%rbp)
    000000a8: 	movaps	%xmm2, -0x130(%rbp)
    000000af: 	movaps	%xmm1, -0x140(%rbp)
    000000b6: 	movq	%xmm5, -0x148(%rbp)
    000000be: 	movq	%xmm1, -0x110(%rbp)
    000000c6: 	cmpq	%r12, %rax
    000000c9: 	jbe	.Ltmp2392 # Offset: 201
    000000cb: 	movq	%xmm2, -0x150(%rbp)
    000000d3: 	movq	%r12, %r13
    000000d6: 	movq	%rax, %r15
    000000d9: 	nopl	(%rax) # Size: 7
.Ltmp2395:
    000000e0: 	movq	(%r13), %rax
    000000e4: 	movq	%rax, -0xf8(%rbp)
    000000eb: 	leaq	0x200(%rax), %rbx
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2394:
    000000f8: 	movq	-0xf8(%rbp), %rax
    000000ff: 	movq	(%rax), %rdi
    00000102: 	leaq	0x10(%rax), %rdx
    00000106: 	cmpq	%rdx, %rdi
    00000109: 	je	.Ltmp2393 # Offset: 265
    0000010f: 	movq	0x10(%rax), %rcx
    00000113: 	leaq	0x1(%rcx), %rsi
    00000117: 	movq	%rcx, -0x100(%rbp)
    0000011e: 	callq	_ZdlPvm@PLT # Offset: 286
    00000123: 	addq	$0x20, -0xf8(%rbp)
    0000012b: 	movq	-0xf8(%rbp), %rax
    00000132: 	cmpq	%rbx, %rax
    00000135: 	jne	.Ltmp2394 # Offset: 309
    00000137: 	addq	$0x8, %r13
    0000013b: 	cmpq	%r13, %r15
    0000013e: 	ja	.Ltmp2395 # Offset: 318
.Ltmp2491:
    00000140: 	movq	-0x150(%rbp), %rsi
.Ltmp2392:
    00000147: 	movq	-0x148(%rbp), %rcx
    0000014e: 	cmpq	%rcx, -0x118(%rbp)
    00000155: 	je	.Ltmp2396 # Offset: 341
    0000015b: 	movq	-0x110(%rbp), %rbx
    00000162: 	cmpq	%rbx, %rsi
    00000165: 	je	.Ltmp2397 # Offset: 357
    00000167: 	movq	%rsi, %rbx
.Ltmp2400:
    0000016a: 	movq	(%rbx), %rdi
    0000016d: 	leaq	0x10(%rbx), %rax
    00000171: 	cmpq	%rax, %rdi
    00000174: 	je	.Ltmp2398 # Offset: 372
.Ltmp2399:
    00000176: 	movq	0x10(%rbx), %rax
    0000017a: 	addq	$0x20, %rbx
    0000017e: 	leaq	0x1(%rax), %rsi
    00000182: 	movq	%rax, -0xf8(%rbp)
    00000189: 	callq	_ZdlPvm@PLT # Offset: 393
    0000018e: 	cmpq	-0x110(%rbp), %rbx
    00000195: 	je	.Ltmp2397 # Offset: 405
    00000197: 	movq	(%rbx), %rdi
    0000019a: 	leaq	0x10(%rbx), %rax
    0000019e: 	cmpq	%rax, %rdi
    000001a1: 	jne	.Ltmp2399 # Offset: 417
.Ltmp2398:
    000001a3: 	movq	%rbx, %rax
    000001a6: 	addq	$0x20, %rax
    000001aa: 	movq	%rax, %rbx
    000001ad: 	cmpq	-0x110(%rbp), %rax
    000001b4: 	jne	.Ltmp2400 # Offset: 436
    000001b6: 	cmpq	%r14, -0x108(%rbp)
    000001bd: 	je	.Ltmp2401 # Offset: 445
    000001bf: 	nop # Size: 1
.Ltmp2403:
    000001c0: 	movq	(%r14), %rdi
    000001c3: 	leaq	0x10(%r14), %rax
    000001c7: 	cmpq	%rax, %rdi
    000001ca: 	je	.Ltmp2402 # Offset: 458
    000001cc: 	movq	0x10(%r14), %rax
    000001d0: 	leaq	0x1(%rax), %rsi
    000001d4: 	callq	_ZdlPvm@PLT # Offset: 468
.Ltmp2402:
    000001d9: 	addq	$0x20, %r14
.Ltmp2397:
    000001dd: 	cmpq	%r14, -0x108(%rbp)
    000001e4: 	jne	.Ltmp2403 # Offset: 484
.Ltmp2401:
    000001e6: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000001ed: 	leaq	0x8(%rax), %rbx
    000001f1: 	cmpq	%r12, %rbx
    000001f4: 	jbe	.Ltmp2404 # Offset: 500
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2405:
    00000200: 	movq	(%r12), %rdi
    00000204: 	movl	$0x200, %esi
    00000209: 	addq	$0x8, %r12
    0000020d: 	callq	_ZdlPvm@PLT # Offset: 525
    00000212: 	cmpq	%r12, %rbx
    00000215: 	ja	.Ltmp2405 # Offset: 533
.Ltmp2404:
    00000217: 	movzbl	init_value(%rip), %eax
    0000021e: 	movdqa	-0x130(%rbp), %xmm3
    00000226: 	movl	$0x9c400, %edi
    0000022b: 	movdqa	-0x140(%rbp), %xmm4
    00000233: 	addq	$0x2a, %rax
    00000237: 	movaps	%xmm3, "_ZL7gLabels/1"+48(%rip)
    0000023e: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000245: 	movl	iterations(%rip), %eax
    0000024b: 	movaps	%xmm4, "_ZL7gLabels/1"+64(%rip)
    00000252: 	movl	%eax, -0x118(%rbp)
    00000258: 	callq	_Znam@PLT # Offset: 600
    0000025d: 	movl	$0x9c400, %edi
    00000262: 	movq	%rax, %r12
    00000265: 	callq	_Znam@PLT # Offset: 613
    0000026a: 	movl	$0x9c400, %edi
    0000026f: 	movq	%rax, %r13
    00000272: 	callq	_Znam@PLT # Offset: 626
    00000277: 	movl	$0x9c400, %edi
    0000027c: 	movq	%rax, -0x100(%rbp)
    00000283: 	callq	_Znam@PLT # Offset: 643
    00000288: 	movl	$0x271000, %edi
    0000028d: 	movq	%rax, -0x110(%rbp)
    00000294: 	callq	_Znam@PLT # Offset: 660
    00000299: 	movq	%rax, %r14
    0000029c: 	movq	%r12, %rdx
    0000029f: 	leaq	0x9c400(%r12), %rdi
    000002a7: 	movabsq	$0x5851f42d4c957f2d, %rsi
    000002b1: 	movabsq	$0x14057b7ef767814f, %rcx
    000002bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2406:
    000002c0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	addq	$0x8, %rdx
    000002cf: 	imulq	%rsi, %rax
    000002d3: 	addq	%rcx, %rax
    000002d6: 	movq	%rax, %r8
    000002d9: 	movq	%rax, %r9
    000002dc: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000002e3: 	shrq	$0x14, %r8
    000002e7: 	shlq	$0x17, %r9
    000002eb: 	xorq	%r9, %r8
    000002ee: 	xorq	%r8, %rax
    000002f1: 	sarq	$0x3, %rax
    000002f5: 	cvtsi2sd	%rax, %xmm0
    000002fa: 	movsd	%xmm0, -0x8(%rdx)
    000002ff: 	cmpq	%rdi, %rdx
    00000302: 	jne	.Ltmp2406 # Offset: 770
    00000304: 	leaq	0x9c400(%r13), %rdi
    0000030b: 	movq	%r13, %rdx
    0000030e: 	movabsq	$0x5851f42d4c957f2d, %rsi
    00000318: 	movabsq	$0x14057b7ef767814f, %rcx
    00000322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2407:
    00000328: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000032f: 	pxor	%xmm0, %xmm0
    00000333: 	addq	$0x8, %rdx
    00000337: 	imulq	%rsi, %rax
    0000033b: 	addq	%rcx, %rax
    0000033e: 	movq	%rax, %r8
    00000341: 	movq	%rax, %r9
    00000344: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000034b: 	shrq	$0x14, %r8
    0000034f: 	shlq	$0x17, %r9
    00000353: 	xorq	%r9, %r8
    00000356: 	xorq	%r8, %rax
    00000359: 	sarq	$0x3, %rax
    0000035d: 	cvtsi2sd	%rax, %xmm0
    00000362: 	movsd	%xmm0, -0x8(%rdx)
    00000367: 	cmpq	%rdx, %rdi
    0000036a: 	jne	.Ltmp2407 # Offset: 874
    0000036c: 	movq	-0x100(%rbp), %rdx
    00000373: 	movabsq	$0x5851f42d4c957f2d, %rsi
    0000037d: 	movabsq	$0x14057b7ef767814f, %rcx
    00000387: 	leaq	0x9c400(%rdx), %rdi
    0000038e: 	nop # Size: 2
.Ltmp2408:
    00000390: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000397: 	pxor	%xmm0, %xmm0
    0000039b: 	addq	$0x8, %rdx
    0000039f: 	imulq	%rsi, %rax
    000003a3: 	addq	%rcx, %rax
    000003a6: 	movq	%rax, %r8
    000003a9: 	movq	%rax, %r9
    000003ac: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000003b3: 	shrq	$0x14, %r8
    000003b7: 	shlq	$0x17, %r9
    000003bb: 	xorq	%r9, %r8
    000003be: 	xorq	%r8, %rax
    000003c1: 	sarq	$0x3, %rax
    000003c5: 	cvtsi2sd	%rax, %xmm0
    000003ca: 	movsd	%xmm0, -0x8(%rdx)
    000003cf: 	cmpq	%rdx, %rdi
    000003d2: 	jne	.Ltmp2408 # Offset: 978
    000003d4: 	movq	-0x110(%rbp), %rdx
    000003db: 	movabsq	$0x5851f42d4c957f2d, %rsi
    000003e5: 	movabsq	$0x14057b7ef767814f, %rcx
    000003ef: 	leaq	0x9c400(%rdx), %rdi
    000003f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2409:
    00000400: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000407: 	pxor	%xmm0, %xmm0
    0000040b: 	addq	$0x8, %rdx
    0000040f: 	imulq	%rsi, %rax
    00000413: 	addq	%rcx, %rax
    00000416: 	movq	%rax, %r8
    00000419: 	movq	%rax, %r9
    0000041c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000423: 	shrq	$0x14, %r8
    00000427: 	shlq	$0x17, %r9
    0000042b: 	xorq	%r9, %r8
    0000042e: 	xorq	%r8, %rax
    00000431: 	sarq	$0x3, %rax
    00000435: 	cvtsi2sd	%rax, %xmm0
    0000043a: 	movsd	%xmm0, -0x8(%rdx)
    0000043f: 	cmpq	%rdx, %rdi
    00000442: 	jne	.Ltmp2409 # Offset: 1090
    00000444: 	movl	$0x271000, %edx
    00000449: 	xorl	%esi, %esi
    0000044b: 	movq	%r14, %rdi
    0000044e: 	callq	memset@PLT # Offset: 1102
    00000453: 	movl	-0x118(%rbp), %eax
    00000459: 	leaq	-0xe0(%rbp), %rcx
    00000460: 	leaq	DATAat0x371d8(%rip), %rdx
    00000467: 	movq	%rcx, %rsi
    0000046a: 	movq	%rcx, -0x108(%rbp)
    00000471: 	movl	%eax, iterations(%rip)
    00000477: 	leaq	-0x60(%rbp), %rax
    0000047b: 	movq	%rax, %rdi
    0000047e: 	movq	%rax, -0xf8(%rbp)
    00000485: 	movq	%rax, %rbx
    00000488: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1160
    0000048d: 	movq	%rbx, %r8
    00000490: 	leaq	_Z23interleave2to2_version1IdEvPT_PKS0_S3_i(%rip), %rcx
    00000497: 	movq	%r13, %rdx
    0000049a: 	movq	%r12, %rsi
    0000049d: 	movq	%r14, %rdi
    000004a0: 	callq	"_Z19test_interleave2to2IdPFvPdPKdS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1184
    000004a5: 	movq	-0x60(%rbp), %rdi
    000004a9: 	leaq	-0x50(%rbp), %rbx
    000004ad: 	cmpq	%rbx, %rdi
    000004b0: 	je	.Ltmp2410 # Offset: 1200
    000004b2: 	movq	-0x50(%rbp), %rax
    000004b6: 	leaq	0x1(%rax), %rsi
    000004ba: 	callq	_ZdlPvm@PLT # Offset: 1210
.Ltmp2410:
    000004bf: 	movq	-0xf8(%rbp), %r15
    000004c6: 	movq	-0x108(%rbp), %rsi
    000004cd: 	leaq	DATAat0x371ea(%rip), %rdx
    000004d4: 	movq	%r15, %rdi
    000004d7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1239
    000004dc: 	movq	%r15, %r8
    000004df: 	leaq	_Z23interleave2to2_version2IdEvPT_PKS0_S3_i(%rip), %rcx
    000004e6: 	movq	%r13, %rdx
    000004e9: 	movq	%r12, %rsi
    000004ec: 	movq	%r14, %rdi
    000004ef: 	callq	"_Z19test_interleave2to2IdPFvPdPKdS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1263
    000004f4: 	movq	-0x60(%rbp), %rdi
    000004f8: 	cmpq	%rbx, %rdi
    000004fb: 	je	.Ltmp2411 # Offset: 1275
    000004fd: 	movq	-0x50(%rbp), %rax
    00000501: 	leaq	0x1(%rax), %rsi
    00000505: 	callq	_ZdlPvm@PLT # Offset: 1285
.Ltmp2411:
    0000050a: 	movq	-0xe0(%rbp), %rax
    00000511: 	movq	-0xd8(%rbp), %r15
    00000518: 	movq	%rbx, -0x60(%rbp)
    0000051c: 	movq	%rax, %rcx
    0000051f: 	movq	%rax, -0x130(%rbp)
    00000526: 	addq	%r15, %rcx
    00000529: 	je	.Ltmp2412 # Offset: 1321
    0000052b: 	testq	%rax, %rax
    0000052e: 	je	.Ltmp2413 # Offset: 1326
.Ltmp2412:
    00000534: 	movq	%r15, -0xe8(%rbp)
    0000053b: 	cmpq	$0xf, %r15
    0000053f: 	ja	.Ltmp2414 # Offset: 1343
    00000545: 	cmpq	$0x1, %r15
    00000549: 	jne	.Ltmp2415 # Offset: 1353
    0000054f: 	movq	-0x130(%rbp), %rax
    00000556: 	movzbl	(%rax), %eax
    00000559: 	movb	%al, -0x50(%rbp)
    0000055c: 	movq	%rbx, %rax
.Ltmp2493:
    0000055f: 	movq	%r15, -0x58(%rbp)
    00000563: 	movb	$0x0, (%rax,%r15)
    00000568: 	movabsq	$0x3fffffffffffffff, %rax
    00000572: 	subq	-0x58(%rbp), %rax
    00000576: 	cmpq	$0x10, %rax
    0000057a: 	jbe	.Ltmp2416 # Offset: 1402
    00000580: 	movq	-0xf8(%rbp), %rdi
    00000587: 	movl	$0x11, %edx
    0000058c: 	leaq	DATAat0x371fc(%rip), %rsi
    00000593: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1427
    00000598: 	movq	-0xf8(%rbp), %r8
    0000059f: 	movq	%r13, %rdx
    000005a2: 	movq	%r12, %rsi
    000005a5: 	movq	%r14, %rdi
    000005a8: 	leaq	_Z23interleave2to2_version3IdEvPT_PKS0_S3_i(%rip), %rcx
    000005af: 	callq	"_Z19test_interleave2to2IdPFvPdPKdS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1455
    000005b4: 	movq	-0x60(%rbp), %rdi
    000005b8: 	cmpq	%rbx, %rdi
    000005bb: 	je	.Ltmp2417 # Offset: 1467
    000005bd: 	movq	-0x50(%rbp), %rax
    000005c1: 	leaq	0x1(%rax), %rsi
    000005c5: 	callq	_ZdlPvm@PLT # Offset: 1477
.Ltmp2417:
    000005ca: 	movq	-0xe0(%rbp), %rax
    000005d1: 	movq	-0xd8(%rbp), %r15
    000005d8: 	movq	%rbx, -0x60(%rbp)
    000005dc: 	movq	%rax, %rcx
    000005df: 	movq	%rax, -0x130(%rbp)
    000005e6: 	addq	%r15, %rcx
    000005e9: 	je	.Ltmp2418 # Offset: 1513
    000005eb: 	testq	%rax, %rax
    000005ee: 	je	.Ltmp2419 # Offset: 1518
.Ltmp2418:
    000005f4: 	movq	%r15, -0xe8(%rbp)
    000005fb: 	cmpq	$0xf, %r15
    000005ff: 	ja	.Ltmp2420 # Offset: 1535
    00000605: 	cmpq	$0x1, %r15
    00000609: 	jne	.Ltmp2421 # Offset: 1545
    0000060f: 	movq	-0x130(%rbp), %rax
    00000616: 	movzbl	(%rax), %eax
    00000619: 	movb	%al, -0x50(%rbp)
    0000061c: 	movq	%rbx, %rax
.Ltmp2511:
    0000061f: 	movq	%r15, -0x58(%rbp)
    00000623: 	movb	$0x0, (%rax,%r15)
    00000628: 	movabsq	$0x3fffffffffffffff, %rax
    00000632: 	subq	-0x58(%rbp), %rax
    00000636: 	cmpq	$0x10, %rax
    0000063a: 	jbe	.Ltmp2422 # Offset: 1594
    00000640: 	movq	-0xf8(%rbp), %rdi
    00000647: 	movl	$0x11, %edx
    0000064c: 	leaq	DATAat0x3720e(%rip), %rsi
    00000653: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1619
    00000658: 	movq	-0xf8(%rbp), %r8
    0000065f: 	movq	%r13, %rdx
    00000662: 	movq	%r12, %rsi
    00000665: 	movq	%r14, %rdi
    00000668: 	leaq	_Z23interleave2to2_version4IdEvPT_PKS0_S3_i(%rip), %rcx
    0000066f: 	callq	"_Z19test_interleave2to2IdPFvPdPKdS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1647
    00000674: 	movq	-0x60(%rbp), %rdi
    00000678: 	cmpq	%rbx, %rdi
    0000067b: 	je	.Ltmp2423 # Offset: 1659
    0000067d: 	movq	-0x50(%rbp), %rax
    00000681: 	leaq	0x1(%rax), %rsi
    00000685: 	callq	_ZdlPvm@PLT # Offset: 1669
.Ltmp2423:
    0000068a: 	movq	-0xf8(%rbp), %r15
    00000691: 	movq	-0x108(%rbp), %rsi
    00000698: 	leaq	DATAat0x37220(%rip), %rdx
    0000069f: 	movq	%r15, %rdi
    000006a2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1698
    000006a7: 	movq	%r15, %r8
    000006aa: 	leaq	_Z23interleave2to2_version5IdEvPT_PKS0_S3_i(%rip), %rcx
    000006b1: 	movq	%r13, %rdx
    000006b4: 	movq	%r12, %rsi
    000006b7: 	movq	%r14, %rdi
    000006ba: 	callq	"_Z19test_interleave2to2IdPFvPdPKdS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1722
    000006bf: 	movq	-0x60(%rbp), %rdi
    000006c3: 	cmpq	%rbx, %rdi
    000006c6: 	je	.Ltmp2424 # Offset: 1734
    000006c8: 	movq	-0x50(%rbp), %rax
    000006cc: 	leaq	0x1(%rax), %rsi
    000006d0: 	callq	_ZdlPvm@PLT # Offset: 1744
.Ltmp2424:
    000006d5: 	movq	-0xe0(%rbp), %rax
    000006dc: 	movq	-0xd8(%rbp), %r15
    000006e3: 	movq	%rbx, -0x60(%rbp)
    000006e7: 	movq	%rax, %rcx
    000006ea: 	movq	%rax, -0x130(%rbp)
    000006f1: 	addq	%r15, %rcx
    000006f4: 	je	.Ltmp2425 # Offset: 1780
    000006f6: 	testq	%rax, %rax
    000006f9: 	je	.Ltmp2426 # Offset: 1785
.Ltmp2425:
    000006ff: 	movq	%r15, -0xe8(%rbp)
    00000706: 	cmpq	$0xf, %r15
    0000070a: 	ja	.Ltmp2427 # Offset: 1802
    00000710: 	cmpq	$0x1, %r15
    00000714: 	jne	.Ltmp2428 # Offset: 1812
    0000071a: 	movq	-0x130(%rbp), %rax
    00000721: 	movzbl	(%rax), %eax
    00000724: 	movb	%al, -0x50(%rbp)
    00000727: 	movq	%rbx, %rax
.Ltmp2509:
    0000072a: 	movq	%r15, -0x58(%rbp)
    0000072e: 	movb	$0x0, (%rax,%r15)
    00000733: 	movabsq	$0x3fffffffffffffff, %rax
    0000073d: 	subq	-0x58(%rbp), %rax
    00000741: 	cmpq	$0x10, %rax
    00000745: 	jbe	.Ltmp2429 # Offset: 1861
    0000074b: 	movq	-0xf8(%rbp), %rdi
    00000752: 	movl	$0x11, %edx
    00000757: 	leaq	DATAat0x37232(%rip), %rsi
    0000075e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1886
    00000763: 	movq	-0xf8(%rbp), %r8
    0000076a: 	movq	%r13, %rdx
    0000076d: 	movq	%r12, %rsi
    00000770: 	movq	%r14, %rdi
    00000773: 	leaq	_Z23interleave2to2_version6IdEvPT_PKS0_S3_i(%rip), %rcx
    0000077a: 	callq	"_Z19test_interleave2to2IdPFvPdPKdS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1914
    0000077f: 	movq	-0x60(%rbp), %rdi
    00000783: 	cmpq	%rbx, %rdi
    00000786: 	je	.Ltmp2430 # Offset: 1926
    00000788: 	movq	-0x50(%rbp), %rax
    0000078c: 	leaq	0x1(%rax), %rsi
    00000790: 	callq	_ZdlPvm@PLT # Offset: 1936
.Ltmp2430:
    00000795: 	movq	-0xf8(%rbp), %r15
    0000079c: 	movq	-0x108(%rbp), %rsi
    000007a3: 	leaq	DATAat0x37244(%rip), %rdx
    000007aa: 	movq	%r15, %rdi
    000007ad: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1965
    000007b2: 	movq	%r15, %r8
    000007b5: 	leaq	_Z23interleave2to2_version7IdEvPT_PKS0_S3_i(%rip), %rcx
    000007bc: 	movq	%r13, %rdx
    000007bf: 	movq	%r12, %rsi
    000007c2: 	movq	%r14, %rdi
    000007c5: 	callq	"_Z19test_interleave2to2IdPFvPdPKdS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1989
    000007ca: 	movq	-0x60(%rbp), %rdi
    000007ce: 	cmpq	%rbx, %rdi
    000007d1: 	je	.Ltmp2431 # Offset: 2001
    000007d3: 	movq	-0x50(%rbp), %rax
    000007d7: 	leaq	0x1(%rax), %rsi
    000007db: 	callq	_ZdlPvm@PLT # Offset: 2011
.Ltmp2431:
    000007e0: 	movq	-0xf8(%rbp), %r15
    000007e7: 	movq	-0x108(%rbp), %rsi
    000007ee: 	leaq	DATAat0x37256(%rip), %rdx
    000007f5: 	movq	%r15, %rdi
    000007f8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2040
    000007fd: 	movq	%r15, %r8
    00000800: 	leaq	_Z23interleave2to2_version8IdEvPT_PKS0_S3_i(%rip), %rcx
    00000807: 	movq	%r13, %rdx
    0000080a: 	movq	%r12, %rsi
    0000080d: 	movq	%r14, %rdi
    00000810: 	callq	"_Z19test_interleave2to2IdPFvPdPKdS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2064
    00000815: 	movq	-0x60(%rbp), %rdi
    00000819: 	cmpq	%rbx, %rdi
    0000081c: 	je	.Ltmp2432 # Offset: 2076
    0000081e: 	movq	-0x50(%rbp), %rax
    00000822: 	leaq	0x1(%rax), %rsi
    00000826: 	callq	_ZdlPvm@PLT # Offset: 2086
.Ltmp2432:
    0000082b: 	movq	-0x108(%rbp), %r15
    00000832: 	leaq	-0xc0(%rbp), %rdi
    00000839: 	leaq	DATAat0x37268(%rip), %rdx
    00000840: 	movq	%r15, %rsi
    00000843: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2115
    00000848: 	movl	iterations(%rip), %edx
    0000084e: 	xorl	%r8d, %r8d
    00000851: 	xorl	%ecx, %ecx
    00000853: 	movl	$0x13880, %esi
    00000858: 	movq	-0xc0(%rbp), %rdi
    0000085f: 	callq	_Z9summarizePKciiii # Offset: 2143
    00000864: 	movl	-0x118(%rbp), %eax
    0000086a: 	movq	%r15, %rsi
    0000086d: 	movq	-0xf8(%rbp), %r15
    00000874: 	leal	(%rax,%rax), %edx
    00000877: 	movq	%r15, %rdi
    0000087a: 	movslq	%edx, %rax
    0000087d: 	sarl	$0x1f, %edx
    00000880: 	imulq	$0x55555556, %rax, %rax
    00000887: 	shrq	$0x20, %rax
    0000088b: 	subl	%edx, %eax
    0000088d: 	leaq	DATAat0x37278(%rip), %rdx
    00000894: 	movl	%eax, iterations(%rip)
    0000089a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2202
    0000089f: 	subq	$0x8, %rsp
    000008a3: 	movl	$0x13880, %r8d
    000008a9: 	movq	%r13, %rdx
    000008ac: 	movq	%r12, %rsi
    000008af: 	pushq	%r15
    000008b1: 	movq	-0x100(%rbp), %rcx
    000008b8: 	leaq	_Z23interleave3to3_version1IdEvPT_PKS0_S3_S3_i(%rip), %r9
    000008bf: 	movq	%r14, %rdi
    000008c2: 	callq	_Z19test_interleave3to3IdPFvPdPKdS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2242
    000008c7: 	movq	-0x60(%rbp), %rdi
    000008cb: 	popq	%rcx
    000008cc: 	popq	%rsi
    000008cd: 	cmpq	%rbx, %rdi
    000008d0: 	je	.Ltmp2433 # Offset: 2256
    000008d2: 	movq	-0x50(%rbp), %rax
    000008d6: 	leaq	0x1(%rax), %rsi
    000008da: 	callq	_ZdlPvm@PLT # Offset: 2266
.Ltmp2433:
    000008df: 	movq	-0xf8(%rbp), %r15
    000008e6: 	movq	-0x108(%rbp), %rsi
    000008ed: 	leaq	DATAat0x3728a(%rip), %rdx
    000008f4: 	movq	%r15, %rdi
    000008f7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2295
    000008fc: 	subq	$0x8, %rsp
    00000900: 	movl	$0x13880, %r8d
    00000906: 	movq	%r13, %rdx
    00000909: 	movq	%r12, %rsi
    0000090c: 	pushq	%r15
    0000090e: 	movq	-0x100(%rbp), %rcx
    00000915: 	leaq	_Z23interleave3to3_version2IdEvPT_PKS0_S3_S3_i(%rip), %r9
    0000091c: 	movq	%r14, %rdi
    0000091f: 	callq	_Z19test_interleave3to3IdPFvPdPKdS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2335
    00000924: 	movq	-0x60(%rbp), %rdi
    00000928: 	popq	%rax
    00000929: 	popq	%rdx
    0000092a: 	cmpq	%rbx, %rdi
    0000092d: 	je	.Ltmp2434 # Offset: 2349
    0000092f: 	movq	-0x50(%rbp), %rax
    00000933: 	leaq	0x1(%rax), %rsi
    00000937: 	callq	_ZdlPvm@PLT # Offset: 2359
.Ltmp2434:
    0000093c: 	movq	-0xf8(%rbp), %r15
    00000943: 	movq	-0x108(%rbp), %rsi
    0000094a: 	leaq	DATAat0x3729c(%rip), %rdx
    00000951: 	movq	%r15, %rdi
    00000954: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2388
    00000959: 	subq	$0x8, %rsp
    0000095d: 	movl	$0x13880, %r8d
    00000963: 	movq	%r13, %rdx
    00000966: 	movq	%r12, %rsi
    00000969: 	pushq	%r15
    0000096b: 	movq	-0x100(%rbp), %rcx
    00000972: 	leaq	_Z23interleave3to3_version3IdEvPT_PKS0_S3_S3_i(%rip), %r9
    00000979: 	movq	%r14, %rdi
    0000097c: 	callq	_Z19test_interleave3to3IdPFvPdPKdS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2428
    00000981: 	movq	-0x60(%rbp), %rdi
    00000985: 	popq	%r11
    00000987: 	popq	%r15
    00000989: 	cmpq	%rbx, %rdi
    0000098c: 	je	.Ltmp2435 # Offset: 2444
    0000098e: 	movq	-0x50(%rbp), %rax
    00000992: 	leaq	0x1(%rax), %rsi
    00000996: 	callq	_ZdlPvm@PLT # Offset: 2454
.Ltmp2435:
    0000099b: 	movq	-0xe0(%rbp), %rax
    000009a2: 	movq	-0xd8(%rbp), %r15
    000009a9: 	movq	%rbx, -0x60(%rbp)
    000009ad: 	movq	%rax, %rcx
    000009b0: 	movq	%rax, -0x130(%rbp)
    000009b7: 	addq	%r15, %rcx
    000009ba: 	je	.Ltmp2436 # Offset: 2490
    000009bc: 	testq	%rax, %rax
    000009bf: 	je	.Ltmp2437 # Offset: 2495
.Ltmp2436:
    000009c5: 	movq	%r15, -0xe8(%rbp)
    000009cc: 	cmpq	$0xf, %r15
    000009d0: 	ja	.Ltmp2438 # Offset: 2512
    000009d6: 	cmpq	$0x1, %r15
    000009da: 	jne	.Ltmp2439 # Offset: 2522
    000009e0: 	movq	-0x130(%rbp), %rax
    000009e7: 	movzbl	(%rax), %eax
    000009ea: 	movb	%al, -0x50(%rbp)
    000009ed: 	movq	%rbx, %rax
.Ltmp2505:
    000009f0: 	movq	%r15, -0x58(%rbp)
    000009f4: 	movb	$0x0, (%rax,%r15)
    000009f9: 	movabsq	$0x3fffffffffffffff, %rax
    00000a03: 	subq	-0x58(%rbp), %rax
    00000a07: 	cmpq	$0x10, %rax
    00000a0b: 	jbe	.Ltmp2440 # Offset: 2571
    00000a11: 	movq	-0xf8(%rbp), %rdi
    00000a18: 	movl	$0x11, %edx
    00000a1d: 	leaq	DATAat0x372ae(%rip), %rsi
    00000a24: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2596
    00000a29: 	subq	$0x8, %rsp
    00000a2d: 	pushq	-0xf8(%rbp)
    00000a33: 	movq	%r13, %rdx
    00000a36: 	movq	%r12, %rsi
    00000a39: 	movq	-0x100(%rbp), %rcx
    00000a40: 	leaq	_Z23interleave3to3_version4IdEvPT_PKS0_S3_S3_i(%rip), %r9
    00000a47: 	movl	$0x13880, %r8d
    00000a4d: 	movq	%r14, %rdi
    00000a50: 	callq	_Z19test_interleave3to3IdPFvPdPKdS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2640
    00000a55: 	movq	-0x60(%rbp), %rdi
    00000a59: 	popq	%r9
    00000a5b: 	popq	%r10
    00000a5d: 	cmpq	%rbx, %rdi
    00000a60: 	je	.Ltmp2441 # Offset: 2656
    00000a62: 	movq	-0x50(%rbp), %rax
    00000a66: 	leaq	0x1(%rax), %rsi
    00000a6a: 	callq	_ZdlPvm@PLT # Offset: 2666
.Ltmp2441:
    00000a6f: 	movq	-0xf8(%rbp), %r15
    00000a76: 	movq	-0x108(%rbp), %rsi
    00000a7d: 	leaq	DATAat0x372c0(%rip), %rdx
    00000a84: 	movq	%r15, %rdi
    00000a87: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2695
    00000a8c: 	subq	$0x8, %rsp
    00000a90: 	movl	$0x13880, %r8d
    00000a96: 	movq	%r13, %rdx
    00000a99: 	movq	%r12, %rsi
    00000a9c: 	pushq	%r15
    00000a9e: 	movq	-0x100(%rbp), %rcx
    00000aa5: 	leaq	_Z23interleave3to3_version5IdEvPT_PKS0_S3_S3_i(%rip), %r9
    00000aac: 	movq	%r14, %rdi
    00000aaf: 	callq	_Z19test_interleave3to3IdPFvPdPKdS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2735
    00000ab4: 	popq	%rdi
    00000ab5: 	movq	-0x60(%rbp), %rdi
    00000ab9: 	popq	%r8
    00000abb: 	cmpq	%rbx, %rdi
    00000abe: 	je	.Ltmp2442 # Offset: 2750
    00000ac0: 	movq	-0x50(%rbp), %rax
    00000ac4: 	leaq	0x1(%rax), %rsi
    00000ac8: 	callq	_ZdlPvm@PLT # Offset: 2760
.Ltmp2442:
    00000acd: 	movq	-0x108(%rbp), %r15
    00000ad4: 	leaq	-0xa0(%rbp), %rdi
    00000adb: 	leaq	DATAat0x372d2(%rip), %rdx
    00000ae2: 	movq	%r15, %rsi
    00000ae5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2789
    00000aea: 	movl	iterations(%rip), %edx
    00000af0: 	xorl	%r8d, %r8d
    00000af3: 	xorl	%ecx, %ecx
    00000af5: 	movl	$0x13880, %esi
    00000afa: 	movq	-0xa0(%rbp), %rdi
    00000b01: 	callq	_Z9summarizePKciiii # Offset: 2817
    00000b06: 	movl	-0x118(%rbp), %ecx
    00000b0c: 	movq	%r15, %rsi
    00000b0f: 	movq	-0xf8(%rbp), %r15
    00000b16: 	leaq	DATAat0x372e2(%rip), %rdx
    00000b1d: 	movl	%ecx, %eax
    00000b1f: 	movq	%r15, %rdi
    00000b22: 	shrl	$0x1f, %eax
    00000b25: 	addl	%ecx, %eax
    00000b27: 	sarl	%eax
    00000b29: 	movl	%eax, -0x140(%rbp)
    00000b2f: 	movl	%eax, iterations(%rip)
    00000b35: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2869
    00000b3a: 	leaq	_Z23interleave3to4_version1IdEvPT_S0_PKS0_S3_S3_i(%rip), %rax
    00000b41: 	pushq	%r15
    00000b43: 	movq	%r13, %rdx
    00000b46: 	movq	%r12, %rsi
    00000b49: 	pushq	%rax
    00000b4a: 	movq	-0x110(%rbp), %r8
    00000b51: 	movl	$0x13880, %r9d
    00000b57: 	movq	%r14, %rdi
    00000b5a: 	movq	-0x100(%rbp), %rcx
    00000b61: 	callq	_Z19test_interleave3to4IdPFvPddPKdS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2913
    00000b66: 	movq	-0x60(%rbp), %rdi
    00000b6a: 	popq	%rcx
    00000b6b: 	popq	%rsi
    00000b6c: 	cmpq	%rbx, %rdi
    00000b6f: 	je	.Ltmp2443 # Offset: 2927
    00000b71: 	movq	-0x50(%rbp), %rax
    00000b75: 	leaq	0x1(%rax), %rsi
    00000b79: 	callq	_ZdlPvm@PLT # Offset: 2937
.Ltmp2443:
    00000b7e: 	movq	-0xf8(%rbp), %r15
    00000b85: 	movq	-0x108(%rbp), %rsi
    00000b8c: 	leaq	DATAat0x372f4(%rip), %rdx
    00000b93: 	movq	%r15, %rdi
    00000b96: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2966
    00000b9b: 	leaq	_Z23interleave3to4_version2IdEvPT_S0_PKS0_S3_S3_i(%rip), %rax
    00000ba2: 	pushq	%r15
    00000ba4: 	movq	%r13, %rdx
    00000ba7: 	movq	%r12, %rsi
    00000baa: 	pushq	%rax
    00000bab: 	movq	-0x110(%rbp), %r8
    00000bb2: 	movl	$0x13880, %r9d
    00000bb8: 	movq	%r14, %rdi
    00000bbb: 	movq	-0x100(%rbp), %rcx
    00000bc2: 	callq	_Z19test_interleave3to4IdPFvPddPKdS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3010
    00000bc7: 	movq	-0x60(%rbp), %rdi
    00000bcb: 	popq	%rax
    00000bcc: 	popq	%rdx
    00000bcd: 	cmpq	%rbx, %rdi
    00000bd0: 	je	.Ltmp2444 # Offset: 3024
    00000bd2: 	movq	-0x50(%rbp), %rax
    00000bd6: 	leaq	0x1(%rax), %rsi
    00000bda: 	callq	_ZdlPvm@PLT # Offset: 3034
.Ltmp2444:
    00000bdf: 	movq	-0xe0(%rbp), %rax
    00000be6: 	movq	-0xd8(%rbp), %r15
    00000bed: 	movq	%rbx, -0x60(%rbp)
    00000bf1: 	movq	%rax, %rcx
    00000bf4: 	movq	%rax, -0x130(%rbp)
    00000bfb: 	addq	%r15, %rcx
    00000bfe: 	je	.Ltmp2445 # Offset: 3070
    00000c00: 	testq	%rax, %rax
    00000c03: 	je	.Ltmp2446 # Offset: 3075
.Ltmp2445:
    00000c09: 	movq	%r15, -0xe8(%rbp)
    00000c10: 	cmpq	$0xf, %r15
    00000c14: 	ja	.Ltmp2447 # Offset: 3092
    00000c1a: 	cmpq	$0x1, %r15
    00000c1e: 	jne	.Ltmp2448 # Offset: 3102
    00000c24: 	movq	-0x130(%rbp), %rax
    00000c2b: 	movzbl	(%rax), %eax
    00000c2e: 	movb	%al, -0x50(%rbp)
    00000c31: 	movq	%rbx, %rax
.Ltmp2503:
    00000c34: 	movq	%r15, -0x58(%rbp)
    00000c38: 	movb	$0x0, (%rax,%r15)
    00000c3d: 	movabsq	$0x3fffffffffffffff, %rax
    00000c47: 	subq	-0x58(%rbp), %rax
    00000c4b: 	cmpq	$0x10, %rax
    00000c4f: 	jbe	.Ltmp2449 # Offset: 3151
    00000c55: 	movq	-0xf8(%rbp), %rdi
    00000c5c: 	movl	$0x11, %edx
    00000c61: 	leaq	DATAat0x37306(%rip), %rsi
    00000c68: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3176
    00000c6d: 	leaq	_Z23interleave3to4_version3IdEvPT_S0_PKS0_S3_S3_i(%rip), %rax
    00000c74: 	pushq	-0xf8(%rbp)
    00000c7a: 	movq	%r13, %rdx
    00000c7d: 	movq	-0x110(%rbp), %r8
    00000c84: 	pushq	%rax
    00000c85: 	movl	$0x13880, %r9d
    00000c8b: 	movq	%r12, %rsi
    00000c8e: 	movq	%r14, %rdi
    00000c91: 	movq	-0x100(%rbp), %rcx
    00000c98: 	callq	_Z19test_interleave3to4IdPFvPddPKdS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3224
    00000c9d: 	movq	-0x60(%rbp), %rdi
    00000ca1: 	popq	%r11
    00000ca3: 	popq	%r15
    00000ca5: 	cmpq	%rbx, %rdi
    00000ca8: 	je	.Ltmp2450 # Offset: 3240
    00000caa: 	movq	-0x50(%rbp), %rax
    00000cae: 	leaq	0x1(%rax), %rsi
    00000cb2: 	callq	_ZdlPvm@PLT # Offset: 3250
.Ltmp2450:
    00000cb7: 	movq	-0xf8(%rbp), %r15
    00000cbe: 	movq	-0x108(%rbp), %rsi
    00000cc5: 	leaq	DATAat0x37318(%rip), %rdx
    00000ccc: 	movq	%r15, %rdi
    00000ccf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3279
    00000cd4: 	leaq	_Z23interleave3to4_version4IdEvPT_S0_PKS0_S3_S3_i(%rip), %rax
    00000cdb: 	pushq	%r15
    00000cdd: 	movq	%r13, %rdx
    00000ce0: 	movq	%r12, %rsi
    00000ce3: 	pushq	%rax
    00000ce4: 	movq	-0x110(%rbp), %r8
    00000ceb: 	movl	$0x13880, %r9d
    00000cf1: 	movq	%r14, %rdi
    00000cf4: 	movq	-0x100(%rbp), %rcx
    00000cfb: 	callq	_Z19test_interleave3to4IdPFvPddPKdS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3323
    00000d00: 	movq	-0x60(%rbp), %rdi
    00000d04: 	popq	%r9
    00000d06: 	popq	%r10
    00000d08: 	cmpq	%rbx, %rdi
    00000d0b: 	je	.Ltmp2451 # Offset: 3339
    00000d0d: 	movq	-0x50(%rbp), %rax
    00000d11: 	leaq	0x1(%rax), %rsi
    00000d15: 	callq	_ZdlPvm@PLT # Offset: 3349
.Ltmp2451:
    00000d1a: 	movq	-0xf8(%rbp), %r15
    00000d21: 	movq	-0x108(%rbp), %rsi
    00000d28: 	leaq	DATAat0x3732a(%rip), %rdx
    00000d2f: 	movq	%r15, %rdi
    00000d32: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3378
    00000d37: 	leaq	_Z23interleave3to4_version5IdEvPT_S0_PKS0_S3_S3_i(%rip), %rax
    00000d3e: 	pushq	%r15
    00000d40: 	movq	%r13, %rdx
    00000d43: 	movq	%r12, %rsi
    00000d46: 	pushq	%rax
    00000d47: 	movq	-0x110(%rbp), %r8
    00000d4e: 	movl	$0x13880, %r9d
    00000d54: 	movq	%r14, %rdi
    00000d57: 	movq	-0x100(%rbp), %rcx
    00000d5e: 	callq	_Z19test_interleave3to4IdPFvPddPKdS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3422
    00000d63: 	popq	%rdi
    00000d64: 	movq	-0x60(%rbp), %rdi
    00000d68: 	popq	%r8
    00000d6a: 	cmpq	%rbx, %rdi
    00000d6d: 	je	.Ltmp2452 # Offset: 3437
    00000d6f: 	movq	-0x50(%rbp), %rax
    00000d73: 	leaq	0x1(%rax), %rsi
    00000d77: 	callq	_ZdlPvm@PLT # Offset: 3447
.Ltmp2452:
    00000d7c: 	movq	-0xe0(%rbp), %rax
    00000d83: 	movq	-0xd8(%rbp), %r15
    00000d8a: 	movq	%rbx, -0x60(%rbp)
    00000d8e: 	movq	%rax, %rcx
    00000d91: 	movq	%rax, -0x130(%rbp)
    00000d98: 	addq	%r15, %rcx
    00000d9b: 	je	.Ltmp2453 # Offset: 3483
    00000d9d: 	testq	%rax, %rax
    00000da0: 	je	.Ltmp2454 # Offset: 3488
.Ltmp2453:
    00000da6: 	movq	%r15, -0xe8(%rbp)
    00000dad: 	cmpq	$0xf, %r15
    00000db1: 	ja	.Ltmp2455 # Offset: 3505
    00000db7: 	cmpq	$0x1, %r15
    00000dbb: 	jne	.Ltmp2456 # Offset: 3515
    00000dc1: 	movq	-0x130(%rbp), %rax
    00000dc8: 	movzbl	(%rax), %eax
    00000dcb: 	movb	%al, -0x50(%rbp)
    00000dce: 	movq	%rbx, %rax
.Ltmp2501:
    00000dd1: 	movq	%r15, -0x58(%rbp)
    00000dd5: 	movb	$0x0, (%rax,%r15)
    00000dda: 	movabsq	$0x3fffffffffffffff, %rax
    00000de4: 	subq	-0x58(%rbp), %rax
    00000de8: 	cmpq	$0x10, %rax
    00000dec: 	jbe	.Ltmp2457 # Offset: 3564
    00000df2: 	movq	-0xf8(%rbp), %rdi
    00000df9: 	movl	$0x11, %edx
    00000dfe: 	leaq	DATAat0x3733c(%rip), %rsi
    00000e05: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3589
    00000e0a: 	leaq	_Z23interleave3to4_version6IdEvPT_S0_PKS0_S3_S3_i(%rip), %rax
    00000e11: 	pushq	-0xf8(%rbp)
    00000e17: 	movq	%r13, %rdx
    00000e1a: 	movq	-0x110(%rbp), %r8
    00000e21: 	pushq	%rax
    00000e22: 	movl	$0x13880, %r9d
    00000e28: 	movq	%r12, %rsi
    00000e2b: 	movq	%r14, %rdi
    00000e2e: 	movq	-0x100(%rbp), %rcx
    00000e35: 	callq	_Z19test_interleave3to4IdPFvPddPKdS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3637
    00000e3a: 	movq	-0x60(%rbp), %rdi
    00000e3e: 	popq	%rcx
    00000e3f: 	popq	%rsi
    00000e40: 	cmpq	%rbx, %rdi
    00000e43: 	je	.Ltmp2458 # Offset: 3651
    00000e45: 	movq	-0x50(%rbp), %rax
    00000e49: 	leaq	0x1(%rax), %rsi
    00000e4d: 	callq	_ZdlPvm@PLT # Offset: 3661
.Ltmp2458:
    00000e52: 	leaq	-0x70(%rbp), %rax
    00000e56: 	movq	-0xd8(%rbp), %r15
    00000e5d: 	movq	%rax, -0x130(%rbp)
    00000e64: 	movq	%rax, -0x80(%rbp)
    00000e68: 	movq	-0xe0(%rbp), %rax
    00000e6f: 	movq	%rax, %rcx
    00000e72: 	movq	%rax, -0x148(%rbp)
    00000e79: 	addq	%r15, %rcx
    00000e7c: 	je	.Ltmp2459 # Offset: 3708
    00000e7e: 	testq	%rax, %rax
    00000e81: 	je	.Ltmp2460 # Offset: 3713
.Ltmp2459:
    00000e87: 	movq	%r15, -0xe8(%rbp)
    00000e8e: 	cmpq	$0xf, %r15
    00000e92: 	ja	.Ltmp2461 # Offset: 3730
    00000e98: 	cmpq	$0x1, %r15
    00000e9c: 	jne	.Ltmp2462 # Offset: 3740
    00000ea2: 	movq	-0x148(%rbp), %rax
    00000ea9: 	movzbl	(%rax), %eax
    00000eac: 	movb	%al, -0x70(%rbp)
    00000eaf: 	movq	-0x130(%rbp), %rax
.Ltmp2499:
    00000eb6: 	movq	%r15, -0x78(%rbp)
    00000eba: 	movb	$0x0, (%rax,%r15)
    00000ebf: 	movabsq	$0x3fffffffffffffff, %rax
    00000ec9: 	subq	-0x78(%rbp), %rax
    00000ecd: 	cmpq	$0xe, %rax
    00000ed1: 	jbe	.Ltmp2463 # Offset: 3793
    00000ed7: 	leaq	-0x80(%rbp), %rdi
    00000edb: 	movl	$0xf, %edx
    00000ee0: 	leaq	DATAat0x3734e(%rip), %rsi
    00000ee7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3815
    00000eec: 	movl	iterations(%rip), %edx
    00000ef2: 	movq	-0x80(%rbp), %rdi
    00000ef6: 	xorl	%r8d, %r8d
    00000ef9: 	xorl	%ecx, %ecx
    00000efb: 	movl	$0x13880, %esi
    00000f00: 	callq	_Z9summarizePKciiii # Offset: 3840
    00000f05: 	movl	-0x140(%rbp), %eax
    00000f0b: 	movq	-0xd8(%rbp), %r15
    00000f12: 	movq	%rbx, -0x60(%rbp)
    00000f16: 	movl	%eax, iterations(%rip)
    00000f1c: 	movq	-0xe0(%rbp), %rax
    00000f23: 	movq	%rax, %rcx
    00000f26: 	movq	%rax, -0x140(%rbp)
    00000f2d: 	addq	%r15, %rcx
    00000f30: 	je	.Ltmp2464 # Offset: 3888
    00000f32: 	testq	%rax, %rax
    00000f35: 	je	.Ltmp2465 # Offset: 3893
.Ltmp2464:
    00000f3b: 	movq	%r15, -0xe8(%rbp)
    00000f42: 	cmpq	$0xf, %r15
    00000f46: 	ja	.Ltmp2466 # Offset: 3910
    00000f4c: 	cmpq	$0x1, %r15
    00000f50: 	jne	.Ltmp2467 # Offset: 3920
    00000f56: 	movq	-0x140(%rbp), %rax
    00000f5d: 	movzbl	(%rax), %eax
    00000f60: 	movb	%al, -0x50(%rbp)
    00000f63: 	movq	%rbx, %rax
.Ltmp2497:
    00000f66: 	movq	%r15, -0x58(%rbp)
    00000f6a: 	movb	$0x0, (%rax,%r15)
    00000f6f: 	movabsq	$0x3fffffffffffffff, %rax
    00000f79: 	subq	-0x58(%rbp), %rax
    00000f7d: 	cmpq	$0x10, %rax
    00000f81: 	jbe	.Ltmp2468 # Offset: 3969
    00000f87: 	movq	-0xf8(%rbp), %rdi
    00000f8e: 	movl	$0x11, %edx
    00000f93: 	leaq	DATAat0x3735e(%rip), %rsi
    00000f9a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3994
    00000f9f: 	leaq	_Z23interleave4to4_version1IdEvPT_PKS0_S3_S3_S3_i(%rip), %rax
    00000fa6: 	pushq	-0xf8(%rbp)
    00000fac: 	movq	%r13, %rdx
    00000faf: 	movq	-0x110(%rbp), %r8
    00000fb6: 	pushq	%rax
    00000fb7: 	movl	$0x13880, %r9d
    00000fbd: 	movq	%r12, %rsi
    00000fc0: 	movq	%r14, %rdi
    00000fc3: 	movq	-0x100(%rbp), %rcx
    00000fca: 	callq	_Z19test_interleave4to4IdPFvPdPKdS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4042
    00000fcf: 	movq	-0x60(%rbp), %rdi
    00000fd3: 	popq	%rax
    00000fd4: 	popq	%rdx
    00000fd5: 	cmpq	%rbx, %rdi
    00000fd8: 	je	.Ltmp2469 # Offset: 4056
    00000fda: 	movq	-0x50(%rbp), %rax
    00000fde: 	leaq	0x1(%rax), %rsi
    00000fe2: 	callq	_ZdlPvm@PLT # Offset: 4066
.Ltmp2469:
    00000fe7: 	movq	-0xf8(%rbp), %r15
    00000fee: 	movq	-0x108(%rbp), %rsi
    00000ff5: 	leaq	DATAat0x37370(%rip), %rdx
    00000ffc: 	movq	%r15, %rdi
    00000fff: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4095
    00001004: 	leaq	_Z23interleave4to4_version2IdEvPT_PKS0_S3_S3_S3_i(%rip), %rax
    0000100b: 	pushq	%r15
    0000100d: 	movq	%r13, %rdx
    00001010: 	movq	%r12, %rsi
    00001013: 	pushq	%rax
    00001014: 	movq	-0x110(%rbp), %r8
    0000101b: 	movl	$0x13880, %r9d
    00001021: 	movq	%r14, %rdi
    00001024: 	movq	-0x100(%rbp), %rcx
    0000102b: 	callq	_Z19test_interleave4to4IdPFvPdPKdS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4139
    00001030: 	movq	-0x60(%rbp), %rdi
    00001034: 	popq	%r11
    00001036: 	popq	%r15
    00001038: 	cmpq	%rbx, %rdi
    0000103b: 	je	.Ltmp2470 # Offset: 4155
    0000103d: 	movq	-0x50(%rbp), %rax
    00001041: 	leaq	0x1(%rax), %rsi
    00001045: 	callq	_ZdlPvm@PLT # Offset: 4165
.Ltmp2470:
    0000104a: 	movq	-0xe0(%rbp), %rax
    00001051: 	movq	-0xd8(%rbp), %r15
    00001058: 	movq	%rbx, -0x60(%rbp)
    0000105c: 	movq	%rax, %rcx
    0000105f: 	movq	%rax, -0x140(%rbp)
    00001066: 	addq	%r15, %rcx
    00001069: 	je	.Ltmp2471 # Offset: 4201
    0000106b: 	testq	%rax, %rax
    0000106e: 	je	.Ltmp2472 # Offset: 4206
.Ltmp2471:
    00001074: 	movq	%r15, -0xe8(%rbp)
    0000107b: 	cmpq	$0xf, %r15
    0000107f: 	ja	.Ltmp2473 # Offset: 4223
    00001085: 	cmpq	$0x1, %r15
    00001089: 	jne	.Ltmp2474 # Offset: 4233
    0000108f: 	movq	-0x140(%rbp), %rax
    00001096: 	movzbl	(%rax), %eax
    00001099: 	movb	%al, -0x50(%rbp)
    0000109c: 	movq	%rbx, %rax
.Ltmp2495:
    0000109f: 	movq	%r15, -0x58(%rbp)
    000010a3: 	movb	$0x0, (%rax,%r15)
    000010a8: 	movabsq	$0x3fffffffffffffff, %rax
    000010b2: 	subq	-0x58(%rbp), %rax
    000010b6: 	cmpq	$0x10, %rax
    000010ba: 	jbe	.Ltmp2475 # Offset: 4282
    000010c0: 	movq	-0xf8(%rbp), %rdi
    000010c7: 	movl	$0x11, %edx
    000010cc: 	leaq	DATAat0x37382(%rip), %rsi
    000010d3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4307
    000010d8: 	leaq	_Z23interleave4to4_version3IdEvPT_PKS0_S3_S3_S3_i(%rip), %rax
    000010df: 	pushq	-0xf8(%rbp)
    000010e5: 	movq	%r13, %rdx
    000010e8: 	movq	-0x110(%rbp), %r8
    000010ef: 	pushq	%rax
    000010f0: 	movl	$0x13880, %r9d
    000010f6: 	movq	%r12, %rsi
    000010f9: 	movq	%r14, %rdi
    000010fc: 	movq	-0x100(%rbp), %rcx
    00001103: 	callq	_Z19test_interleave4to4IdPFvPdPKdS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4355
    00001108: 	movq	-0x60(%rbp), %rdi
    0000110c: 	popq	%r9
    0000110e: 	popq	%r10
    00001110: 	cmpq	%rbx, %rdi
    00001113: 	je	.Ltmp2476 # Offset: 4371
    00001115: 	movq	-0x50(%rbp), %rax
    00001119: 	leaq	0x1(%rax), %rsi
    0000111d: 	callq	_ZdlPvm@PLT # Offset: 4381
.Ltmp2476:
    00001122: 	movq	-0xf8(%rbp), %r15
    00001129: 	movq	-0x108(%rbp), %rsi
    00001130: 	leaq	DATAat0x37394(%rip), %rdx
    00001137: 	movq	%r15, %rdi
    0000113a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4410
    0000113f: 	leaq	_Z23interleave4to4_version4IdEvPT_PKS0_S3_S3_S3_i(%rip), %rax
    00001146: 	pushq	%r15
    00001148: 	movq	%r13, %rdx
    0000114b: 	movq	%r12, %rsi
    0000114e: 	pushq	%rax
    0000114f: 	movq	-0x110(%rbp), %r8
    00001156: 	movl	$0x13880, %r9d
    0000115c: 	movq	%r14, %rdi
    0000115f: 	movq	-0x100(%rbp), %rcx
    00001166: 	callq	_Z19test_interleave4to4IdPFvPdPKdS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4454
    0000116b: 	popq	%rdi
    0000116c: 	movq	-0x60(%rbp), %rdi
    00001170: 	popq	%r8
    00001172: 	cmpq	%rbx, %rdi
    00001175: 	je	.Ltmp2477 # Offset: 4469
    00001177: 	movq	-0x50(%rbp), %rax
    0000117b: 	leaq	0x1(%rax), %rsi
    0000117f: 	callq	_ZdlPvm@PLT # Offset: 4479
.Ltmp2477:
    00001184: 	movq	-0xf8(%rbp), %r15
    0000118b: 	movq	-0x108(%rbp), %rsi
    00001192: 	leaq	DATAat0x373a6(%rip), %rdx
    00001199: 	movq	%r15, %rdi
    0000119c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4508
    000011a1: 	leaq	_Z23interleave4to4_version5IdEvPT_PKS0_S3_S3_S3_i(%rip), %rax
    000011a8: 	pushq	%r15
    000011aa: 	movq	%r13, %rdx
    000011ad: 	movq	%r12, %rsi
    000011b0: 	pushq	%rax
    000011b1: 	movq	-0x110(%rbp), %r8
    000011b8: 	movl	$0x13880, %r9d
    000011be: 	movq	%r14, %rdi
    000011c1: 	movq	-0x100(%rbp), %rcx
    000011c8: 	callq	_Z19test_interleave4to4IdPFvPdPKdS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4552
    000011cd: 	movq	-0x60(%rbp), %rdi
    000011d1: 	popq	%rcx
    000011d2: 	popq	%rsi
    000011d3: 	cmpq	%rbx, %rdi
    000011d6: 	je	.Ltmp2478 # Offset: 4566
    000011d8: 	movq	-0x50(%rbp), %rax
    000011dc: 	leaq	0x1(%rax), %rsi
    000011e0: 	callq	_ZdlPvm@PLT # Offset: 4576
.Ltmp2478:
    000011e5: 	movq	-0xf8(%rbp), %r15
    000011ec: 	movq	-0x108(%rbp), %rsi
    000011f3: 	leaq	DATAat0x373b8(%rip), %rdx
    000011fa: 	movq	%r15, %rdi
    000011fd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4605
    00001202: 	leaq	_Z23interleave4to4_version6IdEvPT_PKS0_S3_S3_S3_i(%rip), %rax
    00001209: 	pushq	%r15
    0000120b: 	movq	%r13, %rdx
    0000120e: 	movq	%r12, %rsi
    00001211: 	pushq	%rax
    00001212: 	movq	-0x110(%rbp), %r8
    00001219: 	movl	$0x13880, %r9d
    0000121f: 	movq	%r14, %rdi
    00001222: 	movq	-0x100(%rbp), %rcx
    00001229: 	callq	_Z19test_interleave4to4IdPFvPdPKdS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4649
    0000122e: 	movq	-0x60(%rbp), %rdi
    00001232: 	popq	%rax
    00001233: 	popq	%rdx
    00001234: 	cmpq	%rbx, %rdi
    00001237: 	je	.Ltmp2479 # Offset: 4663
    00001239: 	movq	-0x50(%rbp), %rax
    0000123d: 	leaq	0x1(%rax), %rsi
    00001241: 	callq	_ZdlPvm@PLT # Offset: 4673
.Ltmp2479:
    00001246: 	movq	-0xe0(%rbp), %rax
    0000124d: 	movq	-0xd8(%rbp), %r15
    00001254: 	movq	%rbx, -0x60(%rbp)
    00001258: 	movq	%rax, %rcx
    0000125b: 	movq	%rax, -0x108(%rbp)
    00001262: 	addq	%r15, %rcx
    00001265: 	je	.Ltmp2480 # Offset: 4709
    00001267: 	testq	%rax, %rax
    0000126a: 	je	.Ltmp2481 # Offset: 4714
.Ltmp2480:
    00001270: 	movq	%r15, -0xe8(%rbp)
    00001277: 	cmpq	$0xf, %r15
    0000127b: 	ja	.Ltmp2482 # Offset: 4731
    00001281: 	cmpq	$0x1, %r15
    00001285: 	jne	.Ltmp2483 # Offset: 4741
    0000128b: 	movq	-0x108(%rbp), %rax
    00001292: 	movzbl	(%rax), %eax
    00001295: 	movb	%al, -0x50(%rbp)
    00001298: 	movq	%rbx, %rax
.Ltmp2507:
    0000129b: 	movq	%r15, -0x58(%rbp)
    0000129f: 	movb	$0x0, (%rax,%r15)
    000012a4: 	movabsq	$0x3fffffffffffffff, %rax
    000012ae: 	subq	-0x58(%rbp), %rax
    000012b2: 	cmpq	$0xe, %rax
    000012b6: 	jbe	.Ltmp2484 # Offset: 4790
    000012bc: 	movq	-0xf8(%rbp), %rdi
    000012c3: 	movl	$0xf, %edx
    000012c8: 	leaq	DATAat0x373ca(%rip), %rsi
    000012cf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4815
    000012d4: 	movl	iterations(%rip), %edx
    000012da: 	movq	-0x60(%rbp), %rdi
    000012de: 	xorl	%r8d, %r8d
    000012e1: 	xorl	%ecx, %ecx
    000012e3: 	movl	$0x13880, %esi
    000012e8: 	callq	_Z9summarizePKciiii # Offset: 4840
    000012ed: 	movl	-0x118(%rbp), %eax
    000012f3: 	movq	-0x60(%rbp), %rdi
    000012f7: 	movl	%eax, iterations(%rip)
    000012fd: 	cmpq	%rbx, %rdi
    00001300: 	je	.Ltmp2485 # Offset: 4864
    00001302: 	movq	-0x50(%rbp), %rax
    00001306: 	leaq	0x1(%rax), %rsi
    0000130a: 	callq	_ZdlPvm@PLT # Offset: 4874
.Ltmp2485:
    0000130f: 	movq	-0x80(%rbp), %rdi
    00001313: 	cmpq	-0x130(%rbp), %rdi
    0000131a: 	je	.Ltmp2486 # Offset: 4890
    0000131c: 	movq	-0x70(%rbp), %rax
    00001320: 	leaq	0x1(%rax), %rsi
    00001324: 	callq	_ZdlPvm@PLT # Offset: 4900
.Ltmp2486:
    00001329: 	movq	-0xa0(%rbp), %rdi
    00001330: 	leaq	-0x90(%rbp), %rax
    00001337: 	cmpq	%rax, %rdi
    0000133a: 	je	.Ltmp2487 # Offset: 4922
    0000133c: 	movq	-0x90(%rbp), %rax
    00001343: 	leaq	0x1(%rax), %rsi
    00001347: 	callq	_ZdlPvm@PLT # Offset: 4935
.Ltmp2487:
    0000134c: 	movq	-0xc0(%rbp), %rdi
    00001353: 	leaq	-0xb0(%rbp), %rax
    0000135a: 	cmpq	%rax, %rdi
    0000135d: 	je	.Ltmp2488 # Offset: 4957
    0000135f: 	movq	-0xb0(%rbp), %rax
    00001366: 	leaq	0x1(%rax), %rsi
    0000136a: 	callq	_ZdlPvm@PLT # Offset: 4970
.Ltmp2488:
    0000136f: 	movl	$0x8, %esi
    00001374: 	movq	%r14, %rdi
    00001377: 	callq	_ZdlPvm@PLT # Offset: 4983
    0000137c: 	movq	-0x110(%rbp), %rdi
    00001383: 	movl	$0x8, %esi
    00001388: 	callq	_ZdlPvm@PLT # Offset: 5000
    0000138d: 	movq	-0x100(%rbp), %rdi
    00001394: 	movl	$0x8, %esi
    00001399: 	callq	_ZdlPvm@PLT # Offset: 5017
    0000139e: 	movl	$0x8, %esi
    000013a3: 	movq	%r13, %rdi
    000013a6: 	callq	_ZdlPvm@PLT # Offset: 5030
    000013ab: 	movq	%r12, %rdi
    000013ae: 	movl	$0x8, %esi
    000013b3: 	callq	_ZdlPvm@PLT # Offset: 5043
    000013b8: 	movq	-0xe0(%rbp), %rdi
    000013bf: 	cmpq	-0x120(%rbp), %rdi
    000013c6: 	je	.Ltmp2489 # Offset: 5062
    000013c8: 	movq	-0xd0(%rbp), %rax
    000013cf: 	leaq	0x1(%rax), %rsi
    000013d3: 	callq	_ZdlPvm@PLT # Offset: 5075
.Ltmp2489:
    000013d8: 	movq	-0x38(%rbp), %rax
    000013dc: 	subq	%fs:0x28, %rax
    000013e5: 	jne	.Ltmp2490 # Offset: 5093
    000013eb: 	leaq	-0x28(%rbp), %rsp
    000013ef: 	popq	%rbx
    000013f0: 	popq	%r12
    000013f2: 	popq	%r13
    000013f4: 	popq	%r14
    000013f6: 	popq	%r15
    000013f8: 	popq	%rbp
    000013f9: 	retq # Offset: 5113
    000013fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2393:
    00001400: 	addq	$0x20, -0xf8(%rbp)
    00001408: 	movq	-0xf8(%rbp), %rax
    0000140f: 	cmpq	%rbx, %rax
    00001412: 	jne	.Ltmp2394 # Offset: 5138
    00001418: 	addq	$0x8, %r13
    0000141c: 	cmpq	%r13, %r15
    0000141f: 	ja	.Ltmp2395 # Offset: 5151
    00001425: 	jmp	.Ltmp2491 # Offset: 5157
.Ltmp2415:
    0000142a: 	testq	%r15, %r15
    0000142d: 	jne	.Ltmp2492 # Offset: 5165
    00001433: 	movq	%rbx, %rax
    00001436: 	jmp	.Ltmp2493 # Offset: 5174
.Ltmp2474:
    0000143b: 	testq	%r15, %r15
    0000143e: 	jne	.Ltmp2494 # Offset: 5182
    00001444: 	movq	%rbx, %rax
    00001447: 	jmp	.Ltmp2495 # Offset: 5191
.Ltmp2467:
    0000144c: 	testq	%r15, %r15
    0000144f: 	jne	.Ltmp2496 # Offset: 5199
    00001455: 	movq	%rbx, %rax
    00001458: 	jmp	.Ltmp2497 # Offset: 5208
.Ltmp2462:
    0000145d: 	testq	%r15, %r15
    00001460: 	jne	.Ltmp2498 # Offset: 5216
    00001466: 	movq	-0x130(%rbp), %rax
    0000146d: 	jmp	.Ltmp2499 # Offset: 5229
.Ltmp2456:
    00001472: 	testq	%r15, %r15
    00001475: 	jne	.Ltmp2500 # Offset: 5237
    0000147b: 	movq	%rbx, %rax
    0000147e: 	jmp	.Ltmp2501 # Offset: 5246
.Ltmp2448:
    00001483: 	testq	%r15, %r15
    00001486: 	jne	.Ltmp2502 # Offset: 5254
    0000148c: 	movq	%rbx, %rax
    0000148f: 	jmp	.Ltmp2503 # Offset: 5263
.Ltmp2439:
    00001494: 	testq	%r15, %r15
    00001497: 	jne	.Ltmp2504 # Offset: 5271
    0000149d: 	movq	%rbx, %rax
    000014a0: 	jmp	.Ltmp2505 # Offset: 5280
.Ltmp2483:
    000014a5: 	testq	%r15, %r15
    000014a8: 	jne	.Ltmp2506 # Offset: 5288
    000014ae: 	movq	%rbx, %rax
    000014b1: 	jmp	.Ltmp2507 # Offset: 5297
.Ltmp2428:
    000014b6: 	testq	%r15, %r15
    000014b9: 	jne	.Ltmp2508 # Offset: 5305
    000014bf: 	movq	%rbx, %rax
    000014c2: 	jmp	.Ltmp2509 # Offset: 5314
.Ltmp2421:
    000014c7: 	testq	%r15, %r15
    000014ca: 	jne	.Ltmp2510 # Offset: 5322
    000014d0: 	movq	%rbx, %rax
    000014d3: 	jmp	.Ltmp2511 # Offset: 5331
.Ltmp2473:
    000014d8: 	movq	-0xf8(%rbp), %rdi
    000014df: 	leaq	-0xe8(%rbp), %rsi
    000014e6: 	xorl	%edx, %edx
    000014e8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5352
    000014ed: 	movq	%rax, -0x60(%rbp)
    000014f1: 	movq	%rax, %rdi
    000014f4: 	movq	-0xe8(%rbp), %rax
    000014fb: 	movq	%rax, -0x50(%rbp)
.Ltmp2516:
    000014ff: 	movq	-0x140(%rbp), %rsi
    00001506: 	movq	%r15, %rdx
    00001509: 	callq	memcpy@PLT # Offset: 5385
    0000150e: 	movq	-0xe8(%rbp), %r15
    00001515: 	movq	-0x60(%rbp), %rax
    00001519: 	jmp	.Ltmp2495 # Offset: 5401
.Ltmp2466:
    0000151e: 	movq	-0xf8(%rbp), %rdi
    00001525: 	leaq	-0xe8(%rbp), %rsi
    0000152c: 	xorl	%edx, %edx
    0000152e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5422
    00001533: 	movq	%rax, -0x60(%rbp)
    00001537: 	movq	%rax, %rdi
    0000153a: 	movq	-0xe8(%rbp), %rax
    00001541: 	movq	%rax, -0x50(%rbp)
.Ltmp2517:
    00001545: 	movq	-0x140(%rbp), %rsi
    0000154c: 	movq	%r15, %rdx
    0000154f: 	callq	memcpy@PLT # Offset: 5455
    00001554: 	movq	-0xe8(%rbp), %r15
    0000155b: 	movq	-0x60(%rbp), %rax
    0000155f: 	jmp	.Ltmp2497 # Offset: 5471
.Ltmp2461:
    00001564: 	leaq	-0xe8(%rbp), %rsi
    0000156b: 	leaq	-0x80(%rbp), %rdi
    0000156f: 	xorl	%edx, %edx
    00001571: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5489
    00001576: 	movq	%rax, -0x80(%rbp)
    0000157a: 	movq	%rax, %rdi
    0000157d: 	movq	-0xe8(%rbp), %rax
    00001584: 	movq	%rax, -0x70(%rbp)
.Ltmp2518:
    00001588: 	movq	-0x148(%rbp), %rsi
    0000158f: 	movq	%r15, %rdx
    00001592: 	callq	memcpy@PLT # Offset: 5522
    00001597: 	movq	-0xe8(%rbp), %r15
    0000159e: 	movq	-0x80(%rbp), %rax
    000015a2: 	jmp	.Ltmp2499 # Offset: 5538
.Ltmp2427:
    000015a7: 	movq	-0xf8(%rbp), %rdi
    000015ae: 	leaq	-0xe8(%rbp), %rsi
    000015b5: 	xorl	%edx, %edx
    000015b7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5559
    000015bc: 	movq	%rax, -0x60(%rbp)
    000015c0: 	movq	%rax, %rdi
    000015c3: 	movq	-0xe8(%rbp), %rax
    000015ca: 	movq	%rax, -0x50(%rbp)
.Ltmp2523:
    000015ce: 	movq	-0x130(%rbp), %rsi
    000015d5: 	movq	%r15, %rdx
    000015d8: 	callq	memcpy@PLT # Offset: 5592
    000015dd: 	movq	-0xe8(%rbp), %r15
    000015e4: 	movq	-0x60(%rbp), %rax
    000015e8: 	jmp	.Ltmp2509 # Offset: 5608
.Ltmp2420:
    000015ed: 	movq	-0xf8(%rbp), %rdi
    000015f4: 	leaq	-0xe8(%rbp), %rsi
    000015fb: 	xorl	%edx, %edx
    000015fd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5629
    00001602: 	movq	%rax, -0x60(%rbp)
    00001606: 	movq	%rax, %rdi
    00001609: 	movq	-0xe8(%rbp), %rax
    00001610: 	movq	%rax, -0x50(%rbp)
.Ltmp2524:
    00001614: 	movq	-0x130(%rbp), %rsi
    0000161b: 	movq	%r15, %rdx
    0000161e: 	callq	memcpy@PLT # Offset: 5662
    00001623: 	movq	-0xe8(%rbp), %r15
    0000162a: 	movq	-0x60(%rbp), %rax
    0000162e: 	jmp	.Ltmp2511 # Offset: 5678
.Ltmp2455:
    00001633: 	movq	-0xf8(%rbp), %rdi
    0000163a: 	leaq	-0xe8(%rbp), %rsi
    00001641: 	xorl	%edx, %edx
    00001643: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5699
    00001648: 	movq	%rax, -0x60(%rbp)
    0000164c: 	movq	%rax, %rdi
    0000164f: 	movq	-0xe8(%rbp), %rax
    00001656: 	movq	%rax, -0x50(%rbp)
.Ltmp2519:
    0000165a: 	movq	-0x130(%rbp), %rsi
    00001661: 	movq	%r15, %rdx
    00001664: 	callq	memcpy@PLT # Offset: 5732
    00001669: 	movq	-0xe8(%rbp), %r15
    00001670: 	movq	-0x60(%rbp), %rax
    00001674: 	jmp	.Ltmp2501 # Offset: 5748
.Ltmp2447:
    00001679: 	movq	-0xf8(%rbp), %rdi
    00001680: 	leaq	-0xe8(%rbp), %rsi
    00001687: 	xorl	%edx, %edx
    00001689: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5769
    0000168e: 	movq	%rax, -0x60(%rbp)
    00001692: 	movq	%rax, %rdi
    00001695: 	movq	-0xe8(%rbp), %rax
    0000169c: 	movq	%rax, -0x50(%rbp)
.Ltmp2520:
    000016a0: 	movq	-0x130(%rbp), %rsi
    000016a7: 	movq	%r15, %rdx
    000016aa: 	callq	memcpy@PLT # Offset: 5802
    000016af: 	movq	-0xe8(%rbp), %r15
    000016b6: 	movq	-0x60(%rbp), %rax
    000016ba: 	jmp	.Ltmp2503 # Offset: 5818
.Ltmp2414:
    000016bf: 	movq	-0xf8(%rbp), %rdi
    000016c6: 	leaq	-0xe8(%rbp), %rsi
    000016cd: 	xorl	%edx, %edx
    000016cf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5839
    000016d4: 	movq	%rax, -0x60(%rbp)
    000016d8: 	movq	%rax, %rdi
    000016db: 	movq	-0xe8(%rbp), %rax
    000016e2: 	movq	%rax, -0x50(%rbp)
.Ltmp2515:
    000016e6: 	movq	-0x130(%rbp), %rsi
    000016ed: 	movq	%r15, %rdx
    000016f0: 	callq	memcpy@PLT # Offset: 5872
    000016f5: 	movq	-0xe8(%rbp), %r15
    000016fc: 	movq	-0x60(%rbp), %rax
    00001700: 	jmp	.Ltmp2493 # Offset: 5888
.Ltmp2438:
    00001705: 	movq	-0xf8(%rbp), %rdi
    0000170c: 	leaq	-0xe8(%rbp), %rsi
    00001713: 	xorl	%edx, %edx
    00001715: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5909
    0000171a: 	movq	%rax, -0x60(%rbp)
    0000171e: 	movq	%rax, %rdi
    00001721: 	movq	-0xe8(%rbp), %rax
    00001728: 	movq	%rax, -0x50(%rbp)
.Ltmp2521:
    0000172c: 	movq	-0x130(%rbp), %rsi
    00001733: 	movq	%r15, %rdx
    00001736: 	callq	memcpy@PLT # Offset: 5942
    0000173b: 	movq	-0xe8(%rbp), %r15
    00001742: 	movq	-0x60(%rbp), %rax
    00001746: 	jmp	.Ltmp2505 # Offset: 5958
.Ltmp2482:
    0000174b: 	movq	-0xf8(%rbp), %rdi
    00001752: 	leaq	-0xe8(%rbp), %rsi
    00001759: 	xorl	%edx, %edx
    0000175b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5979
    00001760: 	movq	%rax, -0x60(%rbp)
    00001764: 	movq	%rax, %rdi
    00001767: 	movq	-0xe8(%rbp), %rax
    0000176e: 	movq	%rax, -0x50(%rbp)
.Ltmp2522:
    00001772: 	movq	-0x108(%rbp), %rsi
    00001779: 	movq	%r15, %rdx
    0000177c: 	callq	memcpy@PLT # Offset: 6012
    00001781: 	movq	-0xe8(%rbp), %r15
    00001788: 	movq	-0x60(%rbp), %rax
    0000178c: 	jmp	.Ltmp2507 # Offset: 6028
.Ltmp2396:
    00001791: 	movq	-0x108(%rbp), %rcx
    00001798: 	movq	%rsi, %rbx
    0000179b: 	cmpq	%rcx, %rsi
    0000179e: 	je	.Ltmp2401 # Offset: 6046
.Ltmp2514:
    000017a4: 	movq	(%rbx), %rdi
    000017a7: 	leaq	0x10(%rbx), %rax
    000017ab: 	cmpq	%rax, %rdi
    000017ae: 	je	.Ltmp2512 # Offset: 6062
.Ltmp2513:
    000017b0: 	movq	0x10(%rbx), %rax
    000017b4: 	addq	$0x20, %rbx
    000017b8: 	leaq	0x1(%rax), %rsi
    000017bc: 	movq	%rax, -0xf8(%rbp)
    000017c3: 	callq	_ZdlPvm@PLT # Offset: 6083
    000017c8: 	cmpq	%rbx, -0x108(%rbp)
    000017cf: 	je	.Ltmp2401 # Offset: 6095
    000017d5: 	movq	(%rbx), %rdi
    000017d8: 	leaq	0x10(%rbx), %rax
    000017dc: 	cmpq	%rax, %rdi
    000017df: 	jne	.Ltmp2513 # Offset: 6111
.Ltmp2512:
    000017e1: 	movq	%rbx, %rax
    000017e4: 	addq	$0x20, %rax
    000017e8: 	movq	%rax, %rbx
    000017eb: 	cmpq	%rax, -0x108(%rbp)
    000017f2: 	jne	.Ltmp2514 # Offset: 6130
    000017f4: 	jmp	.Ltmp2401 # Offset: 6132
.Ltmp2416:
    000017f9: 	leaq	DATAat0x37182(%rip), %rdi
    00001800: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6144
.Ltmp2419:
    00001805: 	leaq	DATAat0x37158(%rip), %rdi
    0000180c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6156
.Ltmp2422:
    00001811: 	leaq	DATAat0x37182(%rip), %rdi
    00001818: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6168
.Ltmp2426:
    0000181d: 	leaq	DATAat0x37158(%rip), %rdi
    00001824: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6180
.Ltmp2429:
    00001829: 	leaq	DATAat0x37182(%rip), %rdi
    00001830: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6192
.Ltmp2437:
    00001835: 	leaq	DATAat0x37158(%rip), %rdi
    0000183c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6204
.Ltmp2440:
    00001841: 	leaq	DATAat0x37182(%rip), %rdi
    00001848: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6216
.Ltmp2446:
    0000184d: 	leaq	DATAat0x37158(%rip), %rdi
    00001854: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6228
.Ltmp2449:
    00001859: 	leaq	DATAat0x37182(%rip), %rdi
    00001860: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6240
.Ltmp2454:
    00001865: 	leaq	DATAat0x37158(%rip), %rdi
    0000186c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6252
.Ltmp2457:
    00001871: 	leaq	DATAat0x37182(%rip), %rdi
    00001878: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6264
.Ltmp2460:
    0000187d: 	leaq	DATAat0x37158(%rip), %rdi
    00001884: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6276
.Ltmp2463:
    00001889: 	leaq	DATAat0x37182(%rip), %rdi
    00001890: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6288
.Ltmp2465:
    00001895: 	leaq	DATAat0x37158(%rip), %rdi
    0000189c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6300
.Ltmp2468:
    000018a1: 	leaq	DATAat0x37182(%rip), %rdi
    000018a8: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6312
.Ltmp2472:
    000018ad: 	leaq	DATAat0x37158(%rip), %rdi
    000018b4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6324
.Ltmp2475:
    000018b9: 	leaq	DATAat0x37182(%rip), %rdi
    000018c0: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6336
.Ltmp2481:
    000018c5: 	leaq	DATAat0x37158(%rip), %rdi
    000018cc: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6348
.Ltmp2484:
    000018d1: 	leaq	DATAat0x37182(%rip), %rdi
    000018d8: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6360
.Ltmp2490:
    000018dd: 	callq	__stack_chk_fail@PLT # Offset: 6365
.Ltmp2492:
    000018e2: 	movq	%rbx, %rdi
    000018e5: 	jmp	.Ltmp2515 # Offset: 6373
.Ltmp2494:
    000018ea: 	movq	%rbx, %rdi
    000018ed: 	jmp	.Ltmp2516 # Offset: 6381
.Ltmp2496:
    000018f2: 	movq	%rbx, %rdi
    000018f5: 	jmp	.Ltmp2517 # Offset: 6389
.Ltmp2498:
    000018fa: 	movq	-0x130(%rbp), %rdi
    00001901: 	jmp	.Ltmp2518 # Offset: 6401
.Ltmp2500:
    00001906: 	movq	%rbx, %rdi
    00001909: 	jmp	.Ltmp2519 # Offset: 6409
.Ltmp2502:
    0000190e: 	movq	%rbx, %rdi
    00001911: 	jmp	.Ltmp2520 # Offset: 6417
.Ltmp2504:
    00001916: 	movq	%rbx, %rdi
    00001919: 	jmp	.Ltmp2521 # Offset: 6425
.Ltmp2506:
    0000191e: 	movq	%rbx, %rdi
    00001921: 	jmp	.Ltmp2522 # Offset: 6433
.Ltmp2508:
    00001926: 	movq	%rbx, %rdi
    00001929: 	jmp	.Ltmp2523 # Offset: 6441
.Ltmp2510:
    0000192e: 	movq	%rbx, %rdi
    00001931: 	jmp	.Ltmp2524 # Offset: 6449
.Ltmp2413:
    00001936: 	leaq	DATAat0x37158(%rip), %rdi
    0000193d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6461
    00001942: 	endbr64
.Ltmp2526:
    00001946: 	movq	%rax, %r15
    00001949: 	jmp	.Ltmp2525 # Offset: 6473
    0000194e: 	endbr64
    00001952: 	jmp	.Ltmp2526 # Offset: 6482
    00001954: 	endbr64
.Ltmp2528:
    00001958: 	movq	%rax, %r15
    0000195b: 	jmp	.Ltmp2527 # Offset: 6491
    0000195d: 	endbr64
    00001961: 	jmp	.Ltmp2528 # Offset: 6497
    00001963: 	endbr64
    00001967: 	jmp	.Ltmp2526 # Offset: 6503
.Ltmp2527:
    00001969: 	movq	-0x60(%rbp), %rdi
    0000196d: 	cmpq	%rbx, %rdi
    00001970: 	je	.Ltmp2529 # Offset: 6512
    00001972: 	movq	-0x50(%rbp), %rax
    00001976: 	leaq	0x1(%rax), %rsi
    0000197a: 	callq	_ZdlPvm@PLT # Offset: 6522
.Ltmp2529:
    0000197f: 	movq	%r15, %rbx
.Ltmp2533:
    00001982: 	movl	$0x8, %esi
    00001987: 	movq	%r14, %rdi
    0000198a: 	callq	_ZdlPvm@PLT # Offset: 6538
.Ltmp2544:
    0000198f: 	movq	-0x110(%rbp), %rdi
    00001996: 	movl	$0x8, %esi
    0000199b: 	callq	_ZdlPvm@PLT # Offset: 6555
.Ltmp2545:
    000019a0: 	movq	-0x100(%rbp), %rdi
    000019a7: 	movl	$0x8, %esi
    000019ac: 	callq	_ZdlPvm@PLT # Offset: 6572
.Ltmp2543:
    000019b1: 	movl	$0x8, %esi
    000019b6: 	movq	%r13, %rdi
    000019b9: 	callq	_ZdlPvm@PLT # Offset: 6585
.Ltmp2542:
    000019be: 	movl	$0x8, %esi
    000019c3: 	movq	%r12, %rdi
    000019c6: 	callq	_ZdlPvm@PLT # Offset: 6598
.Ltmp2546:
    000019cb: 	movq	-0xe0(%rbp), %rdi
    000019d2: 	cmpq	-0x120(%rbp), %rdi
    000019d9: 	je	.Ltmp2530 # Offset: 6617
    000019db: 	movq	-0xd0(%rbp), %rax
    000019e2: 	leaq	0x1(%rax), %rsi
    000019e6: 	callq	_ZdlPvm@PLT # Offset: 6630
.Ltmp2530:
    000019eb: 	movq	%rbx, %rdi
    000019ee: 	callq	_Unwind_Resume@PLT # Offset: 6638
.Ltmp2525:
    000019f3: 	movq	-0x60(%rbp), %rdi
    000019f7: 	cmpq	%rbx, %rdi
    000019fa: 	je	.Ltmp2531 # Offset: 6650
    000019fc: 	movq	-0x50(%rbp), %rax
    00001a00: 	leaq	0x1(%rax), %rsi
    00001a04: 	callq	_ZdlPvm@PLT # Offset: 6660
.Ltmp2531:
    00001a09: 	movq	%r15, %rbx
.Ltmp2538:
    00001a0c: 	movq	-0xa0(%rbp), %rdi
    00001a13: 	leaq	-0x90(%rbp), %rax
    00001a1a: 	cmpq	%rax, %rdi
    00001a1d: 	je	.Ltmp2532 # Offset: 6685
    00001a1f: 	movq	-0x90(%rbp), %rax
    00001a26: 	leaq	0x1(%rax), %rsi
    00001a2a: 	callq	_ZdlPvm@PLT # Offset: 6698
.Ltmp2532:
    00001a2f: 	movq	-0xc0(%rbp), %rdi
    00001a36: 	leaq	-0xb0(%rbp), %rax
    00001a3d: 	cmpq	%rax, %rdi
    00001a40: 	je	.Ltmp2533 # Offset: 6720
    00001a46: 	movq	-0xb0(%rbp), %rax
    00001a4d: 	leaq	0x1(%rax), %rsi
    00001a51: 	callq	_ZdlPvm@PLT # Offset: 6737
    00001a56: 	jmp	.Ltmp2533 # Offset: 6742
    00001a5b: 	endbr64
    00001a5f: 	jmp	.Ltmp2526 # Offset: 6751
    00001a64: 	endbr64
.Ltmp2535:
    00001a68: 	movq	%rax, %r15
    00001a6b: 	jmp	.Ltmp2534 # Offset: 6763
    00001a6d: 	endbr64
    00001a71: 	jmp	.Ltmp2535 # Offset: 6769
    00001a73: 	endbr64
.Ltmp2539:
    00001a77: 	movq	%rax, %rbx
    00001a7a: 	jmp	.Ltmp2536 # Offset: 6778
.Ltmp2534:
    00001a7c: 	movq	-0x60(%rbp), %rdi
    00001a80: 	cmpq	%rbx, %rdi
    00001a83: 	je	.Ltmp2537 # Offset: 6787
    00001a85: 	movq	-0x50(%rbp), %rax
    00001a89: 	leaq	0x1(%rax), %rsi
    00001a8d: 	callq	_ZdlPvm@PLT # Offset: 6797
.Ltmp2537:
    00001a92: 	movq	%r15, %rbx
.Ltmp2536:
    00001a95: 	movq	-0x80(%rbp), %rdi
    00001a99: 	cmpq	-0x130(%rbp), %rdi
    00001aa0: 	je	.Ltmp2538 # Offset: 6816
    00001aa6: 	movq	-0x70(%rbp), %rax
    00001aaa: 	leaq	0x1(%rax), %rsi
    00001aae: 	callq	_ZdlPvm@PLT # Offset: 6830
    00001ab3: 	jmp	.Ltmp2538 # Offset: 6835
    00001ab8: 	endbr64
    00001abc: 	jmp	.Ltmp2539 # Offset: 6844
    00001abe: 	endbr64
.Ltmp2541:
    00001ac2: 	movq	%rax, %r15
    00001ac5: 	jmp	.Ltmp2540 # Offset: 6853
    00001aca: 	endbr64
    00001ace: 	jmp	.Ltmp2541 # Offset: 6862
    00001ad0: 	endbr64
    00001ad4: 	movq	%rax, %rbx
    00001ad7: 	jmp	.Ltmp2538 # Offset: 6871
    00001adc: 	endbr64
    00001ae0: 	jmp	.Ltmp2526 # Offset: 6880
    00001ae5: 	endbr64
    00001ae9: 	movq	%rax, %rbx
    00001aec: 	jmp	.Ltmp2533 # Offset: 6892
    00001af1: 	endbr64
    00001af5: 	movq	%rax, %rbx
    00001af8: 	jmp	.Ltmp2542 # Offset: 6904
    00001afd: 	endbr64
    00001b01: 	movq	%rax, %rbx
    00001b04: 	jmp	.Ltmp2543 # Offset: 6916
    00001b09: 	endbr64
    00001b0d: 	movq	%rax, %rbx
    00001b10: 	jmp	.Ltmp2544 # Offset: 6928
    00001b15: 	endbr64
    00001b19: 	movq	%rax, %rbx
    00001b1c: 	jmp	.Ltmp2545 # Offset: 6940
    00001b21: 	endbr64
    00001b25: 	jmp	.Ltmp2528 # Offset: 6949
    00001b2a: 	endbr64
    00001b2e: 	movq	%rax, %rbx
    00001b31: 	jmp	.Ltmp2532 # Offset: 6961
    00001b36: 	endbr64
    00001b3a: 	jmp	.Ltmp2541 # Offset: 6970
    00001b3c: 	endbr64
    00001b40: 	jmp	.Ltmp2541 # Offset: 6976
    00001b42: 	endbr64
    00001b46: 	jmp	.Ltmp2528 # Offset: 6982
    00001b4b: 	endbr64
    00001b4f: 	jmp	.Ltmp2528 # Offset: 6991
    00001b54: 	endbr64
    00001b58: 	jmp	.Ltmp2528 # Offset: 7000
    00001b5d: 	endbr64
    00001b61: 	jmp	.Ltmp2541 # Offset: 7009
    00001b66: 	endbr64
    00001b6a: 	jmp	.Ltmp2528 # Offset: 7018
    00001b6f: 	endbr64
    00001b73: 	jmp	.Ltmp2528 # Offset: 7027
    00001b78: 	endbr64
    00001b7c: 	jmp	.Ltmp2528 # Offset: 7036
    00001b81: 	endbr64
    00001b85: 	jmp	.Ltmp2535 # Offset: 7045
    00001b8a: 	endbr64
    00001b8e: 	jmp	.Ltmp2535 # Offset: 7054
    00001b93: 	endbr64
    00001b97: 	jmp	.Ltmp2535 # Offset: 7063
    00001b9c: 	endbr64
    00001ba0: 	jmp	.Ltmp2535 # Offset: 7072
    00001ba5: 	endbr64
    00001ba9: 	jmp	.Ltmp2535 # Offset: 7081
    00001bae: 	endbr64
    00001bb2: 	movq	%rax, %rbx
    00001bb5: 	jmp	.Ltmp2546 # Offset: 7093
    00001bba: 	endbr64
    00001bbe: 	jmp	.Ltmp2528 # Offset: 7102
    00001bc3: 	endbr64
    00001bc7: 	movq	%rax, %rbx
    00001bca: 	jmp	.Ltmp2547 # Offset: 7114
    00001bcc: 	endbr64
    00001bd0: 	jmp	.Ltmp2526 # Offset: 7120
    00001bd5: 	endbr64
    00001bd9: 	jmp	.Ltmp2526 # Offset: 7129
    00001bde: 	endbr64
    00001be2: 	jmp	.Ltmp2526 # Offset: 7138
    00001be7: 	endbr64
    00001beb: 	jmp	.Ltmp2541 # Offset: 7147
.Ltmp2540:
    00001bf0: 	movq	-0x60(%rbp), %rdi
    00001bf4: 	cmpq	%rbx, %rdi
    00001bf7: 	je	.Ltmp2548 # Offset: 7159
    00001bf9: 	movq	-0x50(%rbp), %rax
    00001bfd: 	leaq	0x1(%rax), %rsi
    00001c01: 	callq	_ZdlPvm@PLT # Offset: 7169
.Ltmp2548:
    00001c06: 	movq	%r15, %rbx
    00001c09: 	jmp	.Ltmp2532 # Offset: 7177
    00001c0e: 	endbr64
    00001c12: 	jmp	.Ltmp2535 # Offset: 7186
    00001c17: 	endbr64
    00001c1b: 	jmp	.Ltmp2535 # Offset: 7195
    00001c20: 	endbr64
    00001c24: 	jmp	.Ltmp2535 # Offset: 7204
.Ltmp2547:
    00001c29: 	movq	-0x60(%rbp), %rdi
    00001c2d: 	leaq	-0x50(%rbp), %rax
    00001c31: 	cmpq	%rax, %rdi
    00001c34: 	je	.Ltmp2533 # Offset: 7220
    00001c3a: 	movq	-0x50(%rbp), %rax
    00001c3e: 	leaq	0x1(%rax), %rsi
    00001c42: 	callq	_ZdlPvm@PLT # Offset: 7234
    00001c47: 	jmp	.Ltmp2533 # Offset: 7239
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIdEvv"

Binary Function "_Z19test_interleave3to4IhPFvPhhPKhS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z19test_interleave3to4IhPFvPhhPKhS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z19test_interleave3to4IhPFvPhhPKhS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/interleave.cpp/1
  Number      : 244
  State       : disassembled
  Address     : 0x2ab30
  Size        : 0x2c7
  MaxSize     : 0x2d0
  Offset      : 0x2ab30
  Section     : .text
  Orc Section : .local.text._Z19test_interleave3to4IhPFvPhhPKhS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0243:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %r15
    00000005: 	pushq	%r14
    00000007: 	xorl	%r14d, %r14d
    0000000a: 	pushq	%r13
    0000000c: 	movq	%r8, %r13
    0000000f: 	pushq	%r12
    00000011: 	movq	%rcx, %r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rdx, %rbp
    00000018: 	movl	$0x4e200, %edx
    0000001d: 	pushq	%rbx
    0000001e: 	movq	%rsi, %rbx
    00000021: 	xorl	%esi, %esi
    00000023: 	subq	$0x38, %rsp
    00000027: 	movq	0x70(%rsp), %rax
    0000002c: 	movq	%r9, 0x8(%rsp)
    00000031: 	movq	%rax, 0x10(%rsp)
    00000036: 	movq	%fs:0x28, %rax
    0000003f: 	movq	%rax, 0x28(%rsp)
    00000044: 	xorl	%eax, %eax
    00000046: 	callq	memset@PLT # Offset: 70
    0000004b: 	movzbl	(%rbx), %esi
    0000004e: 	movl	$0x13880, %edx
    00000053: 	movq	%rbx, %rdi
    00000056: 	callq	memset@PLT # Offset: 86
    0000005b: 	callq	clock@PLT # Offset: 91
    00000060: 	movq	%rax, start_time(%rip)
    00000067: 	movl	iterations(%rip), %eax
    0000006d: 	testl	%eax, %eax
    0000006f: 	jle	.Ltmp2549 # Offset: 111
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp2550:
    00000078: 	movzbl	(%rbx), %esi
    0000007b: 	movq	0x8(%rsp), %rax
    00000080: 	movq	%r13, %r8
    00000083: 	movq	%r12, %rcx
    00000086: 	movl	$0x13880, %r9d
    0000008c: 	movq	%rbp, %rdx
    0000008f: 	movq	%r15, %rdi
    00000092: 	addl	$0x1, %r14d
    00000096: 	callq	*%rax # Offset: 150
    00000098: 	cmpl	iterations(%rip), %r14d
    0000009f: 	jl	.Ltmp2550 # Offset: 159
.Ltmp2549:
    000000a1: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000a8: 	movq	"_ZL7gLabels/1"+48(%rip), %rcx
    000000af: 	subq	$0x20, %rax
    000000b3: 	cmpq	%rax, %rcx
    000000b6: 	je	.Ltmp2551 # Offset: 182
    000000bc: 	movq	0x10(%rsp), %rax
    000000c1: 	leaq	0x10(%rcx), %rdi
    000000c5: 	movq	%rdi, (%rcx)
    000000c8: 	movq	(%rax), %r8
    000000cb: 	movq	0x8(%rax), %r14
    000000cf: 	movq	%r8, %rax
    000000d2: 	addq	%r14, %rax
    000000d5: 	je	.Ltmp2552 # Offset: 213
    000000d7: 	testq	%r8, %r8
    000000da: 	je	.Ltmp2553 # Offset: 218
.Ltmp2552:
    000000e0: 	movq	%r14, 0x20(%rsp)
    000000e5: 	cmpq	$0xf, %r14
    000000e9: 	ja	.Ltmp2554 # Offset: 233
    000000ef: 	cmpq	$0x1, %r14
    000000f3: 	jne	.Ltmp2555 # Offset: 243
    000000f9: 	movzbl	(%r8), %eax
    000000fd: 	movb	%al, 0x10(%rcx)
.Ltmp2560:
    00000100: 	movq	%r14, 0x8(%rcx)
    00000104: 	movb	$0x0, (%rdi,%r14)
    00000109: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000110: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000117: 	addq	$0x20, %rax
    0000011b: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000122: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000129: 	je	.Ltmp2556 # Offset: 297
.Ltmp2561:
    0000012f: 	movq	-0x20(%rax), %r14
    00000133: 	callq	clock@PLT # Offset: 307
    00000138: 	pxor	%xmm0, %xmm0
    0000013c: 	movq	%rax, end_time(%rip)
    00000143: 	movq	%r14, %rdi
    00000146: 	subq	start_time(%rip), %rax
    0000014d: 	cvtsi2sd	%rax, %xmm0
    00000152: 	divsd	DATAat0x37530(%rip), %xmm0
    0000015a: 	callq	_Z13record_resultdPKc # Offset: 346
    0000015f: 	xorl	%eax, %eax
.Ltmp2558:
    00000161: 	movzbl	(%rbx,%rax), %edx
    00000165: 	cmpb	%dl, (%r15,%rax,4)
    00000169: 	jne	.Ltmp2557 # Offset: 361
    0000016f: 	movzbl	(%rbp,%rax), %ecx
    00000174: 	cmpb	%cl, 0x1(%r15,%rax,4)
    00000179: 	jne	.Ltmp2557 # Offset: 377
    0000017f: 	movzbl	(%r12,%rax), %edi
    00000184: 	cmpb	%dil, 0x2(%r15,%rax,4)
    00000189: 	jne	.Ltmp2557 # Offset: 393
    0000018f: 	movzbl	(%r13,%rax), %edx
    00000195: 	cmpb	%dl, 0x3(%r15,%rax,4)
    0000019a: 	jne	.Ltmp2557 # Offset: 410
    000001a0: 	addq	$0x1, %rax
    000001a4: 	cmpq	$0x13880, %rax
    000001aa: 	jne	.Ltmp2558 # Offset: 426
    000001ac: 	movq	0x28(%rsp), %rax
    000001b1: 	subq	%fs:0x28, %rax
    000001ba: 	jne	.Ltmp2559 # Offset: 442
    000001c0: 	addq	$0x38, %rsp
    000001c4: 	popq	%rbx
    000001c5: 	popq	%rbp
    000001c6: 	popq	%r12
    000001c8: 	popq	%r13
    000001ca: 	popq	%r14
    000001cc: 	popq	%r15
    000001ce: 	retq # Offset: 462
    000001cf: 	nop # Size: 1
.Ltmp2554:
    000001d0: 	movq	%rcx, %rdi
    000001d3: 	leaq	0x20(%rsp), %rsi
    000001d8: 	xorl	%edx, %edx
    000001da: 	movq	%r8, 0x18(%rsp)
    000001df: 	movq	%rcx, 0x8(%rsp)
    000001e4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 484
    000001e9: 	movq	0x8(%rsp), %rcx
    000001ee: 	movq	0x18(%rsp), %r8
    000001f3: 	movq	%rax, %rdi
    000001f6: 	movq	%rax, (%rcx)
    000001f9: 	movq	0x20(%rsp), %rax
    000001fe: 	movq	%rax, 0x10(%rcx)
.Ltmp2562:
    00000202: 	movq	%r14, %rdx
    00000205: 	movq	%r8, %rsi
    00000208: 	movq	%rcx, 0x8(%rsp)
    0000020d: 	callq	memcpy@PLT # Offset: 525
    00000212: 	movq	0x8(%rsp), %rcx
    00000217: 	movq	0x20(%rsp), %r14
    0000021c: 	movq	(%rcx), %rdi
    0000021f: 	jmp	.Ltmp2560 # Offset: 543
    00000224: 	nopl	(%rax) # Size: 4
.Ltmp2557:
    00000228: 	movq	0x28(%rsp), %rax
    0000022d: 	subq	%fs:0x28, %rax
    00000236: 	jne	.Ltmp2559 # Offset: 566
    00000238: 	movq	0x10(%rsp), %rax
    0000023d: 	leaq	DATAat0x371c8(%rip), %rsi
    00000244: 	movl	$0x1, %edi
    00000249: 	movq	(%rax), %rdx
    0000024c: 	addq	$0x38, %rsp
    00000250: 	xorl	%eax, %eax
    00000252: 	popq	%rbx
    00000253: 	popq	%rbp
    00000254: 	popq	%r12
    00000256: 	popq	%r13
    00000258: 	popq	%r14
    0000025a: 	popq	%r15
    0000025c: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 604
    00000261: 	nopl	(%rax) # Size: 7
.Ltmp2551:
    00000268: 	movq	0x10(%rsp), %rsi
    0000026d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000274: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 628
    00000279: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000280: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000287: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000028e: 	jne	.Ltmp2561 # Offset: 654
.Ltmp2556:
    00000294: 	movq	-0x8(%rdx), %rax
    00000298: 	addq	$0x200, %rax
    0000029e: 	jmp	.Ltmp2561 # Offset: 670
    000002a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2555:
    000002a8: 	testq	%r14, %r14
    000002ab: 	je	.Ltmp2560 # Offset: 683
    000002b1: 	jmp	.Ltmp2562 # Offset: 689
.Ltmp2559:
    000002b6: 	callq	__stack_chk_fail@PLT # Offset: 694
.Ltmp2553:
    000002bb: 	leaq	DATAat0x37158(%rip), %rdi
    000002c2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 706
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave3to4IhPFvPhhPKhS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z11TestOneTypeIhEvv" after disassembly {
  Number      : 245
  State       : disassembled
  Address     : 0x2ae00
  Size        : 0x1c8e
  MaxSize     : 0x1c90
  Offset      : 0x2ae00
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIhEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0244:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movl	$0x5f38, %edi
    0000000a: 	movq	%rsp, %rbp
    0000000d: 	pushq	%r15
    0000000f: 	pushq	%r14
    00000011: 	pushq	%r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbx
    00000016: 	subq	$0x128, %rsp
    0000001d: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm0
    00000025: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm1
    0000002d: 	movq	%fs:0x28, %rax
    00000036: 	movq	%rax, -0x38(%rbp)
    0000003a: 	xorl	%eax, %eax
    0000003c: 	leaq	-0xd0(%rbp), %rax
    00000043: 	movw	%di, -0xcc(%rbp)
    0000004a: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    00000051: 	movq	%rax, -0x120(%rbp)
    00000058: 	movhlps	%xmm0, %xmm4
    0000005b: 	movq	%xmm1, %rsi
    00000060: 	movq	%rax, -0xe0(%rbp)
    00000067: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000006e: 	movq	%xmm4, %rcx
    00000073: 	leaq	0x8(%rcx), %r12
    00000077: 	movl	$0x746e6975, -0xd0(%rbp)
    00000081: 	movq	%rax, -0x108(%rbp)
    00000088: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000008f: 	movb	$0x74, -0xca(%rbp)
    00000096: 	movq	$0x7, -0xd8(%rbp)
    000000a1: 	movb	$0x0, -0xc9(%rbp)
    000000a8: 	movq	%rax, -0x118(%rbp)
    000000af: 	movaps	%xmm1, -0x130(%rbp)
    000000b6: 	movaps	%xmm0, -0x140(%rbp)
    000000bd: 	movq	%xmm4, -0x148(%rbp)
    000000c5: 	movq	%xmm0, -0x110(%rbp)
    000000cd: 	cmpq	%r12, %rax
    000000d0: 	jbe	.Ltmp2563 # Offset: 208
    000000d2: 	movq	%xmm1, -0x150(%rbp)
    000000da: 	movq	%r12, %r13
    000000dd: 	movq	%rax, %r15
.Ltmp2566:
    000000e0: 	movq	(%r13), %rax
    000000e4: 	movq	%rax, -0xf8(%rbp)
    000000eb: 	leaq	0x200(%rax), %rbx
    000000f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2565:
    000000f8: 	movq	-0xf8(%rbp), %rax
    000000ff: 	movq	(%rax), %rdi
    00000102: 	leaq	0x10(%rax), %rdx
    00000106: 	cmpq	%rdx, %rdi
    00000109: 	je	.Ltmp2564 # Offset: 265
    0000010f: 	movq	0x10(%rax), %rcx
    00000113: 	leaq	0x1(%rcx), %rsi
    00000117: 	movq	%rcx, -0x100(%rbp)
    0000011e: 	callq	_ZdlPvm@PLT # Offset: 286
    00000123: 	addq	$0x20, -0xf8(%rbp)
    0000012b: 	movq	-0xf8(%rbp), %rax
    00000132: 	cmpq	%rbx, %rax
    00000135: 	jne	.Ltmp2565 # Offset: 309
    00000137: 	addq	$0x8, %r13
    0000013b: 	cmpq	%r13, %r15
    0000013e: 	ja	.Ltmp2566 # Offset: 318
.Ltmp2667:
    00000140: 	movq	-0x150(%rbp), %rsi
.Ltmp2563:
    00000147: 	movq	-0x148(%rbp), %rcx
    0000014e: 	cmpq	%rcx, -0x118(%rbp)
    00000155: 	je	.Ltmp2567 # Offset: 341
    0000015b: 	movq	-0x110(%rbp), %rbx
    00000162: 	cmpq	%rbx, %rsi
    00000165: 	je	.Ltmp2568 # Offset: 357
    00000167: 	movq	%rsi, %rbx
.Ltmp2571:
    0000016a: 	movq	(%rbx), %rdi
    0000016d: 	leaq	0x10(%rbx), %rax
    00000171: 	cmpq	%rax, %rdi
    00000174: 	je	.Ltmp2569 # Offset: 372
.Ltmp2570:
    00000176: 	movq	0x10(%rbx), %rax
    0000017a: 	addq	$0x20, %rbx
    0000017e: 	leaq	0x1(%rax), %rsi
    00000182: 	movq	%rax, -0xf8(%rbp)
    00000189: 	callq	_ZdlPvm@PLT # Offset: 393
    0000018e: 	cmpq	-0x110(%rbp), %rbx
    00000195: 	je	.Ltmp2568 # Offset: 405
    00000197: 	movq	(%rbx), %rdi
    0000019a: 	leaq	0x10(%rbx), %rax
    0000019e: 	cmpq	%rax, %rdi
    000001a1: 	jne	.Ltmp2570 # Offset: 417
.Ltmp2569:
    000001a3: 	movq	%rbx, %rax
    000001a6: 	addq	$0x20, %rax
    000001aa: 	movq	%rax, %rbx
    000001ad: 	cmpq	-0x110(%rbp), %rax
    000001b4: 	jne	.Ltmp2571 # Offset: 436
    000001b6: 	cmpq	%r14, -0x108(%rbp)
    000001bd: 	je	.Ltmp2572 # Offset: 445
    000001bf: 	nop # Size: 1
.Ltmp2574:
    000001c0: 	movq	(%r14), %rdi
    000001c3: 	leaq	0x10(%r14), %rax
    000001c7: 	cmpq	%rax, %rdi
    000001ca: 	je	.Ltmp2573 # Offset: 458
    000001cc: 	movq	0x10(%r14), %rax
    000001d0: 	leaq	0x1(%rax), %rsi
    000001d4: 	callq	_ZdlPvm@PLT # Offset: 468
.Ltmp2573:
    000001d9: 	addq	$0x20, %r14
.Ltmp2568:
    000001dd: 	cmpq	%r14, -0x108(%rbp)
    000001e4: 	jne	.Ltmp2574 # Offset: 484
.Ltmp2572:
    000001e6: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000001ed: 	leaq	0x8(%rax), %rbx
    000001f1: 	cmpq	%r12, %rbx
    000001f4: 	jbe	.Ltmp2575 # Offset: 500
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2576:
    00000200: 	movq	(%r12), %rdi
    00000204: 	movl	$0x200, %esi
    00000209: 	addq	$0x8, %r12
    0000020d: 	callq	_ZdlPvm@PLT # Offset: 525
    00000212: 	cmpq	%r12, %rbx
    00000215: 	ja	.Ltmp2576 # Offset: 533
.Ltmp2575:
    00000217: 	movzbl	init_value(%rip), %eax
    0000021e: 	movdqa	-0x130(%rbp), %xmm2
    00000226: 	movl	$0x13880, %edi
    0000022b: 	movdqa	-0x140(%rbp), %xmm3
    00000233: 	addq	$0x2a, %rax
    00000237: 	movaps	%xmm2, "_ZL7gLabels/1"+48(%rip)
    0000023e: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000245: 	movl	iterations(%rip), %eax
    0000024b: 	movaps	%xmm3, "_ZL7gLabels/1"+64(%rip)
    00000252: 	movl	%eax, -0x118(%rbp)
    00000258: 	callq	_Znam@PLT # Offset: 600
    0000025d: 	movl	$0x13880, %edi
    00000262: 	movq	%rax, %r12
    00000265: 	callq	_Znam@PLT # Offset: 613
    0000026a: 	movl	$0x13880, %edi
    0000026f: 	movq	%rax, %r13
    00000272: 	callq	_Znam@PLT # Offset: 626
    00000277: 	movl	$0x13880, %edi
    0000027c: 	movq	%rax, -0x100(%rbp)
    00000283: 	callq	_Znam@PLT # Offset: 643
    00000288: 	movl	$0x4e200, %edi
    0000028d: 	movq	%rax, -0x110(%rbp)
    00000294: 	callq	_Znam@PLT # Offset: 660
    00000299: 	movq	%rax, %r14
    0000029c: 	movq	%r12, %rdx
    0000029f: 	leaq	0x13880(%r12), %rdi
    000002a7: 	movabsq	$0x5851f42d4c957f2d, %rsi
    000002b1: 	movabsq	$0x14057b7ef767814f, %rcx
    000002bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2577:
    000002c0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000002c7: 	addq	$0x1, %rdx
    000002cb: 	imulq	%rsi, %rax
    000002cf: 	addq	%rcx, %rax
    000002d2: 	movq	%rax, %r8
    000002d5: 	movq	%rax, %r9
    000002d8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000002df: 	shrq	$0x14, %r8
    000002e3: 	shlq	$0x17, %r9
    000002e7: 	xorq	%r9, %r8
    000002ea: 	xorq	%r8, %rax
    000002ed: 	sarq	$0x3, %rax
    000002f1: 	movb	%al, -0x1(%rdx)
    000002f4: 	cmpq	%rdi, %rdx
    000002f7: 	jne	.Ltmp2577 # Offset: 759
    000002f9: 	leaq	0x13880(%r13), %rdi
    00000300: 	movq	%r13, %rdx
    00000303: 	movabsq	$0x5851f42d4c957f2d, %rsi
    0000030d: 	movabsq	$0x14057b7ef767814f, %rcx
    00000317: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2578:
    00000320: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000327: 	addq	$0x1, %rdx
    0000032b: 	imulq	%rsi, %rax
    0000032f: 	addq	%rcx, %rax
    00000332: 	movq	%rax, %r8
    00000335: 	movq	%rax, %r9
    00000338: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000033f: 	shrq	$0x14, %r8
    00000343: 	shlq	$0x17, %r9
    00000347: 	xorq	%r9, %r8
    0000034a: 	xorq	%r8, %rax
    0000034d: 	sarq	$0x3, %rax
    00000351: 	movb	%al, -0x1(%rdx)
    00000354: 	cmpq	%rdx, %rdi
    00000357: 	jne	.Ltmp2578 # Offset: 855
    00000359: 	movq	-0x100(%rbp), %rdx
    00000360: 	movabsq	$0x5851f42d4c957f2d, %rsi
    0000036a: 	movabsq	$0x14057b7ef767814f, %rcx
    00000374: 	leaq	0x13880(%rdx), %rdi
    0000037b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2579:
    00000380: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000387: 	addq	$0x1, %rdx
    0000038b: 	imulq	%rsi, %rax
    0000038f: 	addq	%rcx, %rax
    00000392: 	movq	%rax, %r8
    00000395: 	movq	%rax, %r9
    00000398: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000039f: 	shrq	$0x14, %r8
    000003a3: 	shlq	$0x17, %r9
    000003a7: 	xorq	%r9, %r8
    000003aa: 	xorq	%r8, %rax
    000003ad: 	sarq	$0x3, %rax
    000003b1: 	movb	%al, -0x1(%rdx)
    000003b4: 	cmpq	%rdx, %rdi
    000003b7: 	jne	.Ltmp2579 # Offset: 951
    000003b9: 	movq	-0x110(%rbp), %rdx
    000003c0: 	movabsq	$0x5851f42d4c957f2d, %rsi
    000003ca: 	movabsq	$0x14057b7ef767814f, %rcx
    000003d4: 	leaq	0x13880(%rdx), %rdi
    000003db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2580:
    000003e0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000003e7: 	addq	$0x1, %rdx
    000003eb: 	imulq	%rsi, %rax
    000003ef: 	addq	%rcx, %rax
    000003f2: 	movq	%rax, %r8
    000003f5: 	movq	%rax, %r9
    000003f8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000003ff: 	shrq	$0x14, %r8
    00000403: 	shlq	$0x17, %r9
    00000407: 	xorq	%r9, %r8
    0000040a: 	xorq	%r8, %rax
    0000040d: 	sarq	$0x3, %rax
    00000411: 	movb	%al, -0x1(%rdx)
    00000414: 	cmpq	%rdx, %rdi
    00000417: 	jne	.Ltmp2580 # Offset: 1047
    00000419: 	xorl	%esi, %esi
    0000041b: 	movl	$0x4e200, %edx
    00000420: 	leaq	-0x50(%rbp), %rbx
    00000424: 	movq	%r14, %rdi
    00000427: 	callq	memset@PLT # Offset: 1063
    0000042c: 	movl	-0x118(%rbp), %eax
    00000432: 	movq	-0xd8(%rbp), %r15
    00000439: 	movq	%rbx, -0x60(%rbp)
    0000043d: 	movl	%eax, iterations(%rip)
    00000443: 	movq	-0xe0(%rbp), %rax
    0000044a: 	movq	%rax, %rcx
    0000044d: 	movq	%rax, -0xf8(%rbp)
    00000454: 	addq	%r15, %rcx
    00000457: 	je	.Ltmp2581 # Offset: 1111
    00000459: 	testq	%rax, %rax
    0000045c: 	je	.Ltmp2582 # Offset: 1116
.Ltmp2581:
    00000462: 	movq	%r15, -0xe8(%rbp)
    00000469: 	cmpq	$0xf, %r15
    0000046d: 	ja	.Ltmp2583 # Offset: 1133
    00000473: 	cmpq	$0x1, %r15
    00000477: 	jne	.Ltmp2584 # Offset: 1143
    0000047d: 	movq	-0xf8(%rbp), %rax
    00000484: 	movzbl	(%rax), %eax
    00000487: 	movb	%al, -0x50(%rbp)
    0000048a: 	movq	%rbx, %rax
.Ltmp2669:
    0000048d: 	movq	%r15, -0x58(%rbp)
    00000491: 	movb	$0x0, (%rax,%r15)
    00000496: 	movabsq	$0x3fffffffffffffff, %rax
    000004a0: 	subq	-0x58(%rbp), %rax
    000004a4: 	cmpq	$0x10, %rax
    000004a8: 	jbe	.Ltmp2585 # Offset: 1192
    000004ae: 	leaq	-0x60(%rbp), %rax
    000004b2: 	movl	$0x11, %edx
    000004b7: 	leaq	DATAat0x371d8(%rip), %rsi
    000004be: 	movq	%rax, %rdi
    000004c1: 	movq	%rax, -0xf8(%rbp)
    000004c8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1224
    000004cd: 	movq	-0xf8(%rbp), %r8
    000004d4: 	movq	%r13, %rdx
    000004d7: 	movq	%r12, %rsi
    000004da: 	movq	%r14, %rdi
    000004dd: 	leaq	_Z23interleave2to2_version1IhEvPT_PKS0_S3_i(%rip), %rcx
    000004e4: 	callq	"_Z19test_interleave2to2IhPFvPhPKhS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1252
    000004e9: 	movq	-0x60(%rbp), %rdi
    000004ed: 	cmpq	%rbx, %rdi
    000004f0: 	je	.Ltmp2586 # Offset: 1264
    000004f2: 	movq	-0x50(%rbp), %rax
    000004f6: 	leaq	0x1(%rax), %rsi
    000004fa: 	callq	_ZdlPvm@PLT # Offset: 1274
.Ltmp2586:
    000004ff: 	movq	-0xe0(%rbp), %rax
    00000506: 	movq	-0xd8(%rbp), %r15
    0000050d: 	movq	%rbx, -0x60(%rbp)
    00000511: 	movq	%rax, %rcx
    00000514: 	movq	%rax, -0x108(%rbp)
    0000051b: 	addq	%r15, %rcx
    0000051e: 	je	.Ltmp2587 # Offset: 1310
    00000520: 	testq	%rax, %rax
    00000523: 	je	.Ltmp2588 # Offset: 1315
.Ltmp2587:
    00000529: 	movq	%r15, -0xe8(%rbp)
    00000530: 	cmpq	$0xf, %r15
    00000534: 	ja	.Ltmp2589 # Offset: 1332
    0000053a: 	cmpq	$0x1, %r15
    0000053e: 	jne	.Ltmp2590 # Offset: 1342
    00000544: 	movq	-0x108(%rbp), %rax
    0000054b: 	movzbl	(%rax), %eax
    0000054e: 	movb	%al, -0x50(%rbp)
    00000551: 	movq	%rbx, %rax
.Ltmp2689:
    00000554: 	movq	%r15, -0x58(%rbp)
    00000558: 	movb	$0x0, (%rax,%r15)
    0000055d: 	movabsq	$0x3fffffffffffffff, %rax
    00000567: 	subq	-0x58(%rbp), %rax
    0000056b: 	cmpq	$0x10, %rax
    0000056f: 	jbe	.Ltmp2591 # Offset: 1391
    00000575: 	movq	-0xf8(%rbp), %rdi
    0000057c: 	movl	$0x11, %edx
    00000581: 	leaq	DATAat0x371ea(%rip), %rsi
    00000588: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1416
    0000058d: 	movq	-0xf8(%rbp), %r8
    00000594: 	movq	%r13, %rdx
    00000597: 	movq	%r12, %rsi
    0000059a: 	movq	%r14, %rdi
    0000059d: 	leaq	_Z23interleave2to2_version2IhEvPT_PKS0_S3_i(%rip), %rcx
    000005a4: 	callq	"_Z19test_interleave2to2IhPFvPhPKhS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1444
    000005a9: 	movq	-0x60(%rbp), %rdi
    000005ad: 	cmpq	%rbx, %rdi
    000005b0: 	je	.Ltmp2592 # Offset: 1456
    000005b2: 	movq	-0x50(%rbp), %rax
    000005b6: 	leaq	0x1(%rax), %rsi
    000005ba: 	callq	_ZdlPvm@PLT # Offset: 1466
.Ltmp2592:
    000005bf: 	movq	-0xe0(%rbp), %rax
    000005c6: 	movq	-0xd8(%rbp), %r15
    000005cd: 	movq	%rbx, -0x60(%rbp)
    000005d1: 	movq	%rax, %rcx
    000005d4: 	movq	%rax, -0x108(%rbp)
    000005db: 	addq	%r15, %rcx
    000005de: 	je	.Ltmp2593 # Offset: 1502
    000005e0: 	testq	%rax, %rax
    000005e3: 	je	.Ltmp2594 # Offset: 1507
.Ltmp2593:
    000005e9: 	movq	%r15, -0xe8(%rbp)
    000005f0: 	cmpq	$0xf, %r15
    000005f4: 	ja	.Ltmp2595 # Offset: 1524
    000005fa: 	cmpq	$0x1, %r15
    000005fe: 	jne	.Ltmp2596 # Offset: 1534
    00000604: 	movq	-0x108(%rbp), %rax
    0000060b: 	movzbl	(%rax), %eax
    0000060e: 	movb	%al, -0x50(%rbp)
    00000611: 	movq	%rbx, %rax
.Ltmp2687:
    00000614: 	movq	%r15, -0x58(%rbp)
    00000618: 	movb	$0x0, (%rax,%r15)
    0000061d: 	movabsq	$0x3fffffffffffffff, %rax
    00000627: 	subq	-0x58(%rbp), %rax
    0000062b: 	cmpq	$0x10, %rax
    0000062f: 	jbe	.Ltmp2597 # Offset: 1583
    00000635: 	movq	-0xf8(%rbp), %rdi
    0000063c: 	movl	$0x11, %edx
    00000641: 	leaq	DATAat0x371fc(%rip), %rsi
    00000648: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1608
    0000064d: 	movq	-0xf8(%rbp), %r8
    00000654: 	movq	%r13, %rdx
    00000657: 	movq	%r12, %rsi
    0000065a: 	movq	%r14, %rdi
    0000065d: 	leaq	_Z23interleave2to2_version3IhEvPT_PKS0_S3_i(%rip), %rcx
    00000664: 	callq	"_Z19test_interleave2to2IhPFvPhPKhS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1636
    00000669: 	movq	-0x60(%rbp), %rdi
    0000066d: 	cmpq	%rbx, %rdi
    00000670: 	je	.Ltmp2598 # Offset: 1648
    00000672: 	movq	-0x50(%rbp), %rax
    00000676: 	leaq	0x1(%rax), %rsi
    0000067a: 	callq	_ZdlPvm@PLT # Offset: 1658
.Ltmp2598:
    0000067f: 	movq	-0xf8(%rbp), %r15
    00000686: 	leaq	-0xe0(%rbp), %rax
    0000068d: 	leaq	DATAat0x3720e(%rip), %rdx
    00000694: 	movq	%rax, %rsi
    00000697: 	movq	%rax, -0x108(%rbp)
    0000069e: 	movq	%r15, %rdi
    000006a1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1697
    000006a6: 	movq	%r15, %r8
    000006a9: 	leaq	_Z23interleave2to2_version4IhEvPT_PKS0_S3_i(%rip), %rcx
    000006b0: 	movq	%r13, %rdx
    000006b3: 	movq	%r12, %rsi
    000006b6: 	movq	%r14, %rdi
    000006b9: 	callq	"_Z19test_interleave2to2IhPFvPhPKhS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1721
    000006be: 	movq	-0x60(%rbp), %rdi
    000006c2: 	cmpq	%rbx, %rdi
    000006c5: 	je	.Ltmp2599 # Offset: 1733
    000006c7: 	movq	-0x50(%rbp), %rax
    000006cb: 	leaq	0x1(%rax), %rsi
    000006cf: 	callq	_ZdlPvm@PLT # Offset: 1743
.Ltmp2599:
    000006d4: 	movq	-0xf8(%rbp), %r15
    000006db: 	movq	-0x108(%rbp), %rsi
    000006e2: 	leaq	DATAat0x37220(%rip), %rdx
    000006e9: 	movq	%r15, %rdi
    000006ec: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1772
    000006f1: 	movq	%r15, %r8
    000006f4: 	leaq	_Z23interleave2to2_version5IhEvPT_PKS0_S3_i(%rip), %rcx
    000006fb: 	movq	%r13, %rdx
    000006fe: 	movq	%r12, %rsi
    00000701: 	movq	%r14, %rdi
    00000704: 	callq	"_Z19test_interleave2to2IhPFvPhPKhS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1796
    00000709: 	movq	-0x60(%rbp), %rdi
    0000070d: 	cmpq	%rbx, %rdi
    00000710: 	je	.Ltmp2600 # Offset: 1808
    00000712: 	movq	-0x50(%rbp), %rax
    00000716: 	leaq	0x1(%rax), %rsi
    0000071a: 	callq	_ZdlPvm@PLT # Offset: 1818
.Ltmp2600:
    0000071f: 	movq	-0xf8(%rbp), %r15
    00000726: 	movq	-0x108(%rbp), %rsi
    0000072d: 	leaq	DATAat0x37232(%rip), %rdx
    00000734: 	movq	%r15, %rdi
    00000737: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1847
    0000073c: 	movq	%r15, %r8
    0000073f: 	leaq	_Z23interleave2to2_version6IhEvPT_PKS0_S3_i(%rip), %rcx
    00000746: 	movq	%r13, %rdx
    00000749: 	movq	%r12, %rsi
    0000074c: 	movq	%r14, %rdi
    0000074f: 	callq	"_Z19test_interleave2to2IhPFvPhPKhS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1871
    00000754: 	movq	-0x60(%rbp), %rdi
    00000758: 	cmpq	%rbx, %rdi
    0000075b: 	je	.Ltmp2601 # Offset: 1883
    0000075d: 	movq	-0x50(%rbp), %rax
    00000761: 	leaq	0x1(%rax), %rsi
    00000765: 	callq	_ZdlPvm@PLT # Offset: 1893
.Ltmp2601:
    0000076a: 	movq	-0xe0(%rbp), %rax
    00000771: 	movq	-0xd8(%rbp), %r15
    00000778: 	movq	%rbx, -0x60(%rbp)
    0000077c: 	movq	%rax, %rcx
    0000077f: 	movq	%rax, -0x130(%rbp)
    00000786: 	addq	%r15, %rcx
    00000789: 	je	.Ltmp2602 # Offset: 1929
    0000078b: 	testq	%rax, %rax
    0000078e: 	je	.Ltmp2603 # Offset: 1934
.Ltmp2602:
    00000794: 	movq	%r15, -0xe8(%rbp)
    0000079b: 	cmpq	$0xf, %r15
    0000079f: 	ja	.Ltmp2604 # Offset: 1951
    000007a5: 	cmpq	$0x1, %r15
    000007a9: 	jne	.Ltmp2605 # Offset: 1961
    000007af: 	movq	-0x130(%rbp), %rax
    000007b6: 	movzbl	(%rax), %eax
    000007b9: 	movb	%al, -0x50(%rbp)
    000007bc: 	movq	%rbx, %rax
.Ltmp2685:
    000007bf: 	movq	%r15, -0x58(%rbp)
    000007c3: 	movb	$0x0, (%rax,%r15)
    000007c8: 	movabsq	$0x3fffffffffffffff, %rax
    000007d2: 	subq	-0x58(%rbp), %rax
    000007d6: 	cmpq	$0x10, %rax
    000007da: 	jbe	.Ltmp2606 # Offset: 2010
    000007e0: 	movq	-0xf8(%rbp), %rdi
    000007e7: 	movl	$0x11, %edx
    000007ec: 	leaq	DATAat0x37244(%rip), %rsi
    000007f3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2035
    000007f8: 	movq	-0xf8(%rbp), %r8
    000007ff: 	movq	%r13, %rdx
    00000802: 	movq	%r12, %rsi
    00000805: 	movq	%r14, %rdi
    00000808: 	leaq	_Z23interleave2to2_version7IhEvPT_PKS0_S3_i(%rip), %rcx
    0000080f: 	callq	"_Z19test_interleave2to2IhPFvPhPKhS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2063
    00000814: 	movq	-0x60(%rbp), %rdi
    00000818: 	cmpq	%rbx, %rdi
    0000081b: 	je	.Ltmp2607 # Offset: 2075
    0000081d: 	movq	-0x50(%rbp), %rax
    00000821: 	leaq	0x1(%rax), %rsi
    00000825: 	callq	_ZdlPvm@PLT # Offset: 2085
.Ltmp2607:
    0000082a: 	movq	-0xf8(%rbp), %r15
    00000831: 	movq	-0x108(%rbp), %rsi
    00000838: 	leaq	DATAat0x37256(%rip), %rdx
    0000083f: 	movq	%r15, %rdi
    00000842: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2114
    00000847: 	movq	%r15, %r8
    0000084a: 	leaq	_Z23interleave2to2_version8IhEvPT_PKS0_S3_i(%rip), %rcx
    00000851: 	movq	%r13, %rdx
    00000854: 	movq	%r12, %rsi
    00000857: 	movq	%r14, %rdi
    0000085a: 	callq	"_Z19test_interleave2to2IhPFvPhPKhS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2138
    0000085f: 	movq	-0x60(%rbp), %rdi
    00000863: 	cmpq	%rbx, %rdi
    00000866: 	je	.Ltmp2608 # Offset: 2150
    00000868: 	movq	-0x50(%rbp), %rax
    0000086c: 	leaq	0x1(%rax), %rsi
    00000870: 	callq	_ZdlPvm@PLT # Offset: 2160
.Ltmp2608:
    00000875: 	leaq	-0xb0(%rbp), %rax
    0000087c: 	movq	-0xd8(%rbp), %r15
    00000883: 	movq	%rax, -0x130(%rbp)
    0000088a: 	movq	%rax, -0xc0(%rbp)
    00000891: 	movq	-0xe0(%rbp), %rax
    00000898: 	movq	%rax, %rcx
    0000089b: 	movq	%rax, -0x140(%rbp)
    000008a2: 	addq	%r15, %rcx
    000008a5: 	je	.Ltmp2609 # Offset: 2213
    000008a7: 	testq	%rax, %rax
    000008aa: 	je	.Ltmp2610 # Offset: 2218
.Ltmp2609:
    000008b0: 	movq	%r15, -0xe8(%rbp)
    000008b7: 	cmpq	$0xf, %r15
    000008bb: 	ja	.Ltmp2611 # Offset: 2235
    000008c1: 	cmpq	$0x1, %r15
    000008c5: 	jne	.Ltmp2612 # Offset: 2245
    000008cb: 	movq	-0x140(%rbp), %rax
    000008d2: 	movzbl	(%rax), %eax
    000008d5: 	movb	%al, -0xb0(%rbp)
    000008db: 	movq	-0x130(%rbp), %rax
.Ltmp2681:
    000008e2: 	movq	%r15, -0xb8(%rbp)
    000008e9: 	movb	$0x0, (%rax,%r15)
    000008ee: 	movabsq	$0x3fffffffffffffff, %rax
    000008f8: 	subq	-0xb8(%rbp), %rax
    000008ff: 	cmpq	$0xe, %rax
    00000903: 	jbe	.Ltmp2613 # Offset: 2307
    00000909: 	leaq	-0xc0(%rbp), %rdi
    00000910: 	movl	$0xf, %edx
    00000915: 	leaq	DATAat0x37268(%rip), %rsi
    0000091c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2332
    00000921: 	movl	iterations(%rip), %edx
    00000927: 	xorl	%r8d, %r8d
    0000092a: 	xorl	%ecx, %ecx
    0000092c: 	movl	$0x13880, %esi
    00000931: 	movq	-0xc0(%rbp), %rdi
    00000938: 	callq	_Z9summarizePKciiii # Offset: 2360
    0000093d: 	movl	-0x118(%rbp), %eax
    00000943: 	movq	-0xd8(%rbp), %r15
    0000094a: 	movq	%rbx, -0x60(%rbp)
    0000094e: 	leal	(%rax,%rax), %edx
    00000951: 	movslq	%edx, %rax
    00000954: 	sarl	$0x1f, %edx
    00000957: 	imulq	$0x55555556, %rax, %rax
    0000095e: 	shrq	$0x20, %rax
    00000962: 	subl	%edx, %eax
    00000964: 	movl	%eax, iterations(%rip)
    0000096a: 	movq	-0xe0(%rbp), %rax
    00000971: 	movq	%rax, %rcx
    00000974: 	movq	%rax, -0x140(%rbp)
    0000097b: 	addq	%r15, %rcx
    0000097e: 	je	.Ltmp2614 # Offset: 2430
    00000980: 	testq	%rax, %rax
    00000983: 	je	.Ltmp2615 # Offset: 2435
.Ltmp2614:
    00000989: 	movq	%r15, -0xe8(%rbp)
    00000990: 	cmpq	$0xf, %r15
    00000994: 	ja	.Ltmp2616 # Offset: 2452
    0000099a: 	cmpq	$0x1, %r15
    0000099e: 	jne	.Ltmp2617 # Offset: 2462
    000009a4: 	movq	-0x140(%rbp), %rax
    000009ab: 	movzbl	(%rax), %eax
    000009ae: 	movb	%al, -0x50(%rbp)
    000009b1: 	movq	%rbx, %rax
.Ltmp2679:
    000009b4: 	movq	%r15, -0x58(%rbp)
    000009b8: 	movb	$0x0, (%rax,%r15)
    000009bd: 	movabsq	$0x3fffffffffffffff, %rax
    000009c7: 	subq	-0x58(%rbp), %rax
    000009cb: 	cmpq	$0x10, %rax
    000009cf: 	jbe	.Ltmp2618 # Offset: 2511
    000009d5: 	movq	-0xf8(%rbp), %rdi
    000009dc: 	movl	$0x11, %edx
    000009e1: 	leaq	DATAat0x37278(%rip), %rsi
    000009e8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2536
    000009ed: 	movq	-0xf8(%rbp), %r9
    000009f4: 	movq	%r13, %rdx
    000009f7: 	movq	%r12, %rsi
    000009fa: 	movq	%r14, %rdi
    000009fd: 	movq	-0x100(%rbp), %rcx
    00000a04: 	leaq	_Z23interleave3to3_version1IhEvPT_PKS0_S3_S3_i(%rip), %r8
    00000a0b: 	callq	"_Z19test_interleave3to3IhPFvPhPKhS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2571
    00000a10: 	movq	-0x60(%rbp), %rdi
    00000a14: 	cmpq	%rbx, %rdi
    00000a17: 	je	.Ltmp2619 # Offset: 2583
    00000a19: 	movq	-0x50(%rbp), %rax
    00000a1d: 	leaq	0x1(%rax), %rsi
    00000a21: 	callq	_ZdlPvm@PLT # Offset: 2593
.Ltmp2619:
    00000a26: 	movq	-0xf8(%rbp), %r15
    00000a2d: 	movq	-0x108(%rbp), %rsi
    00000a34: 	leaq	DATAat0x3728a(%rip), %rdx
    00000a3b: 	movq	%r15, %rdi
    00000a3e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2622
    00000a43: 	movq	-0x100(%rbp), %rcx
    00000a4a: 	movq	%r15, %r9
    00000a4d: 	movq	%r13, %rdx
    00000a50: 	movq	%r12, %rsi
    00000a53: 	leaq	_Z23interleave3to3_version2IhEvPT_PKS0_S3_S3_i(%rip), %r8
    00000a5a: 	movq	%r14, %rdi
    00000a5d: 	callq	"_Z19test_interleave3to3IhPFvPhPKhS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2653
    00000a62: 	movq	-0x60(%rbp), %rdi
    00000a66: 	cmpq	%rbx, %rdi
    00000a69: 	je	.Ltmp2620 # Offset: 2665
    00000a6b: 	movq	-0x50(%rbp), %rax
    00000a6f: 	leaq	0x1(%rax), %rsi
    00000a73: 	callq	_ZdlPvm@PLT # Offset: 2675
.Ltmp2620:
    00000a78: 	movq	-0xf8(%rbp), %r15
    00000a7f: 	movq	-0x108(%rbp), %rsi
    00000a86: 	leaq	DATAat0x3729c(%rip), %rdx
    00000a8d: 	movq	%r15, %rdi
    00000a90: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2704
    00000a95: 	movq	-0x100(%rbp), %rcx
    00000a9c: 	movq	%r15, %r9
    00000a9f: 	movq	%r13, %rdx
    00000aa2: 	movq	%r12, %rsi
    00000aa5: 	leaq	_Z23interleave3to3_version3IhEvPT_PKS0_S3_S3_i(%rip), %r8
    00000aac: 	movq	%r14, %rdi
    00000aaf: 	callq	"_Z19test_interleave3to3IhPFvPhPKhS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2735
    00000ab4: 	movq	-0x60(%rbp), %rdi
    00000ab8: 	cmpq	%rbx, %rdi
    00000abb: 	je	.Ltmp2621 # Offset: 2747
    00000abd: 	movq	-0x50(%rbp), %rax
    00000ac1: 	leaq	0x1(%rax), %rsi
    00000ac5: 	callq	_ZdlPvm@PLT # Offset: 2757
.Ltmp2621:
    00000aca: 	movq	-0xf8(%rbp), %r15
    00000ad1: 	movq	-0x108(%rbp), %rsi
    00000ad8: 	leaq	DATAat0x372ae(%rip), %rdx
    00000adf: 	movq	%r15, %rdi
    00000ae2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2786
    00000ae7: 	movq	-0x100(%rbp), %rcx
    00000aee: 	movq	%r15, %r9
    00000af1: 	movq	%r13, %rdx
    00000af4: 	movq	%r12, %rsi
    00000af7: 	leaq	_Z23interleave3to3_version4IhEvPT_PKS0_S3_S3_i(%rip), %r8
    00000afe: 	movq	%r14, %rdi
    00000b01: 	callq	"_Z19test_interleave3to3IhPFvPhPKhS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2817
    00000b06: 	movq	-0x60(%rbp), %rdi
    00000b0a: 	cmpq	%rbx, %rdi
    00000b0d: 	je	.Ltmp2622 # Offset: 2829
    00000b0f: 	movq	-0x50(%rbp), %rax
    00000b13: 	leaq	0x1(%rax), %rsi
    00000b17: 	callq	_ZdlPvm@PLT # Offset: 2839
.Ltmp2622:
    00000b1c: 	movq	-0xf8(%rbp), %r15
    00000b23: 	movq	-0x108(%rbp), %rsi
    00000b2a: 	leaq	DATAat0x372c0(%rip), %rdx
    00000b31: 	movq	%r15, %rdi
    00000b34: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2868
    00000b39: 	movq	-0x100(%rbp), %rcx
    00000b40: 	movq	%r15, %r9
    00000b43: 	movq	%r13, %rdx
    00000b46: 	movq	%r12, %rsi
    00000b49: 	leaq	_Z23interleave3to3_version5IhEvPT_PKS0_S3_S3_i(%rip), %r8
    00000b50: 	movq	%r14, %rdi
    00000b53: 	callq	"_Z19test_interleave3to3IhPFvPhPKhS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2899
    00000b58: 	movq	-0x60(%rbp), %rdi
    00000b5c: 	cmpq	%rbx, %rdi
    00000b5f: 	je	.Ltmp2623 # Offset: 2911
    00000b61: 	movq	-0x50(%rbp), %rax
    00000b65: 	leaq	0x1(%rax), %rsi
    00000b69: 	callq	_ZdlPvm@PLT # Offset: 2921
.Ltmp2623:
    00000b6e: 	movq	-0x108(%rbp), %rsi
    00000b75: 	leaq	-0xa0(%rbp), %rdi
    00000b7c: 	leaq	DATAat0x372d2(%rip), %rdx
    00000b83: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2947
    00000b88: 	movl	iterations(%rip), %edx
    00000b8e: 	xorl	%r8d, %r8d
    00000b91: 	xorl	%ecx, %ecx
    00000b93: 	movl	$0x13880, %esi
    00000b98: 	movq	-0xa0(%rbp), %rdi
    00000b9f: 	callq	_Z9summarizePKciiii # Offset: 2975
    00000ba4: 	movl	-0x118(%rbp), %ecx
    00000baa: 	movq	-0xd8(%rbp), %r15
    00000bb1: 	movq	%rbx, -0x60(%rbp)
    00000bb5: 	movl	%ecx, %eax
    00000bb7: 	shrl	$0x1f, %eax
    00000bba: 	addl	%ecx, %eax
    00000bbc: 	sarl	%eax
    00000bbe: 	movl	%eax, -0x140(%rbp)
    00000bc4: 	movl	%eax, iterations(%rip)
    00000bca: 	movq	-0xe0(%rbp), %rax
    00000bd1: 	movq	%rax, %rcx
    00000bd4: 	movq	%rax, -0x148(%rbp)
    00000bdb: 	addq	%r15, %rcx
    00000bde: 	je	.Ltmp2624 # Offset: 3038
    00000be0: 	testq	%rax, %rax
    00000be3: 	je	.Ltmp2625 # Offset: 3043
.Ltmp2624:
    00000be9: 	movq	%r15, -0xe8(%rbp)
    00000bf0: 	cmpq	$0xf, %r15
    00000bf4: 	ja	.Ltmp2626 # Offset: 3060
    00000bfa: 	cmpq	$0x1, %r15
    00000bfe: 	jne	.Ltmp2627 # Offset: 3070
    00000c04: 	movq	-0x148(%rbp), %rax
    00000c0b: 	movzbl	(%rax), %eax
    00000c0e: 	movb	%al, -0x50(%rbp)
    00000c11: 	movq	%rbx, %rax
.Ltmp2677:
    00000c14: 	movq	%r15, -0x58(%rbp)
    00000c18: 	movb	$0x0, (%rax,%r15)
    00000c1d: 	movabsq	$0x3fffffffffffffff, %rax
    00000c27: 	subq	-0x58(%rbp), %rax
    00000c2b: 	cmpq	$0x10, %rax
    00000c2f: 	jbe	.Ltmp2628 # Offset: 3119
    00000c35: 	movq	-0xf8(%rbp), %rdi
    00000c3c: 	movl	$0x11, %edx
    00000c41: 	leaq	DATAat0x372e2(%rip), %rsi
    00000c48: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3144
    00000c4d: 	subq	$0x8, %rsp
    00000c51: 	pushq	-0xf8(%rbp)
    00000c57: 	movq	%r13, %rdx
    00000c5a: 	movq	%r12, %rsi
    00000c5d: 	movq	-0x110(%rbp), %r8
    00000c64: 	leaq	_Z23interleave3to4_version1IhEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000c6b: 	movq	%r14, %rdi
    00000c6e: 	movq	-0x100(%rbp), %rcx
    00000c75: 	callq	"_Z19test_interleave3to4IhPFvPhhPKhS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3189
    00000c7a: 	movq	-0x60(%rbp), %rdi
    00000c7e: 	popq	%rcx
    00000c7f: 	popq	%rsi
    00000c80: 	cmpq	%rbx, %rdi
    00000c83: 	je	.Ltmp2629 # Offset: 3203
    00000c85: 	movq	-0x50(%rbp), %rax
    00000c89: 	leaq	0x1(%rax), %rsi
    00000c8d: 	callq	_ZdlPvm@PLT # Offset: 3213
.Ltmp2629:
    00000c92: 	movq	-0xe0(%rbp), %rax
    00000c99: 	movq	-0xd8(%rbp), %r15
    00000ca0: 	movq	%rbx, -0x60(%rbp)
    00000ca4: 	movq	%rax, %rcx
    00000ca7: 	movq	%rax, -0x148(%rbp)
    00000cae: 	addq	%r15, %rcx
    00000cb1: 	je	.Ltmp2630 # Offset: 3249
    00000cb3: 	testq	%rax, %rax
    00000cb6: 	je	.Ltmp2631 # Offset: 3254
.Ltmp2630:
    00000cbc: 	movq	%r15, -0xe8(%rbp)
    00000cc3: 	cmpq	$0xf, %r15
    00000cc7: 	ja	.Ltmp2632 # Offset: 3271
    00000ccd: 	cmpq	$0x1, %r15
    00000cd1: 	jne	.Ltmp2633 # Offset: 3281
    00000cd7: 	movq	-0x148(%rbp), %rax
    00000cde: 	movzbl	(%rax), %eax
    00000ce1: 	movb	%al, -0x50(%rbp)
    00000ce4: 	movq	%rbx, %rax
.Ltmp2675:
    00000ce7: 	movq	%r15, -0x58(%rbp)
    00000ceb: 	movb	$0x0, (%rax,%r15)
    00000cf0: 	movabsq	$0x3fffffffffffffff, %rax
    00000cfa: 	subq	-0x58(%rbp), %rax
    00000cfe: 	cmpq	$0x10, %rax
    00000d02: 	jbe	.Ltmp2634 # Offset: 3330
    00000d08: 	movq	-0xf8(%rbp), %rdi
    00000d0f: 	movl	$0x11, %edx
    00000d14: 	leaq	DATAat0x372f4(%rip), %rsi
    00000d1b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3355
    00000d20: 	subq	$0x8, %rsp
    00000d24: 	pushq	-0xf8(%rbp)
    00000d2a: 	movq	%r13, %rdx
    00000d2d: 	movq	%r12, %rsi
    00000d30: 	movq	-0x110(%rbp), %r8
    00000d37: 	leaq	_Z23interleave3to4_version2IhEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000d3e: 	movq	%r14, %rdi
    00000d41: 	movq	-0x100(%rbp), %rcx
    00000d48: 	callq	"_Z19test_interleave3to4IhPFvPhhPKhS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3400
    00000d4d: 	movq	-0x60(%rbp), %rdi
    00000d51: 	popq	%rax
    00000d52: 	popq	%rdx
    00000d53: 	cmpq	%rbx, %rdi
    00000d56: 	je	.Ltmp2635 # Offset: 3414
    00000d58: 	movq	-0x50(%rbp), %rax
    00000d5c: 	leaq	0x1(%rax), %rsi
    00000d60: 	callq	_ZdlPvm@PLT # Offset: 3424
.Ltmp2635:
    00000d65: 	movq	-0xf8(%rbp), %r15
    00000d6c: 	movq	-0x108(%rbp), %rsi
    00000d73: 	leaq	DATAat0x37306(%rip), %rdx
    00000d7a: 	movq	%r15, %rdi
    00000d7d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3453
    00000d82: 	subq	$0x8, %rsp
    00000d86: 	movq	%r13, %rdx
    00000d89: 	movq	%r12, %rsi
    00000d8c: 	movq	%r14, %rdi
    00000d8f: 	pushq	%r15
    00000d91: 	movq	-0x110(%rbp), %r8
    00000d98: 	leaq	_Z23interleave3to4_version3IhEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000d9f: 	movq	-0x100(%rbp), %rcx
    00000da6: 	callq	"_Z19test_interleave3to4IhPFvPhhPKhS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3494
    00000dab: 	movq	-0x60(%rbp), %rdi
    00000daf: 	popq	%r11
    00000db1: 	popq	%r15
    00000db3: 	cmpq	%rbx, %rdi
    00000db6: 	je	.Ltmp2636 # Offset: 3510
    00000db8: 	movq	-0x50(%rbp), %rax
    00000dbc: 	leaq	0x1(%rax), %rsi
    00000dc0: 	callq	_ZdlPvm@PLT # Offset: 3520
.Ltmp2636:
    00000dc5: 	movq	-0xe0(%rbp), %rax
    00000dcc: 	movq	-0xd8(%rbp), %r15
    00000dd3: 	movq	%rbx, -0x60(%rbp)
    00000dd7: 	movq	%rax, %rcx
    00000dda: 	movq	%rax, -0x148(%rbp)
    00000de1: 	addq	%r15, %rcx
    00000de4: 	je	.Ltmp2637 # Offset: 3556
    00000de6: 	testq	%rax, %rax
    00000de9: 	je	.Ltmp2638 # Offset: 3561
.Ltmp2637:
    00000def: 	movq	%r15, -0xe8(%rbp)
    00000df6: 	cmpq	$0xf, %r15
    00000dfa: 	ja	.Ltmp2639 # Offset: 3578
    00000e00: 	cmpq	$0x1, %r15
    00000e04: 	jne	.Ltmp2640 # Offset: 3588
    00000e0a: 	movq	-0x148(%rbp), %rax
    00000e11: 	movzbl	(%rax), %eax
    00000e14: 	movb	%al, -0x50(%rbp)
    00000e17: 	movq	%rbx, %rax
.Ltmp2673:
    00000e1a: 	movq	%r15, -0x58(%rbp)
    00000e1e: 	movb	$0x0, (%rax,%r15)
    00000e23: 	movabsq	$0x3fffffffffffffff, %rax
    00000e2d: 	subq	-0x58(%rbp), %rax
    00000e31: 	cmpq	$0x10, %rax
    00000e35: 	jbe	.Ltmp2641 # Offset: 3637
    00000e3b: 	movq	-0xf8(%rbp), %rdi
    00000e42: 	movl	$0x11, %edx
    00000e47: 	leaq	DATAat0x37318(%rip), %rsi
    00000e4e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3662
    00000e53: 	subq	$0x8, %rsp
    00000e57: 	pushq	-0xf8(%rbp)
    00000e5d: 	movq	%r13, %rdx
    00000e60: 	movq	%r12, %rsi
    00000e63: 	movq	-0x110(%rbp), %r8
    00000e6a: 	leaq	_Z23interleave3to4_version4IhEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000e71: 	movq	%r14, %rdi
    00000e74: 	movq	-0x100(%rbp), %rcx
    00000e7b: 	callq	"_Z19test_interleave3to4IhPFvPhhPKhS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3707
    00000e80: 	movq	-0x60(%rbp), %rdi
    00000e84: 	popq	%r9
    00000e86: 	popq	%r10
    00000e88: 	cmpq	%rbx, %rdi
    00000e8b: 	je	.Ltmp2642 # Offset: 3723
    00000e8d: 	movq	-0x50(%rbp), %rax
    00000e91: 	leaq	0x1(%rax), %rsi
    00000e95: 	callq	_ZdlPvm@PLT # Offset: 3733
.Ltmp2642:
    00000e9a: 	movq	-0xf8(%rbp), %r15
    00000ea1: 	movq	-0x108(%rbp), %rsi
    00000ea8: 	leaq	DATAat0x3732a(%rip), %rdx
    00000eaf: 	movq	%r15, %rdi
    00000eb2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3762
    00000eb7: 	subq	$0x8, %rsp
    00000ebb: 	movq	%r13, %rdx
    00000ebe: 	movq	%r12, %rsi
    00000ec1: 	movq	%r14, %rdi
    00000ec4: 	pushq	%r15
    00000ec6: 	movq	-0x110(%rbp), %r8
    00000ecd: 	leaq	_Z23interleave3to4_version5IhEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000ed4: 	movq	-0x100(%rbp), %rcx
    00000edb: 	callq	"_Z19test_interleave3to4IhPFvPhhPKhS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3803
    00000ee0: 	popq	%rdi
    00000ee1: 	movq	-0x60(%rbp), %rdi
    00000ee5: 	popq	%r8
    00000ee7: 	cmpq	%rbx, %rdi
    00000eea: 	je	.Ltmp2643 # Offset: 3818
    00000eec: 	movq	-0x50(%rbp), %rax
    00000ef0: 	leaq	0x1(%rax), %rsi
    00000ef4: 	callq	_ZdlPvm@PLT # Offset: 3828
.Ltmp2643:
    00000ef9: 	movq	-0xf8(%rbp), %r15
    00000f00: 	movq	-0x108(%rbp), %rsi
    00000f07: 	leaq	DATAat0x3733c(%rip), %rdx
    00000f0e: 	movq	%r15, %rdi
    00000f11: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3857
    00000f16: 	subq	$0x8, %rsp
    00000f1a: 	movq	%r13, %rdx
    00000f1d: 	movq	%r12, %rsi
    00000f20: 	movq	%r14, %rdi
    00000f23: 	pushq	%r15
    00000f25: 	movq	-0x110(%rbp), %r8
    00000f2c: 	leaq	_Z23interleave3to4_version6IhEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000f33: 	movq	-0x100(%rbp), %rcx
    00000f3a: 	callq	"_Z19test_interleave3to4IhPFvPhhPKhS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3898
    00000f3f: 	movq	-0x60(%rbp), %rdi
    00000f43: 	popq	%rcx
    00000f44: 	popq	%rsi
    00000f45: 	cmpq	%rbx, %rdi
    00000f48: 	je	.Ltmp2644 # Offset: 3912
    00000f4a: 	movq	-0x50(%rbp), %rax
    00000f4e: 	leaq	0x1(%rax), %rsi
    00000f52: 	callq	_ZdlPvm@PLT # Offset: 3922
.Ltmp2644:
    00000f57: 	movq	-0x108(%rbp), %rsi
    00000f5e: 	leaq	-0x80(%rbp), %rdi
    00000f62: 	leaq	DATAat0x3734e(%rip), %rdx
    00000f69: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3945
    00000f6e: 	movl	iterations(%rip), %edx
    00000f74: 	movq	-0x80(%rbp), %rdi
    00000f78: 	xorl	%r8d, %r8d
    00000f7b: 	xorl	%ecx, %ecx
    00000f7d: 	movl	$0x13880, %esi
    00000f82: 	callq	_Z9summarizePKciiii # Offset: 3970
    00000f87: 	movl	-0x140(%rbp), %eax
    00000f8d: 	movq	-0xd8(%rbp), %r15
    00000f94: 	movq	%rbx, -0x60(%rbp)
    00000f98: 	movl	%eax, iterations(%rip)
    00000f9e: 	movq	-0xe0(%rbp), %rax
    00000fa5: 	movq	%rax, %rcx
    00000fa8: 	movq	%rax, -0x140(%rbp)
    00000faf: 	addq	%r15, %rcx
    00000fb2: 	je	.Ltmp2645 # Offset: 4018
    00000fb4: 	testq	%rax, %rax
    00000fb7: 	je	.Ltmp2646 # Offset: 4023
.Ltmp2645:
    00000fbd: 	movq	%r15, -0xe8(%rbp)
    00000fc4: 	cmpq	$0xf, %r15
    00000fc8: 	ja	.Ltmp2647 # Offset: 4040
    00000fce: 	cmpq	$0x1, %r15
    00000fd2: 	jne	.Ltmp2648 # Offset: 4050
    00000fd8: 	movq	-0x140(%rbp), %rax
    00000fdf: 	movzbl	(%rax), %eax
    00000fe2: 	movb	%al, -0x50(%rbp)
    00000fe5: 	movq	%rbx, %rax
.Ltmp2671:
    00000fe8: 	movq	%r15, -0x58(%rbp)
    00000fec: 	movb	$0x0, (%rax,%r15)
    00000ff1: 	movabsq	$0x3fffffffffffffff, %rax
    00000ffb: 	subq	-0x58(%rbp), %rax
    00000fff: 	cmpq	$0x10, %rax
    00001003: 	jbe	.Ltmp2649 # Offset: 4099
    00001009: 	movq	-0xf8(%rbp), %rdi
    00001010: 	movl	$0x11, %edx
    00001015: 	leaq	DATAat0x3735e(%rip), %rsi
    0000101c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4124
    00001021: 	subq	$0x8, %rsp
    00001025: 	pushq	-0xf8(%rbp)
    0000102b: 	movq	%r13, %rdx
    0000102e: 	movq	%r12, %rsi
    00001031: 	movq	-0x110(%rbp), %r8
    00001038: 	leaq	_Z23interleave4to4_version1IhEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    0000103f: 	movq	%r14, %rdi
    00001042: 	movq	-0x100(%rbp), %rcx
    00001049: 	callq	"_Z19test_interleave4to4IhPFvPhPKhS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4169
    0000104e: 	movq	-0x60(%rbp), %rdi
    00001052: 	popq	%rax
    00001053: 	popq	%rdx
    00001054: 	cmpq	%rbx, %rdi
    00001057: 	je	.Ltmp2650 # Offset: 4183
    00001059: 	movq	-0x50(%rbp), %rax
    0000105d: 	leaq	0x1(%rax), %rsi
    00001061: 	callq	_ZdlPvm@PLT # Offset: 4193
.Ltmp2650:
    00001066: 	movq	-0xf8(%rbp), %r15
    0000106d: 	movq	-0x108(%rbp), %rsi
    00001074: 	leaq	DATAat0x37370(%rip), %rdx
    0000107b: 	movq	%r15, %rdi
    0000107e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4222
    00001083: 	subq	$0x8, %rsp
    00001087: 	movq	%r13, %rdx
    0000108a: 	movq	%r12, %rsi
    0000108d: 	movq	%r14, %rdi
    00001090: 	pushq	%r15
    00001092: 	movq	-0x110(%rbp), %r8
    00001099: 	leaq	_Z23interleave4to4_version2IhEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    000010a0: 	movq	-0x100(%rbp), %rcx
    000010a7: 	callq	"_Z19test_interleave4to4IhPFvPhPKhS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4263
    000010ac: 	movq	-0x60(%rbp), %rdi
    000010b0: 	popq	%r11
    000010b2: 	popq	%r15
    000010b4: 	cmpq	%rbx, %rdi
    000010b7: 	je	.Ltmp2651 # Offset: 4279
    000010b9: 	movq	-0x50(%rbp), %rax
    000010bd: 	leaq	0x1(%rax), %rsi
    000010c1: 	callq	_ZdlPvm@PLT # Offset: 4289
.Ltmp2651:
    000010c6: 	movq	-0xf8(%rbp), %r15
    000010cd: 	movq	-0x108(%rbp), %rsi
    000010d4: 	leaq	DATAat0x37382(%rip), %rdx
    000010db: 	movq	%r15, %rdi
    000010de: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4318
    000010e3: 	subq	$0x8, %rsp
    000010e7: 	movq	%r13, %rdx
    000010ea: 	movq	%r12, %rsi
    000010ed: 	movq	%r14, %rdi
    000010f0: 	pushq	%r15
    000010f2: 	movq	-0x110(%rbp), %r8
    000010f9: 	leaq	_Z23interleave4to4_version3IhEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    00001100: 	movq	-0x100(%rbp), %rcx
    00001107: 	callq	"_Z19test_interleave4to4IhPFvPhPKhS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4359
    0000110c: 	movq	-0x60(%rbp), %rdi
    00001110: 	popq	%r9
    00001112: 	popq	%r10
    00001114: 	cmpq	%rbx, %rdi
    00001117: 	je	.Ltmp2652 # Offset: 4375
    00001119: 	movq	-0x50(%rbp), %rax
    0000111d: 	leaq	0x1(%rax), %rsi
    00001121: 	callq	_ZdlPvm@PLT # Offset: 4385
.Ltmp2652:
    00001126: 	movq	-0xf8(%rbp), %r15
    0000112d: 	movq	-0x108(%rbp), %rsi
    00001134: 	leaq	DATAat0x37394(%rip), %rdx
    0000113b: 	movq	%r15, %rdi
    0000113e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4414
    00001143: 	subq	$0x8, %rsp
    00001147: 	movq	%r13, %rdx
    0000114a: 	movq	%r12, %rsi
    0000114d: 	movq	%r14, %rdi
    00001150: 	pushq	%r15
    00001152: 	movq	-0x110(%rbp), %r8
    00001159: 	leaq	_Z23interleave4to4_version4IhEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    00001160: 	movq	-0x100(%rbp), %rcx
    00001167: 	callq	"_Z19test_interleave4to4IhPFvPhPKhS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4455
    0000116c: 	popq	%rdi
    0000116d: 	movq	-0x60(%rbp), %rdi
    00001171: 	popq	%r8
    00001173: 	cmpq	%rbx, %rdi
    00001176: 	je	.Ltmp2653 # Offset: 4470
    00001178: 	movq	-0x50(%rbp), %rax
    0000117c: 	leaq	0x1(%rax), %rsi
    00001180: 	callq	_ZdlPvm@PLT # Offset: 4480
.Ltmp2653:
    00001185: 	movq	-0xf8(%rbp), %r15
    0000118c: 	movq	-0x108(%rbp), %rsi
    00001193: 	leaq	DATAat0x373a6(%rip), %rdx
    0000119a: 	movq	%r15, %rdi
    0000119d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4509
    000011a2: 	subq	$0x8, %rsp
    000011a6: 	movq	%r13, %rdx
    000011a9: 	movq	%r12, %rsi
    000011ac: 	movq	%r14, %rdi
    000011af: 	pushq	%r15
    000011b1: 	movq	-0x110(%rbp), %r8
    000011b8: 	leaq	_Z23interleave4to4_version5IhEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    000011bf: 	movq	-0x100(%rbp), %rcx
    000011c6: 	callq	"_Z19test_interleave4to4IhPFvPhPKhS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4550
    000011cb: 	movq	-0x60(%rbp), %rdi
    000011cf: 	popq	%rcx
    000011d0: 	popq	%rsi
    000011d1: 	cmpq	%rbx, %rdi
    000011d4: 	je	.Ltmp2654 # Offset: 4564
    000011d6: 	movq	-0x50(%rbp), %rax
    000011da: 	leaq	0x1(%rax), %rsi
    000011de: 	callq	_ZdlPvm@PLT # Offset: 4574
.Ltmp2654:
    000011e3: 	movq	-0xf8(%rbp), %r15
    000011ea: 	movq	-0x108(%rbp), %rsi
    000011f1: 	leaq	DATAat0x373b8(%rip), %rdx
    000011f8: 	movq	%r15, %rdi
    000011fb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4603
    00001200: 	subq	$0x8, %rsp
    00001204: 	movq	%r13, %rdx
    00001207: 	movq	%r12, %rsi
    0000120a: 	movq	%r14, %rdi
    0000120d: 	pushq	%r15
    0000120f: 	movq	-0x110(%rbp), %r8
    00001216: 	leaq	_Z23interleave4to4_version6IhEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    0000121d: 	movq	-0x100(%rbp), %rcx
    00001224: 	callq	"_Z19test_interleave4to4IhPFvPhPKhS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4644
    00001229: 	movq	-0x60(%rbp), %rdi
    0000122d: 	popq	%rax
    0000122e: 	popq	%rdx
    0000122f: 	cmpq	%rbx, %rdi
    00001232: 	je	.Ltmp2655 # Offset: 4658
    00001234: 	movq	-0x50(%rbp), %rax
    00001238: 	leaq	0x1(%rax), %rsi
    0000123c: 	callq	_ZdlPvm@PLT # Offset: 4668
.Ltmp2655:
    00001241: 	movq	-0xe0(%rbp), %rax
    00001248: 	movq	-0xd8(%rbp), %r15
    0000124f: 	movq	%rbx, -0x60(%rbp)
    00001253: 	movq	%rax, %rcx
    00001256: 	movq	%rax, -0x108(%rbp)
    0000125d: 	addq	%r15, %rcx
    00001260: 	je	.Ltmp2656 # Offset: 4704
    00001262: 	testq	%rax, %rax
    00001265: 	je	.Ltmp2657 # Offset: 4709
.Ltmp2656:
    0000126b: 	movq	%r15, -0xe8(%rbp)
    00001272: 	cmpq	$0xf, %r15
    00001276: 	ja	.Ltmp2658 # Offset: 4726
    0000127c: 	cmpq	$0x1, %r15
    00001280: 	jne	.Ltmp2659 # Offset: 4736
    00001286: 	movq	-0x108(%rbp), %rax
    0000128d: 	movzbl	(%rax), %eax
    00001290: 	movb	%al, -0x50(%rbp)
    00001293: 	movq	%rbx, %rax
.Ltmp2683:
    00001296: 	movq	%r15, -0x58(%rbp)
    0000129a: 	movb	$0x0, (%rax,%r15)
    0000129f: 	movabsq	$0x3fffffffffffffff, %rax
    000012a9: 	subq	-0x58(%rbp), %rax
    000012ad: 	cmpq	$0xe, %rax
    000012b1: 	jbe	.Ltmp2660 # Offset: 4785
    000012b7: 	movq	-0xf8(%rbp), %rdi
    000012be: 	movl	$0xf, %edx
    000012c3: 	leaq	DATAat0x373ca(%rip), %rsi
    000012ca: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4810
    000012cf: 	movl	iterations(%rip), %edx
    000012d5: 	movq	-0x60(%rbp), %rdi
    000012d9: 	xorl	%r8d, %r8d
    000012dc: 	xorl	%ecx, %ecx
    000012de: 	movl	$0x13880, %esi
    000012e3: 	callq	_Z9summarizePKciiii # Offset: 4835
    000012e8: 	movl	-0x118(%rbp), %eax
    000012ee: 	movq	-0x60(%rbp), %rdi
    000012f2: 	movl	%eax, iterations(%rip)
    000012f8: 	cmpq	%rbx, %rdi
    000012fb: 	je	.Ltmp2661 # Offset: 4859
    000012fd: 	movq	-0x50(%rbp), %rax
    00001301: 	leaq	0x1(%rax), %rsi
    00001305: 	callq	_ZdlPvm@PLT # Offset: 4869
.Ltmp2661:
    0000130a: 	movq	-0x80(%rbp), %rdi
    0000130e: 	leaq	-0x70(%rbp), %rax
    00001312: 	cmpq	%rax, %rdi
    00001315: 	je	.Ltmp2662 # Offset: 4885
    00001317: 	movq	-0x70(%rbp), %rax
    0000131b: 	leaq	0x1(%rax), %rsi
    0000131f: 	callq	_ZdlPvm@PLT # Offset: 4895
.Ltmp2662:
    00001324: 	movq	-0xa0(%rbp), %rdi
    0000132b: 	leaq	-0x90(%rbp), %rax
    00001332: 	cmpq	%rax, %rdi
    00001335: 	je	.Ltmp2663 # Offset: 4917
    00001337: 	movq	-0x90(%rbp), %rax
    0000133e: 	leaq	0x1(%rax), %rsi
    00001342: 	callq	_ZdlPvm@PLT # Offset: 4930
.Ltmp2663:
    00001347: 	movq	-0xc0(%rbp), %rdi
    0000134e: 	cmpq	-0x130(%rbp), %rdi
    00001355: 	je	.Ltmp2664 # Offset: 4949
    00001357: 	movq	-0xb0(%rbp), %rax
    0000135e: 	leaq	0x1(%rax), %rsi
    00001362: 	callq	_ZdlPvm@PLT # Offset: 4962
.Ltmp2664:
    00001367: 	movl	$0x1, %esi
    0000136c: 	movq	%r14, %rdi
    0000136f: 	callq	_ZdlPvm@PLT # Offset: 4975
    00001374: 	movq	-0x110(%rbp), %rdi
    0000137b: 	movl	$0x1, %esi
    00001380: 	callq	_ZdlPvm@PLT # Offset: 4992
    00001385: 	movq	-0x100(%rbp), %rdi
    0000138c: 	movl	$0x1, %esi
    00001391: 	callq	_ZdlPvm@PLT # Offset: 5009
    00001396: 	movl	$0x1, %esi
    0000139b: 	movq	%r13, %rdi
    0000139e: 	callq	_ZdlPvm@PLT # Offset: 5022
    000013a3: 	movq	%r12, %rdi
    000013a6: 	movl	$0x1, %esi
    000013ab: 	callq	_ZdlPvm@PLT # Offset: 5035
    000013b0: 	movq	-0xe0(%rbp), %rdi
    000013b7: 	cmpq	-0x120(%rbp), %rdi
    000013be: 	je	.Ltmp2665 # Offset: 5054
    000013c0: 	movq	-0xd0(%rbp), %rax
    000013c7: 	leaq	0x1(%rax), %rsi
    000013cb: 	callq	_ZdlPvm@PLT # Offset: 5067
.Ltmp2665:
    000013d0: 	movq	-0x38(%rbp), %rax
    000013d4: 	subq	%fs:0x28, %rax
    000013dd: 	jne	.Ltmp2666 # Offset: 5085
    000013e3: 	leaq	-0x28(%rbp), %rsp
    000013e7: 	popq	%rbx
    000013e8: 	popq	%r12
    000013ea: 	popq	%r13
    000013ec: 	popq	%r14
    000013ee: 	popq	%r15
    000013f0: 	popq	%rbp
    000013f1: 	retq # Offset: 5105
    000013f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2564:
    000013f8: 	addq	$0x20, -0xf8(%rbp)
    00001400: 	movq	-0xf8(%rbp), %rax
    00001407: 	cmpq	%rbx, %rax
    0000140a: 	jne	.Ltmp2565 # Offset: 5130
    00001410: 	addq	$0x8, %r13
    00001414: 	cmpq	%r13, %r15
    00001417: 	ja	.Ltmp2566 # Offset: 5143
    0000141d: 	jmp	.Ltmp2667 # Offset: 5149
.Ltmp2584:
    00001422: 	testq	%r15, %r15
    00001425: 	jne	.Ltmp2668 # Offset: 5157
    0000142b: 	movq	%rbx, %rax
    0000142e: 	jmp	.Ltmp2669 # Offset: 5166
.Ltmp2648:
    00001433: 	testq	%r15, %r15
    00001436: 	jne	.Ltmp2670 # Offset: 5174
    0000143c: 	movq	%rbx, %rax
    0000143f: 	jmp	.Ltmp2671 # Offset: 5183
.Ltmp2640:
    00001444: 	testq	%r15, %r15
    00001447: 	jne	.Ltmp2672 # Offset: 5191
    0000144d: 	movq	%rbx, %rax
    00001450: 	jmp	.Ltmp2673 # Offset: 5200
.Ltmp2633:
    00001455: 	testq	%r15, %r15
    00001458: 	jne	.Ltmp2674 # Offset: 5208
    0000145e: 	movq	%rbx, %rax
    00001461: 	jmp	.Ltmp2675 # Offset: 5217
.Ltmp2627:
    00001466: 	testq	%r15, %r15
    00001469: 	jne	.Ltmp2676 # Offset: 5225
    0000146f: 	movq	%rbx, %rax
    00001472: 	jmp	.Ltmp2677 # Offset: 5234
.Ltmp2617:
    00001477: 	testq	%r15, %r15
    0000147a: 	jne	.Ltmp2678 # Offset: 5242
    00001480: 	movq	%rbx, %rax
    00001483: 	jmp	.Ltmp2679 # Offset: 5251
.Ltmp2612:
    00001488: 	testq	%r15, %r15
    0000148b: 	jne	.Ltmp2680 # Offset: 5259
    00001491: 	movq	-0x130(%rbp), %rax
    00001498: 	jmp	.Ltmp2681 # Offset: 5272
.Ltmp2659:
    0000149d: 	testq	%r15, %r15
    000014a0: 	jne	.Ltmp2682 # Offset: 5280
    000014a6: 	movq	%rbx, %rax
    000014a9: 	jmp	.Ltmp2683 # Offset: 5289
.Ltmp2605:
    000014ae: 	testq	%r15, %r15
    000014b1: 	jne	.Ltmp2684 # Offset: 5297
    000014b7: 	movq	%rbx, %rax
    000014ba: 	jmp	.Ltmp2685 # Offset: 5306
.Ltmp2596:
    000014bf: 	testq	%r15, %r15
    000014c2: 	jne	.Ltmp2686 # Offset: 5314
    000014c8: 	movq	%rbx, %rax
    000014cb: 	jmp	.Ltmp2687 # Offset: 5323
.Ltmp2590:
    000014d0: 	testq	%r15, %r15
    000014d3: 	jne	.Ltmp2688 # Offset: 5331
    000014d9: 	movq	%rbx, %rax
    000014dc: 	jmp	.Ltmp2689 # Offset: 5340
.Ltmp2611:
    000014e1: 	leaq	-0xe8(%rbp), %rsi
    000014e8: 	leaq	-0xc0(%rbp), %rdi
    000014ef: 	xorl	%edx, %edx
    000014f1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5361
    000014f6: 	movq	%rax, -0xc0(%rbp)
    000014fd: 	movq	%rax, %rdi
    00001500: 	movq	-0xe8(%rbp), %rax
    00001507: 	movq	%rax, -0xb0(%rbp)
.Ltmp2699:
    0000150e: 	movq	-0x140(%rbp), %rsi
    00001515: 	movq	%r15, %rdx
    00001518: 	callq	memcpy@PLT # Offset: 5400
    0000151d: 	movq	-0xe8(%rbp), %r15
    00001524: 	movq	-0xc0(%rbp), %rax
    0000152b: 	jmp	.Ltmp2681 # Offset: 5419
.Ltmp2604:
    00001530: 	movq	-0xf8(%rbp), %rdi
    00001537: 	leaq	-0xe8(%rbp), %rsi
    0000153e: 	xorl	%edx, %edx
    00001540: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5440
    00001545: 	movq	%rax, -0x60(%rbp)
    00001549: 	movq	%rax, %rdi
    0000154c: 	movq	-0xe8(%rbp), %rax
    00001553: 	movq	%rax, -0x50(%rbp)
.Ltmp2701:
    00001557: 	movq	-0x130(%rbp), %rsi
    0000155e: 	movq	%r15, %rdx
    00001561: 	callq	memcpy@PLT # Offset: 5473
    00001566: 	movq	-0xe8(%rbp), %r15
    0000156d: 	movq	-0x60(%rbp), %rax
    00001571: 	jmp	.Ltmp2685 # Offset: 5489
.Ltmp2595:
    00001576: 	movq	-0xf8(%rbp), %rdi
    0000157d: 	leaq	-0xe8(%rbp), %rsi
    00001584: 	xorl	%edx, %edx
    00001586: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5510
    0000158b: 	movq	%rax, -0x60(%rbp)
    0000158f: 	movq	%rax, %rdi
    00001592: 	movq	-0xe8(%rbp), %rax
    00001599: 	movq	%rax, -0x50(%rbp)
.Ltmp2702:
    0000159d: 	movq	-0x108(%rbp), %rsi
    000015a4: 	movq	%r15, %rdx
    000015a7: 	callq	memcpy@PLT # Offset: 5543
    000015ac: 	movq	-0xe8(%rbp), %r15
    000015b3: 	movq	-0x60(%rbp), %rax
    000015b7: 	jmp	.Ltmp2687 # Offset: 5559
.Ltmp2589:
    000015bc: 	movq	-0xf8(%rbp), %rdi
    000015c3: 	leaq	-0xe8(%rbp), %rsi
    000015ca: 	xorl	%edx, %edx
    000015cc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5580
    000015d1: 	movq	%rax, -0x60(%rbp)
    000015d5: 	movq	%rax, %rdi
    000015d8: 	movq	-0xe8(%rbp), %rax
    000015df: 	movq	%rax, -0x50(%rbp)
.Ltmp2703:
    000015e3: 	movq	-0x108(%rbp), %rsi
    000015ea: 	movq	%r15, %rdx
    000015ed: 	callq	memcpy@PLT # Offset: 5613
    000015f2: 	movq	-0xe8(%rbp), %r15
    000015f9: 	movq	-0x60(%rbp), %rax
    000015fd: 	jmp	.Ltmp2689 # Offset: 5629
.Ltmp2583:
    00001602: 	leaq	-0xe8(%rbp), %rsi
    00001609: 	leaq	-0x60(%rbp), %rdi
    0000160d: 	xorl	%edx, %edx
    0000160f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5647
    00001614: 	movq	%rax, -0x60(%rbp)
    00001618: 	movq	%rax, %rdi
    0000161b: 	movq	-0xe8(%rbp), %rax
    00001622: 	movq	%rax, -0x50(%rbp)
.Ltmp2693:
    00001626: 	movq	-0xf8(%rbp), %rsi
    0000162d: 	movq	%r15, %rdx
    00001630: 	callq	memcpy@PLT # Offset: 5680
    00001635: 	movq	-0xe8(%rbp), %r15
    0000163c: 	movq	-0x60(%rbp), %rax
    00001640: 	jmp	.Ltmp2669 # Offset: 5696
.Ltmp2639:
    00001645: 	movq	-0xf8(%rbp), %rdi
    0000164c: 	leaq	-0xe8(%rbp), %rsi
    00001653: 	xorl	%edx, %edx
    00001655: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5717
    0000165a: 	movq	%rax, -0x60(%rbp)
    0000165e: 	movq	%rax, %rdi
    00001661: 	movq	-0xe8(%rbp), %rax
    00001668: 	movq	%rax, -0x50(%rbp)
.Ltmp2695:
    0000166c: 	movq	-0x148(%rbp), %rsi
    00001673: 	movq	%r15, %rdx
    00001676: 	callq	memcpy@PLT # Offset: 5750
    0000167b: 	movq	-0xe8(%rbp), %r15
    00001682: 	movq	-0x60(%rbp), %rax
    00001686: 	jmp	.Ltmp2673 # Offset: 5766
.Ltmp2632:
    0000168b: 	movq	-0xf8(%rbp), %rdi
    00001692: 	leaq	-0xe8(%rbp), %rsi
    00001699: 	xorl	%edx, %edx
    0000169b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5787
    000016a0: 	movq	%rax, -0x60(%rbp)
    000016a4: 	movq	%rax, %rdi
    000016a7: 	movq	-0xe8(%rbp), %rax
    000016ae: 	movq	%rax, -0x50(%rbp)
.Ltmp2696:
    000016b2: 	movq	-0x148(%rbp), %rsi
    000016b9: 	movq	%r15, %rdx
    000016bc: 	callq	memcpy@PLT # Offset: 5820
    000016c1: 	movq	-0xe8(%rbp), %r15
    000016c8: 	movq	-0x60(%rbp), %rax
    000016cc: 	jmp	.Ltmp2675 # Offset: 5836
.Ltmp2658:
    000016d1: 	movq	-0xf8(%rbp), %rdi
    000016d8: 	leaq	-0xe8(%rbp), %rsi
    000016df: 	xorl	%edx, %edx
    000016e1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5857
    000016e6: 	movq	%rax, -0x60(%rbp)
    000016ea: 	movq	%rax, %rdi
    000016ed: 	movq	-0xe8(%rbp), %rax
    000016f4: 	movq	%rax, -0x50(%rbp)
.Ltmp2700:
    000016f8: 	movq	-0x108(%rbp), %rsi
    000016ff: 	movq	%r15, %rdx
    00001702: 	callq	memcpy@PLT # Offset: 5890
    00001707: 	movq	-0xe8(%rbp), %r15
    0000170e: 	movq	-0x60(%rbp), %rax
    00001712: 	jmp	.Ltmp2683 # Offset: 5906
.Ltmp2647:
    00001717: 	movq	-0xf8(%rbp), %rdi
    0000171e: 	leaq	-0xe8(%rbp), %rsi
    00001725: 	xorl	%edx, %edx
    00001727: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5927
    0000172c: 	movq	%rax, -0x60(%rbp)
    00001730: 	movq	%rax, %rdi
    00001733: 	movq	-0xe8(%rbp), %rax
    0000173a: 	movq	%rax, -0x50(%rbp)
.Ltmp2694:
    0000173e: 	movq	-0x140(%rbp), %rsi
    00001745: 	movq	%r15, %rdx
    00001748: 	callq	memcpy@PLT # Offset: 5960
    0000174d: 	movq	-0xe8(%rbp), %r15
    00001754: 	movq	-0x60(%rbp), %rax
    00001758: 	jmp	.Ltmp2671 # Offset: 5976
.Ltmp2626:
    0000175d: 	movq	-0xf8(%rbp), %rdi
    00001764: 	leaq	-0xe8(%rbp), %rsi
    0000176b: 	xorl	%edx, %edx
    0000176d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5997
    00001772: 	movq	%rax, -0x60(%rbp)
    00001776: 	movq	%rax, %rdi
    00001779: 	movq	-0xe8(%rbp), %rax
    00001780: 	movq	%rax, -0x50(%rbp)
.Ltmp2697:
    00001784: 	movq	-0x148(%rbp), %rsi
    0000178b: 	movq	%r15, %rdx
    0000178e: 	callq	memcpy@PLT # Offset: 6030
    00001793: 	movq	-0xe8(%rbp), %r15
    0000179a: 	movq	-0x60(%rbp), %rax
    0000179e: 	jmp	.Ltmp2677 # Offset: 6046
.Ltmp2616:
    000017a3: 	movq	-0xf8(%rbp), %rdi
    000017aa: 	leaq	-0xe8(%rbp), %rsi
    000017b1: 	xorl	%edx, %edx
    000017b3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6067
    000017b8: 	movq	%rax, -0x60(%rbp)
    000017bc: 	movq	%rax, %rdi
    000017bf: 	movq	-0xe8(%rbp), %rax
    000017c6: 	movq	%rax, -0x50(%rbp)
.Ltmp2698:
    000017ca: 	movq	-0x140(%rbp), %rsi
    000017d1: 	movq	%r15, %rdx
    000017d4: 	callq	memcpy@PLT # Offset: 6100
    000017d9: 	movq	-0xe8(%rbp), %r15
    000017e0: 	movq	-0x60(%rbp), %rax
    000017e4: 	jmp	.Ltmp2679 # Offset: 6116
.Ltmp2567:
    000017e9: 	movq	-0x108(%rbp), %rcx
    000017f0: 	movq	%rsi, %rbx
    000017f3: 	cmpq	%rcx, %rsi
    000017f6: 	je	.Ltmp2572 # Offset: 6134
.Ltmp2692:
    000017fc: 	movq	(%rbx), %rdi
    000017ff: 	leaq	0x10(%rbx), %rax
    00001803: 	cmpq	%rax, %rdi
    00001806: 	je	.Ltmp2690 # Offset: 6150
.Ltmp2691:
    00001808: 	movq	0x10(%rbx), %rax
    0000180c: 	addq	$0x20, %rbx
    00001810: 	leaq	0x1(%rax), %rsi
    00001814: 	movq	%rax, -0xf8(%rbp)
    0000181b: 	callq	_ZdlPvm@PLT # Offset: 6171
    00001820: 	cmpq	%rbx, -0x108(%rbp)
    00001827: 	je	.Ltmp2572 # Offset: 6183
    0000182d: 	movq	(%rbx), %rdi
    00001830: 	leaq	0x10(%rbx), %rax
    00001834: 	cmpq	%rax, %rdi
    00001837: 	jne	.Ltmp2691 # Offset: 6199
.Ltmp2690:
    00001839: 	movq	%rbx, %rax
    0000183c: 	addq	$0x20, %rax
    00001840: 	movq	%rax, %rbx
    00001843: 	cmpq	%rax, -0x108(%rbp)
    0000184a: 	jne	.Ltmp2692 # Offset: 6218
    0000184c: 	jmp	.Ltmp2572 # Offset: 6220
.Ltmp2585:
    00001851: 	leaq	DATAat0x37182(%rip), %rdi
    00001858: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6232
.Ltmp2588:
    0000185d: 	leaq	DATAat0x37158(%rip), %rdi
    00001864: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6244
.Ltmp2591:
    00001869: 	leaq	DATAat0x37182(%rip), %rdi
    00001870: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6256
.Ltmp2594:
    00001875: 	leaq	DATAat0x37158(%rip), %rdi
    0000187c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6268
.Ltmp2597:
    00001881: 	leaq	DATAat0x37182(%rip), %rdi
    00001888: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6280
.Ltmp2603:
    0000188d: 	leaq	DATAat0x37158(%rip), %rdi
    00001894: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6292
.Ltmp2606:
    00001899: 	leaq	DATAat0x37182(%rip), %rdi
    000018a0: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6304
.Ltmp2610:
    000018a5: 	leaq	DATAat0x37158(%rip), %rdi
    000018ac: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6316
.Ltmp2613:
    000018b1: 	leaq	DATAat0x37182(%rip), %rdi
    000018b8: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6328
.Ltmp2615:
    000018bd: 	leaq	DATAat0x37158(%rip), %rdi
    000018c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6340
.Ltmp2618:
    000018c9: 	leaq	DATAat0x37182(%rip), %rdi
    000018d0: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6352
.Ltmp2625:
    000018d5: 	leaq	DATAat0x37158(%rip), %rdi
    000018dc: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6364
.Ltmp2628:
    000018e1: 	leaq	DATAat0x37182(%rip), %rdi
    000018e8: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6376
.Ltmp2631:
    000018ed: 	leaq	DATAat0x37158(%rip), %rdi
    000018f4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6388
.Ltmp2634:
    000018f9: 	leaq	DATAat0x37182(%rip), %rdi
    00001900: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6400
.Ltmp2638:
    00001905: 	leaq	DATAat0x37158(%rip), %rdi
    0000190c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6412
.Ltmp2641:
    00001911: 	leaq	DATAat0x37182(%rip), %rdi
    00001918: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6424
.Ltmp2646:
    0000191d: 	leaq	DATAat0x37158(%rip), %rdi
    00001924: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6436
.Ltmp2649:
    00001929: 	leaq	DATAat0x37182(%rip), %rdi
    00001930: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6448
.Ltmp2657:
    00001935: 	leaq	DATAat0x37158(%rip), %rdi
    0000193c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6460
.Ltmp2660:
    00001941: 	leaq	DATAat0x37182(%rip), %rdi
    00001948: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6472
.Ltmp2666:
    0000194d: 	callq	__stack_chk_fail@PLT # Offset: 6477
.Ltmp2668:
    00001952: 	movq	%rbx, %rdi
    00001955: 	jmp	.Ltmp2693 # Offset: 6485
.Ltmp2670:
    0000195a: 	movq	%rbx, %rdi
    0000195d: 	jmp	.Ltmp2694 # Offset: 6493
.Ltmp2672:
    00001962: 	movq	%rbx, %rdi
    00001965: 	jmp	.Ltmp2695 # Offset: 6501
.Ltmp2674:
    0000196a: 	movq	%rbx, %rdi
    0000196d: 	jmp	.Ltmp2696 # Offset: 6509
.Ltmp2676:
    00001972: 	movq	%rbx, %rdi
    00001975: 	jmp	.Ltmp2697 # Offset: 6517
.Ltmp2678:
    0000197a: 	movq	%rbx, %rdi
    0000197d: 	jmp	.Ltmp2698 # Offset: 6525
.Ltmp2680:
    00001982: 	movq	-0x130(%rbp), %rdi
    00001989: 	jmp	.Ltmp2699 # Offset: 6537
.Ltmp2682:
    0000198e: 	movq	%rbx, %rdi
    00001991: 	jmp	.Ltmp2700 # Offset: 6545
.Ltmp2684:
    00001996: 	movq	%rbx, %rdi
    00001999: 	jmp	.Ltmp2701 # Offset: 6553
.Ltmp2686:
    0000199e: 	movq	%rbx, %rdi
    000019a1: 	jmp	.Ltmp2702 # Offset: 6561
.Ltmp2688:
    000019a6: 	movq	%rbx, %rdi
    000019a9: 	jmp	.Ltmp2703 # Offset: 6569
.Ltmp2582:
    000019ae: 	leaq	DATAat0x37158(%rip), %rdi
    000019b5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6581
    000019ba: 	endbr64
    000019be: 	movq	%rax, %rbx
    000019c1: 	jmp	.Ltmp2704 # Offset: 6593
    000019c3: 	endbr64
    000019c7: 	movq	%rax, %rbx
    000019ca: 	jmp	.Ltmp2705 # Offset: 6602
.Ltmp2716:
    000019cc: 	movq	-0x60(%rbp), %rdi
    000019d0: 	cmpq	%rbx, %rdi
    000019d3: 	jne	.Ltmp2706 # Offset: 6611
.Ltmp2721:
    000019d9: 	movq	%r15, %rbx
.Ltmp2715:
    000019dc: 	movq	-0xc0(%rbp), %rdi
    000019e3: 	cmpq	-0x130(%rbp), %rdi
    000019ea: 	je	.Ltmp2707 # Offset: 6634
    000019ec: 	movq	-0xb0(%rbp), %rax
    000019f3: 	leaq	0x1(%rax), %rsi
    000019f7: 	callq	_ZdlPvm@PLT # Offset: 6647
.Ltmp2707:
    000019fc: 	movl	$0x1, %esi
    00001a01: 	movq	%r14, %rdi
    00001a04: 	callq	_ZdlPvm@PLT # Offset: 6660
.Ltmp2722:
    00001a09: 	movq	-0x110(%rbp), %rdi
    00001a10: 	movl	$0x1, %esi
    00001a15: 	callq	_ZdlPvm@PLT # Offset: 6677
.Ltmp2709:
    00001a1a: 	movq	-0x100(%rbp), %rdi
    00001a21: 	movl	$0x1, %esi
    00001a26: 	callq	_ZdlPvm@PLT # Offset: 6694
.Ltmp2711:
    00001a2b: 	movl	$0x1, %esi
    00001a30: 	movq	%r13, %rdi
    00001a33: 	callq	_ZdlPvm@PLT # Offset: 6707
.Ltmp2704:
    00001a38: 	movl	$0x1, %esi
    00001a3d: 	movq	%r12, %rdi
    00001a40: 	callq	_ZdlPvm@PLT # Offset: 6720
.Ltmp2705:
    00001a45: 	movq	-0xe0(%rbp), %rdi
    00001a4c: 	cmpq	-0x120(%rbp), %rdi
    00001a53: 	je	.Ltmp2708 # Offset: 6739
    00001a55: 	movq	-0xd0(%rbp), %rax
    00001a5c: 	leaq	0x1(%rax), %rsi
    00001a60: 	callq	_ZdlPvm@PLT # Offset: 6752
.Ltmp2708:
    00001a65: 	movq	%rbx, %rdi
    00001a68: 	callq	_Unwind_Resume@PLT # Offset: 6760
    00001a6d: 	endbr64
    00001a71: 	movq	%rax, %rbx
    00001a74: 	jmp	.Ltmp2709 # Offset: 6772
    00001a76: 	endbr64
.Ltmp2712:
    00001a7a: 	movq	%rax, %r15
    00001a7d: 	jmp	.Ltmp2710 # Offset: 6781
    00001a7f: 	endbr64
    00001a83: 	movq	%rax, %rbx
    00001a86: 	jmp	.Ltmp2711 # Offset: 6790
    00001a88: 	endbr64
    00001a8c: 	jmp	.Ltmp2712 # Offset: 6796
.Ltmp2710:
    00001a8e: 	movq	-0x60(%rbp), %rdi
    00001a92: 	cmpq	%rbx, %rdi
    00001a95: 	je	.Ltmp2713 # Offset: 6805
    00001a97: 	movq	-0x50(%rbp), %rax
    00001a9b: 	leaq	0x1(%rax), %rsi
    00001a9f: 	callq	_ZdlPvm@PLT # Offset: 6815
.Ltmp2713:
    00001aa4: 	movq	%r15, %rbx
.Ltmp2727:
    00001aa7: 	movq	-0x80(%rbp), %rdi
    00001aab: 	leaq	-0x70(%rbp), %rax
    00001aaf: 	cmpq	%rax, %rdi
    00001ab2: 	je	.Ltmp2714 # Offset: 6834
    00001ab4: 	movq	-0x70(%rbp), %rax
    00001ab8: 	leaq	0x1(%rax), %rsi
    00001abc: 	callq	_ZdlPvm@PLT # Offset: 6844
.Ltmp2714:
    00001ac1: 	movq	-0xa0(%rbp), %rdi
    00001ac8: 	leaq	-0x90(%rbp), %rax
    00001acf: 	cmpq	%rax, %rdi
    00001ad2: 	je	.Ltmp2715 # Offset: 6866
    00001ad8: 	movq	-0x90(%rbp), %rax
    00001adf: 	leaq	0x1(%rax), %rsi
    00001ae3: 	callq	_ZdlPvm@PLT # Offset: 6883
    00001ae8: 	jmp	.Ltmp2715 # Offset: 6888
    00001aed: 	endbr64
    00001af1: 	jmp	.Ltmp2712 # Offset: 6897
    00001af3: 	endbr64
.Ltmp2725:
    00001af7: 	movq	%rax, %rbx
    00001afa: 	jmp	.Ltmp2715 # Offset: 6906
    00001aff: 	endbr64
.Ltmp2717:
    00001b03: 	movq	%rax, %r15
    00001b06: 	jmp	.Ltmp2716 # Offset: 6918
    00001b0b: 	endbr64
    00001b0f: 	jmp	.Ltmp2717 # Offset: 6927
    00001b11: 	endbr64
.Ltmp2719:
    00001b15: 	movq	%rax, %r15
    00001b18: 	jmp	.Ltmp2718 # Offset: 6936
    00001b1a: 	endbr64
    00001b1e: 	jmp	.Ltmp2719 # Offset: 6942
    00001b20: 	endbr64
    00001b24: 	jmp	.Ltmp2719 # Offset: 6948
.Ltmp2718:
    00001b26: 	movq	-0x60(%rbp), %rdi
    00001b2a: 	cmpq	%rbx, %rdi
    00001b2d: 	je	.Ltmp2720 # Offset: 6957
    00001b2f: 	movq	-0x50(%rbp), %rax
    00001b33: 	leaq	0x1(%rax), %rsi
    00001b37: 	callq	_ZdlPvm@PLT # Offset: 6967
.Ltmp2720:
    00001b3c: 	movq	%r15, %rbx
    00001b3f: 	jmp	.Ltmp2707 # Offset: 6975
    00001b44: 	endbr64
    00001b48: 	jmp	.Ltmp2717 # Offset: 6984
.Ltmp2706:
    00001b4a: 	movq	-0x50(%rbp), %rax
    00001b4e: 	leaq	0x1(%rax), %rsi
    00001b52: 	callq	_ZdlPvm@PLT # Offset: 6994
    00001b57: 	jmp	.Ltmp2721 # Offset: 6999
    00001b5c: 	endbr64
    00001b60: 	movq	%rax, %rbx
    00001b63: 	jmp	.Ltmp2722 # Offset: 7011
    00001b68: 	endbr64
    00001b6c: 	jmp	.Ltmp2719 # Offset: 7020
    00001b6e: 	endbr64
    00001b72: 	jmp	.Ltmp2719 # Offset: 7026
    00001b74: 	endbr64
    00001b78: 	jmp	.Ltmp2719 # Offset: 7032
    00001b7a: 	endbr64
    00001b7e: 	movq	%rax, %rbx
    00001b81: 	jmp	.Ltmp2714 # Offset: 7041
    00001b86: 	endbr64
    00001b8a: 	jmp	.Ltmp2719 # Offset: 7050
    00001b8c: 	endbr64
    00001b90: 	jmp	.Ltmp2719 # Offset: 7056
    00001b92: 	endbr64
    00001b96: 	jmp	.Ltmp2719 # Offset: 7062
    00001b9b: 	endbr64
.Ltmp2726:
    00001b9f: 	movq	%rax, %r15
    00001ba2: 	jmp	.Ltmp2723 # Offset: 7074
    00001ba4: 	endbr64
    00001ba8: 	jmp	.Ltmp2719 # Offset: 7080
    00001bad: 	endbr64
    00001bb1: 	jmp	.Ltmp2719 # Offset: 7089
    00001bb6: 	endbr64
    00001bba: 	movq	%rax, %rbx
    00001bbd: 	jmp	.Ltmp2707 # Offset: 7101
.Ltmp2723:
    00001bc2: 	movq	-0x60(%rbp), %rdi
    00001bc6: 	cmpq	%rbx, %rdi
    00001bc9: 	je	.Ltmp2724 # Offset: 7113
    00001bcb: 	movq	-0x50(%rbp), %rax
    00001bcf: 	leaq	0x1(%rax), %rsi
    00001bd3: 	callq	_ZdlPvm@PLT # Offset: 7123
.Ltmp2724:
    00001bd8: 	movq	%r15, %rbx
    00001bdb: 	jmp	.Ltmp2714 # Offset: 7131
    00001be0: 	endbr64
    00001be4: 	jmp	.Ltmp2719 # Offset: 7140
    00001be9: 	endbr64
    00001bed: 	jmp	.Ltmp2717 # Offset: 7149
    00001bf2: 	endbr64
    00001bf6: 	jmp	.Ltmp2717 # Offset: 7158
    00001bfb: 	endbr64
    00001bff: 	jmp	.Ltmp2717 # Offset: 7167
    00001c04: 	endbr64
    00001c08: 	jmp	.Ltmp2725 # Offset: 7176
    00001c0d: 	endbr64
    00001c11: 	jmp	.Ltmp2726 # Offset: 7185
    00001c13: 	endbr64
    00001c17: 	jmp	.Ltmp2726 # Offset: 7191
    00001c19: 	endbr64
    00001c1d: 	jmp	.Ltmp2726 # Offset: 7197
    00001c1f: 	endbr64
    00001c23: 	movq	%rax, %rbx
    00001c26: 	jmp	.Ltmp2727 # Offset: 7206
    00001c2b: 	endbr64
    00001c2f: 	jmp	.Ltmp2712 # Offset: 7215
    00001c34: 	endbr64
    00001c38: 	jmp	.Ltmp2712 # Offset: 7224
    00001c3d: 	endbr64
    00001c41: 	jmp	.Ltmp2726 # Offset: 7233
    00001c46: 	endbr64
    00001c4a: 	jmp	.Ltmp2726 # Offset: 7242
    00001c4f: 	endbr64
    00001c53: 	jmp	.Ltmp2712 # Offset: 7251
    00001c58: 	endbr64
    00001c5c: 	jmp	.Ltmp2712 # Offset: 7260
    00001c61: 	endbr64
    00001c65: 	jmp	.Ltmp2712 # Offset: 7269
    00001c6a: 	endbr64
    00001c6e: 	jmp	.Ltmp2712 # Offset: 7278
    00001c73: 	endbr64
    00001c77: 	jmp	.Ltmp2726 # Offset: 7287
    00001c7c: 	endbr64
    00001c80: 	jmp	.Ltmp2726 # Offset: 7296
    00001c85: 	endbr64
    00001c89: 	jmp	.Ltmp2726 # Offset: 7305
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIhEvv"

Binary Function "_Z19test_interleave3to4IjPFvPjjPKjS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z19test_interleave3to4IjPFvPjjPKjS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z19test_interleave3to4IjPFvPjjPKjS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/interleave.cpp/1
  Number      : 246
  State       : disassembled
  Address     : 0x2ca90
  Size        : 0x2d7
  MaxSize     : 0x2e0
  Offset      : 0x2ca90
  Section     : .text
  Orc Section : .local.text._Z19test_interleave3to4IjPFvPjjPKjS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0245:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%r8, %r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rcx, %r13
    0000000c: 	pushq	%r12
    0000000e: 	movq	%rdx, %r12
    00000011: 	movl	$0x138800, %edx
    00000016: 	pushq	%rbp
    00000017: 	movq	%rsi, %rbp
    0000001a: 	xorl	%esi, %esi
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x38, %rsp
    00000024: 	movq	0x70(%rsp), %rax
    00000029: 	movq	%r9, 0x8(%rsp)
    0000002e: 	movq	%rax, 0x10(%rsp)
    00000033: 	movq	%fs:0x28, %rax
    0000003c: 	movq	%rax, 0x28(%rsp)
    00000041: 	xorl	%eax, %eax
    00000043: 	callq	memset@PLT # Offset: 67
    00000048: 	movd	(%rbp), %xmm1
    0000004d: 	movq	%rbp, %rax
    00000050: 	leaq	0x4e200(%rbp), %rdx
    00000057: 	pshufd	$0x0, %xmm1, %xmm0
    0000005c: 	nopl	(%rax) # Size: 4
.Ltmp2728:
    00000060: 	movups	%xmm0, (%rax)
    00000063: 	addq	$0x10, %rax
    00000067: 	cmpq	%rdx, %rax
    0000006a: 	jne	.Ltmp2728 # Offset: 106
    0000006c: 	callq	clock@PLT # Offset: 108
    00000071: 	xorl	%r15d, %r15d
    00000074: 	movq	%rax, start_time(%rip)
    0000007b: 	movl	iterations(%rip), %eax
    00000081: 	testl	%eax, %eax
    00000083: 	jle	.Ltmp2729 # Offset: 131
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp2730:
    00000088: 	movl	(%rbp), %esi
    0000008b: 	movq	0x8(%rsp), %rax
    00000090: 	movq	%r14, %r8
    00000093: 	movq	%r13, %rcx
    00000096: 	movl	$0x13880, %r9d
    0000009c: 	movq	%r12, %rdx
    0000009f: 	movq	%rbx, %rdi
    000000a2: 	addl	$0x1, %r15d
    000000a6: 	callq	*%rax # Offset: 166
    000000a8: 	cmpl	iterations(%rip), %r15d
    000000af: 	jl	.Ltmp2730 # Offset: 175
.Ltmp2729:
    000000b1: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000b8: 	movq	"_ZL7gLabels/1"+48(%rip), %rcx
    000000bf: 	subq	$0x20, %rax
    000000c3: 	cmpq	%rax, %rcx
    000000c6: 	je	.Ltmp2731 # Offset: 198
    000000cc: 	movq	0x10(%rsp), %rax
    000000d1: 	leaq	0x10(%rcx), %rdi
    000000d5: 	movq	%rdi, (%rcx)
    000000d8: 	movq	(%rax), %r8
    000000db: 	movq	0x8(%rax), %r15
    000000df: 	movq	%r8, %rax
    000000e2: 	addq	%r15, %rax
    000000e5: 	je	.Ltmp2732 # Offset: 229
    000000e7: 	testq	%r8, %r8
    000000ea: 	je	.Ltmp2733 # Offset: 234
.Ltmp2732:
    000000f0: 	movq	%r15, 0x20(%rsp)
    000000f5: 	cmpq	$0xf, %r15
    000000f9: 	ja	.Ltmp2734 # Offset: 249
    000000ff: 	cmpq	$0x1, %r15
    00000103: 	jne	.Ltmp2735 # Offset: 259
    00000109: 	movzbl	(%r8), %eax
    0000010d: 	movb	%al, 0x10(%rcx)
.Ltmp2740:
    00000110: 	movq	%r15, 0x8(%rcx)
    00000114: 	movb	$0x0, (%rdi,%r15)
    00000119: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000120: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000127: 	addq	$0x20, %rax
    0000012b: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000132: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000139: 	je	.Ltmp2736 # Offset: 313
.Ltmp2741:
    0000013f: 	movq	-0x20(%rax), %r15
    00000143: 	callq	clock@PLT # Offset: 323
    00000148: 	pxor	%xmm0, %xmm0
    0000014c: 	movq	%rax, end_time(%rip)
    00000153: 	movq	%r15, %rdi
    00000156: 	subq	start_time(%rip), %rax
    0000015d: 	cvtsi2sd	%rax, %xmm0
    00000162: 	divsd	DATAat0x37530(%rip), %xmm0
    0000016a: 	callq	_Z13record_resultdPKc # Offset: 362
    0000016f: 	xorl	%eax, %eax
.Ltmp2738:
    00000171: 	movl	(%rbp,%rax), %esi
    00000175: 	cmpl	%esi, (%rbx,%rax,4)
    00000178: 	jne	.Ltmp2737 # Offset: 376
    0000017e: 	movl	(%r12,%rax), %ecx
    00000182: 	cmpl	%ecx, 0x4(%rbx,%rax,4)
    00000186: 	jne	.Ltmp2737 # Offset: 390
    0000018c: 	movl	(%r13,%rax), %edi
    00000191: 	cmpl	%edi, 0x8(%rbx,%rax,4)
    00000195: 	jne	.Ltmp2737 # Offset: 405
    0000019b: 	movl	(%r14,%rax), %esi
    0000019f: 	cmpl	%esi, 0xc(%rbx,%rax,4)
    000001a3: 	jne	.Ltmp2737 # Offset: 419
    000001a9: 	addq	$0x4, %rax
    000001ad: 	cmpq	$0x4e200, %rax
    000001b3: 	jne	.Ltmp2738 # Offset: 435
    000001b5: 	movq	0x28(%rsp), %rax
    000001ba: 	subq	%fs:0x28, %rax
    000001c3: 	jne	.Ltmp2739 # Offset: 451
    000001c9: 	addq	$0x38, %rsp
    000001cd: 	popq	%rbx
    000001ce: 	popq	%rbp
    000001cf: 	popq	%r12
    000001d1: 	popq	%r13
    000001d3: 	popq	%r14
    000001d5: 	popq	%r15
    000001d7: 	retq # Offset: 471
    000001d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2734:
    000001e0: 	movq	%rcx, %rdi
    000001e3: 	leaq	0x20(%rsp), %rsi
    000001e8: 	xorl	%edx, %edx
    000001ea: 	movq	%r8, 0x18(%rsp)
    000001ef: 	movq	%rcx, 0x8(%rsp)
    000001f4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 500
    000001f9: 	movq	0x8(%rsp), %rcx
    000001fe: 	movq	0x18(%rsp), %r8
    00000203: 	movq	%rax, %rdi
    00000206: 	movq	%rax, (%rcx)
    00000209: 	movq	0x20(%rsp), %rax
    0000020e: 	movq	%rax, 0x10(%rcx)
.Ltmp2742:
    00000212: 	movq	%r15, %rdx
    00000215: 	movq	%r8, %rsi
    00000218: 	movq	%rcx, 0x8(%rsp)
    0000021d: 	callq	memcpy@PLT # Offset: 541
    00000222: 	movq	0x8(%rsp), %rcx
    00000227: 	movq	0x20(%rsp), %r15
    0000022c: 	movq	(%rcx), %rdi
    0000022f: 	jmp	.Ltmp2740 # Offset: 559
    00000234: 	nopl	(%rax) # Size: 4
.Ltmp2737:
    00000238: 	movq	0x28(%rsp), %rax
    0000023d: 	subq	%fs:0x28, %rax
    00000246: 	jne	.Ltmp2739 # Offset: 582
    00000248: 	movq	0x10(%rsp), %rax
    0000024d: 	leaq	DATAat0x371c8(%rip), %rsi
    00000254: 	movl	$0x1, %edi
    00000259: 	movq	(%rax), %rdx
    0000025c: 	addq	$0x38, %rsp
    00000260: 	xorl	%eax, %eax
    00000262: 	popq	%rbx
    00000263: 	popq	%rbp
    00000264: 	popq	%r12
    00000266: 	popq	%r13
    00000268: 	popq	%r14
    0000026a: 	popq	%r15
    0000026c: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 620
    00000271: 	nopl	(%rax) # Size: 7
.Ltmp2731:
    00000278: 	movq	0x10(%rsp), %rsi
    0000027d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000284: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 644
    00000289: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000290: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000297: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000029e: 	jne	.Ltmp2741 # Offset: 670
.Ltmp2736:
    000002a4: 	movq	-0x8(%rdx), %rax
    000002a8: 	addq	$0x200, %rax
    000002ae: 	jmp	.Ltmp2741 # Offset: 686
    000002b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2735:
    000002b8: 	testq	%r15, %r15
    000002bb: 	je	.Ltmp2740 # Offset: 699
    000002c1: 	jmp	.Ltmp2742 # Offset: 705
.Ltmp2739:
    000002c6: 	callq	__stack_chk_fail@PLT # Offset: 710
.Ltmp2733:
    000002cb: 	leaq	DATAat0x37158(%rip), %rdi
    000002d2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 722
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave3to4IjPFvPjjPKjS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z11TestOneTypeIjEvv" after disassembly {
  Number      : 247
  State       : disassembled
  Address     : 0x2cd70
  Size        : 0x1c86
  MaxSize     : 0x1c90
  Offset      : 0x2cd70
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIjEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0246:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rsp, %rbp
    00000008: 	pushq	%r15
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x128, %rsp
    00000018: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm0
    00000020: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm1
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, -0x38(%rbp)
    00000035: 	xorl	%eax, %eax
    00000037: 	leaq	-0xd0(%rbp), %rax
    0000003e: 	movb	$0x0, -0xc8(%rbp)
    00000045: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    0000004c: 	movq	%rax, -0x120(%rbp)
    00000053: 	movhlps	%xmm0, %xmm4
    00000056: 	movq	%xmm1, %rsi
    0000005b: 	movq	%rax, -0xe0(%rbp)
    00000062: 	movq	%xmm4, %rcx
    00000067: 	movabsq	$0x745f3233746e6975, %rax
    00000071: 	movq	%rax, -0xd0(%rbp)
    00000078: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000007f: 	leaq	0x8(%rcx), %r12
    00000083: 	movq	$0x8, -0xd8(%rbp)
    0000008e: 	movq	%rax, -0x108(%rbp)
    00000095: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000009c: 	movaps	%xmm1, -0x130(%rbp)
    000000a3: 	movq	%rax, -0x118(%rbp)
    000000aa: 	movaps	%xmm0, -0x140(%rbp)
    000000b1: 	movq	%xmm4, -0x148(%rbp)
    000000b9: 	movq	%xmm0, -0x110(%rbp)
    000000c1: 	cmpq	%r12, %rax
    000000c4: 	jbe	.Ltmp2743 # Offset: 196
    000000c6: 	movq	%xmm1, -0x150(%rbp)
    000000ce: 	movq	%r12, %r13
    000000d1: 	movq	%rax, %r15
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp2746:
    000000d8: 	movq	(%r13), %rax
    000000dc: 	movq	%rax, -0xf8(%rbp)
    000000e3: 	leaq	0x200(%rax), %rbx
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2745:
    000000f0: 	movq	-0xf8(%rbp), %rax
    000000f7: 	movq	(%rax), %rdi
    000000fa: 	leaq	0x10(%rax), %rdx
    000000fe: 	cmpq	%rdx, %rdi
    00000101: 	je	.Ltmp2744 # Offset: 257
    00000107: 	movq	0x10(%rax), %rcx
    0000010b: 	leaq	0x1(%rcx), %rsi
    0000010f: 	movq	%rcx, -0x100(%rbp)
    00000116: 	callq	_ZdlPvm@PLT # Offset: 278
    0000011b: 	addq	$0x20, -0xf8(%rbp)
    00000123: 	movq	-0xf8(%rbp), %rax
    0000012a: 	cmpq	%rbx, %rax
    0000012d: 	jne	.Ltmp2745 # Offset: 301
    0000012f: 	addq	$0x8, %r13
    00000133: 	cmpq	%r13, %r15
    00000136: 	ja	.Ltmp2746 # Offset: 310
.Ltmp2847:
    00000138: 	movq	-0x150(%rbp), %rsi
.Ltmp2743:
    0000013f: 	movq	-0x148(%rbp), %rcx
    00000146: 	cmpq	%rcx, -0x118(%rbp)
    0000014d: 	je	.Ltmp2747 # Offset: 333
    00000153: 	movq	-0x110(%rbp), %rcx
    0000015a: 	movq	%rsi, %rbx
    0000015d: 	cmpq	%rcx, %rsi
    00000160: 	je	.Ltmp2748 # Offset: 352
.Ltmp2751:
    00000162: 	movq	(%rbx), %rdi
    00000165: 	leaq	0x10(%rbx), %rax
    00000169: 	cmpq	%rax, %rdi
    0000016c: 	je	.Ltmp2749 # Offset: 364
.Ltmp2750:
    0000016e: 	movq	0x10(%rbx), %rax
    00000172: 	addq	$0x20, %rbx
    00000176: 	leaq	0x1(%rax), %rsi
    0000017a: 	movq	%rax, -0xf8(%rbp)
    00000181: 	callq	_ZdlPvm@PLT # Offset: 385
    00000186: 	cmpq	-0x110(%rbp), %rbx
    0000018d: 	je	.Ltmp2748 # Offset: 397
    0000018f: 	movq	(%rbx), %rdi
    00000192: 	leaq	0x10(%rbx), %rax
    00000196: 	cmpq	%rax, %rdi
    00000199: 	jne	.Ltmp2750 # Offset: 409
.Ltmp2749:
    0000019b: 	movq	%rbx, %rax
    0000019e: 	addq	$0x20, %rax
    000001a2: 	movq	%rax, %rbx
    000001a5: 	cmpq	-0x110(%rbp), %rax
    000001ac: 	jne	.Ltmp2751 # Offset: 428
    000001ae: 	cmpq	%r14, -0x108(%rbp)
    000001b5: 	je	.Ltmp2752 # Offset: 437
    000001b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2754:
    000001c0: 	movq	(%r14), %rdi
    000001c3: 	leaq	0x10(%r14), %rax
    000001c7: 	cmpq	%rax, %rdi
    000001ca: 	je	.Ltmp2753 # Offset: 458
    000001cc: 	movq	0x10(%r14), %rax
    000001d0: 	leaq	0x1(%rax), %rsi
    000001d4: 	callq	_ZdlPvm@PLT # Offset: 468
.Ltmp2753:
    000001d9: 	addq	$0x20, %r14
.Ltmp2748:
    000001dd: 	cmpq	%r14, -0x108(%rbp)
    000001e4: 	jne	.Ltmp2754 # Offset: 484
.Ltmp2752:
    000001e6: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000001ed: 	leaq	0x8(%rax), %rbx
    000001f1: 	cmpq	%r12, %rbx
    000001f4: 	jbe	.Ltmp2755 # Offset: 500
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp2756:
    00000200: 	movq	(%r12), %rdi
    00000204: 	movl	$0x200, %esi
    00000209: 	addq	$0x8, %r12
    0000020d: 	callq	_ZdlPvm@PLT # Offset: 525
    00000212: 	cmpq	%r12, %rbx
    00000215: 	ja	.Ltmp2756 # Offset: 533
.Ltmp2755:
    00000217: 	movzbl	init_value(%rip), %eax
    0000021e: 	movdqa	-0x130(%rbp), %xmm2
    00000226: 	movl	$0x4e200, %edi
    0000022b: 	movdqa	-0x140(%rbp), %xmm3
    00000233: 	addq	$0x2a, %rax
    00000237: 	movaps	%xmm2, "_ZL7gLabels/1"+48(%rip)
    0000023e: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000245: 	movl	iterations(%rip), %eax
    0000024b: 	movaps	%xmm3, "_ZL7gLabels/1"+64(%rip)
    00000252: 	movl	%eax, -0x118(%rbp)
    00000258: 	callq	_Znam@PLT # Offset: 600
    0000025d: 	movl	$0x4e200, %edi
    00000262: 	movq	%rax, %r12
    00000265: 	callq	_Znam@PLT # Offset: 613
    0000026a: 	movl	$0x4e200, %edi
    0000026f: 	movq	%rax, %r13
    00000272: 	callq	_Znam@PLT # Offset: 626
    00000277: 	movl	$0x4e200, %edi
    0000027c: 	movq	%rax, -0x100(%rbp)
    00000283: 	callq	_Znam@PLT # Offset: 643
    00000288: 	movl	$0x138800, %edi
    0000028d: 	movq	%rax, -0x110(%rbp)
    00000294: 	callq	_Znam@PLT # Offset: 660
    00000299: 	movq	%rax, %r14
    0000029c: 	movq	%r12, %rdx
    0000029f: 	leaq	0x4e200(%r12), %rdi
    000002a7: 	movabsq	$0x5851f42d4c957f2d, %rsi
    000002b1: 	movabsq	$0x14057b7ef767814f, %rcx
    000002bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2757:
    000002c0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000002c7: 	addq	$0x4, %rdx
    000002cb: 	imulq	%rsi, %rax
    000002cf: 	addq	%rcx, %rax
    000002d2: 	movq	%rax, %r8
    000002d5: 	movq	%rax, %r9
    000002d8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000002df: 	shrq	$0x14, %r8
    000002e3: 	shlq	$0x17, %r9
    000002e7: 	xorq	%r9, %r8
    000002ea: 	xorq	%r8, %rax
    000002ed: 	sarq	$0x3, %rax
    000002f1: 	movl	%eax, -0x4(%rdx)
    000002f4: 	cmpq	%rdi, %rdx
    000002f7: 	jne	.Ltmp2757 # Offset: 759
    000002f9: 	leaq	0x4e200(%r13), %rdi
    00000300: 	movq	%r13, %rdx
    00000303: 	movabsq	$0x5851f42d4c957f2d, %rsi
    0000030d: 	movabsq	$0x14057b7ef767814f, %rcx
    00000317: 	nopw	(%rax,%rax) # Size: 9
.Ltmp2758:
    00000320: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000327: 	addq	$0x4, %rdx
    0000032b: 	imulq	%rsi, %rax
    0000032f: 	addq	%rcx, %rax
    00000332: 	movq	%rax, %r8
    00000335: 	movq	%rax, %r9
    00000338: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000033f: 	shrq	$0x14, %r8
    00000343: 	shlq	$0x17, %r9
    00000347: 	xorq	%r9, %r8
    0000034a: 	xorq	%r8, %rax
    0000034d: 	sarq	$0x3, %rax
    00000351: 	movl	%eax, -0x4(%rdx)
    00000354: 	cmpq	%rdx, %rdi
    00000357: 	jne	.Ltmp2758 # Offset: 855
    00000359: 	movq	-0x100(%rbp), %rdx
    00000360: 	movabsq	$0x5851f42d4c957f2d, %rsi
    0000036a: 	movabsq	$0x14057b7ef767814f, %rcx
    00000374: 	leaq	0x4e200(%rdx), %rdi
    0000037b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2759:
    00000380: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000387: 	addq	$0x4, %rdx
    0000038b: 	imulq	%rsi, %rax
    0000038f: 	addq	%rcx, %rax
    00000392: 	movq	%rax, %r8
    00000395: 	movq	%rax, %r9
    00000398: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000039f: 	shrq	$0x14, %r8
    000003a3: 	shlq	$0x17, %r9
    000003a7: 	xorq	%r9, %r8
    000003aa: 	xorq	%r8, %rax
    000003ad: 	sarq	$0x3, %rax
    000003b1: 	movl	%eax, -0x4(%rdx)
    000003b4: 	cmpq	%rdx, %rdi
    000003b7: 	jne	.Ltmp2759 # Offset: 951
    000003b9: 	movq	-0x110(%rbp), %rdx
    000003c0: 	movabsq	$0x5851f42d4c957f2d, %rsi
    000003ca: 	movabsq	$0x14057b7ef767814f, %rcx
    000003d4: 	leaq	0x4e200(%rdx), %rdi
    000003db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2760:
    000003e0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000003e7: 	addq	$0x4, %rdx
    000003eb: 	imulq	%rsi, %rax
    000003ef: 	addq	%rcx, %rax
    000003f2: 	movq	%rax, %r8
    000003f5: 	movq	%rax, %r9
    000003f8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000003ff: 	shrq	$0x14, %r8
    00000403: 	shlq	$0x17, %r9
    00000407: 	xorq	%r9, %r8
    0000040a: 	xorq	%r8, %rax
    0000040d: 	sarq	$0x3, %rax
    00000411: 	movl	%eax, -0x4(%rdx)
    00000414: 	cmpq	%rdx, %rdi
    00000417: 	jne	.Ltmp2760 # Offset: 1047
    00000419: 	xorl	%esi, %esi
    0000041b: 	movl	$0x138800, %edx
    00000420: 	leaq	-0x50(%rbp), %rbx
    00000424: 	movq	%r14, %rdi
    00000427: 	callq	memset@PLT # Offset: 1063
    0000042c: 	movl	-0x118(%rbp), %eax
    00000432: 	movq	-0xd8(%rbp), %r15
    00000439: 	movq	%rbx, -0x60(%rbp)
    0000043d: 	movl	%eax, iterations(%rip)
    00000443: 	movq	-0xe0(%rbp), %rax
    0000044a: 	movq	%rax, %rcx
    0000044d: 	movq	%rax, -0xf8(%rbp)
    00000454: 	addq	%r15, %rcx
    00000457: 	je	.Ltmp2761 # Offset: 1111
    00000459: 	testq	%rax, %rax
    0000045c: 	je	.Ltmp2762 # Offset: 1116
.Ltmp2761:
    00000462: 	movq	%r15, -0xe8(%rbp)
    00000469: 	cmpq	$0xf, %r15
    0000046d: 	ja	.Ltmp2763 # Offset: 1133
    00000473: 	cmpq	$0x1, %r15
    00000477: 	jne	.Ltmp2764 # Offset: 1143
    0000047d: 	movq	-0xf8(%rbp), %rax
    00000484: 	movzbl	(%rax), %eax
    00000487: 	movb	%al, -0x50(%rbp)
    0000048a: 	movq	%rbx, %rax
.Ltmp2849:
    0000048d: 	movq	%r15, -0x58(%rbp)
    00000491: 	movb	$0x0, (%rax,%r15)
    00000496: 	movabsq	$0x3fffffffffffffff, %rax
    000004a0: 	subq	-0x58(%rbp), %rax
    000004a4: 	cmpq	$0x10, %rax
    000004a8: 	jbe	.Ltmp2765 # Offset: 1192
    000004ae: 	leaq	-0x60(%rbp), %rax
    000004b2: 	movl	$0x11, %edx
    000004b7: 	leaq	DATAat0x371d8(%rip), %rsi
    000004be: 	movq	%rax, %rdi
    000004c1: 	movq	%rax, -0xf8(%rbp)
    000004c8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1224
    000004cd: 	movq	-0xf8(%rbp), %r8
    000004d4: 	movq	%r13, %rdx
    000004d7: 	movq	%r12, %rsi
    000004da: 	movq	%r14, %rdi
    000004dd: 	leaq	_Z23interleave2to2_version1IjEvPT_PKS0_S3_i(%rip), %rcx
    000004e4: 	callq	"_Z19test_interleave2to2IjPFvPjPKjS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1252
    000004e9: 	movq	-0x60(%rbp), %rdi
    000004ed: 	cmpq	%rbx, %rdi
    000004f0: 	je	.Ltmp2766 # Offset: 1264
    000004f2: 	movq	-0x50(%rbp), %rax
    000004f6: 	leaq	0x1(%rax), %rsi
    000004fa: 	callq	_ZdlPvm@PLT # Offset: 1274
.Ltmp2766:
    000004ff: 	movq	-0xe0(%rbp), %rax
    00000506: 	movq	-0xd8(%rbp), %r15
    0000050d: 	movq	%rbx, -0x60(%rbp)
    00000511: 	movq	%rax, %rcx
    00000514: 	movq	%rax, -0x108(%rbp)
    0000051b: 	addq	%r15, %rcx
    0000051e: 	je	.Ltmp2767 # Offset: 1310
    00000520: 	testq	%rax, %rax
    00000523: 	je	.Ltmp2768 # Offset: 1315
.Ltmp2767:
    00000529: 	movq	%r15, -0xe8(%rbp)
    00000530: 	cmpq	$0xf, %r15
    00000534: 	ja	.Ltmp2769 # Offset: 1332
    0000053a: 	cmpq	$0x1, %r15
    0000053e: 	jne	.Ltmp2770 # Offset: 1342
    00000544: 	movq	-0x108(%rbp), %rax
    0000054b: 	movzbl	(%rax), %eax
    0000054e: 	movb	%al, -0x50(%rbp)
    00000551: 	movq	%rbx, %rax
.Ltmp2869:
    00000554: 	movq	%r15, -0x58(%rbp)
    00000558: 	movb	$0x0, (%rax,%r15)
    0000055d: 	movabsq	$0x3fffffffffffffff, %rax
    00000567: 	subq	-0x58(%rbp), %rax
    0000056b: 	cmpq	$0x10, %rax
    0000056f: 	jbe	.Ltmp2771 # Offset: 1391
    00000575: 	movq	-0xf8(%rbp), %rdi
    0000057c: 	movl	$0x11, %edx
    00000581: 	leaq	DATAat0x371ea(%rip), %rsi
    00000588: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1416
    0000058d: 	movq	-0xf8(%rbp), %r8
    00000594: 	movq	%r13, %rdx
    00000597: 	movq	%r12, %rsi
    0000059a: 	movq	%r14, %rdi
    0000059d: 	leaq	_Z23interleave2to2_version2IjEvPT_PKS0_S3_i(%rip), %rcx
    000005a4: 	callq	"_Z19test_interleave2to2IjPFvPjPKjS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1444
    000005a9: 	movq	-0x60(%rbp), %rdi
    000005ad: 	cmpq	%rbx, %rdi
    000005b0: 	je	.Ltmp2772 # Offset: 1456
    000005b2: 	movq	-0x50(%rbp), %rax
    000005b6: 	leaq	0x1(%rax), %rsi
    000005ba: 	callq	_ZdlPvm@PLT # Offset: 1466
.Ltmp2772:
    000005bf: 	movq	-0xe0(%rbp), %rax
    000005c6: 	movq	-0xd8(%rbp), %r15
    000005cd: 	movq	%rbx, -0x60(%rbp)
    000005d1: 	movq	%rax, %rcx
    000005d4: 	movq	%rax, -0x108(%rbp)
    000005db: 	addq	%r15, %rcx
    000005de: 	je	.Ltmp2773 # Offset: 1502
    000005e0: 	testq	%rax, %rax
    000005e3: 	je	.Ltmp2774 # Offset: 1507
.Ltmp2773:
    000005e9: 	movq	%r15, -0xe8(%rbp)
    000005f0: 	cmpq	$0xf, %r15
    000005f4: 	ja	.Ltmp2775 # Offset: 1524
    000005fa: 	cmpq	$0x1, %r15
    000005fe: 	jne	.Ltmp2776 # Offset: 1534
    00000604: 	movq	-0x108(%rbp), %rax
    0000060b: 	movzbl	(%rax), %eax
    0000060e: 	movb	%al, -0x50(%rbp)
    00000611: 	movq	%rbx, %rax
.Ltmp2867:
    00000614: 	movq	%r15, -0x58(%rbp)
    00000618: 	movb	$0x0, (%rax,%r15)
    0000061d: 	movabsq	$0x3fffffffffffffff, %rax
    00000627: 	subq	-0x58(%rbp), %rax
    0000062b: 	cmpq	$0x10, %rax
    0000062f: 	jbe	.Ltmp2777 # Offset: 1583
    00000635: 	movq	-0xf8(%rbp), %rdi
    0000063c: 	movl	$0x11, %edx
    00000641: 	leaq	DATAat0x371fc(%rip), %rsi
    00000648: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1608
    0000064d: 	movq	-0xf8(%rbp), %r8
    00000654: 	movq	%r13, %rdx
    00000657: 	movq	%r12, %rsi
    0000065a: 	movq	%r14, %rdi
    0000065d: 	leaq	_Z23interleave2to2_version3IjEvPT_PKS0_S3_i(%rip), %rcx
    00000664: 	callq	"_Z19test_interleave2to2IjPFvPjPKjS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1636
    00000669: 	movq	-0x60(%rbp), %rdi
    0000066d: 	cmpq	%rbx, %rdi
    00000670: 	je	.Ltmp2778 # Offset: 1648
    00000672: 	movq	-0x50(%rbp), %rax
    00000676: 	leaq	0x1(%rax), %rsi
    0000067a: 	callq	_ZdlPvm@PLT # Offset: 1658
.Ltmp2778:
    0000067f: 	movq	-0xf8(%rbp), %r15
    00000686: 	leaq	-0xe0(%rbp), %rax
    0000068d: 	leaq	DATAat0x3720e(%rip), %rdx
    00000694: 	movq	%rax, %rsi
    00000697: 	movq	%rax, -0x108(%rbp)
    0000069e: 	movq	%r15, %rdi
    000006a1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1697
    000006a6: 	movq	%r15, %r8
    000006a9: 	leaq	_Z23interleave2to2_version4IjEvPT_PKS0_S3_i(%rip), %rcx
    000006b0: 	movq	%r13, %rdx
    000006b3: 	movq	%r12, %rsi
    000006b6: 	movq	%r14, %rdi
    000006b9: 	callq	"_Z19test_interleave2to2IjPFvPjPKjS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1721
    000006be: 	movq	-0x60(%rbp), %rdi
    000006c2: 	cmpq	%rbx, %rdi
    000006c5: 	je	.Ltmp2779 # Offset: 1733
    000006c7: 	movq	-0x50(%rbp), %rax
    000006cb: 	leaq	0x1(%rax), %rsi
    000006cf: 	callq	_ZdlPvm@PLT # Offset: 1743
.Ltmp2779:
    000006d4: 	movq	-0xf8(%rbp), %r15
    000006db: 	movq	-0x108(%rbp), %rsi
    000006e2: 	leaq	DATAat0x37220(%rip), %rdx
    000006e9: 	movq	%r15, %rdi
    000006ec: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1772
    000006f1: 	movq	%r15, %r8
    000006f4: 	leaq	_Z23interleave2to2_version5IjEvPT_PKS0_S3_i(%rip), %rcx
    000006fb: 	movq	%r13, %rdx
    000006fe: 	movq	%r12, %rsi
    00000701: 	movq	%r14, %rdi
    00000704: 	callq	"_Z19test_interleave2to2IjPFvPjPKjS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1796
    00000709: 	movq	-0x60(%rbp), %rdi
    0000070d: 	cmpq	%rbx, %rdi
    00000710: 	je	.Ltmp2780 # Offset: 1808
    00000712: 	movq	-0x50(%rbp), %rax
    00000716: 	leaq	0x1(%rax), %rsi
    0000071a: 	callq	_ZdlPvm@PLT # Offset: 1818
.Ltmp2780:
    0000071f: 	movq	-0xe0(%rbp), %rax
    00000726: 	movq	-0xd8(%rbp), %r15
    0000072d: 	movq	%rbx, -0x60(%rbp)
    00000731: 	movq	%rax, %rcx
    00000734: 	movq	%rax, -0x130(%rbp)
    0000073b: 	addq	%r15, %rcx
    0000073e: 	je	.Ltmp2781 # Offset: 1854
    00000740: 	testq	%rax, %rax
    00000743: 	je	.Ltmp2782 # Offset: 1859
.Ltmp2781:
    00000749: 	movq	%r15, -0xe8(%rbp)
    00000750: 	cmpq	$0xf, %r15
    00000754: 	ja	.Ltmp2783 # Offset: 1876
    0000075a: 	cmpq	$0x1, %r15
    0000075e: 	jne	.Ltmp2784 # Offset: 1886
    00000764: 	movq	-0x130(%rbp), %rax
    0000076b: 	movzbl	(%rax), %eax
    0000076e: 	movb	%al, -0x50(%rbp)
    00000771: 	movq	%rbx, %rax
.Ltmp2865:
    00000774: 	movq	%r15, -0x58(%rbp)
    00000778: 	movb	$0x0, (%rax,%r15)
    0000077d: 	movabsq	$0x3fffffffffffffff, %rax
    00000787: 	subq	-0x58(%rbp), %rax
    0000078b: 	cmpq	$0x10, %rax
    0000078f: 	jbe	.Ltmp2785 # Offset: 1935
    00000795: 	movq	-0xf8(%rbp), %rdi
    0000079c: 	movl	$0x11, %edx
    000007a1: 	leaq	DATAat0x37232(%rip), %rsi
    000007a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1960
    000007ad: 	movq	-0xf8(%rbp), %r8
    000007b4: 	movq	%r13, %rdx
    000007b7: 	movq	%r12, %rsi
    000007ba: 	movq	%r14, %rdi
    000007bd: 	leaq	_Z23interleave2to2_version6IjEvPT_PKS0_S3_i(%rip), %rcx
    000007c4: 	callq	"_Z19test_interleave2to2IjPFvPjPKjS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1988
    000007c9: 	movq	-0x60(%rbp), %rdi
    000007cd: 	cmpq	%rbx, %rdi
    000007d0: 	je	.Ltmp2786 # Offset: 2000
    000007d2: 	movq	-0x50(%rbp), %rax
    000007d6: 	leaq	0x1(%rax), %rsi
    000007da: 	callq	_ZdlPvm@PLT # Offset: 2010
.Ltmp2786:
    000007df: 	movq	-0xe0(%rbp), %rax
    000007e6: 	movq	-0xd8(%rbp), %r15
    000007ed: 	movq	%rbx, -0x60(%rbp)
    000007f1: 	movq	%rax, %rcx
    000007f4: 	movq	%rax, -0x130(%rbp)
    000007fb: 	addq	%r15, %rcx
    000007fe: 	je	.Ltmp2787 # Offset: 2046
    00000800: 	testq	%rax, %rax
    00000803: 	je	.Ltmp2788 # Offset: 2051
.Ltmp2787:
    00000809: 	movq	%r15, -0xe8(%rbp)
    00000810: 	cmpq	$0xf, %r15
    00000814: 	ja	.Ltmp2789 # Offset: 2068
    0000081a: 	cmpq	$0x1, %r15
    0000081e: 	jne	.Ltmp2790 # Offset: 2078
    00000824: 	movq	-0x130(%rbp), %rax
    0000082b: 	movzbl	(%rax), %eax
    0000082e: 	movb	%al, -0x50(%rbp)
    00000831: 	movq	%rbx, %rax
.Ltmp2861:
    00000834: 	movq	%r15, -0x58(%rbp)
    00000838: 	movb	$0x0, (%rax,%r15)
    0000083d: 	movabsq	$0x3fffffffffffffff, %rax
    00000847: 	subq	-0x58(%rbp), %rax
    0000084b: 	cmpq	$0x10, %rax
    0000084f: 	jbe	.Ltmp2791 # Offset: 2127
    00000855: 	movq	-0xf8(%rbp), %rdi
    0000085c: 	movl	$0x11, %edx
    00000861: 	leaq	DATAat0x37244(%rip), %rsi
    00000868: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2152
    0000086d: 	movq	-0xf8(%rbp), %r8
    00000874: 	movq	%r13, %rdx
    00000877: 	movq	%r12, %rsi
    0000087a: 	movq	%r14, %rdi
    0000087d: 	leaq	_Z23interleave2to2_version7IjEvPT_PKS0_S3_i(%rip), %rcx
    00000884: 	callq	"_Z19test_interleave2to2IjPFvPjPKjS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2180
    00000889: 	movq	-0x60(%rbp), %rdi
    0000088d: 	cmpq	%rbx, %rdi
    00000890: 	je	.Ltmp2792 # Offset: 2192
    00000892: 	movq	-0x50(%rbp), %rax
    00000896: 	leaq	0x1(%rax), %rsi
    0000089a: 	callq	_ZdlPvm@PLT # Offset: 2202
.Ltmp2792:
    0000089f: 	movq	-0xe0(%rbp), %rax
    000008a6: 	movq	-0xd8(%rbp), %r15
    000008ad: 	movq	%rbx, -0x60(%rbp)
    000008b1: 	movq	%rax, %rcx
    000008b4: 	movq	%rax, -0x130(%rbp)
    000008bb: 	addq	%r15, %rcx
    000008be: 	je	.Ltmp2793 # Offset: 2238
    000008c0: 	testq	%rax, %rax
    000008c3: 	je	.Ltmp2794 # Offset: 2243
.Ltmp2793:
    000008c9: 	movq	%r15, -0xe8(%rbp)
    000008d0: 	cmpq	$0xf, %r15
    000008d4: 	ja	.Ltmp2795 # Offset: 2260
    000008da: 	cmpq	$0x1, %r15
    000008de: 	jne	.Ltmp2796 # Offset: 2270
    000008e4: 	movq	-0x130(%rbp), %rax
    000008eb: 	movzbl	(%rax), %eax
    000008ee: 	movb	%al, -0x50(%rbp)
    000008f1: 	movq	%rbx, %rax
.Ltmp2859:
    000008f4: 	movq	%r15, -0x58(%rbp)
    000008f8: 	movb	$0x0, (%rax,%r15)
    000008fd: 	movabsq	$0x3fffffffffffffff, %rax
    00000907: 	subq	-0x58(%rbp), %rax
    0000090b: 	cmpq	$0x10, %rax
    0000090f: 	jbe	.Ltmp2797 # Offset: 2319
    00000915: 	movq	-0xf8(%rbp), %rdi
    0000091c: 	movl	$0x11, %edx
    00000921: 	leaq	DATAat0x37256(%rip), %rsi
    00000928: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2344
    0000092d: 	movq	-0xf8(%rbp), %r8
    00000934: 	movq	%r13, %rdx
    00000937: 	movq	%r12, %rsi
    0000093a: 	movq	%r14, %rdi
    0000093d: 	leaq	_Z23interleave2to2_version8IjEvPT_PKS0_S3_i(%rip), %rcx
    00000944: 	callq	"_Z19test_interleave2to2IjPFvPjPKjS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2372
    00000949: 	movq	-0x60(%rbp), %rdi
    0000094d: 	cmpq	%rbx, %rdi
    00000950: 	je	.Ltmp2798 # Offset: 2384
    00000952: 	movq	-0x50(%rbp), %rax
    00000956: 	leaq	0x1(%rax), %rsi
    0000095a: 	callq	_ZdlPvm@PLT # Offset: 2394
.Ltmp2798:
    0000095f: 	movq	-0x108(%rbp), %rsi
    00000966: 	leaq	-0xc0(%rbp), %rdi
    0000096d: 	leaq	DATAat0x37268(%rip), %rdx
    00000974: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2420
    00000979: 	movl	iterations(%rip), %edx
    0000097f: 	xorl	%r8d, %r8d
    00000982: 	xorl	%ecx, %ecx
    00000984: 	movl	$0x13880, %esi
    00000989: 	movq	-0xc0(%rbp), %rdi
    00000990: 	callq	_Z9summarizePKciiii # Offset: 2448
    00000995: 	movl	-0x118(%rbp), %eax
    0000099b: 	movq	-0xd8(%rbp), %r15
    000009a2: 	movq	%rbx, -0x60(%rbp)
    000009a6: 	leal	(%rax,%rax), %edx
    000009a9: 	movslq	%edx, %rax
    000009ac: 	sarl	$0x1f, %edx
    000009af: 	imulq	$0x55555556, %rax, %rax
    000009b6: 	shrq	$0x20, %rax
    000009ba: 	subl	%edx, %eax
    000009bc: 	movl	%eax, iterations(%rip)
    000009c2: 	movq	-0xe0(%rbp), %rax
    000009c9: 	movq	%rax, %rcx
    000009cc: 	movq	%rax, -0x130(%rbp)
    000009d3: 	addq	%r15, %rcx
    000009d6: 	je	.Ltmp2799 # Offset: 2518
    000009d8: 	testq	%rax, %rax
    000009db: 	je	.Ltmp2800 # Offset: 2523
.Ltmp2799:
    000009e1: 	movq	%r15, -0xe8(%rbp)
    000009e8: 	cmpq	$0xf, %r15
    000009ec: 	ja	.Ltmp2801 # Offset: 2540
    000009f2: 	cmpq	$0x1, %r15
    000009f6: 	jne	.Ltmp2802 # Offset: 2550
    000009fc: 	movq	-0x130(%rbp), %rax
    00000a03: 	movzbl	(%rax), %eax
    00000a06: 	movb	%al, -0x50(%rbp)
    00000a09: 	movq	%rbx, %rax
.Ltmp2857:
    00000a0c: 	movq	%r15, -0x58(%rbp)
    00000a10: 	movb	$0x0, (%rax,%r15)
    00000a15: 	movabsq	$0x3fffffffffffffff, %rax
    00000a1f: 	subq	-0x58(%rbp), %rax
    00000a23: 	cmpq	$0x10, %rax
    00000a27: 	jbe	.Ltmp2803 # Offset: 2599
    00000a2d: 	movq	-0xf8(%rbp), %rdi
    00000a34: 	movl	$0x11, %edx
    00000a39: 	leaq	DATAat0x37278(%rip), %rsi
    00000a40: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2624
    00000a45: 	movq	-0xf8(%rbp), %r9
    00000a4c: 	movq	%r13, %rdx
    00000a4f: 	movq	%r12, %rsi
    00000a52: 	movq	%r14, %rdi
    00000a55: 	movq	-0x100(%rbp), %rcx
    00000a5c: 	leaq	_Z23interleave3to3_version1IjEvPT_PKS0_S3_S3_i(%rip), %r8
    00000a63: 	callq	"_Z19test_interleave3to3IjPFvPjPKjS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2659
    00000a68: 	movq	-0x60(%rbp), %rdi
    00000a6c: 	cmpq	%rbx, %rdi
    00000a6f: 	je	.Ltmp2804 # Offset: 2671
    00000a71: 	movq	-0x50(%rbp), %rax
    00000a75: 	leaq	0x1(%rax), %rsi
    00000a79: 	callq	_ZdlPvm@PLT # Offset: 2681
.Ltmp2804:
    00000a7e: 	movq	-0xf8(%rbp), %r15
    00000a85: 	movq	-0x108(%rbp), %rsi
    00000a8c: 	leaq	DATAat0x3728a(%rip), %rdx
    00000a93: 	movq	%r15, %rdi
    00000a96: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2710
    00000a9b: 	movq	-0x100(%rbp), %rcx
    00000aa2: 	movq	%r15, %r9
    00000aa5: 	movq	%r13, %rdx
    00000aa8: 	movq	%r12, %rsi
    00000aab: 	leaq	_Z23interleave3to3_version2IjEvPT_PKS0_S3_S3_i(%rip), %r8
    00000ab2: 	movq	%r14, %rdi
    00000ab5: 	callq	"_Z19test_interleave3to3IjPFvPjPKjS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2741
    00000aba: 	movq	-0x60(%rbp), %rdi
    00000abe: 	cmpq	%rbx, %rdi
    00000ac1: 	je	.Ltmp2805 # Offset: 2753
    00000ac3: 	movq	-0x50(%rbp), %rax
    00000ac7: 	leaq	0x1(%rax), %rsi
    00000acb: 	callq	_ZdlPvm@PLT # Offset: 2763
.Ltmp2805:
    00000ad0: 	movq	-0xf8(%rbp), %r15
    00000ad7: 	movq	-0x108(%rbp), %rsi
    00000ade: 	leaq	DATAat0x3729c(%rip), %rdx
    00000ae5: 	movq	%r15, %rdi
    00000ae8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2792
    00000aed: 	movq	-0x100(%rbp), %rcx
    00000af4: 	movq	%r15, %r9
    00000af7: 	movq	%r13, %rdx
    00000afa: 	movq	%r12, %rsi
    00000afd: 	leaq	_Z23interleave3to3_version3IjEvPT_PKS0_S3_S3_i(%rip), %r8
    00000b04: 	movq	%r14, %rdi
    00000b07: 	callq	"_Z19test_interleave3to3IjPFvPjPKjS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2823
    00000b0c: 	movq	-0x60(%rbp), %rdi
    00000b10: 	cmpq	%rbx, %rdi
    00000b13: 	je	.Ltmp2806 # Offset: 2835
    00000b15: 	movq	-0x50(%rbp), %rax
    00000b19: 	leaq	0x1(%rax), %rsi
    00000b1d: 	callq	_ZdlPvm@PLT # Offset: 2845
.Ltmp2806:
    00000b22: 	movq	-0xe0(%rbp), %rax
    00000b29: 	movq	-0xd8(%rbp), %r15
    00000b30: 	movq	%rbx, -0x60(%rbp)
    00000b34: 	movq	%rax, %rcx
    00000b37: 	movq	%rax, -0x130(%rbp)
    00000b3e: 	addq	%r15, %rcx
    00000b41: 	je	.Ltmp2807 # Offset: 2881
    00000b43: 	testq	%rax, %rax
    00000b46: 	je	.Ltmp2808 # Offset: 2886
.Ltmp2807:
    00000b4c: 	movq	%r15, -0xe8(%rbp)
    00000b53: 	cmpq	$0xf, %r15
    00000b57: 	ja	.Ltmp2809 # Offset: 2903
    00000b5d: 	cmpq	$0x1, %r15
    00000b61: 	jne	.Ltmp2810 # Offset: 2913
    00000b67: 	movq	-0x130(%rbp), %rax
    00000b6e: 	movzbl	(%rax), %eax
    00000b71: 	movb	%al, -0x50(%rbp)
    00000b74: 	movq	%rbx, %rax
.Ltmp2855:
    00000b77: 	movq	%r15, -0x58(%rbp)
    00000b7b: 	movb	$0x0, (%rax,%r15)
    00000b80: 	movabsq	$0x3fffffffffffffff, %rax
    00000b8a: 	subq	-0x58(%rbp), %rax
    00000b8e: 	cmpq	$0x10, %rax
    00000b92: 	jbe	.Ltmp2811 # Offset: 2962
    00000b98: 	movq	-0xf8(%rbp), %rdi
    00000b9f: 	movl	$0x11, %edx
    00000ba4: 	leaq	DATAat0x372ae(%rip), %rsi
    00000bab: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2987
    00000bb0: 	movq	-0xf8(%rbp), %r9
    00000bb7: 	movq	%r13, %rdx
    00000bba: 	movq	%r12, %rsi
    00000bbd: 	movq	%r14, %rdi
    00000bc0: 	movq	-0x100(%rbp), %rcx
    00000bc7: 	leaq	_Z23interleave3to3_version4IjEvPT_PKS0_S3_S3_i(%rip), %r8
    00000bce: 	callq	"_Z19test_interleave3to3IjPFvPjPKjS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3022
    00000bd3: 	movq	-0x60(%rbp), %rdi
    00000bd7: 	cmpq	%rbx, %rdi
    00000bda: 	je	.Ltmp2812 # Offset: 3034
    00000bdc: 	movq	-0x50(%rbp), %rax
    00000be0: 	leaq	0x1(%rax), %rsi
    00000be4: 	callq	_ZdlPvm@PLT # Offset: 3044
.Ltmp2812:
    00000be9: 	movq	-0xe0(%rbp), %rax
    00000bf0: 	movq	-0xd8(%rbp), %r15
    00000bf7: 	movq	%rbx, -0x60(%rbp)
    00000bfb: 	movq	%rax, %rcx
    00000bfe: 	movq	%rax, -0x130(%rbp)
    00000c05: 	addq	%r15, %rcx
    00000c08: 	je	.Ltmp2813 # Offset: 3080
    00000c0a: 	testq	%rax, %rax
    00000c0d: 	je	.Ltmp2814 # Offset: 3085
.Ltmp2813:
    00000c13: 	movq	%r15, -0xe8(%rbp)
    00000c1a: 	cmpq	$0xf, %r15
    00000c1e: 	ja	.Ltmp2815 # Offset: 3102
    00000c24: 	cmpq	$0x1, %r15
    00000c28: 	jne	.Ltmp2816 # Offset: 3112
    00000c2e: 	movq	-0x130(%rbp), %rax
    00000c35: 	movzbl	(%rax), %eax
    00000c38: 	movb	%al, -0x50(%rbp)
    00000c3b: 	movq	%rbx, %rax
.Ltmp2853:
    00000c3e: 	movq	%r15, -0x58(%rbp)
    00000c42: 	movb	$0x0, (%rax,%r15)
    00000c47: 	movabsq	$0x3fffffffffffffff, %rax
    00000c51: 	subq	-0x58(%rbp), %rax
    00000c55: 	cmpq	$0x10, %rax
    00000c59: 	jbe	.Ltmp2817 # Offset: 3161
    00000c5f: 	movq	-0xf8(%rbp), %rdi
    00000c66: 	movl	$0x11, %edx
    00000c6b: 	leaq	DATAat0x372c0(%rip), %rsi
    00000c72: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3186
    00000c77: 	movq	-0xf8(%rbp), %r9
    00000c7e: 	movq	%r13, %rdx
    00000c81: 	movq	%r12, %rsi
    00000c84: 	movq	%r14, %rdi
    00000c87: 	movq	-0x100(%rbp), %rcx
    00000c8e: 	leaq	_Z23interleave3to3_version5IjEvPT_PKS0_S3_S3_i(%rip), %r8
    00000c95: 	callq	"_Z19test_interleave3to3IjPFvPjPKjS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3221
    00000c9a: 	movq	-0x60(%rbp), %rdi
    00000c9e: 	cmpq	%rbx, %rdi
    00000ca1: 	je	.Ltmp2818 # Offset: 3233
    00000ca3: 	movq	-0x50(%rbp), %rax
    00000ca7: 	leaq	0x1(%rax), %rsi
    00000cab: 	callq	_ZdlPvm@PLT # Offset: 3243
.Ltmp2818:
    00000cb0: 	movq	-0x108(%rbp), %rsi
    00000cb7: 	leaq	-0xa0(%rbp), %rdi
    00000cbe: 	leaq	DATAat0x372d2(%rip), %rdx
    00000cc5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3269
    00000cca: 	movl	iterations(%rip), %edx
    00000cd0: 	xorl	%r8d, %r8d
    00000cd3: 	xorl	%ecx, %ecx
    00000cd5: 	movl	$0x13880, %esi
    00000cda: 	movq	-0xa0(%rbp), %rdi
    00000ce1: 	callq	_Z9summarizePKciiii # Offset: 3297
    00000ce6: 	movl	-0x118(%rbp), %ecx
    00000cec: 	movq	-0xd8(%rbp), %r15
    00000cf3: 	movq	%rbx, -0x60(%rbp)
    00000cf7: 	movl	%ecx, %eax
    00000cf9: 	shrl	$0x1f, %eax
    00000cfc: 	addl	%ecx, %eax
    00000cfe: 	sarl	%eax
    00000d00: 	movl	%eax, -0x130(%rbp)
    00000d06: 	movl	%eax, iterations(%rip)
    00000d0c: 	movq	-0xe0(%rbp), %rax
    00000d13: 	movq	%rax, %rcx
    00000d16: 	movq	%rax, -0x140(%rbp)
    00000d1d: 	addq	%r15, %rcx
    00000d20: 	je	.Ltmp2819 # Offset: 3360
    00000d22: 	testq	%rax, %rax
    00000d25: 	je	.Ltmp2820 # Offset: 3365
.Ltmp2819:
    00000d2b: 	movq	%r15, -0xe8(%rbp)
    00000d32: 	cmpq	$0xf, %r15
    00000d36: 	ja	.Ltmp2821 # Offset: 3382
    00000d3c: 	cmpq	$0x1, %r15
    00000d40: 	jne	.Ltmp2822 # Offset: 3392
    00000d46: 	movq	-0x140(%rbp), %rax
    00000d4d: 	movzbl	(%rax), %eax
    00000d50: 	movb	%al, -0x50(%rbp)
    00000d53: 	movq	%rbx, %rax
.Ltmp2851:
    00000d56: 	movq	%r15, -0x58(%rbp)
    00000d5a: 	movb	$0x0, (%rax,%r15)
    00000d5f: 	movabsq	$0x3fffffffffffffff, %rax
    00000d69: 	subq	-0x58(%rbp), %rax
    00000d6d: 	cmpq	$0x10, %rax
    00000d71: 	jbe	.Ltmp2823 # Offset: 3441
    00000d77: 	movq	-0xf8(%rbp), %rdi
    00000d7e: 	movl	$0x11, %edx
    00000d83: 	leaq	DATAat0x372e2(%rip), %rsi
    00000d8a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3466
    00000d8f: 	subq	$0x8, %rsp
    00000d93: 	pushq	-0xf8(%rbp)
    00000d99: 	movq	%r13, %rdx
    00000d9c: 	movq	%r12, %rsi
    00000d9f: 	movq	-0x110(%rbp), %r8
    00000da6: 	leaq	_Z23interleave3to4_version1IjEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000dad: 	movq	%r14, %rdi
    00000db0: 	movq	-0x100(%rbp), %rcx
    00000db7: 	callq	"_Z19test_interleave3to4IjPFvPjjPKjS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3511
    00000dbc: 	movq	-0x60(%rbp), %rdi
    00000dc0: 	popq	%rcx
    00000dc1: 	popq	%rsi
    00000dc2: 	cmpq	%rbx, %rdi
    00000dc5: 	je	.Ltmp2824 # Offset: 3525
    00000dc7: 	movq	-0x50(%rbp), %rax
    00000dcb: 	leaq	0x1(%rax), %rsi
    00000dcf: 	callq	_ZdlPvm@PLT # Offset: 3535
.Ltmp2824:
    00000dd4: 	movq	-0xf8(%rbp), %r15
    00000ddb: 	movq	-0x108(%rbp), %rsi
    00000de2: 	leaq	DATAat0x372f4(%rip), %rdx
    00000de9: 	movq	%r15, %rdi
    00000dec: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3564
    00000df1: 	subq	$0x8, %rsp
    00000df5: 	movq	%r13, %rdx
    00000df8: 	movq	%r12, %rsi
    00000dfb: 	movq	%r14, %rdi
    00000dfe: 	pushq	%r15
    00000e00: 	movq	-0x110(%rbp), %r8
    00000e07: 	leaq	_Z23interleave3to4_version2IjEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000e0e: 	movq	-0x100(%rbp), %rcx
    00000e15: 	callq	"_Z19test_interleave3to4IjPFvPjjPKjS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3605
    00000e1a: 	movq	-0x60(%rbp), %rdi
    00000e1e: 	popq	%rax
    00000e1f: 	popq	%rdx
    00000e20: 	cmpq	%rbx, %rdi
    00000e23: 	je	.Ltmp2825 # Offset: 3619
    00000e25: 	movq	-0x50(%rbp), %rax
    00000e29: 	leaq	0x1(%rax), %rsi
    00000e2d: 	callq	_ZdlPvm@PLT # Offset: 3629
.Ltmp2825:
    00000e32: 	movq	-0xf8(%rbp), %r15
    00000e39: 	movq	-0x108(%rbp), %rsi
    00000e40: 	leaq	DATAat0x37306(%rip), %rdx
    00000e47: 	movq	%r15, %rdi
    00000e4a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3658
    00000e4f: 	subq	$0x8, %rsp
    00000e53: 	movq	%r13, %rdx
    00000e56: 	movq	%r12, %rsi
    00000e59: 	movq	%r14, %rdi
    00000e5c: 	pushq	%r15
    00000e5e: 	movq	-0x110(%rbp), %r8
    00000e65: 	leaq	_Z23interleave3to4_version3IjEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000e6c: 	movq	-0x100(%rbp), %rcx
    00000e73: 	callq	"_Z19test_interleave3to4IjPFvPjjPKjS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3699
    00000e78: 	movq	-0x60(%rbp), %rdi
    00000e7c: 	popq	%r11
    00000e7e: 	popq	%r15
    00000e80: 	cmpq	%rbx, %rdi
    00000e83: 	je	.Ltmp2826 # Offset: 3715
    00000e85: 	movq	-0x50(%rbp), %rax
    00000e89: 	leaq	0x1(%rax), %rsi
    00000e8d: 	callq	_ZdlPvm@PLT # Offset: 3725
.Ltmp2826:
    00000e92: 	movq	-0xf8(%rbp), %r15
    00000e99: 	movq	-0x108(%rbp), %rsi
    00000ea0: 	leaq	DATAat0x37318(%rip), %rdx
    00000ea7: 	movq	%r15, %rdi
    00000eaa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3754
    00000eaf: 	subq	$0x8, %rsp
    00000eb3: 	movq	%r13, %rdx
    00000eb6: 	movq	%r12, %rsi
    00000eb9: 	movq	%r14, %rdi
    00000ebc: 	pushq	%r15
    00000ebe: 	movq	-0x110(%rbp), %r8
    00000ec5: 	leaq	_Z23interleave3to4_version4IjEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000ecc: 	movq	-0x100(%rbp), %rcx
    00000ed3: 	callq	"_Z19test_interleave3to4IjPFvPjjPKjS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3795
    00000ed8: 	movq	-0x60(%rbp), %rdi
    00000edc: 	popq	%r9
    00000ede: 	popq	%r10
    00000ee0: 	cmpq	%rbx, %rdi
    00000ee3: 	je	.Ltmp2827 # Offset: 3811
    00000ee5: 	movq	-0x50(%rbp), %rax
    00000ee9: 	leaq	0x1(%rax), %rsi
    00000eed: 	callq	_ZdlPvm@PLT # Offset: 3821
.Ltmp2827:
    00000ef2: 	movq	-0xe0(%rbp), %rax
    00000ef9: 	movq	-0xd8(%rbp), %r15
    00000f00: 	movq	%rbx, -0x60(%rbp)
    00000f04: 	movq	%rax, %rcx
    00000f07: 	movq	%rax, -0x140(%rbp)
    00000f0e: 	addq	%r15, %rcx
    00000f11: 	je	.Ltmp2828 # Offset: 3857
    00000f13: 	testq	%rax, %rax
    00000f16: 	je	.Ltmp2829 # Offset: 3862
.Ltmp2828:
    00000f1c: 	movq	%r15, -0xe8(%rbp)
    00000f23: 	cmpq	$0xf, %r15
    00000f27: 	ja	.Ltmp2830 # Offset: 3879
    00000f2d: 	cmpq	$0x1, %r15
    00000f31: 	jne	.Ltmp2831 # Offset: 3889
    00000f37: 	movq	-0x140(%rbp), %rax
    00000f3e: 	movzbl	(%rax), %eax
    00000f41: 	movb	%al, -0x50(%rbp)
    00000f44: 	movq	%rbx, %rax
.Ltmp2863:
    00000f47: 	movq	%r15, -0x58(%rbp)
    00000f4b: 	movb	$0x0, (%rax,%r15)
    00000f50: 	movabsq	$0x3fffffffffffffff, %rax
    00000f5a: 	subq	-0x58(%rbp), %rax
    00000f5e: 	cmpq	$0x10, %rax
    00000f62: 	jbe	.Ltmp2832 # Offset: 3938
    00000f68: 	movq	-0xf8(%rbp), %rdi
    00000f6f: 	movl	$0x11, %edx
    00000f74: 	leaq	DATAat0x3732a(%rip), %rsi
    00000f7b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3963
    00000f80: 	subq	$0x8, %rsp
    00000f84: 	pushq	-0xf8(%rbp)
    00000f8a: 	movq	%r13, %rdx
    00000f8d: 	movq	%r12, %rsi
    00000f90: 	movq	-0x110(%rbp), %r8
    00000f97: 	leaq	_Z23interleave3to4_version5IjEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000f9e: 	movq	%r14, %rdi
    00000fa1: 	movq	-0x100(%rbp), %rcx
    00000fa8: 	callq	"_Z19test_interleave3to4IjPFvPjjPKjS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4008
    00000fad: 	popq	%rdi
    00000fae: 	movq	-0x60(%rbp), %rdi
    00000fb2: 	popq	%r8
    00000fb4: 	cmpq	%rbx, %rdi
    00000fb7: 	je	.Ltmp2833 # Offset: 4023
    00000fb9: 	movq	-0x50(%rbp), %rax
    00000fbd: 	leaq	0x1(%rax), %rsi
    00000fc1: 	callq	_ZdlPvm@PLT # Offset: 4033
.Ltmp2833:
    00000fc6: 	movq	-0xf8(%rbp), %r15
    00000fcd: 	movq	-0x108(%rbp), %rsi
    00000fd4: 	leaq	DATAat0x3733c(%rip), %rdx
    00000fdb: 	movq	%r15, %rdi
    00000fde: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4062
    00000fe3: 	subq	$0x8, %rsp
    00000fe7: 	movq	%r13, %rdx
    00000fea: 	movq	%r12, %rsi
    00000fed: 	movq	%r14, %rdi
    00000ff0: 	pushq	%r15
    00000ff2: 	movq	-0x110(%rbp), %r8
    00000ff9: 	leaq	_Z23interleave3to4_version6IjEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00001000: 	movq	-0x100(%rbp), %rcx
    00001007: 	callq	"_Z19test_interleave3to4IjPFvPjjPKjS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4103
    0000100c: 	movq	-0x60(%rbp), %rdi
    00001010: 	popq	%rcx
    00001011: 	popq	%rsi
    00001012: 	cmpq	%rbx, %rdi
    00001015: 	je	.Ltmp2834 # Offset: 4117
    00001017: 	movq	-0x50(%rbp), %rax
    0000101b: 	leaq	0x1(%rax), %rsi
    0000101f: 	callq	_ZdlPvm@PLT # Offset: 4127
.Ltmp2834:
    00001024: 	movq	-0x108(%rbp), %r15
    0000102b: 	leaq	-0x80(%rbp), %rdi
    0000102f: 	leaq	DATAat0x3734e(%rip), %rdx
    00001036: 	movq	%r15, %rsi
    00001039: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4153
    0000103e: 	movl	iterations(%rip), %edx
    00001044: 	movq	-0x80(%rbp), %rdi
    00001048: 	xorl	%r8d, %r8d
    0000104b: 	xorl	%ecx, %ecx
    0000104d: 	movl	$0x13880, %esi
    00001052: 	callq	_Z9summarizePKciiii # Offset: 4178
    00001057: 	movq	%r15, %rsi
    0000105a: 	movq	-0xf8(%rbp), %r15
    00001061: 	movl	-0x130(%rbp), %eax
    00001067: 	leaq	DATAat0x3735e(%rip), %rdx
    0000106e: 	movq	%r15, %rdi
    00001071: 	movl	%eax, iterations(%rip)
    00001077: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4215
    0000107c: 	subq	$0x8, %rsp
    00001080: 	movq	%r13, %rdx
    00001083: 	movq	%r12, %rsi
    00001086: 	movq	%r14, %rdi
    00001089: 	pushq	%r15
    0000108b: 	movq	-0x110(%rbp), %r8
    00001092: 	leaq	_Z23interleave4to4_version1IjEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    00001099: 	movq	-0x100(%rbp), %rcx
    000010a0: 	callq	"_Z19test_interleave4to4IjPFvPjPKjS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4256
    000010a5: 	movq	-0x60(%rbp), %rdi
    000010a9: 	popq	%rax
    000010aa: 	popq	%rdx
    000010ab: 	cmpq	%rbx, %rdi
    000010ae: 	je	.Ltmp2835 # Offset: 4270
    000010b0: 	movq	-0x50(%rbp), %rax
    000010b4: 	leaq	0x1(%rax), %rsi
    000010b8: 	callq	_ZdlPvm@PLT # Offset: 4280
.Ltmp2835:
    000010bd: 	movq	-0xf8(%rbp), %r15
    000010c4: 	movq	-0x108(%rbp), %rsi
    000010cb: 	leaq	DATAat0x37370(%rip), %rdx
    000010d2: 	movq	%r15, %rdi
    000010d5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4309
    000010da: 	subq	$0x8, %rsp
    000010de: 	movq	%r13, %rdx
    000010e1: 	movq	%r12, %rsi
    000010e4: 	movq	%r14, %rdi
    000010e7: 	pushq	%r15
    000010e9: 	movq	-0x110(%rbp), %r8
    000010f0: 	leaq	_Z23interleave4to4_version2IjEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    000010f7: 	movq	-0x100(%rbp), %rcx
    000010fe: 	callq	"_Z19test_interleave4to4IjPFvPjPKjS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4350
    00001103: 	movq	-0x60(%rbp), %rdi
    00001107: 	popq	%r11
    00001109: 	popq	%r15
    0000110b: 	cmpq	%rbx, %rdi
    0000110e: 	je	.Ltmp2836 # Offset: 4366
    00001110: 	movq	-0x50(%rbp), %rax
    00001114: 	leaq	0x1(%rax), %rsi
    00001118: 	callq	_ZdlPvm@PLT # Offset: 4376
.Ltmp2836:
    0000111d: 	movq	-0xf8(%rbp), %r15
    00001124: 	movq	-0x108(%rbp), %rsi
    0000112b: 	leaq	DATAat0x37382(%rip), %rdx
    00001132: 	movq	%r15, %rdi
    00001135: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4405
    0000113a: 	subq	$0x8, %rsp
    0000113e: 	movq	%r13, %rdx
    00001141: 	movq	%r12, %rsi
    00001144: 	movq	%r14, %rdi
    00001147: 	pushq	%r15
    00001149: 	movq	-0x110(%rbp), %r8
    00001150: 	leaq	_Z23interleave4to4_version3IjEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    00001157: 	movq	-0x100(%rbp), %rcx
    0000115e: 	callq	"_Z19test_interleave4to4IjPFvPjPKjS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4446
    00001163: 	movq	-0x60(%rbp), %rdi
    00001167: 	popq	%r9
    00001169: 	popq	%r10
    0000116b: 	cmpq	%rbx, %rdi
    0000116e: 	je	.Ltmp2837 # Offset: 4462
    00001170: 	movq	-0x50(%rbp), %rax
    00001174: 	leaq	0x1(%rax), %rsi
    00001178: 	callq	_ZdlPvm@PLT # Offset: 4472
.Ltmp2837:
    0000117d: 	movq	-0xf8(%rbp), %r15
    00001184: 	movq	-0x108(%rbp), %rsi
    0000118b: 	leaq	DATAat0x37394(%rip), %rdx
    00001192: 	movq	%r15, %rdi
    00001195: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4501
    0000119a: 	subq	$0x8, %rsp
    0000119e: 	movq	%r13, %rdx
    000011a1: 	movq	%r12, %rsi
    000011a4: 	movq	%r14, %rdi
    000011a7: 	pushq	%r15
    000011a9: 	movq	-0x110(%rbp), %r8
    000011b0: 	leaq	_Z23interleave4to4_version4IjEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    000011b7: 	movq	-0x100(%rbp), %rcx
    000011be: 	callq	"_Z19test_interleave4to4IjPFvPjPKjS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4542
    000011c3: 	popq	%rdi
    000011c4: 	movq	-0x60(%rbp), %rdi
    000011c8: 	popq	%r8
    000011ca: 	cmpq	%rbx, %rdi
    000011cd: 	je	.Ltmp2838 # Offset: 4557
    000011cf: 	movq	-0x50(%rbp), %rax
    000011d3: 	leaq	0x1(%rax), %rsi
    000011d7: 	callq	_ZdlPvm@PLT # Offset: 4567
.Ltmp2838:
    000011dc: 	movq	-0xf8(%rbp), %r15
    000011e3: 	movq	-0x108(%rbp), %rsi
    000011ea: 	leaq	DATAat0x373a6(%rip), %rdx
    000011f1: 	movq	%r15, %rdi
    000011f4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4596
    000011f9: 	subq	$0x8, %rsp
    000011fd: 	movq	%r13, %rdx
    00001200: 	movq	%r12, %rsi
    00001203: 	movq	%r14, %rdi
    00001206: 	pushq	%r15
    00001208: 	movq	-0x110(%rbp), %r8
    0000120f: 	leaq	_Z23interleave4to4_version5IjEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    00001216: 	movq	-0x100(%rbp), %rcx
    0000121d: 	callq	"_Z19test_interleave4to4IjPFvPjPKjS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4637
    00001222: 	movq	-0x60(%rbp), %rdi
    00001226: 	popq	%rcx
    00001227: 	popq	%rsi
    00001228: 	cmpq	%rbx, %rdi
    0000122b: 	je	.Ltmp2839 # Offset: 4651
    0000122d: 	movq	-0x50(%rbp), %rax
    00001231: 	leaq	0x1(%rax), %rsi
    00001235: 	callq	_ZdlPvm@PLT # Offset: 4661
.Ltmp2839:
    0000123a: 	movq	-0xf8(%rbp), %r15
    00001241: 	movq	-0x108(%rbp), %rsi
    00001248: 	leaq	DATAat0x373b8(%rip), %rdx
    0000124f: 	movq	%r15, %rdi
    00001252: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4690
    00001257: 	subq	$0x8, %rsp
    0000125b: 	movq	%r13, %rdx
    0000125e: 	movq	%r12, %rsi
    00001261: 	movq	%r14, %rdi
    00001264: 	pushq	%r15
    00001266: 	movq	-0x110(%rbp), %r8
    0000126d: 	leaq	_Z23interleave4to4_version6IjEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    00001274: 	movq	-0x100(%rbp), %rcx
    0000127b: 	callq	"_Z19test_interleave4to4IjPFvPjPKjS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4731
    00001280: 	movq	-0x60(%rbp), %rdi
    00001284: 	popq	%rax
    00001285: 	popq	%rdx
    00001286: 	cmpq	%rbx, %rdi
    00001289: 	je	.Ltmp2840 # Offset: 4745
    0000128b: 	movq	-0x50(%rbp), %rax
    0000128f: 	leaq	0x1(%rax), %rsi
    00001293: 	callq	_ZdlPvm@PLT # Offset: 4755
.Ltmp2840:
    00001298: 	movq	-0x108(%rbp), %rsi
    0000129f: 	movq	-0xf8(%rbp), %rdi
    000012a6: 	leaq	DATAat0x373ca(%rip), %rdx
    000012ad: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4781
    000012b2: 	movl	iterations(%rip), %edx
    000012b8: 	movq	-0x60(%rbp), %rdi
    000012bc: 	xorl	%r8d, %r8d
    000012bf: 	xorl	%ecx, %ecx
    000012c1: 	movl	$0x13880, %esi
    000012c6: 	callq	_Z9summarizePKciiii # Offset: 4806
    000012cb: 	movl	-0x118(%rbp), %eax
    000012d1: 	movq	-0x60(%rbp), %rdi
    000012d5: 	movl	%eax, iterations(%rip)
    000012db: 	cmpq	%rbx, %rdi
    000012de: 	je	.Ltmp2841 # Offset: 4830
    000012e0: 	movq	-0x50(%rbp), %rax
    000012e4: 	leaq	0x1(%rax), %rsi
    000012e8: 	callq	_ZdlPvm@PLT # Offset: 4840
.Ltmp2841:
    000012ed: 	movq	-0x80(%rbp), %rdi
    000012f1: 	leaq	-0x70(%rbp), %rax
    000012f5: 	cmpq	%rax, %rdi
    000012f8: 	je	.Ltmp2842 # Offset: 4856
    000012fa: 	movq	-0x70(%rbp), %rax
    000012fe: 	leaq	0x1(%rax), %rsi
    00001302: 	callq	_ZdlPvm@PLT # Offset: 4866
.Ltmp2842:
    00001307: 	movq	-0xa0(%rbp), %rdi
    0000130e: 	leaq	-0x90(%rbp), %rax
    00001315: 	cmpq	%rax, %rdi
    00001318: 	je	.Ltmp2843 # Offset: 4888
    0000131a: 	movq	-0x90(%rbp), %rax
    00001321: 	leaq	0x1(%rax), %rsi
    00001325: 	callq	_ZdlPvm@PLT # Offset: 4901
.Ltmp2843:
    0000132a: 	movq	-0xc0(%rbp), %rdi
    00001331: 	leaq	-0xb0(%rbp), %rax
    00001338: 	cmpq	%rax, %rdi
    0000133b: 	je	.Ltmp2844 # Offset: 4923
    0000133d: 	movq	-0xb0(%rbp), %rax
    00001344: 	leaq	0x1(%rax), %rsi
    00001348: 	callq	_ZdlPvm@PLT # Offset: 4936
.Ltmp2844:
    0000134d: 	movl	$0x4, %esi
    00001352: 	movq	%r14, %rdi
    00001355: 	callq	_ZdlPvm@PLT # Offset: 4949
    0000135a: 	movq	-0x110(%rbp), %rdi
    00001361: 	movl	$0x4, %esi
    00001366: 	callq	_ZdlPvm@PLT # Offset: 4966
    0000136b: 	movq	-0x100(%rbp), %rdi
    00001372: 	movl	$0x4, %esi
    00001377: 	callq	_ZdlPvm@PLT # Offset: 4983
    0000137c: 	movl	$0x4, %esi
    00001381: 	movq	%r13, %rdi
    00001384: 	callq	_ZdlPvm@PLT # Offset: 4996
    00001389: 	movq	%r12, %rdi
    0000138c: 	movl	$0x4, %esi
    00001391: 	callq	_ZdlPvm@PLT # Offset: 5009
    00001396: 	movq	-0xe0(%rbp), %rdi
    0000139d: 	cmpq	-0x120(%rbp), %rdi
    000013a4: 	je	.Ltmp2845 # Offset: 5028
    000013a6: 	movq	-0xd0(%rbp), %rax
    000013ad: 	leaq	0x1(%rax), %rsi
    000013b1: 	callq	_ZdlPvm@PLT # Offset: 5041
.Ltmp2845:
    000013b6: 	movq	-0x38(%rbp), %rax
    000013ba: 	subq	%fs:0x28, %rax
    000013c3: 	jne	.Ltmp2846 # Offset: 5059
    000013c9: 	leaq	-0x28(%rbp), %rsp
    000013cd: 	popq	%rbx
    000013ce: 	popq	%r12
    000013d0: 	popq	%r13
    000013d2: 	popq	%r14
    000013d4: 	popq	%r15
    000013d6: 	popq	%rbp
    000013d7: 	retq # Offset: 5079
    000013d8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2744:
    000013e0: 	addq	$0x20, -0xf8(%rbp)
    000013e8: 	movq	-0xf8(%rbp), %rax
    000013ef: 	cmpq	%rbx, %rax
    000013f2: 	jne	.Ltmp2745 # Offset: 5106
    000013f8: 	addq	$0x8, %r13
    000013fc: 	cmpq	%r13, %r15
    000013ff: 	ja	.Ltmp2746 # Offset: 5119
    00001405: 	jmp	.Ltmp2847 # Offset: 5125
.Ltmp2764:
    0000140a: 	testq	%r15, %r15
    0000140d: 	jne	.Ltmp2848 # Offset: 5133
    00001413: 	movq	%rbx, %rax
    00001416: 	jmp	.Ltmp2849 # Offset: 5142
.Ltmp2822:
    0000141b: 	testq	%r15, %r15
    0000141e: 	jne	.Ltmp2850 # Offset: 5150
    00001424: 	movq	%rbx, %rax
    00001427: 	jmp	.Ltmp2851 # Offset: 5159
.Ltmp2816:
    0000142c: 	testq	%r15, %r15
    0000142f: 	jne	.Ltmp2852 # Offset: 5167
    00001435: 	movq	%rbx, %rax
    00001438: 	jmp	.Ltmp2853 # Offset: 5176
.Ltmp2810:
    0000143d: 	testq	%r15, %r15
    00001440: 	jne	.Ltmp2854 # Offset: 5184
    00001446: 	movq	%rbx, %rax
    00001449: 	jmp	.Ltmp2855 # Offset: 5193
.Ltmp2802:
    0000144e: 	testq	%r15, %r15
    00001451: 	jne	.Ltmp2856 # Offset: 5201
    00001457: 	movq	%rbx, %rax
    0000145a: 	jmp	.Ltmp2857 # Offset: 5210
.Ltmp2796:
    0000145f: 	testq	%r15, %r15
    00001462: 	jne	.Ltmp2858 # Offset: 5218
    00001468: 	movq	%rbx, %rax
    0000146b: 	jmp	.Ltmp2859 # Offset: 5227
.Ltmp2790:
    00001470: 	testq	%r15, %r15
    00001473: 	jne	.Ltmp2860 # Offset: 5235
    00001479: 	movq	%rbx, %rax
    0000147c: 	jmp	.Ltmp2861 # Offset: 5244
.Ltmp2831:
    00001481: 	testq	%r15, %r15
    00001484: 	jne	.Ltmp2862 # Offset: 5252
    0000148a: 	movq	%rbx, %rax
    0000148d: 	jmp	.Ltmp2863 # Offset: 5261
.Ltmp2784:
    00001492: 	testq	%r15, %r15
    00001495: 	jne	.Ltmp2864 # Offset: 5269
    0000149b: 	movq	%rbx, %rax
    0000149e: 	jmp	.Ltmp2865 # Offset: 5278
.Ltmp2776:
    000014a3: 	testq	%r15, %r15
    000014a6: 	jne	.Ltmp2866 # Offset: 5286
    000014ac: 	movq	%rbx, %rax
    000014af: 	jmp	.Ltmp2867 # Offset: 5295
.Ltmp2770:
    000014b4: 	testq	%r15, %r15
    000014b7: 	jne	.Ltmp2868 # Offset: 5303
    000014bd: 	movq	%rbx, %rax
    000014c0: 	jmp	.Ltmp2869 # Offset: 5312
.Ltmp2789:
    000014c5: 	movq	-0xf8(%rbp), %rdi
    000014cc: 	leaq	-0xe8(%rbp), %rsi
    000014d3: 	xorl	%edx, %edx
    000014d5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5333
    000014da: 	movq	%rax, -0x60(%rbp)
    000014de: 	movq	%rax, %rdi
    000014e1: 	movq	-0xe8(%rbp), %rax
    000014e8: 	movq	%rax, -0x50(%rbp)
.Ltmp2879:
    000014ec: 	movq	-0x130(%rbp), %rsi
    000014f3: 	movq	%r15, %rdx
    000014f6: 	callq	memcpy@PLT # Offset: 5366
    000014fb: 	movq	-0xe8(%rbp), %r15
    00001502: 	movq	-0x60(%rbp), %rax
    00001506: 	jmp	.Ltmp2861 # Offset: 5382
.Ltmp2783:
    0000150b: 	movq	-0xf8(%rbp), %rdi
    00001512: 	leaq	-0xe8(%rbp), %rsi
    00001519: 	xorl	%edx, %edx
    0000151b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5403
    00001520: 	movq	%rax, -0x60(%rbp)
    00001524: 	movq	%rax, %rdi
    00001527: 	movq	-0xe8(%rbp), %rax
    0000152e: 	movq	%rax, -0x50(%rbp)
.Ltmp2881:
    00001532: 	movq	-0x130(%rbp), %rsi
    00001539: 	movq	%r15, %rdx
    0000153c: 	callq	memcpy@PLT # Offset: 5436
    00001541: 	movq	-0xe8(%rbp), %r15
    00001548: 	movq	-0x60(%rbp), %rax
    0000154c: 	jmp	.Ltmp2865 # Offset: 5452
.Ltmp2775:
    00001551: 	movq	-0xf8(%rbp), %rdi
    00001558: 	leaq	-0xe8(%rbp), %rsi
    0000155f: 	xorl	%edx, %edx
    00001561: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5473
    00001566: 	movq	%rax, -0x60(%rbp)
    0000156a: 	movq	%rax, %rdi
    0000156d: 	movq	-0xe8(%rbp), %rax
    00001574: 	movq	%rax, -0x50(%rbp)
.Ltmp2882:
    00001578: 	movq	-0x108(%rbp), %rsi
    0000157f: 	movq	%r15, %rdx
    00001582: 	callq	memcpy@PLT # Offset: 5506
    00001587: 	movq	-0xe8(%rbp), %r15
    0000158e: 	movq	-0x60(%rbp), %rax
    00001592: 	jmp	.Ltmp2867 # Offset: 5522
.Ltmp2769:
    00001597: 	movq	-0xf8(%rbp), %rdi
    0000159e: 	leaq	-0xe8(%rbp), %rsi
    000015a5: 	xorl	%edx, %edx
    000015a7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5543
    000015ac: 	movq	%rax, -0x60(%rbp)
    000015b0: 	movq	%rax, %rdi
    000015b3: 	movq	-0xe8(%rbp), %rax
    000015ba: 	movq	%rax, -0x50(%rbp)
.Ltmp2883:
    000015be: 	movq	-0x108(%rbp), %rsi
    000015c5: 	movq	%r15, %rdx
    000015c8: 	callq	memcpy@PLT # Offset: 5576
    000015cd: 	movq	-0xe8(%rbp), %r15
    000015d4: 	movq	-0x60(%rbp), %rax
    000015d8: 	jmp	.Ltmp2869 # Offset: 5592
.Ltmp2763:
    000015dd: 	leaq	-0xe8(%rbp), %rsi
    000015e4: 	leaq	-0x60(%rbp), %rdi
    000015e8: 	xorl	%edx, %edx
    000015ea: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5610
    000015ef: 	movq	%rax, -0x60(%rbp)
    000015f3: 	movq	%rax, %rdi
    000015f6: 	movq	-0xe8(%rbp), %rax
    000015fd: 	movq	%rax, -0x50(%rbp)
.Ltmp2873:
    00001601: 	movq	-0xf8(%rbp), %rsi
    00001608: 	movq	%r15, %rdx
    0000160b: 	callq	memcpy@PLT # Offset: 5643
    00001610: 	movq	-0xe8(%rbp), %r15
    00001617: 	movq	-0x60(%rbp), %rax
    0000161b: 	jmp	.Ltmp2849 # Offset: 5659
.Ltmp2815:
    00001620: 	movq	-0xf8(%rbp), %rdi
    00001627: 	leaq	-0xe8(%rbp), %rsi
    0000162e: 	xorl	%edx, %edx
    00001630: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5680
    00001635: 	movq	%rax, -0x60(%rbp)
    00001639: 	movq	%rax, %rdi
    0000163c: 	movq	-0xe8(%rbp), %rax
    00001643: 	movq	%rax, -0x50(%rbp)
.Ltmp2875:
    00001647: 	movq	-0x130(%rbp), %rsi
    0000164e: 	movq	%r15, %rdx
    00001651: 	callq	memcpy@PLT # Offset: 5713
    00001656: 	movq	-0xe8(%rbp), %r15
    0000165d: 	movq	-0x60(%rbp), %rax
    00001661: 	jmp	.Ltmp2853 # Offset: 5729
.Ltmp2809:
    00001666: 	movq	-0xf8(%rbp), %rdi
    0000166d: 	leaq	-0xe8(%rbp), %rsi
    00001674: 	xorl	%edx, %edx
    00001676: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5750
    0000167b: 	movq	%rax, -0x60(%rbp)
    0000167f: 	movq	%rax, %rdi
    00001682: 	movq	-0xe8(%rbp), %rax
    00001689: 	movq	%rax, -0x50(%rbp)
.Ltmp2876:
    0000168d: 	movq	-0x130(%rbp), %rsi
    00001694: 	movq	%r15, %rdx
    00001697: 	callq	memcpy@PLT # Offset: 5783
    0000169c: 	movq	-0xe8(%rbp), %r15
    000016a3: 	movq	-0x60(%rbp), %rax
    000016a7: 	jmp	.Ltmp2855 # Offset: 5799
.Ltmp2830:
    000016ac: 	movq	-0xf8(%rbp), %rdi
    000016b3: 	leaq	-0xe8(%rbp), %rsi
    000016ba: 	xorl	%edx, %edx
    000016bc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5820
    000016c1: 	movq	%rax, -0x60(%rbp)
    000016c5: 	movq	%rax, %rdi
    000016c8: 	movq	-0xe8(%rbp), %rax
    000016cf: 	movq	%rax, -0x50(%rbp)
.Ltmp2880:
    000016d3: 	movq	-0x140(%rbp), %rsi
    000016da: 	movq	%r15, %rdx
    000016dd: 	callq	memcpy@PLT # Offset: 5853
    000016e2: 	movq	-0xe8(%rbp), %r15
    000016e9: 	movq	-0x60(%rbp), %rax
    000016ed: 	jmp	.Ltmp2863 # Offset: 5869
.Ltmp2821:
    000016f2: 	movq	-0xf8(%rbp), %rdi
    000016f9: 	leaq	-0xe8(%rbp), %rsi
    00001700: 	xorl	%edx, %edx
    00001702: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5890
    00001707: 	movq	%rax, -0x60(%rbp)
    0000170b: 	movq	%rax, %rdi
    0000170e: 	movq	-0xe8(%rbp), %rax
    00001715: 	movq	%rax, -0x50(%rbp)
.Ltmp2874:
    00001719: 	movq	-0x140(%rbp), %rsi
    00001720: 	movq	%r15, %rdx
    00001723: 	callq	memcpy@PLT # Offset: 5923
    00001728: 	movq	-0xe8(%rbp), %r15
    0000172f: 	movq	-0x60(%rbp), %rax
    00001733: 	jmp	.Ltmp2851 # Offset: 5939
.Ltmp2801:
    00001738: 	movq	-0xf8(%rbp), %rdi
    0000173f: 	leaq	-0xe8(%rbp), %rsi
    00001746: 	xorl	%edx, %edx
    00001748: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5960
    0000174d: 	movq	%rax, -0x60(%rbp)
    00001751: 	movq	%rax, %rdi
    00001754: 	movq	-0xe8(%rbp), %rax
    0000175b: 	movq	%rax, -0x50(%rbp)
.Ltmp2877:
    0000175f: 	movq	-0x130(%rbp), %rsi
    00001766: 	movq	%r15, %rdx
    00001769: 	callq	memcpy@PLT # Offset: 5993
    0000176e: 	movq	-0xe8(%rbp), %r15
    00001775: 	movq	-0x60(%rbp), %rax
    00001779: 	jmp	.Ltmp2857 # Offset: 6009
.Ltmp2795:
    0000177e: 	movq	-0xf8(%rbp), %rdi
    00001785: 	leaq	-0xe8(%rbp), %rsi
    0000178c: 	xorl	%edx, %edx
    0000178e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6030
    00001793: 	movq	%rax, -0x60(%rbp)
    00001797: 	movq	%rax, %rdi
    0000179a: 	movq	-0xe8(%rbp), %rax
    000017a1: 	movq	%rax, -0x50(%rbp)
.Ltmp2878:
    000017a5: 	movq	-0x130(%rbp), %rsi
    000017ac: 	movq	%r15, %rdx
    000017af: 	callq	memcpy@PLT # Offset: 6063
    000017b4: 	movq	-0xe8(%rbp), %r15
    000017bb: 	movq	-0x60(%rbp), %rax
    000017bf: 	jmp	.Ltmp2859 # Offset: 6079
.Ltmp2747:
    000017c4: 	movq	-0x108(%rbp), %rbx
    000017cb: 	cmpq	%rbx, %rsi
    000017ce: 	je	.Ltmp2752 # Offset: 6094
    000017d4: 	movq	%rsi, %rbx
.Ltmp2872:
    000017d7: 	movq	(%rbx), %rdi
    000017da: 	leaq	0x10(%rbx), %rax
    000017de: 	cmpq	%rax, %rdi
    000017e1: 	je	.Ltmp2870 # Offset: 6113
.Ltmp2871:
    000017e3: 	movq	0x10(%rbx), %rax
    000017e7: 	addq	$0x20, %rbx
    000017eb: 	leaq	0x1(%rax), %rsi
    000017ef: 	movq	%rax, -0xf8(%rbp)
    000017f6: 	callq	_ZdlPvm@PLT # Offset: 6134
    000017fb: 	cmpq	%rbx, -0x108(%rbp)
    00001802: 	je	.Ltmp2752 # Offset: 6146
    00001808: 	movq	(%rbx), %rdi
    0000180b: 	leaq	0x10(%rbx), %rax
    0000180f: 	cmpq	%rax, %rdi
    00001812: 	jne	.Ltmp2871 # Offset: 6162
.Ltmp2870:
    00001814: 	movq	%rbx, %rax
    00001817: 	addq	$0x20, %rax
    0000181b: 	movq	%rax, %rbx
    0000181e: 	cmpq	%rax, -0x108(%rbp)
    00001825: 	jne	.Ltmp2872 # Offset: 6181
    00001827: 	jmp	.Ltmp2752 # Offset: 6183
.Ltmp2765:
    0000182c: 	leaq	DATAat0x37182(%rip), %rdi
    00001833: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6195
.Ltmp2768:
    00001838: 	leaq	DATAat0x37158(%rip), %rdi
    0000183f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6207
.Ltmp2771:
    00001844: 	leaq	DATAat0x37182(%rip), %rdi
    0000184b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6219
.Ltmp2774:
    00001850: 	leaq	DATAat0x37158(%rip), %rdi
    00001857: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6231
.Ltmp2777:
    0000185c: 	leaq	DATAat0x37182(%rip), %rdi
    00001863: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6243
.Ltmp2782:
    00001868: 	leaq	DATAat0x37158(%rip), %rdi
    0000186f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6255
.Ltmp2785:
    00001874: 	leaq	DATAat0x37182(%rip), %rdi
    0000187b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6267
.Ltmp2788:
    00001880: 	leaq	DATAat0x37158(%rip), %rdi
    00001887: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6279
.Ltmp2791:
    0000188c: 	leaq	DATAat0x37182(%rip), %rdi
    00001893: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6291
.Ltmp2794:
    00001898: 	leaq	DATAat0x37158(%rip), %rdi
    0000189f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6303
.Ltmp2797:
    000018a4: 	leaq	DATAat0x37182(%rip), %rdi
    000018ab: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6315
.Ltmp2800:
    000018b0: 	leaq	DATAat0x37158(%rip), %rdi
    000018b7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6327
.Ltmp2803:
    000018bc: 	leaq	DATAat0x37182(%rip), %rdi
    000018c3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6339
.Ltmp2808:
    000018c8: 	leaq	DATAat0x37158(%rip), %rdi
    000018cf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6351
.Ltmp2811:
    000018d4: 	leaq	DATAat0x37182(%rip), %rdi
    000018db: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6363
.Ltmp2814:
    000018e0: 	leaq	DATAat0x37158(%rip), %rdi
    000018e7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6375
.Ltmp2817:
    000018ec: 	leaq	DATAat0x37182(%rip), %rdi
    000018f3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6387
.Ltmp2820:
    000018f8: 	leaq	DATAat0x37158(%rip), %rdi
    000018ff: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6399
.Ltmp2823:
    00001904: 	leaq	DATAat0x37182(%rip), %rdi
    0000190b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6411
.Ltmp2829:
    00001910: 	leaq	DATAat0x37158(%rip), %rdi
    00001917: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6423
.Ltmp2832:
    0000191c: 	leaq	DATAat0x37182(%rip), %rdi
    00001923: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6435
.Ltmp2846:
    00001928: 	callq	__stack_chk_fail@PLT # Offset: 6440
.Ltmp2848:
    0000192d: 	movq	%rbx, %rdi
    00001930: 	jmp	.Ltmp2873 # Offset: 6448
.Ltmp2850:
    00001935: 	movq	%rbx, %rdi
    00001938: 	jmp	.Ltmp2874 # Offset: 6456
.Ltmp2852:
    0000193d: 	movq	%rbx, %rdi
    00001940: 	jmp	.Ltmp2875 # Offset: 6464
.Ltmp2854:
    00001945: 	movq	%rbx, %rdi
    00001948: 	jmp	.Ltmp2876 # Offset: 6472
.Ltmp2856:
    0000194d: 	movq	%rbx, %rdi
    00001950: 	jmp	.Ltmp2877 # Offset: 6480
.Ltmp2858:
    00001955: 	movq	%rbx, %rdi
    00001958: 	jmp	.Ltmp2878 # Offset: 6488
.Ltmp2860:
    0000195d: 	movq	%rbx, %rdi
    00001960: 	jmp	.Ltmp2879 # Offset: 6496
.Ltmp2862:
    00001965: 	movq	%rbx, %rdi
    00001968: 	jmp	.Ltmp2880 # Offset: 6504
.Ltmp2864:
    0000196d: 	movq	%rbx, %rdi
    00001970: 	jmp	.Ltmp2881 # Offset: 6512
.Ltmp2866:
    00001975: 	movq	%rbx, %rdi
    00001978: 	jmp	.Ltmp2882 # Offset: 6520
.Ltmp2868:
    0000197d: 	movq	%rbx, %rdi
    00001980: 	jmp	.Ltmp2883 # Offset: 6528
.Ltmp2762:
    00001985: 	leaq	DATAat0x37158(%rip), %rdi
    0000198c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6540
    00001991: 	endbr64
.Ltmp2885:
    00001995: 	movq	%rax, %r15
    00001998: 	jmp	.Ltmp2884 # Offset: 6552
    0000199d: 	endbr64
    000019a1: 	jmp	.Ltmp2885 # Offset: 6561
    000019a3: 	endbr64
    000019a7: 	jmp	.Ltmp2885 # Offset: 6567
    000019a9: 	endbr64
    000019ad: 	movq	%rax, %rbx
    000019b0: 	jmp	.Ltmp2886 # Offset: 6576
    000019b2: 	endbr64
    000019b6: 	jmp	.Ltmp2885 # Offset: 6582
.Ltmp2894:
    000019b8: 	movq	-0x60(%rbp), %rdi
    000019bc: 	cmpq	%rbx, %rdi
    000019bf: 	jne	.Ltmp2887 # Offset: 6591
.Ltmp2897:
    000019c5: 	movq	%r15, %rbx
.Ltmp2896:
    000019c8: 	movq	-0xa0(%rbp), %rdi
    000019cf: 	leaq	-0x90(%rbp), %rax
    000019d6: 	cmpq	%rax, %rdi
    000019d9: 	je	.Ltmp2886 # Offset: 6617
    000019db: 	movq	-0x90(%rbp), %rax
    000019e2: 	leaq	0x1(%rax), %rsi
    000019e6: 	callq	_ZdlPvm@PLT # Offset: 6630
.Ltmp2886:
    000019eb: 	movq	-0xc0(%rbp), %rdi
    000019f2: 	leaq	-0xb0(%rbp), %rax
    000019f9: 	cmpq	%rax, %rdi
    000019fc: 	jne	.Ltmp2888 # Offset: 6652
.Ltmp2892:
    00001a02: 	movl	$0x4, %esi
    00001a07: 	movq	%r14, %rdi
    00001a0a: 	callq	_ZdlPvm@PLT # Offset: 6666
.Ltmp2902:
    00001a0f: 	movq	-0x110(%rbp), %rdi
    00001a16: 	movl	$0x4, %esi
    00001a1b: 	callq	_ZdlPvm@PLT # Offset: 6683
.Ltmp2904:
    00001a20: 	movq	-0x100(%rbp), %rdi
    00001a27: 	movl	$0x4, %esi
    00001a2c: 	callq	_ZdlPvm@PLT # Offset: 6700
.Ltmp2906:
    00001a31: 	movl	$0x4, %esi
    00001a36: 	movq	%r13, %rdi
    00001a39: 	callq	_ZdlPvm@PLT # Offset: 6713
.Ltmp2900:
    00001a3e: 	movl	$0x4, %esi
    00001a43: 	movq	%r12, %rdi
    00001a46: 	callq	_ZdlPvm@PLT # Offset: 6726
.Ltmp2901:
    00001a4b: 	movq	-0xe0(%rbp), %rdi
    00001a52: 	cmpq	-0x120(%rbp), %rdi
    00001a59: 	je	.Ltmp2889 # Offset: 6745
    00001a5b: 	movq	-0xd0(%rbp), %rax
    00001a62: 	leaq	0x1(%rax), %rsi
    00001a66: 	callq	_ZdlPvm@PLT # Offset: 6758
.Ltmp2889:
    00001a6b: 	movq	%rbx, %rdi
    00001a6e: 	callq	_Unwind_Resume@PLT # Offset: 6766
    00001a73: 	endbr64
.Ltmp2907:
    00001a77: 	movq	%rax, %r15
    00001a7a: 	jmp	.Ltmp2890 # Offset: 6778
.Ltmp2884:
    00001a7c: 	movq	-0x60(%rbp), %rdi
    00001a80: 	cmpq	%rbx, %rdi
    00001a83: 	je	.Ltmp2891 # Offset: 6787
    00001a85: 	movq	-0x50(%rbp), %rax
    00001a89: 	leaq	0x1(%rax), %rsi
    00001a8d: 	callq	_ZdlPvm@PLT # Offset: 6797
.Ltmp2891:
    00001a92: 	movq	%r15, %rbx
    00001a95: 	jmp	.Ltmp2886 # Offset: 6805
.Ltmp2888:
    00001a9a: 	movq	-0xb0(%rbp), %rax
    00001aa1: 	leaq	0x1(%rax), %rsi
    00001aa5: 	callq	_ZdlPvm@PLT # Offset: 6821
    00001aaa: 	jmp	.Ltmp2892 # Offset: 6826
.Ltmp2890:
    00001aaf: 	movq	-0x60(%rbp), %rdi
    00001ab3: 	cmpq	%rbx, %rdi
    00001ab6: 	je	.Ltmp2893 # Offset: 6838
    00001ab8: 	movq	-0x50(%rbp), %rax
    00001abc: 	leaq	0x1(%rax), %rsi
    00001ac0: 	callq	_ZdlPvm@PLT # Offset: 6848
.Ltmp2893:
    00001ac5: 	movq	%r15, %rbx
    00001ac8: 	jmp	.Ltmp2892 # Offset: 6856
    00001acd: 	endbr64
    00001ad1: 	jmp	.Ltmp2885 # Offset: 6865
    00001ad6: 	endbr64
    00001ada: 	jmp	.Ltmp2885 # Offset: 6874
    00001adf: 	endbr64
.Ltmp2895:
    00001ae3: 	movq	%rax, %r15
    00001ae6: 	jmp	.Ltmp2894 # Offset: 6886
    00001aeb: 	endbr64
    00001aef: 	jmp	.Ltmp2895 # Offset: 6895
    00001af1: 	endbr64
    00001af5: 	jmp	.Ltmp2895 # Offset: 6901
    00001af7: 	endbr64
    00001afb: 	jmp	.Ltmp2895 # Offset: 6907
    00001afd: 	endbr64
    00001b01: 	jmp	.Ltmp2885 # Offset: 6913
    00001b06: 	endbr64
    00001b0a: 	movq	%rax, %rbx
    00001b0d: 	jmp	.Ltmp2896 # Offset: 6925
.Ltmp2887:
    00001b12: 	movq	-0x50(%rbp), %rax
    00001b16: 	leaq	0x1(%rax), %rsi
    00001b1a: 	callq	_ZdlPvm@PLT # Offset: 6938
    00001b1f: 	jmp	.Ltmp2897 # Offset: 6943
    00001b24: 	endbr64
    00001b28: 	jmp	.Ltmp2885 # Offset: 6952
    00001b2d: 	endbr64
    00001b31: 	jmp	.Ltmp2895 # Offset: 6961
    00001b33: 	endbr64
.Ltmp2899:
    00001b37: 	movq	%rax, %r15
    00001b3a: 	jmp	.Ltmp2898 # Offset: 6970
    00001b3c: 	endbr64
    00001b40: 	jmp	.Ltmp2899 # Offset: 6976
    00001b42: 	endbr64
    00001b46: 	jmp	.Ltmp2899 # Offset: 6982
    00001b48: 	endbr64
    00001b4c: 	jmp	.Ltmp2899 # Offset: 6988
    00001b4e: 	endbr64
    00001b52: 	movq	%rax, %rbx
    00001b55: 	jmp	.Ltmp2900 # Offset: 6997
    00001b5a: 	endbr64
    00001b5e: 	movq	%rax, %rbx
    00001b61: 	jmp	.Ltmp2901 # Offset: 7009
    00001b66: 	endbr64
    00001b6a: 	movq	%rax, %rbx
    00001b6d: 	jmp	.Ltmp2902 # Offset: 7021
.Ltmp2898:
    00001b72: 	movq	-0x60(%rbp), %rdi
    00001b76: 	cmpq	%rbx, %rdi
    00001b79: 	je	.Ltmp2903 # Offset: 7033
    00001b7b: 	movq	-0x50(%rbp), %rax
    00001b7f: 	leaq	0x1(%rax), %rsi
    00001b83: 	callq	_ZdlPvm@PLT # Offset: 7043
.Ltmp2903:
    00001b88: 	movq	%r15, %rbx
.Ltmp2905:
    00001b8b: 	movq	-0x80(%rbp), %rdi
    00001b8f: 	leaq	-0x70(%rbp), %rax
    00001b93: 	cmpq	%rax, %rdi
    00001b96: 	je	.Ltmp2896 # Offset: 7062
    00001b9c: 	movq	-0x70(%rbp), %rax
    00001ba0: 	leaq	0x1(%rax), %rsi
    00001ba4: 	callq	_ZdlPvm@PLT # Offset: 7076
    00001ba9: 	jmp	.Ltmp2896 # Offset: 7081
    00001bae: 	endbr64
    00001bb2: 	movq	%rax, %rbx
    00001bb5: 	jmp	.Ltmp2904 # Offset: 7093
    00001bba: 	endbr64
    00001bbe: 	jmp	.Ltmp2895 # Offset: 7102
    00001bc3: 	endbr64
    00001bc7: 	jmp	.Ltmp2899 # Offset: 7111
    00001bcc: 	endbr64
    00001bd0: 	jmp	.Ltmp2895 # Offset: 7120
    00001bd5: 	endbr64
    00001bd9: 	jmp	.Ltmp2895 # Offset: 7129
    00001bde: 	endbr64
    00001be2: 	jmp	.Ltmp2899 # Offset: 7138
    00001be7: 	endbr64
    00001beb: 	movq	%rax, %rbx
    00001bee: 	jmp	.Ltmp2905 # Offset: 7150
    00001bf0: 	endbr64
    00001bf4: 	jmp	.Ltmp2899 # Offset: 7156
    00001bf9: 	endbr64
    00001bfd: 	movq	%rax, %rbx
    00001c00: 	jmp	.Ltmp2906 # Offset: 7168
    00001c05: 	endbr64
    00001c09: 	jmp	.Ltmp2907 # Offset: 7177
    00001c0e: 	endbr64
    00001c12: 	jmp	.Ltmp2907 # Offset: 7186
    00001c17: 	endbr64
    00001c1b: 	movq	%rax, %rbx
    00001c1e: 	jmp	.Ltmp2892 # Offset: 7198
    00001c23: 	endbr64
    00001c27: 	jmp	.Ltmp2907 # Offset: 7207
    00001c2c: 	endbr64
    00001c30: 	jmp	.Ltmp2907 # Offset: 7216
    00001c35: 	endbr64
    00001c39: 	jmp	.Ltmp2907 # Offset: 7225
    00001c3e: 	endbr64
    00001c42: 	jmp	.Ltmp2907 # Offset: 7234
    00001c47: 	endbr64
    00001c4b: 	jmp	.Ltmp2907 # Offset: 7243
    00001c50: 	endbr64
    00001c54: 	jmp	.Ltmp2907 # Offset: 7252
    00001c59: 	endbr64
    00001c5d: 	jmp	.Ltmp2907 # Offset: 7261
    00001c62: 	endbr64
    00001c66: 	jmp	.Ltmp2907 # Offset: 7270
    00001c6b: 	endbr64
    00001c6f: 	jmp	.Ltmp2907 # Offset: 7279
    00001c74: 	endbr64
    00001c78: 	jmp	.Ltmp2907 # Offset: 7288
    00001c7d: 	endbr64
    00001c81: 	jmp	.Ltmp2907 # Offset: 7297
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIjEvv"

Binary Function "_Z19test_interleave3to4ItPFvPttPKtS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z19test_interleave3to4ItPFvPttPKtS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z19test_interleave3to4ItPFvPttPKtS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/interleave.cpp/1
  Number      : 248
  State       : disassembled
  Address     : 0x2ea00
  Size        : 0x2e7
  MaxSize     : 0x2f0
  Offset      : 0x2ea00
  Section     : .text
  Orc Section : .local.text._Z19test_interleave3to4ItPFvPttPKtS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0247:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%r8, %r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rcx, %r13
    0000000c: 	pushq	%r12
    0000000e: 	movq	%rdx, %r12
    00000011: 	movl	$0x9c400, %edx
    00000016: 	pushq	%rbp
    00000017: 	movq	%rsi, %rbp
    0000001a: 	xorl	%esi, %esi
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x38, %rsp
    00000024: 	movq	0x70(%rsp), %rax
    00000029: 	movq	%r9, 0x8(%rsp)
    0000002e: 	movq	%rax, 0x10(%rsp)
    00000033: 	movq	%fs:0x28, %rax
    0000003c: 	movq	%rax, 0x28(%rsp)
    00000041: 	xorl	%eax, %eax
    00000043: 	callq	memset@PLT # Offset: 67
    00000048: 	movzwl	(%rbp), %eax
    0000004c: 	leaq	0x27100(%rbp), %rdx
    00000053: 	movd	%eax, %xmm0
    00000057: 	movq	%rbp, %rax
    0000005a: 	punpcklwd	%xmm0, %xmm0
    0000005e: 	pshufd	$0x0, %xmm0, %xmm0
    00000063: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2908:
    00000068: 	movups	%xmm0, (%rax)
    0000006b: 	addq	$0x10, %rax
    0000006f: 	cmpq	%rdx, %rax
    00000072: 	jne	.Ltmp2908 # Offset: 114
    00000074: 	callq	clock@PLT # Offset: 116
    00000079: 	xorl	%r15d, %r15d
    0000007c: 	movq	%rax, start_time(%rip)
    00000083: 	movl	iterations(%rip), %eax
    00000089: 	testl	%eax, %eax
    0000008b: 	jle	.Ltmp2909 # Offset: 139
    0000008d: 	nopl	(%rax) # Size: 3
.Ltmp2910:
    00000090: 	movzwl	(%rbp), %esi
    00000094: 	movq	0x8(%rsp), %rax
    00000099: 	movq	%r14, %r8
    0000009c: 	movq	%r13, %rcx
    0000009f: 	movl	$0x13880, %r9d
    000000a5: 	movq	%r12, %rdx
    000000a8: 	movq	%rbx, %rdi
    000000ab: 	addl	$0x1, %r15d
    000000af: 	callq	*%rax # Offset: 175
    000000b1: 	cmpl	iterations(%rip), %r15d
    000000b8: 	jl	.Ltmp2910 # Offset: 184
.Ltmp2909:
    000000ba: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000c1: 	movq	"_ZL7gLabels/1"+48(%rip), %rcx
    000000c8: 	subq	$0x20, %rax
    000000cc: 	cmpq	%rax, %rcx
    000000cf: 	je	.Ltmp2911 # Offset: 207
    000000d5: 	movq	0x10(%rsp), %rax
    000000da: 	leaq	0x10(%rcx), %rdi
    000000de: 	movq	%rdi, (%rcx)
    000000e1: 	movq	(%rax), %r8
    000000e4: 	movq	0x8(%rax), %r15
    000000e8: 	movq	%r8, %rax
    000000eb: 	addq	%r15, %rax
    000000ee: 	je	.Ltmp2912 # Offset: 238
    000000f0: 	testq	%r8, %r8
    000000f3: 	je	.Ltmp2913 # Offset: 243
.Ltmp2912:
    000000f9: 	movq	%r15, 0x20(%rsp)
    000000fe: 	cmpq	$0xf, %r15
    00000102: 	ja	.Ltmp2914 # Offset: 258
    00000108: 	cmpq	$0x1, %r15
    0000010c: 	jne	.Ltmp2915 # Offset: 268
    00000112: 	movzbl	(%r8), %eax
    00000116: 	movb	%al, 0x10(%rcx)
.Ltmp2920:
    00000119: 	movq	%r15, 0x8(%rcx)
    0000011d: 	movb	$0x0, (%rdi,%r15)
    00000122: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000129: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000130: 	addq	$0x20, %rax
    00000134: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000013b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000142: 	je	.Ltmp2916 # Offset: 322
.Ltmp2921:
    00000148: 	movq	-0x20(%rax), %r15
    0000014c: 	callq	clock@PLT # Offset: 332
    00000151: 	pxor	%xmm0, %xmm0
    00000155: 	movq	%rax, end_time(%rip)
    0000015c: 	movq	%r15, %rdi
    0000015f: 	subq	start_time(%rip), %rax
    00000166: 	cvtsi2sd	%rax, %xmm0
    0000016b: 	divsd	DATAat0x37530(%rip), %xmm0
    00000173: 	callq	_Z13record_resultdPKc # Offset: 371
    00000178: 	xorl	%eax, %eax
.Ltmp2918:
    0000017a: 	movzwl	(%rbp,%rax), %ecx
    0000017f: 	cmpw	%cx, (%rbx,%rax,4)
    00000183: 	jne	.Ltmp2917 # Offset: 387
    00000189: 	movzwl	(%r12,%rax), %edi
    0000018e: 	cmpw	%di, 0x2(%rbx,%rax,4)
    00000193: 	jne	.Ltmp2917 # Offset: 403
    00000199: 	movzwl	(%r13,%rax), %ecx
    0000019f: 	cmpw	%cx, 0x4(%rbx,%rax,4)
    000001a4: 	jne	.Ltmp2917 # Offset: 420
    000001aa: 	movzwl	(%r14,%rax), %edx
    000001af: 	cmpw	%dx, 0x6(%rbx,%rax,4)
    000001b4: 	jne	.Ltmp2917 # Offset: 436
    000001ba: 	addq	$0x2, %rax
    000001be: 	cmpq	$0x27100, %rax
    000001c4: 	jne	.Ltmp2918 # Offset: 452
    000001c6: 	movq	0x28(%rsp), %rax
    000001cb: 	subq	%fs:0x28, %rax
    000001d4: 	jne	.Ltmp2919 # Offset: 468
    000001da: 	addq	$0x38, %rsp
    000001de: 	popq	%rbx
    000001df: 	popq	%rbp
    000001e0: 	popq	%r12
    000001e2: 	popq	%r13
    000001e4: 	popq	%r14
    000001e6: 	popq	%r15
    000001e8: 	retq # Offset: 488
    000001e9: 	nopl	(%rax) # Size: 7
.Ltmp2914:
    000001f0: 	movq	%rcx, %rdi
    000001f3: 	leaq	0x20(%rsp), %rsi
    000001f8: 	xorl	%edx, %edx
    000001fa: 	movq	%r8, 0x18(%rsp)
    000001ff: 	movq	%rcx, 0x8(%rsp)
    00000204: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 516
    00000209: 	movq	0x8(%rsp), %rcx
    0000020e: 	movq	0x18(%rsp), %r8
    00000213: 	movq	%rax, %rdi
    00000216: 	movq	%rax, (%rcx)
    00000219: 	movq	0x20(%rsp), %rax
    0000021e: 	movq	%rax, 0x10(%rcx)
.Ltmp2922:
    00000222: 	movq	%r15, %rdx
    00000225: 	movq	%r8, %rsi
    00000228: 	movq	%rcx, 0x8(%rsp)
    0000022d: 	callq	memcpy@PLT # Offset: 557
    00000232: 	movq	0x8(%rsp), %rcx
    00000237: 	movq	0x20(%rsp), %r15
    0000023c: 	movq	(%rcx), %rdi
    0000023f: 	jmp	.Ltmp2920 # Offset: 575
    00000244: 	nopl	(%rax) # Size: 4
.Ltmp2917:
    00000248: 	movq	0x28(%rsp), %rax
    0000024d: 	subq	%fs:0x28, %rax
    00000256: 	jne	.Ltmp2919 # Offset: 598
    00000258: 	movq	0x10(%rsp), %rax
    0000025d: 	leaq	DATAat0x371c8(%rip), %rsi
    00000264: 	movl	$0x1, %edi
    00000269: 	movq	(%rax), %rdx
    0000026c: 	addq	$0x38, %rsp
    00000270: 	xorl	%eax, %eax
    00000272: 	popq	%rbx
    00000273: 	popq	%rbp
    00000274: 	popq	%r12
    00000276: 	popq	%r13
    00000278: 	popq	%r14
    0000027a: 	popq	%r15
    0000027c: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 636
    00000281: 	nopl	(%rax) # Size: 7
.Ltmp2911:
    00000288: 	movq	0x10(%rsp), %rsi
    0000028d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000294: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 660
    00000299: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002a0: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000002a7: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000002ae: 	jne	.Ltmp2921 # Offset: 686
.Ltmp2916:
    000002b4: 	movq	-0x8(%rdx), %rax
    000002b8: 	addq	$0x200, %rax
    000002be: 	jmp	.Ltmp2921 # Offset: 702
    000002c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2915:
    000002c8: 	testq	%r15, %r15
    000002cb: 	je	.Ltmp2920 # Offset: 715
    000002d1: 	jmp	.Ltmp2922 # Offset: 721
.Ltmp2919:
    000002d6: 	callq	__stack_chk_fail@PLT # Offset: 726
.Ltmp2913:
    000002db: 	leaq	DATAat0x37158(%rip), %rdi
    000002e2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 738
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave3to4ItPFvPttPKtS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z11TestOneTypeItEvv" after disassembly {
  Number      : 249
  State       : disassembled
  Address     : 0x2ecf0
  Size        : 0x1ced
  MaxSize     : 0x1cf0
  Offset      : 0x2ecf0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeItEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0248:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rsp, %rbp
    00000008: 	pushq	%r15
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x128, %rsp
    00000018: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm0
    00000020: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm1
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, -0x38(%rbp)
    00000035: 	xorl	%eax, %eax
    00000037: 	leaq	-0xd0(%rbp), %rax
    0000003e: 	movb	$0x0, -0xc8(%rbp)
    00000045: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    0000004c: 	movq	%rax, -0x148(%rbp)
    00000053: 	movhlps	%xmm0, %xmm4
    00000056: 	movq	%xmm1, %rbx
    0000005b: 	movq	%rax, -0xe0(%rbp)
    00000062: 	movq	%xmm4, %rcx
    00000067: 	movabsq	$0x745f3631746e6975, %rax
    00000071: 	movq	%rax, -0xd0(%rbp)
    00000078: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000007f: 	leaq	0x8(%rcx), %r12
    00000083: 	movq	$0x8, -0xd8(%rbp)
    0000008e: 	movq	%rax, -0x108(%rbp)
    00000095: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000009c: 	movaps	%xmm1, -0x130(%rbp)
    000000a3: 	movq	%rax, -0x118(%rbp)
    000000aa: 	movaps	%xmm0, -0x140(%rbp)
    000000b1: 	movq	%xmm4, -0x120(%rbp)
    000000b9: 	movq	%xmm0, -0x110(%rbp)
    000000c1: 	cmpq	%r12, %rax
    000000c4: 	jbe	.Ltmp2923 # Offset: 196
    000000c6: 	movq	%xmm1, -0x150(%rbp)
    000000ce: 	movq	%r12, %r13
    000000d1: 	movq	%rax, %r15
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp2926:
    000000d8: 	movq	(%r13), %rax
    000000dc: 	movq	%rax, -0xf8(%rbp)
    000000e3: 	leaq	0x200(%rax), %rbx
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp2925:
    000000f0: 	movq	-0xf8(%rbp), %rax
    000000f7: 	movq	(%rax), %rdi
    000000fa: 	leaq	0x10(%rax), %rdx
    000000fe: 	cmpq	%rdx, %rdi
    00000101: 	je	.Ltmp2924 # Offset: 257
    00000107: 	movq	0x10(%rax), %rcx
    0000010b: 	leaq	0x1(%rcx), %rsi
    0000010f: 	movq	%rcx, -0x100(%rbp)
    00000116: 	callq	_ZdlPvm@PLT # Offset: 278
    0000011b: 	addq	$0x20, -0xf8(%rbp)
    00000123: 	movq	-0xf8(%rbp), %rax
    0000012a: 	cmpq	%rbx, %rax
    0000012d: 	jne	.Ltmp2925 # Offset: 301
    0000012f: 	addq	$0x8, %r13
    00000133: 	cmpq	%r13, %r15
    00000136: 	ja	.Ltmp2926 # Offset: 310
.Ltmp3027:
    00000138: 	movq	-0x150(%rbp), %rbx
.Ltmp2923:
    0000013f: 	movq	-0x120(%rbp), %rcx
    00000146: 	cmpq	%rcx, -0x118(%rbp)
    0000014d: 	je	.Ltmp2927 # Offset: 333
    00000153: 	movq	-0x110(%rbp), %rcx
    0000015a: 	cmpq	%rcx, %rbx
    0000015d: 	je	.Ltmp2928 # Offset: 349
.Ltmp2931:
    0000015f: 	movq	(%rbx), %rdi
    00000162: 	leaq	0x10(%rbx), %rax
    00000166: 	cmpq	%rax, %rdi
    00000169: 	je	.Ltmp2929 # Offset: 361
.Ltmp2930:
    0000016b: 	movq	0x10(%rbx), %rax
    0000016f: 	addq	$0x20, %rbx
    00000173: 	leaq	0x1(%rax), %rsi
    00000177: 	movq	%rax, -0xf8(%rbp)
    0000017e: 	callq	_ZdlPvm@PLT # Offset: 382
    00000183: 	cmpq	-0x110(%rbp), %rbx
    0000018a: 	je	.Ltmp2928 # Offset: 394
    0000018c: 	movq	(%rbx), %rdi
    0000018f: 	leaq	0x10(%rbx), %rax
    00000193: 	cmpq	%rax, %rdi
    00000196: 	jne	.Ltmp2930 # Offset: 406
.Ltmp2929:
    00000198: 	movq	%rbx, %rax
    0000019b: 	addq	$0x20, %rax
    0000019f: 	movq	%rax, %rbx
    000001a2: 	cmpq	-0x110(%rbp), %rax
    000001a9: 	jne	.Ltmp2931 # Offset: 425
    000001ab: 	cmpq	%r14, -0x108(%rbp)
    000001b2: 	je	.Ltmp2932 # Offset: 434
    000001b4: 	nopl	(%rax) # Size: 4
.Ltmp2934:
    000001b8: 	movq	(%r14), %rdi
    000001bb: 	leaq	0x10(%r14), %rax
    000001bf: 	cmpq	%rax, %rdi
    000001c2: 	je	.Ltmp2933 # Offset: 450
    000001c4: 	movq	0x10(%r14), %rax
    000001c8: 	leaq	0x1(%rax), %rsi
    000001cc: 	callq	_ZdlPvm@PLT # Offset: 460
.Ltmp2933:
    000001d1: 	addq	$0x20, %r14
.Ltmp2928:
    000001d5: 	cmpq	%r14, -0x108(%rbp)
    000001dc: 	jne	.Ltmp2934 # Offset: 476
.Ltmp2932:
    000001de: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000001e5: 	leaq	0x8(%rax), %rbx
    000001e9: 	cmpq	%r12, %rbx
    000001ec: 	jbe	.Ltmp2935 # Offset: 492
    000001ee: 	nop # Size: 2
.Ltmp2936:
    000001f0: 	movq	(%r12), %rdi
    000001f4: 	movl	$0x200, %esi
    000001f9: 	addq	$0x8, %r12
    000001fd: 	callq	_ZdlPvm@PLT # Offset: 509
    00000202: 	cmpq	%r12, %rbx
    00000205: 	ja	.Ltmp2936 # Offset: 517
.Ltmp2935:
    00000207: 	movzbl	init_value(%rip), %eax
    0000020e: 	movdqa	-0x130(%rbp), %xmm2
    00000216: 	movl	$0x27100, %edi
    0000021b: 	movdqa	-0x140(%rbp), %xmm3
    00000223: 	addq	$0x2a, %rax
    00000227: 	movaps	%xmm2, "_ZL7gLabels/1"+48(%rip)
    0000022e: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000235: 	movl	iterations(%rip), %eax
    0000023b: 	movaps	%xmm3, "_ZL7gLabels/1"+64(%rip)
    00000242: 	movl	%eax, -0x130(%rbp)
    00000248: 	callq	_Znam@PLT # Offset: 584
    0000024d: 	movl	$0x27100, %edi
    00000252: 	movq	%rax, %r12
    00000255: 	callq	_Znam@PLT # Offset: 597
    0000025a: 	movl	$0x27100, %edi
    0000025f: 	movq	%rax, %r13
    00000262: 	callq	_Znam@PLT # Offset: 610
    00000267: 	movl	$0x27100, %edi
    0000026c: 	movq	%rax, -0x108(%rbp)
    00000273: 	callq	_Znam@PLT # Offset: 627
    00000278: 	movl	$0x9c400, %edi
    0000027d: 	movq	%rax, -0x118(%rbp)
    00000284: 	callq	_Znam@PLT # Offset: 644
    00000289: 	movq	%rax, %r14
    0000028c: 	movq	%r12, %rdx
    0000028f: 	leaq	0x27100(%r12), %rdi
    00000297: 	movabsq	$0x5851f42d4c957f2d, %rsi
    000002a1: 	movabsq	$0x14057b7ef767814f, %rcx
    000002ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp2937:
    000002b0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000002b7: 	addq	$0x2, %rdx
    000002bb: 	imulq	%rsi, %rax
    000002bf: 	addq	%rcx, %rax
    000002c2: 	movq	%rax, %r8
    000002c5: 	movq	%rax, %r9
    000002c8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000002cf: 	shrq	$0x14, %r8
    000002d3: 	shlq	$0x17, %r9
    000002d7: 	xorq	%r9, %r8
    000002da: 	xorq	%r8, %rax
    000002dd: 	sarq	$0x3, %rax
    000002e1: 	movw	%ax, -0x2(%rdx)
    000002e5: 	cmpq	%rdi, %rdx
    000002e8: 	jne	.Ltmp2937 # Offset: 744
    000002ea: 	leaq	0x27100(%r13), %rdi
    000002f1: 	movq	%r13, %rdx
    000002f4: 	movabsq	$0x5851f42d4c957f2d, %rsi
    000002fe: 	movabsq	$0x14057b7ef767814f, %rcx
    00000308: 	nopl	(%rax,%rax) # Size: 8
.Ltmp2938:
    00000310: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000317: 	addq	$0x2, %rdx
    0000031b: 	imulq	%rsi, %rax
    0000031f: 	addq	%rcx, %rax
    00000322: 	movq	%rax, %r8
    00000325: 	movq	%rax, %r9
    00000328: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000032f: 	shrq	$0x14, %r8
    00000333: 	shlq	$0x17, %r9
    00000337: 	xorq	%r9, %r8
    0000033a: 	xorq	%r8, %rax
    0000033d: 	sarq	$0x3, %rax
    00000341: 	movw	%ax, -0x2(%rdx)
    00000345: 	cmpq	%rdx, %rdi
    00000348: 	jne	.Ltmp2938 # Offset: 840
    0000034a: 	movq	-0x108(%rbp), %rdx
    00000351: 	movabsq	$0x5851f42d4c957f2d, %rsi
    0000035b: 	movabsq	$0x14057b7ef767814f, %rcx
    00000365: 	leaq	0x27100(%rdx), %rdi
    0000036c: 	nopl	(%rax) # Size: 4
.Ltmp2939:
    00000370: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000377: 	addq	$0x2, %rdx
    0000037b: 	imulq	%rsi, %rax
    0000037f: 	addq	%rcx, %rax
    00000382: 	movq	%rax, %r8
    00000385: 	movq	%rax, %r9
    00000388: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000038f: 	shrq	$0x14, %r8
    00000393: 	shlq	$0x17, %r9
    00000397: 	xorq	%r9, %r8
    0000039a: 	xorq	%r8, %rax
    0000039d: 	sarq	$0x3, %rax
    000003a1: 	movw	%ax, -0x2(%rdx)
    000003a5: 	cmpq	%rdx, %rdi
    000003a8: 	jne	.Ltmp2939 # Offset: 936
    000003aa: 	movq	-0x118(%rbp), %rdx
    000003b1: 	movabsq	$0x5851f42d4c957f2d, %rsi
    000003bb: 	movabsq	$0x14057b7ef767814f, %rcx
    000003c5: 	leaq	0x27100(%rdx), %rdi
    000003cc: 	nopl	(%rax) # Size: 4
.Ltmp2940:
    000003d0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000003d7: 	addq	$0x2, %rdx
    000003db: 	imulq	%rsi, %rax
    000003df: 	addq	%rcx, %rax
    000003e2: 	movq	%rax, %r8
    000003e5: 	movq	%rax, %r9
    000003e8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000003ef: 	shrq	$0x14, %r8
    000003f3: 	shlq	$0x17, %r9
    000003f7: 	xorq	%r9, %r8
    000003fa: 	xorq	%r8, %rax
    000003fd: 	sarq	$0x3, %rax
    00000401: 	movw	%ax, -0x2(%rdx)
    00000405: 	cmpq	%rdx, %rdi
    00000408: 	jne	.Ltmp2940 # Offset: 1032
    0000040a: 	movl	$0x9c400, %edx
    0000040f: 	xorl	%esi, %esi
    00000411: 	movq	%r14, %rdi
    00000414: 	callq	memset@PLT # Offset: 1044
    00000419: 	movl	-0x130(%rbp), %eax
    0000041f: 	leaq	-0xe0(%rbp), %rcx
    00000426: 	leaq	DATAat0x371d8(%rip), %rdx
    0000042d: 	movq	%rcx, %rsi
    00000430: 	movq	%rcx, -0x110(%rbp)
    00000437: 	movl	%eax, iterations(%rip)
    0000043d: 	leaq	-0x60(%rbp), %rax
    00000441: 	movq	%rax, %rdi
    00000444: 	movq	%rax, -0x100(%rbp)
    0000044b: 	movq	%rax, %rbx
    0000044e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1102
    00000453: 	movq	%rbx, %r8
    00000456: 	leaq	_Z23interleave2to2_version1ItEvPT_PKS0_S3_i(%rip), %rcx
    0000045d: 	movq	%r13, %rdx
    00000460: 	movq	%r12, %rsi
    00000463: 	movq	%r14, %rdi
    00000466: 	callq	"_Z19test_interleave2to2ItPFvPtPKtS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1126
    0000046b: 	movq	-0x60(%rbp), %rdi
    0000046f: 	leaq	-0x50(%rbp), %rax
    00000473: 	movq	%rax, -0xf8(%rbp)
    0000047a: 	cmpq	%rax, %rdi
    0000047d: 	je	.Ltmp2941 # Offset: 1149
    0000047f: 	movq	-0x50(%rbp), %rax
    00000483: 	leaq	0x1(%rax), %rsi
    00000487: 	callq	_ZdlPvm@PLT # Offset: 1159
.Ltmp2941:
    0000048c: 	movq	-0xf8(%rbp), %rax
    00000493: 	movq	-0xe0(%rbp), %rbx
    0000049a: 	movq	-0xd8(%rbp), %r15
    000004a1: 	movq	%rax, -0x60(%rbp)
    000004a5: 	movq	%rbx, %rax
    000004a8: 	addq	%r15, %rax
    000004ab: 	je	.Ltmp2942 # Offset: 1195
    000004ad: 	testq	%rbx, %rbx
    000004b0: 	je	.Ltmp2943 # Offset: 1200
.Ltmp2942:
    000004b6: 	movq	%r15, -0xe8(%rbp)
    000004bd: 	cmpq	$0xf, %r15
    000004c1: 	ja	.Ltmp2944 # Offset: 1217
    000004c7: 	cmpq	$0x1, %r15
    000004cb: 	jne	.Ltmp2945 # Offset: 1227
    000004d1: 	movzbl	(%rbx), %eax
    000004d4: 	movb	%al, -0x50(%rbp)
    000004d7: 	movq	-0xf8(%rbp), %rax
.Ltmp3029:
    000004de: 	movq	%r15, -0x58(%rbp)
    000004e2: 	movb	$0x0, (%rax,%r15)
    000004e7: 	movabsq	$0x3fffffffffffffff, %rax
    000004f1: 	subq	-0x58(%rbp), %rax
    000004f5: 	cmpq	$0x10, %rax
    000004f9: 	jbe	.Ltmp2946 # Offset: 1273
    000004ff: 	movq	-0x100(%rbp), %rdi
    00000506: 	movl	$0x11, %edx
    0000050b: 	leaq	DATAat0x371ea(%rip), %rsi
    00000512: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1298
    00000517: 	movq	-0x100(%rbp), %r8
    0000051e: 	movq	%r13, %rdx
    00000521: 	movq	%r12, %rsi
    00000524: 	movq	%r14, %rdi
    00000527: 	leaq	_Z23interleave2to2_version2ItEvPT_PKS0_S3_i(%rip), %rcx
    0000052e: 	callq	"_Z19test_interleave2to2ItPFvPtPKtS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1326
    00000533: 	movq	-0x60(%rbp), %rdi
    00000537: 	cmpq	-0xf8(%rbp), %rdi
    0000053e: 	je	.Ltmp2947 # Offset: 1342
    00000540: 	movq	-0x50(%rbp), %rax
    00000544: 	leaq	0x1(%rax), %rsi
    00000548: 	callq	_ZdlPvm@PLT # Offset: 1352
.Ltmp2947:
    0000054d: 	movq	-0x100(%rbp), %rbx
    00000554: 	movq	-0x110(%rbp), %rsi
    0000055b: 	leaq	DATAat0x371fc(%rip), %rdx
    00000562: 	movq	%rbx, %rdi
    00000565: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1381
    0000056a: 	movq	%rbx, %r8
    0000056d: 	leaq	_Z23interleave2to2_version3ItEvPT_PKS0_S3_i(%rip), %rcx
    00000574: 	movq	%r13, %rdx
    00000577: 	movq	%r12, %rsi
    0000057a: 	movq	%r14, %rdi
    0000057d: 	callq	"_Z19test_interleave2to2ItPFvPtPKtS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1405
    00000582: 	movq	-0x60(%rbp), %rdi
    00000586: 	cmpq	-0xf8(%rbp), %rdi
    0000058d: 	je	.Ltmp2948 # Offset: 1421
    0000058f: 	movq	-0x50(%rbp), %rax
    00000593: 	leaq	0x1(%rax), %rsi
    00000597: 	callq	_ZdlPvm@PLT # Offset: 1431
.Ltmp2948:
    0000059c: 	movq	-0xf8(%rbp), %rax
    000005a3: 	movq	-0xe0(%rbp), %rbx
    000005aa: 	movq	-0xd8(%rbp), %r15
    000005b1: 	movq	%rax, -0x60(%rbp)
    000005b5: 	movq	%rbx, %rax
    000005b8: 	addq	%r15, %rax
    000005bb: 	je	.Ltmp2949 # Offset: 1467
    000005bd: 	testq	%rbx, %rbx
    000005c0: 	je	.Ltmp2950 # Offset: 1472
.Ltmp2949:
    000005c6: 	movq	%r15, -0xe8(%rbp)
    000005cd: 	cmpq	$0xf, %r15
    000005d1: 	ja	.Ltmp2951 # Offset: 1489
    000005d7: 	cmpq	$0x1, %r15
    000005db: 	jne	.Ltmp2952 # Offset: 1499
    000005e1: 	movzbl	(%rbx), %eax
    000005e4: 	movb	%al, -0x50(%rbp)
    000005e7: 	movq	-0xf8(%rbp), %rax
.Ltmp3049:
    000005ee: 	movq	%r15, -0x58(%rbp)
    000005f2: 	movb	$0x0, (%rax,%r15)
    000005f7: 	movabsq	$0x3fffffffffffffff, %rax
    00000601: 	subq	-0x58(%rbp), %rax
    00000605: 	cmpq	$0x10, %rax
    00000609: 	jbe	.Ltmp2953 # Offset: 1545
    0000060f: 	movq	-0x100(%rbp), %rdi
    00000616: 	movl	$0x11, %edx
    0000061b: 	leaq	DATAat0x3720e(%rip), %rsi
    00000622: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1570
    00000627: 	movq	-0x100(%rbp), %r8
    0000062e: 	movq	%r13, %rdx
    00000631: 	movq	%r12, %rsi
    00000634: 	movq	%r14, %rdi
    00000637: 	leaq	_Z23interleave2to2_version4ItEvPT_PKS0_S3_i(%rip), %rcx
    0000063e: 	callq	"_Z19test_interleave2to2ItPFvPtPKtS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1598
    00000643: 	movq	-0x60(%rbp), %rdi
    00000647: 	cmpq	-0xf8(%rbp), %rdi
    0000064e: 	je	.Ltmp2954 # Offset: 1614
    00000650: 	movq	-0x50(%rbp), %rax
    00000654: 	leaq	0x1(%rax), %rsi
    00000658: 	callq	_ZdlPvm@PLT # Offset: 1624
.Ltmp2954:
    0000065d: 	movq	-0xf8(%rbp), %rax
    00000664: 	movq	-0xe0(%rbp), %rbx
    0000066b: 	movq	-0xd8(%rbp), %r15
    00000672: 	movq	%rax, -0x60(%rbp)
    00000676: 	movq	%rbx, %rax
    00000679: 	addq	%r15, %rax
    0000067c: 	je	.Ltmp2955 # Offset: 1660
    0000067e: 	testq	%rbx, %rbx
    00000681: 	je	.Ltmp2956 # Offset: 1665
.Ltmp2955:
    00000687: 	movq	%r15, -0xe8(%rbp)
    0000068e: 	cmpq	$0xf, %r15
    00000692: 	ja	.Ltmp2957 # Offset: 1682
    00000698: 	cmpq	$0x1, %r15
    0000069c: 	jne	.Ltmp2958 # Offset: 1692
    000006a2: 	movzbl	(%rbx), %eax
    000006a5: 	movb	%al, -0x50(%rbp)
    000006a8: 	movq	-0xf8(%rbp), %rax
.Ltmp3047:
    000006af: 	movq	%r15, -0x58(%rbp)
    000006b3: 	movb	$0x0, (%rax,%r15)
    000006b8: 	movabsq	$0x3fffffffffffffff, %rax
    000006c2: 	subq	-0x58(%rbp), %rax
    000006c6: 	cmpq	$0x10, %rax
    000006ca: 	jbe	.Ltmp2959 # Offset: 1738
    000006d0: 	movq	-0x100(%rbp), %rdi
    000006d7: 	movl	$0x11, %edx
    000006dc: 	leaq	DATAat0x37220(%rip), %rsi
    000006e3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1763
    000006e8: 	movq	-0x100(%rbp), %r8
    000006ef: 	movq	%r13, %rdx
    000006f2: 	movq	%r12, %rsi
    000006f5: 	movq	%r14, %rdi
    000006f8: 	leaq	_Z23interleave2to2_version5ItEvPT_PKS0_S3_i(%rip), %rcx
    000006ff: 	callq	"_Z19test_interleave2to2ItPFvPtPKtS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1791
    00000704: 	movq	-0x60(%rbp), %rdi
    00000708: 	cmpq	-0xf8(%rbp), %rdi
    0000070f: 	je	.Ltmp2960 # Offset: 1807
    00000711: 	movq	-0x50(%rbp), %rax
    00000715: 	leaq	0x1(%rax), %rsi
    00000719: 	callq	_ZdlPvm@PLT # Offset: 1817
.Ltmp2960:
    0000071e: 	movq	-0x100(%rbp), %rbx
    00000725: 	movq	-0x110(%rbp), %rsi
    0000072c: 	leaq	DATAat0x37232(%rip), %rdx
    00000733: 	movq	%rbx, %rdi
    00000736: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1846
    0000073b: 	movq	%rbx, %r8
    0000073e: 	leaq	_Z23interleave2to2_version6ItEvPT_PKS0_S3_i(%rip), %rcx
    00000745: 	movq	%r13, %rdx
    00000748: 	movq	%r12, %rsi
    0000074b: 	movq	%r14, %rdi
    0000074e: 	callq	"_Z19test_interleave2to2ItPFvPtPKtS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1870
    00000753: 	movq	-0x60(%rbp), %rdi
    00000757: 	cmpq	-0xf8(%rbp), %rdi
    0000075e: 	je	.Ltmp2961 # Offset: 1886
    00000760: 	movq	-0x50(%rbp), %rax
    00000764: 	leaq	0x1(%rax), %rsi
    00000768: 	callq	_ZdlPvm@PLT # Offset: 1896
.Ltmp2961:
    0000076d: 	movq	-0x100(%rbp), %rbx
    00000774: 	movq	-0x110(%rbp), %rsi
    0000077b: 	leaq	DATAat0x37244(%rip), %rdx
    00000782: 	movq	%rbx, %rdi
    00000785: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1925
    0000078a: 	movq	%rbx, %r8
    0000078d: 	leaq	_Z23interleave2to2_version7ItEvPT_PKS0_S3_i(%rip), %rcx
    00000794: 	movq	%r13, %rdx
    00000797: 	movq	%r12, %rsi
    0000079a: 	movq	%r14, %rdi
    0000079d: 	callq	"_Z19test_interleave2to2ItPFvPtPKtS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1949
    000007a2: 	movq	-0x60(%rbp), %rdi
    000007a6: 	cmpq	-0xf8(%rbp), %rdi
    000007ad: 	je	.Ltmp2962 # Offset: 1965
    000007af: 	movq	-0x50(%rbp), %rax
    000007b3: 	leaq	0x1(%rax), %rsi
    000007b7: 	callq	_ZdlPvm@PLT # Offset: 1975
.Ltmp2962:
    000007bc: 	movq	-0x100(%rbp), %rbx
    000007c3: 	movq	-0x110(%rbp), %rsi
    000007ca: 	leaq	DATAat0x37256(%rip), %rdx
    000007d1: 	movq	%rbx, %rdi
    000007d4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2004
    000007d9: 	movq	%rbx, %r8
    000007dc: 	leaq	_Z23interleave2to2_version8ItEvPT_PKS0_S3_i(%rip), %rcx
    000007e3: 	movq	%r13, %rdx
    000007e6: 	movq	%r12, %rsi
    000007e9: 	movq	%r14, %rdi
    000007ec: 	callq	"_Z19test_interleave2to2ItPFvPtPKtS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2028
    000007f1: 	movq	-0x60(%rbp), %rdi
    000007f5: 	cmpq	-0xf8(%rbp), %rdi
    000007fc: 	je	.Ltmp2963 # Offset: 2044
    000007fe: 	movq	-0x50(%rbp), %rax
    00000802: 	leaq	0x1(%rax), %rsi
    00000806: 	callq	_ZdlPvm@PLT # Offset: 2054
.Ltmp2963:
    0000080b: 	movq	-0xe0(%rbp), %rbx
    00000812: 	leaq	-0xb0(%rbp), %rax
    00000819: 	movq	-0xd8(%rbp), %r15
    00000820: 	movq	%rax, -0x140(%rbp)
    00000827: 	movq	%rax, -0xc0(%rbp)
    0000082e: 	movq	%rbx, %rax
    00000831: 	addq	%r15, %rax
    00000834: 	je	.Ltmp2964 # Offset: 2100
    00000836: 	testq	%rbx, %rbx
    00000839: 	je	.Ltmp2965 # Offset: 2105
.Ltmp2964:
    0000083f: 	movq	%r15, -0xe8(%rbp)
    00000846: 	cmpq	$0xf, %r15
    0000084a: 	ja	.Ltmp2966 # Offset: 2122
    00000850: 	cmpq	$0x1, %r15
    00000854: 	jne	.Ltmp2967 # Offset: 2132
    0000085a: 	movzbl	(%rbx), %eax
    0000085d: 	movb	%al, -0xb0(%rbp)
    00000863: 	movq	-0x140(%rbp), %rax
.Ltmp3043:
    0000086a: 	movq	%r15, -0xb8(%rbp)
    00000871: 	movb	$0x0, (%rax,%r15)
    00000876: 	movabsq	$0x3fffffffffffffff, %rax
    00000880: 	subq	-0xb8(%rbp), %rax
    00000887: 	cmpq	$0xe, %rax
    0000088b: 	jbe	.Ltmp2968 # Offset: 2187
    00000891: 	leaq	-0xc0(%rbp), %rdi
    00000898: 	movl	$0xf, %edx
    0000089d: 	leaq	DATAat0x37268(%rip), %rsi
    000008a4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2212
    000008a9: 	movl	iterations(%rip), %edx
    000008af: 	xorl	%r8d, %r8d
    000008b2: 	xorl	%ecx, %ecx
    000008b4: 	movl	$0x13880, %esi
    000008b9: 	movq	-0xc0(%rbp), %rdi
    000008c0: 	callq	_Z9summarizePKciiii # Offset: 2240
    000008c5: 	movl	-0x130(%rbp), %eax
    000008cb: 	movq	-0xe0(%rbp), %rbx
    000008d2: 	movq	-0xd8(%rbp), %r15
    000008d9: 	leal	(%rax,%rax), %edx
    000008dc: 	movslq	%edx, %rax
    000008df: 	sarl	$0x1f, %edx
    000008e2: 	imulq	$0x55555556, %rax, %rax
    000008e9: 	shrq	$0x20, %rax
    000008ed: 	subl	%edx, %eax
    000008ef: 	movl	%eax, iterations(%rip)
    000008f5: 	movq	-0xf8(%rbp), %rax
    000008fc: 	movq	%rax, -0x60(%rbp)
    00000900: 	movq	%rbx, %rax
    00000903: 	addq	%r15, %rax
    00000906: 	je	.Ltmp2969 # Offset: 2310
    00000908: 	testq	%rbx, %rbx
    0000090b: 	je	.Ltmp2970 # Offset: 2315
.Ltmp2969:
    00000911: 	movq	%r15, -0xe8(%rbp)
    00000918: 	cmpq	$0xf, %r15
    0000091c: 	ja	.Ltmp2971 # Offset: 2332
    00000922: 	cmpq	$0x1, %r15
    00000926: 	jne	.Ltmp2972 # Offset: 2342
    0000092c: 	movzbl	(%rbx), %eax
    0000092f: 	movb	%al, -0x50(%rbp)
    00000932: 	movq	-0xf8(%rbp), %rax
.Ltmp3041:
    00000939: 	movq	%r15, -0x58(%rbp)
    0000093d: 	movb	$0x0, (%rax,%r15)
    00000942: 	movabsq	$0x3fffffffffffffff, %rax
    0000094c: 	subq	-0x58(%rbp), %rax
    00000950: 	cmpq	$0x10, %rax
    00000954: 	jbe	.Ltmp2973 # Offset: 2388
    0000095a: 	movq	-0x100(%rbp), %rdi
    00000961: 	movl	$0x11, %edx
    00000966: 	leaq	DATAat0x37278(%rip), %rsi
    0000096d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2413
    00000972: 	movq	-0x100(%rbp), %r9
    00000979: 	movq	%r13, %rdx
    0000097c: 	movq	%r12, %rsi
    0000097f: 	movq	%r14, %rdi
    00000982: 	movq	-0x108(%rbp), %rcx
    00000989: 	leaq	_Z23interleave3to3_version1ItEvPT_PKS0_S3_S3_i(%rip), %r8
    00000990: 	callq	"_Z19test_interleave3to3ItPFvPtPKtS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2448
    00000995: 	movq	-0x60(%rbp), %rdi
    00000999: 	cmpq	-0xf8(%rbp), %rdi
    000009a0: 	je	.Ltmp2974 # Offset: 2464
    000009a2: 	movq	-0x50(%rbp), %rax
    000009a6: 	leaq	0x1(%rax), %rsi
    000009aa: 	callq	_ZdlPvm@PLT # Offset: 2474
.Ltmp2974:
    000009af: 	movq	-0x100(%rbp), %rbx
    000009b6: 	movq	-0x110(%rbp), %rsi
    000009bd: 	leaq	DATAat0x3728a(%rip), %rdx
    000009c4: 	movq	%rbx, %rdi
    000009c7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2503
    000009cc: 	movq	-0x108(%rbp), %rcx
    000009d3: 	movq	%rbx, %r9
    000009d6: 	movq	%r13, %rdx
    000009d9: 	movq	%r12, %rsi
    000009dc: 	leaq	_Z23interleave3to3_version2ItEvPT_PKS0_S3_S3_i(%rip), %r8
    000009e3: 	movq	%r14, %rdi
    000009e6: 	callq	"_Z19test_interleave3to3ItPFvPtPKtS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2534
    000009eb: 	movq	-0x60(%rbp), %rdi
    000009ef: 	cmpq	-0xf8(%rbp), %rdi
    000009f6: 	je	.Ltmp2975 # Offset: 2550
    000009f8: 	movq	-0x50(%rbp), %rax
    000009fc: 	leaq	0x1(%rax), %rsi
    00000a00: 	callq	_ZdlPvm@PLT # Offset: 2560
.Ltmp2975:
    00000a05: 	movq	-0xf8(%rbp), %rax
    00000a0c: 	movq	-0xe0(%rbp), %rbx
    00000a13: 	movq	-0xd8(%rbp), %r15
    00000a1a: 	movq	%rax, -0x60(%rbp)
    00000a1e: 	movq	%rbx, %rax
    00000a21: 	addq	%r15, %rax
    00000a24: 	je	.Ltmp2976 # Offset: 2596
    00000a26: 	testq	%rbx, %rbx
    00000a29: 	je	.Ltmp2977 # Offset: 2601
.Ltmp2976:
    00000a2f: 	movq	%r15, -0xe8(%rbp)
    00000a36: 	cmpq	$0xf, %r15
    00000a3a: 	ja	.Ltmp2978 # Offset: 2618
    00000a40: 	cmpq	$0x1, %r15
    00000a44: 	jne	.Ltmp2979 # Offset: 2628
    00000a4a: 	movzbl	(%rbx), %eax
    00000a4d: 	movb	%al, -0x50(%rbp)
    00000a50: 	movq	-0xf8(%rbp), %rax
.Ltmp3039:
    00000a57: 	movq	%r15, -0x58(%rbp)
    00000a5b: 	movb	$0x0, (%rax,%r15)
    00000a60: 	movabsq	$0x3fffffffffffffff, %rax
    00000a6a: 	subq	-0x58(%rbp), %rax
    00000a6e: 	cmpq	$0x10, %rax
    00000a72: 	jbe	.Ltmp2980 # Offset: 2674
    00000a78: 	movq	-0x100(%rbp), %rdi
    00000a7f: 	movl	$0x11, %edx
    00000a84: 	leaq	DATAat0x3729c(%rip), %rsi
    00000a8b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2699
    00000a90: 	movq	-0x100(%rbp), %r9
    00000a97: 	movq	%r13, %rdx
    00000a9a: 	movq	%r12, %rsi
    00000a9d: 	movq	%r14, %rdi
    00000aa0: 	movq	-0x108(%rbp), %rcx
    00000aa7: 	leaq	_Z23interleave3to3_version3ItEvPT_PKS0_S3_S3_i(%rip), %r8
    00000aae: 	callq	"_Z19test_interleave3to3ItPFvPtPKtS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2734
    00000ab3: 	movq	-0x60(%rbp), %rdi
    00000ab7: 	cmpq	-0xf8(%rbp), %rdi
    00000abe: 	je	.Ltmp2981 # Offset: 2750
    00000ac0: 	movq	-0x50(%rbp), %rax
    00000ac4: 	leaq	0x1(%rax), %rsi
    00000ac8: 	callq	_ZdlPvm@PLT # Offset: 2760
.Ltmp2981:
    00000acd: 	movq	-0xf8(%rbp), %rax
    00000ad4: 	movq	-0xe0(%rbp), %rbx
    00000adb: 	movq	-0xd8(%rbp), %r15
    00000ae2: 	movq	%rax, -0x60(%rbp)
    00000ae6: 	movq	%rbx, %rax
    00000ae9: 	addq	%r15, %rax
    00000aec: 	je	.Ltmp2982 # Offset: 2796
    00000aee: 	testq	%rbx, %rbx
    00000af1: 	je	.Ltmp2983 # Offset: 2801
.Ltmp2982:
    00000af7: 	movq	%r15, -0xe8(%rbp)
    00000afe: 	cmpq	$0xf, %r15
    00000b02: 	ja	.Ltmp2984 # Offset: 2818
    00000b08: 	cmpq	$0x1, %r15
    00000b0c: 	jne	.Ltmp2985 # Offset: 2828
    00000b12: 	movzbl	(%rbx), %eax
    00000b15: 	movb	%al, -0x50(%rbp)
    00000b18: 	movq	-0xf8(%rbp), %rax
.Ltmp3037:
    00000b1f: 	movq	%r15, -0x58(%rbp)
    00000b23: 	movb	$0x0, (%rax,%r15)
    00000b28: 	movabsq	$0x3fffffffffffffff, %rax
    00000b32: 	subq	-0x58(%rbp), %rax
    00000b36: 	cmpq	$0x10, %rax
    00000b3a: 	jbe	.Ltmp2986 # Offset: 2874
    00000b40: 	movq	-0x100(%rbp), %rdi
    00000b47: 	movl	$0x11, %edx
    00000b4c: 	leaq	DATAat0x372ae(%rip), %rsi
    00000b53: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2899
    00000b58: 	movq	-0x100(%rbp), %r9
    00000b5f: 	movq	%r13, %rdx
    00000b62: 	movq	%r12, %rsi
    00000b65: 	movq	%r14, %rdi
    00000b68: 	movq	-0x108(%rbp), %rcx
    00000b6f: 	leaq	_Z23interleave3to3_version4ItEvPT_PKS0_S3_S3_i(%rip), %r8
    00000b76: 	callq	"_Z19test_interleave3to3ItPFvPtPKtS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2934
    00000b7b: 	movq	-0x60(%rbp), %rdi
    00000b7f: 	cmpq	-0xf8(%rbp), %rdi
    00000b86: 	je	.Ltmp2987 # Offset: 2950
    00000b88: 	movq	-0x50(%rbp), %rax
    00000b8c: 	leaq	0x1(%rax), %rsi
    00000b90: 	callq	_ZdlPvm@PLT # Offset: 2960
.Ltmp2987:
    00000b95: 	movq	-0x100(%rbp), %rbx
    00000b9c: 	movq	-0x110(%rbp), %rsi
    00000ba3: 	leaq	DATAat0x372c0(%rip), %rdx
    00000baa: 	movq	%rbx, %rdi
    00000bad: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2989
    00000bb2: 	movq	-0x108(%rbp), %rcx
    00000bb9: 	movq	%rbx, %r9
    00000bbc: 	movq	%r13, %rdx
    00000bbf: 	movq	%r12, %rsi
    00000bc2: 	leaq	_Z23interleave3to3_version5ItEvPT_PKS0_S3_S3_i(%rip), %r8
    00000bc9: 	movq	%r14, %rdi
    00000bcc: 	callq	"_Z19test_interleave3to3ItPFvPtPKtS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3020
    00000bd1: 	movq	-0x60(%rbp), %rdi
    00000bd5: 	cmpq	-0xf8(%rbp), %rdi
    00000bdc: 	je	.Ltmp2988 # Offset: 3036
    00000bde: 	movq	-0x50(%rbp), %rax
    00000be2: 	leaq	0x1(%rax), %rsi
    00000be6: 	callq	_ZdlPvm@PLT # Offset: 3046
.Ltmp2988:
    00000beb: 	movq	-0x110(%rbp), %rbx
    00000bf2: 	leaq	-0xa0(%rbp), %rdi
    00000bf9: 	leaq	DATAat0x372d2(%rip), %rdx
    00000c00: 	movq	%rbx, %rsi
    00000c03: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3075
    00000c08: 	movl	iterations(%rip), %edx
    00000c0e: 	xorl	%r8d, %r8d
    00000c11: 	xorl	%ecx, %ecx
    00000c13: 	movl	$0x13880, %esi
    00000c18: 	movq	-0xa0(%rbp), %rdi
    00000c1f: 	callq	_Z9summarizePKciiii # Offset: 3103
    00000c24: 	movl	-0x130(%rbp), %ecx
    00000c2a: 	movq	%rbx, %rsi
    00000c2d: 	movq	-0x100(%rbp), %rbx
    00000c34: 	leaq	DATAat0x372e2(%rip), %rdx
    00000c3b: 	movl	%ecx, %eax
    00000c3d: 	movq	%rbx, %rdi
    00000c40: 	shrl	$0x1f, %eax
    00000c43: 	addl	%ecx, %eax
    00000c45: 	sarl	%eax
    00000c47: 	movl	%eax, -0x150(%rbp)
    00000c4d: 	movl	%eax, iterations(%rip)
    00000c53: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3155
    00000c58: 	subq	$0x8, %rsp
    00000c5c: 	movq	%r13, %rdx
    00000c5f: 	movq	%r12, %rsi
    00000c62: 	movq	%r14, %rdi
    00000c65: 	pushq	%rbx
    00000c66: 	movq	-0x118(%rbp), %r8
    00000c6d: 	leaq	_Z23interleave3to4_version1ItEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000c74: 	movq	-0x108(%rbp), %rcx
    00000c7b: 	callq	"_Z19test_interleave3to4ItPFvPttPKtS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3195
    00000c80: 	popq	%r15
    00000c82: 	movq	-0x60(%rbp), %rdi
    00000c86: 	popq	%rax
    00000c87: 	cmpq	-0xf8(%rbp), %rdi
    00000c8e: 	je	.Ltmp2989 # Offset: 3214
    00000c90: 	movq	-0x50(%rbp), %rax
    00000c94: 	leaq	0x1(%rax), %rsi
    00000c98: 	callq	_ZdlPvm@PLT # Offset: 3224
.Ltmp2989:
    00000c9d: 	movq	-0x100(%rbp), %rbx
    00000ca4: 	movq	-0x110(%rbp), %rsi
    00000cab: 	leaq	DATAat0x372f4(%rip), %rdx
    00000cb2: 	movq	%rbx, %rdi
    00000cb5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3253
    00000cba: 	subq	$0x8, %rsp
    00000cbe: 	movq	%r13, %rdx
    00000cc1: 	movq	%r12, %rsi
    00000cc4: 	movq	%r14, %rdi
    00000cc7: 	pushq	%rbx
    00000cc8: 	movq	-0x118(%rbp), %r8
    00000ccf: 	leaq	_Z23interleave3to4_version2ItEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000cd6: 	movq	-0x108(%rbp), %rcx
    00000cdd: 	callq	"_Z19test_interleave3to4ItPFvPttPKtS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3293
    00000ce2: 	popq	%r11
    00000ce4: 	movq	-0x60(%rbp), %rdi
    00000ce8: 	popq	%rbx
    00000ce9: 	cmpq	-0xf8(%rbp), %rdi
    00000cf0: 	je	.Ltmp2990 # Offset: 3312
    00000cf2: 	movq	-0x50(%rbp), %rax
    00000cf6: 	leaq	0x1(%rax), %rsi
    00000cfa: 	callq	_ZdlPvm@PLT # Offset: 3322
.Ltmp2990:
    00000cff: 	movq	-0x100(%rbp), %rbx
    00000d06: 	movq	-0x110(%rbp), %rsi
    00000d0d: 	leaq	DATAat0x37306(%rip), %rdx
    00000d14: 	movq	%rbx, %rdi
    00000d17: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3351
    00000d1c: 	subq	$0x8, %rsp
    00000d20: 	movq	%r13, %rdx
    00000d23: 	movq	%r12, %rsi
    00000d26: 	movq	%r14, %rdi
    00000d29: 	pushq	%rbx
    00000d2a: 	movq	-0x118(%rbp), %r8
    00000d31: 	leaq	_Z23interleave3to4_version3ItEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000d38: 	movq	-0x108(%rbp), %rcx
    00000d3f: 	callq	"_Z19test_interleave3to4ItPFvPttPKtS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3391
    00000d44: 	popq	%r9
    00000d46: 	movq	-0x60(%rbp), %rdi
    00000d4a: 	popq	%r10
    00000d4c: 	cmpq	-0xf8(%rbp), %rdi
    00000d53: 	je	.Ltmp2991 # Offset: 3411
    00000d55: 	movq	-0x50(%rbp), %rax
    00000d59: 	leaq	0x1(%rax), %rsi
    00000d5d: 	callq	_ZdlPvm@PLT # Offset: 3421
.Ltmp2991:
    00000d62: 	movq	-0xf8(%rbp), %rax
    00000d69: 	movq	-0xe0(%rbp), %rbx
    00000d70: 	movq	-0xd8(%rbp), %r15
    00000d77: 	movq	%rax, -0x60(%rbp)
    00000d7b: 	movq	%rbx, %rax
    00000d7e: 	addq	%r15, %rax
    00000d81: 	je	.Ltmp2992 # Offset: 3457
    00000d83: 	testq	%rbx, %rbx
    00000d86: 	je	.Ltmp2993 # Offset: 3462
.Ltmp2992:
    00000d8c: 	movq	%r15, -0xe8(%rbp)
    00000d93: 	cmpq	$0xf, %r15
    00000d97: 	ja	.Ltmp2994 # Offset: 3479
    00000d9d: 	cmpq	$0x1, %r15
    00000da1: 	jne	.Ltmp2995 # Offset: 3489
    00000da7: 	movzbl	(%rbx), %eax
    00000daa: 	movb	%al, -0x50(%rbp)
    00000dad: 	movq	-0xf8(%rbp), %rax
.Ltmp3035:
    00000db4: 	movq	%r15, -0x58(%rbp)
    00000db8: 	movb	$0x0, (%rax,%r15)
    00000dbd: 	movabsq	$0x3fffffffffffffff, %rax
    00000dc7: 	subq	-0x58(%rbp), %rax
    00000dcb: 	cmpq	$0x10, %rax
    00000dcf: 	jbe	.Ltmp2996 # Offset: 3535
    00000dd5: 	movq	-0x100(%rbp), %rdi
    00000ddc: 	movl	$0x11, %edx
    00000de1: 	leaq	DATAat0x37318(%rip), %rsi
    00000de8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3560
    00000ded: 	subq	$0x8, %rsp
    00000df1: 	pushq	-0x100(%rbp)
    00000df7: 	movq	%r13, %rdx
    00000dfa: 	movq	%r12, %rsi
    00000dfd: 	movq	-0x118(%rbp), %r8
    00000e04: 	leaq	_Z23interleave3to4_version4ItEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000e0b: 	movq	%r14, %rdi
    00000e0e: 	movq	-0x108(%rbp), %rcx
    00000e15: 	callq	"_Z19test_interleave3to4ItPFvPttPKtS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3605
    00000e1a: 	popq	%rdi
    00000e1b: 	movq	-0x60(%rbp), %rdi
    00000e1f: 	popq	%r8
    00000e21: 	cmpq	-0xf8(%rbp), %rdi
    00000e28: 	je	.Ltmp2997 # Offset: 3624
    00000e2a: 	movq	-0x50(%rbp), %rax
    00000e2e: 	leaq	0x1(%rax), %rsi
    00000e32: 	callq	_ZdlPvm@PLT # Offset: 3634
.Ltmp2997:
    00000e37: 	movq	-0xf8(%rbp), %rax
    00000e3e: 	movq	-0xe0(%rbp), %rbx
    00000e45: 	movq	-0xd8(%rbp), %r15
    00000e4c: 	movq	%rax, -0x60(%rbp)
    00000e50: 	movq	%rbx, %rax
    00000e53: 	addq	%r15, %rax
    00000e56: 	je	.Ltmp2998 # Offset: 3670
    00000e58: 	testq	%rbx, %rbx
    00000e5b: 	je	.Ltmp2999 # Offset: 3675
.Ltmp2998:
    00000e61: 	movq	%r15, -0xe8(%rbp)
    00000e68: 	cmpq	$0xf, %r15
    00000e6c: 	ja	.Ltmp3000 # Offset: 3692
    00000e72: 	cmpq	$0x1, %r15
    00000e76: 	jne	.Ltmp3001 # Offset: 3702
    00000e7c: 	movzbl	(%rbx), %eax
    00000e7f: 	movb	%al, -0x50(%rbp)
    00000e82: 	movq	-0xf8(%rbp), %rax
.Ltmp3033:
    00000e89: 	movq	%r15, -0x58(%rbp)
    00000e8d: 	movb	$0x0, (%rax,%r15)
    00000e92: 	movabsq	$0x3fffffffffffffff, %rax
    00000e9c: 	subq	-0x58(%rbp), %rax
    00000ea0: 	cmpq	$0x10, %rax
    00000ea4: 	jbe	.Ltmp3002 # Offset: 3748
    00000eaa: 	movq	-0x100(%rbp), %rdi
    00000eb1: 	movl	$0x11, %edx
    00000eb6: 	leaq	DATAat0x3732a(%rip), %rsi
    00000ebd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3773
    00000ec2: 	subq	$0x8, %rsp
    00000ec6: 	pushq	-0x100(%rbp)
    00000ecc: 	movq	%r13, %rdx
    00000ecf: 	movq	%r12, %rsi
    00000ed2: 	movq	-0x118(%rbp), %r8
    00000ed9: 	leaq	_Z23interleave3to4_version5ItEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000ee0: 	movq	%r14, %rdi
    00000ee3: 	movq	-0x108(%rbp), %rcx
    00000eea: 	callq	"_Z19test_interleave3to4ItPFvPttPKtS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3818
    00000eef: 	popq	%rcx
    00000ef0: 	movq	-0x60(%rbp), %rdi
    00000ef4: 	popq	%rsi
    00000ef5: 	cmpq	-0xf8(%rbp), %rdi
    00000efc: 	je	.Ltmp3003 # Offset: 3836
    00000efe: 	movq	-0x50(%rbp), %rax
    00000f02: 	leaq	0x1(%rax), %rsi
    00000f06: 	callq	_ZdlPvm@PLT # Offset: 3846
.Ltmp3003:
    00000f0b: 	movq	-0xf8(%rbp), %rax
    00000f12: 	movq	-0xe0(%rbp), %rbx
    00000f19: 	movq	-0xd8(%rbp), %r15
    00000f20: 	movq	%rax, -0x60(%rbp)
    00000f24: 	movq	%rbx, %rax
    00000f27: 	addq	%r15, %rax
    00000f2a: 	je	.Ltmp3004 # Offset: 3882
    00000f2c: 	testq	%rbx, %rbx
    00000f2f: 	je	.Ltmp3005 # Offset: 3887
.Ltmp3004:
    00000f35: 	movq	%r15, -0xe8(%rbp)
    00000f3c: 	cmpq	$0xf, %r15
    00000f40: 	ja	.Ltmp3006 # Offset: 3904
    00000f46: 	cmpq	$0x1, %r15
    00000f4a: 	jne	.Ltmp3007 # Offset: 3914
    00000f50: 	movzbl	(%rbx), %eax
    00000f53: 	movb	%al, -0x50(%rbp)
    00000f56: 	movq	-0xf8(%rbp), %rax
.Ltmp3031:
    00000f5d: 	movq	%r15, -0x58(%rbp)
    00000f61: 	movb	$0x0, (%rax,%r15)
    00000f66: 	movabsq	$0x3fffffffffffffff, %rax
    00000f70: 	subq	-0x58(%rbp), %rax
    00000f74: 	cmpq	$0x10, %rax
    00000f78: 	jbe	.Ltmp3008 # Offset: 3960
    00000f7e: 	movq	-0x100(%rbp), %rdi
    00000f85: 	movl	$0x11, %edx
    00000f8a: 	leaq	DATAat0x3733c(%rip), %rsi
    00000f91: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3985
    00000f96: 	subq	$0x8, %rsp
    00000f9a: 	pushq	-0x100(%rbp)
    00000fa0: 	movq	%r13, %rdx
    00000fa3: 	movq	%r12, %rsi
    00000fa6: 	movq	-0x118(%rbp), %r8
    00000fad: 	leaq	_Z23interleave3to4_version6ItEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000fb4: 	movq	%r14, %rdi
    00000fb7: 	movq	-0x108(%rbp), %rcx
    00000fbe: 	callq	"_Z19test_interleave3to4ItPFvPttPKtS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4030
    00000fc3: 	popq	%rax
    00000fc4: 	movq	-0x60(%rbp), %rdi
    00000fc8: 	popq	%rdx
    00000fc9: 	cmpq	-0xf8(%rbp), %rdi
    00000fd0: 	je	.Ltmp3009 # Offset: 4048
    00000fd2: 	movq	-0x50(%rbp), %rax
    00000fd6: 	leaq	0x1(%rax), %rsi
    00000fda: 	callq	_ZdlPvm@PLT # Offset: 4058
.Ltmp3009:
    00000fdf: 	movq	-0xe0(%rbp), %rbx
    00000fe6: 	leaq	-0x70(%rbp), %rax
    00000fea: 	movq	-0xd8(%rbp), %r15
    00000ff1: 	movq	%rax, -0x120(%rbp)
    00000ff8: 	movq	%rax, -0x80(%rbp)
    00000ffc: 	movq	%rbx, %rax
    00000fff: 	addq	%r15, %rax
    00001002: 	je	.Ltmp3010 # Offset: 4098
    00001004: 	testq	%rbx, %rbx
    00001007: 	je	.Ltmp3011 # Offset: 4103
.Ltmp3010:
    0000100d: 	movq	%r15, -0xe8(%rbp)
    00001014: 	cmpq	$0xf, %r15
    00001018: 	ja	.Ltmp3012 # Offset: 4120
    0000101e: 	cmpq	$0x1, %r15
    00001022: 	jne	.Ltmp3013 # Offset: 4130
    00001028: 	movzbl	(%rbx), %eax
    0000102b: 	movb	%al, -0x70(%rbp)
    0000102e: 	movq	-0x120(%rbp), %rax
.Ltmp3045:
    00001035: 	movq	%r15, -0x78(%rbp)
    00001039: 	movb	$0x0, (%rax,%r15)
    0000103e: 	movabsq	$0x3fffffffffffffff, %rax
    00001048: 	subq	-0x78(%rbp), %rax
    0000104c: 	cmpq	$0xe, %rax
    00001050: 	jbe	.Ltmp3014 # Offset: 4176
    00001056: 	leaq	-0x80(%rbp), %rdi
    0000105a: 	movl	$0xf, %edx
    0000105f: 	leaq	DATAat0x3734e(%rip), %rsi
    00001066: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4198
    0000106b: 	movl	iterations(%rip), %edx
    00001071: 	movq	-0x80(%rbp), %rdi
    00001075: 	xorl	%r8d, %r8d
    00001078: 	xorl	%ecx, %ecx
    0000107a: 	movl	$0x13880, %esi
    0000107f: 	callq	_Z9summarizePKciiii # Offset: 4223
    00001084: 	movq	-0x100(%rbp), %rbx
    0000108b: 	movl	-0x150(%rbp), %eax
    00001091: 	leaq	DATAat0x3735e(%rip), %rdx
    00001098: 	movq	-0x110(%rbp), %rsi
    0000109f: 	movq	%rbx, %rdi
    000010a2: 	movl	%eax, iterations(%rip)
    000010a8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4264
    000010ad: 	subq	$0x8, %rsp
    000010b1: 	movq	%r13, %rdx
    000010b4: 	movq	%r12, %rsi
    000010b7: 	movq	%r14, %rdi
    000010ba: 	pushq	%rbx
    000010bb: 	movq	-0x118(%rbp), %r8
    000010c2: 	leaq	_Z23interleave4to4_version1ItEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    000010c9: 	movq	-0x108(%rbp), %rcx
    000010d0: 	callq	"_Z19test_interleave4to4ItPFvPtPKtS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4304
    000010d5: 	popq	%r15
    000010d7: 	movq	-0x60(%rbp), %rdi
    000010db: 	popq	%rax
    000010dc: 	cmpq	-0xf8(%rbp), %rdi
    000010e3: 	je	.Ltmp3015 # Offset: 4323
    000010e5: 	movq	-0x50(%rbp), %rax
    000010e9: 	leaq	0x1(%rax), %rsi
    000010ed: 	callq	_ZdlPvm@PLT # Offset: 4333
.Ltmp3015:
    000010f2: 	movq	-0x100(%rbp), %rbx
    000010f9: 	movq	-0x110(%rbp), %rsi
    00001100: 	leaq	DATAat0x37370(%rip), %rdx
    00001107: 	movq	%rbx, %rdi
    0000110a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4362
    0000110f: 	subq	$0x8, %rsp
    00001113: 	movq	%r13, %rdx
    00001116: 	movq	%r12, %rsi
    00001119: 	movq	%r14, %rdi
    0000111c: 	pushq	%rbx
    0000111d: 	movq	-0x118(%rbp), %r8
    00001124: 	leaq	_Z23interleave4to4_version2ItEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    0000112b: 	movq	-0x108(%rbp), %rcx
    00001132: 	callq	"_Z19test_interleave4to4ItPFvPtPKtS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4402
    00001137: 	popq	%r11
    00001139: 	movq	-0x60(%rbp), %rdi
    0000113d: 	popq	%rbx
    0000113e: 	cmpq	-0xf8(%rbp), %rdi
    00001145: 	je	.Ltmp3016 # Offset: 4421
    00001147: 	movq	-0x50(%rbp), %rax
    0000114b: 	leaq	0x1(%rax), %rsi
    0000114f: 	callq	_ZdlPvm@PLT # Offset: 4431
.Ltmp3016:
    00001154: 	movq	-0x100(%rbp), %rbx
    0000115b: 	movq	-0x110(%rbp), %rsi
    00001162: 	leaq	DATAat0x37382(%rip), %rdx
    00001169: 	movq	%rbx, %rdi
    0000116c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4460
    00001171: 	subq	$0x8, %rsp
    00001175: 	movq	%r13, %rdx
    00001178: 	movq	%r12, %rsi
    0000117b: 	movq	%r14, %rdi
    0000117e: 	pushq	%rbx
    0000117f: 	movq	-0x118(%rbp), %r8
    00001186: 	leaq	_Z23interleave4to4_version3ItEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    0000118d: 	movq	-0x108(%rbp), %rcx
    00001194: 	callq	"_Z19test_interleave4to4ItPFvPtPKtS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4500
    00001199: 	popq	%r9
    0000119b: 	movq	-0x60(%rbp), %rdi
    0000119f: 	popq	%r10
    000011a1: 	cmpq	-0xf8(%rbp), %rdi
    000011a8: 	je	.Ltmp3017 # Offset: 4520
    000011aa: 	movq	-0x50(%rbp), %rax
    000011ae: 	leaq	0x1(%rax), %rsi
    000011b2: 	callq	_ZdlPvm@PLT # Offset: 4530
.Ltmp3017:
    000011b7: 	movq	-0x100(%rbp), %rbx
    000011be: 	movq	-0x110(%rbp), %rsi
    000011c5: 	leaq	DATAat0x37394(%rip), %rdx
    000011cc: 	movq	%rbx, %rdi
    000011cf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4559
    000011d4: 	subq	$0x8, %rsp
    000011d8: 	movq	%r13, %rdx
    000011db: 	movq	%r12, %rsi
    000011de: 	movq	%r14, %rdi
    000011e1: 	pushq	%rbx
    000011e2: 	movq	-0x118(%rbp), %r8
    000011e9: 	leaq	_Z23interleave4to4_version4ItEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    000011f0: 	movq	-0x108(%rbp), %rcx
    000011f7: 	callq	"_Z19test_interleave4to4ItPFvPtPKtS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4599
    000011fc: 	popq	%rdi
    000011fd: 	movq	-0x60(%rbp), %rdi
    00001201: 	popq	%r8
    00001203: 	cmpq	-0xf8(%rbp), %rdi
    0000120a: 	je	.Ltmp3018 # Offset: 4618
    0000120c: 	movq	-0x50(%rbp), %rax
    00001210: 	leaq	0x1(%rax), %rsi
    00001214: 	callq	_ZdlPvm@PLT # Offset: 4628
.Ltmp3018:
    00001219: 	movq	-0x100(%rbp), %rbx
    00001220: 	movq	-0x110(%rbp), %rsi
    00001227: 	leaq	DATAat0x373a6(%rip), %rdx
    0000122e: 	movq	%rbx, %rdi
    00001231: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4657
    00001236: 	subq	$0x8, %rsp
    0000123a: 	movq	%r13, %rdx
    0000123d: 	movq	%r12, %rsi
    00001240: 	movq	%r14, %rdi
    00001243: 	pushq	%rbx
    00001244: 	movq	-0x118(%rbp), %r8
    0000124b: 	leaq	_Z23interleave4to4_version5ItEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    00001252: 	movq	-0x108(%rbp), %rcx
    00001259: 	callq	"_Z19test_interleave4to4ItPFvPtPKtS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4697
    0000125e: 	popq	%rcx
    0000125f: 	movq	-0x60(%rbp), %rdi
    00001263: 	popq	%rsi
    00001264: 	cmpq	-0xf8(%rbp), %rdi
    0000126b: 	je	.Ltmp3019 # Offset: 4715
    0000126d: 	movq	-0x50(%rbp), %rax
    00001271: 	leaq	0x1(%rax), %rsi
    00001275: 	callq	_ZdlPvm@PLT # Offset: 4725
.Ltmp3019:
    0000127a: 	movq	-0x100(%rbp), %rbx
    00001281: 	movq	-0x110(%rbp), %rsi
    00001288: 	leaq	DATAat0x373b8(%rip), %rdx
    0000128f: 	movq	%rbx, %rdi
    00001292: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4754
    00001297: 	subq	$0x8, %rsp
    0000129b: 	movq	%r13, %rdx
    0000129e: 	movq	%r12, %rsi
    000012a1: 	movq	%r14, %rdi
    000012a4: 	pushq	%rbx
    000012a5: 	movq	-0x118(%rbp), %r8
    000012ac: 	leaq	_Z23interleave4to4_version6ItEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    000012b3: 	movq	-0x108(%rbp), %rcx
    000012ba: 	callq	"_Z19test_interleave4to4ItPFvPtPKtS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4794
    000012bf: 	popq	%rax
    000012c0: 	movq	-0x60(%rbp), %rdi
    000012c4: 	popq	%rdx
    000012c5: 	cmpq	-0xf8(%rbp), %rdi
    000012cc: 	je	.Ltmp3020 # Offset: 4812
    000012ce: 	movq	-0x50(%rbp), %rax
    000012d2: 	leaq	0x1(%rax), %rsi
    000012d6: 	callq	_ZdlPvm@PLT # Offset: 4822
.Ltmp3020:
    000012db: 	movq	-0x110(%rbp), %rsi
    000012e2: 	movq	-0x100(%rbp), %rdi
    000012e9: 	leaq	DATAat0x373ca(%rip), %rdx
    000012f0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4848
    000012f5: 	movl	iterations(%rip), %edx
    000012fb: 	movq	-0x60(%rbp), %rdi
    000012ff: 	xorl	%r8d, %r8d
    00001302: 	xorl	%ecx, %ecx
    00001304: 	movl	$0x13880, %esi
    00001309: 	callq	_Z9summarizePKciiii # Offset: 4873
    0000130e: 	movl	-0x130(%rbp), %eax
    00001314: 	movq	-0x60(%rbp), %rdi
    00001318: 	movl	%eax, iterations(%rip)
    0000131e: 	cmpq	-0xf8(%rbp), %rdi
    00001325: 	je	.Ltmp3021 # Offset: 4901
    00001327: 	movq	-0x50(%rbp), %rax
    0000132b: 	leaq	0x1(%rax), %rsi
    0000132f: 	callq	_ZdlPvm@PLT # Offset: 4911
.Ltmp3021:
    00001334: 	movq	-0x80(%rbp), %rdi
    00001338: 	cmpq	-0x120(%rbp), %rdi
    0000133f: 	je	.Ltmp3022 # Offset: 4927
    00001341: 	movq	-0x70(%rbp), %rax
    00001345: 	leaq	0x1(%rax), %rsi
    00001349: 	callq	_ZdlPvm@PLT # Offset: 4937
.Ltmp3022:
    0000134e: 	movq	-0xa0(%rbp), %rdi
    00001355: 	leaq	-0x90(%rbp), %rax
    0000135c: 	cmpq	%rax, %rdi
    0000135f: 	je	.Ltmp3023 # Offset: 4959
    00001361: 	movq	-0x90(%rbp), %rax
    00001368: 	leaq	0x1(%rax), %rsi
    0000136c: 	callq	_ZdlPvm@PLT # Offset: 4972
.Ltmp3023:
    00001371: 	movq	-0xc0(%rbp), %rdi
    00001378: 	cmpq	-0x140(%rbp), %rdi
    0000137f: 	je	.Ltmp3024 # Offset: 4991
    00001381: 	movq	-0xb0(%rbp), %rax
    00001388: 	leaq	0x1(%rax), %rsi
    0000138c: 	callq	_ZdlPvm@PLT # Offset: 5004
.Ltmp3024:
    00001391: 	movl	$0x2, %esi
    00001396: 	movq	%r14, %rdi
    00001399: 	callq	_ZdlPvm@PLT # Offset: 5017
    0000139e: 	movq	-0x118(%rbp), %rdi
    000013a5: 	movl	$0x2, %esi
    000013aa: 	callq	_ZdlPvm@PLT # Offset: 5034
    000013af: 	movq	-0x108(%rbp), %rdi
    000013b6: 	movl	$0x2, %esi
    000013bb: 	callq	_ZdlPvm@PLT # Offset: 5051
    000013c0: 	movl	$0x2, %esi
    000013c5: 	movq	%r13, %rdi
    000013c8: 	callq	_ZdlPvm@PLT # Offset: 5064
    000013cd: 	movq	%r12, %rdi
    000013d0: 	movl	$0x2, %esi
    000013d5: 	callq	_ZdlPvm@PLT # Offset: 5077
    000013da: 	movq	-0xe0(%rbp), %rdi
    000013e1: 	cmpq	-0x148(%rbp), %rdi
    000013e8: 	je	.Ltmp3025 # Offset: 5096
    000013ea: 	movq	-0xd0(%rbp), %rax
    000013f1: 	leaq	0x1(%rax), %rsi
    000013f5: 	callq	_ZdlPvm@PLT # Offset: 5109
.Ltmp3025:
    000013fa: 	movq	-0x38(%rbp), %rax
    000013fe: 	subq	%fs:0x28, %rax
    00001407: 	jne	.Ltmp3026 # Offset: 5127
    0000140d: 	leaq	-0x28(%rbp), %rsp
    00001411: 	popq	%rbx
    00001412: 	popq	%r12
    00001414: 	popq	%r13
    00001416: 	popq	%r14
    00001418: 	popq	%r15
    0000141a: 	popq	%rbp
    0000141b: 	retq # Offset: 5147
    0000141c: 	nopl	(%rax) # Size: 4
.Ltmp2924:
    00001420: 	addq	$0x20, -0xf8(%rbp)
    00001428: 	movq	-0xf8(%rbp), %rax
    0000142f: 	cmpq	%rbx, %rax
    00001432: 	jne	.Ltmp2925 # Offset: 5170
    00001438: 	addq	$0x8, %r13
    0000143c: 	cmpq	%r13, %r15
    0000143f: 	ja	.Ltmp2926 # Offset: 5183
    00001445: 	jmp	.Ltmp3027 # Offset: 5189
.Ltmp2945:
    0000144a: 	testq	%r15, %r15
    0000144d: 	jne	.Ltmp3028 # Offset: 5197
    00001453: 	movq	-0xf8(%rbp), %rax
    0000145a: 	jmp	.Ltmp3029 # Offset: 5210
.Ltmp3007:
    0000145f: 	testq	%r15, %r15
    00001462: 	jne	.Ltmp3030 # Offset: 5218
    00001468: 	movq	-0xf8(%rbp), %rax
    0000146f: 	jmp	.Ltmp3031 # Offset: 5231
.Ltmp3001:
    00001474: 	testq	%r15, %r15
    00001477: 	jne	.Ltmp3032 # Offset: 5239
    0000147d: 	movq	-0xf8(%rbp), %rax
    00001484: 	jmp	.Ltmp3033 # Offset: 5252
.Ltmp2995:
    00001489: 	testq	%r15, %r15
    0000148c: 	jne	.Ltmp3034 # Offset: 5260
    00001492: 	movq	-0xf8(%rbp), %rax
    00001499: 	jmp	.Ltmp3035 # Offset: 5273
.Ltmp2985:
    0000149e: 	testq	%r15, %r15
    000014a1: 	jne	.Ltmp3036 # Offset: 5281
    000014a7: 	movq	-0xf8(%rbp), %rax
    000014ae: 	jmp	.Ltmp3037 # Offset: 5294
.Ltmp2979:
    000014b3: 	testq	%r15, %r15
    000014b6: 	jne	.Ltmp3038 # Offset: 5302
    000014bc: 	movq	-0xf8(%rbp), %rax
    000014c3: 	jmp	.Ltmp3039 # Offset: 5315
.Ltmp2972:
    000014c8: 	testq	%r15, %r15
    000014cb: 	jne	.Ltmp3040 # Offset: 5323
    000014d1: 	movq	-0xf8(%rbp), %rax
    000014d8: 	jmp	.Ltmp3041 # Offset: 5336
.Ltmp2967:
    000014dd: 	testq	%r15, %r15
    000014e0: 	jne	.Ltmp3042 # Offset: 5344
    000014e6: 	movq	-0x140(%rbp), %rax
    000014ed: 	jmp	.Ltmp3043 # Offset: 5357
.Ltmp3013:
    000014f2: 	testq	%r15, %r15
    000014f5: 	jne	.Ltmp3044 # Offset: 5365
    000014fb: 	movq	-0x120(%rbp), %rax
    00001502: 	jmp	.Ltmp3045 # Offset: 5378
.Ltmp2958:
    00001507: 	testq	%r15, %r15
    0000150a: 	jne	.Ltmp3046 # Offset: 5386
    00001510: 	movq	-0xf8(%rbp), %rax
    00001517: 	jmp	.Ltmp3047 # Offset: 5399
.Ltmp2952:
    0000151c: 	testq	%r15, %r15
    0000151f: 	jne	.Ltmp3048 # Offset: 5407
    00001525: 	movq	-0xf8(%rbp), %rax
    0000152c: 	jmp	.Ltmp3049 # Offset: 5420
.Ltmp3012:
    00001531: 	leaq	-0xe8(%rbp), %rsi
    00001538: 	leaq	-0x80(%rbp), %rdi
    0000153c: 	xorl	%edx, %edx
    0000153e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5438
    00001543: 	movq	%rax, -0x80(%rbp)
    00001547: 	movq	%rax, %rdi
    0000154a: 	movq	-0xe8(%rbp), %rax
    00001551: 	movq	%rax, -0x70(%rbp)
.Ltmp3061:
    00001555: 	movq	%r15, %rdx
    00001558: 	movq	%rbx, %rsi
    0000155b: 	callq	memcpy@PLT # Offset: 5467
    00001560: 	movq	-0xe8(%rbp), %r15
    00001567: 	movq	-0x80(%rbp), %rax
    0000156b: 	jmp	.Ltmp3045 # Offset: 5483
.Ltmp3006:
    00001570: 	movq	-0x100(%rbp), %rdi
    00001577: 	leaq	-0xe8(%rbp), %rsi
    0000157e: 	xorl	%edx, %edx
    00001580: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5504
    00001585: 	movq	%rax, -0x60(%rbp)
    00001589: 	movq	%rax, %rdi
    0000158c: 	movq	-0xe8(%rbp), %rax
    00001593: 	movq	%rax, -0x50(%rbp)
.Ltmp3054:
    00001597: 	movq	%r15, %rdx
    0000159a: 	movq	%rbx, %rsi
    0000159d: 	callq	memcpy@PLT # Offset: 5533
    000015a2: 	movq	-0xe8(%rbp), %r15
    000015a9: 	movq	-0x60(%rbp), %rax
    000015ad: 	jmp	.Ltmp3031 # Offset: 5549
.Ltmp3000:
    000015b2: 	movq	-0x100(%rbp), %rdi
    000015b9: 	leaq	-0xe8(%rbp), %rsi
    000015c0: 	xorl	%edx, %edx
    000015c2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5570
    000015c7: 	movq	%rax, -0x60(%rbp)
    000015cb: 	movq	%rax, %rdi
    000015ce: 	movq	-0xe8(%rbp), %rax
    000015d5: 	movq	%rax, -0x50(%rbp)
.Ltmp3055:
    000015d9: 	movq	%r15, %rdx
    000015dc: 	movq	%rbx, %rsi
    000015df: 	callq	memcpy@PLT # Offset: 5599
    000015e4: 	movq	-0xe8(%rbp), %r15
    000015eb: 	movq	-0x60(%rbp), %rax
    000015ef: 	jmp	.Ltmp3033 # Offset: 5615
.Ltmp2994:
    000015f4: 	movq	-0x100(%rbp), %rdi
    000015fb: 	leaq	-0xe8(%rbp), %rsi
    00001602: 	xorl	%edx, %edx
    00001604: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5636
    00001609: 	movq	%rax, -0x60(%rbp)
    0000160d: 	movq	%rax, %rdi
    00001610: 	movq	-0xe8(%rbp), %rax
    00001617: 	movq	%rax, -0x50(%rbp)
.Ltmp3056:
    0000161b: 	movq	%r15, %rdx
    0000161e: 	movq	%rbx, %rsi
    00001621: 	callq	memcpy@PLT # Offset: 5665
    00001626: 	movq	-0xe8(%rbp), %r15
    0000162d: 	movq	-0x60(%rbp), %rax
    00001631: 	jmp	.Ltmp3035 # Offset: 5681
.Ltmp2966:
    00001636: 	leaq	-0xe8(%rbp), %rsi
    0000163d: 	leaq	-0xc0(%rbp), %rdi
    00001644: 	xorl	%edx, %edx
    00001646: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5702
    0000164b: 	movq	%rax, -0xc0(%rbp)
    00001652: 	movq	%rax, %rdi
    00001655: 	movq	-0xe8(%rbp), %rax
    0000165c: 	movq	%rax, -0xb0(%rbp)
.Ltmp3060:
    00001663: 	movq	%r15, %rdx
    00001666: 	movq	%rbx, %rsi
    00001669: 	callq	memcpy@PLT # Offset: 5737
    0000166e: 	movq	-0xe8(%rbp), %r15
    00001675: 	movq	-0xc0(%rbp), %rax
    0000167c: 	jmp	.Ltmp3043 # Offset: 5756
.Ltmp2957:
    00001681: 	movq	-0x100(%rbp), %rdi
    00001688: 	leaq	-0xe8(%rbp), %rsi
    0000168f: 	xorl	%edx, %edx
    00001691: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5777
    00001696: 	movq	%rax, -0x60(%rbp)
    0000169a: 	movq	%rax, %rdi
    0000169d: 	movq	-0xe8(%rbp), %rax
    000016a4: 	movq	%rax, -0x50(%rbp)
.Ltmp3062:
    000016a8: 	movq	%r15, %rdx
    000016ab: 	movq	%rbx, %rsi
    000016ae: 	callq	memcpy@PLT # Offset: 5806
    000016b3: 	movq	-0xe8(%rbp), %r15
    000016ba: 	movq	-0x60(%rbp), %rax
    000016be: 	jmp	.Ltmp3047 # Offset: 5822
.Ltmp2984:
    000016c3: 	movq	-0x100(%rbp), %rdi
    000016ca: 	leaq	-0xe8(%rbp), %rsi
    000016d1: 	xorl	%edx, %edx
    000016d3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5843
    000016d8: 	movq	%rax, -0x60(%rbp)
    000016dc: 	movq	%rax, %rdi
    000016df: 	movq	-0xe8(%rbp), %rax
    000016e6: 	movq	%rax, -0x50(%rbp)
.Ltmp3057:
    000016ea: 	movq	%r15, %rdx
    000016ed: 	movq	%rbx, %rsi
    000016f0: 	callq	memcpy@PLT # Offset: 5872
    000016f5: 	movq	-0xe8(%rbp), %r15
    000016fc: 	movq	-0x60(%rbp), %rax
    00001700: 	jmp	.Ltmp3037 # Offset: 5888
.Ltmp2978:
    00001705: 	movq	-0x100(%rbp), %rdi
    0000170c: 	leaq	-0xe8(%rbp), %rsi
    00001713: 	xorl	%edx, %edx
    00001715: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5909
    0000171a: 	movq	%rax, -0x60(%rbp)
    0000171e: 	movq	%rax, %rdi
    00001721: 	movq	-0xe8(%rbp), %rax
    00001728: 	movq	%rax, -0x50(%rbp)
.Ltmp3058:
    0000172c: 	movq	%r15, %rdx
    0000172f: 	movq	%rbx, %rsi
    00001732: 	callq	memcpy@PLT # Offset: 5938
    00001737: 	movq	-0xe8(%rbp), %r15
    0000173e: 	movq	-0x60(%rbp), %rax
    00001742: 	jmp	.Ltmp3039 # Offset: 5954
.Ltmp2951:
    00001747: 	movq	-0x100(%rbp), %rdi
    0000174e: 	leaq	-0xe8(%rbp), %rsi
    00001755: 	xorl	%edx, %edx
    00001757: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5975
    0000175c: 	movq	%rax, -0x60(%rbp)
    00001760: 	movq	%rax, %rdi
    00001763: 	movq	-0xe8(%rbp), %rax
    0000176a: 	movq	%rax, -0x50(%rbp)
.Ltmp3063:
    0000176e: 	movq	%r15, %rdx
    00001771: 	movq	%rbx, %rsi
    00001774: 	callq	memcpy@PLT # Offset: 6004
    00001779: 	movq	-0xe8(%rbp), %r15
    00001780: 	movq	-0x60(%rbp), %rax
    00001784: 	jmp	.Ltmp3049 # Offset: 6020
.Ltmp2944:
    00001789: 	movq	-0x100(%rbp), %rdi
    00001790: 	leaq	-0xe8(%rbp), %rsi
    00001797: 	xorl	%edx, %edx
    00001799: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6041
    0000179e: 	movq	%rax, -0x60(%rbp)
    000017a2: 	movq	%rax, %rdi
    000017a5: 	movq	-0xe8(%rbp), %rax
    000017ac: 	movq	%rax, -0x50(%rbp)
.Ltmp3053:
    000017b0: 	movq	%r15, %rdx
    000017b3: 	movq	%rbx, %rsi
    000017b6: 	callq	memcpy@PLT # Offset: 6070
    000017bb: 	movq	-0xe8(%rbp), %r15
    000017c2: 	movq	-0x60(%rbp), %rax
    000017c6: 	jmp	.Ltmp3029 # Offset: 6086
.Ltmp2971:
    000017cb: 	movq	-0x100(%rbp), %rdi
    000017d2: 	leaq	-0xe8(%rbp), %rsi
    000017d9: 	xorl	%edx, %edx
    000017db: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6107
    000017e0: 	movq	%rax, -0x60(%rbp)
    000017e4: 	movq	%rax, %rdi
    000017e7: 	movq	-0xe8(%rbp), %rax
    000017ee: 	movq	%rax, -0x50(%rbp)
.Ltmp3059:
    000017f2: 	movq	%r15, %rdx
    000017f5: 	movq	%rbx, %rsi
    000017f8: 	callq	memcpy@PLT # Offset: 6136
    000017fd: 	movq	-0xe8(%rbp), %r15
    00001804: 	movq	-0x60(%rbp), %rax
    00001808: 	jmp	.Ltmp3041 # Offset: 6152
.Ltmp2927:
    0000180d: 	movq	-0x108(%rbp), %rcx
    00001814: 	movq	%rbx, %rsi
    00001817: 	cmpq	%rcx, %rbx
    0000181a: 	je	.Ltmp2932 # Offset: 6170
.Ltmp3052:
    00001820: 	movq	(%rsi), %rdi
    00001823: 	leaq	0x10(%rsi), %rax
    00001827: 	movq	%rsi, %rbx
    0000182a: 	cmpq	%rax, %rdi
    0000182d: 	je	.Ltmp3050 # Offset: 6189
.Ltmp3051:
    0000182f: 	movq	0x10(%rsi), %rax
    00001833: 	addq	$0x20, %rbx
    00001837: 	leaq	0x1(%rax), %rsi
    0000183b: 	movq	%rax, -0xf8(%rbp)
    00001842: 	callq	_ZdlPvm@PLT # Offset: 6210
    00001847: 	movq	%rbx, %rsi
    0000184a: 	cmpq	%rbx, -0x108(%rbp)
    00001851: 	je	.Ltmp2932 # Offset: 6225
    00001857: 	movq	(%rsi), %rdi
    0000185a: 	leaq	0x10(%rsi), %rax
    0000185e: 	movq	%rsi, %rbx
    00001861: 	cmpq	%rax, %rdi
    00001864: 	jne	.Ltmp3051 # Offset: 6244
.Ltmp3050:
    00001866: 	movq	%rsi, %rax
    00001869: 	addq	$0x20, %rax
    0000186d: 	movq	%rax, %rsi
    00001870: 	cmpq	%rax, -0x108(%rbp)
    00001877: 	jne	.Ltmp3052 # Offset: 6263
    00001879: 	jmp	.Ltmp2932 # Offset: 6265
.Ltmp2946:
    0000187e: 	leaq	DATAat0x37182(%rip), %rdi
    00001885: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6277
.Ltmp2950:
    0000188a: 	leaq	DATAat0x37158(%rip), %rdi
    00001891: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6289
.Ltmp2953:
    00001896: 	leaq	DATAat0x37182(%rip), %rdi
    0000189d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6301
.Ltmp2956:
    000018a2: 	leaq	DATAat0x37158(%rip), %rdi
    000018a9: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6313
.Ltmp2959:
    000018ae: 	leaq	DATAat0x37182(%rip), %rdi
    000018b5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6325
.Ltmp2965:
    000018ba: 	leaq	DATAat0x37158(%rip), %rdi
    000018c1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6337
.Ltmp2968:
    000018c6: 	leaq	DATAat0x37182(%rip), %rdi
    000018cd: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6349
.Ltmp2970:
    000018d2: 	leaq	DATAat0x37158(%rip), %rdi
    000018d9: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6361
.Ltmp2973:
    000018de: 	leaq	DATAat0x37182(%rip), %rdi
    000018e5: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6373
.Ltmp2977:
    000018ea: 	leaq	DATAat0x37158(%rip), %rdi
    000018f1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6385
.Ltmp2980:
    000018f6: 	leaq	DATAat0x37182(%rip), %rdi
    000018fd: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6397
.Ltmp2983:
    00001902: 	leaq	DATAat0x37158(%rip), %rdi
    00001909: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6409
.Ltmp2986:
    0000190e: 	leaq	DATAat0x37182(%rip), %rdi
    00001915: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6421
.Ltmp2993:
    0000191a: 	leaq	DATAat0x37158(%rip), %rdi
    00001921: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6433
.Ltmp2996:
    00001926: 	leaq	DATAat0x37182(%rip), %rdi
    0000192d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6445
.Ltmp2999:
    00001932: 	leaq	DATAat0x37158(%rip), %rdi
    00001939: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6457
.Ltmp3002:
    0000193e: 	leaq	DATAat0x37182(%rip), %rdi
    00001945: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6469
.Ltmp3005:
    0000194a: 	leaq	DATAat0x37158(%rip), %rdi
    00001951: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6481
.Ltmp3008:
    00001956: 	leaq	DATAat0x37182(%rip), %rdi
    0000195d: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6493
.Ltmp3011:
    00001962: 	leaq	DATAat0x37158(%rip), %rdi
    00001969: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6505
.Ltmp3014:
    0000196e: 	leaq	DATAat0x37182(%rip), %rdi
    00001975: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6517
.Ltmp3026:
    0000197a: 	callq	__stack_chk_fail@PLT # Offset: 6522
.Ltmp3028:
    0000197f: 	movq	-0xf8(%rbp), %rdi
    00001986: 	jmp	.Ltmp3053 # Offset: 6534
.Ltmp3030:
    0000198b: 	movq	-0xf8(%rbp), %rdi
    00001992: 	jmp	.Ltmp3054 # Offset: 6546
.Ltmp3032:
    00001997: 	movq	-0xf8(%rbp), %rdi
    0000199e: 	jmp	.Ltmp3055 # Offset: 6558
.Ltmp3034:
    000019a3: 	movq	-0xf8(%rbp), %rdi
    000019aa: 	jmp	.Ltmp3056 # Offset: 6570
.Ltmp3036:
    000019af: 	movq	-0xf8(%rbp), %rdi
    000019b6: 	jmp	.Ltmp3057 # Offset: 6582
.Ltmp3038:
    000019bb: 	movq	-0xf8(%rbp), %rdi
    000019c2: 	jmp	.Ltmp3058 # Offset: 6594
.Ltmp3040:
    000019c7: 	movq	-0xf8(%rbp), %rdi
    000019ce: 	jmp	.Ltmp3059 # Offset: 6606
.Ltmp3042:
    000019d3: 	movq	-0x140(%rbp), %rdi
    000019da: 	jmp	.Ltmp3060 # Offset: 6618
.Ltmp3044:
    000019df: 	movq	-0x120(%rbp), %rdi
    000019e6: 	jmp	.Ltmp3061 # Offset: 6630
.Ltmp3046:
    000019eb: 	movq	-0xf8(%rbp), %rdi
    000019f2: 	jmp	.Ltmp3062 # Offset: 6642
.Ltmp3048:
    000019f7: 	movq	-0xf8(%rbp), %rdi
    000019fe: 	jmp	.Ltmp3063 # Offset: 6654
.Ltmp2943:
    00001a03: 	leaq	DATAat0x37158(%rip), %rdi
    00001a0a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6666
    00001a0f: 	endbr64
.Ltmp3065:
    00001a13: 	movq	%rax, %rbx
    00001a16: 	jmp	.Ltmp3064 # Offset: 6678
    00001a18: 	endbr64
    00001a1c: 	jmp	.Ltmp3065 # Offset: 6684
    00001a1e: 	endbr64
    00001a22: 	jmp	.Ltmp3065 # Offset: 6690
    00001a24: 	endbr64
    00001a28: 	jmp	.Ltmp3065 # Offset: 6696
    00001a2a: 	endbr64
    00001a2e: 	jmp	.Ltmp3065 # Offset: 6702
    00001a30: 	endbr64
    00001a34: 	jmp	.Ltmp3065 # Offset: 6708
.Ltmp3064:
    00001a36: 	movq	-0x60(%rbp), %rdi
    00001a3a: 	cmpq	-0xf8(%rbp), %rdi
    00001a41: 	je	.Ltmp3066 # Offset: 6721
    00001a43: 	movq	-0x50(%rbp), %rax
    00001a47: 	leaq	0x1(%rax), %rsi
    00001a4b: 	callq	_ZdlPvm@PLT # Offset: 6731
.Ltmp3066:
    00001a50: 	movq	-0xa0(%rbp), %rdi
    00001a57: 	leaq	-0x90(%rbp), %rax
    00001a5e: 	cmpq	%rax, %rdi
    00001a61: 	je	.Ltmp3067 # Offset: 6753
    00001a63: 	movq	-0x90(%rbp), %rax
    00001a6a: 	leaq	0x1(%rax), %rsi
    00001a6e: 	callq	_ZdlPvm@PLT # Offset: 6766
.Ltmp3067:
    00001a73: 	movq	-0xc0(%rbp), %rdi
    00001a7a: 	cmpq	-0x140(%rbp), %rdi
    00001a81: 	jne	.Ltmp3068 # Offset: 6785
.Ltmp3072:
    00001a87: 	movl	$0x2, %esi
    00001a8c: 	movq	%r14, %rdi
    00001a8f: 	callq	_ZdlPvm@PLT # Offset: 6799
.Ltmp3082:
    00001a94: 	movq	-0x118(%rbp), %rdi
    00001a9b: 	movl	$0x2, %esi
    00001aa0: 	callq	_ZdlPvm@PLT # Offset: 6816
.Ltmp3083:
    00001aa5: 	movq	-0x108(%rbp), %rdi
    00001aac: 	movl	$0x2, %esi
    00001ab1: 	callq	_ZdlPvm@PLT # Offset: 6833
.Ltmp3080:
    00001ab6: 	movl	$0x2, %esi
    00001abb: 	movq	%r13, %rdi
    00001abe: 	callq	_ZdlPvm@PLT # Offset: 6846
.Ltmp3075:
    00001ac3: 	movl	$0x2, %esi
    00001ac8: 	movq	%r12, %rdi
    00001acb: 	callq	_ZdlPvm@PLT # Offset: 6859
.Ltmp3076:
    00001ad0: 	movq	-0xe0(%rbp), %rdi
    00001ad7: 	cmpq	-0x148(%rbp), %rdi
    00001ade: 	je	.Ltmp3069 # Offset: 6878
    00001ae0: 	movq	-0xd0(%rbp), %rax
    00001ae7: 	leaq	0x1(%rax), %rsi
    00001aeb: 	callq	_ZdlPvm@PLT # Offset: 6891
.Ltmp3069:
    00001af0: 	movq	%rbx, %rdi
    00001af3: 	callq	_Unwind_Resume@PLT # Offset: 6899
    00001af8: 	endbr64
    00001afc: 	jmp	.Ltmp3065 # Offset: 6908
    00001b01: 	endbr64
.Ltmp3071:
    00001b05: 	movq	%rax, %rbx
    00001b08: 	jmp	.Ltmp3070 # Offset: 6920
    00001b0d: 	endbr64
    00001b11: 	jmp	.Ltmp3071 # Offset: 6929
    00001b13: 	endbr64
    00001b17: 	jmp	.Ltmp3071 # Offset: 6935
    00001b19: 	endbr64
    00001b1d: 	jmp	.Ltmp3071 # Offset: 6941
.Ltmp3068:
    00001b1f: 	movq	-0xb0(%rbp), %rax
    00001b26: 	leaq	0x1(%rax), %rsi
    00001b2a: 	callq	_ZdlPvm@PLT # Offset: 6954
    00001b2f: 	jmp	.Ltmp3072 # Offset: 6959
    00001b34: 	endbr64
.Ltmp3073:
    00001b38: 	movq	%rax, %rbx
    00001b3b: 	jmp	.Ltmp3067 # Offset: 6971
    00001b40: 	endbr64
    00001b44: 	jmp	.Ltmp3071 # Offset: 6980
    00001b46: 	endbr64
    00001b4a: 	jmp	.Ltmp3073 # Offset: 6986
    00001b4c: 	endbr64
    00001b50: 	movq	%rax, %rbx
    00001b53: 	jmp	.Ltmp3066 # Offset: 6995
    00001b58: 	endbr64
    00001b5c: 	jmp	.Ltmp3071 # Offset: 7004
    00001b5e: 	endbr64
    00001b62: 	movq	%rax, %rbx
    00001b65: 	jmp	.Ltmp3074 # Offset: 7013
    00001b67: 	endbr64
    00001b6b: 	movq	%rax, %rbx
    00001b6e: 	jmp	.Ltmp3075 # Offset: 7022
    00001b73: 	endbr64
    00001b77: 	movq	%rax, %rbx
    00001b7a: 	jmp	.Ltmp3076 # Offset: 7034
.Ltmp3074:
    00001b7f: 	movq	-0x60(%rbp), %rdi
    00001b83: 	leaq	-0x50(%rbp), %rax
    00001b87: 	cmpq	%rax, %rdi
    00001b8a: 	je	.Ltmp3072 # Offset: 7050
.Ltmp3086:
    00001b90: 	movq	-0x50(%rbp), %rax
    00001b94: 	leaq	0x1(%rax), %rsi
    00001b98: 	callq	_ZdlPvm@PLT # Offset: 7064
    00001b9d: 	jmp	.Ltmp3072 # Offset: 7069
    00001ba2: 	endbr64
    00001ba6: 	movq	%rax, %rbx
    00001ba9: 	jmp	.Ltmp3072 # Offset: 7081
    00001bae: 	endbr64
.Ltmp3078:
    00001bb2: 	movq	%rax, %rbx
    00001bb5: 	jmp	.Ltmp3077 # Offset: 7093
    00001bb7: 	endbr64
    00001bbb: 	jmp	.Ltmp3078 # Offset: 7099
    00001bbd: 	endbr64
    00001bc1: 	jmp	.Ltmp3078 # Offset: 7105
.Ltmp3077:
    00001bc3: 	movq	-0x60(%rbp), %rdi
    00001bc7: 	cmpq	-0xf8(%rbp), %rdi
    00001bce: 	je	.Ltmp3079 # Offset: 7118
    00001bd0: 	movq	-0x50(%rbp), %rax
    00001bd4: 	leaq	0x1(%rax), %rsi
    00001bd8: 	callq	_ZdlPvm@PLT # Offset: 7128
.Ltmp3079:
    00001bdd: 	movq	-0x80(%rbp), %rdi
    00001be1: 	cmpq	-0x120(%rbp), %rdi
    00001be8: 	je	.Ltmp3066 # Offset: 7144
    00001bee: 	movq	-0x70(%rbp), %rax
    00001bf2: 	leaq	0x1(%rax), %rsi
    00001bf6: 	callq	_ZdlPvm@PLT # Offset: 7158
    00001bfb: 	jmp	.Ltmp3066 # Offset: 7163
    00001c00: 	endbr64
    00001c04: 	movq	%rax, %rbx
    00001c07: 	jmp	.Ltmp3080 # Offset: 7175
    00001c0c: 	endbr64
    00001c10: 	jmp	.Ltmp3078 # Offset: 7184
    00001c12: 	endbr64
    00001c16: 	jmp	.Ltmp3078 # Offset: 7190
    00001c18: 	endbr64
.Ltmp3081:
    00001c1c: 	movq	%rax, %rbx
    00001c1f: 	jmp	.Ltmp3079 # Offset: 7199
    00001c21: 	endbr64
    00001c25: 	jmp	.Ltmp3081 # Offset: 7205
    00001c27: 	endbr64
    00001c2b: 	movq	%rax, %rbx
    00001c2e: 	jmp	.Ltmp3082 # Offset: 7214
    00001c33: 	endbr64
    00001c37: 	jmp	.Ltmp3078 # Offset: 7223
    00001c3c: 	endbr64
    00001c40: 	jmp	.Ltmp3078 # Offset: 7232
    00001c45: 	endbr64
    00001c49: 	movq	%rax, %rbx
    00001c4c: 	jmp	.Ltmp3083 # Offset: 7244
    00001c51: 	endbr64
    00001c55: 	jmp	.Ltmp3071 # Offset: 7253
    00001c5a: 	endbr64
    00001c5e: 	jmp	.Ltmp3071 # Offset: 7262
    00001c63: 	endbr64
    00001c67: 	jmp	.Ltmp3065 # Offset: 7271
    00001c6c: 	endbr64
    00001c70: 	jmp	.Ltmp3065 # Offset: 7280
    00001c75: 	endbr64
.Ltmp3085:
    00001c79: 	movq	%rax, %rbx
    00001c7c: 	jmp	.Ltmp3084 # Offset: 7292
    00001c7e: 	endbr64
    00001c82: 	jmp	.Ltmp3085 # Offset: 7298
    00001c84: 	endbr64
    00001c88: 	jmp	.Ltmp3085 # Offset: 7304
    00001c8a: 	endbr64
    00001c8e: 	jmp	.Ltmp3085 # Offset: 7310
    00001c90: 	endbr64
    00001c94: 	jmp	.Ltmp3085 # Offset: 7316
    00001c96: 	endbr64
    00001c9a: 	jmp	.Ltmp3085 # Offset: 7322
    00001c9c: 	endbr64
    00001ca0: 	jmp	.Ltmp3085 # Offset: 7328
.Ltmp3070:
    00001ca2: 	movq	-0x60(%rbp), %rdi
    00001ca6: 	cmpq	-0xf8(%rbp), %rdi
    00001cad: 	je	.Ltmp3067 # Offset: 7341
    00001cb3: 	movq	-0x50(%rbp), %rax
    00001cb7: 	leaq	0x1(%rax), %rsi
    00001cbb: 	callq	_ZdlPvm@PLT # Offset: 7355
    00001cc0: 	jmp	.Ltmp3067 # Offset: 7360
    00001cc5: 	endbr64
    00001cc9: 	jmp	.Ltmp3085 # Offset: 7369
    00001ccb: 	endbr64
    00001ccf: 	jmp	.Ltmp3085 # Offset: 7375
.Ltmp3084:
    00001cd1: 	movq	-0x60(%rbp), %rdi
    00001cd5: 	cmpq	-0xf8(%rbp), %rdi
    00001cdc: 	jne	.Ltmp3086 # Offset: 7388
    00001ce2: 	jmp	.Ltmp3072 # Offset: 7394
    00001ce7: 	endbr64
    00001ceb: 	jmp	.Ltmp3085 # Offset: 7403
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeItEvv"

Binary Function "_Z19test_interleave3to4IfPFvPffPKfS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z19test_interleave3to4IfPFvPffPKfS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z19test_interleave3to4IfPFvPffPKfS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/interleave.cpp/1
  Number      : 250
  State       : disassembled
  Address     : 0x309e0
  Size        : 0x2f7
  MaxSize     : 0x300
  Offset      : 0x309e0
  Section     : .text
  Orc Section : .local.text._Z19test_interleave3to4IfPFvPffPKfS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0249:
    00000000: 	pushq	%r15
    00000002: 	movq	%rdi, %r15
    00000005: 	pushq	%r14
    00000007: 	pushq	%r13
    00000009: 	movq	%r8, %r13
    0000000c: 	pushq	%r12
    0000000e: 	movq	%rcx, %r12
    00000011: 	pushq	%rbp
    00000012: 	movq	%rdx, %rbp
    00000015: 	movl	$0x138800, %edx
    0000001a: 	pushq	%rbx
    0000001b: 	movq	%rsi, %rbx
    0000001e: 	xorl	%esi, %esi
    00000020: 	subq	$0x38, %rsp
    00000024: 	movq	0x70(%rsp), %rax
    00000029: 	movq	%r9, 0x8(%rsp)
    0000002e: 	movq	%rax, 0x10(%rsp)
    00000033: 	movq	%fs:0x28, %rax
    0000003c: 	movq	%rax, 0x28(%rsp)
    00000041: 	xorl	%eax, %eax
    00000043: 	callq	memset@PLT # Offset: 67
    00000048: 	movss	(%rbx), %xmm0
    0000004c: 	movq	%rbx, %rax
    0000004f: 	leaq	0x4e200(%rbx), %rdx
    00000056: 	shufps	$0x0, %xmm0, %xmm0
    0000005a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3087:
    00000060: 	movups	%xmm0, (%rax)
    00000063: 	addq	$0x10, %rax
    00000067: 	cmpq	%rdx, %rax
    0000006a: 	jne	.Ltmp3087 # Offset: 106
    0000006c: 	callq	clock@PLT # Offset: 108
    00000071: 	xorl	%r14d, %r14d
    00000074: 	movq	%rax, start_time(%rip)
    0000007b: 	movl	iterations(%rip), %eax
    00000081: 	testl	%eax, %eax
    00000083: 	jle	.Ltmp3088 # Offset: 131
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp3089:
    00000088: 	movss	(%rbx), %xmm0
    0000008c: 	movq	0x8(%rsp), %rax
    00000091: 	movq	%r13, %rcx
    00000094: 	movq	%r12, %rdx
    00000097: 	movl	$0x13880, %r8d
    0000009d: 	movq	%rbp, %rsi
    000000a0: 	movq	%r15, %rdi
    000000a3: 	addl	$0x1, %r14d
    000000a7: 	callq	*%rax # Offset: 167
    000000a9: 	cmpl	iterations(%rip), %r14d
    000000b0: 	jl	.Ltmp3089 # Offset: 176
.Ltmp3088:
    000000b2: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000b9: 	movq	"_ZL7gLabels/1"+48(%rip), %rcx
    000000c0: 	subq	$0x20, %rax
    000000c4: 	cmpq	%rax, %rcx
    000000c7: 	je	.Ltmp3090 # Offset: 199
    000000cd: 	movq	0x10(%rsp), %rax
    000000d2: 	leaq	0x10(%rcx), %rdi
    000000d6: 	movq	%rdi, (%rcx)
    000000d9: 	movq	(%rax), %r8
    000000dc: 	movq	0x8(%rax), %r14
    000000e0: 	movq	%r8, %rax
    000000e3: 	addq	%r14, %rax
    000000e6: 	je	.Ltmp3091 # Offset: 230
    000000e8: 	testq	%r8, %r8
    000000eb: 	je	.Ltmp3092 # Offset: 235
.Ltmp3091:
    000000f1: 	movq	%r14, 0x20(%rsp)
    000000f6: 	cmpq	$0xf, %r14
    000000fa: 	ja	.Ltmp3093 # Offset: 250
    00000100: 	cmpq	$0x1, %r14
    00000104: 	jne	.Ltmp3094 # Offset: 260
    0000010a: 	movzbl	(%r8), %eax
    0000010e: 	movb	%al, 0x10(%rcx)
.Ltmp3099:
    00000111: 	movq	%r14, 0x8(%rcx)
    00000115: 	movb	$0x0, (%rdi,%r14)
    0000011a: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000121: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000128: 	addq	$0x20, %rax
    0000012c: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000133: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000013a: 	je	.Ltmp3095 # Offset: 314
.Ltmp3100:
    00000140: 	movq	-0x20(%rax), %r14
    00000144: 	callq	clock@PLT # Offset: 324
    00000149: 	pxor	%xmm0, %xmm0
    0000014d: 	movq	%rax, end_time(%rip)
    00000154: 	movq	%r14, %rdi
    00000157: 	subq	start_time(%rip), %rax
    0000015e: 	cvtsi2sd	%rax, %xmm0
    00000163: 	divsd	DATAat0x37530(%rip), %xmm0
    0000016b: 	callq	_Z13record_resultdPKc # Offset: 363
    00000170: 	xorl	%eax, %eax
.Ltmp3097:
    00000172: 	movss	(%r15,%rax,4), %xmm0
    00000178: 	ucomiss	(%rbx,%rax), %xmm0
    0000017c: 	jp	.Ltmp3096 # Offset: 380
    00000182: 	jne	.Ltmp3096 # Offset: 386
    00000188: 	movss	0x4(%r15,%rax,4), %xmm0
    0000018f: 	ucomiss	(%rbp,%rax), %xmm0
    00000194: 	jp	.Ltmp3096 # Offset: 404
    0000019a: 	jne	.Ltmp3096 # Offset: 410
    000001a0: 	movss	0x8(%r15,%rax,4), %xmm0
    000001a7: 	ucomiss	(%r12,%rax), %xmm0
    000001ac: 	jp	.Ltmp3096 # Offset: 428
    000001b2: 	jne	.Ltmp3096 # Offset: 434
    000001b8: 	movss	0xc(%r15,%rax,4), %xmm0
    000001bf: 	ucomiss	(%r13,%rax), %xmm0
    000001c5: 	jp	.Ltmp3096 # Offset: 453
    000001cb: 	jne	.Ltmp3096 # Offset: 459
    000001d1: 	addq	$0x4, %rax
    000001d5: 	cmpq	$0x4e200, %rax
    000001db: 	jne	.Ltmp3097 # Offset: 475
    000001dd: 	movq	0x28(%rsp), %rax
    000001e2: 	subq	%fs:0x28, %rax
    000001eb: 	jne	.Ltmp3098 # Offset: 491
    000001f1: 	addq	$0x38, %rsp
    000001f5: 	popq	%rbx
    000001f6: 	popq	%rbp
    000001f7: 	popq	%r12
    000001f9: 	popq	%r13
    000001fb: 	popq	%r14
    000001fd: 	popq	%r15
    000001ff: 	retq # Offset: 511
.Ltmp3093:
    00000200: 	movq	%rcx, %rdi
    00000203: 	leaq	0x20(%rsp), %rsi
    00000208: 	xorl	%edx, %edx
    0000020a: 	movq	%r8, 0x18(%rsp)
    0000020f: 	movq	%rcx, 0x8(%rsp)
    00000214: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 532
    00000219: 	movq	0x8(%rsp), %rcx
    0000021e: 	movq	0x18(%rsp), %r8
    00000223: 	movq	%rax, %rdi
    00000226: 	movq	%rax, (%rcx)
    00000229: 	movq	0x20(%rsp), %rax
    0000022e: 	movq	%rax, 0x10(%rcx)
.Ltmp3101:
    00000232: 	movq	%r14, %rdx
    00000235: 	movq	%r8, %rsi
    00000238: 	movq	%rcx, 0x8(%rsp)
    0000023d: 	callq	memcpy@PLT # Offset: 573
    00000242: 	movq	0x8(%rsp), %rcx
    00000247: 	movq	0x20(%rsp), %r14
    0000024c: 	movq	(%rcx), %rdi
    0000024f: 	jmp	.Ltmp3099 # Offset: 591
    00000254: 	nopl	(%rax) # Size: 4
.Ltmp3096:
    00000258: 	movq	0x28(%rsp), %rax
    0000025d: 	subq	%fs:0x28, %rax
    00000266: 	jne	.Ltmp3098 # Offset: 614
    00000268: 	movq	0x10(%rsp), %rax
    0000026d: 	leaq	DATAat0x371c8(%rip), %rsi
    00000274: 	movl	$0x1, %edi
    00000279: 	movq	(%rax), %rdx
    0000027c: 	addq	$0x38, %rsp
    00000280: 	xorl	%eax, %eax
    00000282: 	popq	%rbx
    00000283: 	popq	%rbp
    00000284: 	popq	%r12
    00000286: 	popq	%r13
    00000288: 	popq	%r14
    0000028a: 	popq	%r15
    0000028c: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 652
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp3090:
    00000298: 	movq	0x10(%rsp), %rsi
    0000029d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002a4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 676
    000002a9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000002b0: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000002b7: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000002be: 	jne	.Ltmp3100 # Offset: 702
.Ltmp3095:
    000002c4: 	movq	-0x8(%rdx), %rax
    000002c8: 	addq	$0x200, %rax
    000002ce: 	jmp	.Ltmp3100 # Offset: 718
    000002d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3094:
    000002d8: 	testq	%r14, %r14
    000002db: 	je	.Ltmp3099 # Offset: 731
    000002e1: 	jmp	.Ltmp3101 # Offset: 737
.Ltmp3098:
    000002e6: 	callq	__stack_chk_fail@PLT # Offset: 742
.Ltmp3092:
    000002eb: 	leaq	DATAat0x37158(%rip), %rdi
    000002f2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 754
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave3to4IfPFvPffPKfS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z11TestOneTypeIfEvv" after disassembly {
  Number      : 251
  State       : disassembled
  Address     : 0x30ce0
  Size        : 0x1bdb
  MaxSize     : 0x1be0
  Offset      : 0x30ce0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIfEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0250:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rsp, %rbp
    00000008: 	pushq	%r15
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x128, %rsp
    00000018: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm1
    00000020: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm2
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, -0x38(%rbp)
    00000035: 	xorl	%eax, %eax
    00000037: 	leaq	-0xd0(%rbp), %rax
    0000003e: 	movb	$0x74, -0xcc(%rbp)
    00000045: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    0000004c: 	movq	%rax, -0x120(%rbp)
    00000053: 	movhlps	%xmm1, %xmm5
    00000056: 	movq	%xmm2, %rsi
    0000005b: 	movq	%rax, -0xe0(%rbp)
    00000062: 	movq	%xmm5, %rcx
    00000067: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000006e: 	leaq	0x8(%rcx), %r12
    00000072: 	movb	$0x0, -0xcb(%rbp)
    00000079: 	movq	%rax, -0x108(%rbp)
    00000080: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    00000087: 	movl	$0x616f6c66, -0xd0(%rbp)
    00000091: 	movq	$0x5, -0xd8(%rbp)
    0000009c: 	movq	%rax, -0x118(%rbp)
    000000a3: 	movaps	%xmm2, -0x130(%rbp)
    000000aa: 	movaps	%xmm1, -0x140(%rbp)
    000000b1: 	movq	%xmm5, -0x148(%rbp)
    000000b9: 	movq	%xmm1, -0x110(%rbp)
    000000c1: 	cmpq	%r12, %rax
    000000c4: 	jbe	.Ltmp3102 # Offset: 196
    000000c6: 	movq	%xmm2, -0x150(%rbp)
    000000ce: 	movq	%r12, %r13
    000000d1: 	movq	%rax, %r15
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp3105:
    000000d8: 	movq	(%r13), %rax
    000000dc: 	movq	%rax, -0xf8(%rbp)
    000000e3: 	leaq	0x200(%rax), %rbx
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3104:
    000000f0: 	movq	-0xf8(%rbp), %rax
    000000f7: 	movq	(%rax), %rdi
    000000fa: 	leaq	0x10(%rax), %rdx
    000000fe: 	cmpq	%rdx, %rdi
    00000101: 	je	.Ltmp3103 # Offset: 257
    00000107: 	movq	0x10(%rax), %rcx
    0000010b: 	leaq	0x1(%rcx), %rsi
    0000010f: 	movq	%rcx, -0x100(%rbp)
    00000116: 	callq	_ZdlPvm@PLT # Offset: 278
    0000011b: 	addq	$0x20, -0xf8(%rbp)
    00000123: 	movq	-0xf8(%rbp), %rax
    0000012a: 	cmpq	%rbx, %rax
    0000012d: 	jne	.Ltmp3104 # Offset: 301
    0000012f: 	addq	$0x8, %r13
    00000133: 	cmpq	%r13, %r15
    00000136: 	ja	.Ltmp3105 # Offset: 310
.Ltmp3201:
    00000138: 	movq	-0x150(%rbp), %rsi
.Ltmp3102:
    0000013f: 	movq	-0x148(%rbp), %rcx
    00000146: 	cmpq	%rcx, -0x118(%rbp)
    0000014d: 	je	.Ltmp3106 # Offset: 333
    00000153: 	movq	-0x110(%rbp), %rcx
    0000015a: 	movq	%rsi, %rbx
    0000015d: 	cmpq	%rcx, %rsi
    00000160: 	je	.Ltmp3107 # Offset: 352
.Ltmp3110:
    00000162: 	movq	(%rbx), %rdi
    00000165: 	leaq	0x10(%rbx), %rax
    00000169: 	cmpq	%rax, %rdi
    0000016c: 	je	.Ltmp3108 # Offset: 364
.Ltmp3109:
    0000016e: 	movq	0x10(%rbx), %rax
    00000172: 	addq	$0x20, %rbx
    00000176: 	leaq	0x1(%rax), %rsi
    0000017a: 	movq	%rax, -0xf8(%rbp)
    00000181: 	callq	_ZdlPvm@PLT # Offset: 385
    00000186: 	cmpq	-0x110(%rbp), %rbx
    0000018d: 	je	.Ltmp3107 # Offset: 397
    0000018f: 	movq	(%rbx), %rdi
    00000192: 	leaq	0x10(%rbx), %rax
    00000196: 	cmpq	%rax, %rdi
    00000199: 	jne	.Ltmp3109 # Offset: 409
.Ltmp3108:
    0000019b: 	movq	%rbx, %rax
    0000019e: 	addq	$0x20, %rax
    000001a2: 	movq	%rax, %rbx
    000001a5: 	cmpq	-0x110(%rbp), %rax
    000001ac: 	jne	.Ltmp3110 # Offset: 428
    000001ae: 	cmpq	%r14, -0x108(%rbp)
    000001b5: 	je	.Ltmp3111 # Offset: 437
    000001b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3113:
    000001c0: 	movq	(%r14), %rdi
    000001c3: 	leaq	0x10(%r14), %rax
    000001c7: 	cmpq	%rax, %rdi
    000001ca: 	je	.Ltmp3112 # Offset: 458
    000001cc: 	movq	0x10(%r14), %rax
    000001d0: 	leaq	0x1(%rax), %rsi
    000001d4: 	callq	_ZdlPvm@PLT # Offset: 468
.Ltmp3112:
    000001d9: 	addq	$0x20, %r14
.Ltmp3107:
    000001dd: 	cmpq	%r14, -0x108(%rbp)
    000001e4: 	jne	.Ltmp3113 # Offset: 484
.Ltmp3111:
    000001e6: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000001ed: 	leaq	0x8(%rax), %rbx
    000001f1: 	cmpq	%r12, %rbx
    000001f4: 	jbe	.Ltmp3114 # Offset: 500
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3115:
    00000200: 	movq	(%r12), %rdi
    00000204: 	movl	$0x200, %esi
    00000209: 	addq	$0x8, %r12
    0000020d: 	callq	_ZdlPvm@PLT # Offset: 525
    00000212: 	cmpq	%r12, %rbx
    00000215: 	ja	.Ltmp3115 # Offset: 533
.Ltmp3114:
    00000217: 	movzbl	init_value(%rip), %eax
    0000021e: 	movdqa	-0x130(%rbp), %xmm3
    00000226: 	movl	$0x4e200, %edi
    0000022b: 	movdqa	-0x140(%rbp), %xmm4
    00000233: 	addq	$0x2a, %rax
    00000237: 	movaps	%xmm3, "_ZL7gLabels/1"+48(%rip)
    0000023e: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000245: 	movl	iterations(%rip), %eax
    0000024b: 	movaps	%xmm4, "_ZL7gLabels/1"+64(%rip)
    00000252: 	movl	%eax, -0x118(%rbp)
    00000258: 	callq	_Znam@PLT # Offset: 600
    0000025d: 	movl	$0x4e200, %edi
    00000262: 	movq	%rax, %r12
    00000265: 	callq	_Znam@PLT # Offset: 613
    0000026a: 	movl	$0x4e200, %edi
    0000026f: 	movq	%rax, %r13
    00000272: 	callq	_Znam@PLT # Offset: 626
    00000277: 	movl	$0x4e200, %edi
    0000027c: 	movq	%rax, -0x100(%rbp)
    00000283: 	callq	_Znam@PLT # Offset: 643
    00000288: 	movl	$0x138800, %edi
    0000028d: 	movq	%rax, -0x110(%rbp)
    00000294: 	callq	_Znam@PLT # Offset: 660
    00000299: 	movq	%rax, %r14
    0000029c: 	movq	%r12, %rdx
    0000029f: 	leaq	0x4e200(%r12), %rdi
    000002a7: 	movabsq	$0x5851f42d4c957f2d, %rsi
    000002b1: 	movabsq	$0x14057b7ef767814f, %rcx
    000002bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3116:
    000002c0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	addq	$0x4, %rdx
    000002cf: 	imulq	%rsi, %rax
    000002d3: 	addq	%rcx, %rax
    000002d6: 	movq	%rax, %r8
    000002d9: 	movq	%rax, %r9
    000002dc: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000002e3: 	shrq	$0x14, %r8
    000002e7: 	shlq	$0x17, %r9
    000002eb: 	xorq	%r9, %r8
    000002ee: 	xorq	%r8, %rax
    000002f1: 	sarq	$0x3, %rax
    000002f5: 	cvtsi2ss	%rax, %xmm0
    000002fa: 	movss	%xmm0, -0x4(%rdx)
    000002ff: 	cmpq	%rdi, %rdx
    00000302: 	jne	.Ltmp3116 # Offset: 770
    00000304: 	leaq	0x4e200(%r13), %rdi
    0000030b: 	movq	%r13, %rdx
    0000030e: 	movabsq	$0x5851f42d4c957f2d, %rsi
    00000318: 	movabsq	$0x14057b7ef767814f, %rcx
    00000322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3117:
    00000328: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000032f: 	pxor	%xmm0, %xmm0
    00000333: 	addq	$0x4, %rdx
    00000337: 	imulq	%rsi, %rax
    0000033b: 	addq	%rcx, %rax
    0000033e: 	movq	%rax, %r8
    00000341: 	movq	%rax, %r9
    00000344: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000034b: 	shrq	$0x14, %r8
    0000034f: 	shlq	$0x17, %r9
    00000353: 	xorq	%r9, %r8
    00000356: 	xorq	%r8, %rax
    00000359: 	sarq	$0x3, %rax
    0000035d: 	cvtsi2ss	%rax, %xmm0
    00000362: 	movss	%xmm0, -0x4(%rdx)
    00000367: 	cmpq	%rdx, %rdi
    0000036a: 	jne	.Ltmp3117 # Offset: 874
    0000036c: 	movq	-0x100(%rbp), %rdx
    00000373: 	movabsq	$0x5851f42d4c957f2d, %rsi
    0000037d: 	movabsq	$0x14057b7ef767814f, %rcx
    00000387: 	leaq	0x4e200(%rdx), %rdi
    0000038e: 	nop # Size: 2
.Ltmp3118:
    00000390: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000397: 	pxor	%xmm0, %xmm0
    0000039b: 	addq	$0x4, %rdx
    0000039f: 	imulq	%rsi, %rax
    000003a3: 	addq	%rcx, %rax
    000003a6: 	movq	%rax, %r8
    000003a9: 	movq	%rax, %r9
    000003ac: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000003b3: 	shrq	$0x14, %r8
    000003b7: 	shlq	$0x17, %r9
    000003bb: 	xorq	%r9, %r8
    000003be: 	xorq	%r8, %rax
    000003c1: 	sarq	$0x3, %rax
    000003c5: 	cvtsi2ss	%rax, %xmm0
    000003ca: 	movss	%xmm0, -0x4(%rdx)
    000003cf: 	cmpq	%rdx, %rdi
    000003d2: 	jne	.Ltmp3118 # Offset: 978
    000003d4: 	movq	-0x110(%rbp), %rdx
    000003db: 	movabsq	$0x5851f42d4c957f2d, %rsi
    000003e5: 	movabsq	$0x14057b7ef767814f, %rcx
    000003ef: 	leaq	0x4e200(%rdx), %rdi
    000003f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3119:
    00000400: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000407: 	pxor	%xmm0, %xmm0
    0000040b: 	addq	$0x4, %rdx
    0000040f: 	imulq	%rsi, %rax
    00000413: 	addq	%rcx, %rax
    00000416: 	movq	%rax, %r8
    00000419: 	movq	%rax, %r9
    0000041c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000423: 	shrq	$0x14, %r8
    00000427: 	shlq	$0x17, %r9
    0000042b: 	xorq	%r9, %r8
    0000042e: 	xorq	%r8, %rax
    00000431: 	sarq	$0x3, %rax
    00000435: 	cvtsi2ss	%rax, %xmm0
    0000043a: 	movss	%xmm0, -0x4(%rdx)
    0000043f: 	cmpq	%rdx, %rdi
    00000442: 	jne	.Ltmp3119 # Offset: 1090
    00000444: 	xorl	%esi, %esi
    00000446: 	movl	$0x138800, %edx
    0000044b: 	leaq	-0x50(%rbp), %rbx
    0000044f: 	movq	%r14, %rdi
    00000452: 	callq	memset@PLT # Offset: 1106
    00000457: 	movl	-0x118(%rbp), %eax
    0000045d: 	movq	-0xd8(%rbp), %r15
    00000464: 	movq	%rbx, -0x60(%rbp)
    00000468: 	movl	%eax, iterations(%rip)
    0000046e: 	movq	-0xe0(%rbp), %rax
    00000475: 	movq	%rax, %rcx
    00000478: 	movq	%rax, -0xf8(%rbp)
    0000047f: 	addq	%r15, %rcx
    00000482: 	je	.Ltmp3120 # Offset: 1154
    00000484: 	testq	%rax, %rax
    00000487: 	je	.Ltmp3121 # Offset: 1159
.Ltmp3120:
    0000048d: 	movq	%r15, -0xe8(%rbp)
    00000494: 	cmpq	$0xf, %r15
    00000498: 	ja	.Ltmp3122 # Offset: 1176
    0000049e: 	cmpq	$0x1, %r15
    000004a2: 	jne	.Ltmp3123 # Offset: 1186
    000004a8: 	movq	-0xf8(%rbp), %rax
    000004af: 	movzbl	(%rax), %eax
    000004b2: 	movb	%al, -0x50(%rbp)
    000004b5: 	movq	%rbx, %rax
.Ltmp3203:
    000004b8: 	movq	%r15, -0x58(%rbp)
    000004bc: 	movb	$0x0, (%rax,%r15)
    000004c1: 	movabsq	$0x3fffffffffffffff, %rax
    000004cb: 	subq	-0x58(%rbp), %rax
    000004cf: 	cmpq	$0x10, %rax
    000004d3: 	jbe	.Ltmp3124 # Offset: 1235
    000004d9: 	leaq	-0x60(%rbp), %rax
    000004dd: 	movl	$0x11, %edx
    000004e2: 	leaq	DATAat0x371d8(%rip), %rsi
    000004e9: 	movq	%rax, %rdi
    000004ec: 	movq	%rax, -0xf8(%rbp)
    000004f3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1267
    000004f8: 	movq	-0xf8(%rbp), %r8
    000004ff: 	movq	%r13, %rdx
    00000502: 	movq	%r12, %rsi
    00000505: 	movq	%r14, %rdi
    00000508: 	leaq	_Z23interleave2to2_version1IfEvPT_PKS0_S3_i(%rip), %rcx
    0000050f: 	callq	"_Z19test_interleave2to2IfPFvPfPKfS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1295
    00000514: 	movq	-0x60(%rbp), %rdi
    00000518: 	cmpq	%rbx, %rdi
    0000051b: 	je	.Ltmp3125 # Offset: 1307
    0000051d: 	movq	-0x50(%rbp), %rax
    00000521: 	leaq	0x1(%rax), %rsi
    00000525: 	callq	_ZdlPvm@PLT # Offset: 1317
.Ltmp3125:
    0000052a: 	movq	-0xf8(%rbp), %r15
    00000531: 	leaq	-0xe0(%rbp), %rax
    00000538: 	leaq	DATAat0x371ea(%rip), %rdx
    0000053f: 	movq	%rax, %rsi
    00000542: 	movq	%rax, -0x108(%rbp)
    00000549: 	movq	%r15, %rdi
    0000054c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1356
    00000551: 	movq	%r15, %r8
    00000554: 	leaq	_Z23interleave2to2_version2IfEvPT_PKS0_S3_i(%rip), %rcx
    0000055b: 	movq	%r13, %rdx
    0000055e: 	movq	%r12, %rsi
    00000561: 	movq	%r14, %rdi
    00000564: 	callq	"_Z19test_interleave2to2IfPFvPfPKfS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1380
    00000569: 	movq	-0x60(%rbp), %rdi
    0000056d: 	cmpq	%rbx, %rdi
    00000570: 	je	.Ltmp3126 # Offset: 1392
    00000572: 	movq	-0x50(%rbp), %rax
    00000576: 	leaq	0x1(%rax), %rsi
    0000057a: 	callq	_ZdlPvm@PLT # Offset: 1402
.Ltmp3126:
    0000057f: 	movq	-0xf8(%rbp), %r15
    00000586: 	movq	-0x108(%rbp), %rsi
    0000058d: 	leaq	DATAat0x371fc(%rip), %rdx
    00000594: 	movq	%r15, %rdi
    00000597: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1431
    0000059c: 	movq	%r15, %r8
    0000059f: 	leaq	_Z23interleave2to2_version3IfEvPT_PKS0_S3_i(%rip), %rcx
    000005a6: 	movq	%r13, %rdx
    000005a9: 	movq	%r12, %rsi
    000005ac: 	movq	%r14, %rdi
    000005af: 	callq	"_Z19test_interleave2to2IfPFvPfPKfS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1455
    000005b4: 	movq	-0x60(%rbp), %rdi
    000005b8: 	cmpq	%rbx, %rdi
    000005bb: 	je	.Ltmp3127 # Offset: 1467
    000005bd: 	movq	-0x50(%rbp), %rax
    000005c1: 	leaq	0x1(%rax), %rsi
    000005c5: 	callq	_ZdlPvm@PLT # Offset: 1477
.Ltmp3127:
    000005ca: 	movq	-0xf8(%rbp), %r15
    000005d1: 	movq	-0x108(%rbp), %rsi
    000005d8: 	leaq	DATAat0x3720e(%rip), %rdx
    000005df: 	movq	%r15, %rdi
    000005e2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1506
    000005e7: 	movq	%r15, %r8
    000005ea: 	leaq	_Z23interleave2to2_version4IfEvPT_PKS0_S3_i(%rip), %rcx
    000005f1: 	movq	%r13, %rdx
    000005f4: 	movq	%r12, %rsi
    000005f7: 	movq	%r14, %rdi
    000005fa: 	callq	"_Z19test_interleave2to2IfPFvPfPKfS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1530
    000005ff: 	movq	-0x60(%rbp), %rdi
    00000603: 	cmpq	%rbx, %rdi
    00000606: 	je	.Ltmp3128 # Offset: 1542
    00000608: 	movq	-0x50(%rbp), %rax
    0000060c: 	leaq	0x1(%rax), %rsi
    00000610: 	callq	_ZdlPvm@PLT # Offset: 1552
.Ltmp3128:
    00000615: 	movq	-0xf8(%rbp), %r15
    0000061c: 	movq	-0x108(%rbp), %rsi
    00000623: 	leaq	DATAat0x37220(%rip), %rdx
    0000062a: 	movq	%r15, %rdi
    0000062d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1581
    00000632: 	movq	%r15, %r8
    00000635: 	leaq	_Z23interleave2to2_version5IfEvPT_PKS0_S3_i(%rip), %rcx
    0000063c: 	movq	%r13, %rdx
    0000063f: 	movq	%r12, %rsi
    00000642: 	movq	%r14, %rdi
    00000645: 	callq	"_Z19test_interleave2to2IfPFvPfPKfS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1605
    0000064a: 	movq	-0x60(%rbp), %rdi
    0000064e: 	cmpq	%rbx, %rdi
    00000651: 	je	.Ltmp3129 # Offset: 1617
    00000653: 	movq	-0x50(%rbp), %rax
    00000657: 	leaq	0x1(%rax), %rsi
    0000065b: 	callq	_ZdlPvm@PLT # Offset: 1627
.Ltmp3129:
    00000660: 	movq	-0xf8(%rbp), %r15
    00000667: 	movq	-0x108(%rbp), %rsi
    0000066e: 	leaq	DATAat0x37232(%rip), %rdx
    00000675: 	movq	%r15, %rdi
    00000678: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1656
    0000067d: 	movq	%r15, %r8
    00000680: 	leaq	_Z23interleave2to2_version6IfEvPT_PKS0_S3_i(%rip), %rcx
    00000687: 	movq	%r13, %rdx
    0000068a: 	movq	%r12, %rsi
    0000068d: 	movq	%r14, %rdi
    00000690: 	callq	"_Z19test_interleave2to2IfPFvPfPKfS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1680
    00000695: 	movq	-0x60(%rbp), %rdi
    00000699: 	cmpq	%rbx, %rdi
    0000069c: 	je	.Ltmp3130 # Offset: 1692
    0000069e: 	movq	-0x50(%rbp), %rax
    000006a2: 	leaq	0x1(%rax), %rsi
    000006a6: 	callq	_ZdlPvm@PLT # Offset: 1702
.Ltmp3130:
    000006ab: 	movq	-0xf8(%rbp), %r15
    000006b2: 	movq	-0x108(%rbp), %rsi
    000006b9: 	leaq	DATAat0x37244(%rip), %rdx
    000006c0: 	movq	%r15, %rdi
    000006c3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1731
    000006c8: 	movq	%r15, %r8
    000006cb: 	leaq	_Z23interleave2to2_version7IfEvPT_PKS0_S3_i(%rip), %rcx
    000006d2: 	movq	%r13, %rdx
    000006d5: 	movq	%r12, %rsi
    000006d8: 	movq	%r14, %rdi
    000006db: 	callq	"_Z19test_interleave2to2IfPFvPfPKfS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1755
    000006e0: 	movq	-0x60(%rbp), %rdi
    000006e4: 	cmpq	%rbx, %rdi
    000006e7: 	je	.Ltmp3131 # Offset: 1767
    000006e9: 	movq	-0x50(%rbp), %rax
    000006ed: 	leaq	0x1(%rax), %rsi
    000006f1: 	callq	_ZdlPvm@PLT # Offset: 1777
.Ltmp3131:
    000006f6: 	movq	-0xe0(%rbp), %rax
    000006fd: 	movq	-0xd8(%rbp), %r15
    00000704: 	movq	%rbx, -0x60(%rbp)
    00000708: 	movq	%rax, %rcx
    0000070b: 	movq	%rax, -0x130(%rbp)
    00000712: 	addq	%r15, %rcx
    00000715: 	je	.Ltmp3132 # Offset: 1813
    00000717: 	testq	%rax, %rax
    0000071a: 	je	.Ltmp3133 # Offset: 1818
.Ltmp3132:
    00000720: 	movq	%r15, -0xe8(%rbp)
    00000727: 	cmpq	$0xf, %r15
    0000072b: 	ja	.Ltmp3134 # Offset: 1835
    00000731: 	cmpq	$0x1, %r15
    00000735: 	jne	.Ltmp3135 # Offset: 1845
    0000073b: 	movq	-0x130(%rbp), %rax
    00000742: 	movzbl	(%rax), %eax
    00000745: 	movb	%al, -0x50(%rbp)
    00000748: 	movq	%rbx, %rax
.Ltmp3221:
    0000074b: 	movq	%r15, -0x58(%rbp)
    0000074f: 	movb	$0x0, (%rax,%r15)
    00000754: 	movabsq	$0x3fffffffffffffff, %rax
    0000075e: 	subq	-0x58(%rbp), %rax
    00000762: 	cmpq	$0x10, %rax
    00000766: 	jbe	.Ltmp3136 # Offset: 1894
    0000076c: 	movq	-0xf8(%rbp), %rdi
    00000773: 	movl	$0x11, %edx
    00000778: 	leaq	DATAat0x37256(%rip), %rsi
    0000077f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1919
    00000784: 	movq	-0xf8(%rbp), %r8
    0000078b: 	movq	%r13, %rdx
    0000078e: 	movq	%r12, %rsi
    00000791: 	movq	%r14, %rdi
    00000794: 	leaq	_Z23interleave2to2_version8IfEvPT_PKS0_S3_i(%rip), %rcx
    0000079b: 	callq	"_Z19test_interleave2to2IfPFvPfPKfS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1947
    000007a0: 	movq	-0x60(%rbp), %rdi
    000007a4: 	cmpq	%rbx, %rdi
    000007a7: 	je	.Ltmp3137 # Offset: 1959
    000007a9: 	movq	-0x50(%rbp), %rax
    000007ad: 	leaq	0x1(%rax), %rsi
    000007b1: 	callq	_ZdlPvm@PLT # Offset: 1969
.Ltmp3137:
    000007b6: 	leaq	-0xb0(%rbp), %rax
    000007bd: 	movq	-0xd8(%rbp), %r15
    000007c4: 	movq	%rax, -0x130(%rbp)
    000007cb: 	movq	%rax, -0xc0(%rbp)
    000007d2: 	movq	-0xe0(%rbp), %rax
    000007d9: 	movq	%rax, %rcx
    000007dc: 	movq	%rax, -0x140(%rbp)
    000007e3: 	addq	%r15, %rcx
    000007e6: 	je	.Ltmp3138 # Offset: 2022
    000007e8: 	testq	%rax, %rax
    000007eb: 	je	.Ltmp3139 # Offset: 2027
.Ltmp3138:
    000007f1: 	movq	%r15, -0xe8(%rbp)
    000007f8: 	cmpq	$0xf, %r15
    000007fc: 	ja	.Ltmp3140 # Offset: 2044
    00000802: 	cmpq	$0x1, %r15
    00000806: 	jne	.Ltmp3141 # Offset: 2054
    0000080c: 	movq	-0x140(%rbp), %rax
    00000813: 	movzbl	(%rax), %eax
    00000816: 	movb	%al, -0xb0(%rbp)
    0000081c: 	movq	-0x130(%rbp), %rax
.Ltmp3219:
    00000823: 	movq	%r15, -0xb8(%rbp)
    0000082a: 	movb	$0x0, (%rax,%r15)
    0000082f: 	movabsq	$0x3fffffffffffffff, %rax
    00000839: 	subq	-0xb8(%rbp), %rax
    00000840: 	cmpq	$0xe, %rax
    00000844: 	jbe	.Ltmp3142 # Offset: 2116
    0000084a: 	leaq	-0xc0(%rbp), %rdi
    00000851: 	movl	$0xf, %edx
    00000856: 	leaq	DATAat0x37268(%rip), %rsi
    0000085d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2141
    00000862: 	movl	iterations(%rip), %edx
    00000868: 	xorl	%r8d, %r8d
    0000086b: 	xorl	%ecx, %ecx
    0000086d: 	movl	$0x13880, %esi
    00000872: 	movq	-0xc0(%rbp), %rdi
    00000879: 	callq	_Z9summarizePKciiii # Offset: 2169
    0000087e: 	movl	-0x118(%rbp), %eax
    00000884: 	movq	-0xf8(%rbp), %r15
    0000088b: 	movq	-0x108(%rbp), %rsi
    00000892: 	leal	(%rax,%rax), %edx
    00000895: 	movq	%r15, %rdi
    00000898: 	movslq	%edx, %rax
    0000089b: 	sarl	$0x1f, %edx
    0000089e: 	imulq	$0x55555556, %rax, %rax
    000008a5: 	shrq	$0x20, %rax
    000008a9: 	subl	%edx, %eax
    000008ab: 	leaq	DATAat0x37278(%rip), %rdx
    000008b2: 	movl	%eax, iterations(%rip)
    000008b8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2232
    000008bd: 	movq	-0x100(%rbp), %rcx
    000008c4: 	movq	%r15, %r9
    000008c7: 	movq	%r13, %rdx
    000008ca: 	movq	%r12, %rsi
    000008cd: 	leaq	_Z23interleave3to3_version1IfEvPT_PKS0_S3_S3_i(%rip), %r8
    000008d4: 	movq	%r14, %rdi
    000008d7: 	callq	"_Z19test_interleave3to3IfPFvPfPKfS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2263
    000008dc: 	movq	-0x60(%rbp), %rdi
    000008e0: 	cmpq	%rbx, %rdi
    000008e3: 	je	.Ltmp3143 # Offset: 2275
    000008e5: 	movq	-0x50(%rbp), %rax
    000008e9: 	leaq	0x1(%rax), %rsi
    000008ed: 	callq	_ZdlPvm@PLT # Offset: 2285
.Ltmp3143:
    000008f2: 	movq	-0xe0(%rbp), %rax
    000008f9: 	movq	-0xd8(%rbp), %r15
    00000900: 	movq	%rbx, -0x60(%rbp)
    00000904: 	movq	%rax, %rcx
    00000907: 	movq	%rax, -0x140(%rbp)
    0000090e: 	addq	%r15, %rcx
    00000911: 	je	.Ltmp3144 # Offset: 2321
    00000913: 	testq	%rax, %rax
    00000916: 	je	.Ltmp3145 # Offset: 2326
.Ltmp3144:
    0000091c: 	movq	%r15, -0xe8(%rbp)
    00000923: 	cmpq	$0xf, %r15
    00000927: 	ja	.Ltmp3146 # Offset: 2343
    0000092d: 	cmpq	$0x1, %r15
    00000931: 	jne	.Ltmp3147 # Offset: 2353
    00000937: 	movq	-0x140(%rbp), %rax
    0000093e: 	movzbl	(%rax), %eax
    00000941: 	movb	%al, -0x50(%rbp)
    00000944: 	movq	%rbx, %rax
.Ltmp3217:
    00000947: 	movq	%r15, -0x58(%rbp)
    0000094b: 	movb	$0x0, (%rax,%r15)
    00000950: 	movabsq	$0x3fffffffffffffff, %rax
    0000095a: 	subq	-0x58(%rbp), %rax
    0000095e: 	cmpq	$0x10, %rax
    00000962: 	jbe	.Ltmp3148 # Offset: 2402
    00000968: 	movq	-0xf8(%rbp), %rdi
    0000096f: 	movl	$0x11, %edx
    00000974: 	leaq	DATAat0x3728a(%rip), %rsi
    0000097b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2427
    00000980: 	movq	-0xf8(%rbp), %r9
    00000987: 	movq	%r13, %rdx
    0000098a: 	movq	%r12, %rsi
    0000098d: 	movq	%r14, %rdi
    00000990: 	movq	-0x100(%rbp), %rcx
    00000997: 	leaq	_Z23interleave3to3_version2IfEvPT_PKS0_S3_S3_i(%rip), %r8
    0000099e: 	callq	"_Z19test_interleave3to3IfPFvPfPKfS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2462
    000009a3: 	movq	-0x60(%rbp), %rdi
    000009a7: 	cmpq	%rbx, %rdi
    000009aa: 	je	.Ltmp3149 # Offset: 2474
    000009ac: 	movq	-0x50(%rbp), %rax
    000009b0: 	leaq	0x1(%rax), %rsi
    000009b4: 	callq	_ZdlPvm@PLT # Offset: 2484
.Ltmp3149:
    000009b9: 	movq	-0xf8(%rbp), %r15
    000009c0: 	movq	-0x108(%rbp), %rsi
    000009c7: 	leaq	DATAat0x3729c(%rip), %rdx
    000009ce: 	movq	%r15, %rdi
    000009d1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2513
    000009d6: 	movq	-0x100(%rbp), %rcx
    000009dd: 	movq	%r15, %r9
    000009e0: 	movq	%r13, %rdx
    000009e3: 	movq	%r12, %rsi
    000009e6: 	leaq	_Z23interleave3to3_version3IfEvPT_PKS0_S3_S3_i(%rip), %r8
    000009ed: 	movq	%r14, %rdi
    000009f0: 	callq	"_Z19test_interleave3to3IfPFvPfPKfS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2544
    000009f5: 	movq	-0x60(%rbp), %rdi
    000009f9: 	cmpq	%rbx, %rdi
    000009fc: 	je	.Ltmp3150 # Offset: 2556
    000009fe: 	movq	-0x50(%rbp), %rax
    00000a02: 	leaq	0x1(%rax), %rsi
    00000a06: 	callq	_ZdlPvm@PLT # Offset: 2566
.Ltmp3150:
    00000a0b: 	movq	-0xe0(%rbp), %rax
    00000a12: 	movq	-0xd8(%rbp), %r15
    00000a19: 	movq	%rbx, -0x60(%rbp)
    00000a1d: 	movq	%rax, %rcx
    00000a20: 	movq	%rax, -0x140(%rbp)
    00000a27: 	addq	%r15, %rcx
    00000a2a: 	je	.Ltmp3151 # Offset: 2602
    00000a2c: 	testq	%rax, %rax
    00000a2f: 	je	.Ltmp3152 # Offset: 2607
.Ltmp3151:
    00000a35: 	movq	%r15, -0xe8(%rbp)
    00000a3c: 	cmpq	$0xf, %r15
    00000a40: 	ja	.Ltmp3153 # Offset: 2624
    00000a46: 	cmpq	$0x1, %r15
    00000a4a: 	jne	.Ltmp3154 # Offset: 2634
    00000a50: 	movq	-0x140(%rbp), %rax
    00000a57: 	movzbl	(%rax), %eax
    00000a5a: 	movb	%al, -0x50(%rbp)
    00000a5d: 	movq	%rbx, %rax
.Ltmp3213:
    00000a60: 	movq	%r15, -0x58(%rbp)
    00000a64: 	movb	$0x0, (%rax,%r15)
    00000a69: 	movabsq	$0x3fffffffffffffff, %rax
    00000a73: 	subq	-0x58(%rbp), %rax
    00000a77: 	cmpq	$0x10, %rax
    00000a7b: 	jbe	.Ltmp3155 # Offset: 2683
    00000a81: 	movq	-0xf8(%rbp), %rdi
    00000a88: 	movl	$0x11, %edx
    00000a8d: 	leaq	DATAat0x372ae(%rip), %rsi
    00000a94: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2708
    00000a99: 	movq	-0xf8(%rbp), %r9
    00000aa0: 	movq	%r13, %rdx
    00000aa3: 	movq	%r12, %rsi
    00000aa6: 	movq	%r14, %rdi
    00000aa9: 	movq	-0x100(%rbp), %rcx
    00000ab0: 	leaq	_Z23interleave3to3_version4IfEvPT_PKS0_S3_S3_i(%rip), %r8
    00000ab7: 	callq	"_Z19test_interleave3to3IfPFvPfPKfS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2743
    00000abc: 	movq	-0x60(%rbp), %rdi
    00000ac0: 	cmpq	%rbx, %rdi
    00000ac3: 	je	.Ltmp3156 # Offset: 2755
    00000ac5: 	movq	-0x50(%rbp), %rax
    00000ac9: 	leaq	0x1(%rax), %rsi
    00000acd: 	callq	_ZdlPvm@PLT # Offset: 2765
.Ltmp3156:
    00000ad2: 	movq	-0xf8(%rbp), %r15
    00000ad9: 	movq	-0x108(%rbp), %rsi
    00000ae0: 	leaq	DATAat0x372c0(%rip), %rdx
    00000ae7: 	movq	%r15, %rdi
    00000aea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2794
    00000aef: 	movq	-0x100(%rbp), %rcx
    00000af6: 	movq	%r15, %r9
    00000af9: 	movq	%r13, %rdx
    00000afc: 	movq	%r12, %rsi
    00000aff: 	leaq	_Z23interleave3to3_version5IfEvPT_PKS0_S3_S3_i(%rip), %r8
    00000b06: 	movq	%r14, %rdi
    00000b09: 	callq	"_Z19test_interleave3to3IfPFvPfPKfS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2825
    00000b0e: 	movq	-0x60(%rbp), %rdi
    00000b12: 	cmpq	%rbx, %rdi
    00000b15: 	je	.Ltmp3157 # Offset: 2837
    00000b17: 	movq	-0x50(%rbp), %rax
    00000b1b: 	leaq	0x1(%rax), %rsi
    00000b1f: 	callq	_ZdlPvm@PLT # Offset: 2847
.Ltmp3157:
    00000b24: 	movq	-0x108(%rbp), %r15
    00000b2b: 	leaq	-0xa0(%rbp), %rdi
    00000b32: 	leaq	DATAat0x372d2(%rip), %rdx
    00000b39: 	movq	%r15, %rsi
    00000b3c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2876
    00000b41: 	movl	iterations(%rip), %edx
    00000b47: 	xorl	%r8d, %r8d
    00000b4a: 	xorl	%ecx, %ecx
    00000b4c: 	movl	$0x13880, %esi
    00000b51: 	movq	-0xa0(%rbp), %rdi
    00000b58: 	callq	_Z9summarizePKciiii # Offset: 2904
    00000b5d: 	movl	-0x118(%rbp), %ecx
    00000b63: 	movq	%r15, %rsi
    00000b66: 	movq	-0xf8(%rbp), %r15
    00000b6d: 	leaq	DATAat0x372e2(%rip), %rdx
    00000b74: 	movl	%ecx, %eax
    00000b76: 	movq	%r15, %rdi
    00000b79: 	shrl	$0x1f, %eax
    00000b7c: 	addl	%ecx, %eax
    00000b7e: 	sarl	%eax
    00000b80: 	movl	%eax, -0x140(%rbp)
    00000b86: 	movl	%eax, iterations(%rip)
    00000b8c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2956
    00000b91: 	subq	$0x8, %rsp
    00000b95: 	movq	%r13, %rdx
    00000b98: 	movq	%r12, %rsi
    00000b9b: 	movq	%r14, %rdi
    00000b9e: 	pushq	%r15
    00000ba0: 	movq	-0x110(%rbp), %r8
    00000ba7: 	leaq	_Z23interleave3to4_version1IfEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000bae: 	movq	-0x100(%rbp), %rcx
    00000bb5: 	callq	"_Z19test_interleave3to4IfPFvPffPKfS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2997
    00000bba: 	movq	-0x60(%rbp), %rdi
    00000bbe: 	popq	%rcx
    00000bbf: 	popq	%rsi
    00000bc0: 	cmpq	%rbx, %rdi
    00000bc3: 	je	.Ltmp3158 # Offset: 3011
    00000bc5: 	movq	-0x50(%rbp), %rax
    00000bc9: 	leaq	0x1(%rax), %rsi
    00000bcd: 	callq	_ZdlPvm@PLT # Offset: 3021
.Ltmp3158:
    00000bd2: 	movq	-0xf8(%rbp), %r15
    00000bd9: 	movq	-0x108(%rbp), %rsi
    00000be0: 	leaq	DATAat0x372f4(%rip), %rdx
    00000be7: 	movq	%r15, %rdi
    00000bea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3050
    00000bef: 	subq	$0x8, %rsp
    00000bf3: 	movq	%r13, %rdx
    00000bf6: 	movq	%r12, %rsi
    00000bf9: 	movq	%r14, %rdi
    00000bfc: 	pushq	%r15
    00000bfe: 	movq	-0x110(%rbp), %r8
    00000c05: 	leaq	_Z23interleave3to4_version2IfEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000c0c: 	movq	-0x100(%rbp), %rcx
    00000c13: 	callq	"_Z19test_interleave3to4IfPFvPffPKfS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3091
    00000c18: 	movq	-0x60(%rbp), %rdi
    00000c1c: 	popq	%rax
    00000c1d: 	popq	%rdx
    00000c1e: 	cmpq	%rbx, %rdi
    00000c21: 	je	.Ltmp3159 # Offset: 3105
    00000c23: 	movq	-0x50(%rbp), %rax
    00000c27: 	leaq	0x1(%rax), %rsi
    00000c2b: 	callq	_ZdlPvm@PLT # Offset: 3115
.Ltmp3159:
    00000c30: 	movq	-0xe0(%rbp), %rax
    00000c37: 	movq	-0xd8(%rbp), %r15
    00000c3e: 	movq	%rbx, -0x60(%rbp)
    00000c42: 	movq	%rax, %rcx
    00000c45: 	movq	%rax, -0x148(%rbp)
    00000c4c: 	addq	%r15, %rcx
    00000c4f: 	je	.Ltmp3160 # Offset: 3151
    00000c51: 	testq	%rax, %rax
    00000c54: 	je	.Ltmp3161 # Offset: 3156
.Ltmp3160:
    00000c5a: 	movq	%r15, -0xe8(%rbp)
    00000c61: 	cmpq	$0xf, %r15
    00000c65: 	ja	.Ltmp3162 # Offset: 3173
    00000c6b: 	cmpq	$0x1, %r15
    00000c6f: 	jne	.Ltmp3163 # Offset: 3183
    00000c75: 	movq	-0x148(%rbp), %rax
    00000c7c: 	movzbl	(%rax), %eax
    00000c7f: 	movb	%al, -0x50(%rbp)
    00000c82: 	movq	%rbx, %rax
.Ltmp3211:
    00000c85: 	movq	%r15, -0x58(%rbp)
    00000c89: 	movb	$0x0, (%rax,%r15)
    00000c8e: 	movabsq	$0x3fffffffffffffff, %rax
    00000c98: 	subq	-0x58(%rbp), %rax
    00000c9c: 	cmpq	$0x10, %rax
    00000ca0: 	jbe	.Ltmp3164 # Offset: 3232
    00000ca6: 	movq	-0xf8(%rbp), %rdi
    00000cad: 	movl	$0x11, %edx
    00000cb2: 	leaq	DATAat0x37306(%rip), %rsi
    00000cb9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3257
    00000cbe: 	subq	$0x8, %rsp
    00000cc2: 	pushq	-0xf8(%rbp)
    00000cc8: 	movq	%r13, %rdx
    00000ccb: 	movq	%r12, %rsi
    00000cce: 	movq	-0x110(%rbp), %r8
    00000cd5: 	leaq	_Z23interleave3to4_version3IfEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000cdc: 	movq	%r14, %rdi
    00000cdf: 	movq	-0x100(%rbp), %rcx
    00000ce6: 	callq	"_Z19test_interleave3to4IfPFvPffPKfS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3302
    00000ceb: 	movq	-0x60(%rbp), %rdi
    00000cef: 	popq	%r11
    00000cf1: 	popq	%r15
    00000cf3: 	cmpq	%rbx, %rdi
    00000cf6: 	je	.Ltmp3165 # Offset: 3318
    00000cf8: 	movq	-0x50(%rbp), %rax
    00000cfc: 	leaq	0x1(%rax), %rsi
    00000d00: 	callq	_ZdlPvm@PLT # Offset: 3328
.Ltmp3165:
    00000d05: 	movq	-0xe0(%rbp), %rax
    00000d0c: 	movq	-0xd8(%rbp), %r15
    00000d13: 	movq	%rbx, -0x60(%rbp)
    00000d17: 	movq	%rax, %rcx
    00000d1a: 	movq	%rax, -0x148(%rbp)
    00000d21: 	addq	%r15, %rcx
    00000d24: 	je	.Ltmp3166 # Offset: 3364
    00000d26: 	testq	%rax, %rax
    00000d29: 	je	.Ltmp3167 # Offset: 3369
.Ltmp3166:
    00000d2f: 	movq	%r15, -0xe8(%rbp)
    00000d36: 	cmpq	$0xf, %r15
    00000d3a: 	ja	.Ltmp3168 # Offset: 3386
    00000d40: 	cmpq	$0x1, %r15
    00000d44: 	jne	.Ltmp3169 # Offset: 3396
    00000d4a: 	movq	-0x148(%rbp), %rax
    00000d51: 	movzbl	(%rax), %eax
    00000d54: 	movb	%al, -0x50(%rbp)
    00000d57: 	movq	%rbx, %rax
.Ltmp3209:
    00000d5a: 	movq	%r15, -0x58(%rbp)
    00000d5e: 	movb	$0x0, (%rax,%r15)
    00000d63: 	movabsq	$0x3fffffffffffffff, %rax
    00000d6d: 	subq	-0x58(%rbp), %rax
    00000d71: 	cmpq	$0x10, %rax
    00000d75: 	jbe	.Ltmp3170 # Offset: 3445
    00000d7b: 	movq	-0xf8(%rbp), %rdi
    00000d82: 	movl	$0x11, %edx
    00000d87: 	leaq	DATAat0x37318(%rip), %rsi
    00000d8e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3470
    00000d93: 	subq	$0x8, %rsp
    00000d97: 	pushq	-0xf8(%rbp)
    00000d9d: 	movq	%r13, %rdx
    00000da0: 	movq	%r12, %rsi
    00000da3: 	movq	-0x110(%rbp), %r8
    00000daa: 	leaq	_Z23interleave3to4_version4IfEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000db1: 	movq	%r14, %rdi
    00000db4: 	movq	-0x100(%rbp), %rcx
    00000dbb: 	callq	"_Z19test_interleave3to4IfPFvPffPKfS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3515
    00000dc0: 	movq	-0x60(%rbp), %rdi
    00000dc4: 	popq	%r9
    00000dc6: 	popq	%r10
    00000dc8: 	cmpq	%rbx, %rdi
    00000dcb: 	je	.Ltmp3171 # Offset: 3531
    00000dcd: 	movq	-0x50(%rbp), %rax
    00000dd1: 	leaq	0x1(%rax), %rsi
    00000dd5: 	callq	_ZdlPvm@PLT # Offset: 3541
.Ltmp3171:
    00000dda: 	movq	-0xf8(%rbp), %r15
    00000de1: 	movq	-0x108(%rbp), %rsi
    00000de8: 	leaq	DATAat0x3732a(%rip), %rdx
    00000def: 	movq	%r15, %rdi
    00000df2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3570
    00000df7: 	subq	$0x8, %rsp
    00000dfb: 	movq	%r13, %rdx
    00000dfe: 	movq	%r12, %rsi
    00000e01: 	movq	%r14, %rdi
    00000e04: 	pushq	%r15
    00000e06: 	movq	-0x110(%rbp), %r8
    00000e0d: 	leaq	_Z23interleave3to4_version5IfEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000e14: 	movq	-0x100(%rbp), %rcx
    00000e1b: 	callq	"_Z19test_interleave3to4IfPFvPffPKfS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3611
    00000e20: 	popq	%rdi
    00000e21: 	movq	-0x60(%rbp), %rdi
    00000e25: 	popq	%r8
    00000e27: 	cmpq	%rbx, %rdi
    00000e2a: 	je	.Ltmp3172 # Offset: 3626
    00000e2c: 	movq	-0x50(%rbp), %rax
    00000e30: 	leaq	0x1(%rax), %rsi
    00000e34: 	callq	_ZdlPvm@PLT # Offset: 3636
.Ltmp3172:
    00000e39: 	movq	-0xf8(%rbp), %r15
    00000e40: 	movq	-0x108(%rbp), %rsi
    00000e47: 	leaq	DATAat0x3733c(%rip), %rdx
    00000e4e: 	movq	%r15, %rdi
    00000e51: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3665
    00000e56: 	subq	$0x8, %rsp
    00000e5a: 	movq	%r13, %rdx
    00000e5d: 	movq	%r12, %rsi
    00000e60: 	movq	%r14, %rdi
    00000e63: 	pushq	%r15
    00000e65: 	movq	-0x110(%rbp), %r8
    00000e6c: 	leaq	_Z23interleave3to4_version6IfEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000e73: 	movq	-0x100(%rbp), %rcx
    00000e7a: 	callq	"_Z19test_interleave3to4IfPFvPffPKfS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3706
    00000e7f: 	movq	-0x60(%rbp), %rdi
    00000e83: 	popq	%rcx
    00000e84: 	popq	%rsi
    00000e85: 	cmpq	%rbx, %rdi
    00000e88: 	je	.Ltmp3173 # Offset: 3720
    00000e8a: 	movq	-0x50(%rbp), %rax
    00000e8e: 	leaq	0x1(%rax), %rsi
    00000e92: 	callq	_ZdlPvm@PLT # Offset: 3730
.Ltmp3173:
    00000e97: 	movq	-0x108(%rbp), %r15
    00000e9e: 	leaq	-0x80(%rbp), %rdi
    00000ea2: 	leaq	DATAat0x3734e(%rip), %rdx
    00000ea9: 	movq	%r15, %rsi
    00000eac: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3756
    00000eb1: 	movl	iterations(%rip), %edx
    00000eb7: 	movq	-0x80(%rbp), %rdi
    00000ebb: 	xorl	%r8d, %r8d
    00000ebe: 	xorl	%ecx, %ecx
    00000ec0: 	movl	$0x13880, %esi
    00000ec5: 	callq	_Z9summarizePKciiii # Offset: 3781
    00000eca: 	movq	%r15, %rsi
    00000ecd: 	movq	-0xf8(%rbp), %r15
    00000ed4: 	movl	-0x140(%rbp), %eax
    00000eda: 	leaq	DATAat0x3735e(%rip), %rdx
    00000ee1: 	movq	%r15, %rdi
    00000ee4: 	movl	%eax, iterations(%rip)
    00000eea: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3818
    00000eef: 	subq	$0x8, %rsp
    00000ef3: 	movq	%r13, %rdx
    00000ef6: 	movq	%r12, %rsi
    00000ef9: 	movq	%r14, %rdi
    00000efc: 	pushq	%r15
    00000efe: 	movq	-0x110(%rbp), %r8
    00000f05: 	leaq	_Z23interleave4to4_version1IfEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    00000f0c: 	movq	-0x100(%rbp), %rcx
    00000f13: 	callq	"_Z19test_interleave4to4IfPFvPfPKfS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3859
    00000f18: 	movq	-0x60(%rbp), %rdi
    00000f1c: 	popq	%rax
    00000f1d: 	popq	%rdx
    00000f1e: 	cmpq	%rbx, %rdi
    00000f21: 	je	.Ltmp3174 # Offset: 3873
    00000f23: 	movq	-0x50(%rbp), %rax
    00000f27: 	leaq	0x1(%rax), %rsi
    00000f2b: 	callq	_ZdlPvm@PLT # Offset: 3883
.Ltmp3174:
    00000f30: 	movq	-0xf8(%rbp), %r15
    00000f37: 	movq	-0x108(%rbp), %rsi
    00000f3e: 	leaq	DATAat0x37370(%rip), %rdx
    00000f45: 	movq	%r15, %rdi
    00000f48: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3912
    00000f4d: 	subq	$0x8, %rsp
    00000f51: 	movq	%r13, %rdx
    00000f54: 	movq	%r12, %rsi
    00000f57: 	movq	%r14, %rdi
    00000f5a: 	pushq	%r15
    00000f5c: 	movq	-0x110(%rbp), %r8
    00000f63: 	leaq	_Z23interleave4to4_version2IfEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    00000f6a: 	movq	-0x100(%rbp), %rcx
    00000f71: 	callq	"_Z19test_interleave4to4IfPFvPfPKfS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3953
    00000f76: 	movq	-0x60(%rbp), %rdi
    00000f7a: 	popq	%r11
    00000f7c: 	popq	%r15
    00000f7e: 	cmpq	%rbx, %rdi
    00000f81: 	je	.Ltmp3175 # Offset: 3969
    00000f83: 	movq	-0x50(%rbp), %rax
    00000f87: 	leaq	0x1(%rax), %rsi
    00000f8b: 	callq	_ZdlPvm@PLT # Offset: 3979
.Ltmp3175:
    00000f90: 	movq	-0xe0(%rbp), %rax
    00000f97: 	movq	-0xd8(%rbp), %r15
    00000f9e: 	movq	%rbx, -0x60(%rbp)
    00000fa2: 	movq	%rax, %rcx
    00000fa5: 	movq	%rax, -0x140(%rbp)
    00000fac: 	addq	%r15, %rcx
    00000faf: 	je	.Ltmp3176 # Offset: 4015
    00000fb1: 	testq	%rax, %rax
    00000fb4: 	je	.Ltmp3177 # Offset: 4020
.Ltmp3176:
    00000fba: 	movq	%r15, -0xe8(%rbp)
    00000fc1: 	cmpq	$0xf, %r15
    00000fc5: 	ja	.Ltmp3178 # Offset: 4037
    00000fcb: 	cmpq	$0x1, %r15
    00000fcf: 	jne	.Ltmp3179 # Offset: 4047
    00000fd5: 	movq	-0x140(%rbp), %rax
    00000fdc: 	movzbl	(%rax), %eax
    00000fdf: 	movb	%al, -0x50(%rbp)
    00000fe2: 	movq	%rbx, %rax
.Ltmp3207:
    00000fe5: 	movq	%r15, -0x58(%rbp)
    00000fe9: 	movb	$0x0, (%rax,%r15)
    00000fee: 	movabsq	$0x3fffffffffffffff, %rax
    00000ff8: 	subq	-0x58(%rbp), %rax
    00000ffc: 	cmpq	$0x10, %rax
    00001000: 	jbe	.Ltmp3180 # Offset: 4096
    00001006: 	movq	-0xf8(%rbp), %rdi
    0000100d: 	movl	$0x11, %edx
    00001012: 	leaq	DATAat0x37382(%rip), %rsi
    00001019: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4121
    0000101e: 	subq	$0x8, %rsp
    00001022: 	pushq	-0xf8(%rbp)
    00001028: 	movq	%r13, %rdx
    0000102b: 	movq	%r12, %rsi
    0000102e: 	movq	-0x110(%rbp), %r8
    00001035: 	leaq	_Z23interleave4to4_version3IfEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    0000103c: 	movq	%r14, %rdi
    0000103f: 	movq	-0x100(%rbp), %rcx
    00001046: 	callq	"_Z19test_interleave4to4IfPFvPfPKfS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4166
    0000104b: 	movq	-0x60(%rbp), %rdi
    0000104f: 	popq	%r9
    00001051: 	popq	%r10
    00001053: 	cmpq	%rbx, %rdi
    00001056: 	je	.Ltmp3181 # Offset: 4182
    00001058: 	movq	-0x50(%rbp), %rax
    0000105c: 	leaq	0x1(%rax), %rsi
    00001060: 	callq	_ZdlPvm@PLT # Offset: 4192
.Ltmp3181:
    00001065: 	movq	-0xe0(%rbp), %rax
    0000106c: 	movq	-0xd8(%rbp), %r15
    00001073: 	movq	%rbx, -0x60(%rbp)
    00001077: 	movq	%rax, %rcx
    0000107a: 	movq	%rax, -0x140(%rbp)
    00001081: 	addq	%r15, %rcx
    00001084: 	je	.Ltmp3182 # Offset: 4228
    00001086: 	testq	%rax, %rax
    00001089: 	je	.Ltmp3183 # Offset: 4233
.Ltmp3182:
    0000108f: 	movq	%r15, -0xe8(%rbp)
    00001096: 	cmpq	$0xf, %r15
    0000109a: 	ja	.Ltmp3184 # Offset: 4250
    000010a0: 	cmpq	$0x1, %r15
    000010a4: 	jne	.Ltmp3185 # Offset: 4260
    000010aa: 	movq	-0x140(%rbp), %rax
    000010b1: 	movzbl	(%rax), %eax
    000010b4: 	movb	%al, -0x50(%rbp)
    000010b7: 	movq	%rbx, %rax
.Ltmp3205:
    000010ba: 	movq	%r15, -0x58(%rbp)
    000010be: 	movb	$0x0, (%rax,%r15)
    000010c3: 	movabsq	$0x3fffffffffffffff, %rax
    000010cd: 	subq	-0x58(%rbp), %rax
    000010d1: 	cmpq	$0x10, %rax
    000010d5: 	jbe	.Ltmp3186 # Offset: 4309
    000010db: 	movq	-0xf8(%rbp), %rdi
    000010e2: 	movl	$0x11, %edx
    000010e7: 	leaq	DATAat0x37394(%rip), %rsi
    000010ee: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4334
    000010f3: 	subq	$0x8, %rsp
    000010f7: 	pushq	-0xf8(%rbp)
    000010fd: 	movq	%r13, %rdx
    00001100: 	movq	%r12, %rsi
    00001103: 	movq	-0x110(%rbp), %r8
    0000110a: 	leaq	_Z23interleave4to4_version4IfEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    00001111: 	movq	%r14, %rdi
    00001114: 	movq	-0x100(%rbp), %rcx
    0000111b: 	callq	"_Z19test_interleave4to4IfPFvPfPKfS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4379
    00001120: 	popq	%rdi
    00001121: 	movq	-0x60(%rbp), %rdi
    00001125: 	popq	%r8
    00001127: 	cmpq	%rbx, %rdi
    0000112a: 	je	.Ltmp3187 # Offset: 4394
    0000112c: 	movq	-0x50(%rbp), %rax
    00001130: 	leaq	0x1(%rax), %rsi
    00001134: 	callq	_ZdlPvm@PLT # Offset: 4404
.Ltmp3187:
    00001139: 	movq	-0xf8(%rbp), %r15
    00001140: 	movq	-0x108(%rbp), %rsi
    00001147: 	leaq	DATAat0x373a6(%rip), %rdx
    0000114e: 	movq	%r15, %rdi
    00001151: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4433
    00001156: 	subq	$0x8, %rsp
    0000115a: 	movq	%r13, %rdx
    0000115d: 	movq	%r12, %rsi
    00001160: 	movq	%r14, %rdi
    00001163: 	pushq	%r15
    00001165: 	movq	-0x110(%rbp), %r8
    0000116c: 	leaq	_Z23interleave4to4_version5IfEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    00001173: 	movq	-0x100(%rbp), %rcx
    0000117a: 	callq	"_Z19test_interleave4to4IfPFvPfPKfS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4474
    0000117f: 	movq	-0x60(%rbp), %rdi
    00001183: 	popq	%rcx
    00001184: 	popq	%rsi
    00001185: 	cmpq	%rbx, %rdi
    00001188: 	je	.Ltmp3188 # Offset: 4488
    0000118a: 	movq	-0x50(%rbp), %rax
    0000118e: 	leaq	0x1(%rax), %rsi
    00001192: 	callq	_ZdlPvm@PLT # Offset: 4498
.Ltmp3188:
    00001197: 	movq	-0xf8(%rbp), %r15
    0000119e: 	movq	-0x108(%rbp), %rsi
    000011a5: 	leaq	DATAat0x373b8(%rip), %rdx
    000011ac: 	movq	%r15, %rdi
    000011af: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4527
    000011b4: 	subq	$0x8, %rsp
    000011b8: 	movq	%r13, %rdx
    000011bb: 	movq	%r12, %rsi
    000011be: 	movq	%r14, %rdi
    000011c1: 	pushq	%r15
    000011c3: 	movq	-0x110(%rbp), %r8
    000011ca: 	leaq	_Z23interleave4to4_version6IfEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    000011d1: 	movq	-0x100(%rbp), %rcx
    000011d8: 	callq	"_Z19test_interleave4to4IfPFvPfPKfS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4568
    000011dd: 	movq	-0x60(%rbp), %rdi
    000011e1: 	popq	%rax
    000011e2: 	popq	%rdx
    000011e3: 	cmpq	%rbx, %rdi
    000011e6: 	je	.Ltmp3189 # Offset: 4582
    000011e8: 	movq	-0x50(%rbp), %rax
    000011ec: 	leaq	0x1(%rax), %rsi
    000011f0: 	callq	_ZdlPvm@PLT # Offset: 4592
.Ltmp3189:
    000011f5: 	movq	-0xe0(%rbp), %rax
    000011fc: 	movq	-0xd8(%rbp), %r15
    00001203: 	movq	%rbx, -0x60(%rbp)
    00001207: 	movq	%rax, %rcx
    0000120a: 	movq	%rax, -0x108(%rbp)
    00001211: 	addq	%r15, %rcx
    00001214: 	je	.Ltmp3190 # Offset: 4628
    00001216: 	testq	%rax, %rax
    00001219: 	je	.Ltmp3191 # Offset: 4633
.Ltmp3190:
    0000121f: 	movq	%r15, -0xe8(%rbp)
    00001226: 	cmpq	$0xf, %r15
    0000122a: 	ja	.Ltmp3192 # Offset: 4650
    00001230: 	cmpq	$0x1, %r15
    00001234: 	jne	.Ltmp3193 # Offset: 4660
    0000123a: 	movq	-0x108(%rbp), %rax
    00001241: 	movzbl	(%rax), %eax
    00001244: 	movb	%al, -0x50(%rbp)
    00001247: 	movq	%rbx, %rax
.Ltmp3215:
    0000124a: 	movq	%r15, -0x58(%rbp)
    0000124e: 	movb	$0x0, (%rax,%r15)
    00001253: 	movabsq	$0x3fffffffffffffff, %rax
    0000125d: 	subq	-0x58(%rbp), %rax
    00001261: 	cmpq	$0xe, %rax
    00001265: 	jbe	.Ltmp3194 # Offset: 4709
    0000126b: 	movq	-0xf8(%rbp), %rdi
    00001272: 	movl	$0xf, %edx
    00001277: 	leaq	DATAat0x373ca(%rip), %rsi
    0000127e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4734
    00001283: 	movl	iterations(%rip), %edx
    00001289: 	movq	-0x60(%rbp), %rdi
    0000128d: 	xorl	%r8d, %r8d
    00001290: 	xorl	%ecx, %ecx
    00001292: 	movl	$0x13880, %esi
    00001297: 	callq	_Z9summarizePKciiii # Offset: 4759
    0000129c: 	movl	-0x118(%rbp), %eax
    000012a2: 	movq	-0x60(%rbp), %rdi
    000012a6: 	movl	%eax, iterations(%rip)
    000012ac: 	cmpq	%rbx, %rdi
    000012af: 	je	.Ltmp3195 # Offset: 4783
    000012b1: 	movq	-0x50(%rbp), %rax
    000012b5: 	leaq	0x1(%rax), %rsi
    000012b9: 	callq	_ZdlPvm@PLT # Offset: 4793
.Ltmp3195:
    000012be: 	movq	-0x80(%rbp), %rdi
    000012c2: 	leaq	-0x70(%rbp), %rax
    000012c6: 	cmpq	%rax, %rdi
    000012c9: 	je	.Ltmp3196 # Offset: 4809
    000012cb: 	movq	-0x70(%rbp), %rax
    000012cf: 	leaq	0x1(%rax), %rsi
    000012d3: 	callq	_ZdlPvm@PLT # Offset: 4819
.Ltmp3196:
    000012d8: 	movq	-0xa0(%rbp), %rdi
    000012df: 	leaq	-0x90(%rbp), %rax
    000012e6: 	cmpq	%rax, %rdi
    000012e9: 	je	.Ltmp3197 # Offset: 4841
    000012eb: 	movq	-0x90(%rbp), %rax
    000012f2: 	leaq	0x1(%rax), %rsi
    000012f6: 	callq	_ZdlPvm@PLT # Offset: 4854
.Ltmp3197:
    000012fb: 	movq	-0xc0(%rbp), %rdi
    00001302: 	cmpq	-0x130(%rbp), %rdi
    00001309: 	je	.Ltmp3198 # Offset: 4873
    0000130b: 	movq	-0xb0(%rbp), %rax
    00001312: 	leaq	0x1(%rax), %rsi
    00001316: 	callq	_ZdlPvm@PLT # Offset: 4886
.Ltmp3198:
    0000131b: 	movl	$0x4, %esi
    00001320: 	movq	%r14, %rdi
    00001323: 	callq	_ZdlPvm@PLT # Offset: 4899
    00001328: 	movq	-0x110(%rbp), %rdi
    0000132f: 	movl	$0x4, %esi
    00001334: 	callq	_ZdlPvm@PLT # Offset: 4916
    00001339: 	movq	-0x100(%rbp), %rdi
    00001340: 	movl	$0x4, %esi
    00001345: 	callq	_ZdlPvm@PLT # Offset: 4933
    0000134a: 	movl	$0x4, %esi
    0000134f: 	movq	%r13, %rdi
    00001352: 	callq	_ZdlPvm@PLT # Offset: 4946
    00001357: 	movq	%r12, %rdi
    0000135a: 	movl	$0x4, %esi
    0000135f: 	callq	_ZdlPvm@PLT # Offset: 4959
    00001364: 	movq	-0xe0(%rbp), %rdi
    0000136b: 	cmpq	-0x120(%rbp), %rdi
    00001372: 	je	.Ltmp3199 # Offset: 4978
    00001374: 	movq	-0xd0(%rbp), %rax
    0000137b: 	leaq	0x1(%rax), %rsi
    0000137f: 	callq	_ZdlPvm@PLT # Offset: 4991
.Ltmp3199:
    00001384: 	movq	-0x38(%rbp), %rax
    00001388: 	subq	%fs:0x28, %rax
    00001391: 	jne	.Ltmp3200 # Offset: 5009
    00001397: 	leaq	-0x28(%rbp), %rsp
    0000139b: 	popq	%rbx
    0000139c: 	popq	%r12
    0000139e: 	popq	%r13
    000013a0: 	popq	%r14
    000013a2: 	popq	%r15
    000013a4: 	popq	%rbp
    000013a5: 	retq # Offset: 5029
    000013a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3103:
    000013b0: 	addq	$0x20, -0xf8(%rbp)
    000013b8: 	movq	-0xf8(%rbp), %rax
    000013bf: 	cmpq	%rbx, %rax
    000013c2: 	jne	.Ltmp3104 # Offset: 5058
    000013c8: 	addq	$0x8, %r13
    000013cc: 	cmpq	%r13, %r15
    000013cf: 	ja	.Ltmp3105 # Offset: 5071
    000013d5: 	jmp	.Ltmp3201 # Offset: 5077
.Ltmp3123:
    000013da: 	testq	%r15, %r15
    000013dd: 	jne	.Ltmp3202 # Offset: 5085
    000013e3: 	movq	%rbx, %rax
    000013e6: 	jmp	.Ltmp3203 # Offset: 5094
.Ltmp3185:
    000013eb: 	testq	%r15, %r15
    000013ee: 	jne	.Ltmp3204 # Offset: 5102
    000013f4: 	movq	%rbx, %rax
    000013f7: 	jmp	.Ltmp3205 # Offset: 5111
.Ltmp3179:
    000013fc: 	testq	%r15, %r15
    000013ff: 	jne	.Ltmp3206 # Offset: 5119
    00001405: 	movq	%rbx, %rax
    00001408: 	jmp	.Ltmp3207 # Offset: 5128
.Ltmp3169:
    0000140d: 	testq	%r15, %r15
    00001410: 	jne	.Ltmp3208 # Offset: 5136
    00001416: 	movq	%rbx, %rax
    00001419: 	jmp	.Ltmp3209 # Offset: 5145
.Ltmp3163:
    0000141e: 	testq	%r15, %r15
    00001421: 	jne	.Ltmp3210 # Offset: 5153
    00001427: 	movq	%rbx, %rax
    0000142a: 	jmp	.Ltmp3211 # Offset: 5162
.Ltmp3154:
    0000142f: 	testq	%r15, %r15
    00001432: 	jne	.Ltmp3212 # Offset: 5170
    00001438: 	movq	%rbx, %rax
    0000143b: 	jmp	.Ltmp3213 # Offset: 5179
.Ltmp3193:
    00001440: 	testq	%r15, %r15
    00001443: 	jne	.Ltmp3214 # Offset: 5187
    00001449: 	movq	%rbx, %rax
    0000144c: 	jmp	.Ltmp3215 # Offset: 5196
.Ltmp3147:
    00001451: 	testq	%r15, %r15
    00001454: 	jne	.Ltmp3216 # Offset: 5204
    0000145a: 	movq	%rbx, %rax
    0000145d: 	jmp	.Ltmp3217 # Offset: 5213
.Ltmp3141:
    00001462: 	testq	%r15, %r15
    00001465: 	jne	.Ltmp3218 # Offset: 5221
    0000146b: 	movq	-0x130(%rbp), %rax
    00001472: 	jmp	.Ltmp3219 # Offset: 5234
.Ltmp3135:
    00001477: 	testq	%r15, %r15
    0000147a: 	jne	.Ltmp3220 # Offset: 5242
    00001480: 	movq	%rbx, %rax
    00001483: 	jmp	.Ltmp3221 # Offset: 5251
.Ltmp3140:
    00001488: 	leaq	-0xe8(%rbp), %rsi
    0000148f: 	leaq	-0xc0(%rbp), %rdi
    00001496: 	xorl	%edx, %edx
    00001498: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5272
    0000149d: 	movq	%rax, -0xc0(%rbp)
    000014a4: 	movq	%rax, %rdi
    000014a7: 	movq	-0xe8(%rbp), %rax
    000014ae: 	movq	%rax, -0xb0(%rbp)
.Ltmp3233:
    000014b5: 	movq	-0x140(%rbp), %rsi
    000014bc: 	movq	%r15, %rdx
    000014bf: 	callq	memcpy@PLT # Offset: 5311
    000014c4: 	movq	-0xe8(%rbp), %r15
    000014cb: 	movq	-0xc0(%rbp), %rax
    000014d2: 	jmp	.Ltmp3219 # Offset: 5330
.Ltmp3153:
    000014d7: 	movq	-0xf8(%rbp), %rdi
    000014de: 	leaq	-0xe8(%rbp), %rsi
    000014e5: 	xorl	%edx, %edx
    000014e7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5351
    000014ec: 	movq	%rax, -0x60(%rbp)
    000014f0: 	movq	%rax, %rdi
    000014f3: 	movq	-0xe8(%rbp), %rax
    000014fa: 	movq	%rax, -0x50(%rbp)
.Ltmp3230:
    000014fe: 	movq	-0x140(%rbp), %rsi
    00001505: 	movq	%r15, %rdx
    00001508: 	callq	memcpy@PLT # Offset: 5384
    0000150d: 	movq	-0xe8(%rbp), %r15
    00001514: 	movq	-0x60(%rbp), %rax
    00001518: 	jmp	.Ltmp3213 # Offset: 5400
.Ltmp3146:
    0000151d: 	movq	-0xf8(%rbp), %rdi
    00001524: 	leaq	-0xe8(%rbp), %rsi
    0000152b: 	xorl	%edx, %edx
    0000152d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5421
    00001532: 	movq	%rax, -0x60(%rbp)
    00001536: 	movq	%rax, %rdi
    00001539: 	movq	-0xe8(%rbp), %rax
    00001540: 	movq	%rax, -0x50(%rbp)
.Ltmp3232:
    00001544: 	movq	-0x140(%rbp), %rsi
    0000154b: 	movq	%r15, %rdx
    0000154e: 	callq	memcpy@PLT # Offset: 5454
    00001553: 	movq	-0xe8(%rbp), %r15
    0000155a: 	movq	-0x60(%rbp), %rax
    0000155e: 	jmp	.Ltmp3217 # Offset: 5470
.Ltmp3134:
    00001563: 	movq	-0xf8(%rbp), %rdi
    0000156a: 	leaq	-0xe8(%rbp), %rsi
    00001571: 	xorl	%edx, %edx
    00001573: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5491
    00001578: 	movq	%rax, -0x60(%rbp)
    0000157c: 	movq	%rax, %rdi
    0000157f: 	movq	-0xe8(%rbp), %rax
    00001586: 	movq	%rax, -0x50(%rbp)
.Ltmp3234:
    0000158a: 	movq	-0x130(%rbp), %rsi
    00001591: 	movq	%r15, %rdx
    00001594: 	callq	memcpy@PLT # Offset: 5524
    00001599: 	movq	-0xe8(%rbp), %r15
    000015a0: 	movq	-0x60(%rbp), %rax
    000015a4: 	jmp	.Ltmp3221 # Offset: 5540
.Ltmp3122:
    000015a9: 	leaq	-0xe8(%rbp), %rsi
    000015b0: 	leaq	-0x60(%rbp), %rdi
    000015b4: 	xorl	%edx, %edx
    000015b6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5558
    000015bb: 	movq	%rax, -0x60(%rbp)
    000015bf: 	movq	%rax, %rdi
    000015c2: 	movq	-0xe8(%rbp), %rax
    000015c9: 	movq	%rax, -0x50(%rbp)
.Ltmp3225:
    000015cd: 	movq	-0xf8(%rbp), %rsi
    000015d4: 	movq	%r15, %rdx
    000015d7: 	callq	memcpy@PLT # Offset: 5591
    000015dc: 	movq	-0xe8(%rbp), %r15
    000015e3: 	movq	-0x60(%rbp), %rax
    000015e7: 	jmp	.Ltmp3203 # Offset: 5607
.Ltmp3192:
    000015ec: 	movq	-0xf8(%rbp), %rdi
    000015f3: 	leaq	-0xe8(%rbp), %rsi
    000015fa: 	xorl	%edx, %edx
    000015fc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5628
    00001601: 	movq	%rax, -0x60(%rbp)
    00001605: 	movq	%rax, %rdi
    00001608: 	movq	-0xe8(%rbp), %rax
    0000160f: 	movq	%rax, -0x50(%rbp)
.Ltmp3231:
    00001613: 	movq	-0x108(%rbp), %rsi
    0000161a: 	movq	%r15, %rdx
    0000161d: 	callq	memcpy@PLT # Offset: 5661
    00001622: 	movq	-0xe8(%rbp), %r15
    00001629: 	movq	-0x60(%rbp), %rax
    0000162d: 	jmp	.Ltmp3215 # Offset: 5677
.Ltmp3184:
    00001632: 	movq	-0xf8(%rbp), %rdi
    00001639: 	leaq	-0xe8(%rbp), %rsi
    00001640: 	xorl	%edx, %edx
    00001642: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5698
    00001647: 	movq	%rax, -0x60(%rbp)
    0000164b: 	movq	%rax, %rdi
    0000164e: 	movq	-0xe8(%rbp), %rax
    00001655: 	movq	%rax, -0x50(%rbp)
.Ltmp3226:
    00001659: 	movq	-0x140(%rbp), %rsi
    00001660: 	movq	%r15, %rdx
    00001663: 	callq	memcpy@PLT # Offset: 5731
    00001668: 	movq	-0xe8(%rbp), %r15
    0000166f: 	movq	-0x60(%rbp), %rax
    00001673: 	jmp	.Ltmp3205 # Offset: 5747
.Ltmp3178:
    00001678: 	movq	-0xf8(%rbp), %rdi
    0000167f: 	leaq	-0xe8(%rbp), %rsi
    00001686: 	xorl	%edx, %edx
    00001688: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5768
    0000168d: 	movq	%rax, -0x60(%rbp)
    00001691: 	movq	%rax, %rdi
    00001694: 	movq	-0xe8(%rbp), %rax
    0000169b: 	movq	%rax, -0x50(%rbp)
.Ltmp3227:
    0000169f: 	movq	-0x140(%rbp), %rsi
    000016a6: 	movq	%r15, %rdx
    000016a9: 	callq	memcpy@PLT # Offset: 5801
    000016ae: 	movq	-0xe8(%rbp), %r15
    000016b5: 	movq	-0x60(%rbp), %rax
    000016b9: 	jmp	.Ltmp3207 # Offset: 5817
.Ltmp3168:
    000016be: 	movq	-0xf8(%rbp), %rdi
    000016c5: 	leaq	-0xe8(%rbp), %rsi
    000016cc: 	xorl	%edx, %edx
    000016ce: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5838
    000016d3: 	movq	%rax, -0x60(%rbp)
    000016d7: 	movq	%rax, %rdi
    000016da: 	movq	-0xe8(%rbp), %rax
    000016e1: 	movq	%rax, -0x50(%rbp)
.Ltmp3228:
    000016e5: 	movq	-0x148(%rbp), %rsi
    000016ec: 	movq	%r15, %rdx
    000016ef: 	callq	memcpy@PLT # Offset: 5871
    000016f4: 	movq	-0xe8(%rbp), %r15
    000016fb: 	movq	-0x60(%rbp), %rax
    000016ff: 	jmp	.Ltmp3209 # Offset: 5887
.Ltmp3162:
    00001704: 	movq	-0xf8(%rbp), %rdi
    0000170b: 	leaq	-0xe8(%rbp), %rsi
    00001712: 	xorl	%edx, %edx
    00001714: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5908
    00001719: 	movq	%rax, -0x60(%rbp)
    0000171d: 	movq	%rax, %rdi
    00001720: 	movq	-0xe8(%rbp), %rax
    00001727: 	movq	%rax, -0x50(%rbp)
.Ltmp3229:
    0000172b: 	movq	-0x148(%rbp), %rsi
    00001732: 	movq	%r15, %rdx
    00001735: 	callq	memcpy@PLT # Offset: 5941
    0000173a: 	movq	-0xe8(%rbp), %r15
    00001741: 	movq	-0x60(%rbp), %rax
    00001745: 	jmp	.Ltmp3211 # Offset: 5957
.Ltmp3106:
    0000174a: 	movq	-0x108(%rbp), %rbx
    00001751: 	cmpq	%rbx, %rsi
    00001754: 	je	.Ltmp3111 # Offset: 5972
    0000175a: 	movq	%rsi, %rbx
.Ltmp3224:
    0000175d: 	movq	(%rbx), %rdi
    00001760: 	leaq	0x10(%rbx), %rax
    00001764: 	cmpq	%rax, %rdi
    00001767: 	je	.Ltmp3222 # Offset: 5991
.Ltmp3223:
    00001769: 	movq	0x10(%rbx), %rax
    0000176d: 	addq	$0x20, %rbx
    00001771: 	leaq	0x1(%rax), %rsi
    00001775: 	movq	%rax, -0xf8(%rbp)
    0000177c: 	callq	_ZdlPvm@PLT # Offset: 6012
    00001781: 	cmpq	%rbx, -0x108(%rbp)
    00001788: 	je	.Ltmp3111 # Offset: 6024
    0000178e: 	movq	(%rbx), %rdi
    00001791: 	leaq	0x10(%rbx), %rax
    00001795: 	cmpq	%rax, %rdi
    00001798: 	jne	.Ltmp3223 # Offset: 6040
.Ltmp3222:
    0000179a: 	movq	%rbx, %rax
    0000179d: 	addq	$0x20, %rax
    000017a1: 	movq	%rax, %rbx
    000017a4: 	cmpq	%rax, -0x108(%rbp)
    000017ab: 	jne	.Ltmp3224 # Offset: 6059
    000017ad: 	jmp	.Ltmp3111 # Offset: 6061
.Ltmp3124:
    000017b2: 	leaq	DATAat0x37182(%rip), %rdi
    000017b9: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6073
.Ltmp3133:
    000017be: 	leaq	DATAat0x37158(%rip), %rdi
    000017c5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6085
.Ltmp3136:
    000017ca: 	leaq	DATAat0x37182(%rip), %rdi
    000017d1: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6097
.Ltmp3139:
    000017d6: 	leaq	DATAat0x37158(%rip), %rdi
    000017dd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6109
.Ltmp3142:
    000017e2: 	leaq	DATAat0x37182(%rip), %rdi
    000017e9: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6121
.Ltmp3145:
    000017ee: 	leaq	DATAat0x37158(%rip), %rdi
    000017f5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6133
.Ltmp3148:
    000017fa: 	leaq	DATAat0x37182(%rip), %rdi
    00001801: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6145
.Ltmp3152:
    00001806: 	leaq	DATAat0x37158(%rip), %rdi
    0000180d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6157
.Ltmp3155:
    00001812: 	leaq	DATAat0x37182(%rip), %rdi
    00001819: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6169
.Ltmp3161:
    0000181e: 	leaq	DATAat0x37158(%rip), %rdi
    00001825: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6181
.Ltmp3164:
    0000182a: 	leaq	DATAat0x37182(%rip), %rdi
    00001831: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6193
.Ltmp3167:
    00001836: 	leaq	DATAat0x37158(%rip), %rdi
    0000183d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6205
.Ltmp3170:
    00001842: 	leaq	DATAat0x37182(%rip), %rdi
    00001849: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6217
.Ltmp3177:
    0000184e: 	leaq	DATAat0x37158(%rip), %rdi
    00001855: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6229
.Ltmp3180:
    0000185a: 	leaq	DATAat0x37182(%rip), %rdi
    00001861: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6241
.Ltmp3183:
    00001866: 	leaq	DATAat0x37158(%rip), %rdi
    0000186d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6253
.Ltmp3186:
    00001872: 	leaq	DATAat0x37182(%rip), %rdi
    00001879: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6265
.Ltmp3191:
    0000187e: 	leaq	DATAat0x37158(%rip), %rdi
    00001885: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6277
.Ltmp3194:
    0000188a: 	leaq	DATAat0x37182(%rip), %rdi
    00001891: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6289
.Ltmp3200:
    00001896: 	callq	__stack_chk_fail@PLT # Offset: 6294
.Ltmp3202:
    0000189b: 	movq	%rbx, %rdi
    0000189e: 	jmp	.Ltmp3225 # Offset: 6302
.Ltmp3204:
    000018a3: 	movq	%rbx, %rdi
    000018a6: 	jmp	.Ltmp3226 # Offset: 6310
.Ltmp3206:
    000018ab: 	movq	%rbx, %rdi
    000018ae: 	jmp	.Ltmp3227 # Offset: 6318
.Ltmp3208:
    000018b3: 	movq	%rbx, %rdi
    000018b6: 	jmp	.Ltmp3228 # Offset: 6326
.Ltmp3210:
    000018bb: 	movq	%rbx, %rdi
    000018be: 	jmp	.Ltmp3229 # Offset: 6334
.Ltmp3212:
    000018c3: 	movq	%rbx, %rdi
    000018c6: 	jmp	.Ltmp3230 # Offset: 6342
.Ltmp3214:
    000018cb: 	movq	%rbx, %rdi
    000018ce: 	jmp	.Ltmp3231 # Offset: 6350
.Ltmp3216:
    000018d3: 	movq	%rbx, %rdi
    000018d6: 	jmp	.Ltmp3232 # Offset: 6358
.Ltmp3218:
    000018db: 	movq	-0x130(%rbp), %rdi
    000018e2: 	jmp	.Ltmp3233 # Offset: 6370
.Ltmp3220:
    000018e7: 	movq	%rbx, %rdi
    000018ea: 	jmp	.Ltmp3234 # Offset: 6378
.Ltmp3121:
    000018ef: 	leaq	DATAat0x37158(%rip), %rdi
    000018f6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6390
    000018fb: 	endbr64
    000018ff: 	movq	%rax, %rbx
    00001902: 	jmp	.Ltmp3235 # Offset: 6402
    00001904: 	endbr64
.Ltmp3238:
    00001908: 	movq	%rax, %r15
    0000190b: 	jmp	.Ltmp3236 # Offset: 6411
    0000190d: 	endbr64
.Ltmp3247:
    00001911: 	movq	%rax, %r15
    00001914: 	jmp	.Ltmp3237 # Offset: 6420
    00001919: 	endbr64
    0000191d: 	jmp	.Ltmp3238 # Offset: 6429
    0000191f: 	endbr64
.Ltmp3257:
    00001923: 	movq	%rax, %r15
    00001926: 	jmp	.Ltmp3239 # Offset: 6438
.Ltmp3236:
    0000192b: 	movq	-0x60(%rbp), %rdi
    0000192f: 	cmpq	%rbx, %rdi
    00001932: 	je	.Ltmp3240 # Offset: 6450
    00001934: 	movq	-0x50(%rbp), %rax
    00001938: 	leaq	0x1(%rax), %rsi
    0000193c: 	callq	_ZdlPvm@PLT # Offset: 6460
.Ltmp3240:
    00001941: 	movq	%r15, %rbx
.Ltmp3235:
    00001944: 	movq	-0xa0(%rbp), %rdi
    0000194b: 	leaq	-0x90(%rbp), %rax
    00001952: 	cmpq	%rax, %rdi
    00001955: 	je	.Ltmp3241 # Offset: 6485
    00001957: 	movq	-0x90(%rbp), %rax
    0000195e: 	leaq	0x1(%rax), %rsi
    00001962: 	callq	_ZdlPvm@PLT # Offset: 6498
.Ltmp3241:
    00001967: 	movq	-0xc0(%rbp), %rdi
    0000196e: 	cmpq	-0x130(%rbp), %rdi
    00001975: 	jne	.Ltmp3242 # Offset: 6517
.Ltmp3245:
    0000197b: 	movl	$0x4, %esi
    00001980: 	movq	%r14, %rdi
    00001983: 	callq	_ZdlPvm@PLT # Offset: 6531
.Ltmp3253:
    00001988: 	movq	-0x110(%rbp), %rdi
    0000198f: 	movl	$0x4, %esi
    00001994: 	callq	_ZdlPvm@PLT # Offset: 6548
.Ltmp3256:
    00001999: 	movq	-0x100(%rbp), %rdi
    000019a0: 	movl	$0x4, %esi
    000019a5: 	callq	_ZdlPvm@PLT # Offset: 6565
.Ltmp3248:
    000019aa: 	movl	$0x4, %esi
    000019af: 	movq	%r13, %rdi
    000019b2: 	callq	_ZdlPvm@PLT # Offset: 6578
.Ltmp3254:
    000019b7: 	movl	$0x4, %esi
    000019bc: 	movq	%r12, %rdi
    000019bf: 	callq	_ZdlPvm@PLT # Offset: 6591
.Ltmp3255:
    000019c4: 	movq	-0xe0(%rbp), %rdi
    000019cb: 	cmpq	-0x120(%rbp), %rdi
    000019d2: 	je	.Ltmp3243 # Offset: 6610
    000019d4: 	movq	-0xd0(%rbp), %rax
    000019db: 	leaq	0x1(%rax), %rsi
    000019df: 	callq	_ZdlPvm@PLT # Offset: 6623
.Ltmp3243:
    000019e4: 	movq	%rbx, %rdi
    000019e7: 	callq	_Unwind_Resume@PLT # Offset: 6631
.Ltmp3239:
    000019ec: 	movq	-0x60(%rbp), %rdi
    000019f0: 	cmpq	%rbx, %rdi
    000019f3: 	je	.Ltmp3244 # Offset: 6643
    000019f5: 	movq	-0x50(%rbp), %rax
    000019f9: 	leaq	0x1(%rax), %rsi
    000019fd: 	callq	_ZdlPvm@PLT # Offset: 6653
.Ltmp3244:
    00001a02: 	movq	%r15, %rbx
    00001a05: 	jmp	.Ltmp3245 # Offset: 6661
.Ltmp3237:
    00001a0a: 	movq	-0x60(%rbp), %rdi
    00001a0e: 	cmpq	%rbx, %rdi
    00001a11: 	je	.Ltmp3246 # Offset: 6673
    00001a13: 	movq	-0x50(%rbp), %rax
    00001a17: 	leaq	0x1(%rax), %rsi
    00001a1b: 	callq	_ZdlPvm@PLT # Offset: 6683
.Ltmp3246:
    00001a20: 	movq	%r15, %rbx
    00001a23: 	jmp	.Ltmp3241 # Offset: 6691
.Ltmp3242:
    00001a28: 	movq	-0xb0(%rbp), %rax
    00001a2f: 	leaq	0x1(%rax), %rsi
    00001a33: 	callq	_ZdlPvm@PLT # Offset: 6707
    00001a38: 	jmp	.Ltmp3245 # Offset: 6712
    00001a3d: 	endbr64
    00001a41: 	jmp	.Ltmp3238 # Offset: 6721
    00001a46: 	endbr64
    00001a4a: 	jmp	.Ltmp3247 # Offset: 6730
    00001a4f: 	endbr64
    00001a53: 	jmp	.Ltmp3247 # Offset: 6739
    00001a58: 	endbr64
    00001a5c: 	jmp	.Ltmp3247 # Offset: 6748
    00001a61: 	endbr64
    00001a65: 	jmp	.Ltmp3238 # Offset: 6757
    00001a6a: 	endbr64
    00001a6e: 	jmp	.Ltmp3238 # Offset: 6766
    00001a73: 	endbr64
    00001a77: 	jmp	.Ltmp3238 # Offset: 6775
    00001a7c: 	endbr64
    00001a80: 	jmp	.Ltmp3238 # Offset: 6784
    00001a85: 	endbr64
    00001a89: 	movq	%rax, %rbx
    00001a8c: 	jmp	.Ltmp3248 # Offset: 6796
    00001a91: 	endbr64
.Ltmp3258:
    00001a95: 	movq	%rax, %rbx
    00001a98: 	jmp	.Ltmp3241 # Offset: 6808
    00001a9d: 	endbr64
    00001aa1: 	jmp	.Ltmp3247 # Offset: 6817
    00001aa6: 	endbr64
    00001aaa: 	jmp	.Ltmp3247 # Offset: 6826
    00001aaf: 	endbr64
    00001ab3: 	jmp	.Ltmp3247 # Offset: 6835
    00001ab8: 	endbr64
    00001abc: 	jmp	.Ltmp3238 # Offset: 6844
    00001ac1: 	endbr64
    00001ac5: 	movq	%rax, %rbx
    00001ac8: 	jmp	.Ltmp3249 # Offset: 6856
    00001aca: 	endbr64
.Ltmp3251:
    00001ace: 	movq	%rax, %r15
    00001ad1: 	movq	-0x60(%rbp), %rdi
    00001ad5: 	cmpq	%rbx, %rdi
    00001ad8: 	jne	.Ltmp3250 # Offset: 6872
.Ltmp3252:
    00001ada: 	movq	%r15, %rbx
.Ltmp3249:
    00001add: 	movq	-0x80(%rbp), %rdi
    00001ae1: 	leaq	-0x70(%rbp), %rax
    00001ae5: 	cmpq	%rax, %rdi
    00001ae8: 	je	.Ltmp3235 # Offset: 6888
    00001aee: 	movq	-0x70(%rbp), %rax
    00001af2: 	leaq	0x1(%rax), %rsi
    00001af6: 	callq	_ZdlPvm@PLT # Offset: 6902
    00001afb: 	jmp	.Ltmp3235 # Offset: 6907
    00001b00: 	endbr64
    00001b04: 	jmp	.Ltmp3251 # Offset: 6916
    00001b06: 	endbr64
    00001b0a: 	jmp	.Ltmp3251 # Offset: 6922
    00001b0c: 	endbr64
    00001b10: 	jmp	.Ltmp3251 # Offset: 6928
    00001b12: 	endbr64
    00001b16: 	jmp	.Ltmp3251 # Offset: 6934
    00001b18: 	endbr64
    00001b1c: 	jmp	.Ltmp3251 # Offset: 6940
    00001b1e: 	endbr64
    00001b22: 	jmp	.Ltmp3251 # Offset: 6946
    00001b24: 	endbr64
    00001b28: 	jmp	.Ltmp3251 # Offset: 6952
    00001b2a: 	endbr64
    00001b2e: 	jmp	.Ltmp3251 # Offset: 6958
.Ltmp3250:
    00001b30: 	movq	-0x50(%rbp), %rax
    00001b34: 	leaq	0x1(%rax), %rsi
    00001b38: 	callq	_ZdlPvm@PLT # Offset: 6968
    00001b3d: 	jmp	.Ltmp3252 # Offset: 6973
    00001b3f: 	endbr64
    00001b43: 	jmp	.Ltmp3251 # Offset: 6979
    00001b45: 	endbr64
    00001b49: 	movq	%rax, %rbx
    00001b4c: 	jmp	.Ltmp3253 # Offset: 6988
    00001b51: 	endbr64
    00001b55: 	movq	%rax, %rbx
    00001b58: 	jmp	.Ltmp3254 # Offset: 7000
    00001b5d: 	endbr64
    00001b61: 	movq	%rax, %rbx
    00001b64: 	jmp	.Ltmp3255 # Offset: 7012
    00001b69: 	endbr64
    00001b6d: 	movq	%rax, %rbx
    00001b70: 	jmp	.Ltmp3256 # Offset: 7024
    00001b75: 	endbr64
    00001b79: 	jmp	.Ltmp3257 # Offset: 7033
    00001b7e: 	endbr64
    00001b82: 	jmp	.Ltmp3257 # Offset: 7042
    00001b87: 	endbr64
    00001b8b: 	movq	%rax, %rbx
    00001b8e: 	jmp	.Ltmp3245 # Offset: 7054
    00001b93: 	endbr64
    00001b97: 	jmp	.Ltmp3257 # Offset: 7063
    00001b9c: 	endbr64
    00001ba0: 	jmp	.Ltmp3257 # Offset: 7072
    00001ba5: 	endbr64
    00001ba9: 	jmp	.Ltmp3257 # Offset: 7081
    00001bae: 	endbr64
    00001bb2: 	jmp	.Ltmp3257 # Offset: 7090
    00001bb7: 	endbr64
    00001bbb: 	jmp	.Ltmp3257 # Offset: 7099
    00001bc0: 	endbr64
    00001bc4: 	jmp	.Ltmp3257 # Offset: 7108
    00001bc9: 	endbr64
    00001bcd: 	jmp	.Ltmp3257 # Offset: 7117
    00001bd2: 	endbr64
    00001bd6: 	jmp	.Ltmp3258 # Offset: 7126
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIfEvv"

Binary Function "_Z19test_interleave3to4ImPFvPmmPKmS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)" after disassembly {
  All names   : _Z19test_interleave3to4ImPFvPmmPKmS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
                _Z19test_interleave3to4ImPFvPmmPKmS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/interleave.cpp/1
  Number      : 252
  State       : disassembled
  Address     : 0x328c0
  Size        : 0x2d7
  MaxSize     : 0x2e0
  Offset      : 0x328c0
  Section     : .text
  Orc Section : .local.text._Z19test_interleave3to4ImPFvPmmPKmS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0251:
    00000000: 	pushq	%r15
    00000002: 	pushq	%r14
    00000004: 	movq	%r8, %r14
    00000007: 	pushq	%r13
    00000009: 	movq	%rcx, %r13
    0000000c: 	pushq	%r12
    0000000e: 	movq	%rdx, %r12
    00000011: 	movl	$0x271000, %edx
    00000016: 	pushq	%rbp
    00000017: 	movq	%rsi, %rbp
    0000001a: 	xorl	%esi, %esi
    0000001c: 	pushq	%rbx
    0000001d: 	movq	%rdi, %rbx
    00000020: 	subq	$0x38, %rsp
    00000024: 	movq	0x70(%rsp), %rax
    00000029: 	movq	%r9, 0x8(%rsp)
    0000002e: 	movq	%rax, 0x10(%rsp)
    00000033: 	movq	%fs:0x28, %rax
    0000003c: 	movq	%rax, 0x28(%rsp)
    00000041: 	xorl	%eax, %eax
    00000043: 	callq	memset@PLT # Offset: 67
    00000048: 	movq	(%rbp), %xmm0
    0000004d: 	movq	%rbp, %rax
    00000050: 	leaq	0x9c400(%rbp), %rdx
    00000057: 	punpcklqdq	%xmm0, %xmm0
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3259:
    00000060: 	movups	%xmm0, (%rax)
    00000063: 	addq	$0x10, %rax
    00000067: 	cmpq	%rdx, %rax
    0000006a: 	jne	.Ltmp3259 # Offset: 106
    0000006c: 	callq	clock@PLT # Offset: 108
    00000071: 	xorl	%r15d, %r15d
    00000074: 	movq	%rax, start_time(%rip)
    0000007b: 	movl	iterations(%rip), %eax
    00000081: 	testl	%eax, %eax
    00000083: 	jle	.Ltmp3260 # Offset: 131
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp3261:
    00000088: 	movq	(%rbp), %rsi
    0000008c: 	movq	0x8(%rsp), %rax
    00000091: 	movq	%r14, %r8
    00000094: 	movq	%r13, %rcx
    00000097: 	movl	$0x13880, %r9d
    0000009d: 	movq	%r12, %rdx
    000000a0: 	movq	%rbx, %rdi
    000000a3: 	addl	$0x1, %r15d
    000000a7: 	callq	*%rax # Offset: 167
    000000a9: 	cmpl	iterations(%rip), %r15d
    000000b0: 	jl	.Ltmp3261 # Offset: 176
.Ltmp3260:
    000000b2: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000b9: 	movq	"_ZL7gLabels/1"+48(%rip), %rcx
    000000c0: 	subq	$0x20, %rax
    000000c4: 	cmpq	%rax, %rcx
    000000c7: 	je	.Ltmp3262 # Offset: 199
    000000cd: 	movq	0x10(%rsp), %rax
    000000d2: 	leaq	0x10(%rcx), %rdi
    000000d6: 	movq	%rdi, (%rcx)
    000000d9: 	movq	(%rax), %r8
    000000dc: 	movq	0x8(%rax), %r15
    000000e0: 	movq	%r8, %rax
    000000e3: 	addq	%r15, %rax
    000000e6: 	je	.Ltmp3263 # Offset: 230
    000000e8: 	testq	%r8, %r8
    000000eb: 	je	.Ltmp3264 # Offset: 235
.Ltmp3263:
    000000f1: 	movq	%r15, 0x20(%rsp)
    000000f6: 	cmpq	$0xf, %r15
    000000fa: 	ja	.Ltmp3265 # Offset: 250
    00000100: 	cmpq	$0x1, %r15
    00000104: 	jne	.Ltmp3266 # Offset: 260
    0000010a: 	movzbl	(%r8), %eax
    0000010e: 	movb	%al, 0x10(%rcx)
.Ltmp3271:
    00000111: 	movq	%r15, 0x8(%rcx)
    00000115: 	movb	$0x0, (%rdi,%r15)
    0000011a: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000121: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000128: 	addq	$0x20, %rax
    0000012c: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000133: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000013a: 	je	.Ltmp3267 # Offset: 314
.Ltmp3272:
    00000140: 	movq	-0x20(%rax), %r15
    00000144: 	callq	clock@PLT # Offset: 324
    00000149: 	pxor	%xmm0, %xmm0
    0000014d: 	movq	%rax, end_time(%rip)
    00000154: 	movq	%r15, %rdi
    00000157: 	subq	start_time(%rip), %rax
    0000015e: 	cvtsi2sd	%rax, %xmm0
    00000163: 	divsd	DATAat0x37530(%rip), %xmm0
    0000016b: 	callq	_Z13record_resultdPKc # Offset: 363
    00000170: 	xorl	%eax, %eax
.Ltmp3269:
    00000172: 	movq	(%rbp,%rax), %rsi
    00000177: 	cmpq	%rsi, (%rbx,%rax,4)
    0000017b: 	jne	.Ltmp3268 # Offset: 379
    00000181: 	movq	(%r12,%rax), %rcx
    00000185: 	cmpq	%rcx, 0x8(%rbx,%rax,4)
    0000018a: 	jne	.Ltmp3268 # Offset: 394
    00000190: 	movq	(%r13,%rax), %rdi
    00000195: 	cmpq	%rdi, 0x10(%rbx,%rax,4)
    0000019a: 	jne	.Ltmp3268 # Offset: 410
    000001a0: 	movq	(%r14,%rax), %rsi
    000001a4: 	cmpq	%rsi, 0x18(%rbx,%rax,4)
    000001a9: 	jne	.Ltmp3268 # Offset: 425
    000001af: 	addq	$0x8, %rax
    000001b3: 	cmpq	$0x9c400, %rax
    000001b9: 	jne	.Ltmp3269 # Offset: 441
    000001bb: 	movq	0x28(%rsp), %rax
    000001c0: 	subq	%fs:0x28, %rax
    000001c9: 	jne	.Ltmp3270 # Offset: 457
    000001cf: 	addq	$0x38, %rsp
    000001d3: 	popq	%rbx
    000001d4: 	popq	%rbp
    000001d5: 	popq	%r12
    000001d7: 	popq	%r13
    000001d9: 	popq	%r14
    000001db: 	popq	%r15
    000001dd: 	retq # Offset: 477
    000001de: 	nop # Size: 2
.Ltmp3265:
    000001e0: 	movq	%rcx, %rdi
    000001e3: 	leaq	0x20(%rsp), %rsi
    000001e8: 	xorl	%edx, %edx
    000001ea: 	movq	%r8, 0x18(%rsp)
    000001ef: 	movq	%rcx, 0x8(%rsp)
    000001f4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 500
    000001f9: 	movq	0x8(%rsp), %rcx
    000001fe: 	movq	0x18(%rsp), %r8
    00000203: 	movq	%rax, %rdi
    00000206: 	movq	%rax, (%rcx)
    00000209: 	movq	0x20(%rsp), %rax
    0000020e: 	movq	%rax, 0x10(%rcx)
.Ltmp3273:
    00000212: 	movq	%r15, %rdx
    00000215: 	movq	%r8, %rsi
    00000218: 	movq	%rcx, 0x8(%rsp)
    0000021d: 	callq	memcpy@PLT # Offset: 541
    00000222: 	movq	0x8(%rsp), %rcx
    00000227: 	movq	0x20(%rsp), %r15
    0000022c: 	movq	(%rcx), %rdi
    0000022f: 	jmp	.Ltmp3271 # Offset: 559
    00000234: 	nopl	(%rax) # Size: 4
.Ltmp3268:
    00000238: 	movq	0x28(%rsp), %rax
    0000023d: 	subq	%fs:0x28, %rax
    00000246: 	jne	.Ltmp3270 # Offset: 582
    00000248: 	movq	0x10(%rsp), %rax
    0000024d: 	leaq	DATAat0x371c8(%rip), %rsi
    00000254: 	movl	$0x1, %edi
    00000259: 	movq	(%rax), %rdx
    0000025c: 	addq	$0x38, %rsp
    00000260: 	xorl	%eax, %eax
    00000262: 	popq	%rbx
    00000263: 	popq	%rbp
    00000264: 	popq	%r12
    00000266: 	popq	%r13
    00000268: 	popq	%r14
    0000026a: 	popq	%r15
    0000026c: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 620
    00000271: 	nopl	(%rax) # Size: 7
.Ltmp3262:
    00000278: 	movq	0x10(%rsp), %rsi
    0000027d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000284: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 644
    00000289: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000290: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000297: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000029e: 	jne	.Ltmp3272 # Offset: 670
.Ltmp3267:
    000002a4: 	movq	-0x8(%rdx), %rax
    000002a8: 	addq	$0x200, %rax
    000002ae: 	jmp	.Ltmp3272 # Offset: 686
    000002b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3266:
    000002b8: 	testq	%r15, %r15
    000002bb: 	je	.Ltmp3271 # Offset: 699
    000002c1: 	jmp	.Ltmp3273 # Offset: 705
.Ltmp3270:
    000002c6: 	callq	__stack_chk_fail@PLT # Offset: 710
.Ltmp3264:
    000002cb: 	leaq	DATAat0x37158(%rip), %rdi
    000002d2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 722
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave3to4ImPFvPmmPKmS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1(*2)"

Binary Function "_Z11TestOneTypeImEvv" after disassembly {
  Number      : 253
  State       : disassembled
  Address     : 0x32ba0
  Size        : 0x1c7d
  MaxSize     : 0x1c80
  Offset      : 0x32ba0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeImEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0252:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rsp, %rbp
    00000008: 	pushq	%r15
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x128, %rsp
    00000018: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm0
    00000020: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm1
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, -0x38(%rbp)
    00000035: 	xorl	%eax, %eax
    00000037: 	leaq	-0xd0(%rbp), %rax
    0000003e: 	movb	$0x0, -0xc8(%rbp)
    00000045: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    0000004c: 	movq	%rax, -0x120(%rbp)
    00000053: 	movhlps	%xmm0, %xmm4
    00000056: 	movq	%xmm1, %rsi
    0000005b: 	movq	%rax, -0xe0(%rbp)
    00000062: 	movq	%xmm4, %rcx
    00000067: 	movabsq	$0x745f3436746e6975, %rax
    00000071: 	movq	%rax, -0xd0(%rbp)
    00000078: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000007f: 	leaq	0x8(%rcx), %r12
    00000083: 	movq	$0x8, -0xd8(%rbp)
    0000008e: 	movq	%rax, -0x108(%rbp)
    00000095: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000009c: 	movaps	%xmm1, -0x130(%rbp)
    000000a3: 	movq	%rax, -0x118(%rbp)
    000000aa: 	movaps	%xmm0, -0x140(%rbp)
    000000b1: 	movq	%xmm4, -0x148(%rbp)
    000000b9: 	movq	%xmm0, -0x110(%rbp)
    000000c1: 	cmpq	%r12, %rax
    000000c4: 	jbe	.Ltmp3274 # Offset: 196
    000000c6: 	movq	%xmm1, -0x150(%rbp)
    000000ce: 	movq	%r12, %r13
    000000d1: 	movq	%rax, %r15
    000000d4: 	nopl	(%rax) # Size: 4
.Ltmp3277:
    000000d8: 	movq	(%r13), %rax
    000000dc: 	movq	%rax, -0xf8(%rbp)
    000000e3: 	leaq	0x200(%rax), %rbx
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3276:
    000000f0: 	movq	-0xf8(%rbp), %rax
    000000f7: 	movq	(%rax), %rdi
    000000fa: 	leaq	0x10(%rax), %rdx
    000000fe: 	cmpq	%rdx, %rdi
    00000101: 	je	.Ltmp3275 # Offset: 257
    00000107: 	movq	0x10(%rax), %rcx
    0000010b: 	leaq	0x1(%rcx), %rsi
    0000010f: 	movq	%rcx, -0x100(%rbp)
    00000116: 	callq	_ZdlPvm@PLT # Offset: 278
    0000011b: 	addq	$0x20, -0xf8(%rbp)
    00000123: 	movq	-0xf8(%rbp), %rax
    0000012a: 	cmpq	%rbx, %rax
    0000012d: 	jne	.Ltmp3276 # Offset: 301
    0000012f: 	addq	$0x8, %r13
    00000133: 	cmpq	%r13, %r15
    00000136: 	ja	.Ltmp3277 # Offset: 310
.Ltmp3378:
    00000138: 	movq	-0x150(%rbp), %rsi
.Ltmp3274:
    0000013f: 	movq	-0x148(%rbp), %rcx
    00000146: 	cmpq	%rcx, -0x118(%rbp)
    0000014d: 	je	.Ltmp3278 # Offset: 333
    00000153: 	movq	-0x110(%rbp), %rbx
    0000015a: 	cmpq	%rbx, %rsi
    0000015d: 	je	.Ltmp3279 # Offset: 349
    0000015f: 	movq	%rsi, %rbx
.Ltmp3282:
    00000162: 	movq	(%rbx), %rdi
    00000165: 	leaq	0x10(%rbx), %rax
    00000169: 	cmpq	%rax, %rdi
    0000016c: 	je	.Ltmp3280 # Offset: 364
.Ltmp3281:
    0000016e: 	movq	0x10(%rbx), %rax
    00000172: 	addq	$0x20, %rbx
    00000176: 	leaq	0x1(%rax), %rsi
    0000017a: 	movq	%rax, -0xf8(%rbp)
    00000181: 	callq	_ZdlPvm@PLT # Offset: 385
    00000186: 	cmpq	-0x110(%rbp), %rbx
    0000018d: 	je	.Ltmp3279 # Offset: 397
    0000018f: 	movq	(%rbx), %rdi
    00000192: 	leaq	0x10(%rbx), %rax
    00000196: 	cmpq	%rax, %rdi
    00000199: 	jne	.Ltmp3281 # Offset: 409
.Ltmp3280:
    0000019b: 	movq	%rbx, %rax
    0000019e: 	addq	$0x20, %rax
    000001a2: 	movq	%rax, %rbx
    000001a5: 	cmpq	-0x110(%rbp), %rax
    000001ac: 	jne	.Ltmp3282 # Offset: 428
    000001ae: 	cmpq	%r14, -0x108(%rbp)
    000001b5: 	je	.Ltmp3283 # Offset: 437
    000001b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3285:
    000001c0: 	movq	(%r14), %rdi
    000001c3: 	leaq	0x10(%r14), %rax
    000001c7: 	cmpq	%rax, %rdi
    000001ca: 	je	.Ltmp3284 # Offset: 458
    000001cc: 	movq	0x10(%r14), %rax
    000001d0: 	leaq	0x1(%rax), %rsi
    000001d4: 	callq	_ZdlPvm@PLT # Offset: 468
.Ltmp3284:
    000001d9: 	addq	$0x20, %r14
.Ltmp3279:
    000001dd: 	cmpq	%r14, -0x108(%rbp)
    000001e4: 	jne	.Ltmp3285 # Offset: 484
.Ltmp3283:
    000001e6: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000001ed: 	leaq	0x8(%rax), %rbx
    000001f1: 	cmpq	%r12, %rbx
    000001f4: 	jbe	.Ltmp3286 # Offset: 500
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3287:
    00000200: 	movq	(%r12), %rdi
    00000204: 	movl	$0x200, %esi
    00000209: 	addq	$0x8, %r12
    0000020d: 	callq	_ZdlPvm@PLT # Offset: 525
    00000212: 	cmpq	%r12, %rbx
    00000215: 	ja	.Ltmp3287 # Offset: 533
.Ltmp3286:
    00000217: 	movzbl	init_value(%rip), %eax
    0000021e: 	movdqa	-0x130(%rbp), %xmm2
    00000226: 	movl	$0x9c400, %edi
    0000022b: 	movdqa	-0x140(%rbp), %xmm3
    00000233: 	addq	$0x2a, %rax
    00000237: 	movaps	%xmm2, "_ZL7gLabels/1"+48(%rip)
    0000023e: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000245: 	movl	iterations(%rip), %eax
    0000024b: 	movaps	%xmm3, "_ZL7gLabels/1"+64(%rip)
    00000252: 	movl	%eax, -0x118(%rbp)
    00000258: 	callq	_Znam@PLT # Offset: 600
    0000025d: 	movl	$0x9c400, %edi
    00000262: 	movq	%rax, %r12
    00000265: 	callq	_Znam@PLT # Offset: 613
    0000026a: 	movl	$0x9c400, %edi
    0000026f: 	movq	%rax, %r13
    00000272: 	callq	_Znam@PLT # Offset: 626
    00000277: 	movl	$0x9c400, %edi
    0000027c: 	movq	%rax, -0x100(%rbp)
    00000283: 	callq	_Znam@PLT # Offset: 643
    00000288: 	movl	$0x271000, %edi
    0000028d: 	movq	%rax, -0x110(%rbp)
    00000294: 	callq	_Znam@PLT # Offset: 660
    00000299: 	movq	%rax, %r14
    0000029c: 	movq	%r12, %rdx
    0000029f: 	leaq	0x9c400(%r12), %rdi
    000002a7: 	movabsq	$0x5851f42d4c957f2d, %rsi
    000002b1: 	movabsq	$0x14057b7ef767814f, %rcx
    000002bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3288:
    000002c0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000002c7: 	addq	$0x8, %rdx
    000002cb: 	imulq	%rsi, %rax
    000002cf: 	addq	%rcx, %rax
    000002d2: 	movq	%rax, %r8
    000002d5: 	movq	%rax, %r9
    000002d8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000002df: 	shrq	$0x14, %r8
    000002e3: 	shlq	$0x17, %r9
    000002e7: 	xorq	%r9, %r8
    000002ea: 	xorq	%r8, %rax
    000002ed: 	sarq	$0x3, %rax
    000002f1: 	movq	%rax, -0x8(%rdx)
    000002f5: 	cmpq	%rdi, %rdx
    000002f8: 	jne	.Ltmp3288 # Offset: 760
    000002fa: 	leaq	0x9c400(%r13), %rdi
    00000301: 	movq	%r13, %rdx
    00000304: 	movabsq	$0x5851f42d4c957f2d, %rsi
    0000030e: 	movabsq	$0x14057b7ef767814f, %rcx
    00000318: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3289:
    00000320: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000327: 	addq	$0x8, %rdx
    0000032b: 	imulq	%rsi, %rax
    0000032f: 	addq	%rcx, %rax
    00000332: 	movq	%rax, %r8
    00000335: 	movq	%rax, %r9
    00000338: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000033f: 	shrq	$0x14, %r8
    00000343: 	shlq	$0x17, %r9
    00000347: 	xorq	%r9, %r8
    0000034a: 	xorq	%r8, %rax
    0000034d: 	sarq	$0x3, %rax
    00000351: 	movq	%rax, -0x8(%rdx)
    00000355: 	cmpq	%rdx, %rdi
    00000358: 	jne	.Ltmp3289 # Offset: 856
    0000035a: 	movq	-0x100(%rbp), %rdx
    00000361: 	movabsq	$0x5851f42d4c957f2d, %rsi
    0000036b: 	movabsq	$0x14057b7ef767814f, %rcx
    00000375: 	leaq	0x9c400(%rdx), %rdi
    0000037c: 	nopl	(%rax) # Size: 4
.Ltmp3290:
    00000380: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000387: 	addq	$0x8, %rdx
    0000038b: 	imulq	%rsi, %rax
    0000038f: 	addq	%rcx, %rax
    00000392: 	movq	%rax, %r8
    00000395: 	movq	%rax, %r9
    00000398: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000039f: 	shrq	$0x14, %r8
    000003a3: 	shlq	$0x17, %r9
    000003a7: 	xorq	%r9, %r8
    000003aa: 	xorq	%r8, %rax
    000003ad: 	sarq	$0x3, %rax
    000003b1: 	movq	%rax, -0x8(%rdx)
    000003b5: 	cmpq	%rdx, %rdi
    000003b8: 	jne	.Ltmp3290 # Offset: 952
    000003ba: 	movq	-0x110(%rbp), %rdx
    000003c1: 	movabsq	$0x5851f42d4c957f2d, %rsi
    000003cb: 	movabsq	$0x14057b7ef767814f, %rcx
    000003d5: 	leaq	0x9c400(%rdx), %rdi
    000003dc: 	nopl	(%rax) # Size: 4
.Ltmp3291:
    000003e0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000003e7: 	addq	$0x8, %rdx
    000003eb: 	imulq	%rsi, %rax
    000003ef: 	addq	%rcx, %rax
    000003f2: 	movq	%rax, %r8
    000003f5: 	movq	%rax, %r9
    000003f8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000003ff: 	shrq	$0x14, %r8
    00000403: 	shlq	$0x17, %r9
    00000407: 	xorq	%r9, %r8
    0000040a: 	xorq	%r8, %rax
    0000040d: 	sarq	$0x3, %rax
    00000411: 	movq	%rax, -0x8(%rdx)
    00000415: 	cmpq	%rdx, %rdi
    00000418: 	jne	.Ltmp3291 # Offset: 1048
    0000041a: 	xorl	%esi, %esi
    0000041c: 	movl	$0x271000, %edx
    00000421: 	leaq	-0x50(%rbp), %rbx
    00000425: 	movq	%r14, %rdi
    00000428: 	callq	memset@PLT # Offset: 1064
    0000042d: 	movl	-0x118(%rbp), %eax
    00000433: 	movq	-0xd8(%rbp), %r15
    0000043a: 	movq	%rbx, -0x60(%rbp)
    0000043e: 	movl	%eax, iterations(%rip)
    00000444: 	movq	-0xe0(%rbp), %rax
    0000044b: 	movq	%rax, %rcx
    0000044e: 	movq	%rax, -0xf8(%rbp)
    00000455: 	addq	%r15, %rcx
    00000458: 	je	.Ltmp3292 # Offset: 1112
    0000045a: 	testq	%rax, %rax
    0000045d: 	je	.Ltmp3293 # Offset: 1117
.Ltmp3292:
    00000463: 	movq	%r15, -0xe8(%rbp)
    0000046a: 	cmpq	$0xf, %r15
    0000046e: 	ja	.Ltmp3294 # Offset: 1134
    00000474: 	cmpq	$0x1, %r15
    00000478: 	jne	.Ltmp3295 # Offset: 1144
    0000047e: 	movq	-0xf8(%rbp), %rax
    00000485: 	movzbl	(%rax), %eax
    00000488: 	movb	%al, -0x50(%rbp)
    0000048b: 	movq	%rbx, %rax
.Ltmp3380:
    0000048e: 	movq	%r15, -0x58(%rbp)
    00000492: 	movb	$0x0, (%rax,%r15)
    00000497: 	movabsq	$0x3fffffffffffffff, %rax
    000004a1: 	subq	-0x58(%rbp), %rax
    000004a5: 	cmpq	$0x10, %rax
    000004a9: 	jbe	.Ltmp3296 # Offset: 1193
    000004af: 	leaq	-0x60(%rbp), %rax
    000004b3: 	movl	$0x11, %edx
    000004b8: 	leaq	DATAat0x371d8(%rip), %rsi
    000004bf: 	movq	%rax, %rdi
    000004c2: 	movq	%rax, -0xf8(%rbp)
    000004c9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1225
    000004ce: 	movq	-0xf8(%rbp), %r8
    000004d5: 	movq	%r13, %rdx
    000004d8: 	movq	%r12, %rsi
    000004db: 	movq	%r14, %rdi
    000004de: 	leaq	_Z23interleave2to2_version1ImEvPT_PKS0_S3_i(%rip), %rcx
    000004e5: 	callq	"_Z19test_interleave2to2ImPFvPmPKmS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1253
    000004ea: 	movq	-0x60(%rbp), %rdi
    000004ee: 	cmpq	%rbx, %rdi
    000004f1: 	je	.Ltmp3297 # Offset: 1265
    000004f3: 	movq	-0x50(%rbp), %rax
    000004f7: 	leaq	0x1(%rax), %rsi
    000004fb: 	callq	_ZdlPvm@PLT # Offset: 1275
.Ltmp3297:
    00000500: 	movq	-0xf8(%rbp), %r15
    00000507: 	leaq	-0xe0(%rbp), %rax
    0000050e: 	leaq	DATAat0x371ea(%rip), %rdx
    00000515: 	movq	%rax, %rsi
    00000518: 	movq	%rax, -0x108(%rbp)
    0000051f: 	movq	%r15, %rdi
    00000522: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1314
    00000527: 	movq	%r15, %r8
    0000052a: 	leaq	_Z23interleave2to2_version2ImEvPT_PKS0_S3_i(%rip), %rcx
    00000531: 	movq	%r13, %rdx
    00000534: 	movq	%r12, %rsi
    00000537: 	movq	%r14, %rdi
    0000053a: 	callq	"_Z19test_interleave2to2ImPFvPmPKmS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1338
    0000053f: 	movq	-0x60(%rbp), %rdi
    00000543: 	cmpq	%rbx, %rdi
    00000546: 	je	.Ltmp3298 # Offset: 1350
    00000548: 	movq	-0x50(%rbp), %rax
    0000054c: 	leaq	0x1(%rax), %rsi
    00000550: 	callq	_ZdlPvm@PLT # Offset: 1360
.Ltmp3298:
    00000555: 	movq	-0xf8(%rbp), %r15
    0000055c: 	movq	-0x108(%rbp), %rsi
    00000563: 	leaq	DATAat0x371fc(%rip), %rdx
    0000056a: 	movq	%r15, %rdi
    0000056d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1389
    00000572: 	movq	%r15, %r8
    00000575: 	leaq	_Z23interleave2to2_version3ImEvPT_PKS0_S3_i(%rip), %rcx
    0000057c: 	movq	%r13, %rdx
    0000057f: 	movq	%r12, %rsi
    00000582: 	movq	%r14, %rdi
    00000585: 	callq	"_Z19test_interleave2to2ImPFvPmPKmS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1413
    0000058a: 	movq	-0x60(%rbp), %rdi
    0000058e: 	cmpq	%rbx, %rdi
    00000591: 	je	.Ltmp3299 # Offset: 1425
    00000593: 	movq	-0x50(%rbp), %rax
    00000597: 	leaq	0x1(%rax), %rsi
    0000059b: 	callq	_ZdlPvm@PLT # Offset: 1435
.Ltmp3299:
    000005a0: 	movq	-0xf8(%rbp), %r15
    000005a7: 	movq	-0x108(%rbp), %rsi
    000005ae: 	leaq	DATAat0x3720e(%rip), %rdx
    000005b5: 	movq	%r15, %rdi
    000005b8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1464
    000005bd: 	movq	%r15, %r8
    000005c0: 	leaq	_Z23interleave2to2_version4ImEvPT_PKS0_S3_i(%rip), %rcx
    000005c7: 	movq	%r13, %rdx
    000005ca: 	movq	%r12, %rsi
    000005cd: 	movq	%r14, %rdi
    000005d0: 	callq	"_Z19test_interleave2to2ImPFvPmPKmS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1488
    000005d5: 	movq	-0x60(%rbp), %rdi
    000005d9: 	cmpq	%rbx, %rdi
    000005dc: 	je	.Ltmp3300 # Offset: 1500
    000005de: 	movq	-0x50(%rbp), %rax
    000005e2: 	leaq	0x1(%rax), %rsi
    000005e6: 	callq	_ZdlPvm@PLT # Offset: 1510
.Ltmp3300:
    000005eb: 	movq	-0xe0(%rbp), %rax
    000005f2: 	movq	-0xd8(%rbp), %r15
    000005f9: 	movq	%rbx, -0x60(%rbp)
    000005fd: 	movq	%rax, %rcx
    00000600: 	movq	%rax, -0x130(%rbp)
    00000607: 	addq	%r15, %rcx
    0000060a: 	je	.Ltmp3301 # Offset: 1546
    0000060c: 	testq	%rax, %rax
    0000060f: 	je	.Ltmp3302 # Offset: 1551
.Ltmp3301:
    00000615: 	movq	%r15, -0xe8(%rbp)
    0000061c: 	cmpq	$0xf, %r15
    00000620: 	ja	.Ltmp3303 # Offset: 1568
    00000626: 	cmpq	$0x1, %r15
    0000062a: 	jne	.Ltmp3304 # Offset: 1578
    00000630: 	movq	-0x130(%rbp), %rax
    00000637: 	movzbl	(%rax), %eax
    0000063a: 	movb	%al, -0x50(%rbp)
    0000063d: 	movq	%rbx, %rax
.Ltmp3400:
    00000640: 	movq	%r15, -0x58(%rbp)
    00000644: 	movb	$0x0, (%rax,%r15)
    00000649: 	movabsq	$0x3fffffffffffffff, %rax
    00000653: 	subq	-0x58(%rbp), %rax
    00000657: 	cmpq	$0x10, %rax
    0000065b: 	jbe	.Ltmp3305 # Offset: 1627
    00000661: 	movq	-0xf8(%rbp), %rdi
    00000668: 	movl	$0x11, %edx
    0000066d: 	leaq	DATAat0x37220(%rip), %rsi
    00000674: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1652
    00000679: 	movq	-0xf8(%rbp), %r8
    00000680: 	movq	%r13, %rdx
    00000683: 	movq	%r12, %rsi
    00000686: 	movq	%r14, %rdi
    00000689: 	leaq	_Z23interleave2to2_version5ImEvPT_PKS0_S3_i(%rip), %rcx
    00000690: 	callq	"_Z19test_interleave2to2ImPFvPmPKmS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1680
    00000695: 	movq	-0x60(%rbp), %rdi
    00000699: 	cmpq	%rbx, %rdi
    0000069c: 	je	.Ltmp3306 # Offset: 1692
    0000069e: 	movq	-0x50(%rbp), %rax
    000006a2: 	leaq	0x1(%rax), %rsi
    000006a6: 	callq	_ZdlPvm@PLT # Offset: 1702
.Ltmp3306:
    000006ab: 	movq	-0xf8(%rbp), %r15
    000006b2: 	movq	-0x108(%rbp), %rsi
    000006b9: 	leaq	DATAat0x37232(%rip), %rdx
    000006c0: 	movq	%r15, %rdi
    000006c3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1731
    000006c8: 	movq	%r15, %r8
    000006cb: 	leaq	_Z23interleave2to2_version6ImEvPT_PKS0_S3_i(%rip), %rcx
    000006d2: 	movq	%r13, %rdx
    000006d5: 	movq	%r12, %rsi
    000006d8: 	movq	%r14, %rdi
    000006db: 	callq	"_Z19test_interleave2to2ImPFvPmPKmS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1755
    000006e0: 	movq	-0x60(%rbp), %rdi
    000006e4: 	cmpq	%rbx, %rdi
    000006e7: 	je	.Ltmp3307 # Offset: 1767
    000006e9: 	movq	-0x50(%rbp), %rax
    000006ed: 	leaq	0x1(%rax), %rsi
    000006f1: 	callq	_ZdlPvm@PLT # Offset: 1777
.Ltmp3307:
    000006f6: 	movq	-0xe0(%rbp), %rax
    000006fd: 	movq	-0xd8(%rbp), %r15
    00000704: 	movq	%rbx, -0x60(%rbp)
    00000708: 	movq	%rax, %rcx
    0000070b: 	movq	%rax, -0x130(%rbp)
    00000712: 	addq	%r15, %rcx
    00000715: 	je	.Ltmp3308 # Offset: 1813
    00000717: 	testq	%rax, %rax
    0000071a: 	je	.Ltmp3309 # Offset: 1818
.Ltmp3308:
    00000720: 	movq	%r15, -0xe8(%rbp)
    00000727: 	cmpq	$0xf, %r15
    0000072b: 	ja	.Ltmp3310 # Offset: 1835
    00000731: 	cmpq	$0x1, %r15
    00000735: 	jne	.Ltmp3311 # Offset: 1845
    0000073b: 	movq	-0x130(%rbp), %rax
    00000742: 	movzbl	(%rax), %eax
    00000745: 	movb	%al, -0x50(%rbp)
    00000748: 	movq	%rbx, %rax
.Ltmp3398:
    0000074b: 	movq	%r15, -0x58(%rbp)
    0000074f: 	movb	$0x0, (%rax,%r15)
    00000754: 	movabsq	$0x3fffffffffffffff, %rax
    0000075e: 	subq	-0x58(%rbp), %rax
    00000762: 	cmpq	$0x10, %rax
    00000766: 	jbe	.Ltmp3312 # Offset: 1894
    0000076c: 	movq	-0xf8(%rbp), %rdi
    00000773: 	movl	$0x11, %edx
    00000778: 	leaq	DATAat0x37244(%rip), %rsi
    0000077f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1919
    00000784: 	movq	-0xf8(%rbp), %r8
    0000078b: 	movq	%r13, %rdx
    0000078e: 	movq	%r12, %rsi
    00000791: 	movq	%r14, %rdi
    00000794: 	leaq	_Z23interleave2to2_version7ImEvPT_PKS0_S3_i(%rip), %rcx
    0000079b: 	callq	"_Z19test_interleave2to2ImPFvPmPKmS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 1947
    000007a0: 	movq	-0x60(%rbp), %rdi
    000007a4: 	cmpq	%rbx, %rdi
    000007a7: 	je	.Ltmp3313 # Offset: 1959
    000007a9: 	movq	-0x50(%rbp), %rax
    000007ad: 	leaq	0x1(%rax), %rsi
    000007b1: 	callq	_ZdlPvm@PLT # Offset: 1969
.Ltmp3313:
    000007b6: 	movq	-0xf8(%rbp), %r15
    000007bd: 	movq	-0x108(%rbp), %rsi
    000007c4: 	leaq	DATAat0x37256(%rip), %rdx
    000007cb: 	movq	%r15, %rdi
    000007ce: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1998
    000007d3: 	movq	%r15, %r8
    000007d6: 	leaq	_Z23interleave2to2_version8ImEvPT_PKS0_S3_i(%rip), %rcx
    000007dd: 	movq	%r13, %rdx
    000007e0: 	movq	%r12, %rsi
    000007e3: 	movq	%r14, %rdi
    000007e6: 	callq	"_Z19test_interleave2to2ImPFvPmPKmS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2022
    000007eb: 	movq	-0x60(%rbp), %rdi
    000007ef: 	cmpq	%rbx, %rdi
    000007f2: 	je	.Ltmp3314 # Offset: 2034
    000007f4: 	movq	-0x50(%rbp), %rax
    000007f8: 	leaq	0x1(%rax), %rsi
    000007fc: 	callq	_ZdlPvm@PLT # Offset: 2044
.Ltmp3314:
    00000801: 	movq	-0x108(%rbp), %rsi
    00000808: 	leaq	-0xc0(%rbp), %rdi
    0000080f: 	leaq	DATAat0x37268(%rip), %rdx
    00000816: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2070
    0000081b: 	movl	iterations(%rip), %edx
    00000821: 	xorl	%r8d, %r8d
    00000824: 	xorl	%ecx, %ecx
    00000826: 	movl	$0x13880, %esi
    0000082b: 	movq	-0xc0(%rbp), %rdi
    00000832: 	callq	_Z9summarizePKciiii # Offset: 2098
    00000837: 	movl	-0x118(%rbp), %eax
    0000083d: 	movq	-0xd8(%rbp), %r15
    00000844: 	movq	%rbx, -0x60(%rbp)
    00000848: 	leal	(%rax,%rax), %edx
    0000084b: 	movslq	%edx, %rax
    0000084e: 	sarl	$0x1f, %edx
    00000851: 	imulq	$0x55555556, %rax, %rax
    00000858: 	shrq	$0x20, %rax
    0000085c: 	subl	%edx, %eax
    0000085e: 	movl	%eax, iterations(%rip)
    00000864: 	movq	-0xe0(%rbp), %rax
    0000086b: 	movq	%rax, %rcx
    0000086e: 	movq	%rax, -0x130(%rbp)
    00000875: 	addq	%r15, %rcx
    00000878: 	je	.Ltmp3315 # Offset: 2168
    0000087a: 	testq	%rax, %rax
    0000087d: 	je	.Ltmp3316 # Offset: 2173
.Ltmp3315:
    00000883: 	movq	%r15, -0xe8(%rbp)
    0000088a: 	cmpq	$0xf, %r15
    0000088e: 	ja	.Ltmp3317 # Offset: 2190
    00000894: 	cmpq	$0x1, %r15
    00000898: 	jne	.Ltmp3318 # Offset: 2200
    0000089e: 	movq	-0x130(%rbp), %rax
    000008a5: 	movzbl	(%rax), %eax
    000008a8: 	movb	%al, -0x50(%rbp)
    000008ab: 	movq	%rbx, %rax
.Ltmp3396:
    000008ae: 	movq	%r15, -0x58(%rbp)
    000008b2: 	movb	$0x0, (%rax,%r15)
    000008b7: 	movabsq	$0x3fffffffffffffff, %rax
    000008c1: 	subq	-0x58(%rbp), %rax
    000008c5: 	cmpq	$0x10, %rax
    000008c9: 	jbe	.Ltmp3319 # Offset: 2249
    000008cf: 	movq	-0xf8(%rbp), %rdi
    000008d6: 	movl	$0x11, %edx
    000008db: 	leaq	DATAat0x37278(%rip), %rsi
    000008e2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2274
    000008e7: 	movq	-0xf8(%rbp), %r9
    000008ee: 	movq	%r13, %rdx
    000008f1: 	movq	%r12, %rsi
    000008f4: 	movq	%r14, %rdi
    000008f7: 	movq	-0x100(%rbp), %rcx
    000008fe: 	leaq	_Z23interleave3to3_version1ImEvPT_PKS0_S3_S3_i(%rip), %r8
    00000905: 	callq	"_Z19test_interleave3to3ImPFvPmPKmS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2309
    0000090a: 	movq	-0x60(%rbp), %rdi
    0000090e: 	cmpq	%rbx, %rdi
    00000911: 	je	.Ltmp3320 # Offset: 2321
    00000913: 	movq	-0x50(%rbp), %rax
    00000917: 	leaq	0x1(%rax), %rsi
    0000091b: 	callq	_ZdlPvm@PLT # Offset: 2331
.Ltmp3320:
    00000920: 	movq	-0xe0(%rbp), %rax
    00000927: 	movq	-0xd8(%rbp), %r15
    0000092e: 	movq	%rbx, -0x60(%rbp)
    00000932: 	movq	%rax, %rcx
    00000935: 	movq	%rax, -0x130(%rbp)
    0000093c: 	addq	%r15, %rcx
    0000093f: 	je	.Ltmp3321 # Offset: 2367
    00000941: 	testq	%rax, %rax
    00000944: 	je	.Ltmp3322 # Offset: 2372
.Ltmp3321:
    0000094a: 	movq	%r15, -0xe8(%rbp)
    00000951: 	cmpq	$0xf, %r15
    00000955: 	ja	.Ltmp3323 # Offset: 2389
    0000095b: 	cmpq	$0x1, %r15
    0000095f: 	jne	.Ltmp3324 # Offset: 2399
    00000965: 	movq	-0x130(%rbp), %rax
    0000096c: 	movzbl	(%rax), %eax
    0000096f: 	movb	%al, -0x50(%rbp)
    00000972: 	movq	%rbx, %rax
.Ltmp3392:
    00000975: 	movq	%r15, -0x58(%rbp)
    00000979: 	movb	$0x0, (%rax,%r15)
    0000097e: 	movabsq	$0x3fffffffffffffff, %rax
    00000988: 	subq	-0x58(%rbp), %rax
    0000098c: 	cmpq	$0x10, %rax
    00000990: 	jbe	.Ltmp3325 # Offset: 2448
    00000996: 	movq	-0xf8(%rbp), %rdi
    0000099d: 	movl	$0x11, %edx
    000009a2: 	leaq	DATAat0x3728a(%rip), %rsi
    000009a9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2473
    000009ae: 	movq	-0xf8(%rbp), %r9
    000009b5: 	movq	%r13, %rdx
    000009b8: 	movq	%r12, %rsi
    000009bb: 	movq	%r14, %rdi
    000009be: 	movq	-0x100(%rbp), %rcx
    000009c5: 	leaq	_Z23interleave3to3_version2ImEvPT_PKS0_S3_S3_i(%rip), %r8
    000009cc: 	callq	"_Z19test_interleave3to3ImPFvPmPKmS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2508
    000009d1: 	movq	-0x60(%rbp), %rdi
    000009d5: 	cmpq	%rbx, %rdi
    000009d8: 	je	.Ltmp3326 # Offset: 2520
    000009da: 	movq	-0x50(%rbp), %rax
    000009de: 	leaq	0x1(%rax), %rsi
    000009e2: 	callq	_ZdlPvm@PLT # Offset: 2530
.Ltmp3326:
    000009e7: 	movq	-0xf8(%rbp), %r15
    000009ee: 	movq	-0x108(%rbp), %rsi
    000009f5: 	leaq	DATAat0x3729c(%rip), %rdx
    000009fc: 	movq	%r15, %rdi
    000009ff: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2559
    00000a04: 	movq	-0x100(%rbp), %rcx
    00000a0b: 	movq	%r15, %r9
    00000a0e: 	movq	%r13, %rdx
    00000a11: 	movq	%r12, %rsi
    00000a14: 	leaq	_Z23interleave3to3_version3ImEvPT_PKS0_S3_S3_i(%rip), %r8
    00000a1b: 	movq	%r14, %rdi
    00000a1e: 	callq	"_Z19test_interleave3to3ImPFvPmPKmS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2590
    00000a23: 	movq	-0x60(%rbp), %rdi
    00000a27: 	cmpq	%rbx, %rdi
    00000a2a: 	je	.Ltmp3327 # Offset: 2602
    00000a2c: 	movq	-0x50(%rbp), %rax
    00000a30: 	leaq	0x1(%rax), %rsi
    00000a34: 	callq	_ZdlPvm@PLT # Offset: 2612
.Ltmp3327:
    00000a39: 	movq	-0xe0(%rbp), %rax
    00000a40: 	movq	-0xd8(%rbp), %r15
    00000a47: 	movq	%rbx, -0x60(%rbp)
    00000a4b: 	movq	%rax, %rcx
    00000a4e: 	movq	%rax, -0x130(%rbp)
    00000a55: 	addq	%r15, %rcx
    00000a58: 	je	.Ltmp3328 # Offset: 2648
    00000a5a: 	testq	%rax, %rax
    00000a5d: 	je	.Ltmp3329 # Offset: 2653
.Ltmp3328:
    00000a63: 	movq	%r15, -0xe8(%rbp)
    00000a6a: 	cmpq	$0xf, %r15
    00000a6e: 	ja	.Ltmp3330 # Offset: 2670
    00000a74: 	cmpq	$0x1, %r15
    00000a78: 	jne	.Ltmp3331 # Offset: 2680
    00000a7e: 	movq	-0x130(%rbp), %rax
    00000a85: 	movzbl	(%rax), %eax
    00000a88: 	movb	%al, -0x50(%rbp)
    00000a8b: 	movq	%rbx, %rax
.Ltmp3390:
    00000a8e: 	movq	%r15, -0x58(%rbp)
    00000a92: 	movb	$0x0, (%rax,%r15)
    00000a97: 	movabsq	$0x3fffffffffffffff, %rax
    00000aa1: 	subq	-0x58(%rbp), %rax
    00000aa5: 	cmpq	$0x10, %rax
    00000aa9: 	jbe	.Ltmp3332 # Offset: 2729
    00000aaf: 	movq	-0xf8(%rbp), %rdi
    00000ab6: 	movl	$0x11, %edx
    00000abb: 	leaq	DATAat0x372ae(%rip), %rsi
    00000ac2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2754
    00000ac7: 	movq	-0xf8(%rbp), %r9
    00000ace: 	movq	%r13, %rdx
    00000ad1: 	movq	%r12, %rsi
    00000ad4: 	movq	%r14, %rdi
    00000ad7: 	movq	-0x100(%rbp), %rcx
    00000ade: 	leaq	_Z23interleave3to3_version4ImEvPT_PKS0_S3_S3_i(%rip), %r8
    00000ae5: 	callq	"_Z19test_interleave3to3ImPFvPmPKmS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2789
    00000aea: 	movq	-0x60(%rbp), %rdi
    00000aee: 	cmpq	%rbx, %rdi
    00000af1: 	je	.Ltmp3333 # Offset: 2801
    00000af3: 	movq	-0x50(%rbp), %rax
    00000af7: 	leaq	0x1(%rax), %rsi
    00000afb: 	callq	_ZdlPvm@PLT # Offset: 2811
.Ltmp3333:
    00000b00: 	movq	-0xf8(%rbp), %r15
    00000b07: 	movq	-0x108(%rbp), %rsi
    00000b0e: 	leaq	DATAat0x372c0(%rip), %rdx
    00000b15: 	movq	%r15, %rdi
    00000b18: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2840
    00000b1d: 	movq	-0x100(%rbp), %rcx
    00000b24: 	movq	%r15, %r9
    00000b27: 	movq	%r13, %rdx
    00000b2a: 	movq	%r12, %rsi
    00000b2d: 	leaq	_Z23interleave3to3_version5ImEvPT_PKS0_S3_S3_i(%rip), %r8
    00000b34: 	movq	%r14, %rdi
    00000b37: 	callq	"_Z19test_interleave3to3ImPFvPmPKmS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 2871
    00000b3c: 	movq	-0x60(%rbp), %rdi
    00000b40: 	cmpq	%rbx, %rdi
    00000b43: 	je	.Ltmp3334 # Offset: 2883
    00000b45: 	movq	-0x50(%rbp), %rax
    00000b49: 	leaq	0x1(%rax), %rsi
    00000b4d: 	callq	_ZdlPvm@PLT # Offset: 2893
.Ltmp3334:
    00000b52: 	movq	-0x108(%rbp), %r15
    00000b59: 	leaq	-0xa0(%rbp), %rdi
    00000b60: 	leaq	DATAat0x372d2(%rip), %rdx
    00000b67: 	movq	%r15, %rsi
    00000b6a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2922
    00000b6f: 	movl	iterations(%rip), %edx
    00000b75: 	xorl	%r8d, %r8d
    00000b78: 	xorl	%ecx, %ecx
    00000b7a: 	movl	$0x13880, %esi
    00000b7f: 	movq	-0xa0(%rbp), %rdi
    00000b86: 	callq	_Z9summarizePKciiii # Offset: 2950
    00000b8b: 	movl	-0x118(%rbp), %ecx
    00000b91: 	movq	%r15, %rsi
    00000b94: 	movq	-0xf8(%rbp), %r15
    00000b9b: 	leaq	DATAat0x372e2(%rip), %rdx
    00000ba2: 	movl	%ecx, %eax
    00000ba4: 	movq	%r15, %rdi
    00000ba7: 	shrl	$0x1f, %eax
    00000baa: 	addl	%ecx, %eax
    00000bac: 	sarl	%eax
    00000bae: 	movl	%eax, -0x140(%rbp)
    00000bb4: 	movl	%eax, iterations(%rip)
    00000bba: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3002
    00000bbf: 	subq	$0x8, %rsp
    00000bc3: 	movq	%r13, %rdx
    00000bc6: 	movq	%r12, %rsi
    00000bc9: 	movq	%r14, %rdi
    00000bcc: 	pushq	%r15
    00000bce: 	movq	-0x110(%rbp), %r8
    00000bd5: 	leaq	_Z23interleave3to4_version1ImEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000bdc: 	movq	-0x100(%rbp), %rcx
    00000be3: 	callq	"_Z19test_interleave3to4ImPFvPmmPKmS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3043
    00000be8: 	movq	-0x60(%rbp), %rdi
    00000bec: 	popq	%rcx
    00000bed: 	popq	%rsi
    00000bee: 	cmpq	%rbx, %rdi
    00000bf1: 	je	.Ltmp3335 # Offset: 3057
    00000bf3: 	movq	-0x50(%rbp), %rax
    00000bf7: 	leaq	0x1(%rax), %rsi
    00000bfb: 	callq	_ZdlPvm@PLT # Offset: 3067
.Ltmp3335:
    00000c00: 	movq	-0xf8(%rbp), %r15
    00000c07: 	movq	-0x108(%rbp), %rsi
    00000c0e: 	leaq	DATAat0x372f4(%rip), %rdx
    00000c15: 	movq	%r15, %rdi
    00000c18: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3096
    00000c1d: 	subq	$0x8, %rsp
    00000c21: 	movq	%r13, %rdx
    00000c24: 	movq	%r12, %rsi
    00000c27: 	movq	%r14, %rdi
    00000c2a: 	pushq	%r15
    00000c2c: 	movq	-0x110(%rbp), %r8
    00000c33: 	leaq	_Z23interleave3to4_version2ImEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000c3a: 	movq	-0x100(%rbp), %rcx
    00000c41: 	callq	"_Z19test_interleave3to4ImPFvPmmPKmS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3137
    00000c46: 	movq	-0x60(%rbp), %rdi
    00000c4a: 	popq	%rax
    00000c4b: 	popq	%rdx
    00000c4c: 	cmpq	%rbx, %rdi
    00000c4f: 	je	.Ltmp3336 # Offset: 3151
    00000c51: 	movq	-0x50(%rbp), %rax
    00000c55: 	leaq	0x1(%rax), %rsi
    00000c59: 	callq	_ZdlPvm@PLT # Offset: 3161
.Ltmp3336:
    00000c5e: 	movq	-0xe0(%rbp), %rax
    00000c65: 	movq	-0xd8(%rbp), %r15
    00000c6c: 	movq	%rbx, -0x60(%rbp)
    00000c70: 	movq	%rax, %rcx
    00000c73: 	movq	%rax, -0x130(%rbp)
    00000c7a: 	addq	%r15, %rcx
    00000c7d: 	je	.Ltmp3337 # Offset: 3197
    00000c7f: 	testq	%rax, %rax
    00000c82: 	je	.Ltmp3338 # Offset: 3202
.Ltmp3337:
    00000c88: 	movq	%r15, -0xe8(%rbp)
    00000c8f: 	cmpq	$0xf, %r15
    00000c93: 	ja	.Ltmp3339 # Offset: 3219
    00000c99: 	cmpq	$0x1, %r15
    00000c9d: 	jne	.Ltmp3340 # Offset: 3229
    00000ca3: 	movq	-0x130(%rbp), %rax
    00000caa: 	movzbl	(%rax), %eax
    00000cad: 	movb	%al, -0x50(%rbp)
    00000cb0: 	movq	%rbx, %rax
.Ltmp3388:
    00000cb3: 	movq	%r15, -0x58(%rbp)
    00000cb7: 	movb	$0x0, (%rax,%r15)
    00000cbc: 	movabsq	$0x3fffffffffffffff, %rax
    00000cc6: 	subq	-0x58(%rbp), %rax
    00000cca: 	cmpq	$0x10, %rax
    00000cce: 	jbe	.Ltmp3341 # Offset: 3278
    00000cd4: 	movq	-0xf8(%rbp), %rdi
    00000cdb: 	movl	$0x11, %edx
    00000ce0: 	leaq	DATAat0x37306(%rip), %rsi
    00000ce7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3303
    00000cec: 	subq	$0x8, %rsp
    00000cf0: 	pushq	-0xf8(%rbp)
    00000cf6: 	movq	%r13, %rdx
    00000cf9: 	movq	%r12, %rsi
    00000cfc: 	movq	-0x110(%rbp), %r8
    00000d03: 	leaq	_Z23interleave3to4_version3ImEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000d0a: 	movq	%r14, %rdi
    00000d0d: 	movq	-0x100(%rbp), %rcx
    00000d14: 	callq	"_Z19test_interleave3to4ImPFvPmmPKmS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3348
    00000d19: 	movq	-0x60(%rbp), %rdi
    00000d1d: 	popq	%r11
    00000d1f: 	popq	%r15
    00000d21: 	cmpq	%rbx, %rdi
    00000d24: 	je	.Ltmp3342 # Offset: 3364
    00000d26: 	movq	-0x50(%rbp), %rax
    00000d2a: 	leaq	0x1(%rax), %rsi
    00000d2e: 	callq	_ZdlPvm@PLT # Offset: 3374
.Ltmp3342:
    00000d33: 	movq	-0xf8(%rbp), %r15
    00000d3a: 	movq	-0x108(%rbp), %rsi
    00000d41: 	leaq	DATAat0x37318(%rip), %rdx
    00000d48: 	movq	%r15, %rdi
    00000d4b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3403
    00000d50: 	subq	$0x8, %rsp
    00000d54: 	movq	%r13, %rdx
    00000d57: 	movq	%r12, %rsi
    00000d5a: 	movq	%r14, %rdi
    00000d5d: 	pushq	%r15
    00000d5f: 	movq	-0x110(%rbp), %r8
    00000d66: 	leaq	_Z23interleave3to4_version4ImEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000d6d: 	movq	-0x100(%rbp), %rcx
    00000d74: 	callq	"_Z19test_interleave3to4ImPFvPmmPKmS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3444
    00000d79: 	movq	-0x60(%rbp), %rdi
    00000d7d: 	popq	%r9
    00000d7f: 	popq	%r10
    00000d81: 	cmpq	%rbx, %rdi
    00000d84: 	je	.Ltmp3343 # Offset: 3460
    00000d86: 	movq	-0x50(%rbp), %rax
    00000d8a: 	leaq	0x1(%rax), %rsi
    00000d8e: 	callq	_ZdlPvm@PLT # Offset: 3470
.Ltmp3343:
    00000d93: 	movq	-0xf8(%rbp), %r15
    00000d9a: 	movq	-0x108(%rbp), %rsi
    00000da1: 	leaq	DATAat0x3732a(%rip), %rdx
    00000da8: 	movq	%r15, %rdi
    00000dab: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3499
    00000db0: 	subq	$0x8, %rsp
    00000db4: 	movq	%r13, %rdx
    00000db7: 	movq	%r12, %rsi
    00000dba: 	movq	%r14, %rdi
    00000dbd: 	pushq	%r15
    00000dbf: 	movq	-0x110(%rbp), %r8
    00000dc6: 	leaq	_Z23interleave3to4_version5ImEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000dcd: 	movq	-0x100(%rbp), %rcx
    00000dd4: 	callq	"_Z19test_interleave3to4ImPFvPmmPKmS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3540
    00000dd9: 	popq	%rdi
    00000dda: 	movq	-0x60(%rbp), %rdi
    00000dde: 	popq	%r8
    00000de0: 	cmpq	%rbx, %rdi
    00000de3: 	je	.Ltmp3344 # Offset: 3555
    00000de5: 	movq	-0x50(%rbp), %rax
    00000de9: 	leaq	0x1(%rax), %rsi
    00000ded: 	callq	_ZdlPvm@PLT # Offset: 3565
.Ltmp3344:
    00000df2: 	movq	-0xe0(%rbp), %rax
    00000df9: 	movq	-0xd8(%rbp), %r15
    00000e00: 	movq	%rbx, -0x60(%rbp)
    00000e04: 	movq	%rax, %rcx
    00000e07: 	movq	%rax, -0x130(%rbp)
    00000e0e: 	addq	%r15, %rcx
    00000e11: 	je	.Ltmp3345 # Offset: 3601
    00000e13: 	testq	%rax, %rax
    00000e16: 	je	.Ltmp3346 # Offset: 3606
.Ltmp3345:
    00000e1c: 	movq	%r15, -0xe8(%rbp)
    00000e23: 	cmpq	$0xf, %r15
    00000e27: 	ja	.Ltmp3347 # Offset: 3623
    00000e2d: 	cmpq	$0x1, %r15
    00000e31: 	jne	.Ltmp3348 # Offset: 3633
    00000e37: 	movq	-0x130(%rbp), %rax
    00000e3e: 	movzbl	(%rax), %eax
    00000e41: 	movb	%al, -0x50(%rbp)
    00000e44: 	movq	%rbx, %rax
.Ltmp3386:
    00000e47: 	movq	%r15, -0x58(%rbp)
    00000e4b: 	movb	$0x0, (%rax,%r15)
    00000e50: 	movabsq	$0x3fffffffffffffff, %rax
    00000e5a: 	subq	-0x58(%rbp), %rax
    00000e5e: 	cmpq	$0x10, %rax
    00000e62: 	jbe	.Ltmp3349 # Offset: 3682
    00000e68: 	movq	-0xf8(%rbp), %rdi
    00000e6f: 	movl	$0x11, %edx
    00000e74: 	leaq	DATAat0x3733c(%rip), %rsi
    00000e7b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3707
    00000e80: 	subq	$0x8, %rsp
    00000e84: 	pushq	-0xf8(%rbp)
    00000e8a: 	movq	%r13, %rdx
    00000e8d: 	movq	%r12, %rsi
    00000e90: 	movq	-0x110(%rbp), %r8
    00000e97: 	leaq	_Z23interleave3to4_version6ImEvPT_S0_PKS0_S3_S3_i(%rip), %r9
    00000e9e: 	movq	%r14, %rdi
    00000ea1: 	movq	-0x100(%rbp), %rcx
    00000ea8: 	callq	"_Z19test_interleave3to4ImPFvPmmPKmS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 3752
    00000ead: 	movq	-0x60(%rbp), %rdi
    00000eb1: 	popq	%rcx
    00000eb2: 	popq	%rsi
    00000eb3: 	cmpq	%rbx, %rdi
    00000eb6: 	je	.Ltmp3350 # Offset: 3766
    00000eb8: 	movq	-0x50(%rbp), %rax
    00000ebc: 	leaq	0x1(%rax), %rsi
    00000ec0: 	callq	_ZdlPvm@PLT # Offset: 3776
.Ltmp3350:
    00000ec5: 	leaq	-0x70(%rbp), %rax
    00000ec9: 	movq	-0xd8(%rbp), %r15
    00000ed0: 	movq	%rax, -0x130(%rbp)
    00000ed7: 	movq	%rax, -0x80(%rbp)
    00000edb: 	movq	-0xe0(%rbp), %rax
    00000ee2: 	movq	%rax, %rcx
    00000ee5: 	movq	%rax, -0x148(%rbp)
    00000eec: 	addq	%r15, %rcx
    00000eef: 	je	.Ltmp3351 # Offset: 3823
    00000ef1: 	testq	%rax, %rax
    00000ef4: 	je	.Ltmp3352 # Offset: 3828
.Ltmp3351:
    00000efa: 	movq	%r15, -0xe8(%rbp)
    00000f01: 	cmpq	$0xf, %r15
    00000f05: 	ja	.Ltmp3353 # Offset: 3845
    00000f0b: 	cmpq	$0x1, %r15
    00000f0f: 	jne	.Ltmp3354 # Offset: 3855
    00000f15: 	movq	-0x148(%rbp), %rax
    00000f1c: 	movzbl	(%rax), %eax
    00000f1f: 	movb	%al, -0x70(%rbp)
    00000f22: 	movq	-0x130(%rbp), %rax
.Ltmp3384:
    00000f29: 	movq	%r15, -0x78(%rbp)
    00000f2d: 	movb	$0x0, (%rax,%r15)
    00000f32: 	movabsq	$0x3fffffffffffffff, %rax
    00000f3c: 	subq	-0x78(%rbp), %rax
    00000f40: 	cmpq	$0xe, %rax
    00000f44: 	jbe	.Ltmp3355 # Offset: 3908
    00000f4a: 	leaq	-0x80(%rbp), %rdi
    00000f4e: 	movl	$0xf, %edx
    00000f53: 	leaq	DATAat0x3734e(%rip), %rsi
    00000f5a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3930
    00000f5f: 	movl	iterations(%rip), %edx
    00000f65: 	movq	-0x80(%rbp), %rdi
    00000f69: 	xorl	%r8d, %r8d
    00000f6c: 	xorl	%ecx, %ecx
    00000f6e: 	movl	$0x13880, %esi
    00000f73: 	callq	_Z9summarizePKciiii # Offset: 3955
    00000f78: 	movq	-0xf8(%rbp), %r15
    00000f7f: 	movl	-0x140(%rbp), %eax
    00000f85: 	leaq	DATAat0x3735e(%rip), %rdx
    00000f8c: 	movq	-0x108(%rbp), %rsi
    00000f93: 	movq	%r15, %rdi
    00000f96: 	movl	%eax, iterations(%rip)
    00000f9c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3996
    00000fa1: 	subq	$0x8, %rsp
    00000fa5: 	movq	%r13, %rdx
    00000fa8: 	movq	%r12, %rsi
    00000fab: 	movq	%r14, %rdi
    00000fae: 	pushq	%r15
    00000fb0: 	movq	-0x110(%rbp), %r8
    00000fb7: 	leaq	_Z23interleave4to4_version1ImEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    00000fbe: 	movq	-0x100(%rbp), %rcx
    00000fc5: 	callq	"_Z19test_interleave4to4ImPFvPmPKmS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4037
    00000fca: 	movq	-0x60(%rbp), %rdi
    00000fce: 	popq	%rax
    00000fcf: 	popq	%rdx
    00000fd0: 	cmpq	%rbx, %rdi
    00000fd3: 	je	.Ltmp3356 # Offset: 4051
    00000fd5: 	movq	-0x50(%rbp), %rax
    00000fd9: 	leaq	0x1(%rax), %rsi
    00000fdd: 	callq	_ZdlPvm@PLT # Offset: 4061
.Ltmp3356:
    00000fe2: 	movq	-0xf8(%rbp), %r15
    00000fe9: 	movq	-0x108(%rbp), %rsi
    00000ff0: 	leaq	DATAat0x37370(%rip), %rdx
    00000ff7: 	movq	%r15, %rdi
    00000ffa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4090
    00000fff: 	subq	$0x8, %rsp
    00001003: 	movq	%r13, %rdx
    00001006: 	movq	%r12, %rsi
    00001009: 	movq	%r14, %rdi
    0000100c: 	pushq	%r15
    0000100e: 	movq	-0x110(%rbp), %r8
    00001015: 	leaq	_Z23interleave4to4_version2ImEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    0000101c: 	movq	-0x100(%rbp), %rcx
    00001023: 	callq	"_Z19test_interleave4to4ImPFvPmPKmS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4131
    00001028: 	movq	-0x60(%rbp), %rdi
    0000102c: 	popq	%r11
    0000102e: 	popq	%r15
    00001030: 	cmpq	%rbx, %rdi
    00001033: 	je	.Ltmp3357 # Offset: 4147
    00001035: 	movq	-0x50(%rbp), %rax
    00001039: 	leaq	0x1(%rax), %rsi
    0000103d: 	callq	_ZdlPvm@PLT # Offset: 4157
.Ltmp3357:
    00001042: 	movq	-0xf8(%rbp), %r15
    00001049: 	movq	-0x108(%rbp), %rsi
    00001050: 	leaq	DATAat0x37382(%rip), %rdx
    00001057: 	movq	%r15, %rdi
    0000105a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4186
    0000105f: 	subq	$0x8, %rsp
    00001063: 	movq	%r13, %rdx
    00001066: 	movq	%r12, %rsi
    00001069: 	movq	%r14, %rdi
    0000106c: 	pushq	%r15
    0000106e: 	movq	-0x110(%rbp), %r8
    00001075: 	leaq	_Z23interleave4to4_version3ImEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    0000107c: 	movq	-0x100(%rbp), %rcx
    00001083: 	callq	"_Z19test_interleave4to4ImPFvPmPKmS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4227
    00001088: 	movq	-0x60(%rbp), %rdi
    0000108c: 	popq	%r9
    0000108e: 	popq	%r10
    00001090: 	cmpq	%rbx, %rdi
    00001093: 	je	.Ltmp3358 # Offset: 4243
    00001095: 	movq	-0x50(%rbp), %rax
    00001099: 	leaq	0x1(%rax), %rsi
    0000109d: 	callq	_ZdlPvm@PLT # Offset: 4253
.Ltmp3358:
    000010a2: 	movq	-0xf8(%rbp), %r15
    000010a9: 	movq	-0x108(%rbp), %rsi
    000010b0: 	leaq	DATAat0x37394(%rip), %rdx
    000010b7: 	movq	%r15, %rdi
    000010ba: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4282
    000010bf: 	subq	$0x8, %rsp
    000010c3: 	movq	%r13, %rdx
    000010c6: 	movq	%r12, %rsi
    000010c9: 	movq	%r14, %rdi
    000010cc: 	pushq	%r15
    000010ce: 	movq	-0x110(%rbp), %r8
    000010d5: 	leaq	_Z23interleave4to4_version4ImEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    000010dc: 	movq	-0x100(%rbp), %rcx
    000010e3: 	callq	"_Z19test_interleave4to4ImPFvPmPKmS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4323
    000010e8: 	popq	%rdi
    000010e9: 	movq	-0x60(%rbp), %rdi
    000010ed: 	popq	%r8
    000010ef: 	cmpq	%rbx, %rdi
    000010f2: 	je	.Ltmp3359 # Offset: 4338
    000010f4: 	movq	-0x50(%rbp), %rax
    000010f8: 	leaq	0x1(%rax), %rsi
    000010fc: 	callq	_ZdlPvm@PLT # Offset: 4348
.Ltmp3359:
    00001101: 	movq	-0xe0(%rbp), %rax
    00001108: 	movq	-0xd8(%rbp), %r15
    0000110f: 	movq	%rbx, -0x60(%rbp)
    00001113: 	movq	%rax, %rcx
    00001116: 	movq	%rax, -0x140(%rbp)
    0000111d: 	addq	%r15, %rcx
    00001120: 	je	.Ltmp3360 # Offset: 4384
    00001122: 	testq	%rax, %rax
    00001125: 	je	.Ltmp3361 # Offset: 4389
.Ltmp3360:
    0000112b: 	movq	%r15, -0xe8(%rbp)
    00001132: 	cmpq	$0xf, %r15
    00001136: 	ja	.Ltmp3362 # Offset: 4406
    0000113c: 	cmpq	$0x1, %r15
    00001140: 	jne	.Ltmp3363 # Offset: 4416
    00001146: 	movq	-0x140(%rbp), %rax
    0000114d: 	movzbl	(%rax), %eax
    00001150: 	movb	%al, -0x50(%rbp)
    00001153: 	movq	%rbx, %rax
.Ltmp3382:
    00001156: 	movq	%r15, -0x58(%rbp)
    0000115a: 	movb	$0x0, (%rax,%r15)
    0000115f: 	movabsq	$0x3fffffffffffffff, %rax
    00001169: 	subq	-0x58(%rbp), %rax
    0000116d: 	cmpq	$0x10, %rax
    00001171: 	jbe	.Ltmp3364 # Offset: 4465
    00001177: 	movq	-0xf8(%rbp), %rdi
    0000117e: 	movl	$0x11, %edx
    00001183: 	leaq	DATAat0x373a6(%rip), %rsi
    0000118a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4490
    0000118f: 	subq	$0x8, %rsp
    00001193: 	pushq	-0xf8(%rbp)
    00001199: 	movq	%r13, %rdx
    0000119c: 	movq	%r12, %rsi
    0000119f: 	movq	-0x110(%rbp), %r8
    000011a6: 	leaq	_Z23interleave4to4_version5ImEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    000011ad: 	movq	%r14, %rdi
    000011b0: 	movq	-0x100(%rbp), %rcx
    000011b7: 	callq	"_Z19test_interleave4to4ImPFvPmPKmS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4535
    000011bc: 	movq	-0x60(%rbp), %rdi
    000011c0: 	popq	%rcx
    000011c1: 	popq	%rsi
    000011c2: 	cmpq	%rbx, %rdi
    000011c5: 	je	.Ltmp3365 # Offset: 4549
    000011c7: 	movq	-0x50(%rbp), %rax
    000011cb: 	leaq	0x1(%rax), %rsi
    000011cf: 	callq	_ZdlPvm@PLT # Offset: 4559
.Ltmp3365:
    000011d4: 	movq	-0xe0(%rbp), %rax
    000011db: 	movq	-0xd8(%rbp), %r15
    000011e2: 	movq	%rbx, -0x60(%rbp)
    000011e6: 	movq	%rax, %rcx
    000011e9: 	movq	%rax, -0x140(%rbp)
    000011f0: 	addq	%r15, %rcx
    000011f3: 	je	.Ltmp3366 # Offset: 4595
    000011f5: 	testq	%rax, %rax
    000011f8: 	je	.Ltmp3367 # Offset: 4600
.Ltmp3366:
    000011fe: 	movq	%r15, -0xe8(%rbp)
    00001205: 	cmpq	$0xf, %r15
    00001209: 	ja	.Ltmp3368 # Offset: 4617
    0000120f: 	cmpq	$0x1, %r15
    00001213: 	jne	.Ltmp3369 # Offset: 4627
    00001219: 	movq	-0x140(%rbp), %rax
    00001220: 	movzbl	(%rax), %eax
    00001223: 	movb	%al, -0x50(%rbp)
    00001226: 	movq	%rbx, %rax
.Ltmp3394:
    00001229: 	movq	%r15, -0x58(%rbp)
    0000122d: 	movb	$0x0, (%rax,%r15)
    00001232: 	movabsq	$0x3fffffffffffffff, %rax
    0000123c: 	subq	-0x58(%rbp), %rax
    00001240: 	cmpq	$0x10, %rax
    00001244: 	jbe	.Ltmp3370 # Offset: 4676
    0000124a: 	movq	-0xf8(%rbp), %rdi
    00001251: 	movl	$0x11, %edx
    00001256: 	leaq	DATAat0x373b8(%rip), %rsi
    0000125d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4701
    00001262: 	subq	$0x8, %rsp
    00001266: 	pushq	-0xf8(%rbp)
    0000126c: 	movq	%r13, %rdx
    0000126f: 	movq	%r12, %rsi
    00001272: 	movq	-0x110(%rbp), %r8
    00001279: 	leaq	_Z23interleave4to4_version6ImEvPT_PKS0_S3_S3_S3_i(%rip), %r9
    00001280: 	movq	%r14, %rdi
    00001283: 	movq	-0x100(%rbp), %rcx
    0000128a: 	callq	"_Z19test_interleave4to4ImPFvPmPKmS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.constprop.0/1" # Offset: 4746
    0000128f: 	movq	-0x60(%rbp), %rdi
    00001293: 	popq	%rax
    00001294: 	popq	%rdx
    00001295: 	cmpq	%rbx, %rdi
    00001298: 	je	.Ltmp3371 # Offset: 4760
    0000129a: 	movq	-0x50(%rbp), %rax
    0000129e: 	leaq	0x1(%rax), %rsi
    000012a2: 	callq	_ZdlPvm@PLT # Offset: 4770
.Ltmp3371:
    000012a7: 	movq	-0x108(%rbp), %rsi
    000012ae: 	movq	-0xf8(%rbp), %rdi
    000012b5: 	leaq	DATAat0x373ca(%rip), %rdx
    000012bc: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4796
    000012c1: 	movl	iterations(%rip), %edx
    000012c7: 	movq	-0x60(%rbp), %rdi
    000012cb: 	xorl	%r8d, %r8d
    000012ce: 	xorl	%ecx, %ecx
    000012d0: 	movl	$0x13880, %esi
    000012d5: 	callq	_Z9summarizePKciiii # Offset: 4821
    000012da: 	movl	-0x118(%rbp), %eax
    000012e0: 	movq	-0x60(%rbp), %rdi
    000012e4: 	movl	%eax, iterations(%rip)
    000012ea: 	cmpq	%rbx, %rdi
    000012ed: 	je	.Ltmp3372 # Offset: 4845
    000012ef: 	movq	-0x50(%rbp), %rax
    000012f3: 	leaq	0x1(%rax), %rsi
    000012f7: 	callq	_ZdlPvm@PLT # Offset: 4855
.Ltmp3372:
    000012fc: 	movq	-0x80(%rbp), %rdi
    00001300: 	cmpq	-0x130(%rbp), %rdi
    00001307: 	je	.Ltmp3373 # Offset: 4871
    00001309: 	movq	-0x70(%rbp), %rax
    0000130d: 	leaq	0x1(%rax), %rsi
    00001311: 	callq	_ZdlPvm@PLT # Offset: 4881
.Ltmp3373:
    00001316: 	movq	-0xa0(%rbp), %rdi
    0000131d: 	leaq	-0x90(%rbp), %rax
    00001324: 	cmpq	%rax, %rdi
    00001327: 	je	.Ltmp3374 # Offset: 4903
    00001329: 	movq	-0x90(%rbp), %rax
    00001330: 	leaq	0x1(%rax), %rsi
    00001334: 	callq	_ZdlPvm@PLT # Offset: 4916
.Ltmp3374:
    00001339: 	movq	-0xc0(%rbp), %rdi
    00001340: 	leaq	-0xb0(%rbp), %rax
    00001347: 	cmpq	%rax, %rdi
    0000134a: 	je	.Ltmp3375 # Offset: 4938
    0000134c: 	movq	-0xb0(%rbp), %rax
    00001353: 	leaq	0x1(%rax), %rsi
    00001357: 	callq	_ZdlPvm@PLT # Offset: 4951
.Ltmp3375:
    0000135c: 	movl	$0x8, %esi
    00001361: 	movq	%r14, %rdi
    00001364: 	callq	_ZdlPvm@PLT # Offset: 4964
    00001369: 	movq	-0x110(%rbp), %rdi
    00001370: 	movl	$0x8, %esi
    00001375: 	callq	_ZdlPvm@PLT # Offset: 4981
    0000137a: 	movq	-0x100(%rbp), %rdi
    00001381: 	movl	$0x8, %esi
    00001386: 	callq	_ZdlPvm@PLT # Offset: 4998
    0000138b: 	movl	$0x8, %esi
    00001390: 	movq	%r13, %rdi
    00001393: 	callq	_ZdlPvm@PLT # Offset: 5011
    00001398: 	movq	%r12, %rdi
    0000139b: 	movl	$0x8, %esi
    000013a0: 	callq	_ZdlPvm@PLT # Offset: 5024
    000013a5: 	movq	-0xe0(%rbp), %rdi
    000013ac: 	cmpq	-0x120(%rbp), %rdi
    000013b3: 	je	.Ltmp3376 # Offset: 5043
    000013b5: 	movq	-0xd0(%rbp), %rax
    000013bc: 	leaq	0x1(%rax), %rsi
    000013c0: 	callq	_ZdlPvm@PLT # Offset: 5056
.Ltmp3376:
    000013c5: 	movq	-0x38(%rbp), %rax
    000013c9: 	subq	%fs:0x28, %rax
    000013d2: 	jne	.Ltmp3377 # Offset: 5074
    000013d8: 	leaq	-0x28(%rbp), %rsp
    000013dc: 	popq	%rbx
    000013dd: 	popq	%r12
    000013df: 	popq	%r13
    000013e1: 	popq	%r14
    000013e3: 	popq	%r15
    000013e5: 	popq	%rbp
    000013e6: 	retq # Offset: 5094
    000013e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3275:
    000013f0: 	addq	$0x20, -0xf8(%rbp)
    000013f8: 	movq	-0xf8(%rbp), %rax
    000013ff: 	cmpq	%rbx, %rax
    00001402: 	jne	.Ltmp3276 # Offset: 5122
    00001408: 	addq	$0x8, %r13
    0000140c: 	cmpq	%r13, %r15
    0000140f: 	ja	.Ltmp3277 # Offset: 5135
    00001415: 	jmp	.Ltmp3378 # Offset: 5141
.Ltmp3295:
    0000141a: 	testq	%r15, %r15
    0000141d: 	jne	.Ltmp3379 # Offset: 5149
    00001423: 	movq	%rbx, %rax
    00001426: 	jmp	.Ltmp3380 # Offset: 5158
.Ltmp3363:
    0000142b: 	testq	%r15, %r15
    0000142e: 	jne	.Ltmp3381 # Offset: 5166
    00001434: 	movq	%rbx, %rax
    00001437: 	jmp	.Ltmp3382 # Offset: 5175
.Ltmp3354:
    0000143c: 	testq	%r15, %r15
    0000143f: 	jne	.Ltmp3383 # Offset: 5183
    00001445: 	movq	-0x130(%rbp), %rax
    0000144c: 	jmp	.Ltmp3384 # Offset: 5196
.Ltmp3348:
    00001451: 	testq	%r15, %r15
    00001454: 	jne	.Ltmp3385 # Offset: 5204
    0000145a: 	movq	%rbx, %rax
    0000145d: 	jmp	.Ltmp3386 # Offset: 5213
.Ltmp3340:
    00001462: 	testq	%r15, %r15
    00001465: 	jne	.Ltmp3387 # Offset: 5221
    0000146b: 	movq	%rbx, %rax
    0000146e: 	jmp	.Ltmp3388 # Offset: 5230
.Ltmp3331:
    00001473: 	testq	%r15, %r15
    00001476: 	jne	.Ltmp3389 # Offset: 5238
    0000147c: 	movq	%rbx, %rax
    0000147f: 	jmp	.Ltmp3390 # Offset: 5247
.Ltmp3324:
    00001484: 	testq	%r15, %r15
    00001487: 	jne	.Ltmp3391 # Offset: 5255
    0000148d: 	movq	%rbx, %rax
    00001490: 	jmp	.Ltmp3392 # Offset: 5264
.Ltmp3369:
    00001495: 	testq	%r15, %r15
    00001498: 	jne	.Ltmp3393 # Offset: 5272
    0000149e: 	movq	%rbx, %rax
    000014a1: 	jmp	.Ltmp3394 # Offset: 5281
.Ltmp3318:
    000014a6: 	testq	%r15, %r15
    000014a9: 	jne	.Ltmp3395 # Offset: 5289
    000014af: 	movq	%rbx, %rax
    000014b2: 	jmp	.Ltmp3396 # Offset: 5298
.Ltmp3311:
    000014b7: 	testq	%r15, %r15
    000014ba: 	jne	.Ltmp3397 # Offset: 5306
    000014c0: 	movq	%rbx, %rax
    000014c3: 	jmp	.Ltmp3398 # Offset: 5315
.Ltmp3304:
    000014c8: 	testq	%r15, %r15
    000014cb: 	jne	.Ltmp3399 # Offset: 5323
    000014d1: 	movq	%rbx, %rax
    000014d4: 	jmp	.Ltmp3400 # Offset: 5332
.Ltmp3323:
    000014d9: 	movq	-0xf8(%rbp), %rdi
    000014e0: 	leaq	-0xe8(%rbp), %rsi
    000014e7: 	xorl	%edx, %edx
    000014e9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5353
    000014ee: 	movq	%rax, -0x60(%rbp)
    000014f2: 	movq	%rax, %rdi
    000014f5: 	movq	-0xe8(%rbp), %rax
    000014fc: 	movq	%rax, -0x50(%rbp)
.Ltmp3410:
    00001500: 	movq	-0x130(%rbp), %rsi
    00001507: 	movq	%r15, %rdx
    0000150a: 	callq	memcpy@PLT # Offset: 5386
    0000150f: 	movq	-0xe8(%rbp), %r15
    00001516: 	movq	-0x60(%rbp), %rax
    0000151a: 	jmp	.Ltmp3392 # Offset: 5402
.Ltmp3317:
    0000151f: 	movq	-0xf8(%rbp), %rdi
    00001526: 	leaq	-0xe8(%rbp), %rsi
    0000152d: 	xorl	%edx, %edx
    0000152f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5423
    00001534: 	movq	%rax, -0x60(%rbp)
    00001538: 	movq	%rax, %rdi
    0000153b: 	movq	-0xe8(%rbp), %rax
    00001542: 	movq	%rax, -0x50(%rbp)
.Ltmp3412:
    00001546: 	movq	-0x130(%rbp), %rsi
    0000154d: 	movq	%r15, %rdx
    00001550: 	callq	memcpy@PLT # Offset: 5456
    00001555: 	movq	-0xe8(%rbp), %r15
    0000155c: 	movq	-0x60(%rbp), %rax
    00001560: 	jmp	.Ltmp3396 # Offset: 5472
.Ltmp3310:
    00001565: 	movq	-0xf8(%rbp), %rdi
    0000156c: 	leaq	-0xe8(%rbp), %rsi
    00001573: 	xorl	%edx, %edx
    00001575: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5493
    0000157a: 	movq	%rax, -0x60(%rbp)
    0000157e: 	movq	%rax, %rdi
    00001581: 	movq	-0xe8(%rbp), %rax
    00001588: 	movq	%rax, -0x50(%rbp)
.Ltmp3413:
    0000158c: 	movq	-0x130(%rbp), %rsi
    00001593: 	movq	%r15, %rdx
    00001596: 	callq	memcpy@PLT # Offset: 5526
    0000159b: 	movq	-0xe8(%rbp), %r15
    000015a2: 	movq	-0x60(%rbp), %rax
    000015a6: 	jmp	.Ltmp3398 # Offset: 5542
.Ltmp3303:
    000015ab: 	movq	-0xf8(%rbp), %rdi
    000015b2: 	leaq	-0xe8(%rbp), %rsi
    000015b9: 	xorl	%edx, %edx
    000015bb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5563
    000015c0: 	movq	%rax, -0x60(%rbp)
    000015c4: 	movq	%rax, %rdi
    000015c7: 	movq	-0xe8(%rbp), %rax
    000015ce: 	movq	%rax, -0x50(%rbp)
.Ltmp3414:
    000015d2: 	movq	-0x130(%rbp), %rsi
    000015d9: 	movq	%r15, %rdx
    000015dc: 	callq	memcpy@PLT # Offset: 5596
    000015e1: 	movq	-0xe8(%rbp), %r15
    000015e8: 	movq	-0x60(%rbp), %rax
    000015ec: 	jmp	.Ltmp3400 # Offset: 5612
.Ltmp3294:
    000015f1: 	leaq	-0xe8(%rbp), %rsi
    000015f8: 	leaq	-0x60(%rbp), %rdi
    000015fc: 	xorl	%edx, %edx
    000015fe: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5630
    00001603: 	movq	%rax, -0x60(%rbp)
    00001607: 	movq	%rax, %rdi
    0000160a: 	movq	-0xe8(%rbp), %rax
    00001611: 	movq	%rax, -0x50(%rbp)
.Ltmp3404:
    00001615: 	movq	-0xf8(%rbp), %rsi
    0000161c: 	movq	%r15, %rdx
    0000161f: 	callq	memcpy@PLT # Offset: 5663
    00001624: 	movq	-0xe8(%rbp), %r15
    0000162b: 	movq	-0x60(%rbp), %rax
    0000162f: 	jmp	.Ltmp3380 # Offset: 5679
.Ltmp3353:
    00001634: 	leaq	-0xe8(%rbp), %rsi
    0000163b: 	leaq	-0x80(%rbp), %rdi
    0000163f: 	xorl	%edx, %edx
    00001641: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5697
    00001646: 	movq	%rax, -0x80(%rbp)
    0000164a: 	movq	%rax, %rdi
    0000164d: 	movq	-0xe8(%rbp), %rax
    00001654: 	movq	%rax, -0x70(%rbp)
.Ltmp3406:
    00001658: 	movq	-0x148(%rbp), %rsi
    0000165f: 	movq	%r15, %rdx
    00001662: 	callq	memcpy@PLT # Offset: 5730
    00001667: 	movq	-0xe8(%rbp), %r15
    0000166e: 	movq	-0x80(%rbp), %rax
    00001672: 	jmp	.Ltmp3384 # Offset: 5746
.Ltmp3347:
    00001677: 	movq	-0xf8(%rbp), %rdi
    0000167e: 	leaq	-0xe8(%rbp), %rsi
    00001685: 	xorl	%edx, %edx
    00001687: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5767
    0000168c: 	movq	%rax, -0x60(%rbp)
    00001690: 	movq	%rax, %rdi
    00001693: 	movq	-0xe8(%rbp), %rax
    0000169a: 	movq	%rax, -0x50(%rbp)
.Ltmp3407:
    0000169e: 	movq	-0x130(%rbp), %rsi
    000016a5: 	movq	%r15, %rdx
    000016a8: 	callq	memcpy@PLT # Offset: 5800
    000016ad: 	movq	-0xe8(%rbp), %r15
    000016b4: 	movq	-0x60(%rbp), %rax
    000016b8: 	jmp	.Ltmp3386 # Offset: 5816
.Ltmp3368:
    000016bd: 	movq	-0xf8(%rbp), %rdi
    000016c4: 	leaq	-0xe8(%rbp), %rsi
    000016cb: 	xorl	%edx, %edx
    000016cd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5837
    000016d2: 	movq	%rax, -0x60(%rbp)
    000016d6: 	movq	%rax, %rdi
    000016d9: 	movq	-0xe8(%rbp), %rax
    000016e0: 	movq	%rax, -0x50(%rbp)
.Ltmp3411:
    000016e4: 	movq	-0x140(%rbp), %rsi
    000016eb: 	movq	%r15, %rdx
    000016ee: 	callq	memcpy@PLT # Offset: 5870
    000016f3: 	movq	-0xe8(%rbp), %r15
    000016fa: 	movq	-0x60(%rbp), %rax
    000016fe: 	jmp	.Ltmp3394 # Offset: 5886
.Ltmp3362:
    00001703: 	movq	-0xf8(%rbp), %rdi
    0000170a: 	leaq	-0xe8(%rbp), %rsi
    00001711: 	xorl	%edx, %edx
    00001713: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5907
    00001718: 	movq	%rax, -0x60(%rbp)
    0000171c: 	movq	%rax, %rdi
    0000171f: 	movq	-0xe8(%rbp), %rax
    00001726: 	movq	%rax, -0x50(%rbp)
.Ltmp3405:
    0000172a: 	movq	-0x140(%rbp), %rsi
    00001731: 	movq	%r15, %rdx
    00001734: 	callq	memcpy@PLT # Offset: 5940
    00001739: 	movq	-0xe8(%rbp), %r15
    00001740: 	movq	-0x60(%rbp), %rax
    00001744: 	jmp	.Ltmp3382 # Offset: 5956
.Ltmp3339:
    00001749: 	movq	-0xf8(%rbp), %rdi
    00001750: 	leaq	-0xe8(%rbp), %rsi
    00001757: 	xorl	%edx, %edx
    00001759: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5977
    0000175e: 	movq	%rax, -0x60(%rbp)
    00001762: 	movq	%rax, %rdi
    00001765: 	movq	-0xe8(%rbp), %rax
    0000176c: 	movq	%rax, -0x50(%rbp)
.Ltmp3408:
    00001770: 	movq	-0x130(%rbp), %rsi
    00001777: 	movq	%r15, %rdx
    0000177a: 	callq	memcpy@PLT # Offset: 6010
    0000177f: 	movq	-0xe8(%rbp), %r15
    00001786: 	movq	-0x60(%rbp), %rax
    0000178a: 	jmp	.Ltmp3388 # Offset: 6026
.Ltmp3330:
    0000178f: 	movq	-0xf8(%rbp), %rdi
    00001796: 	leaq	-0xe8(%rbp), %rsi
    0000179d: 	xorl	%edx, %edx
    0000179f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6047
    000017a4: 	movq	%rax, -0x60(%rbp)
    000017a8: 	movq	%rax, %rdi
    000017ab: 	movq	-0xe8(%rbp), %rax
    000017b2: 	movq	%rax, -0x50(%rbp)
.Ltmp3409:
    000017b6: 	movq	-0x130(%rbp), %rsi
    000017bd: 	movq	%r15, %rdx
    000017c0: 	callq	memcpy@PLT # Offset: 6080
    000017c5: 	movq	-0xe8(%rbp), %r15
    000017cc: 	movq	-0x60(%rbp), %rax
    000017d0: 	jmp	.Ltmp3390 # Offset: 6096
.Ltmp3278:
    000017d5: 	movq	-0x108(%rbp), %rcx
    000017dc: 	movq	%rsi, %rbx
    000017df: 	cmpq	%rcx, %rsi
    000017e2: 	je	.Ltmp3283 # Offset: 6114
.Ltmp3403:
    000017e8: 	movq	(%rbx), %rdi
    000017eb: 	leaq	0x10(%rbx), %rax
    000017ef: 	cmpq	%rax, %rdi
    000017f2: 	je	.Ltmp3401 # Offset: 6130
.Ltmp3402:
    000017f4: 	movq	0x10(%rbx), %rax
    000017f8: 	addq	$0x20, %rbx
    000017fc: 	leaq	0x1(%rax), %rsi
    00001800: 	movq	%rax, -0xf8(%rbp)
    00001807: 	callq	_ZdlPvm@PLT # Offset: 6151
    0000180c: 	cmpq	%rbx, -0x108(%rbp)
    00001813: 	je	.Ltmp3283 # Offset: 6163
    00001819: 	movq	(%rbx), %rdi
    0000181c: 	leaq	0x10(%rbx), %rax
    00001820: 	cmpq	%rax, %rdi
    00001823: 	jne	.Ltmp3402 # Offset: 6179
.Ltmp3401:
    00001825: 	movq	%rbx, %rax
    00001828: 	addq	$0x20, %rax
    0000182c: 	movq	%rax, %rbx
    0000182f: 	cmpq	%rax, -0x108(%rbp)
    00001836: 	jne	.Ltmp3403 # Offset: 6198
    00001838: 	jmp	.Ltmp3283 # Offset: 6200
.Ltmp3296:
    0000183d: 	leaq	DATAat0x37182(%rip), %rdi
    00001844: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6212
.Ltmp3302:
    00001849: 	leaq	DATAat0x37158(%rip), %rdi
    00001850: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6224
.Ltmp3305:
    00001855: 	leaq	DATAat0x37182(%rip), %rdi
    0000185c: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6236
.Ltmp3309:
    00001861: 	leaq	DATAat0x37158(%rip), %rdi
    00001868: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6248
.Ltmp3312:
    0000186d: 	leaq	DATAat0x37182(%rip), %rdi
    00001874: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6260
.Ltmp3316:
    00001879: 	leaq	DATAat0x37158(%rip), %rdi
    00001880: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6272
.Ltmp3319:
    00001885: 	leaq	DATAat0x37182(%rip), %rdi
    0000188c: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6284
.Ltmp3322:
    00001891: 	leaq	DATAat0x37158(%rip), %rdi
    00001898: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6296
.Ltmp3325:
    0000189d: 	leaq	DATAat0x37182(%rip), %rdi
    000018a4: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6308
.Ltmp3329:
    000018a9: 	leaq	DATAat0x37158(%rip), %rdi
    000018b0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6320
.Ltmp3332:
    000018b5: 	leaq	DATAat0x37182(%rip), %rdi
    000018bc: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6332
.Ltmp3338:
    000018c1: 	leaq	DATAat0x37158(%rip), %rdi
    000018c8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6344
.Ltmp3341:
    000018cd: 	leaq	DATAat0x37182(%rip), %rdi
    000018d4: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6356
.Ltmp3346:
    000018d9: 	leaq	DATAat0x37158(%rip), %rdi
    000018e0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6368
.Ltmp3349:
    000018e5: 	leaq	DATAat0x37182(%rip), %rdi
    000018ec: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6380
.Ltmp3352:
    000018f1: 	leaq	DATAat0x37158(%rip), %rdi
    000018f8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6392
.Ltmp3355:
    000018fd: 	leaq	DATAat0x37182(%rip), %rdi
    00001904: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6404
.Ltmp3361:
    00001909: 	leaq	DATAat0x37158(%rip), %rdi
    00001910: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6416
.Ltmp3364:
    00001915: 	leaq	DATAat0x37182(%rip), %rdi
    0000191c: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6428
.Ltmp3367:
    00001921: 	leaq	DATAat0x37158(%rip), %rdi
    00001928: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6440
.Ltmp3370:
    0000192d: 	leaq	DATAat0x37182(%rip), %rdi
    00001934: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6452
.Ltmp3377:
    00001939: 	callq	__stack_chk_fail@PLT # Offset: 6457
.Ltmp3379:
    0000193e: 	movq	%rbx, %rdi
    00001941: 	jmp	.Ltmp3404 # Offset: 6465
.Ltmp3381:
    00001946: 	movq	%rbx, %rdi
    00001949: 	jmp	.Ltmp3405 # Offset: 6473
.Ltmp3383:
    0000194e: 	movq	-0x130(%rbp), %rdi
    00001955: 	jmp	.Ltmp3406 # Offset: 6485
.Ltmp3385:
    0000195a: 	movq	%rbx, %rdi
    0000195d: 	jmp	.Ltmp3407 # Offset: 6493
.Ltmp3387:
    00001962: 	movq	%rbx, %rdi
    00001965: 	jmp	.Ltmp3408 # Offset: 6501
.Ltmp3389:
    0000196a: 	movq	%rbx, %rdi
    0000196d: 	jmp	.Ltmp3409 # Offset: 6509
.Ltmp3391:
    00001972: 	movq	%rbx, %rdi
    00001975: 	jmp	.Ltmp3410 # Offset: 6517
.Ltmp3393:
    0000197a: 	movq	%rbx, %rdi
    0000197d: 	jmp	.Ltmp3411 # Offset: 6525
.Ltmp3395:
    00001982: 	movq	%rbx, %rdi
    00001985: 	jmp	.Ltmp3412 # Offset: 6533
.Ltmp3397:
    0000198a: 	movq	%rbx, %rdi
    0000198d: 	jmp	.Ltmp3413 # Offset: 6541
.Ltmp3399:
    00001992: 	movq	%rbx, %rdi
    00001995: 	jmp	.Ltmp3414 # Offset: 6549
.Ltmp3293:
    0000199a: 	leaq	DATAat0x37158(%rip), %rdi
    000019a1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6561
    000019a6: 	endbr64
    000019aa: 	movq	%rax, %rbx
    000019ad: 	jmp	.Ltmp3415 # Offset: 6573
    000019b2: 	endbr64
    000019b6: 	movq	%rax, %rbx
    000019b9: 	jmp	.Ltmp3416 # Offset: 6585
.Ltmp3434:
    000019be: 	movq	-0x60(%rbp), %rdi
    000019c2: 	cmpq	%rbx, %rdi
    000019c5: 	jne	.Ltmp3417 # Offset: 6597
.Ltmp3437:
    000019cb: 	movq	%r15, %rbx
.Ltmp3425:
    000019ce: 	movq	-0xa0(%rbp), %rdi
    000019d5: 	leaq	-0x90(%rbp), %rax
    000019dc: 	cmpq	%rax, %rdi
    000019df: 	je	.Ltmp3418 # Offset: 6623
    000019e1: 	movq	-0x90(%rbp), %rax
    000019e8: 	leaq	0x1(%rax), %rsi
    000019ec: 	callq	_ZdlPvm@PLT # Offset: 6636
.Ltmp3418:
    000019f1: 	movq	-0xc0(%rbp), %rdi
    000019f8: 	leaq	-0xb0(%rbp), %rax
    000019ff: 	cmpq	%rax, %rdi
    00001a02: 	je	.Ltmp3419 # Offset: 6658
    00001a04: 	movq	-0xb0(%rbp), %rax
    00001a0b: 	leaq	0x1(%rax), %rsi
    00001a0f: 	callq	_ZdlPvm@PLT # Offset: 6671
.Ltmp3419:
    00001a14: 	movl	$0x8, %esi
    00001a19: 	movq	%r14, %rdi
    00001a1c: 	callq	_ZdlPvm@PLT # Offset: 6684
.Ltmp3430:
    00001a21: 	movq	-0x110(%rbp), %rdi
    00001a28: 	movl	$0x8, %esi
    00001a2d: 	callq	_ZdlPvm@PLT # Offset: 6701
.Ltmp3421:
    00001a32: 	movq	-0x100(%rbp), %rdi
    00001a39: 	movl	$0x8, %esi
    00001a3e: 	callq	_ZdlPvm@PLT # Offset: 6718
.Ltmp3426:
    00001a43: 	movl	$0x8, %esi
    00001a48: 	movq	%r13, %rdi
    00001a4b: 	callq	_ZdlPvm@PLT # Offset: 6731
.Ltmp3415:
    00001a50: 	movl	$0x8, %esi
    00001a55: 	movq	%r12, %rdi
    00001a58: 	callq	_ZdlPvm@PLT # Offset: 6744
.Ltmp3416:
    00001a5d: 	movq	-0xe0(%rbp), %rdi
    00001a64: 	cmpq	-0x120(%rbp), %rdi
    00001a6b: 	je	.Ltmp3420 # Offset: 6763
    00001a6d: 	movq	-0xd0(%rbp), %rax
    00001a74: 	leaq	0x1(%rax), %rsi
    00001a78: 	callq	_ZdlPvm@PLT # Offset: 6776
.Ltmp3420:
    00001a7d: 	movq	%rbx, %rdi
    00001a80: 	callq	_Unwind_Resume@PLT # Offset: 6784
    00001a85: 	endbr64
    00001a89: 	movq	%rax, %rbx
    00001a8c: 	jmp	.Ltmp3421 # Offset: 6796
    00001a8e: 	endbr64
.Ltmp3423:
    00001a92: 	movq	%rax, %r15
    00001a95: 	jmp	.Ltmp3422 # Offset: 6805
    00001a97: 	endbr64
    00001a9b: 	jmp	.Ltmp3423 # Offset: 6811
    00001a9d: 	endbr64
    00001aa1: 	jmp	.Ltmp3423 # Offset: 6817
.Ltmp3422:
    00001aa3: 	movq	-0x60(%rbp), %rdi
    00001aa7: 	cmpq	%rbx, %rdi
    00001aaa: 	je	.Ltmp3424 # Offset: 6826
    00001aac: 	movq	-0x50(%rbp), %rax
    00001ab0: 	leaq	0x1(%rax), %rsi
    00001ab4: 	callq	_ZdlPvm@PLT # Offset: 6836
.Ltmp3424:
    00001ab9: 	movq	%r15, %rbx
.Ltmp3435:
    00001abc: 	movq	-0x80(%rbp), %rdi
    00001ac0: 	cmpq	-0x130(%rbp), %rdi
    00001ac7: 	je	.Ltmp3425 # Offset: 6855
    00001acd: 	movq	-0x70(%rbp), %rax
    00001ad1: 	leaq	0x1(%rax), %rsi
    00001ad5: 	callq	_ZdlPvm@PLT # Offset: 6869
    00001ada: 	jmp	.Ltmp3425 # Offset: 6874
    00001adf: 	endbr64
    00001ae3: 	movq	%rax, %rbx
    00001ae6: 	jmp	.Ltmp3426 # Offset: 6886
    00001aeb: 	endbr64
.Ltmp3428:
    00001aef: 	movq	%rax, %r15
    00001af2: 	jmp	.Ltmp3427 # Offset: 6898
    00001af4: 	endbr64
    00001af8: 	jmp	.Ltmp3428 # Offset: 6904
    00001afa: 	endbr64
    00001afe: 	jmp	.Ltmp3428 # Offset: 6910
    00001b00: 	endbr64
    00001b04: 	jmp	.Ltmp3428 # Offset: 6916
    00001b06: 	endbr64
    00001b0a: 	jmp	.Ltmp3428 # Offset: 6922
    00001b0c: 	endbr64
    00001b10: 	jmp	.Ltmp3428 # Offset: 6928
    00001b12: 	endbr64
    00001b16: 	jmp	.Ltmp3428 # Offset: 6934
.Ltmp3427:
    00001b18: 	movq	-0x60(%rbp), %rdi
    00001b1c: 	cmpq	%rbx, %rdi
    00001b1f: 	je	.Ltmp3429 # Offset: 6943
    00001b21: 	movq	-0x50(%rbp), %rax
    00001b25: 	leaq	0x1(%rax), %rsi
    00001b29: 	callq	_ZdlPvm@PLT # Offset: 6953
.Ltmp3429:
    00001b2e: 	movq	%r15, %rbx
    00001b31: 	jmp	.Ltmp3418 # Offset: 6961
    00001b36: 	endbr64
    00001b3a: 	movq	%rax, %rbx
    00001b3d: 	jmp	.Ltmp3430 # Offset: 6973
    00001b42: 	endbr64
.Ltmp3432:
    00001b46: 	movq	%rax, %r15
    00001b49: 	jmp	.Ltmp3431 # Offset: 6985
    00001b4b: 	endbr64
    00001b4f: 	jmp	.Ltmp3432 # Offset: 6991
    00001b51: 	endbr64
    00001b55: 	jmp	.Ltmp3432 # Offset: 6997
    00001b57: 	endbr64
    00001b5b: 	jmp	.Ltmp3432 # Offset: 7003
    00001b5d: 	endbr64
    00001b61: 	jmp	.Ltmp3432 # Offset: 7009
    00001b63: 	endbr64
    00001b67: 	movq	%rax, %rbx
    00001b6a: 	jmp	.Ltmp3419 # Offset: 7018
    00001b6f: 	endbr64
    00001b73: 	jmp	.Ltmp3432 # Offset: 7027
.Ltmp3431:
    00001b75: 	movq	-0x60(%rbp), %rdi
    00001b79: 	cmpq	%rbx, %rdi
    00001b7c: 	je	.Ltmp3433 # Offset: 7036
    00001b7e: 	movq	-0x50(%rbp), %rax
    00001b82: 	leaq	0x1(%rax), %rsi
    00001b86: 	callq	_ZdlPvm@PLT # Offset: 7046
.Ltmp3433:
    00001b8b: 	movq	%r15, %rbx
    00001b8e: 	jmp	.Ltmp3419 # Offset: 7054
    00001b93: 	endbr64
.Ltmp3438:
    00001b97: 	movq	%rax, %r15
    00001b9a: 	jmp	.Ltmp3434 # Offset: 7066
    00001b9f: 	endbr64
    00001ba3: 	jmp	.Ltmp3432 # Offset: 7075
    00001ba5: 	endbr64
    00001ba9: 	jmp	.Ltmp3428 # Offset: 7081
    00001bae: 	endbr64
    00001bb2: 	jmp	.Ltmp3432 # Offset: 7090
    00001bb4: 	endbr64
    00001bb8: 	movq	%rax, %rbx
    00001bbb: 	jmp	.Ltmp3418 # Offset: 7099
    00001bc0: 	endbr64
    00001bc4: 	jmp	.Ltmp3432 # Offset: 7108
    00001bc6: 	endbr64
    00001bca: 	jmp	.Ltmp3432 # Offset: 7114
    00001bcf: 	endbr64
    00001bd3: 	jmp	.Ltmp3432 # Offset: 7123
    00001bd8: 	endbr64
    00001bdc: 	movq	%rax, %rbx
    00001bdf: 	jmp	.Ltmp3425 # Offset: 7135
    00001be4: 	endbr64
.Ltmp3436:
    00001be8: 	movq	%rax, %rbx
    00001beb: 	jmp	.Ltmp3435 # Offset: 7147
    00001bf0: 	endbr64
    00001bf4: 	jmp	.Ltmp3423 # Offset: 7156
    00001bf9: 	endbr64
    00001bfd: 	jmp	.Ltmp3423 # Offset: 7165
    00001c02: 	endbr64
    00001c06: 	jmp	.Ltmp3423 # Offset: 7174
    00001c0b: 	endbr64
    00001c0f: 	jmp	.Ltmp3423 # Offset: 7183
    00001c14: 	endbr64
    00001c18: 	jmp	.Ltmp3423 # Offset: 7192
    00001c1d: 	endbr64
    00001c21: 	jmp	.Ltmp3436 # Offset: 7201
    00001c23: 	endbr64
    00001c27: 	jmp	.Ltmp3423 # Offset: 7207
.Ltmp3417:
    00001c2c: 	movq	-0x50(%rbp), %rax
    00001c30: 	leaq	0x1(%rax), %rsi
    00001c34: 	callq	_ZdlPvm@PLT # Offset: 7220
    00001c39: 	jmp	.Ltmp3437 # Offset: 7225
    00001c3e: 	endbr64
    00001c42: 	jmp	.Ltmp3438 # Offset: 7234
    00001c47: 	endbr64
    00001c4b: 	jmp	.Ltmp3438 # Offset: 7243
    00001c50: 	endbr64
    00001c54: 	jmp	.Ltmp3438 # Offset: 7252
    00001c59: 	endbr64
    00001c5d: 	jmp	.Ltmp3438 # Offset: 7261
    00001c62: 	endbr64
    00001c66: 	jmp	.Ltmp3438 # Offset: 7270
    00001c6b: 	endbr64
    00001c6f: 	jmp	.Ltmp3438 # Offset: 7279
    00001c74: 	endbr64
    00001c78: 	jmp	.Ltmp3438 # Offset: 7288
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeImEvv"

Binary Function "_Z19test_interleave3to4IePFvPeePKeS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 254
  State       : disassembled
  Address     : 0x34820
  Size        : 0x34f
  MaxSize     : 0x350
  Offset      : 0x34820
  Section     : .text
  Orc Section : .local.text._Z19test_interleave3to4IePFvPeePKeS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0253:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%r8, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rcx, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rdx, %r12
    00000015: 	leal	(,%r9,4), %edx
    0000001d: 	pushq	%rbp
    0000001e: 	movslq	%edx, %rdx
    00000021: 	movl	%r9d, %ebp
    00000024: 	pushq	%rbx
    00000025: 	movq	%rdi, %rbx
    00000028: 	subq	$0x48, %rsp
    0000002c: 	movq	0x80(%rsp), %rax
    00000034: 	movq	%rsi, 0x8(%rsp)
    00000039: 	movq	%rax, 0x10(%rsp)
    0000003e: 	movq	0x88(%rsp), %rax
    00000046: 	movq	%rax, 0x18(%rsp)
    0000004b: 	movq	%fs:0x28, %rax
    00000054: 	movq	%rax, 0x38(%rsp)
    00000059: 	xorl	%eax, %eax
    0000005b: 	shlq	$0x4, %rdx
    0000005f: 	je	.Ltmp3439 # Offset: 95
    00000061: 	xorl	%esi, %esi
    00000063: 	callq	memset@PLT # Offset: 99
.Ltmp3439:
    00000068: 	movslq	%ebp, %rcx
    0000006b: 	movq	0x8(%rsp), %rsi
    00000070: 	movq	%rcx, %rdx
    00000073: 	movq	%rcx, 0x20(%rsp)
    00000078: 	fldt	(%rsi)
    0000007a: 	shlq	$0x4, %rdx
    0000007e: 	movq	%rsi, %rax
    00000081: 	addq	%rsi, %rdx
    00000084: 	cmpq	%rsi, %rdx
    00000087: 	je	.Ltmp3440 # Offset: 135
    00000089: 	nopl	(%rax) # Size: 7
.Ltmp3441:
    00000090: 	addq	$0x10, %rax
    00000094: 	fld	%st(0)
    00000096: 	fstpt	-0x10(%rax)
    00000099: 	cmpq	%rax, %rdx
    0000009c: 	jne	.Ltmp3441 # Offset: 156
    0000009e: 	fstp	%st(0)
    000000a0: 	jmp	.Ltmp3442 # Offset: 160
.Ltmp3440:
    000000a2: 	fstp	%st(0)
    000000a4: 	nopl	(%rax) # Size: 4
.Ltmp3442:
    000000a8: 	callq	clock@PLT # Offset: 168
    000000ad: 	movl	iterations(%rip), %ecx
    000000b3: 	xorl	%r15d, %r15d
    000000b6: 	movq	%rax, start_time(%rip)
    000000bd: 	testl	%ecx, %ecx
    000000bf: 	jle	.Ltmp3443 # Offset: 191
    000000c1: 	nopl	(%rax) # Size: 7
.Ltmp3444:
    000000c8: 	movq	0x8(%rsp), %rax
    000000cd: 	movq	%r13, %rdx
    000000d0: 	movl	%ebp, %r8d
    000000d3: 	movq	%r14, %rcx
    000000d6: 	movq	%r12, %rsi
    000000d9: 	movq	%rbx, %rdi
    000000dc: 	addl	$0x1, %r15d
    000000e0: 	pushq	0x8(%rax)
    000000e3: 	pushq	(%rax)
    000000e5: 	movq	0x20(%rsp), %rax
    000000ea: 	callq	*%rax # Offset: 234
    000000ec: 	cmpl	%r15d, iterations(%rip)
    000000f3: 	popq	%rax
    000000f4: 	popq	%rdx
    000000f5: 	jg	.Ltmp3444 # Offset: 245
.Ltmp3443:
    000000f7: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000fe: 	movq	"_ZL7gLabels/1"+48(%rip), %rcx
    00000105: 	subq	$0x20, %rax
    00000109: 	cmpq	%rax, %rcx
    0000010c: 	je	.Ltmp3445 # Offset: 268
    00000112: 	movq	0x18(%rsp), %rax
    00000117: 	leaq	0x10(%rcx), %rdi
    0000011b: 	movq	%rdi, (%rcx)
    0000011e: 	movq	(%rax), %r8
    00000121: 	movq	0x8(%rax), %r15
    00000125: 	movq	%r8, %rax
    00000128: 	addq	%r15, %rax
    0000012b: 	je	.Ltmp3446 # Offset: 299
    0000012d: 	testq	%r8, %r8
    00000130: 	je	.Ltmp3447 # Offset: 304
.Ltmp3446:
    00000136: 	movq	%r15, 0x30(%rsp)
    0000013b: 	cmpq	$0xf, %r15
    0000013f: 	ja	.Ltmp3448 # Offset: 319
    00000145: 	cmpq	$0x1, %r15
    00000149: 	jne	.Ltmp3449 # Offset: 329
    0000014f: 	movzbl	(%r8), %eax
    00000153: 	movb	%al, 0x10(%rcx)
.Ltmp3455:
    00000156: 	movq	%r15, 0x8(%rcx)
    0000015a: 	movb	$0x0, (%rdi,%r15)
    0000015f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000166: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000016d: 	addq	$0x20, %rax
    00000171: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000178: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000017f: 	je	.Ltmp3450 # Offset: 383
.Ltmp3456:
    00000185: 	movq	-0x20(%rax), %r15
    00000189: 	callq	clock@PLT # Offset: 393
    0000018e: 	pxor	%xmm0, %xmm0
    00000192: 	movq	%rax, end_time(%rip)
    00000199: 	movq	%r15, %rdi
    0000019c: 	subq	start_time(%rip), %rax
    000001a3: 	cvtsi2sd	%rax, %xmm0
    000001a8: 	divsd	DATAat0x37530(%rip), %xmm0
    000001b0: 	callq	_Z13record_resultdPKc # Offset: 432
    000001b5: 	movq	0x20(%rsp), %rdx
    000001ba: 	xorl	%eax, %eax
    000001bc: 	shlq	$0x4, %rdx
    000001c0: 	testl	%ebp, %ebp
    000001c2: 	jle	.Ltmp3451 # Offset: 450
.Ltmp3453:
    000001c4: 	movq	0x8(%rsp), %rdi
    000001c9: 	fldt	(%rdi,%rax)
    000001cc: 	fldt	(%rbx,%rax,4)
    000001cf: 	fucompi	%st(1), %st
    000001d1: 	fstp	%st(0)
    000001d3: 	jp	.Ltmp3452 # Offset: 467
    000001d9: 	jne	.Ltmp3452 # Offset: 473
    000001df: 	fldt	(%r12,%rax)
    000001e3: 	fldt	0x10(%rbx,%rax,4)
    000001e7: 	fucompi	%st(1), %st
    000001e9: 	fstp	%st(0)
    000001eb: 	jp	.Ltmp3452 # Offset: 491
    000001f1: 	jne	.Ltmp3452 # Offset: 497
    000001f7: 	fldt	(%r13,%rax)
    000001fc: 	fldt	0x20(%rbx,%rax,4)
    00000200: 	fucompi	%st(1), %st
    00000202: 	fstp	%st(0)
    00000204: 	jp	.Ltmp3452 # Offset: 516
    0000020a: 	jne	.Ltmp3452 # Offset: 522
    00000210: 	fldt	(%r14,%rax)
    00000214: 	fldt	0x30(%rbx,%rax,4)
    00000218: 	fucompi	%st(1), %st
    0000021a: 	fstp	%st(0)
    0000021c: 	jp	.Ltmp3452 # Offset: 540
    00000222: 	jne	.Ltmp3452 # Offset: 546
    00000228: 	addq	$0x10, %rax
    0000022c: 	cmpq	%rdx, %rax
    0000022f: 	jne	.Ltmp3453 # Offset: 559
.Ltmp3451:
    00000231: 	movq	0x38(%rsp), %rax
    00000236: 	subq	%fs:0x28, %rax
    0000023f: 	jne	.Ltmp3454 # Offset: 575
    00000245: 	addq	$0x48, %rsp
    00000249: 	popq	%rbx
    0000024a: 	popq	%rbp
    0000024b: 	popq	%r12
    0000024d: 	popq	%r13
    0000024f: 	popq	%r14
    00000251: 	popq	%r15
    00000253: 	retq # Offset: 595
    00000254: 	nopl	(%rax) # Size: 4
.Ltmp3448:
    00000258: 	movq	%rcx, %rdi
    0000025b: 	leaq	0x30(%rsp), %rsi
    00000260: 	xorl	%edx, %edx
    00000262: 	movq	%r8, 0x28(%rsp)
    00000267: 	movq	%rcx, 0x10(%rsp)
    0000026c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 620
    00000271: 	movq	0x10(%rsp), %rcx
    00000276: 	movq	0x28(%rsp), %r8
    0000027b: 	movq	%rax, %rdi
    0000027e: 	movq	%rax, (%rcx)
    00000281: 	movq	0x30(%rsp), %rax
    00000286: 	movq	%rax, 0x10(%rcx)
.Ltmp3457:
    0000028a: 	movq	%r15, %rdx
    0000028d: 	movq	%r8, %rsi
    00000290: 	movq	%rcx, 0x10(%rsp)
    00000295: 	callq	memcpy@PLT # Offset: 661
    0000029a: 	movq	0x10(%rsp), %rcx
    0000029f: 	movq	0x30(%rsp), %r15
    000002a4: 	movq	(%rcx), %rdi
    000002a7: 	jmp	.Ltmp3455 # Offset: 679
    000002ac: 	nopl	(%rax) # Size: 4
.Ltmp3452:
    000002b0: 	movq	0x38(%rsp), %rax
    000002b5: 	subq	%fs:0x28, %rax
    000002be: 	jne	.Ltmp3454 # Offset: 702
    000002c0: 	movq	0x18(%rsp), %rax
    000002c5: 	leaq	DATAat0x371c8(%rip), %rsi
    000002cc: 	movl	$0x1, %edi
    000002d1: 	movq	(%rax), %rdx
    000002d4: 	addq	$0x48, %rsp
    000002d8: 	xorl	%eax, %eax
    000002da: 	popq	%rbx
    000002db: 	popq	%rbp
    000002dc: 	popq	%r12
    000002de: 	popq	%r13
    000002e0: 	popq	%r14
    000002e2: 	popq	%r15
    000002e4: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 740
    000002e9: 	nopl	(%rax) # Size: 7
.Ltmp3445:
    000002f0: 	movq	0x18(%rsp), %rsi
    000002f5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000002fc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 764
    00000301: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000308: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000030f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000316: 	jne	.Ltmp3456 # Offset: 790
.Ltmp3450:
    0000031c: 	movq	-0x8(%rdx), %rax
    00000320: 	addq	$0x200, %rax
    00000326: 	jmp	.Ltmp3456 # Offset: 806
    0000032b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3449:
    00000330: 	testq	%r15, %r15
    00000333: 	je	.Ltmp3455 # Offset: 819
    00000339: 	jmp	.Ltmp3457 # Offset: 825
.Ltmp3454:
    0000033e: 	callq	__stack_chk_fail@PLT # Offset: 830
.Ltmp3447:
    00000343: 	leaq	DATAat0x37158(%rip), %rdi
    0000034a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 842
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_interleave3to4IePFvPeePKeS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIeEvv" after disassembly {
  Number      : 255
  State       : disassembled
  Address     : 0x34b70
  Size        : 0x1d02
  MaxSize     : 0x1d02
  Offset      : 0x34b70
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIeEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0254:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rsp, %rbp
    00000008: 	pushq	%r15
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	pushq	%r12
    00000010: 	movl	$0x6c62, %r12d
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x128, %rsp
    0000001e: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm0
    00000026: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm1
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, -0x38(%rbp)
    0000003b: 	xorl	%eax, %eax
    0000003d: 	leaq	-0xd0(%rbp), %rax
    00000044: 	movb	$0x65, -0xc6(%rbp)
    0000004b: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    00000052: 	movq	%rax, -0x148(%rbp)
    00000059: 	movhlps	%xmm0, %xmm4
    0000005c: 	movq	%xmm1, %rsi
    00000061: 	movq	%rax, -0xe0(%rbp)
    00000068: 	movq	%xmm4, %rcx
    0000006d: 	movabsq	$0x756f6420676e6f6c, %rax
    00000077: 	movq	%rax, -0xd0(%rbp)
    0000007e: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000085: 	movw	%r12w, -0xc8(%rbp)
    0000008d: 	leaq	0x8(%rcx), %r12
    00000091: 	movq	%rax, -0x108(%rbp)
    00000098: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000009f: 	movq	$0xb, -0xd8(%rbp)
    000000aa: 	movb	$0x0, -0xc5(%rbp)
    000000b1: 	movq	%rax, -0x118(%rbp)
    000000b8: 	movaps	%xmm1, -0x130(%rbp)
    000000bf: 	movaps	%xmm0, -0x140(%rbp)
    000000c6: 	movq	%xmm4, -0x120(%rbp)
    000000ce: 	movq	%xmm0, -0x110(%rbp)
    000000d6: 	cmpq	%r12, %rax
    000000d9: 	jbe	.Ltmp3458 # Offset: 217
    000000db: 	movq	%xmm1, -0x150(%rbp)
    000000e3: 	movq	%r12, %r13
    000000e6: 	movq	%rax, %r15
    000000e9: 	nopl	(%rax) # Size: 7
.Ltmp3461:
    000000f0: 	movq	(%r13), %rax
    000000f4: 	movq	%rax, -0xf8(%rbp)
    000000fb: 	leaq	0x200(%rax), %rbx
    00000102: 	nopw	(%rax,%rax) # Size: 6
.Ltmp3460:
    00000108: 	movq	-0xf8(%rbp), %rax
    0000010f: 	movq	(%rax), %rdi
    00000112: 	leaq	0x10(%rax), %rdx
    00000116: 	cmpq	%rdx, %rdi
    00000119: 	je	.Ltmp3459 # Offset: 281
    0000011f: 	movq	0x10(%rax), %rcx
    00000123: 	leaq	0x1(%rcx), %rsi
    00000127: 	movq	%rcx, -0x100(%rbp)
    0000012e: 	callq	_ZdlPvm@PLT # Offset: 302
    00000133: 	addq	$0x20, -0xf8(%rbp)
    0000013b: 	movq	-0xf8(%rbp), %rax
    00000142: 	cmpq	%rbx, %rax
    00000145: 	jne	.Ltmp3460 # Offset: 325
    00000147: 	addq	$0x8, %r13
    0000014b: 	cmpq	%r13, %r15
    0000014e: 	ja	.Ltmp3461 # Offset: 334
.Ltmp3557:
    00000150: 	movq	-0x150(%rbp), %rsi
.Ltmp3458:
    00000157: 	movq	-0x120(%rbp), %rcx
    0000015e: 	cmpq	%rcx, -0x118(%rbp)
    00000165: 	je	.Ltmp3462 # Offset: 357
    0000016b: 	movq	-0x110(%rbp), %rcx
    00000172: 	movq	%rsi, %rbx
    00000175: 	cmpq	%rcx, %rsi
    00000178: 	je	.Ltmp3463 # Offset: 376
.Ltmp3466:
    0000017a: 	movq	(%rbx), %rdi
    0000017d: 	leaq	0x10(%rbx), %rax
    00000181: 	cmpq	%rax, %rdi
    00000184: 	je	.Ltmp3464 # Offset: 388
.Ltmp3465:
    00000186: 	movq	0x10(%rbx), %rax
    0000018a: 	addq	$0x20, %rbx
    0000018e: 	leaq	0x1(%rax), %rsi
    00000192: 	movq	%rax, -0xf8(%rbp)
    00000199: 	callq	_ZdlPvm@PLT # Offset: 409
    0000019e: 	cmpq	-0x110(%rbp), %rbx
    000001a5: 	je	.Ltmp3463 # Offset: 421
    000001a7: 	movq	(%rbx), %rdi
    000001aa: 	leaq	0x10(%rbx), %rax
    000001ae: 	cmpq	%rax, %rdi
    000001b1: 	jne	.Ltmp3465 # Offset: 433
.Ltmp3464:
    000001b3: 	movq	%rbx, %rax
    000001b6: 	addq	$0x20, %rax
    000001ba: 	movq	%rax, %rbx
    000001bd: 	cmpq	-0x110(%rbp), %rax
    000001c4: 	jne	.Ltmp3466 # Offset: 452
    000001c6: 	cmpq	%r14, -0x108(%rbp)
    000001cd: 	je	.Ltmp3467 # Offset: 461
    000001cf: 	nop # Size: 1
.Ltmp3469:
    000001d0: 	movq	(%r14), %rdi
    000001d3: 	leaq	0x10(%r14), %rax
    000001d7: 	cmpq	%rax, %rdi
    000001da: 	je	.Ltmp3468 # Offset: 474
    000001dc: 	movq	0x10(%r14), %rax
    000001e0: 	leaq	0x1(%rax), %rsi
    000001e4: 	callq	_ZdlPvm@PLT # Offset: 484
.Ltmp3468:
    000001e9: 	addq	$0x20, %r14
.Ltmp3463:
    000001ed: 	cmpq	%r14, -0x108(%rbp)
    000001f4: 	jne	.Ltmp3469 # Offset: 500
.Ltmp3467:
    000001f6: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000001fd: 	leaq	0x8(%rax), %rbx
    00000201: 	cmpq	%r12, %rbx
    00000204: 	jbe	.Ltmp3470 # Offset: 516
    00000206: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp3471:
    00000210: 	movq	(%r12), %rdi
    00000214: 	movl	$0x200, %esi
    00000219: 	addq	$0x8, %r12
    0000021d: 	callq	_ZdlPvm@PLT # Offset: 541
    00000222: 	cmpq	%r12, %rbx
    00000225: 	ja	.Ltmp3471 # Offset: 549
.Ltmp3470:
    00000227: 	movzbl	init_value(%rip), %eax
    0000022e: 	movdqa	-0x130(%rbp), %xmm2
    00000236: 	movl	$0x138800, %edi
    0000023b: 	movdqa	-0x140(%rbp), %xmm3
    00000243: 	addq	$0x2a, %rax
    00000247: 	movaps	%xmm2, "_ZL7gLabels/1"+48(%rip)
    0000024e: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000255: 	movl	iterations(%rip), %eax
    0000025b: 	movaps	%xmm3, "_ZL7gLabels/1"+64(%rip)
    00000262: 	movl	%eax, -0x130(%rbp)
    00000268: 	callq	_Znam@PLT # Offset: 616
    0000026d: 	movl	$0x138800, %edi
    00000272: 	movq	%rax, %r12
    00000275: 	callq	_Znam@PLT # Offset: 629
    0000027a: 	movl	$0x138800, %edi
    0000027f: 	movq	%rax, %r13
    00000282: 	callq	_Znam@PLT # Offset: 642
    00000287: 	movl	$0x138800, %edi
    0000028c: 	movq	%rax, -0x108(%rbp)
    00000293: 	callq	_Znam@PLT # Offset: 659
    00000298: 	movl	$0x4e2000, %edi
    0000029d: 	movq	%rax, -0x118(%rbp)
    000002a4: 	callq	_Znam@PLT # Offset: 676
    000002a9: 	movq	%rax, %r14
    000002ac: 	movq	%r12, %rdx
    000002af: 	leaq	0x138800(%r12), %rdi
    000002b7: 	movabsq	$0x5851f42d4c957f2d, %rsi
    000002c1: 	movabsq	$0x14057b7ef767814f, %rcx
    000002cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp3472:
    000002d0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000002d7: 	addq	$0x10, %rdx
    000002db: 	imulq	%rsi, %rax
    000002df: 	addq	%rcx, %rax
    000002e2: 	movq	%rax, %r8
    000002e5: 	movq	%rax, %r9
    000002e8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000002ef: 	shrq	$0x14, %r8
    000002f3: 	shlq	$0x17, %r9
    000002f7: 	xorq	%r9, %r8
    000002fa: 	xorq	%r8, %rax
    000002fd: 	sarq	$0x3, %rax
    00000301: 	movq	%rax, -0xf8(%rbp)
    00000308: 	fildll	-0xf8(%rbp)
    0000030e: 	fstpt	-0x10(%rdx)
    00000311: 	cmpq	%rdi, %rdx
    00000314: 	jne	.Ltmp3472 # Offset: 788
    00000316: 	leaq	0x138800(%r13), %rdi
    0000031d: 	movq	%r13, %rdx
    00000320: 	movabsq	$0x5851f42d4c957f2d, %rsi
    0000032a: 	movabsq	$0x14057b7ef767814f, %rcx
    00000334: 	nopl	(%rax) # Size: 4
.Ltmp3473:
    00000338: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000033f: 	addq	$0x10, %rdx
    00000343: 	imulq	%rsi, %rax
    00000347: 	addq	%rcx, %rax
    0000034a: 	movq	%rax, %r8
    0000034d: 	movq	%rax, %r9
    00000350: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000357: 	shrq	$0x14, %r8
    0000035b: 	shlq	$0x17, %r9
    0000035f: 	xorq	%r9, %r8
    00000362: 	xorq	%r8, %rax
    00000365: 	sarq	$0x3, %rax
    00000369: 	movq	%rax, -0xf8(%rbp)
    00000370: 	fildll	-0xf8(%rbp)
    00000376: 	fstpt	-0x10(%rdx)
    00000379: 	cmpq	%rdx, %rdi
    0000037c: 	jne	.Ltmp3473 # Offset: 892
    0000037e: 	movq	-0x108(%rbp), %rdx
    00000385: 	movabsq	$0x5851f42d4c957f2d, %rsi
    0000038f: 	movabsq	$0x14057b7ef767814f, %rcx
    00000399: 	leaq	0x138800(%rdx), %rdi
.Ltmp3474:
    000003a0: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    000003a7: 	addq	$0x10, %rdx
    000003ab: 	imulq	%rsi, %rax
    000003af: 	addq	%rcx, %rax
    000003b2: 	movq	%rax, %r8
    000003b5: 	movq	%rax, %r9
    000003b8: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    000003bf: 	shrq	$0x14, %r8
    000003c3: 	shlq	$0x17, %r9
    000003c7: 	xorq	%r9, %r8
    000003ca: 	xorq	%r8, %rax
    000003cd: 	sarq	$0x3, %rax
    000003d1: 	movq	%rax, -0xf8(%rbp)
    000003d8: 	fildll	-0xf8(%rbp)
    000003de: 	fstpt	-0x10(%rdx)
    000003e1: 	cmpq	%rdx, %rdi
    000003e4: 	jne	.Ltmp3474 # Offset: 996
    000003e6: 	movq	-0x118(%rbp), %rdx
    000003ed: 	movabsq	$0x5851f42d4c957f2d, %rsi
    000003f7: 	movabsq	$0x14057b7ef767814f, %rcx
    00000401: 	leaq	0x138800(%rdx), %rdi
    00000408: 	nopl	(%rax,%rax) # Size: 8
.Ltmp3475:
    00000410: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    00000417: 	addq	$0x10, %rdx
    0000041b: 	imulq	%rsi, %rax
    0000041f: 	addq	%rcx, %rax
    00000422: 	movq	%rax, %r8
    00000425: 	movq	%rax, %r9
    00000428: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000042f: 	shrq	$0x14, %r8
    00000433: 	shlq	$0x17, %r9
    00000437: 	xorq	%r9, %r8
    0000043a: 	xorq	%r8, %rax
    0000043d: 	sarq	$0x3, %rax
    00000441: 	movq	%rax, -0xf8(%rbp)
    00000448: 	fildll	-0xf8(%rbp)
    0000044e: 	fstpt	-0x10(%rdx)
    00000451: 	cmpq	%rdx, %rdi
    00000454: 	jne	.Ltmp3475 # Offset: 1108
    00000456: 	movl	$0x4e2000, %edx
    0000045b: 	xorl	%esi, %esi
    0000045d: 	movq	%r14, %rdi
    00000460: 	callq	memset@PLT # Offset: 1120
    00000465: 	movl	-0x130(%rbp), %eax
    0000046b: 	leaq	-0xe0(%rbp), %rcx
    00000472: 	leaq	DATAat0x371d8(%rip), %rdx
    00000479: 	movq	%rcx, %rsi
    0000047c: 	movq	%rcx, -0x110(%rbp)
    00000483: 	movl	%eax, iterations(%rip)
    00000489: 	leaq	-0x60(%rbp), %rax
    0000048d: 	movq	%rax, %rdi
    00000490: 	movq	%rax, -0x100(%rbp)
    00000497: 	movq	%rax, %rbx
    0000049a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1178
    0000049f: 	movq	%rbx, %r9
    000004a2: 	leaq	_Z23interleave2to2_version1IeEvPT_PKS0_S3_i(%rip), %r8
    000004a9: 	movq	%r13, %rdx
    000004ac: 	movq	%r12, %rsi
    000004af: 	movl	$0x13880, %ecx
    000004b4: 	movq	%r14, %rdi
    000004b7: 	callq	_Z19test_interleave2to2IePFvPePKeS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1207
    000004bc: 	movq	-0x60(%rbp), %rdi
    000004c0: 	leaq	-0x50(%rbp), %rax
    000004c4: 	movq	%rax, -0xf8(%rbp)
    000004cb: 	cmpq	%rax, %rdi
    000004ce: 	je	.Ltmp3476 # Offset: 1230
    000004d0: 	movq	-0x50(%rbp), %rax
    000004d4: 	leaq	0x1(%rax), %rsi
    000004d8: 	callq	_ZdlPvm@PLT # Offset: 1240
.Ltmp3476:
    000004dd: 	movq	-0x100(%rbp), %rbx
    000004e4: 	movq	-0x110(%rbp), %rsi
    000004eb: 	leaq	DATAat0x371ea(%rip), %rdx
    000004f2: 	movq	%rbx, %rdi
    000004f5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1269
    000004fa: 	movq	%rbx, %r9
    000004fd: 	leaq	_Z23interleave2to2_version2IeEvPT_PKS0_S3_i(%rip), %r8
    00000504: 	movq	%r13, %rdx
    00000507: 	movq	%r12, %rsi
    0000050a: 	movl	$0x13880, %ecx
    0000050f: 	movq	%r14, %rdi
    00000512: 	callq	_Z19test_interleave2to2IePFvPePKeS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1298
    00000517: 	movq	-0x60(%rbp), %rdi
    0000051b: 	cmpq	-0xf8(%rbp), %rdi
    00000522: 	je	.Ltmp3477 # Offset: 1314
    00000524: 	movq	-0x50(%rbp), %rax
    00000528: 	leaq	0x1(%rax), %rsi
    0000052c: 	callq	_ZdlPvm@PLT # Offset: 1324
.Ltmp3477:
    00000531: 	movq	-0x100(%rbp), %rbx
    00000538: 	movq	-0x110(%rbp), %rsi
    0000053f: 	leaq	DATAat0x371fc(%rip), %rdx
    00000546: 	movq	%rbx, %rdi
    00000549: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1353
    0000054e: 	movq	%rbx, %r9
    00000551: 	leaq	_Z23interleave2to2_version3IeEvPT_PKS0_S3_i(%rip), %r8
    00000558: 	movq	%r13, %rdx
    0000055b: 	movq	%r12, %rsi
    0000055e: 	movl	$0x13880, %ecx
    00000563: 	movq	%r14, %rdi
    00000566: 	callq	_Z19test_interleave2to2IePFvPePKeS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1382
    0000056b: 	movq	-0x60(%rbp), %rdi
    0000056f: 	cmpq	-0xf8(%rbp), %rdi
    00000576: 	je	.Ltmp3478 # Offset: 1398
    00000578: 	movq	-0x50(%rbp), %rax
    0000057c: 	leaq	0x1(%rax), %rsi
    00000580: 	callq	_ZdlPvm@PLT # Offset: 1408
.Ltmp3478:
    00000585: 	movq	-0xf8(%rbp), %rax
    0000058c: 	movq	-0xe0(%rbp), %rbx
    00000593: 	movq	-0xd8(%rbp), %r15
    0000059a: 	movq	%rax, -0x60(%rbp)
    0000059e: 	movq	%rbx, %rax
    000005a1: 	addq	%r15, %rax
    000005a4: 	je	.Ltmp3479 # Offset: 1444
    000005a6: 	testq	%rbx, %rbx
    000005a9: 	je	.Ltmp3480 # Offset: 1449
.Ltmp3479:
    000005af: 	movq	%r15, -0xe8(%rbp)
    000005b6: 	cmpq	$0xf, %r15
    000005ba: 	ja	.Ltmp3481 # Offset: 1466
    000005c0: 	cmpq	$0x1, %r15
    000005c4: 	jne	.Ltmp3482 # Offset: 1476
    000005ca: 	movzbl	(%rbx), %eax
    000005cd: 	movb	%al, -0x50(%rbp)
    000005d0: 	movq	-0xf8(%rbp), %rax
.Ltmp3559:
    000005d7: 	movq	%r15, -0x58(%rbp)
    000005db: 	movb	$0x0, (%rax,%r15)
    000005e0: 	movabsq	$0x3fffffffffffffff, %rax
    000005ea: 	subq	-0x58(%rbp), %rax
    000005ee: 	cmpq	$0x10, %rax
    000005f2: 	jbe	.Ltmp3483 # Offset: 1522
    000005f8: 	movq	-0x100(%rbp), %rdi
    000005ff: 	movl	$0x11, %edx
    00000604: 	leaq	DATAat0x3720e(%rip), %rsi
    0000060b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1547
    00000610: 	movq	-0x100(%rbp), %r9
    00000617: 	movq	%r13, %rdx
    0000061a: 	movq	%r12, %rsi
    0000061d: 	movq	%r14, %rdi
    00000620: 	leaq	_Z23interleave2to2_version4IeEvPT_PKS0_S3_i(%rip), %r8
    00000627: 	movl	$0x13880, %ecx
    0000062c: 	callq	_Z19test_interleave2to2IePFvPePKeS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1580
    00000631: 	movq	-0x60(%rbp), %rdi
    00000635: 	cmpq	-0xf8(%rbp), %rdi
    0000063c: 	je	.Ltmp3484 # Offset: 1596
    0000063e: 	movq	-0x50(%rbp), %rax
    00000642: 	leaq	0x1(%rax), %rsi
    00000646: 	callq	_ZdlPvm@PLT # Offset: 1606
.Ltmp3484:
    0000064b: 	movq	-0xf8(%rbp), %rax
    00000652: 	movq	-0xe0(%rbp), %rbx
    00000659: 	movq	-0xd8(%rbp), %r15
    00000660: 	movq	%rax, -0x60(%rbp)
    00000664: 	movq	%rbx, %rax
    00000667: 	addq	%r15, %rax
    0000066a: 	je	.Ltmp3485 # Offset: 1642
    0000066c: 	testq	%rbx, %rbx
    0000066f: 	je	.Ltmp3486 # Offset: 1647
.Ltmp3485:
    00000675: 	movq	%r15, -0xe8(%rbp)
    0000067c: 	cmpq	$0xf, %r15
    00000680: 	ja	.Ltmp3487 # Offset: 1664
    00000686: 	cmpq	$0x1, %r15
    0000068a: 	jne	.Ltmp3488 # Offset: 1674
    00000690: 	movzbl	(%rbx), %eax
    00000693: 	movb	%al, -0x50(%rbp)
    00000696: 	movq	-0xf8(%rbp), %rax
.Ltmp3577:
    0000069d: 	movq	%r15, -0x58(%rbp)
    000006a1: 	movb	$0x0, (%rax,%r15)
    000006a6: 	movabsq	$0x3fffffffffffffff, %rax
    000006b0: 	subq	-0x58(%rbp), %rax
    000006b4: 	cmpq	$0x10, %rax
    000006b8: 	jbe	.Ltmp3489 # Offset: 1720
    000006be: 	movq	-0x100(%rbp), %rdi
    000006c5: 	movl	$0x11, %edx
    000006ca: 	leaq	DATAat0x37220(%rip), %rsi
    000006d1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1745
    000006d6: 	movq	-0x100(%rbp), %r9
    000006dd: 	movq	%r13, %rdx
    000006e0: 	movq	%r12, %rsi
    000006e3: 	movq	%r14, %rdi
    000006e6: 	leaq	_Z23interleave2to2_version5IeEvPT_PKS0_S3_i(%rip), %r8
    000006ed: 	movl	$0x13880, %ecx
    000006f2: 	callq	_Z19test_interleave2to2IePFvPePKeS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1778
    000006f7: 	movq	-0x60(%rbp), %rdi
    000006fb: 	cmpq	-0xf8(%rbp), %rdi
    00000702: 	je	.Ltmp3490 # Offset: 1794
    00000704: 	movq	-0x50(%rbp), %rax
    00000708: 	leaq	0x1(%rax), %rsi
    0000070c: 	callq	_ZdlPvm@PLT # Offset: 1804
.Ltmp3490:
    00000711: 	movq	-0x100(%rbp), %rbx
    00000718: 	movq	-0x110(%rbp), %rsi
    0000071f: 	leaq	DATAat0x37232(%rip), %rdx
    00000726: 	movq	%rbx, %rdi
    00000729: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1833
    0000072e: 	movq	%rbx, %r9
    00000731: 	leaq	_Z23interleave2to2_version6IeEvPT_PKS0_S3_i(%rip), %r8
    00000738: 	movq	%r13, %rdx
    0000073b: 	movq	%r12, %rsi
    0000073e: 	movl	$0x13880, %ecx
    00000743: 	movq	%r14, %rdi
    00000746: 	callq	_Z19test_interleave2to2IePFvPePKeS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1862
    0000074b: 	movq	-0x60(%rbp), %rdi
    0000074f: 	cmpq	-0xf8(%rbp), %rdi
    00000756: 	je	.Ltmp3491 # Offset: 1878
    00000758: 	movq	-0x50(%rbp), %rax
    0000075c: 	leaq	0x1(%rax), %rsi
    00000760: 	callq	_ZdlPvm@PLT # Offset: 1888
.Ltmp3491:
    00000765: 	movq	-0x100(%rbp), %rbx
    0000076c: 	movq	-0x110(%rbp), %rsi
    00000773: 	leaq	DATAat0x37244(%rip), %rdx
    0000077a: 	movq	%rbx, %rdi
    0000077d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1917
    00000782: 	movq	%rbx, %r9
    00000785: 	leaq	_Z23interleave2to2_version7IeEvPT_PKS0_S3_i(%rip), %r8
    0000078c: 	movq	%r13, %rdx
    0000078f: 	movq	%r12, %rsi
    00000792: 	movl	$0x13880, %ecx
    00000797: 	movq	%r14, %rdi
    0000079a: 	callq	_Z19test_interleave2to2IePFvPePKeS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1946
    0000079f: 	movq	-0x60(%rbp), %rdi
    000007a3: 	cmpq	-0xf8(%rbp), %rdi
    000007aa: 	je	.Ltmp3492 # Offset: 1962
    000007ac: 	movq	-0x50(%rbp), %rax
    000007b0: 	leaq	0x1(%rax), %rsi
    000007b4: 	callq	_ZdlPvm@PLT # Offset: 1972
.Ltmp3492:
    000007b9: 	movq	-0x100(%rbp), %rbx
    000007c0: 	movq	-0x110(%rbp), %rsi
    000007c7: 	leaq	DATAat0x37256(%rip), %rdx
    000007ce: 	movq	%rbx, %rdi
    000007d1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2001
    000007d6: 	movq	%rbx, %r9
    000007d9: 	leaq	_Z23interleave2to2_version8IeEvPT_PKS0_S3_i(%rip), %r8
    000007e0: 	movq	%r13, %rdx
    000007e3: 	movq	%r12, %rsi
    000007e6: 	movl	$0x13880, %ecx
    000007eb: 	movq	%r14, %rdi
    000007ee: 	callq	_Z19test_interleave2to2IePFvPePKeS2_iEEvPT_PKS5_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2030
    000007f3: 	movq	-0x60(%rbp), %rdi
    000007f7: 	cmpq	-0xf8(%rbp), %rdi
    000007fe: 	je	.Ltmp3493 # Offset: 2046
    00000800: 	movq	-0x50(%rbp), %rax
    00000804: 	leaq	0x1(%rax), %rsi
    00000808: 	callq	_ZdlPvm@PLT # Offset: 2056
.Ltmp3493:
    0000080d: 	movq	-0xe0(%rbp), %rbx
    00000814: 	leaq	-0xb0(%rbp), %rax
    0000081b: 	movq	-0xd8(%rbp), %r15
    00000822: 	movq	%rax, -0x140(%rbp)
    00000829: 	movq	%rax, -0xc0(%rbp)
    00000830: 	movq	%rbx, %rax
    00000833: 	addq	%r15, %rax
    00000836: 	je	.Ltmp3494 # Offset: 2102
    00000838: 	testq	%rbx, %rbx
    0000083b: 	je	.Ltmp3495 # Offset: 2107
.Ltmp3494:
    00000841: 	movq	%r15, -0xe8(%rbp)
    00000848: 	cmpq	$0xf, %r15
    0000084c: 	ja	.Ltmp3496 # Offset: 2124
    00000852: 	cmpq	$0x1, %r15
    00000856: 	jne	.Ltmp3497 # Offset: 2134
    0000085c: 	movzbl	(%rbx), %eax
    0000085f: 	movb	%al, -0xb0(%rbp)
    00000865: 	movq	-0x140(%rbp), %rax
.Ltmp3573:
    0000086c: 	movq	%r15, -0xb8(%rbp)
    00000873: 	movb	$0x0, (%rax,%r15)
    00000878: 	movabsq	$0x3fffffffffffffff, %rax
    00000882: 	subq	-0xb8(%rbp), %rax
    00000889: 	cmpq	$0xe, %rax
    0000088d: 	jbe	.Ltmp3498 # Offset: 2189
    00000893: 	leaq	-0xc0(%rbp), %rdi
    0000089a: 	movl	$0xf, %edx
    0000089f: 	leaq	DATAat0x37268(%rip), %rsi
    000008a6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2214
    000008ab: 	movl	iterations(%rip), %edx
    000008b1: 	xorl	%r8d, %r8d
    000008b4: 	xorl	%ecx, %ecx
    000008b6: 	movl	$0x13880, %esi
    000008bb: 	movq	-0xc0(%rbp), %rdi
    000008c2: 	callq	_Z9summarizePKciiii # Offset: 2242
    000008c7: 	movl	-0x130(%rbp), %eax
    000008cd: 	movq	-0x100(%rbp), %rbx
    000008d4: 	movq	-0x110(%rbp), %rsi
    000008db: 	leal	(%rax,%rax), %edx
    000008de: 	movq	%rbx, %rdi
    000008e1: 	movslq	%edx, %rax
    000008e4: 	sarl	$0x1f, %edx
    000008e7: 	imulq	$0x55555556, %rax, %rax
    000008ee: 	shrq	$0x20, %rax
    000008f2: 	subl	%edx, %eax
    000008f4: 	leaq	DATAat0x37278(%rip), %rdx
    000008fb: 	movl	%eax, iterations(%rip)
    00000901: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2305
    00000906: 	subq	$0x8, %rsp
    0000090a: 	movl	$0x13880, %r8d
    00000910: 	movq	%r13, %rdx
    00000913: 	movq	%r12, %rsi
    00000916: 	pushq	%rbx
    00000917: 	movq	-0x108(%rbp), %rcx
    0000091e: 	leaq	_Z23interleave3to3_version1IeEvPT_PKS0_S3_S3_i(%rip), %r9
    00000925: 	movq	%r14, %rdi
    00000928: 	callq	_Z19test_interleave3to3IePFvPePKeS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2344
    0000092d: 	popq	%r11
    0000092f: 	movq	-0x60(%rbp), %rdi
    00000933: 	popq	%rbx
    00000934: 	cmpq	-0xf8(%rbp), %rdi
    0000093b: 	je	.Ltmp3499 # Offset: 2363
    0000093d: 	movq	-0x50(%rbp), %rax
    00000941: 	leaq	0x1(%rax), %rsi
    00000945: 	callq	_ZdlPvm@PLT # Offset: 2373
.Ltmp3499:
    0000094a: 	movq	-0xf8(%rbp), %rax
    00000951: 	movq	-0xe0(%rbp), %rbx
    00000958: 	movq	-0xd8(%rbp), %r15
    0000095f: 	movq	%rax, -0x60(%rbp)
    00000963: 	movq	%rbx, %rax
    00000966: 	addq	%r15, %rax
    00000969: 	je	.Ltmp3500 # Offset: 2409
    0000096b: 	testq	%rbx, %rbx
    0000096e: 	je	.Ltmp3501 # Offset: 2414
.Ltmp3500:
    00000974: 	movq	%r15, -0xe8(%rbp)
    0000097b: 	cmpq	$0xf, %r15
    0000097f: 	ja	.Ltmp3502 # Offset: 2431
    00000985: 	cmpq	$0x1, %r15
    00000989: 	jne	.Ltmp3503 # Offset: 2441
    0000098f: 	movzbl	(%rbx), %eax
    00000992: 	movb	%al, -0x50(%rbp)
    00000995: 	movq	-0xf8(%rbp), %rax
.Ltmp3571:
    0000099c: 	movq	%r15, -0x58(%rbp)
    000009a0: 	movb	$0x0, (%rax,%r15)
    000009a5: 	movabsq	$0x3fffffffffffffff, %rax
    000009af: 	subq	-0x58(%rbp), %rax
    000009b3: 	cmpq	$0x10, %rax
    000009b7: 	jbe	.Ltmp3504 # Offset: 2487
    000009bd: 	movq	-0x100(%rbp), %rdi
    000009c4: 	movl	$0x11, %edx
    000009c9: 	leaq	DATAat0x3728a(%rip), %rsi
    000009d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2512
    000009d5: 	subq	$0x8, %rsp
    000009d9: 	pushq	-0x100(%rbp)
    000009df: 	movq	%r13, %rdx
    000009e2: 	movq	%r12, %rsi
    000009e5: 	movq	-0x108(%rbp), %rcx
    000009ec: 	leaq	_Z23interleave3to3_version2IeEvPT_PKS0_S3_S3_i(%rip), %r9
    000009f3: 	movl	$0x13880, %r8d
    000009f9: 	movq	%r14, %rdi
    000009fc: 	callq	_Z19test_interleave3to3IePFvPePKeS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2556
    00000a01: 	popq	%r9
    00000a03: 	movq	-0x60(%rbp), %rdi
    00000a07: 	popq	%r10
    00000a09: 	cmpq	-0xf8(%rbp), %rdi
    00000a10: 	je	.Ltmp3505 # Offset: 2576
    00000a12: 	movq	-0x50(%rbp), %rax
    00000a16: 	leaq	0x1(%rax), %rsi
    00000a1a: 	callq	_ZdlPvm@PLT # Offset: 2586
.Ltmp3505:
    00000a1f: 	movq	-0xf8(%rbp), %rax
    00000a26: 	movq	-0xe0(%rbp), %rbx
    00000a2d: 	movq	-0xd8(%rbp), %r15
    00000a34: 	movq	%rax, -0x60(%rbp)
    00000a38: 	movq	%rbx, %rax
    00000a3b: 	addq	%r15, %rax
    00000a3e: 	je	.Ltmp3506 # Offset: 2622
    00000a40: 	testq	%rbx, %rbx
    00000a43: 	je	.Ltmp3507 # Offset: 2627
.Ltmp3506:
    00000a49: 	movq	%r15, -0xe8(%rbp)
    00000a50: 	cmpq	$0xf, %r15
    00000a54: 	ja	.Ltmp3508 # Offset: 2644
    00000a5a: 	cmpq	$0x1, %r15
    00000a5e: 	jne	.Ltmp3509 # Offset: 2654
    00000a64: 	movzbl	(%rbx), %eax
    00000a67: 	movb	%al, -0x50(%rbp)
    00000a6a: 	movq	-0xf8(%rbp), %rax
.Ltmp3569:
    00000a71: 	movq	%r15, -0x58(%rbp)
    00000a75: 	movb	$0x0, (%rax,%r15)
    00000a7a: 	movabsq	$0x3fffffffffffffff, %rax
    00000a84: 	subq	-0x58(%rbp), %rax
    00000a88: 	cmpq	$0x10, %rax
    00000a8c: 	jbe	.Ltmp3510 # Offset: 2700
    00000a92: 	movq	-0x100(%rbp), %rdi
    00000a99: 	movl	$0x11, %edx
    00000a9e: 	leaq	DATAat0x3729c(%rip), %rsi
    00000aa5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2725
    00000aaa: 	subq	$0x8, %rsp
    00000aae: 	pushq	-0x100(%rbp)
    00000ab4: 	movq	%r13, %rdx
    00000ab7: 	movq	%r12, %rsi
    00000aba: 	movq	-0x108(%rbp), %rcx
    00000ac1: 	leaq	_Z23interleave3to3_version3IeEvPT_PKS0_S3_S3_i(%rip), %r9
    00000ac8: 	movl	$0x13880, %r8d
    00000ace: 	movq	%r14, %rdi
    00000ad1: 	callq	_Z19test_interleave3to3IePFvPePKeS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2769
    00000ad6: 	popq	%rdi
    00000ad7: 	movq	-0x60(%rbp), %rdi
    00000adb: 	popq	%r8
    00000add: 	cmpq	-0xf8(%rbp), %rdi
    00000ae4: 	je	.Ltmp3511 # Offset: 2788
    00000ae6: 	movq	-0x50(%rbp), %rax
    00000aea: 	leaq	0x1(%rax), %rsi
    00000aee: 	callq	_ZdlPvm@PLT # Offset: 2798
.Ltmp3511:
    00000af3: 	movq	-0xf8(%rbp), %rax
    00000afa: 	movq	-0xe0(%rbp), %rbx
    00000b01: 	movq	-0xd8(%rbp), %r15
    00000b08: 	movq	%rax, -0x60(%rbp)
    00000b0c: 	movq	%rbx, %rax
    00000b0f: 	addq	%r15, %rax
    00000b12: 	je	.Ltmp3512 # Offset: 2834
    00000b14: 	testq	%rbx, %rbx
    00000b17: 	je	.Ltmp3513 # Offset: 2839
.Ltmp3512:
    00000b1d: 	movq	%r15, -0xe8(%rbp)
    00000b24: 	cmpq	$0xf, %r15
    00000b28: 	ja	.Ltmp3514 # Offset: 2856
    00000b2e: 	cmpq	$0x1, %r15
    00000b32: 	jne	.Ltmp3515 # Offset: 2866
    00000b38: 	movzbl	(%rbx), %eax
    00000b3b: 	movb	%al, -0x50(%rbp)
    00000b3e: 	movq	-0xf8(%rbp), %rax
.Ltmp3567:
    00000b45: 	movq	%r15, -0x58(%rbp)
    00000b49: 	movb	$0x0, (%rax,%r15)
    00000b4e: 	movabsq	$0x3fffffffffffffff, %rax
    00000b58: 	subq	-0x58(%rbp), %rax
    00000b5c: 	cmpq	$0x10, %rax
    00000b60: 	jbe	.Ltmp3516 # Offset: 2912
    00000b66: 	movq	-0x100(%rbp), %rdi
    00000b6d: 	movl	$0x11, %edx
    00000b72: 	leaq	DATAat0x372ae(%rip), %rsi
    00000b79: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2937
    00000b7e: 	subq	$0x8, %rsp
    00000b82: 	pushq	-0x100(%rbp)
    00000b88: 	movq	%r13, %rdx
    00000b8b: 	movq	%r12, %rsi
    00000b8e: 	movq	-0x108(%rbp), %rcx
    00000b95: 	leaq	_Z23interleave3to3_version4IeEvPT_PKS0_S3_S3_i(%rip), %r9
    00000b9c: 	movl	$0x13880, %r8d
    00000ba2: 	movq	%r14, %rdi
    00000ba5: 	callq	_Z19test_interleave3to3IePFvPePKeS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2981
    00000baa: 	popq	%rcx
    00000bab: 	movq	-0x60(%rbp), %rdi
    00000baf: 	popq	%rsi
    00000bb0: 	cmpq	-0xf8(%rbp), %rdi
    00000bb7: 	je	.Ltmp3517 # Offset: 2999
    00000bb9: 	movq	-0x50(%rbp), %rax
    00000bbd: 	leaq	0x1(%rax), %rsi
    00000bc1: 	callq	_ZdlPvm@PLT # Offset: 3009
.Ltmp3517:
    00000bc6: 	movq	-0x100(%rbp), %rbx
    00000bcd: 	movq	-0x110(%rbp), %rsi
    00000bd4: 	leaq	DATAat0x372c0(%rip), %rdx
    00000bdb: 	movq	%rbx, %rdi
    00000bde: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3038
    00000be3: 	subq	$0x8, %rsp
    00000be7: 	movl	$0x13880, %r8d
    00000bed: 	movq	%r13, %rdx
    00000bf0: 	movq	%r12, %rsi
    00000bf3: 	pushq	%rbx
    00000bf4: 	movq	-0x108(%rbp), %rcx
    00000bfb: 	leaq	_Z23interleave3to3_version5IeEvPT_PKS0_S3_S3_i(%rip), %r9
    00000c02: 	movq	%r14, %rdi
    00000c05: 	callq	_Z19test_interleave3to3IePFvPePKeS2_S2_iEEvPT_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3077
    00000c0a: 	popq	%rax
    00000c0b: 	movq	-0x60(%rbp), %rdi
    00000c0f: 	popq	%rdx
    00000c10: 	cmpq	-0xf8(%rbp), %rdi
    00000c17: 	je	.Ltmp3518 # Offset: 3095
    00000c19: 	movq	-0x50(%rbp), %rax
    00000c1d: 	leaq	0x1(%rax), %rsi
    00000c21: 	callq	_ZdlPvm@PLT # Offset: 3105
.Ltmp3518:
    00000c26: 	movq	-0xe0(%rbp), %rbx
    00000c2d: 	leaq	-0x90(%rbp), %rax
    00000c34: 	movq	-0xd8(%rbp), %r15
    00000c3b: 	movq	%rax, -0x120(%rbp)
    00000c42: 	movq	%rax, -0xa0(%rbp)
    00000c49: 	movq	%rbx, %rax
    00000c4c: 	addq	%r15, %rax
    00000c4f: 	je	.Ltmp3519 # Offset: 3151
    00000c51: 	testq	%rbx, %rbx
    00000c54: 	je	.Ltmp3520 # Offset: 3156
.Ltmp3519:
    00000c5a: 	movq	%r15, -0xe8(%rbp)
    00000c61: 	cmpq	$0xf, %r15
    00000c65: 	ja	.Ltmp3521 # Offset: 3173
    00000c6b: 	cmpq	$0x1, %r15
    00000c6f: 	jne	.Ltmp3522 # Offset: 3183
    00000c75: 	movzbl	(%rbx), %eax
    00000c78: 	movb	%al, -0x90(%rbp)
    00000c7e: 	movq	-0x120(%rbp), %rax
.Ltmp3565:
    00000c85: 	movq	%r15, -0x98(%rbp)
    00000c8c: 	movb	$0x0, (%rax,%r15)
    00000c91: 	movabsq	$0x3fffffffffffffff, %rax
    00000c9b: 	subq	-0x98(%rbp), %rax
    00000ca2: 	cmpq	$0xe, %rax
    00000ca6: 	jbe	.Ltmp3523 # Offset: 3238
    00000cac: 	leaq	-0xa0(%rbp), %rdi
    00000cb3: 	movl	$0xf, %edx
    00000cb8: 	leaq	DATAat0x372d2(%rip), %rsi
    00000cbf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3263
    00000cc4: 	movl	iterations(%rip), %edx
    00000cca: 	xorl	%r8d, %r8d
    00000ccd: 	xorl	%ecx, %ecx
    00000ccf: 	movl	$0x13880, %esi
    00000cd4: 	movq	-0xa0(%rbp), %rdi
    00000cdb: 	callq	_Z9summarizePKciiii # Offset: 3291
    00000ce0: 	movl	-0x130(%rbp), %ecx
    00000ce6: 	movq	-0x100(%rbp), %rbx
    00000ced: 	leaq	DATAat0x372e2(%rip), %rdx
    00000cf4: 	movq	-0x110(%rbp), %rsi
    00000cfb: 	movl	%ecx, %eax
    00000cfd: 	movq	%rbx, %rdi
    00000d00: 	shrl	$0x1f, %eax
    00000d03: 	addl	%ecx, %eax
    00000d05: 	sarl	%eax
    00000d07: 	movl	%eax, -0x150(%rbp)
    00000d0d: 	movl	%eax, iterations(%rip)
    00000d13: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3347
    00000d18: 	leaq	_Z23interleave3to4_version1IeEvPT_S0_PKS0_S3_S3_i(%rip), %rax
    00000d1f: 	pushq	%rbx
    00000d20: 	movq	%r13, %rdx
    00000d23: 	movq	%r12, %rsi
    00000d26: 	pushq	%rax
    00000d27: 	movq	-0x118(%rbp), %r8
    00000d2e: 	movl	$0x13880, %r9d
    00000d34: 	movq	%r14, %rdi
    00000d37: 	movq	-0x108(%rbp), %rcx
    00000d3e: 	callq	_Z19test_interleave3to4IePFvPeePKeS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3390
    00000d43: 	popq	%r15
    00000d45: 	movq	-0x60(%rbp), %rdi
    00000d49: 	popq	%rax
    00000d4a: 	cmpq	-0xf8(%rbp), %rdi
    00000d51: 	je	.Ltmp3524 # Offset: 3409
    00000d53: 	movq	-0x50(%rbp), %rax
    00000d57: 	leaq	0x1(%rax), %rsi
    00000d5b: 	callq	_ZdlPvm@PLT # Offset: 3419
.Ltmp3524:
    00000d60: 	movq	-0x100(%rbp), %rbx
    00000d67: 	movq	-0x110(%rbp), %rsi
    00000d6e: 	leaq	DATAat0x372f4(%rip), %rdx
    00000d75: 	movq	%rbx, %rdi
    00000d78: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3448
    00000d7d: 	leaq	_Z23interleave3to4_version2IeEvPT_S0_PKS0_S3_S3_i(%rip), %rax
    00000d84: 	pushq	%rbx
    00000d85: 	movq	%r13, %rdx
    00000d88: 	movq	%r12, %rsi
    00000d8b: 	pushq	%rax
    00000d8c: 	movq	-0x118(%rbp), %r8
    00000d93: 	movl	$0x13880, %r9d
    00000d99: 	movq	%r14, %rdi
    00000d9c: 	movq	-0x108(%rbp), %rcx
    00000da3: 	callq	_Z19test_interleave3to4IePFvPeePKeS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3491
    00000da8: 	popq	%r11
    00000daa: 	movq	-0x60(%rbp), %rdi
    00000dae: 	popq	%rbx
    00000daf: 	cmpq	-0xf8(%rbp), %rdi
    00000db6: 	je	.Ltmp3525 # Offset: 3510
    00000db8: 	movq	-0x50(%rbp), %rax
    00000dbc: 	leaq	0x1(%rax), %rsi
    00000dc0: 	callq	_ZdlPvm@PLT # Offset: 3520
.Ltmp3525:
    00000dc5: 	movq	-0x100(%rbp), %rbx
    00000dcc: 	movq	-0x110(%rbp), %rsi
    00000dd3: 	leaq	DATAat0x37306(%rip), %rdx
    00000dda: 	movq	%rbx, %rdi
    00000ddd: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3549
    00000de2: 	leaq	_Z23interleave3to4_version3IeEvPT_S0_PKS0_S3_S3_i(%rip), %rax
    00000de9: 	pushq	%rbx
    00000dea: 	movq	%r13, %rdx
    00000ded: 	movq	%r12, %rsi
    00000df0: 	pushq	%rax
    00000df1: 	movq	-0x118(%rbp), %r8
    00000df8: 	movl	$0x13880, %r9d
    00000dfe: 	movq	%r14, %rdi
    00000e01: 	movq	-0x108(%rbp), %rcx
    00000e08: 	callq	_Z19test_interleave3to4IePFvPeePKeS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3592
    00000e0d: 	popq	%r9
    00000e0f: 	movq	-0x60(%rbp), %rdi
    00000e13: 	popq	%r10
    00000e15: 	cmpq	-0xf8(%rbp), %rdi
    00000e1c: 	je	.Ltmp3526 # Offset: 3612
    00000e1e: 	movq	-0x50(%rbp), %rax
    00000e22: 	leaq	0x1(%rax), %rsi
    00000e26: 	callq	_ZdlPvm@PLT # Offset: 3622
.Ltmp3526:
    00000e2b: 	movq	-0x100(%rbp), %rbx
    00000e32: 	movq	-0x110(%rbp), %rsi
    00000e39: 	leaq	DATAat0x37318(%rip), %rdx
    00000e40: 	movq	%rbx, %rdi
    00000e43: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3651
    00000e48: 	leaq	_Z23interleave3to4_version4IeEvPT_S0_PKS0_S3_S3_i(%rip), %rax
    00000e4f: 	pushq	%rbx
    00000e50: 	movq	%r13, %rdx
    00000e53: 	movq	%r12, %rsi
    00000e56: 	pushq	%rax
    00000e57: 	movq	-0x118(%rbp), %r8
    00000e5e: 	movl	$0x13880, %r9d
    00000e64: 	movq	%r14, %rdi
    00000e67: 	movq	-0x108(%rbp), %rcx
    00000e6e: 	callq	_Z19test_interleave3to4IePFvPeePKeS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3694
    00000e73: 	popq	%rdi
    00000e74: 	movq	-0x60(%rbp), %rdi
    00000e78: 	popq	%r8
    00000e7a: 	cmpq	-0xf8(%rbp), %rdi
    00000e81: 	je	.Ltmp3527 # Offset: 3713
    00000e83: 	movq	-0x50(%rbp), %rax
    00000e87: 	leaq	0x1(%rax), %rsi
    00000e8b: 	callq	_ZdlPvm@PLT # Offset: 3723
.Ltmp3527:
    00000e90: 	movq	-0x100(%rbp), %rbx
    00000e97: 	movq	-0x110(%rbp), %rsi
    00000e9e: 	leaq	DATAat0x3732a(%rip), %rdx
    00000ea5: 	movq	%rbx, %rdi
    00000ea8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3752
    00000ead: 	leaq	_Z23interleave3to4_version5IeEvPT_S0_PKS0_S3_S3_i(%rip), %rax
    00000eb4: 	pushq	%rbx
    00000eb5: 	movq	%r13, %rdx
    00000eb8: 	movq	%r12, %rsi
    00000ebb: 	pushq	%rax
    00000ebc: 	movq	-0x118(%rbp), %r8
    00000ec3: 	movl	$0x13880, %r9d
    00000ec9: 	movq	%r14, %rdi
    00000ecc: 	movq	-0x108(%rbp), %rcx
    00000ed3: 	callq	_Z19test_interleave3to4IePFvPeePKeS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3795
    00000ed8: 	popq	%rcx
    00000ed9: 	movq	-0x60(%rbp), %rdi
    00000edd: 	popq	%rsi
    00000ede: 	cmpq	-0xf8(%rbp), %rdi
    00000ee5: 	je	.Ltmp3528 # Offset: 3813
    00000ee7: 	movq	-0x50(%rbp), %rax
    00000eeb: 	leaq	0x1(%rax), %rsi
    00000eef: 	callq	_ZdlPvm@PLT # Offset: 3823
.Ltmp3528:
    00000ef4: 	movq	-0xf8(%rbp), %rax
    00000efb: 	movq	-0xe0(%rbp), %rbx
    00000f02: 	movq	-0xd8(%rbp), %r15
    00000f09: 	movq	%rax, -0x60(%rbp)
    00000f0d: 	movq	%rbx, %rax
    00000f10: 	addq	%r15, %rax
    00000f13: 	je	.Ltmp3529 # Offset: 3859
    00000f15: 	testq	%rbx, %rbx
    00000f18: 	je	.Ltmp3530 # Offset: 3864
.Ltmp3529:
    00000f1e: 	movq	%r15, -0xe8(%rbp)
    00000f25: 	cmpq	$0xf, %r15
    00000f29: 	ja	.Ltmp3531 # Offset: 3881
    00000f2f: 	cmpq	$0x1, %r15
    00000f33: 	jne	.Ltmp3532 # Offset: 3891
    00000f39: 	movzbl	(%rbx), %eax
    00000f3c: 	movb	%al, -0x50(%rbp)
    00000f3f: 	movq	-0xf8(%rbp), %rax
.Ltmp3563:
    00000f46: 	movq	%r15, -0x58(%rbp)
    00000f4a: 	movb	$0x0, (%rax,%r15)
    00000f4f: 	movabsq	$0x3fffffffffffffff, %rax
    00000f59: 	subq	-0x58(%rbp), %rax
    00000f5d: 	cmpq	$0x10, %rax
    00000f61: 	jbe	.Ltmp3533 # Offset: 3937
    00000f67: 	movq	-0x100(%rbp), %rdi
    00000f6e: 	movl	$0x11, %edx
    00000f73: 	leaq	DATAat0x3733c(%rip), %rsi
    00000f7a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3962
    00000f7f: 	leaq	_Z23interleave3to4_version6IeEvPT_S0_PKS0_S3_S3_i(%rip), %rax
    00000f86: 	pushq	-0x100(%rbp)
    00000f8c: 	movq	%r13, %rdx
    00000f8f: 	movq	-0x118(%rbp), %r8
    00000f96: 	pushq	%rax
    00000f97: 	movl	$0x13880, %r9d
    00000f9d: 	movq	%r12, %rsi
    00000fa0: 	movq	%r14, %rdi
    00000fa3: 	movq	-0x108(%rbp), %rcx
    00000faa: 	callq	_Z19test_interleave3to4IePFvPeePKeS2_S2_iEEvPT_S6_PKS5_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4010
    00000faf: 	popq	%rax
    00000fb0: 	movq	-0x60(%rbp), %rdi
    00000fb4: 	popq	%rdx
    00000fb5: 	cmpq	-0xf8(%rbp), %rdi
    00000fbc: 	je	.Ltmp3534 # Offset: 4028
    00000fbe: 	movq	-0x50(%rbp), %rax
    00000fc2: 	leaq	0x1(%rax), %rsi
    00000fc6: 	callq	_ZdlPvm@PLT # Offset: 4038
.Ltmp3534:
    00000fcb: 	movq	-0x110(%rbp), %rbx
    00000fd2: 	leaq	-0x80(%rbp), %rdi
    00000fd6: 	leaq	DATAat0x3734e(%rip), %rdx
    00000fdd: 	movq	%rbx, %rsi
    00000fe0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4064
    00000fe5: 	movl	iterations(%rip), %edx
    00000feb: 	movq	-0x80(%rbp), %rdi
    00000fef: 	xorl	%r8d, %r8d
    00000ff2: 	xorl	%ecx, %ecx
    00000ff4: 	movl	$0x13880, %esi
    00000ff9: 	callq	_Z9summarizePKciiii # Offset: 4089
    00000ffe: 	movq	%rbx, %rsi
    00001001: 	movq	-0x100(%rbp), %rbx
    00001008: 	movl	-0x150(%rbp), %eax
    0000100e: 	leaq	DATAat0x3735e(%rip), %rdx
    00001015: 	movq	%rbx, %rdi
    00001018: 	movl	%eax, iterations(%rip)
    0000101e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4126
    00001023: 	leaq	_Z23interleave4to4_version1IeEvPT_PKS0_S3_S3_S3_i(%rip), %rax
    0000102a: 	pushq	%rbx
    0000102b: 	movq	%r13, %rdx
    0000102e: 	movq	%r12, %rsi
    00001031: 	pushq	%rax
    00001032: 	movq	-0x118(%rbp), %r8
    00001039: 	movl	$0x13880, %r9d
    0000103f: 	movq	%r14, %rdi
    00001042: 	movq	-0x108(%rbp), %rcx
    00001049: 	callq	_Z19test_interleave4to4IePFvPePKeS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4169
    0000104e: 	popq	%r15
    00001050: 	movq	-0x60(%rbp), %rdi
    00001054: 	popq	%rax
    00001055: 	cmpq	-0xf8(%rbp), %rdi
    0000105c: 	je	.Ltmp3535 # Offset: 4188
    0000105e: 	movq	-0x50(%rbp), %rax
    00001062: 	leaq	0x1(%rax), %rsi
    00001066: 	callq	_ZdlPvm@PLT # Offset: 4198
.Ltmp3535:
    0000106b: 	movq	-0x100(%rbp), %rbx
    00001072: 	movq	-0x110(%rbp), %rsi
    00001079: 	leaq	DATAat0x37370(%rip), %rdx
    00001080: 	movq	%rbx, %rdi
    00001083: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4227
    00001088: 	leaq	_Z23interleave4to4_version2IeEvPT_PKS0_S3_S3_S3_i(%rip), %rax
    0000108f: 	pushq	%rbx
    00001090: 	movq	%r13, %rdx
    00001093: 	movq	%r12, %rsi
    00001096: 	pushq	%rax
    00001097: 	movq	-0x118(%rbp), %r8
    0000109e: 	movl	$0x13880, %r9d
    000010a4: 	movq	%r14, %rdi
    000010a7: 	movq	-0x108(%rbp), %rcx
    000010ae: 	callq	_Z19test_interleave4to4IePFvPePKeS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4270
    000010b3: 	popq	%r11
    000010b5: 	movq	-0x60(%rbp), %rdi
    000010b9: 	popq	%rbx
    000010ba: 	cmpq	-0xf8(%rbp), %rdi
    000010c1: 	je	.Ltmp3536 # Offset: 4289
    000010c3: 	movq	-0x50(%rbp), %rax
    000010c7: 	leaq	0x1(%rax), %rsi
    000010cb: 	callq	_ZdlPvm@PLT # Offset: 4299
.Ltmp3536:
    000010d0: 	movq	-0xf8(%rbp), %rax
    000010d7: 	movq	-0xe0(%rbp), %rbx
    000010de: 	movq	-0xd8(%rbp), %r15
    000010e5: 	movq	%rax, -0x60(%rbp)
    000010e9: 	movq	%rbx, %rax
    000010ec: 	addq	%r15, %rax
    000010ef: 	je	.Ltmp3537 # Offset: 4335
    000010f1: 	testq	%rbx, %rbx
    000010f4: 	je	.Ltmp3538 # Offset: 4340
.Ltmp3537:
    000010fa: 	movq	%r15, -0xe8(%rbp)
    00001101: 	cmpq	$0xf, %r15
    00001105: 	ja	.Ltmp3539 # Offset: 4357
    0000110b: 	cmpq	$0x1, %r15
    0000110f: 	jne	.Ltmp3540 # Offset: 4367
    00001115: 	movzbl	(%rbx), %eax
    00001118: 	movb	%al, -0x50(%rbp)
    0000111b: 	movq	-0xf8(%rbp), %rax
.Ltmp3561:
    00001122: 	movq	%r15, -0x58(%rbp)
    00001126: 	movb	$0x0, (%rax,%r15)
    0000112b: 	movabsq	$0x3fffffffffffffff, %rax
    00001135: 	subq	-0x58(%rbp), %rax
    00001139: 	cmpq	$0x10, %rax
    0000113d: 	jbe	.Ltmp3541 # Offset: 4413
    00001143: 	movq	-0x100(%rbp), %rdi
    0000114a: 	movl	$0x11, %edx
    0000114f: 	leaq	DATAat0x37382(%rip), %rsi
    00001156: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4438
    0000115b: 	leaq	_Z23interleave4to4_version3IeEvPT_PKS0_S3_S3_S3_i(%rip), %rax
    00001162: 	pushq	-0x100(%rbp)
    00001168: 	movq	%r13, %rdx
    0000116b: 	movq	-0x118(%rbp), %r8
    00001172: 	pushq	%rax
    00001173: 	movl	$0x13880, %r9d
    00001179: 	movq	%r12, %rsi
    0000117c: 	movq	%r14, %rdi
    0000117f: 	movq	-0x108(%rbp), %rcx
    00001186: 	callq	_Z19test_interleave4to4IePFvPePKeS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4486
    0000118b: 	popq	%r9
    0000118d: 	movq	-0x60(%rbp), %rdi
    00001191: 	popq	%r10
    00001193: 	cmpq	-0xf8(%rbp), %rdi
    0000119a: 	je	.Ltmp3542 # Offset: 4506
    0000119c: 	movq	-0x50(%rbp), %rax
    000011a0: 	leaq	0x1(%rax), %rsi
    000011a4: 	callq	_ZdlPvm@PLT # Offset: 4516
.Ltmp3542:
    000011a9: 	movq	-0x100(%rbp), %rbx
    000011b0: 	movq	-0x110(%rbp), %rsi
    000011b7: 	leaq	DATAat0x37394(%rip), %rdx
    000011be: 	movq	%rbx, %rdi
    000011c1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4545
    000011c6: 	leaq	_Z23interleave4to4_version4IeEvPT_PKS0_S3_S3_S3_i(%rip), %rax
    000011cd: 	pushq	%rbx
    000011ce: 	movq	%r13, %rdx
    000011d1: 	movq	%r12, %rsi
    000011d4: 	pushq	%rax
    000011d5: 	movq	-0x118(%rbp), %r8
    000011dc: 	movl	$0x13880, %r9d
    000011e2: 	movq	%r14, %rdi
    000011e5: 	movq	-0x108(%rbp), %rcx
    000011ec: 	callq	_Z19test_interleave4to4IePFvPePKeS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4588
    000011f1: 	popq	%rdi
    000011f2: 	movq	-0x60(%rbp), %rdi
    000011f6: 	popq	%r8
    000011f8: 	cmpq	-0xf8(%rbp), %rdi
    000011ff: 	je	.Ltmp3543 # Offset: 4607
    00001201: 	movq	-0x50(%rbp), %rax
    00001205: 	leaq	0x1(%rax), %rsi
    00001209: 	callq	_ZdlPvm@PLT # Offset: 4617
.Ltmp3543:
    0000120e: 	movq	-0x100(%rbp), %rbx
    00001215: 	movq	-0x110(%rbp), %rsi
    0000121c: 	leaq	DATAat0x373a6(%rip), %rdx
    00001223: 	movq	%rbx, %rdi
    00001226: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4646
    0000122b: 	leaq	_Z23interleave4to4_version5IeEvPT_PKS0_S3_S3_S3_i(%rip), %rax
    00001232: 	pushq	%rbx
    00001233: 	movq	%r13, %rdx
    00001236: 	movq	%r12, %rsi
    00001239: 	pushq	%rax
    0000123a: 	movq	-0x118(%rbp), %r8
    00001241: 	movl	$0x13880, %r9d
    00001247: 	movq	%r14, %rdi
    0000124a: 	movq	-0x108(%rbp), %rcx
    00001251: 	callq	_Z19test_interleave4to4IePFvPePKeS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4689
    00001256: 	popq	%rcx
    00001257: 	movq	-0x60(%rbp), %rdi
    0000125b: 	popq	%rsi
    0000125c: 	cmpq	-0xf8(%rbp), %rdi
    00001263: 	je	.Ltmp3544 # Offset: 4707
    00001265: 	movq	-0x50(%rbp), %rax
    00001269: 	leaq	0x1(%rax), %rsi
    0000126d: 	callq	_ZdlPvm@PLT # Offset: 4717
.Ltmp3544:
    00001272: 	movq	-0xf8(%rbp), %rax
    00001279: 	movq	-0xe0(%rbp), %rbx
    00001280: 	movq	-0xd8(%rbp), %r15
    00001287: 	movq	%rax, -0x60(%rbp)
    0000128b: 	movq	%rbx, %rax
    0000128e: 	addq	%r15, %rax
    00001291: 	je	.Ltmp3545 # Offset: 4753
    00001293: 	testq	%rbx, %rbx
    00001296: 	je	.Ltmp3546 # Offset: 4758
.Ltmp3545:
    0000129c: 	movq	%r15, -0xe8(%rbp)
    000012a3: 	cmpq	$0xf, %r15
    000012a7: 	ja	.Ltmp3547 # Offset: 4775
    000012ad: 	cmpq	$0x1, %r15
    000012b1: 	jne	.Ltmp3548 # Offset: 4785
    000012b7: 	movzbl	(%rbx), %eax
    000012ba: 	movb	%al, -0x50(%rbp)
    000012bd: 	movq	-0xf8(%rbp), %rax
.Ltmp3575:
    000012c4: 	movq	%r15, -0x58(%rbp)
    000012c8: 	movb	$0x0, (%rax,%r15)
    000012cd: 	movabsq	$0x3fffffffffffffff, %rax
    000012d7: 	subq	-0x58(%rbp), %rax
    000012db: 	cmpq	$0x10, %rax
    000012df: 	jbe	.Ltmp3549 # Offset: 4831
    000012e5: 	movq	-0x100(%rbp), %rdi
    000012ec: 	movl	$0x11, %edx
    000012f1: 	leaq	DATAat0x373b8(%rip), %rsi
    000012f8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4856
    000012fd: 	leaq	_Z23interleave4to4_version6IeEvPT_PKS0_S3_S3_S3_i(%rip), %rax
    00001304: 	pushq	-0x100(%rbp)
    0000130a: 	movq	%r13, %rdx
    0000130d: 	movq	-0x118(%rbp), %r8
    00001314: 	pushq	%rax
    00001315: 	movl	$0x13880, %r9d
    0000131b: 	movq	%r12, %rsi
    0000131e: 	movq	%r14, %rdi
    00001321: 	movq	-0x108(%rbp), %rcx
    00001328: 	callq	_Z19test_interleave4to4IePFvPePKeS2_S2_S2_iEEvPT_PKS5_S8_S8_S8_iT0_NSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 4904
    0000132d: 	popq	%rax
    0000132e: 	movq	-0x60(%rbp), %rdi
    00001332: 	popq	%rdx
    00001333: 	cmpq	-0xf8(%rbp), %rdi
    0000133a: 	je	.Ltmp3550 # Offset: 4922
    0000133c: 	movq	-0x50(%rbp), %rax
    00001340: 	leaq	0x1(%rax), %rsi
    00001344: 	callq	_ZdlPvm@PLT # Offset: 4932
.Ltmp3550:
    00001349: 	movq	-0x110(%rbp), %rsi
    00001350: 	movq	-0x100(%rbp), %rdi
    00001357: 	leaq	DATAat0x373ca(%rip), %rdx
    0000135e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4958
    00001363: 	movl	iterations(%rip), %edx
    00001369: 	movq	-0x60(%rbp), %rdi
    0000136d: 	xorl	%r8d, %r8d
    00001370: 	xorl	%ecx, %ecx
    00001372: 	movl	$0x13880, %esi
    00001377: 	callq	_Z9summarizePKciiii # Offset: 4983
    0000137c: 	movl	-0x130(%rbp), %eax
    00001382: 	movq	-0x60(%rbp), %rdi
    00001386: 	movl	%eax, iterations(%rip)
    0000138c: 	cmpq	-0xf8(%rbp), %rdi
    00001393: 	je	.Ltmp3551 # Offset: 5011
    00001395: 	movq	-0x50(%rbp), %rax
    00001399: 	leaq	0x1(%rax), %rsi
    0000139d: 	callq	_ZdlPvm@PLT # Offset: 5021
.Ltmp3551:
    000013a2: 	movq	-0x80(%rbp), %rdi
    000013a6: 	leaq	-0x70(%rbp), %rax
    000013aa: 	cmpq	%rax, %rdi
    000013ad: 	je	.Ltmp3552 # Offset: 5037
    000013af: 	movq	-0x70(%rbp), %rax
    000013b3: 	leaq	0x1(%rax), %rsi
    000013b7: 	callq	_ZdlPvm@PLT # Offset: 5047
.Ltmp3552:
    000013bc: 	movq	-0xa0(%rbp), %rdi
    000013c3: 	cmpq	-0x120(%rbp), %rdi
    000013ca: 	je	.Ltmp3553 # Offset: 5066
    000013cc: 	movq	-0x90(%rbp), %rax
    000013d3: 	leaq	0x1(%rax), %rsi
    000013d7: 	callq	_ZdlPvm@PLT # Offset: 5079
.Ltmp3553:
    000013dc: 	movq	-0xc0(%rbp), %rdi
    000013e3: 	cmpq	-0x140(%rbp), %rdi
    000013ea: 	je	.Ltmp3554 # Offset: 5098
    000013ec: 	movq	-0xb0(%rbp), %rax
    000013f3: 	leaq	0x1(%rax), %rsi
    000013f7: 	callq	_ZdlPvm@PLT # Offset: 5111
.Ltmp3554:
    000013fc: 	movl	$0x10, %esi
    00001401: 	movq	%r14, %rdi
    00001404: 	callq	_ZdlPvm@PLT # Offset: 5124
    00001409: 	movq	-0x118(%rbp), %rdi
    00001410: 	movl	$0x10, %esi
    00001415: 	callq	_ZdlPvm@PLT # Offset: 5141
    0000141a: 	movq	-0x108(%rbp), %rdi
    00001421: 	movl	$0x10, %esi
    00001426: 	callq	_ZdlPvm@PLT # Offset: 5158
    0000142b: 	movl	$0x10, %esi
    00001430: 	movq	%r13, %rdi
    00001433: 	callq	_ZdlPvm@PLT # Offset: 5171
    00001438: 	movq	%r12, %rdi
    0000143b: 	movl	$0x10, %esi
    00001440: 	callq	_ZdlPvm@PLT # Offset: 5184
    00001445: 	movq	-0xe0(%rbp), %rdi
    0000144c: 	cmpq	-0x148(%rbp), %rdi
    00001453: 	je	.Ltmp3555 # Offset: 5203
    00001455: 	movq	-0xd0(%rbp), %rax
    0000145c: 	leaq	0x1(%rax), %rsi
    00001460: 	callq	_ZdlPvm@PLT # Offset: 5216
.Ltmp3555:
    00001465: 	movq	-0x38(%rbp), %rax
    00001469: 	subq	%fs:0x28, %rax
    00001472: 	jne	.Ltmp3556 # Offset: 5234
    00001478: 	leaq	-0x28(%rbp), %rsp
    0000147c: 	popq	%rbx
    0000147d: 	popq	%r12
    0000147f: 	popq	%r13
    00001481: 	popq	%r14
    00001483: 	popq	%r15
    00001485: 	popq	%rbp
    00001486: 	retq # Offset: 5254
    00001487: 	nopw	(%rax,%rax) # Size: 9
.Ltmp3459:
    00001490: 	addq	$0x20, -0xf8(%rbp)
    00001498: 	movq	-0xf8(%rbp), %rax
    0000149f: 	cmpq	%rbx, %rax
    000014a2: 	jne	.Ltmp3460 # Offset: 5282
    000014a8: 	addq	$0x8, %r13
    000014ac: 	cmpq	%r13, %r15
    000014af: 	ja	.Ltmp3461 # Offset: 5295
    000014b5: 	jmp	.Ltmp3557 # Offset: 5301
.Ltmp3482:
    000014ba: 	testq	%r15, %r15
    000014bd: 	jne	.Ltmp3558 # Offset: 5309
    000014c3: 	movq	-0xf8(%rbp), %rax
    000014ca: 	jmp	.Ltmp3559 # Offset: 5322
.Ltmp3540:
    000014cf: 	testq	%r15, %r15
    000014d2: 	jne	.Ltmp3560 # Offset: 5330
    000014d8: 	movq	-0xf8(%rbp), %rax
    000014df: 	jmp	.Ltmp3561 # Offset: 5343
.Ltmp3532:
    000014e4: 	testq	%r15, %r15
    000014e7: 	jne	.Ltmp3562 # Offset: 5351
    000014ed: 	movq	-0xf8(%rbp), %rax
    000014f4: 	jmp	.Ltmp3563 # Offset: 5364
.Ltmp3522:
    000014f9: 	testq	%r15, %r15
    000014fc: 	jne	.Ltmp3564 # Offset: 5372
    00001502: 	movq	-0x120(%rbp), %rax
    00001509: 	jmp	.Ltmp3565 # Offset: 5385
.Ltmp3515:
    0000150e: 	testq	%r15, %r15
    00001511: 	jne	.Ltmp3566 # Offset: 5393
    00001517: 	movq	-0xf8(%rbp), %rax
    0000151e: 	jmp	.Ltmp3567 # Offset: 5406
.Ltmp3509:
    00001523: 	testq	%r15, %r15
    00001526: 	jne	.Ltmp3568 # Offset: 5414
    0000152c: 	movq	-0xf8(%rbp), %rax
    00001533: 	jmp	.Ltmp3569 # Offset: 5427
.Ltmp3503:
    00001538: 	testq	%r15, %r15
    0000153b: 	jne	.Ltmp3570 # Offset: 5435
    00001541: 	movq	-0xf8(%rbp), %rax
    00001548: 	jmp	.Ltmp3571 # Offset: 5448
.Ltmp3497:
    0000154d: 	testq	%r15, %r15
    00001550: 	jne	.Ltmp3572 # Offset: 5456
    00001556: 	movq	-0x140(%rbp), %rax
    0000155d: 	jmp	.Ltmp3573 # Offset: 5469
.Ltmp3548:
    00001562: 	testq	%r15, %r15
    00001565: 	jne	.Ltmp3574 # Offset: 5477
    0000156b: 	movq	-0xf8(%rbp), %rax
    00001572: 	jmp	.Ltmp3575 # Offset: 5490
.Ltmp3488:
    00001577: 	testq	%r15, %r15
    0000157a: 	jne	.Ltmp3576 # Offset: 5498
    00001580: 	movq	-0xf8(%rbp), %rax
    00001587: 	jmp	.Ltmp3577 # Offset: 5511
.Ltmp3496:
    0000158c: 	leaq	-0xe8(%rbp), %rsi
    00001593: 	leaq	-0xc0(%rbp), %rdi
    0000159a: 	xorl	%edx, %edx
    0000159c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5532
    000015a1: 	movq	%rax, -0xc0(%rbp)
    000015a8: 	movq	%rax, %rdi
    000015ab: 	movq	-0xe8(%rbp), %rax
    000015b2: 	movq	%rax, -0xb0(%rbp)
.Ltmp3588:
    000015b9: 	movq	%r15, %rdx
    000015bc: 	movq	%rbx, %rsi
    000015bf: 	callq	memcpy@PLT # Offset: 5567
    000015c4: 	movq	-0xe8(%rbp), %r15
    000015cb: 	movq	-0xc0(%rbp), %rax
    000015d2: 	jmp	.Ltmp3573 # Offset: 5586
.Ltmp3547:
    000015d7: 	movq	-0x100(%rbp), %rdi
    000015de: 	leaq	-0xe8(%rbp), %rsi
    000015e5: 	xorl	%edx, %edx
    000015e7: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5607
    000015ec: 	movq	%rax, -0x60(%rbp)
    000015f0: 	movq	%rax, %rdi
    000015f3: 	movq	-0xe8(%rbp), %rax
    000015fa: 	movq	%rax, -0x50(%rbp)
.Ltmp3589:
    000015fe: 	movq	%r15, %rdx
    00001601: 	movq	%rbx, %rsi
    00001604: 	callq	memcpy@PLT # Offset: 5636
    00001609: 	movq	-0xe8(%rbp), %r15
    00001610: 	movq	-0x60(%rbp), %rax
    00001614: 	jmp	.Ltmp3575 # Offset: 5652
.Ltmp3539:
    00001619: 	movq	-0x100(%rbp), %rdi
    00001620: 	leaq	-0xe8(%rbp), %rsi
    00001627: 	xorl	%edx, %edx
    00001629: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5673
    0000162e: 	movq	%rax, -0x60(%rbp)
    00001632: 	movq	%rax, %rdi
    00001635: 	movq	-0xe8(%rbp), %rax
    0000163c: 	movq	%rax, -0x50(%rbp)
.Ltmp3582:
    00001640: 	movq	%r15, %rdx
    00001643: 	movq	%rbx, %rsi
    00001646: 	callq	memcpy@PLT # Offset: 5702
    0000164b: 	movq	-0xe8(%rbp), %r15
    00001652: 	movq	-0x60(%rbp), %rax
    00001656: 	jmp	.Ltmp3561 # Offset: 5718
.Ltmp3531:
    0000165b: 	movq	-0x100(%rbp), %rdi
    00001662: 	leaq	-0xe8(%rbp), %rsi
    00001669: 	xorl	%edx, %edx
    0000166b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5739
    00001670: 	movq	%rax, -0x60(%rbp)
    00001674: 	movq	%rax, %rdi
    00001677: 	movq	-0xe8(%rbp), %rax
    0000167e: 	movq	%rax, -0x50(%rbp)
.Ltmp3583:
    00001682: 	movq	%r15, %rdx
    00001685: 	movq	%rbx, %rsi
    00001688: 	callq	memcpy@PLT # Offset: 5768
    0000168d: 	movq	-0xe8(%rbp), %r15
    00001694: 	movq	-0x60(%rbp), %rax
    00001698: 	jmp	.Ltmp3563 # Offset: 5784
.Ltmp3521:
    0000169d: 	leaq	-0xe8(%rbp), %rsi
    000016a4: 	leaq	-0xa0(%rbp), %rdi
    000016ab: 	xorl	%edx, %edx
    000016ad: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5805
    000016b2: 	movq	%rax, -0xa0(%rbp)
    000016b9: 	movq	%rax, %rdi
    000016bc: 	movq	-0xe8(%rbp), %rax
    000016c3: 	movq	%rax, -0x90(%rbp)
.Ltmp3584:
    000016ca: 	movq	%r15, %rdx
    000016cd: 	movq	%rbx, %rsi
    000016d0: 	callq	memcpy@PLT # Offset: 5840
    000016d5: 	movq	-0xe8(%rbp), %r15
    000016dc: 	movq	-0xa0(%rbp), %rax
    000016e3: 	jmp	.Ltmp3565 # Offset: 5859
.Ltmp3514:
    000016e8: 	movq	-0x100(%rbp), %rdi
    000016ef: 	leaq	-0xe8(%rbp), %rsi
    000016f6: 	xorl	%edx, %edx
    000016f8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5880
    000016fd: 	movq	%rax, -0x60(%rbp)
    00001701: 	movq	%rax, %rdi
    00001704: 	movq	-0xe8(%rbp), %rax
    0000170b: 	movq	%rax, -0x50(%rbp)
.Ltmp3585:
    0000170f: 	movq	%r15, %rdx
    00001712: 	movq	%rbx, %rsi
    00001715: 	callq	memcpy@PLT # Offset: 5909
    0000171a: 	movq	-0xe8(%rbp), %r15
    00001721: 	movq	-0x60(%rbp), %rax
    00001725: 	jmp	.Ltmp3567 # Offset: 5925
.Ltmp3508:
    0000172a: 	movq	-0x100(%rbp), %rdi
    00001731: 	leaq	-0xe8(%rbp), %rsi
    00001738: 	xorl	%edx, %edx
    0000173a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 5946
    0000173f: 	movq	%rax, -0x60(%rbp)
    00001743: 	movq	%rax, %rdi
    00001746: 	movq	-0xe8(%rbp), %rax
    0000174d: 	movq	%rax, -0x50(%rbp)
.Ltmp3586:
    00001751: 	movq	%r15, %rdx
    00001754: 	movq	%rbx, %rsi
    00001757: 	callq	memcpy@PLT # Offset: 5975
    0000175c: 	movq	-0xe8(%rbp), %r15
    00001763: 	movq	-0x60(%rbp), %rax
    00001767: 	jmp	.Ltmp3569 # Offset: 5991
.Ltmp3487:
    0000176c: 	movq	-0x100(%rbp), %rdi
    00001773: 	leaq	-0xe8(%rbp), %rsi
    0000177a: 	xorl	%edx, %edx
    0000177c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6012
    00001781: 	movq	%rax, -0x60(%rbp)
    00001785: 	movq	%rax, %rdi
    00001788: 	movq	-0xe8(%rbp), %rax
    0000178f: 	movq	%rax, -0x50(%rbp)
.Ltmp3590:
    00001793: 	movq	%r15, %rdx
    00001796: 	movq	%rbx, %rsi
    00001799: 	callq	memcpy@PLT # Offset: 6041
    0000179e: 	movq	-0xe8(%rbp), %r15
    000017a5: 	movq	-0x60(%rbp), %rax
    000017a9: 	jmp	.Ltmp3577 # Offset: 6057
.Ltmp3481:
    000017ae: 	movq	-0x100(%rbp), %rdi
    000017b5: 	leaq	-0xe8(%rbp), %rsi
    000017bc: 	xorl	%edx, %edx
    000017be: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6078
    000017c3: 	movq	%rax, -0x60(%rbp)
    000017c7: 	movq	%rax, %rdi
    000017ca: 	movq	-0xe8(%rbp), %rax
    000017d1: 	movq	%rax, -0x50(%rbp)
.Ltmp3581:
    000017d5: 	movq	%r15, %rdx
    000017d8: 	movq	%rbx, %rsi
    000017db: 	callq	memcpy@PLT # Offset: 6107
    000017e0: 	movq	-0xe8(%rbp), %r15
    000017e7: 	movq	-0x60(%rbp), %rax
    000017eb: 	jmp	.Ltmp3559 # Offset: 6123
.Ltmp3502:
    000017f0: 	movq	-0x100(%rbp), %rdi
    000017f7: 	leaq	-0xe8(%rbp), %rsi
    000017fe: 	xorl	%edx, %edx
    00001800: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6144
    00001805: 	movq	%rax, -0x60(%rbp)
    00001809: 	movq	%rax, %rdi
    0000180c: 	movq	-0xe8(%rbp), %rax
    00001813: 	movq	%rax, -0x50(%rbp)
.Ltmp3587:
    00001817: 	movq	%r15, %rdx
    0000181a: 	movq	%rbx, %rsi
    0000181d: 	callq	memcpy@PLT # Offset: 6173
    00001822: 	movq	-0xe8(%rbp), %r15
    00001829: 	movq	-0x60(%rbp), %rax
    0000182d: 	jmp	.Ltmp3571 # Offset: 6189
.Ltmp3462:
    00001832: 	movq	-0x108(%rbp), %rcx
    00001839: 	cmpq	%rcx, %rsi
    0000183c: 	je	.Ltmp3467 # Offset: 6204
.Ltmp3580:
    00001842: 	movq	(%rsi), %rdi
    00001845: 	leaq	0x10(%rsi), %rax
    00001849: 	movq	%rsi, %rbx
    0000184c: 	cmpq	%rax, %rdi
    0000184f: 	je	.Ltmp3578 # Offset: 6223
.Ltmp3579:
    00001851: 	movq	0x10(%rsi), %rax
    00001855: 	addq	$0x20, %rbx
    00001859: 	leaq	0x1(%rax), %rsi
    0000185d: 	movq	%rax, -0xf8(%rbp)
    00001864: 	callq	_ZdlPvm@PLT # Offset: 6244
    00001869: 	movq	%rbx, %rsi
    0000186c: 	cmpq	%rbx, -0x108(%rbp)
    00001873: 	je	.Ltmp3467 # Offset: 6259
    00001879: 	movq	(%rsi), %rdi
    0000187c: 	leaq	0x10(%rsi), %rax
    00001880: 	movq	%rsi, %rbx
    00001883: 	cmpq	%rax, %rdi
    00001886: 	jne	.Ltmp3579 # Offset: 6278
.Ltmp3578:
    00001888: 	movq	%rsi, %rax
    0000188b: 	addq	$0x20, %rax
    0000188f: 	movq	%rax, %rsi
    00001892: 	cmpq	%rax, -0x108(%rbp)
    00001899: 	jne	.Ltmp3580 # Offset: 6297
    0000189b: 	jmp	.Ltmp3467 # Offset: 6299
.Ltmp3483:
    000018a0: 	leaq	DATAat0x37182(%rip), %rdi
    000018a7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6311
.Ltmp3486:
    000018ac: 	leaq	DATAat0x37158(%rip), %rdi
    000018b3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6323
.Ltmp3489:
    000018b8: 	leaq	DATAat0x37182(%rip), %rdi
    000018bf: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6335
.Ltmp3495:
    000018c4: 	leaq	DATAat0x37158(%rip), %rdi
    000018cb: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6347
.Ltmp3498:
    000018d0: 	leaq	DATAat0x37182(%rip), %rdi
    000018d7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6359
.Ltmp3501:
    000018dc: 	leaq	DATAat0x37158(%rip), %rdi
    000018e3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6371
.Ltmp3504:
    000018e8: 	leaq	DATAat0x37182(%rip), %rdi
    000018ef: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6383
.Ltmp3507:
    000018f4: 	leaq	DATAat0x37158(%rip), %rdi
    000018fb: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6395
.Ltmp3510:
    00001900: 	leaq	DATAat0x37182(%rip), %rdi
    00001907: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6407
.Ltmp3513:
    0000190c: 	leaq	DATAat0x37158(%rip), %rdi
    00001913: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6419
.Ltmp3516:
    00001918: 	leaq	DATAat0x37182(%rip), %rdi
    0000191f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6431
.Ltmp3520:
    00001924: 	leaq	DATAat0x37158(%rip), %rdi
    0000192b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6443
.Ltmp3523:
    00001930: 	leaq	DATAat0x37182(%rip), %rdi
    00001937: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6455
.Ltmp3530:
    0000193c: 	leaq	DATAat0x37158(%rip), %rdi
    00001943: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6467
.Ltmp3533:
    00001948: 	leaq	DATAat0x37182(%rip), %rdi
    0000194f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6479
.Ltmp3538:
    00001954: 	leaq	DATAat0x37158(%rip), %rdi
    0000195b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6491
.Ltmp3541:
    00001960: 	leaq	DATAat0x37182(%rip), %rdi
    00001967: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6503
.Ltmp3546:
    0000196c: 	leaq	DATAat0x37158(%rip), %rdi
    00001973: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6515
.Ltmp3549:
    00001978: 	leaq	DATAat0x37182(%rip), %rdi
    0000197f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 6527
.Ltmp3556:
    00001984: 	callq	__stack_chk_fail@PLT # Offset: 6532
.Ltmp3558:
    00001989: 	movq	-0xf8(%rbp), %rdi
    00001990: 	jmp	.Ltmp3581 # Offset: 6544
.Ltmp3560:
    00001995: 	movq	-0xf8(%rbp), %rdi
    0000199c: 	jmp	.Ltmp3582 # Offset: 6556
.Ltmp3562:
    000019a1: 	movq	-0xf8(%rbp), %rdi
    000019a8: 	jmp	.Ltmp3583 # Offset: 6568
.Ltmp3564:
    000019ad: 	movq	-0x120(%rbp), %rdi
    000019b4: 	jmp	.Ltmp3584 # Offset: 6580
.Ltmp3566:
    000019b9: 	movq	-0xf8(%rbp), %rdi
    000019c0: 	jmp	.Ltmp3585 # Offset: 6592
.Ltmp3568:
    000019c5: 	movq	-0xf8(%rbp), %rdi
    000019cc: 	jmp	.Ltmp3586 # Offset: 6604
.Ltmp3570:
    000019d1: 	movq	-0xf8(%rbp), %rdi
    000019d8: 	jmp	.Ltmp3587 # Offset: 6616
.Ltmp3572:
    000019dd: 	movq	-0x140(%rbp), %rdi
    000019e4: 	jmp	.Ltmp3588 # Offset: 6628
.Ltmp3574:
    000019e9: 	movq	-0xf8(%rbp), %rdi
    000019f0: 	jmp	.Ltmp3589 # Offset: 6640
.Ltmp3576:
    000019f5: 	movq	-0xf8(%rbp), %rdi
    000019fc: 	jmp	.Ltmp3590 # Offset: 6652
.Ltmp3480:
    00001a01: 	leaq	DATAat0x37158(%rip), %rdi
    00001a08: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 6664
    00001a0d: 	endbr64
    00001a11: 	movq	%rax, %rbx
    00001a14: 	jmp	.Ltmp3591 # Offset: 6676
    00001a19: 	endbr64
.Ltmp3595:
    00001a1d: 	movq	%rax, %rbx
    00001a20: 	jmp	.Ltmp3592 # Offset: 6688
    00001a22: 	endbr64
.Ltmp3601:
    00001a26: 	movq	%rax, %rbx
    00001a29: 	jmp	.Ltmp3593 # Offset: 6697
    00001a2e: 	endbr64
    00001a32: 	movq	%rax, %rbx
    00001a35: 	jmp	.Ltmp3594 # Offset: 6709
    00001a3a: 	endbr64
    00001a3e: 	jmp	.Ltmp3595 # Offset: 6718
.Ltmp3592:
    00001a40: 	movq	-0x60(%rbp), %rdi
    00001a44: 	cmpq	-0xf8(%rbp), %rdi
    00001a4b: 	je	.Ltmp3596 # Offset: 6731
.Ltmp3598:
    00001a4d: 	movq	-0x50(%rbp), %rax
    00001a51: 	leaq	0x1(%rax), %rsi
    00001a55: 	callq	_ZdlPvm@PLT # Offset: 6741
.Ltmp3596:
    00001a5a: 	movl	$0x10, %esi
    00001a5f: 	movq	%r14, %rdi
    00001a62: 	callq	_ZdlPvm@PLT # Offset: 6754
.Ltmp3603:
    00001a67: 	movq	-0x118(%rbp), %rdi
    00001a6e: 	movl	$0x10, %esi
    00001a73: 	callq	_ZdlPvm@PLT # Offset: 6771
.Ltmp3600:
    00001a78: 	movq	-0x108(%rbp), %rdi
    00001a7f: 	movl	$0x10, %esi
    00001a84: 	callq	_ZdlPvm@PLT # Offset: 6788
.Ltmp3611:
    00001a89: 	movl	$0x10, %esi
    00001a8e: 	movq	%r13, %rdi
    00001a91: 	callq	_ZdlPvm@PLT # Offset: 6801
.Ltmp3602:
    00001a96: 	movl	$0x10, %esi
    00001a9b: 	movq	%r12, %rdi
    00001a9e: 	callq	_ZdlPvm@PLT # Offset: 6814
.Ltmp3591:
    00001aa3: 	movq	-0xe0(%rbp), %rdi
    00001aaa: 	cmpq	-0x148(%rbp), %rdi
    00001ab1: 	je	.Ltmp3597 # Offset: 6833
    00001ab3: 	movq	-0xd0(%rbp), %rax
    00001aba: 	leaq	0x1(%rax), %rsi
    00001abe: 	callq	_ZdlPvm@PLT # Offset: 6846
.Ltmp3597:
    00001ac3: 	movq	%rbx, %rdi
    00001ac6: 	callq	_Unwind_Resume@PLT # Offset: 6854
.Ltmp3594:
    00001acb: 	movq	-0x60(%rbp), %rdi
    00001acf: 	leaq	-0x50(%rbp), %rax
    00001ad3: 	cmpq	%rax, %rdi
    00001ad6: 	jne	.Ltmp3598 # Offset: 6870
    00001adc: 	jmp	.Ltmp3596 # Offset: 6876
.Ltmp3593:
    00001ae1: 	movq	-0x60(%rbp), %rdi
    00001ae5: 	cmpq	-0xf8(%rbp), %rdi
    00001aec: 	je	.Ltmp3599 # Offset: 6892
    00001aee: 	movq	-0x50(%rbp), %rax
    00001af2: 	leaq	0x1(%rax), %rsi
    00001af6: 	callq	_ZdlPvm@PLT # Offset: 6902
.Ltmp3599:
    00001afb: 	movq	-0xc0(%rbp), %rdi
    00001b02: 	cmpq	-0x140(%rbp), %rdi
    00001b09: 	je	.Ltmp3596 # Offset: 6921
    00001b0f: 	movq	-0xb0(%rbp), %rax
    00001b16: 	leaq	0x1(%rax), %rsi
    00001b1a: 	callq	_ZdlPvm@PLT # Offset: 6938
    00001b1f: 	jmp	.Ltmp3596 # Offset: 6943
    00001b24: 	endbr64
    00001b28: 	movq	%rax, %rbx
    00001b2b: 	jmp	.Ltmp3596 # Offset: 6955
    00001b30: 	endbr64
    00001b34: 	jmp	.Ltmp3595 # Offset: 6964
    00001b39: 	endbr64
    00001b3d: 	movq	%rax, %rbx
    00001b40: 	jmp	.Ltmp3600 # Offset: 6976
    00001b45: 	endbr64
    00001b49: 	jmp	.Ltmp3601 # Offset: 6985
    00001b4e: 	endbr64
    00001b52: 	jmp	.Ltmp3601 # Offset: 6994
    00001b57: 	endbr64
    00001b5b: 	jmp	.Ltmp3601 # Offset: 7003
    00001b60: 	endbr64
    00001b64: 	movq	%rax, %rbx
    00001b67: 	jmp	.Ltmp3602 # Offset: 7015
    00001b6c: 	endbr64
    00001b70: 	movq	%rax, %rbx
    00001b73: 	jmp	.Ltmp3603 # Offset: 7027
    00001b78: 	endbr64
    00001b7c: 	jmp	.Ltmp3601 # Offset: 7036
    00001b81: 	endbr64
.Ltmp3606:
    00001b85: 	movq	%rax, %rbx
    00001b88: 	jmp	.Ltmp3604 # Offset: 7048
    00001b8a: 	endbr64
.Ltmp3610:
    00001b8e: 	movq	%rax, %rbx
    00001b91: 	jmp	.Ltmp3605 # Offset: 7057
    00001b93: 	endbr64
    00001b97: 	jmp	.Ltmp3606 # Offset: 7063
.Ltmp3605:
    00001b99: 	movq	-0x60(%rbp), %rdi
    00001b9d: 	cmpq	-0xf8(%rbp), %rdi
    00001ba4: 	je	.Ltmp3604 # Offset: 7076
    00001ba6: 	movq	-0x50(%rbp), %rax
    00001baa: 	leaq	0x1(%rax), %rsi
    00001bae: 	callq	_ZdlPvm@PLT # Offset: 7086
.Ltmp3604:
    00001bb3: 	movq	-0xa0(%rbp), %rdi
    00001bba: 	cmpq	-0x120(%rbp), %rdi
    00001bc1: 	je	.Ltmp3599 # Offset: 7105
    00001bc7: 	movq	-0x90(%rbp), %rax
    00001bce: 	leaq	0x1(%rax), %rsi
    00001bd2: 	callq	_ZdlPvm@PLT # Offset: 7122
    00001bd7: 	jmp	.Ltmp3599 # Offset: 7127
    00001bdc: 	endbr64
.Ltmp3608:
    00001be0: 	movq	%rax, %rbx
    00001be3: 	jmp	.Ltmp3607 # Offset: 7139
    00001be5: 	endbr64
    00001be9: 	jmp	.Ltmp3608 # Offset: 7145
    00001beb: 	endbr64
    00001bef: 	jmp	.Ltmp3608 # Offset: 7151
    00001bf1: 	endbr64
    00001bf5: 	jmp	.Ltmp3608 # Offset: 7157
.Ltmp3607:
    00001bf7: 	movq	-0x60(%rbp), %rdi
    00001bfb: 	cmpq	-0xf8(%rbp), %rdi
    00001c02: 	je	.Ltmp3609 # Offset: 7170
    00001c04: 	movq	-0x50(%rbp), %rax
    00001c08: 	leaq	0x1(%rax), %rsi
    00001c0c: 	callq	_ZdlPvm@PLT # Offset: 7180
.Ltmp3609:
    00001c11: 	movq	-0x80(%rbp), %rdi
    00001c15: 	leaq	-0x70(%rbp), %rax
    00001c19: 	cmpq	%rax, %rdi
    00001c1c: 	je	.Ltmp3604 # Offset: 7196
    00001c1e: 	movq	-0x70(%rbp), %rax
    00001c22: 	leaq	0x1(%rax), %rsi
    00001c26: 	callq	_ZdlPvm@PLT # Offset: 7206
    00001c2b: 	jmp	.Ltmp3604 # Offset: 7211
    00001c2d: 	endbr64
    00001c31: 	jmp	.Ltmp3608 # Offset: 7217
    00001c33: 	endbr64
    00001c37: 	jmp	.Ltmp3608 # Offset: 7223
    00001c39: 	endbr64
    00001c3d: 	jmp	.Ltmp3608 # Offset: 7229
    00001c3f: 	endbr64
    00001c43: 	jmp	.Ltmp3610 # Offset: 7235
    00001c48: 	endbr64
    00001c4c: 	jmp	.Ltmp3610 # Offset: 7244
    00001c51: 	endbr64
    00001c55: 	jmp	.Ltmp3610 # Offset: 7253
    00001c5a: 	endbr64
    00001c5e: 	movq	%rax, %rbx
    00001c61: 	jmp	.Ltmp3611 # Offset: 7265
    00001c66: 	endbr64
    00001c6a: 	jmp	.Ltmp3608 # Offset: 7274
    00001c6f: 	endbr64
    00001c73: 	jmp	.Ltmp3610 # Offset: 7283
    00001c78: 	endbr64
    00001c7c: 	jmp	.Ltmp3610 # Offset: 7292
    00001c81: 	endbr64
    00001c85: 	jmp	.Ltmp3610 # Offset: 7301
    00001c8a: 	endbr64
    00001c8e: 	movq	%rax, %rbx
    00001c91: 	jmp	.Ltmp3609 # Offset: 7313
    00001c96: 	endbr64
    00001c9a: 	jmp	.Ltmp3608 # Offset: 7322
    00001c9f: 	endbr64
    00001ca3: 	jmp	.Ltmp3595 # Offset: 7331
    00001ca8: 	endbr64
    00001cac: 	jmp	.Ltmp3595 # Offset: 7340
    00001cb1: 	endbr64
    00001cb5: 	jmp	.Ltmp3595 # Offset: 7349
    00001cba: 	endbr64
    00001cbe: 	jmp	.Ltmp3595 # Offset: 7358
    00001cc3: 	endbr64
    00001cc7: 	jmp	.Ltmp3595 # Offset: 7367
    00001ccc: 	endbr64
    00001cd0: 	jmp	.Ltmp3595 # Offset: 7376
    00001cd5: 	endbr64
.Ltmp3612:
    00001cd9: 	movq	%rax, %rbx
    00001cdc: 	jmp	.Ltmp3599 # Offset: 7388
    00001ce1: 	endbr64
    00001ce5: 	jmp	.Ltmp3601 # Offset: 7397
    00001cea: 	endbr64
    00001cee: 	jmp	.Ltmp3601 # Offset: 7406
    00001cf3: 	endbr64
    00001cf7: 	jmp	.Ltmp3601 # Offset: 7415
    00001cfc: 	endbr64
    00001d00: 	jmp	.Ltmp3612 # Offset: 7424
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIeEvv"

Binary Function "_fini" after disassembly {
  Number      : 256
  State       : disassembled
  Address     : 0x36874
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x36874
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0255:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 257 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 3034 instructions were shortened
BOLT-INFO: removed 681 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 252 out of 285 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x208ec4
