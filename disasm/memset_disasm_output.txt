BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x15028, which lies outside .bss
BOLT-WARNING: split function detected on input : main.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x14ff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "_start" after disassembly {
  Number      : 6
  State       : disassembled
  Address     : 0x1a00
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x1a00
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x14fe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x1a30
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x1a30
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp24 # Offset: 17
    00000013: 	movq	DATAat0x14fe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp24 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp24:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x1a60
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1a60
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp25 # Offset: 34
    00000024: 	movq	DATAat0x14ff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp25 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp25:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x1aa0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1aa0
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp26 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp27 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp27:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp26:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 10
  State       : disassembled
  Address     : 0x1ae0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x1ae0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)" after disassembly {
  All names   : _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
                _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/memset.cpp/1
  Number      : 11
  State       : disassembled
  Address     : 0x1af0
  Size        : 0xbf
  MaxSize     : 0xc0
  Offset      : 0x1af0
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	pushq	%r13
    00000002: 	leaq	0x10(%rdi), %r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x18, %rsp
    0000000e: 	movq	%fs:0x28, %rax
    00000017: 	movq	%rax, 0x8(%rsp)
    0000001c: 	xorl	%eax, %eax
    0000001e: 	movq	%r13, (%rdi)
    00000021: 	testq	%rsi, %rsi
    00000024: 	je	.Ltmp28 # Offset: 36
    0000002a: 	movq	%rdi, %rbx
    0000002d: 	movq	%rsi, %rdi
    00000030: 	movq	%rsi, %rbp
    00000033: 	callq	strlen@PLT # Offset: 51
    00000038: 	movq	%rax, (%rsp)
    0000003c: 	movq	%rax, %r12
    0000003f: 	cmpq	$0xf, %rax
    00000043: 	ja	.Ltmp29 # Offset: 67
    00000045: 	cmpq	$0x1, %rax
    00000049: 	jne	.Ltmp30 # Offset: 73
    0000004b: 	movzbl	(%rbp), %eax
    0000004f: 	movb	%al, 0x10(%rbx)
.Ltmp32:
    00000052: 	movq	(%rsp), %rax
    00000056: 	movq	(%rbx), %rdx
    00000059: 	movq	%rax, 0x8(%rbx)
    0000005d: 	movb	$0x0, (%rdx,%rax)
    00000061: 	movq	0x8(%rsp), %rax
    00000066: 	subq	%fs:0x28, %rax
    0000006f: 	jne	.Ltmp31 # Offset: 111
    00000071: 	addq	$0x18, %rsp
    00000075: 	popq	%rbx
    00000076: 	popq	%rbp
    00000077: 	popq	%r12
    00000079: 	popq	%r13
    0000007b: 	retq # Offset: 123
.Ltmp30:
    0000007c: 	testq	%rax, %rax
    0000007f: 	je	.Ltmp32 # Offset: 127
    00000081: 	jmp	.Ltmp33 # Offset: 129
.Ltmp29:
    00000083: 	movq	%rsp, %rsi
    00000086: 	xorl	%edx, %edx
    00000088: 	movq	%rbx, %rdi
    0000008b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 139
    00000090: 	movq	%rax, (%rbx)
    00000093: 	movq	%rax, %r13
    00000096: 	movq	(%rsp), %rax
    0000009a: 	movq	%rax, 0x10(%rbx)
.Ltmp33:
    0000009e: 	movq	%r12, %rdx
    000000a1: 	movq	%rbp, %rsi
    000000a4: 	movq	%r13, %rdi
    000000a7: 	callq	memcpy@PLT # Offset: 167
    000000ac: 	jmp	.Ltmp32 # Offset: 172
.Ltmp31:
    000000ae: 	callq	__stack_chk_fail@PLT # Offset: 174
.Ltmp28:
    000000b3: 	leaq	DATAat0x12008(%rip), %rdi
    000000ba: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 186
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x1bb0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x1bb0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp34 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp35 # Offset: 38
.Ltmp34:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp36 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp35:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp36:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x12038(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x1c50
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x1c50
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp37 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp38 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp39:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp39 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp52:
    00000069: 	leaq	DATAat0x12182(%rip), %rbp
    00000070: 	leaq	DATAat0x12058(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x12098(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp40 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x12368(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x120c8(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x12360(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp41 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp45:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp42 # Offset: 244
    000000fa: 	movq	DATAat0x12350(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp46:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x12350(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp43 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp43:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x12167(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x12368(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp44 # Offset: 398
.Ltmp41:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp45 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp46 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp42:
    000001c8: 	movq	DATAat0x12358(%rip), %rsi
    000001cf: 	movq	DATAat0x12350(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp43 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp44:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp40 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp47 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp48:
    00000210: 	addq	$0x10, %rax
.Ltmp47:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp48 # Offset: 542
.Ltmp53:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x120f8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp49 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp50 # Offset: 592
.Ltmp49:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp37:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp50:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp51:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp51 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x12142(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp37 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp38:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp52 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp40:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp53 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x1f80
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x1f80
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp54 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp55 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp56:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp56 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp61:
    0000006a: 	leaq	DATAat0x12182(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x12120(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x12168(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x12182(%rip), %r8
    000000a1: 	leaq	DATAat0x12156(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp57 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp58:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x12167(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp58 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp57 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp59 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp60:
    00000140: 	addq	$0x10, %rax
.Ltmp59:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp60 # Offset: 334
.Ltmp62:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x120f8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp54:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp55:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp61 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp57:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp62 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x2130
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x2130
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x2150
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x2150
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x12360(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x2190
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x2190
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x21a0
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x21a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x21f0
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x21f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x2240
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2240
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x2270
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2270
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x22a0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x22a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x22d0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x22d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x2300
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2300
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x2330
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2330
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x2360
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2360
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x2390
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2390
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x23c0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x23c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x23f0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x23f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x2420
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2420
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x2450
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x2450
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x2490
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2490
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x24c0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x24c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x24f0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x24f0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x2520
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2520
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x2550
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2550
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x2580
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2580
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x25b0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x25b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x25e0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x25e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x2610
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2610
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x2640
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2640
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x2670
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x2670
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 43
  State       : disassembled
  Address     : 0x26a0
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x26a0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp63 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp66:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp65:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp64 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp65 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp66 # Offset: 142
.Ltmp63:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp67 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp68 # Offset: 164
.Ltmp71:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp69 # Offset: 177
.Ltmp70:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp68 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp70 # Offset: 214
.Ltmp69:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp71 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp72 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp74:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp73 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp73:
    0000010a: 	addq	$0x20, %r13
.Ltmp68:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp74 # Offset: 275
.Ltmp72:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp75 # Offset: 283
.Ltmp81:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp76 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp77:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp77 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp76:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp64:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp65 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp66 # Offset: 389
    0000018b: 	jmp	.Ltmp63 # Offset: 395
.Ltmp67:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp72 # Offset: 405
.Ltmp80:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp78 # Offset: 422
.Ltmp79:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp72 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp79 # Offset: 463
.Ltmp78:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp80 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp81 # Offset: 482
.Ltmp75:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_Z17test_memset_sizesIhPFvPhihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_iT0_S6_" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x28a0
  Size        : 0x276
  MaxSize     : 0x280
  Offset      : 0x28a0
  Section     : .text
  Orc Section : .local.text._Z17test_memset_sizesIhPFvPhihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_iT0_S6_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	movl	$0x1, %edi
    00000010: 	pushq	%r13
    00000012: 	pushq	%r12
    00000014: 	pushq	%rbp
    00000015: 	movq	%rcx, %rbp
    00000018: 	pushq	%rbx
    00000019: 	movl	%esi, %ebx
    0000001b: 	subq	$0x78, %rsp
    0000001f: 	movq	%rdx, 0x8(%rsp)
    00000024: 	movl	%esi, 0x28(%rsp)
    00000028: 	leaq	DATAat0x121c0(%rip), %rsi
    0000002f: 	movq	%fs:0x28, %rax
    00000038: 	movq	%rax, 0x68(%rsp)
    0000003d: 	movl	iterations(%rip), %eax
    00000043: 	movl	%eax, 0x2c(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	callq	__printf_chk@PLT # Offset: 73
    0000004e: 	leaq	DATAat0x121f0(%rip), %rsi
    00000055: 	movl	$0x1, %edi
    0000005a: 	xorl	%eax, %eax
    0000005c: 	callq	__printf_chk@PLT # Offset: 92
    00000061: 	movslq	%ebx, %rdx
    00000064: 	movl	$0x42, %esi
    00000069: 	movq	%r14, %rdi
    0000006c: 	callq	memset@PLT # Offset: 108
    00000071: 	testl	%ebx, %ebx
    00000073: 	jle	.Ltmp82 # Offset: 115
    00000079: 	movslq	0x2c(%rsp), %rax
    0000007e: 	xorl	%r12d, %r12d
    00000081: 	movl	$0x1, %ebx
    00000086: 	leaq	0x50(%rsp), %r13
    0000008b: 	leaq	0x40(%rsp), %r15
    00000090: 	movq	%rax, 0x10(%rsp)
    00000095: 	jmp	.Ltmp83 # Offset: 149
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp88:
    000000a0: 	movzbl	(%r9), %eax
    000000a4: 	movb	%al, 0x50(%rsp)
    000000a8: 	movq	%r13, %rax
.Ltmp90:
    000000ab: 	movq	%r8, 0x48(%rsp)
    000000b0: 	movq	%r15, %rcx
    000000b3: 	movl	%ebx, %esi
    000000b5: 	movq	%r14, %rdi
    000000b8: 	movb	$0x0, (%rax,%r8)
    000000bd: 	movq	0x8(%rsp), %rax
    000000c2: 	movzbl	init_value(%rip), %edx
    000000c9: 	callq	*%rax # Offset: 201
    000000cb: 	movq	0x40(%rsp), %rdi
    000000d0: 	cmpq	%r13, %rdi
    000000d3: 	je	.Ltmp84 # Offset: 211
    000000d5: 	movq	0x50(%rsp), %rax
    000000da: 	leaq	0x1(%rax), %rsi
    000000de: 	callq	_ZdlPvm@PLT # Offset: 222
.Ltmp84:
    000000e3: 	pxor	%xmm1, %xmm1
    000000e7: 	pxor	%xmm2, %xmm2
    000000eb: 	movq	(%rbp), %rcx
    000000ef: 	movl	%ebx, %r8d
    000000f2: 	cvtsi2sd	%ebx, %xmm2
    000000f6: 	movq	results(%rip), %rax
    000000fd: 	movl	%r12d, %edx
    00000100: 	addl	%ebx, %ebx
    00000102: 	leaq	DATAat0x12220(%rip), %rsi
    00000109: 	movl	$0x1, %edi
    0000010e: 	addl	$0x1, %r12d
    00000112: 	cvtsi2sdl	iterations(%rip), %xmm1
    0000011a: 	movsd	(%rax), %xmm0
    0000011e: 	movl	$0x2, %eax
    00000123: 	mulsd	%xmm2, %xmm1
    00000127: 	divsd	DATAat0x12360(%rip), %xmm1
    0000012f: 	divsd	%xmm0, %xmm1
    00000133: 	callq	__printf_chk@PLT # Offset: 307
    00000138: 	movl	$0x0, current_test(%rip)
    00000142: 	cmpl	%ebx, 0x28(%rsp)
    00000146: 	jl	.Ltmp82 # Offset: 326
.Ltmp83:
    0000014c: 	movl	$0x4000000, %eax
    00000151: 	movq	(%rbp), %r9
    00000155: 	movq	0x8(%rbp), %r8
    00000159: 	movq	%r13, 0x40(%rsp)
    0000015e: 	cltd
    0000015f: 	idivl	%ebx
    00000161: 	movl	$0x4, %edx
    00000166: 	cltq
    00000168: 	imulq	0x10(%rsp), %rax
    0000016e: 	cmpq	%rdx, %rax
    00000171: 	cmovlq	%rdx, %rax
    00000175: 	movl	$0x70000000, %edx
    0000017a: 	cmpq	%rdx, %rax
    0000017d: 	cmovgq	%rdx, %rax
    00000181: 	movl	%eax, iterations(%rip)
    00000187: 	movq	%r9, %rax
    0000018a: 	addq	%r8, %rax
    0000018d: 	je	.Ltmp85 # Offset: 397
    0000018f: 	testq	%r9, %r9
    00000192: 	je	.Ltmp86 # Offset: 402
.Ltmp85:
    00000198: 	movq	%r8, 0x38(%rsp)
    0000019d: 	cmpq	$0xf, %r8
    000001a1: 	ja	.Ltmp87 # Offset: 417
    000001a3: 	cmpq	$0x1, %r8
    000001a7: 	je	.Ltmp88 # Offset: 423
    000001ad: 	testq	%r8, %r8
    000001b0: 	jne	.Ltmp89 # Offset: 432
    000001b6: 	movq	%r13, %rax
    000001b9: 	jmp	.Ltmp90 # Offset: 441
    000001be: 	nop # Size: 2
.Ltmp87:
    000001c0: 	movq	%r15, %rdi
    000001c3: 	leaq	0x38(%rsp), %rsi
    000001c8: 	xorl	%edx, %edx
    000001ca: 	movq	%r8, 0x20(%rsp)
    000001cf: 	movq	%r9, 0x18(%rsp)
    000001d4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 468
    000001d9: 	movq	0x18(%rsp), %r9
    000001de: 	movq	0x20(%rsp), %r8
    000001e3: 	movq	%rax, 0x40(%rsp)
    000001e8: 	movq	%rax, %rdi
    000001eb: 	movq	0x38(%rsp), %rax
    000001f0: 	movq	%rax, 0x50(%rsp)
.Ltmp92:
    000001f5: 	movq	%r8, %rdx
    000001f8: 	movq	%r9, %rsi
    000001fb: 	callq	memcpy@PLT # Offset: 507
    00000200: 	movq	0x38(%rsp), %r8
    00000205: 	movq	0x40(%rsp), %rax
    0000020a: 	jmp	.Ltmp90 # Offset: 522
    0000020f: 	nop # Size: 1
.Ltmp82:
    00000210: 	movl	0x2c(%rsp), %eax
    00000214: 	movl	%eax, iterations(%rip)
    0000021a: 	movq	0x68(%rsp), %rax
    0000021f: 	subq	%fs:0x28, %rax
    00000228: 	jne	.Ltmp91 # Offset: 552
    0000022a: 	addq	$0x78, %rsp
    0000022e: 	popq	%rbx
    0000022f: 	popq	%rbp
    00000230: 	popq	%r12
    00000232: 	popq	%r13
    00000234: 	popq	%r14
    00000236: 	popq	%r15
    00000238: 	retq # Offset: 568
.Ltmp86:
    00000239: 	leaq	DATAat0x12008(%rip), %rdi
    00000240: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 576
.Ltmp91:
    00000245: 	callq	__stack_chk_fail@PLT # Offset: 581
.Ltmp89:
    0000024a: 	movq	%r13, %rdi
    0000024d: 	jmp	.Ltmp92 # Offset: 589
    0000024f: 	endbr64
    00000253: 	movq	%rax, %rbp
    00000256: 	movq	0x40(%rsp), %rdi
    0000025b: 	cmpq	%r13, %rdi
    0000025e: 	je	.Ltmp93 # Offset: 606
    00000260: 	movq	0x50(%rsp), %rax
    00000265: 	leaq	0x1(%rax), %rsi
    00000269: 	callq	_ZdlPvm@PLT # Offset: 617
.Ltmp93:
    0000026e: 	movq	%rbp, %rdi
    00000271: 	callq	_Unwind_Resume@PLT # Offset: 625
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_memset_sizesIhPFvPhihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEEvPT_iT0_S6_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x2b20
  Size        : 0x328
  MaxSize     : 0x330
  Offset      : 0x2b20
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	0x48(%rdi), %r12
    00000019: 	movq	0x28(%rdi), %rsi
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x30(%rdi), %rax
    00000031: 	subq	0x38(%rdi), %rax
    00000035: 	movq	%r12, %r13
    00000038: 	sarq	$0x5, %rax
    0000003c: 	subq	%rsi, %r13
    0000003f: 	movq	%r13, %rcx
    00000042: 	sarq	$0x3, %rcx
    00000046: 	cmpq	$0x1, %r12
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	adcq	$-0x1, %rdx
    00000051: 	shlq	$0x4, %rdx
    00000055: 	addq	%rdx, %rax
    00000058: 	movq	0x20(%rdi), %rdx
    0000005c: 	subq	0x10(%rdi), %rdx
    00000060: 	sarq	$0x5, %rdx
    00000064: 	addq	%rdx, %rax
    00000067: 	movabsq	$0x3ffffffffffffff, %rdx
    00000071: 	cmpq	%rdx, %rax
    00000074: 	je	.Ltmp94 # Offset: 116
    0000007a: 	movq	0x8(%rdi), %rdx
    0000007e: 	movq	%rdi, %rbx
    00000081: 	movq	(%rdi), %rdi
    00000084: 	movq	%r12, %rax
    00000087: 	subq	%rdi, %rax
    0000008a: 	movq	%rdx, %r8
    0000008d: 	sarq	$0x3, %rax
    00000091: 	subq	%rax, %r8
    00000094: 	cmpq	$0x1, %r8
    00000098: 	jbe	.Ltmp95 # Offset: 152
.Ltmp106:
    0000009e: 	movl	$0x200, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	%rax, 0x8(%r12)
    000000ad: 	movq	0x30(%rbx), %r13
    000000b1: 	movq	0x8(%rbp), %r12
    000000b5: 	leaq	0x10(%r13), %rdi
    000000b9: 	movq	%rdi, (%r13)
    000000bd: 	movq	(%rbp), %r14
    000000c1: 	movq	%r14, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp96 # Offset: 199
    000000c9: 	testq	%r14, %r14
    000000cc: 	je	.Ltmp97 # Offset: 204
.Ltmp96:
    000000d2: 	movq	%r12, (%rsp)
    000000d6: 	cmpq	$0xf, %r12
    000000da: 	ja	.Ltmp98 # Offset: 218
    000000e0: 	cmpq	$0x1, %r12
    000000e4: 	jne	.Ltmp99 # Offset: 228
    000000e6: 	movzbl	(%r14), %eax
    000000ea: 	movb	%al, 0x10(%r13)
.Ltmp101:
    000000ee: 	movq	%r12, 0x8(%r13)
    000000f2: 	movb	$0x0, (%rdi,%r12)
    000000f7: 	movq	0x48(%rbx), %rdx
    000000fb: 	movq	0x8(%rdx), %rax
    000000ff: 	addq	$0x8, %rdx
    00000103: 	movq	%rdx, %xmm1
    00000108: 	movq	%rax, %xmm0
    0000010d: 	addq	$0x200, %rax
    00000113: 	punpcklqdq	%xmm0, %xmm0
    00000117: 	movups	%xmm0, 0x30(%rbx)
    0000011b: 	movq	%rax, %xmm0
    00000120: 	punpcklqdq	%xmm1, %xmm0
    00000124: 	movups	%xmm0, 0x40(%rbx)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	subq	%fs:0x28, %rax
    00000136: 	jne	.Ltmp100 # Offset: 310
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp99:
    00000150: 	testq	%r12, %r12
    00000153: 	je	.Ltmp101 # Offset: 339
    00000155: 	jmp	.Ltmp102 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp95:
    00000160: 	leaq	0x2(%rcx), %r14
    00000164: 	leaq	(%r14,%r14), %rax
    00000168: 	cmpq	%rax, %rdx
    0000016b: 	ja	.Ltmp103 # Offset: 363
    00000171: 	testq	%rdx, %rdx
    00000174: 	movl	$0x1, %eax
    00000179: 	cmovneq	%rdx, %rax
    0000017d: 	leaq	0x2(%rdx,%rax), %r15
    00000182: 	movq	%r15, %rax
    00000185: 	shrq	$0x3c, %rax
    00000189: 	jne	.Ltmp104 # Offset: 393
    0000018f: 	leaq	(,%r15,8), %rdi
    00000197: 	callq	_Znwm@PLT # Offset: 407
    0000019c: 	movq	0x28(%rbx), %rsi
    000001a0: 	movq	%rax, %r12
    000001a3: 	movq	%r15, %rax
    000001a6: 	subq	%r14, %rax
    000001a9: 	shrq	%rax
    000001ac: 	leaq	(%r12,%rax,8), %r14
    000001b0: 	movq	0x48(%rbx), %rax
    000001b4: 	leaq	0x8(%rax), %rdx
    000001b8: 	cmpq	%rsi, %rdx
    000001bb: 	je	.Ltmp105 # Offset: 443
    000001bd: 	subq	%rsi, %rdx
    000001c0: 	movq	%r14, %rdi
    000001c3: 	callq	memmove@PLT # Offset: 451
.Ltmp105:
    000001c8: 	movq	0x8(%rbx), %rax
    000001cc: 	movq	(%rbx), %rdi
    000001cf: 	leaq	(,%rax,8), %rsi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%r12, (%rbx)
    000001df: 	movq	%r15, 0x8(%rbx)
.Ltmp108:
    000001e3: 	movq	(%r14), %rax
    000001e6: 	movq	(%r14), %xmm0
    000001eb: 	leaq	(%r14,%r13), %r12
    000001ef: 	movq	%r14, 0x28(%rbx)
    000001f3: 	movq	%r12, 0x48(%rbx)
    000001f7: 	addq	$0x200, %rax
    000001fd: 	movq	%rax, %xmm2
    00000202: 	punpcklqdq	%xmm2, %xmm0
    00000206: 	movups	%xmm0, 0x18(%rbx)
    0000020a: 	movq	(%r12), %rax
    0000020e: 	movq	(%r12), %xmm0
    00000214: 	addq	$0x200, %rax
    0000021a: 	movq	%rax, %xmm3
    0000021f: 	punpcklqdq	%xmm3, %xmm0
    00000223: 	movups	%xmm0, 0x38(%rbx)
    00000227: 	jmp	.Ltmp106 # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp98:
    00000230: 	movq	%rsp, %rsi
    00000233: 	xorl	%edx, %edx
    00000235: 	movq	%r13, %rdi
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%r13)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%r13)
.Ltmp102:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r14, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%r13), %rdi
    0000025f: 	jmp	.Ltmp101 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp103:
    00000268: 	subq	%r14, %rdx
    0000026b: 	addq	$0x8, %r12
    0000026f: 	shrq	%rdx
    00000272: 	leaq	(%rdi,%rdx,8), %r14
    00000276: 	movq	%r12, %rdx
    00000279: 	subq	%rsi, %rdx
    0000027c: 	cmpq	%r14, %rsi
    0000027f: 	jbe	.Ltmp107 # Offset: 639
    00000281: 	cmpq	%r12, %rsi
    00000284: 	je	.Ltmp108 # Offset: 644
    0000028a: 	movq	%r14, %rdi
    0000028d: 	callq	memmove@PLT # Offset: 653
    00000292: 	jmp	.Ltmp108 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp107:
    000002a0: 	cmpq	%r12, %rsi
    000002a3: 	je	.Ltmp108 # Offset: 675
    000002a9: 	leaq	0x8(%r13), %rdi
    000002ad: 	subq	%rdx, %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	callq	memmove@PLT # Offset: 691
    000002b8: 	jmp	.Ltmp108 # Offset: 696
.Ltmp97:
    000002bd: 	leaq	DATAat0x12008(%rip), %rdi
    000002c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp104:
    000002d0: 	shrq	$0x3d, %r15
    000002d4: 	je	.Ltmp109 # Offset: 724
    000002d6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 726
.Ltmp109:
    000002db: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 731
.Ltmp94:
    000002e0: 	leaq	DATAat0x12248(%rip), %rdi
    000002e7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 743
.Ltmp100:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
    000002f1: 	endbr64
    000002f5: 	movq	%rax, %rdi
    000002f8: 	callq	__cxa_begin_catch@PLT # Offset: 760
    000002fd: 	movq	0x48(%rbx), %rax
    00000301: 	movl	$0x200, %esi
    00000306: 	movq	0x8(%rax), %rdi
    0000030a: 	callq	_ZdlPvm@PLT # Offset: 778
    0000030f: 	callq	__cxa_rethrow@PLT # Offset: 783
    00000314: 	endbr64
    00000318: 	movq	%rax, %rbp
    0000031b: 	callq	__cxa_end_catch@PLT # Offset: 795
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Unwind_Resume@PLT # Offset: 803
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_"

Binary Function "_Z18test_iterator_fillIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x2e50
  Size        : 0x427
  MaxSize     : 0x430
  Offset      : 0x2e50
  Section     : .text
  Orc Section : .local.text._Z18test_iterator_fillIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movzbl	%dl, %r15d
    0000000a: 	pushq	%r14
    0000000c: 	movq	%rcx, %r14
    0000000f: 	pushq	%r13
    00000011: 	pushq	%r12
    00000013: 	movslq	%esi, %r12
    00000016: 	pushq	%rbp
    00000017: 	leaq	(%rdi,%r12), %r13
    0000001b: 	pushq	%rbx
    0000001c: 	movq	%rdi, %rbx
    0000001f: 	subq	$0x28, %rsp
    00000023: 	movq	%fs:0x28, %rax
    0000002c: 	movq	%rax, 0x18(%rsp)
    00000031: 	xorl	%eax, %eax
    00000033: 	callq	clock@PLT # Offset: 51
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	movl	iterations(%rip), %eax
    00000045: 	testl	%eax, %eax
    00000047: 	jle	.Ltmp110 # Offset: 71
    00000049: 	xorl	%ebp, %ebp
    0000004b: 	cmpq	%r13, %rbx
    0000004e: 	je	.Ltmp110 # Offset: 78
.Ltmp111:
    00000050: 	movq	%r12, %rdx
    00000053: 	movl	%r15d, %esi
    00000056: 	movq	%rbx, %rdi
    00000059: 	addl	$0x1, %ebp
    0000005c: 	callq	memset@PLT # Offset: 92
    00000061: 	cmpl	iterations(%rip), %ebp
    00000067: 	jl	.Ltmp111 # Offset: 103
.Ltmp110:
    00000069: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000070: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    00000077: 	subq	$0x20, %rax
    0000007b: 	cmpq	%rax, %rbp
    0000007e: 	je	.Ltmp112 # Offset: 126
    00000084: 	leaq	0x10(%rbp), %rdi
    00000088: 	movq	0x8(%r14), %r15
    0000008c: 	movq	%rdi, (%rbp)
    00000090: 	movq	(%r14), %r8
    00000093: 	movq	%r8, %rax
    00000096: 	addq	%r15, %rax
    00000099: 	je	.Ltmp113 # Offset: 153
    0000009b: 	testq	%r8, %r8
    0000009e: 	je	.Ltmp114 # Offset: 158
.Ltmp113:
    000000a4: 	movq	%r15, 0x10(%rsp)
    000000a9: 	cmpq	$0xf, %r15
    000000ad: 	ja	.Ltmp115 # Offset: 173
    000000b3: 	cmpq	$0x1, %r15
    000000b7: 	jne	.Ltmp116 # Offset: 183
    000000bd: 	movzbl	(%r8), %eax
    000000c1: 	movb	%al, 0x10(%rbp)
.Ltmp124:
    000000c4: 	movq	%r15, 0x8(%rbp)
    000000c8: 	movb	$0x0, (%rdi,%r15)
    000000cd: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000d4: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000db: 	addq	$0x20, %rax
    000000df: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000e6: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000ed: 	je	.Ltmp117 # Offset: 237
.Ltmp125:
    000000f3: 	movq	-0x20(%rax), %rbp
    000000f7: 	callq	clock@PLT # Offset: 247
    000000fc: 	pxor	%xmm0, %xmm0
    00000100: 	movq	%rax, end_time(%rip)
    00000107: 	movq	%rbp, %rdi
    0000010a: 	subq	start_time(%rip), %rax
    00000111: 	cvtsi2sd	%rax, %xmm0
    00000116: 	divsd	DATAat0x12360(%rip), %xmm0
    0000011e: 	callq	_Z13record_resultdPKc # Offset: 286
    00000123: 	cmpq	%r13, %rbx
    00000126: 	je	.Ltmp118 # Offset: 294
    0000012c: 	leaq	-0x1(%r12), %rdx
    00000131: 	movq	%rbx, %rax
    00000134: 	cmpq	$0xe, %rdx
    00000138: 	jbe	.Ltmp119 # Offset: 312
    0000013e: 	pxor	%xmm6, %xmm6
    00000142: 	pxor	%xmm5, %xmm5
    00000146: 	pxor	%xmm4, %xmm4
    0000014a: 	movq	%r12, %rdx
    0000014d: 	andq	$-0x10, %rdx
    00000151: 	pxor	%xmm3, %xmm3
    00000155: 	addq	%rbx, %rdx
    00000158: 	nopl	(%rax,%rax) # Size: 8
.Ltmp120:
    00000160: 	movdqu	(%rax), %xmm1
    00000164: 	addq	$0x10, %rax
    00000168: 	movdqa	%xmm1, %xmm0
    0000016c: 	punpckhbw	%xmm5, %xmm1
    00000170: 	punpcklbw	%xmm5, %xmm0
    00000174: 	movdqa	%xmm1, %xmm2
    00000178: 	punpckhwd	%xmm4, %xmm1
    0000017c: 	movdqa	%xmm0, %xmm7
    00000180: 	punpckhwd	%xmm4, %xmm0
    00000184: 	punpcklwd	%xmm4, %xmm2
    00000188: 	movdqa	%xmm0, %xmm8
    0000018d: 	punpcklwd	%xmm4, %xmm7
    00000191: 	punpckhdq	%xmm3, %xmm0
    00000195: 	punpckldq	%xmm3, %xmm8
    0000019a: 	paddq	%xmm8, %xmm0
    0000019f: 	movdqa	%xmm7, %xmm8
    000001a4: 	punpckhdq	%xmm3, %xmm7
    000001a8: 	punpckldq	%xmm3, %xmm8
    000001ad: 	paddq	%xmm8, %xmm7
    000001b2: 	paddq	%xmm7, %xmm0
    000001b6: 	movdqa	%xmm2, %xmm7
    000001ba: 	punpckhdq	%xmm3, %xmm2
    000001be: 	punpckldq	%xmm3, %xmm7
    000001c2: 	paddq	%xmm7, %xmm2
    000001c6: 	movdqa	%xmm1, %xmm7
    000001ca: 	punpckhdq	%xmm3, %xmm1
    000001ce: 	punpckldq	%xmm3, %xmm7
    000001d2: 	paddq	%xmm6, %xmm1
    000001d6: 	paddq	%xmm7, %xmm2
    000001da: 	paddq	%xmm2, %xmm0
    000001de: 	movdqa	%xmm0, %xmm6
    000001e2: 	paddq	%xmm1, %xmm6
    000001e6: 	cmpq	%rax, %rdx
    000001e9: 	jne	.Ltmp120 # Offset: 489
    000001ef: 	movdqa	%xmm6, %xmm0
    000001f3: 	movq	%r12, %rdx
    000001f6: 	psrldq	$0x8, %xmm0
    000001fb: 	andq	$-0x10, %rdx
    000001ff: 	paddq	%xmm0, %xmm6
    00000203: 	addq	%rdx, %rbx
    00000206: 	movq	%xmm6, %rax
    0000020b: 	cmpq	%rdx, %r12
    0000020e: 	je	.Ltmp121 # Offset: 526
.Ltmp127:
    00000214: 	movzbl	(%rbx), %edx
    00000217: 	addq	%rdx, %rax
    0000021a: 	leaq	0x1(%rbx), %rdx
    0000021e: 	cmpq	%rdx, %r13
    00000221: 	je	.Ltmp121 # Offset: 545
    00000227: 	movzbl	0x1(%rbx), %edx
    0000022b: 	addq	%rdx, %rax
    0000022e: 	leaq	0x2(%rbx), %rdx
    00000232: 	cmpq	%rdx, %r13
    00000235: 	je	.Ltmp121 # Offset: 565
    0000023b: 	movzbl	0x2(%rbx), %edx
    0000023f: 	addq	%rdx, %rax
    00000242: 	leaq	0x3(%rbx), %rdx
    00000246: 	cmpq	%rdx, %r13
    00000249: 	je	.Ltmp121 # Offset: 585
    0000024f: 	movzbl	0x3(%rbx), %edx
    00000253: 	addq	%rdx, %rax
    00000256: 	leaq	0x4(%rbx), %rdx
    0000025a: 	cmpq	%rdx, %r13
    0000025d: 	je	.Ltmp121 # Offset: 605
    00000263: 	movzbl	0x4(%rbx), %edx
    00000267: 	addq	%rdx, %rax
    0000026a: 	leaq	0x5(%rbx), %rdx
    0000026e: 	cmpq	%rdx, %r13
    00000271: 	je	.Ltmp121 # Offset: 625
    00000277: 	movzbl	0x5(%rbx), %edx
    0000027b: 	addq	%rdx, %rax
    0000027e: 	leaq	0x6(%rbx), %rdx
    00000282: 	cmpq	%rdx, %r13
    00000285: 	je	.Ltmp121 # Offset: 645
    0000028b: 	movzbl	0x6(%rbx), %edx
    0000028f: 	addq	%rdx, %rax
    00000292: 	leaq	0x7(%rbx), %rdx
    00000296: 	cmpq	%rdx, %r13
    00000299: 	je	.Ltmp121 # Offset: 665
    0000029b: 	movzbl	0x7(%rbx), %edx
    0000029f: 	addq	%rdx, %rax
    000002a2: 	leaq	0x8(%rbx), %rdx
    000002a6: 	cmpq	%rdx, %r13
    000002a9: 	je	.Ltmp121 # Offset: 681
    000002ab: 	movzbl	0x8(%rbx), %edx
    000002af: 	addq	%rdx, %rax
    000002b2: 	leaq	0x9(%rbx), %rdx
    000002b6: 	cmpq	%rdx, %r13
    000002b9: 	je	.Ltmp121 # Offset: 697
    000002bb: 	movzbl	0x9(%rbx), %edx
    000002bf: 	addq	%rdx, %rax
    000002c2: 	leaq	0xa(%rbx), %rdx
    000002c6: 	cmpq	%rdx, %r13
    000002c9: 	je	.Ltmp121 # Offset: 713
    000002cb: 	movzbl	0xa(%rbx), %edx
    000002cf: 	addq	%rdx, %rax
    000002d2: 	leaq	0xb(%rbx), %rdx
    000002d6: 	cmpq	%rdx, %r13
    000002d9: 	je	.Ltmp121 # Offset: 729
    000002db: 	movzbl	0xb(%rbx), %edx
    000002df: 	addq	%rdx, %rax
    000002e2: 	leaq	0xc(%rbx), %rdx
    000002e6: 	cmpq	%rdx, %r13
    000002e9: 	je	.Ltmp121 # Offset: 745
    000002eb: 	movzbl	0xc(%rbx), %edx
    000002ef: 	addq	%rdx, %rax
    000002f2: 	leaq	0xd(%rbx), %rdx
    000002f6: 	cmpq	%rdx, %r13
    000002f9: 	je	.Ltmp121 # Offset: 761
    000002fb: 	movzbl	0xd(%rbx), %edx
    000002ff: 	addq	%rdx, %rax
    00000302: 	leaq	0xe(%rbx), %rdx
    00000306: 	cmpq	%rdx, %r13
    00000309: 	je	.Ltmp121 # Offset: 777
    0000030b: 	movzbl	0xe(%rbx), %edx
    0000030f: 	addq	%rdx, %rax
    00000312: 	nopw	(%rax,%rax) # Size: 6
.Ltmp121:
    00000318: 	movzbl	init_value(%rip), %edx
    0000031f: 	imulq	%r12, %rdx
    00000323: 	cmpq	%rax, %rdx
    00000326: 	je	.Ltmp122 # Offset: 806
    00000328: 	movq	0x18(%rsp), %rax
    0000032d: 	subq	%fs:0x28, %rax
    00000336: 	jne	.Ltmp123 # Offset: 822
    0000033c: 	movq	(%r14), %rdx
    0000033f: 	addq	$0x28, %rsp
    00000343: 	leaq	DATAat0x12278(%rip), %rsi
    0000034a: 	xorl	%eax, %eax
    0000034c: 	popq	%rbx
    0000034d: 	movl	$0x1, %edi
    00000352: 	popq	%rbp
    00000353: 	popq	%r12
    00000355: 	popq	%r13
    00000357: 	popq	%r14
    00000359: 	popq	%r15
    0000035b: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 859
.Ltmp115:
    00000360: 	movq	%rbp, %rdi
    00000363: 	leaq	0x10(%rsp), %rsi
    00000368: 	xorl	%edx, %edx
    0000036a: 	movq	%r8, 0x8(%rsp)
    0000036f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 879
    00000374: 	movq	0x8(%rsp), %r8
    00000379: 	movq	%rax, (%rbp)
    0000037d: 	movq	%rax, %rdi
    00000380: 	movq	0x10(%rsp), %rax
    00000385: 	movq	%rax, 0x10(%rbp)
.Ltmp126:
    00000389: 	movq	%r15, %rdx
    0000038c: 	movq	%r8, %rsi
    0000038f: 	callq	memcpy@PLT # Offset: 911
    00000394: 	movq	0x10(%rsp), %r15
    00000399: 	movq	(%rbp), %rdi
    0000039d: 	jmp	.Ltmp124 # Offset: 925
.Ltmp122:
    000003a2: 	movq	0x18(%rsp), %rax
    000003a7: 	subq	%fs:0x28, %rax
    000003b0: 	jne	.Ltmp123 # Offset: 944
    000003b2: 	addq	$0x28, %rsp
    000003b6: 	popq	%rbx
    000003b7: 	popq	%rbp
    000003b8: 	popq	%r12
    000003ba: 	popq	%r13
    000003bc: 	popq	%r14
    000003be: 	popq	%r15
    000003c0: 	retq # Offset: 960
.Ltmp112:
    000003c1: 	movq	%r14, %rsi
    000003c4: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000003cb: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 971
    000003d0: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000003d7: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000003de: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000003e5: 	jne	.Ltmp125 # Offset: 997
.Ltmp117:
    000003eb: 	movq	-0x8(%rdx), %rax
    000003ef: 	addq	$0x200, %rax
    000003f5: 	jmp	.Ltmp125 # Offset: 1013
.Ltmp116:
    000003fa: 	testq	%r15, %r15
    000003fd: 	je	.Ltmp124 # Offset: 1021
    00000403: 	jmp	.Ltmp126 # Offset: 1027
    00000405: 	nopl	(%rax) # Size: 3
.Ltmp118:
    00000408: 	xorl	%eax, %eax
    0000040a: 	jmp	.Ltmp121 # Offset: 1034
.Ltmp119:
    0000040f: 	xorl	%eax, %eax
    00000411: 	jmp	.Ltmp127 # Offset: 1041
.Ltmp123:
    00000416: 	callq	__stack_chk_fail@PLT # Offset: 1046
.Ltmp114:
    0000041b: 	leaq	DATAat0x12008(%rip), %rdi
    00000422: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1058
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_iterator_fillIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_forloop_fillIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x3280
  Size        : 0x41f
  MaxSize     : 0x420
  Offset      : 0x3280
  Section     : .text
  Orc Section : .local.text._Z17test_forloop_fillIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movslq	%esi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rcx, %r13
    00000010: 	pushq	%r12
    00000012: 	movzbl	%dl, %r12d
    00000016: 	pushq	%rbp
    00000017: 	movq	%rdi, %rbp
    0000001a: 	pushq	%rbx
    0000001b: 	subq	$0x18, %rsp
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x8(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	iterations(%rip), %eax
    00000041: 	testl	%eax, %eax
    00000043: 	jle	.Ltmp128 # Offset: 67
    00000045: 	xorl	%ebx, %ebx
    00000047: 	movslq	%r14d, %r15
    0000004a: 	testl	%r14d, %r14d
    0000004d: 	jle	.Ltmp128 # Offset: 77
    0000004f: 	nop # Size: 1
.Ltmp129:
    00000050: 	movq	%r15, %rdx
    00000053: 	movl	%r12d, %esi
    00000056: 	movq	%rbp, %rdi
    00000059: 	addl	$0x1, %ebx
    0000005c: 	callq	memset@PLT # Offset: 92
    00000061: 	cmpl	iterations(%rip), %ebx
    00000067: 	jl	.Ltmp129 # Offset: 103
.Ltmp128:
    00000069: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000070: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000077: 	subq	$0x20, %rax
    0000007b: 	cmpq	%rax, %rbx
    0000007e: 	je	.Ltmp130 # Offset: 126
    00000084: 	leaq	0x10(%rbx), %rdi
    00000088: 	movq	0x8(%r13), %r12
    0000008c: 	movq	%rdi, (%rbx)
    0000008f: 	movq	(%r13), %r15
    00000093: 	movq	%r15, %rax
    00000096: 	addq	%r12, %rax
    00000099: 	je	.Ltmp131 # Offset: 153
    0000009b: 	testq	%r15, %r15
    0000009e: 	je	.Ltmp132 # Offset: 158
.Ltmp131:
    000000a4: 	movq	%r12, (%rsp)
    000000a8: 	cmpq	$0xf, %r12
    000000ac: 	ja	.Ltmp133 # Offset: 172
    000000b2: 	cmpq	$0x1, %r12
    000000b6: 	jne	.Ltmp134 # Offset: 182
    000000bc: 	movzbl	(%r15), %eax
    000000c0: 	movb	%al, 0x10(%rbx)
.Ltmp142:
    000000c3: 	movq	%r12, 0x8(%rbx)
    000000c7: 	movb	$0x0, (%rdi,%r12)
    000000cc: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000d3: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000da: 	addq	$0x20, %rax
    000000de: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000e5: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000ec: 	je	.Ltmp135 # Offset: 236
.Ltmp143:
    000000f2: 	movq	-0x20(%rax), %r12
    000000f6: 	callq	clock@PLT # Offset: 246
    000000fb: 	pxor	%xmm0, %xmm0
    000000ff: 	movq	%rax, end_time(%rip)
    00000106: 	movq	%r12, %rdi
    00000109: 	subq	start_time(%rip), %rax
    00000110: 	cvtsi2sd	%rax, %xmm0
    00000115: 	divsd	DATAat0x12360(%rip), %xmm0
    0000011d: 	callq	_Z13record_resultdPKc # Offset: 285
    00000122: 	leaq	(%rbp,%r14), %rdx
    00000127: 	cmpq	%rdx, %rbp
    0000012a: 	je	.Ltmp136 # Offset: 298
    00000130: 	leaq	-0x1(%r14), %rcx
    00000134: 	movq	%rbp, %rax
    00000137: 	cmpq	$0xe, %rcx
    0000013b: 	jbe	.Ltmp137 # Offset: 315
    00000141: 	pxor	%xmm6, %xmm6
    00000145: 	pxor	%xmm5, %xmm5
    00000149: 	pxor	%xmm4, %xmm4
    0000014d: 	movq	%r14, %rcx
    00000150: 	andq	$-0x10, %rcx
    00000154: 	pxor	%xmm3, %xmm3
    00000158: 	addq	%rbp, %rcx
    0000015b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp138:
    00000160: 	movdqu	(%rax), %xmm1
    00000164: 	addq	$0x10, %rax
    00000168: 	movdqa	%xmm1, %xmm0
    0000016c: 	punpckhbw	%xmm5, %xmm1
    00000170: 	punpcklbw	%xmm5, %xmm0
    00000174: 	movdqa	%xmm1, %xmm2
    00000178: 	punpckhwd	%xmm4, %xmm1
    0000017c: 	movdqa	%xmm0, %xmm7
    00000180: 	punpckhwd	%xmm4, %xmm0
    00000184: 	punpcklwd	%xmm4, %xmm2
    00000188: 	movdqa	%xmm0, %xmm8
    0000018d: 	punpcklwd	%xmm4, %xmm7
    00000191: 	punpckhdq	%xmm3, %xmm0
    00000195: 	punpckldq	%xmm3, %xmm8
    0000019a: 	paddq	%xmm8, %xmm0
    0000019f: 	movdqa	%xmm7, %xmm8
    000001a4: 	punpckhdq	%xmm3, %xmm7
    000001a8: 	punpckldq	%xmm3, %xmm8
    000001ad: 	paddq	%xmm8, %xmm7
    000001b2: 	paddq	%xmm7, %xmm0
    000001b6: 	movdqa	%xmm2, %xmm7
    000001ba: 	punpckhdq	%xmm3, %xmm2
    000001be: 	punpckldq	%xmm3, %xmm7
    000001c2: 	paddq	%xmm7, %xmm2
    000001c6: 	movdqa	%xmm1, %xmm7
    000001ca: 	punpckhdq	%xmm3, %xmm1
    000001ce: 	punpckldq	%xmm3, %xmm7
    000001d2: 	paddq	%xmm6, %xmm1
    000001d6: 	paddq	%xmm7, %xmm2
    000001da: 	paddq	%xmm2, %xmm0
    000001de: 	movdqa	%xmm0, %xmm6
    000001e2: 	paddq	%xmm1, %xmm6
    000001e6: 	cmpq	%rcx, %rax
    000001e9: 	jne	.Ltmp138 # Offset: 489
    000001ef: 	movdqa	%xmm6, %xmm0
    000001f3: 	movq	%r14, %rcx
    000001f6: 	psrldq	$0x8, %xmm0
    000001fb: 	andq	$-0x10, %rcx
    000001ff: 	paddq	%xmm0, %xmm6
    00000203: 	addq	%rcx, %rbp
    00000206: 	movq	%xmm6, %rax
    0000020b: 	cmpq	%rcx, %r14
    0000020e: 	je	.Ltmp139 # Offset: 526
.Ltmp145:
    00000214: 	movzbl	(%rbp), %ecx
    00000218: 	addq	%rcx, %rax
    0000021b: 	leaq	0x1(%rbp), %rcx
    0000021f: 	cmpq	%rcx, %rdx
    00000222: 	je	.Ltmp139 # Offset: 546
    00000228: 	movzbl	0x1(%rbp), %ecx
    0000022c: 	addq	%rcx, %rax
    0000022f: 	leaq	0x2(%rbp), %rcx
    00000233: 	cmpq	%rcx, %rdx
    00000236: 	je	.Ltmp139 # Offset: 566
    0000023c: 	movzbl	0x2(%rbp), %ecx
    00000240: 	addq	%rcx, %rax
    00000243: 	leaq	0x3(%rbp), %rcx
    00000247: 	cmpq	%rcx, %rdx
    0000024a: 	je	.Ltmp139 # Offset: 586
    00000250: 	movzbl	0x3(%rbp), %ecx
    00000254: 	addq	%rcx, %rax
    00000257: 	leaq	0x4(%rbp), %rcx
    0000025b: 	cmpq	%rcx, %rdx
    0000025e: 	je	.Ltmp139 # Offset: 606
    00000264: 	movzbl	0x4(%rbp), %ecx
    00000268: 	addq	%rcx, %rax
    0000026b: 	leaq	0x5(%rbp), %rcx
    0000026f: 	cmpq	%rcx, %rdx
    00000272: 	je	.Ltmp139 # Offset: 626
    00000278: 	movzbl	0x5(%rbp), %ecx
    0000027c: 	addq	%rcx, %rax
    0000027f: 	leaq	0x6(%rbp), %rcx
    00000283: 	cmpq	%rcx, %rdx
    00000286: 	je	.Ltmp139 # Offset: 646
    0000028c: 	movzbl	0x6(%rbp), %ecx
    00000290: 	addq	%rcx, %rax
    00000293: 	leaq	0x7(%rbp), %rcx
    00000297: 	cmpq	%rcx, %rdx
    0000029a: 	je	.Ltmp139 # Offset: 666
    0000029c: 	movzbl	0x7(%rbp), %ecx
    000002a0: 	addq	%rcx, %rax
    000002a3: 	leaq	0x8(%rbp), %rcx
    000002a7: 	cmpq	%rcx, %rdx
    000002aa: 	je	.Ltmp139 # Offset: 682
    000002ac: 	movzbl	0x8(%rbp), %ecx
    000002b0: 	addq	%rcx, %rax
    000002b3: 	leaq	0x9(%rbp), %rcx
    000002b7: 	cmpq	%rcx, %rdx
    000002ba: 	je	.Ltmp139 # Offset: 698
    000002bc: 	movzbl	0x9(%rbp), %ecx
    000002c0: 	addq	%rcx, %rax
    000002c3: 	leaq	0xa(%rbp), %rcx
    000002c7: 	cmpq	%rcx, %rdx
    000002ca: 	je	.Ltmp139 # Offset: 714
    000002cc: 	movzbl	0xa(%rbp), %ecx
    000002d0: 	addq	%rcx, %rax
    000002d3: 	leaq	0xb(%rbp), %rcx
    000002d7: 	cmpq	%rcx, %rdx
    000002da: 	je	.Ltmp139 # Offset: 730
    000002dc: 	movzbl	0xb(%rbp), %ecx
    000002e0: 	addq	%rcx, %rax
    000002e3: 	leaq	0xc(%rbp), %rcx
    000002e7: 	cmpq	%rcx, %rdx
    000002ea: 	je	.Ltmp139 # Offset: 746
    000002ec: 	movzbl	0xc(%rbp), %ecx
    000002f0: 	addq	%rcx, %rax
    000002f3: 	leaq	0xd(%rbp), %rcx
    000002f7: 	cmpq	%rcx, %rdx
    000002fa: 	je	.Ltmp139 # Offset: 762
    000002fc: 	movzbl	0xd(%rbp), %ecx
    00000300: 	addq	%rcx, %rax
    00000303: 	leaq	0xe(%rbp), %rcx
    00000307: 	cmpq	%rcx, %rdx
    0000030a: 	je	.Ltmp139 # Offset: 778
    0000030c: 	movzbl	0xe(%rbp), %edx
    00000310: 	addq	%rdx, %rax
    00000313: 	nopl	(%rax,%rax) # Size: 5
.Ltmp139:
    00000318: 	movzbl	init_value(%rip), %edx
    0000031f: 	imulq	%r14, %rdx
    00000323: 	cmpq	%rax, %rdx
    00000326: 	je	.Ltmp140 # Offset: 806
    00000328: 	movq	0x8(%rsp), %rax
    0000032d: 	subq	%fs:0x28, %rax
    00000336: 	jne	.Ltmp141 # Offset: 822
    0000033c: 	movq	(%r13), %rdx
    00000340: 	addq	$0x18, %rsp
    00000344: 	leaq	DATAat0x12278(%rip), %rsi
    0000034b: 	xorl	%eax, %eax
    0000034d: 	popq	%rbx
    0000034e: 	movl	$0x1, %edi
    00000353: 	popq	%rbp
    00000354: 	popq	%r12
    00000356: 	popq	%r13
    00000358: 	popq	%r14
    0000035a: 	popq	%r15
    0000035c: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 860
.Ltmp133:
    00000361: 	movq	%rbx, %rdi
    00000364: 	movq	%rsp, %rsi
    00000367: 	xorl	%edx, %edx
    00000369: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 873
    0000036e: 	movq	%rax, (%rbx)
    00000371: 	movq	%rax, %rdi
    00000374: 	movq	(%rsp), %rax
    00000378: 	movq	%rax, 0x10(%rbx)
.Ltmp144:
    0000037c: 	movq	%r12, %rdx
    0000037f: 	movq	%r15, %rsi
    00000382: 	callq	memcpy@PLT # Offset: 898
    00000387: 	movq	(%rsp), %r12
    0000038b: 	movq	(%rbx), %rdi
    0000038e: 	jmp	.Ltmp142 # Offset: 910
.Ltmp140:
    00000393: 	movq	0x8(%rsp), %rax
    00000398: 	subq	%fs:0x28, %rax
    000003a1: 	jne	.Ltmp141 # Offset: 929
    000003a3: 	addq	$0x18, %rsp
    000003a7: 	popq	%rbx
    000003a8: 	popq	%rbp
    000003a9: 	popq	%r12
    000003ab: 	popq	%r13
    000003ad: 	popq	%r14
    000003af: 	popq	%r15
    000003b1: 	retq # Offset: 945
.Ltmp130:
    000003b2: 	movq	%r13, %rsi
    000003b5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000003bc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 956
    000003c1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000003c8: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000003cf: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000003d6: 	jne	.Ltmp143 # Offset: 982
.Ltmp135:
    000003dc: 	movq	-0x8(%rdx), %rax
    000003e0: 	addq	$0x200, %rax
    000003e6: 	jmp	.Ltmp143 # Offset: 998
.Ltmp134:
    000003eb: 	testq	%r12, %r12
    000003ee: 	je	.Ltmp142 # Offset: 1006
    000003f4: 	jmp	.Ltmp144 # Offset: 1012
    000003f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp136:
    00000400: 	xorl	%eax, %eax
    00000402: 	jmp	.Ltmp139 # Offset: 1026
.Ltmp137:
    00000407: 	xorl	%eax, %eax
    00000409: 	jmp	.Ltmp145 # Offset: 1033
.Ltmp141:
    0000040e: 	callq	__stack_chk_fail@PLT # Offset: 1038
.Ltmp132:
    00000413: 	leaq	DATAat0x12008(%rip), %rdi
    0000041a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1050
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_forloop_fillIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_library_memsetIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x36a0
  Size        : 0x42f
  MaxSize     : 0x430
  Offset      : 0x36a0
  Section     : .text
  Orc Section : .local.text._Z19test_library_memsetIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movslq	%esi, %r15
    00000009: 	pushq	%r14
    0000000b: 	movq	%r15, %r14
    0000000e: 	pushq	%r13
    00000010: 	movq	%rcx, %r13
    00000013: 	pushq	%r12
    00000015: 	movl	%edx, %r12d
    00000018: 	pushq	%rbp
    00000019: 	movzbl	%r12b, %r12d
    0000001d: 	xorl	%ebp, %ebp
    0000001f: 	pushq	%rbx
    00000020: 	movq	%rdi, %rbx
    00000023: 	subq	$0x18, %rsp
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x8(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movq	%rax, start_time(%rip)
    00000043: 	movl	iterations(%rip), %eax
    00000049: 	testl	%eax, %eax
    0000004b: 	jle	.Ltmp146 # Offset: 75
    0000004d: 	nopl	(%rax) # Size: 3
.Ltmp147:
    00000050: 	movq	%r15, %rdx
    00000053: 	movl	%r12d, %esi
    00000056: 	movq	%rbx, %rdi
    00000059: 	addl	$0x1, %ebp
    0000005c: 	callq	memset@PLT # Offset: 92
    00000061: 	cmpl	%ebp, iterations(%rip)
    00000067: 	jg	.Ltmp147 # Offset: 103
.Ltmp146:
    00000069: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000070: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    00000077: 	subq	$0x20, %rax
    0000007b: 	cmpq	%rax, %rbp
    0000007e: 	je	.Ltmp148 # Offset: 126
    00000084: 	leaq	0x10(%rbp), %rdi
    00000088: 	movq	0x8(%r13), %r12
    0000008c: 	movq	%rdi, (%rbp)
    00000090: 	movq	(%r13), %r15
    00000094: 	movq	%r15, %rax
    00000097: 	addq	%r12, %rax
    0000009a: 	je	.Ltmp149 # Offset: 154
    0000009c: 	testq	%r15, %r15
    0000009f: 	je	.Ltmp150 # Offset: 159
.Ltmp149:
    000000a5: 	movq	%r12, (%rsp)
    000000a9: 	cmpq	$0xf, %r12
    000000ad: 	ja	.Ltmp151 # Offset: 173
    000000b3: 	cmpq	$0x1, %r12
    000000b7: 	jne	.Ltmp152 # Offset: 183
    000000bd: 	movzbl	(%r15), %eax
    000000c1: 	movb	%al, 0x10(%rbp)
.Ltmp160:
    000000c4: 	movq	%r12, 0x8(%rbp)
    000000c8: 	movb	$0x0, (%rdi,%r12)
    000000cd: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000d4: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000db: 	addq	$0x20, %rax
    000000df: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000e6: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000ed: 	je	.Ltmp153 # Offset: 237
.Ltmp161:
    000000f3: 	movq	-0x20(%rax), %rbp
    000000f7: 	callq	clock@PLT # Offset: 247
    000000fc: 	pxor	%xmm0, %xmm0
    00000100: 	movq	%rax, end_time(%rip)
    00000107: 	movq	%rbp, %rdi
    0000010a: 	subq	start_time(%rip), %rax
    00000111: 	cvtsi2sd	%rax, %xmm0
    00000116: 	divsd	DATAat0x12360(%rip), %xmm0
    0000011e: 	callq	_Z13record_resultdPKc # Offset: 286
    00000123: 	leaq	(%rbx,%r14), %rdx
    00000127: 	cmpq	%rdx, %rbx
    0000012a: 	je	.Ltmp154 # Offset: 298
    00000130: 	leaq	-0x1(%r14), %rcx
    00000134: 	movq	%rbx, %rax
    00000137: 	cmpq	$0xe, %rcx
    0000013b: 	jbe	.Ltmp155 # Offset: 315
    00000141: 	pxor	%xmm6, %xmm6
    00000145: 	pxor	%xmm5, %xmm5
    00000149: 	pxor	%xmm4, %xmm4
    0000014d: 	movq	%r14, %rcx
    00000150: 	andq	$-0x10, %rcx
    00000154: 	pxor	%xmm3, %xmm3
    00000158: 	addq	%rbx, %rcx
    0000015b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp156:
    00000160: 	movdqu	(%rax), %xmm1
    00000164: 	addq	$0x10, %rax
    00000168: 	movdqa	%xmm1, %xmm0
    0000016c: 	punpckhbw	%xmm5, %xmm1
    00000170: 	punpcklbw	%xmm5, %xmm0
    00000174: 	movdqa	%xmm1, %xmm2
    00000178: 	punpckhwd	%xmm4, %xmm1
    0000017c: 	movdqa	%xmm0, %xmm7
    00000180: 	punpckhwd	%xmm4, %xmm0
    00000184: 	punpcklwd	%xmm4, %xmm2
    00000188: 	movdqa	%xmm0, %xmm8
    0000018d: 	punpcklwd	%xmm4, %xmm7
    00000191: 	punpckhdq	%xmm3, %xmm0
    00000195: 	punpckldq	%xmm3, %xmm8
    0000019a: 	paddq	%xmm8, %xmm0
    0000019f: 	movdqa	%xmm7, %xmm8
    000001a4: 	punpckhdq	%xmm3, %xmm7
    000001a8: 	punpckldq	%xmm3, %xmm8
    000001ad: 	paddq	%xmm8, %xmm7
    000001b2: 	paddq	%xmm7, %xmm0
    000001b6: 	movdqa	%xmm2, %xmm7
    000001ba: 	punpckhdq	%xmm3, %xmm2
    000001be: 	punpckldq	%xmm3, %xmm7
    000001c2: 	paddq	%xmm7, %xmm2
    000001c6: 	movdqa	%xmm1, %xmm7
    000001ca: 	punpckhdq	%xmm3, %xmm1
    000001ce: 	punpckldq	%xmm3, %xmm7
    000001d2: 	paddq	%xmm6, %xmm1
    000001d6: 	paddq	%xmm7, %xmm2
    000001da: 	paddq	%xmm2, %xmm0
    000001de: 	movdqa	%xmm0, %xmm6
    000001e2: 	paddq	%xmm1, %xmm6
    000001e6: 	cmpq	%rcx, %rax
    000001e9: 	jne	.Ltmp156 # Offset: 489
    000001ef: 	movdqa	%xmm6, %xmm0
    000001f3: 	movq	%r14, %rcx
    000001f6: 	psrldq	$0x8, %xmm0
    000001fb: 	andq	$-0x10, %rcx
    000001ff: 	paddq	%xmm0, %xmm6
    00000203: 	addq	%rcx, %rbx
    00000206: 	movq	%xmm6, %rax
    0000020b: 	cmpq	%rcx, %r14
    0000020e: 	je	.Ltmp157 # Offset: 526
.Ltmp163:
    00000214: 	movzbl	(%rbx), %ecx
    00000217: 	addq	%rcx, %rax
    0000021a: 	leaq	0x1(%rbx), %rcx
    0000021e: 	cmpq	%rcx, %rdx
    00000221: 	je	.Ltmp157 # Offset: 545
    00000227: 	movzbl	0x1(%rbx), %ecx
    0000022b: 	addq	%rcx, %rax
    0000022e: 	leaq	0x2(%rbx), %rcx
    00000232: 	cmpq	%rcx, %rdx
    00000235: 	je	.Ltmp157 # Offset: 565
    0000023b: 	movzbl	0x2(%rbx), %ecx
    0000023f: 	addq	%rcx, %rax
    00000242: 	leaq	0x3(%rbx), %rcx
    00000246: 	cmpq	%rcx, %rdx
    00000249: 	je	.Ltmp157 # Offset: 585
    0000024f: 	movzbl	0x3(%rbx), %ecx
    00000253: 	addq	%rcx, %rax
    00000256: 	leaq	0x4(%rbx), %rcx
    0000025a: 	cmpq	%rcx, %rdx
    0000025d: 	je	.Ltmp157 # Offset: 605
    00000263: 	movzbl	0x4(%rbx), %ecx
    00000267: 	addq	%rcx, %rax
    0000026a: 	leaq	0x5(%rbx), %rcx
    0000026e: 	cmpq	%rcx, %rdx
    00000271: 	je	.Ltmp157 # Offset: 625
    00000277: 	movzbl	0x5(%rbx), %ecx
    0000027b: 	addq	%rcx, %rax
    0000027e: 	leaq	0x6(%rbx), %rcx
    00000282: 	cmpq	%rcx, %rdx
    00000285: 	je	.Ltmp157 # Offset: 645
    0000028b: 	movzbl	0x6(%rbx), %ecx
    0000028f: 	addq	%rcx, %rax
    00000292: 	leaq	0x7(%rbx), %rcx
    00000296: 	cmpq	%rcx, %rdx
    00000299: 	je	.Ltmp157 # Offset: 665
    0000029b: 	movzbl	0x7(%rbx), %ecx
    0000029f: 	addq	%rcx, %rax
    000002a2: 	leaq	0x8(%rbx), %rcx
    000002a6: 	cmpq	%rcx, %rdx
    000002a9: 	je	.Ltmp157 # Offset: 681
    000002ab: 	movzbl	0x8(%rbx), %ecx
    000002af: 	addq	%rcx, %rax
    000002b2: 	leaq	0x9(%rbx), %rcx
    000002b6: 	cmpq	%rcx, %rdx
    000002b9: 	je	.Ltmp157 # Offset: 697
    000002bb: 	movzbl	0x9(%rbx), %ecx
    000002bf: 	addq	%rcx, %rax
    000002c2: 	leaq	0xa(%rbx), %rcx
    000002c6: 	cmpq	%rcx, %rdx
    000002c9: 	je	.Ltmp157 # Offset: 713
    000002cb: 	movzbl	0xa(%rbx), %ecx
    000002cf: 	addq	%rcx, %rax
    000002d2: 	leaq	0xb(%rbx), %rcx
    000002d6: 	cmpq	%rcx, %rdx
    000002d9: 	je	.Ltmp157 # Offset: 729
    000002db: 	movzbl	0xb(%rbx), %ecx
    000002df: 	addq	%rcx, %rax
    000002e2: 	leaq	0xc(%rbx), %rcx
    000002e6: 	cmpq	%rcx, %rdx
    000002e9: 	je	.Ltmp157 # Offset: 745
    000002eb: 	movzbl	0xc(%rbx), %ecx
    000002ef: 	addq	%rcx, %rax
    000002f2: 	leaq	0xd(%rbx), %rcx
    000002f6: 	cmpq	%rcx, %rdx
    000002f9: 	je	.Ltmp157 # Offset: 761
    000002fb: 	movzbl	0xd(%rbx), %ecx
    000002ff: 	addq	%rcx, %rax
    00000302: 	leaq	0xe(%rbx), %rcx
    00000306: 	cmpq	%rcx, %rdx
    00000309: 	je	.Ltmp157 # Offset: 777
    0000030b: 	movzbl	0xe(%rbx), %edx
    0000030f: 	addq	%rdx, %rax
    00000312: 	nopw	(%rax,%rax) # Size: 6
.Ltmp157:
    00000318: 	movzbl	init_value(%rip), %edx
    0000031f: 	imulq	%r14, %rdx
    00000323: 	cmpq	%rax, %rdx
    00000326: 	je	.Ltmp158 # Offset: 806
    00000328: 	movq	0x8(%rsp), %rax
    0000032d: 	subq	%fs:0x28, %rax
    00000336: 	jne	.Ltmp159 # Offset: 822
    0000033c: 	movq	(%r13), %rdx
    00000340: 	addq	$0x18, %rsp
    00000344: 	leaq	DATAat0x12278(%rip), %rsi
    0000034b: 	xorl	%eax, %eax
    0000034d: 	popq	%rbx
    0000034e: 	movl	$0x1, %edi
    00000353: 	popq	%rbp
    00000354: 	popq	%r12
    00000356: 	popq	%r13
    00000358: 	popq	%r14
    0000035a: 	popq	%r15
    0000035c: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 860
    00000361: 	nopl	(%rax) # Size: 7
.Ltmp151:
    00000368: 	movq	%rbp, %rdi
    0000036b: 	movq	%rsp, %rsi
    0000036e: 	xorl	%edx, %edx
    00000370: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 880
    00000375: 	movq	%rax, (%rbp)
    00000379: 	movq	%rax, %rdi
    0000037c: 	movq	(%rsp), %rax
    00000380: 	movq	%rax, 0x10(%rbp)
.Ltmp162:
    00000384: 	movq	%r12, %rdx
    00000387: 	movq	%r15, %rsi
    0000038a: 	callq	memcpy@PLT # Offset: 906
    0000038f: 	movq	(%rsp), %r12
    00000393: 	movq	(%rbp), %rdi
    00000397: 	jmp	.Ltmp160 # Offset: 919
    0000039c: 	nopl	(%rax) # Size: 4
.Ltmp158:
    000003a0: 	movq	0x8(%rsp), %rax
    000003a5: 	subq	%fs:0x28, %rax
    000003ae: 	jne	.Ltmp159 # Offset: 942
    000003b0: 	addq	$0x18, %rsp
    000003b4: 	popq	%rbx
    000003b5: 	popq	%rbp
    000003b6: 	popq	%r12
    000003b8: 	popq	%r13
    000003ba: 	popq	%r14
    000003bc: 	popq	%r15
    000003be: 	retq # Offset: 958
    000003bf: 	nop # Size: 1
.Ltmp148:
    000003c0: 	movq	%r13, %rsi
    000003c3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000003ca: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 970
    000003cf: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000003d6: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000003dd: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000003e4: 	jne	.Ltmp161 # Offset: 996
.Ltmp153:
    000003ea: 	movq	-0x8(%rdx), %rax
    000003ee: 	addq	$0x200, %rax
    000003f4: 	jmp	.Ltmp161 # Offset: 1012
    000003f9: 	nopl	(%rax) # Size: 7
.Ltmp152:
    00000400: 	testq	%r12, %r12
    00000403: 	je	.Ltmp160 # Offset: 1027
    00000409: 	jmp	.Ltmp162 # Offset: 1033
    0000040e: 	nop # Size: 2
.Ltmp154:
    00000410: 	xorl	%eax, %eax
    00000412: 	jmp	.Ltmp157 # Offset: 1042
.Ltmp155:
    00000417: 	xorl	%eax, %eax
    00000419: 	jmp	.Ltmp163 # Offset: 1049
.Ltmp159:
    0000041e: 	callq	__stack_chk_fail@PLT # Offset: 1054
.Ltmp150:
    00000423: 	leaq	DATAat0x12008(%rip), %rdi
    0000042a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1066
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_library_memsetIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_library_memsetItEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x3ad0
  Size        : 0x42f
  MaxSize     : 0x430
  Offset      : 0x3ad0
  Section     : .text
  Orc Section : .local.text._Z19test_library_memsetItEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	leal	(%rsi,%rsi), %r14d
    0000000c: 	pushq	%r13
    0000000e: 	movq	%rcx, %r13
    00000011: 	movslq	%r14d, %r15
    00000014: 	pushq	%r12
    00000016: 	movl	%edx, %r12d
    00000019: 	pushq	%rbp
    0000001a: 	movzbl	%r12b, %r12d
    0000001e: 	xorl	%ebp, %ebp
    00000020: 	pushq	%rbx
    00000021: 	movq	%rdi, %rbx
    00000024: 	subq	$0x18, %rsp
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x8(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	callq	clock@PLT # Offset: 56
    0000003d: 	movq	%rax, start_time(%rip)
    00000044: 	movl	iterations(%rip), %eax
    0000004a: 	testl	%eax, %eax
    0000004c: 	jle	.Ltmp164 # Offset: 76
    0000004e: 	nop # Size: 2
.Ltmp165:
    00000050: 	movq	%r15, %rdx
    00000053: 	movl	%r12d, %esi
    00000056: 	movq	%rbx, %rdi
    00000059: 	addl	$0x1, %ebp
    0000005c: 	callq	memset@PLT # Offset: 92
    00000061: 	cmpl	%ebp, iterations(%rip)
    00000067: 	jg	.Ltmp165 # Offset: 103
.Ltmp164:
    00000069: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000070: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    00000077: 	subq	$0x20, %rax
    0000007b: 	cmpq	%rax, %rbp
    0000007e: 	je	.Ltmp166 # Offset: 126
    00000084: 	leaq	0x10(%rbp), %rdi
    00000088: 	movq	0x8(%r13), %r12
    0000008c: 	movq	%rdi, (%rbp)
    00000090: 	movq	(%r13), %r15
    00000094: 	movq	%r15, %rax
    00000097: 	addq	%r12, %rax
    0000009a: 	je	.Ltmp167 # Offset: 154
    0000009c: 	testq	%r15, %r15
    0000009f: 	je	.Ltmp168 # Offset: 159
.Ltmp167:
    000000a5: 	movq	%r12, (%rsp)
    000000a9: 	cmpq	$0xf, %r12
    000000ad: 	ja	.Ltmp169 # Offset: 173
    000000b3: 	cmpq	$0x1, %r12
    000000b7: 	jne	.Ltmp170 # Offset: 183
    000000bd: 	movzbl	(%r15), %eax
    000000c1: 	movb	%al, 0x10(%rbp)
.Ltmp178:
    000000c4: 	movq	%r12, 0x8(%rbp)
    000000c8: 	movb	$0x0, (%rdi,%r12)
    000000cd: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000d4: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000db: 	addq	$0x20, %rax
    000000df: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000e6: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000ed: 	je	.Ltmp171 # Offset: 237
.Ltmp179:
    000000f3: 	movq	-0x20(%rax), %rbp
    000000f7: 	movslq	%r14d, %r14
    000000fa: 	callq	clock@PLT # Offset: 250
    000000ff: 	pxor	%xmm0, %xmm0
    00000103: 	movq	%rax, end_time(%rip)
    0000010a: 	movq	%rbp, %rdi
    0000010d: 	subq	start_time(%rip), %rax
    00000114: 	cvtsi2sd	%rax, %xmm0
    00000119: 	divsd	DATAat0x12360(%rip), %xmm0
    00000121: 	callq	_Z13record_resultdPKc # Offset: 289
    00000126: 	leaq	(%rbx,%r14), %rdx
    0000012a: 	cmpq	%rdx, %rbx
    0000012d: 	je	.Ltmp172 # Offset: 301
    00000133: 	leaq	-0x1(%r14), %rcx
    00000137: 	movq	%rbx, %rax
    0000013a: 	cmpq	$0xe, %rcx
    0000013e: 	jbe	.Ltmp173 # Offset: 318
    00000144: 	pxor	%xmm6, %xmm6
    00000148: 	pxor	%xmm5, %xmm5
    0000014c: 	pxor	%xmm4, %xmm4
    00000150: 	movq	%r14, %rcx
    00000153: 	andq	$-0x10, %rcx
    00000157: 	pxor	%xmm3, %xmm3
    0000015b: 	addq	%rbx, %rcx
    0000015e: 	nop # Size: 2
.Ltmp174:
    00000160: 	movdqu	(%rax), %xmm1
    00000164: 	addq	$0x10, %rax
    00000168: 	movdqa	%xmm1, %xmm0
    0000016c: 	punpckhbw	%xmm5, %xmm1
    00000170: 	punpcklbw	%xmm5, %xmm0
    00000174: 	movdqa	%xmm1, %xmm2
    00000178: 	punpckhwd	%xmm4, %xmm1
    0000017c: 	movdqa	%xmm0, %xmm7
    00000180: 	punpckhwd	%xmm4, %xmm0
    00000184: 	punpcklwd	%xmm4, %xmm2
    00000188: 	movdqa	%xmm0, %xmm8
    0000018d: 	punpcklwd	%xmm4, %xmm7
    00000191: 	punpckhdq	%xmm3, %xmm0
    00000195: 	punpckldq	%xmm3, %xmm8
    0000019a: 	paddq	%xmm8, %xmm0
    0000019f: 	movdqa	%xmm7, %xmm8
    000001a4: 	punpckhdq	%xmm3, %xmm7
    000001a8: 	punpckldq	%xmm3, %xmm8
    000001ad: 	paddq	%xmm8, %xmm7
    000001b2: 	paddq	%xmm7, %xmm0
    000001b6: 	movdqa	%xmm2, %xmm7
    000001ba: 	punpckhdq	%xmm3, %xmm2
    000001be: 	punpckldq	%xmm3, %xmm7
    000001c2: 	paddq	%xmm7, %xmm2
    000001c6: 	movdqa	%xmm1, %xmm7
    000001ca: 	punpckhdq	%xmm3, %xmm1
    000001ce: 	punpckldq	%xmm3, %xmm7
    000001d2: 	paddq	%xmm6, %xmm1
    000001d6: 	paddq	%xmm7, %xmm2
    000001da: 	paddq	%xmm2, %xmm0
    000001de: 	movdqa	%xmm0, %xmm6
    000001e2: 	paddq	%xmm1, %xmm6
    000001e6: 	cmpq	%rcx, %rax
    000001e9: 	jne	.Ltmp174 # Offset: 489
    000001ef: 	movdqa	%xmm6, %xmm0
    000001f3: 	movq	%r14, %rcx
    000001f6: 	psrldq	$0x8, %xmm0
    000001fb: 	andq	$-0x10, %rcx
    000001ff: 	paddq	%xmm0, %xmm6
    00000203: 	addq	%rcx, %rbx
    00000206: 	movq	%xmm6, %rax
    0000020b: 	cmpq	%rcx, %r14
    0000020e: 	je	.Ltmp175 # Offset: 526
.Ltmp181:
    00000214: 	movzbl	(%rbx), %ecx
    00000217: 	addq	%rcx, %rax
    0000021a: 	leaq	0x1(%rbx), %rcx
    0000021e: 	cmpq	%rcx, %rdx
    00000221: 	je	.Ltmp175 # Offset: 545
    00000227: 	movzbl	0x1(%rbx), %ecx
    0000022b: 	addq	%rcx, %rax
    0000022e: 	leaq	0x2(%rbx), %rcx
    00000232: 	cmpq	%rcx, %rdx
    00000235: 	je	.Ltmp175 # Offset: 565
    0000023b: 	movzbl	0x2(%rbx), %ecx
    0000023f: 	addq	%rcx, %rax
    00000242: 	leaq	0x3(%rbx), %rcx
    00000246: 	cmpq	%rcx, %rdx
    00000249: 	je	.Ltmp175 # Offset: 585
    0000024f: 	movzbl	0x3(%rbx), %ecx
    00000253: 	addq	%rcx, %rax
    00000256: 	leaq	0x4(%rbx), %rcx
    0000025a: 	cmpq	%rcx, %rdx
    0000025d: 	je	.Ltmp175 # Offset: 605
    00000263: 	movzbl	0x4(%rbx), %ecx
    00000267: 	addq	%rcx, %rax
    0000026a: 	leaq	0x5(%rbx), %rcx
    0000026e: 	cmpq	%rcx, %rdx
    00000271: 	je	.Ltmp175 # Offset: 625
    00000277: 	movzbl	0x5(%rbx), %ecx
    0000027b: 	addq	%rcx, %rax
    0000027e: 	leaq	0x6(%rbx), %rcx
    00000282: 	cmpq	%rcx, %rdx
    00000285: 	je	.Ltmp175 # Offset: 645
    0000028b: 	movzbl	0x6(%rbx), %ecx
    0000028f: 	addq	%rcx, %rax
    00000292: 	leaq	0x7(%rbx), %rcx
    00000296: 	cmpq	%rcx, %rdx
    00000299: 	je	.Ltmp175 # Offset: 665
    0000029b: 	movzbl	0x7(%rbx), %ecx
    0000029f: 	addq	%rcx, %rax
    000002a2: 	leaq	0x8(%rbx), %rcx
    000002a6: 	cmpq	%rcx, %rdx
    000002a9: 	je	.Ltmp175 # Offset: 681
    000002ab: 	movzbl	0x8(%rbx), %ecx
    000002af: 	addq	%rcx, %rax
    000002b2: 	leaq	0x9(%rbx), %rcx
    000002b6: 	cmpq	%rcx, %rdx
    000002b9: 	je	.Ltmp175 # Offset: 697
    000002bb: 	movzbl	0x9(%rbx), %ecx
    000002bf: 	addq	%rcx, %rax
    000002c2: 	leaq	0xa(%rbx), %rcx
    000002c6: 	cmpq	%rcx, %rdx
    000002c9: 	je	.Ltmp175 # Offset: 713
    000002cb: 	movzbl	0xa(%rbx), %ecx
    000002cf: 	addq	%rcx, %rax
    000002d2: 	leaq	0xb(%rbx), %rcx
    000002d6: 	cmpq	%rcx, %rdx
    000002d9: 	je	.Ltmp175 # Offset: 729
    000002db: 	movzbl	0xb(%rbx), %ecx
    000002df: 	addq	%rcx, %rax
    000002e2: 	leaq	0xc(%rbx), %rcx
    000002e6: 	cmpq	%rcx, %rdx
    000002e9: 	je	.Ltmp175 # Offset: 745
    000002eb: 	movzbl	0xc(%rbx), %ecx
    000002ef: 	addq	%rcx, %rax
    000002f2: 	leaq	0xd(%rbx), %rcx
    000002f6: 	cmpq	%rcx, %rdx
    000002f9: 	je	.Ltmp175 # Offset: 761
    000002fb: 	movzbl	0xd(%rbx), %ecx
    000002ff: 	addq	%rcx, %rax
    00000302: 	leaq	0xe(%rbx), %rcx
    00000306: 	cmpq	%rcx, %rdx
    00000309: 	je	.Ltmp175 # Offset: 777
    0000030b: 	movzbl	0xe(%rbx), %edx
    0000030f: 	addq	%rdx, %rax
    00000312: 	nopw	(%rax,%rax) # Size: 6
.Ltmp175:
    00000318: 	movzbl	init_value(%rip), %edx
    0000031f: 	imulq	%r14, %rdx
    00000323: 	cmpq	%rax, %rdx
    00000326: 	je	.Ltmp176 # Offset: 806
    00000328: 	movq	0x8(%rsp), %rax
    0000032d: 	subq	%fs:0x28, %rax
    00000336: 	jne	.Ltmp177 # Offset: 822
    0000033c: 	movq	(%r13), %rdx
    00000340: 	addq	$0x18, %rsp
    00000344: 	leaq	DATAat0x12278(%rip), %rsi
    0000034b: 	xorl	%eax, %eax
    0000034d: 	popq	%rbx
    0000034e: 	movl	$0x1, %edi
    00000353: 	popq	%rbp
    00000354: 	popq	%r12
    00000356: 	popq	%r13
    00000358: 	popq	%r14
    0000035a: 	popq	%r15
    0000035c: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 860
    00000361: 	nopl	(%rax) # Size: 7
.Ltmp169:
    00000368: 	movq	%rbp, %rdi
    0000036b: 	movq	%rsp, %rsi
    0000036e: 	xorl	%edx, %edx
    00000370: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 880
    00000375: 	movq	%rax, (%rbp)
    00000379: 	movq	%rax, %rdi
    0000037c: 	movq	(%rsp), %rax
    00000380: 	movq	%rax, 0x10(%rbp)
.Ltmp180:
    00000384: 	movq	%r12, %rdx
    00000387: 	movq	%r15, %rsi
    0000038a: 	callq	memcpy@PLT # Offset: 906
    0000038f: 	movq	(%rsp), %r12
    00000393: 	movq	(%rbp), %rdi
    00000397: 	jmp	.Ltmp178 # Offset: 919
    0000039c: 	nopl	(%rax) # Size: 4
.Ltmp176:
    000003a0: 	movq	0x8(%rsp), %rax
    000003a5: 	subq	%fs:0x28, %rax
    000003ae: 	jne	.Ltmp177 # Offset: 942
    000003b0: 	addq	$0x18, %rsp
    000003b4: 	popq	%rbx
    000003b5: 	popq	%rbp
    000003b6: 	popq	%r12
    000003b8: 	popq	%r13
    000003ba: 	popq	%r14
    000003bc: 	popq	%r15
    000003be: 	retq # Offset: 958
    000003bf: 	nop # Size: 1
.Ltmp166:
    000003c0: 	movq	%r13, %rsi
    000003c3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000003ca: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 970
    000003cf: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000003d6: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000003dd: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000003e4: 	jne	.Ltmp179 # Offset: 996
.Ltmp171:
    000003ea: 	movq	-0x8(%rdx), %rax
    000003ee: 	addq	$0x200, %rax
    000003f4: 	jmp	.Ltmp179 # Offset: 1012
    000003f9: 	nopl	(%rax) # Size: 7
.Ltmp170:
    00000400: 	testq	%r12, %r12
    00000403: 	je	.Ltmp178 # Offset: 1027
    00000409: 	jmp	.Ltmp180 # Offset: 1033
    0000040e: 	nop # Size: 2
.Ltmp172:
    00000410: 	xorl	%eax, %eax
    00000412: 	jmp	.Ltmp175 # Offset: 1042
.Ltmp173:
    00000417: 	xorl	%eax, %eax
    00000419: 	jmp	.Ltmp181 # Offset: 1049
.Ltmp177:
    0000041e: 	callq	__stack_chk_fail@PLT # Offset: 1054
.Ltmp168:
    00000423: 	leaq	DATAat0x12008(%rip), %rdi
    0000042a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1066
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_library_memsetItEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_library_memsetIjEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x3f00
  Size        : 0x43f
  MaxSize     : 0x440
  Offset      : 0x3f00
  Section     : .text
  Orc Section : .local.text._Z19test_library_memsetIjEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	leal	(,%rsi,4), %r14d
    00000010: 	pushq	%r13
    00000012: 	movq	%rcx, %r13
    00000015: 	movslq	%r14d, %r15
    00000018: 	pushq	%r12
    0000001a: 	movl	%edx, %r12d
    0000001d: 	pushq	%rbp
    0000001e: 	movzbl	%r12b, %r12d
    00000022: 	xorl	%ebp, %ebp
    00000024: 	pushq	%rbx
    00000025: 	movq	%rdi, %rbx
    00000028: 	subq	$0x18, %rsp
    0000002c: 	movq	%fs:0x28, %rax
    00000035: 	movq	%rax, 0x8(%rsp)
    0000003a: 	xorl	%eax, %eax
    0000003c: 	callq	clock@PLT # Offset: 60
    00000041: 	movq	%rax, start_time(%rip)
    00000048: 	movl	iterations(%rip), %eax
    0000004e: 	testl	%eax, %eax
    00000050: 	jle	.Ltmp182 # Offset: 80
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp183:
    00000058: 	movq	%r15, %rdx
    0000005b: 	movl	%r12d, %esi
    0000005e: 	movq	%rbx, %rdi
    00000061: 	addl	$0x1, %ebp
    00000064: 	callq	memset@PLT # Offset: 100
    00000069: 	cmpl	%ebp, iterations(%rip)
    0000006f: 	jg	.Ltmp183 # Offset: 111
.Ltmp182:
    00000071: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000078: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    0000007f: 	subq	$0x20, %rax
    00000083: 	cmpq	%rax, %rbp
    00000086: 	je	.Ltmp184 # Offset: 134
    0000008c: 	leaq	0x10(%rbp), %rdi
    00000090: 	movq	0x8(%r13), %r12
    00000094: 	movq	%rdi, (%rbp)
    00000098: 	movq	(%r13), %r15
    0000009c: 	movq	%r15, %rax
    0000009f: 	addq	%r12, %rax
    000000a2: 	je	.Ltmp185 # Offset: 162
    000000a4: 	testq	%r15, %r15
    000000a7: 	je	.Ltmp186 # Offset: 167
.Ltmp185:
    000000ad: 	movq	%r12, (%rsp)
    000000b1: 	cmpq	$0xf, %r12
    000000b5: 	ja	.Ltmp187 # Offset: 181
    000000bb: 	cmpq	$0x1, %r12
    000000bf: 	jne	.Ltmp188 # Offset: 191
    000000c5: 	movzbl	(%r15), %eax
    000000c9: 	movb	%al, 0x10(%rbp)
.Ltmp196:
    000000cc: 	movq	%r12, 0x8(%rbp)
    000000d0: 	movb	$0x0, (%rdi,%r12)
    000000d5: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000dc: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000e3: 	addq	$0x20, %rax
    000000e7: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000ee: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000f5: 	je	.Ltmp189 # Offset: 245
.Ltmp197:
    000000fb: 	movq	-0x20(%rax), %rbp
    000000ff: 	movslq	%r14d, %r14
    00000102: 	callq	clock@PLT # Offset: 258
    00000107: 	pxor	%xmm0, %xmm0
    0000010b: 	movq	%rax, end_time(%rip)
    00000112: 	movq	%rbp, %rdi
    00000115: 	subq	start_time(%rip), %rax
    0000011c: 	cvtsi2sd	%rax, %xmm0
    00000121: 	divsd	DATAat0x12360(%rip), %xmm0
    00000129: 	callq	_Z13record_resultdPKc # Offset: 297
    0000012e: 	leaq	(%rbx,%r14), %rdx
    00000132: 	cmpq	%rdx, %rbx
    00000135: 	je	.Ltmp190 # Offset: 309
    0000013b: 	leaq	-0x1(%r14), %rcx
    0000013f: 	movq	%rbx, %rax
    00000142: 	cmpq	$0xe, %rcx
    00000146: 	jbe	.Ltmp191 # Offset: 326
    0000014c: 	pxor	%xmm6, %xmm6
    00000150: 	pxor	%xmm5, %xmm5
    00000154: 	pxor	%xmm4, %xmm4
    00000158: 	movq	%r14, %rcx
    0000015b: 	andq	$-0x10, %rcx
    0000015f: 	pxor	%xmm3, %xmm3
    00000163: 	addq	%rbx, %rcx
    00000166: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp192:
    00000170: 	movdqu	(%rax), %xmm1
    00000174: 	addq	$0x10, %rax
    00000178: 	movdqa	%xmm1, %xmm0
    0000017c: 	punpckhbw	%xmm5, %xmm1
    00000180: 	punpcklbw	%xmm5, %xmm0
    00000184: 	movdqa	%xmm1, %xmm2
    00000188: 	punpckhwd	%xmm4, %xmm1
    0000018c: 	movdqa	%xmm0, %xmm7
    00000190: 	punpckhwd	%xmm4, %xmm0
    00000194: 	punpcklwd	%xmm4, %xmm2
    00000198: 	movdqa	%xmm0, %xmm8
    0000019d: 	punpcklwd	%xmm4, %xmm7
    000001a1: 	punpckhdq	%xmm3, %xmm0
    000001a5: 	punpckldq	%xmm3, %xmm8
    000001aa: 	paddq	%xmm8, %xmm0
    000001af: 	movdqa	%xmm7, %xmm8
    000001b4: 	punpckhdq	%xmm3, %xmm7
    000001b8: 	punpckldq	%xmm3, %xmm8
    000001bd: 	paddq	%xmm8, %xmm7
    000001c2: 	paddq	%xmm7, %xmm0
    000001c6: 	movdqa	%xmm2, %xmm7
    000001ca: 	punpckhdq	%xmm3, %xmm2
    000001ce: 	punpckldq	%xmm3, %xmm7
    000001d2: 	paddq	%xmm7, %xmm2
    000001d6: 	movdqa	%xmm1, %xmm7
    000001da: 	punpckhdq	%xmm3, %xmm1
    000001de: 	punpckldq	%xmm3, %xmm7
    000001e2: 	paddq	%xmm6, %xmm1
    000001e6: 	paddq	%xmm7, %xmm2
    000001ea: 	paddq	%xmm2, %xmm0
    000001ee: 	movdqa	%xmm0, %xmm6
    000001f2: 	paddq	%xmm1, %xmm6
    000001f6: 	cmpq	%rcx, %rax
    000001f9: 	jne	.Ltmp192 # Offset: 505
    000001ff: 	movdqa	%xmm6, %xmm0
    00000203: 	movq	%r14, %rcx
    00000206: 	psrldq	$0x8, %xmm0
    0000020b: 	andq	$-0x10, %rcx
    0000020f: 	paddq	%xmm0, %xmm6
    00000213: 	addq	%rcx, %rbx
    00000216: 	movq	%xmm6, %rax
    0000021b: 	cmpq	%rcx, %r14
    0000021e: 	je	.Ltmp193 # Offset: 542
.Ltmp199:
    00000224: 	movzbl	(%rbx), %ecx
    00000227: 	addq	%rcx, %rax
    0000022a: 	leaq	0x1(%rbx), %rcx
    0000022e: 	cmpq	%rcx, %rdx
    00000231: 	je	.Ltmp193 # Offset: 561
    00000237: 	movzbl	0x1(%rbx), %ecx
    0000023b: 	addq	%rcx, %rax
    0000023e: 	leaq	0x2(%rbx), %rcx
    00000242: 	cmpq	%rcx, %rdx
    00000245: 	je	.Ltmp193 # Offset: 581
    0000024b: 	movzbl	0x2(%rbx), %ecx
    0000024f: 	addq	%rcx, %rax
    00000252: 	leaq	0x3(%rbx), %rcx
    00000256: 	cmpq	%rcx, %rdx
    00000259: 	je	.Ltmp193 # Offset: 601
    0000025f: 	movzbl	0x3(%rbx), %ecx
    00000263: 	addq	%rcx, %rax
    00000266: 	leaq	0x4(%rbx), %rcx
    0000026a: 	cmpq	%rcx, %rdx
    0000026d: 	je	.Ltmp193 # Offset: 621
    00000273: 	movzbl	0x4(%rbx), %ecx
    00000277: 	addq	%rcx, %rax
    0000027a: 	leaq	0x5(%rbx), %rcx
    0000027e: 	cmpq	%rcx, %rdx
    00000281: 	je	.Ltmp193 # Offset: 641
    00000287: 	movzbl	0x5(%rbx), %ecx
    0000028b: 	addq	%rcx, %rax
    0000028e: 	leaq	0x6(%rbx), %rcx
    00000292: 	cmpq	%rcx, %rdx
    00000295: 	je	.Ltmp193 # Offset: 661
    0000029b: 	movzbl	0x6(%rbx), %ecx
    0000029f: 	addq	%rcx, %rax
    000002a2: 	leaq	0x7(%rbx), %rcx
    000002a6: 	cmpq	%rcx, %rdx
    000002a9: 	je	.Ltmp193 # Offset: 681
    000002ab: 	movzbl	0x7(%rbx), %ecx
    000002af: 	addq	%rcx, %rax
    000002b2: 	leaq	0x8(%rbx), %rcx
    000002b6: 	cmpq	%rcx, %rdx
    000002b9: 	je	.Ltmp193 # Offset: 697
    000002bb: 	movzbl	0x8(%rbx), %ecx
    000002bf: 	addq	%rcx, %rax
    000002c2: 	leaq	0x9(%rbx), %rcx
    000002c6: 	cmpq	%rcx, %rdx
    000002c9: 	je	.Ltmp193 # Offset: 713
    000002cb: 	movzbl	0x9(%rbx), %ecx
    000002cf: 	addq	%rcx, %rax
    000002d2: 	leaq	0xa(%rbx), %rcx
    000002d6: 	cmpq	%rcx, %rdx
    000002d9: 	je	.Ltmp193 # Offset: 729
    000002db: 	movzbl	0xa(%rbx), %ecx
    000002df: 	addq	%rcx, %rax
    000002e2: 	leaq	0xb(%rbx), %rcx
    000002e6: 	cmpq	%rcx, %rdx
    000002e9: 	je	.Ltmp193 # Offset: 745
    000002eb: 	movzbl	0xb(%rbx), %ecx
    000002ef: 	addq	%rcx, %rax
    000002f2: 	leaq	0xc(%rbx), %rcx
    000002f6: 	cmpq	%rcx, %rdx
    000002f9: 	je	.Ltmp193 # Offset: 761
    000002fb: 	movzbl	0xc(%rbx), %ecx
    000002ff: 	addq	%rcx, %rax
    00000302: 	leaq	0xd(%rbx), %rcx
    00000306: 	cmpq	%rcx, %rdx
    00000309: 	je	.Ltmp193 # Offset: 777
    0000030b: 	movzbl	0xd(%rbx), %ecx
    0000030f: 	addq	%rcx, %rax
    00000312: 	leaq	0xe(%rbx), %rcx
    00000316: 	cmpq	%rcx, %rdx
    00000319: 	je	.Ltmp193 # Offset: 793
    0000031b: 	movzbl	0xe(%rbx), %edx
    0000031f: 	addq	%rdx, %rax
    00000322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp193:
    00000328: 	movzbl	init_value(%rip), %edx
    0000032f: 	imulq	%r14, %rdx
    00000333: 	cmpq	%rax, %rdx
    00000336: 	je	.Ltmp194 # Offset: 822
    00000338: 	movq	0x8(%rsp), %rax
    0000033d: 	subq	%fs:0x28, %rax
    00000346: 	jne	.Ltmp195 # Offset: 838
    0000034c: 	movq	(%r13), %rdx
    00000350: 	addq	$0x18, %rsp
    00000354: 	leaq	DATAat0x12278(%rip), %rsi
    0000035b: 	xorl	%eax, %eax
    0000035d: 	popq	%rbx
    0000035e: 	movl	$0x1, %edi
    00000363: 	popq	%rbp
    00000364: 	popq	%r12
    00000366: 	popq	%r13
    00000368: 	popq	%r14
    0000036a: 	popq	%r15
    0000036c: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 876
    00000371: 	nopl	(%rax) # Size: 7
.Ltmp187:
    00000378: 	movq	%rbp, %rdi
    0000037b: 	movq	%rsp, %rsi
    0000037e: 	xorl	%edx, %edx
    00000380: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 896
    00000385: 	movq	%rax, (%rbp)
    00000389: 	movq	%rax, %rdi
    0000038c: 	movq	(%rsp), %rax
    00000390: 	movq	%rax, 0x10(%rbp)
.Ltmp198:
    00000394: 	movq	%r12, %rdx
    00000397: 	movq	%r15, %rsi
    0000039a: 	callq	memcpy@PLT # Offset: 922
    0000039f: 	movq	(%rsp), %r12
    000003a3: 	movq	(%rbp), %rdi
    000003a7: 	jmp	.Ltmp196 # Offset: 935
    000003ac: 	nopl	(%rax) # Size: 4
.Ltmp194:
    000003b0: 	movq	0x8(%rsp), %rax
    000003b5: 	subq	%fs:0x28, %rax
    000003be: 	jne	.Ltmp195 # Offset: 958
    000003c0: 	addq	$0x18, %rsp
    000003c4: 	popq	%rbx
    000003c5: 	popq	%rbp
    000003c6: 	popq	%r12
    000003c8: 	popq	%r13
    000003ca: 	popq	%r14
    000003cc: 	popq	%r15
    000003ce: 	retq # Offset: 974
    000003cf: 	nop # Size: 1
.Ltmp184:
    000003d0: 	movq	%r13, %rsi
    000003d3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000003da: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 986
    000003df: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000003e6: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000003ed: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000003f4: 	jne	.Ltmp197 # Offset: 1012
.Ltmp189:
    000003fa: 	movq	-0x8(%rdx), %rax
    000003fe: 	addq	$0x200, %rax
    00000404: 	jmp	.Ltmp197 # Offset: 1028
    00000409: 	nopl	(%rax) # Size: 7
.Ltmp188:
    00000410: 	testq	%r12, %r12
    00000413: 	je	.Ltmp196 # Offset: 1043
    00000419: 	jmp	.Ltmp198 # Offset: 1049
    0000041e: 	nop # Size: 2
.Ltmp190:
    00000420: 	xorl	%eax, %eax
    00000422: 	jmp	.Ltmp193 # Offset: 1058
.Ltmp191:
    00000427: 	xorl	%eax, %eax
    00000429: 	jmp	.Ltmp199 # Offset: 1065
.Ltmp195:
    0000042e: 	callq	__stack_chk_fail@PLT # Offset: 1070
.Ltmp186:
    00000433: 	leaq	DATAat0x12008(%rip), %rdi
    0000043a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1082
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_library_memsetIjEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_library_memsetImEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x4340
  Size        : 0x43f
  MaxSize     : 0x440
  Offset      : 0x4340
  Section     : .text
  Orc Section : .local.text._Z19test_library_memsetImEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	leal	(,%rsi,8), %r14d
    00000010: 	pushq	%r13
    00000012: 	movq	%rcx, %r13
    00000015: 	movslq	%r14d, %r15
    00000018: 	pushq	%r12
    0000001a: 	movl	%edx, %r12d
    0000001d: 	pushq	%rbp
    0000001e: 	movzbl	%r12b, %r12d
    00000022: 	xorl	%ebp, %ebp
    00000024: 	pushq	%rbx
    00000025: 	movq	%rdi, %rbx
    00000028: 	subq	$0x18, %rsp
    0000002c: 	movq	%fs:0x28, %rax
    00000035: 	movq	%rax, 0x8(%rsp)
    0000003a: 	xorl	%eax, %eax
    0000003c: 	callq	clock@PLT # Offset: 60
    00000041: 	movq	%rax, start_time(%rip)
    00000048: 	movl	iterations(%rip), %eax
    0000004e: 	testl	%eax, %eax
    00000050: 	jle	.Ltmp200 # Offset: 80
    00000052: 	nopw	(%rax,%rax) # Size: 6
.Ltmp201:
    00000058: 	movq	%r15, %rdx
    0000005b: 	movl	%r12d, %esi
    0000005e: 	movq	%rbx, %rdi
    00000061: 	addl	$0x1, %ebp
    00000064: 	callq	memset@PLT # Offset: 100
    00000069: 	cmpl	%ebp, iterations(%rip)
    0000006f: 	jg	.Ltmp201 # Offset: 111
.Ltmp200:
    00000071: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000078: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    0000007f: 	subq	$0x20, %rax
    00000083: 	cmpq	%rax, %rbp
    00000086: 	je	.Ltmp202 # Offset: 134
    0000008c: 	leaq	0x10(%rbp), %rdi
    00000090: 	movq	0x8(%r13), %r12
    00000094: 	movq	%rdi, (%rbp)
    00000098: 	movq	(%r13), %r15
    0000009c: 	movq	%r15, %rax
    0000009f: 	addq	%r12, %rax
    000000a2: 	je	.Ltmp203 # Offset: 162
    000000a4: 	testq	%r15, %r15
    000000a7: 	je	.Ltmp204 # Offset: 167
.Ltmp203:
    000000ad: 	movq	%r12, (%rsp)
    000000b1: 	cmpq	$0xf, %r12
    000000b5: 	ja	.Ltmp205 # Offset: 181
    000000bb: 	cmpq	$0x1, %r12
    000000bf: 	jne	.Ltmp206 # Offset: 191
    000000c5: 	movzbl	(%r15), %eax
    000000c9: 	movb	%al, 0x10(%rbp)
.Ltmp214:
    000000cc: 	movq	%r12, 0x8(%rbp)
    000000d0: 	movb	$0x0, (%rdi,%r12)
    000000d5: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000dc: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000e3: 	addq	$0x20, %rax
    000000e7: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000ee: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000000f5: 	je	.Ltmp207 # Offset: 245
.Ltmp215:
    000000fb: 	movq	-0x20(%rax), %rbp
    000000ff: 	movslq	%r14d, %r14
    00000102: 	callq	clock@PLT # Offset: 258
    00000107: 	pxor	%xmm0, %xmm0
    0000010b: 	movq	%rax, end_time(%rip)
    00000112: 	movq	%rbp, %rdi
    00000115: 	subq	start_time(%rip), %rax
    0000011c: 	cvtsi2sd	%rax, %xmm0
    00000121: 	divsd	DATAat0x12360(%rip), %xmm0
    00000129: 	callq	_Z13record_resultdPKc # Offset: 297
    0000012e: 	leaq	(%rbx,%r14), %rdx
    00000132: 	cmpq	%rdx, %rbx
    00000135: 	je	.Ltmp208 # Offset: 309
    0000013b: 	leaq	-0x1(%r14), %rcx
    0000013f: 	movq	%rbx, %rax
    00000142: 	cmpq	$0xe, %rcx
    00000146: 	jbe	.Ltmp209 # Offset: 326
    0000014c: 	pxor	%xmm6, %xmm6
    00000150: 	pxor	%xmm5, %xmm5
    00000154: 	pxor	%xmm4, %xmm4
    00000158: 	movq	%r14, %rcx
    0000015b: 	andq	$-0x10, %rcx
    0000015f: 	pxor	%xmm3, %xmm3
    00000163: 	addq	%rbx, %rcx
    00000166: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp210:
    00000170: 	movdqu	(%rax), %xmm1
    00000174: 	addq	$0x10, %rax
    00000178: 	movdqa	%xmm1, %xmm0
    0000017c: 	punpckhbw	%xmm5, %xmm1
    00000180: 	punpcklbw	%xmm5, %xmm0
    00000184: 	movdqa	%xmm1, %xmm2
    00000188: 	punpckhwd	%xmm4, %xmm1
    0000018c: 	movdqa	%xmm0, %xmm7
    00000190: 	punpckhwd	%xmm4, %xmm0
    00000194: 	punpcklwd	%xmm4, %xmm2
    00000198: 	movdqa	%xmm0, %xmm8
    0000019d: 	punpcklwd	%xmm4, %xmm7
    000001a1: 	punpckhdq	%xmm3, %xmm0
    000001a5: 	punpckldq	%xmm3, %xmm8
    000001aa: 	paddq	%xmm8, %xmm0
    000001af: 	movdqa	%xmm7, %xmm8
    000001b4: 	punpckhdq	%xmm3, %xmm7
    000001b8: 	punpckldq	%xmm3, %xmm8
    000001bd: 	paddq	%xmm8, %xmm7
    000001c2: 	paddq	%xmm7, %xmm0
    000001c6: 	movdqa	%xmm2, %xmm7
    000001ca: 	punpckhdq	%xmm3, %xmm2
    000001ce: 	punpckldq	%xmm3, %xmm7
    000001d2: 	paddq	%xmm7, %xmm2
    000001d6: 	movdqa	%xmm1, %xmm7
    000001da: 	punpckhdq	%xmm3, %xmm1
    000001de: 	punpckldq	%xmm3, %xmm7
    000001e2: 	paddq	%xmm6, %xmm1
    000001e6: 	paddq	%xmm7, %xmm2
    000001ea: 	paddq	%xmm2, %xmm0
    000001ee: 	movdqa	%xmm0, %xmm6
    000001f2: 	paddq	%xmm1, %xmm6
    000001f6: 	cmpq	%rcx, %rax
    000001f9: 	jne	.Ltmp210 # Offset: 505
    000001ff: 	movdqa	%xmm6, %xmm0
    00000203: 	movq	%r14, %rcx
    00000206: 	psrldq	$0x8, %xmm0
    0000020b: 	andq	$-0x10, %rcx
    0000020f: 	paddq	%xmm0, %xmm6
    00000213: 	addq	%rcx, %rbx
    00000216: 	movq	%xmm6, %rax
    0000021b: 	cmpq	%rcx, %r14
    0000021e: 	je	.Ltmp211 # Offset: 542
.Ltmp217:
    00000224: 	movzbl	(%rbx), %ecx
    00000227: 	addq	%rcx, %rax
    0000022a: 	leaq	0x1(%rbx), %rcx
    0000022e: 	cmpq	%rcx, %rdx
    00000231: 	je	.Ltmp211 # Offset: 561
    00000237: 	movzbl	0x1(%rbx), %ecx
    0000023b: 	addq	%rcx, %rax
    0000023e: 	leaq	0x2(%rbx), %rcx
    00000242: 	cmpq	%rcx, %rdx
    00000245: 	je	.Ltmp211 # Offset: 581
    0000024b: 	movzbl	0x2(%rbx), %ecx
    0000024f: 	addq	%rcx, %rax
    00000252: 	leaq	0x3(%rbx), %rcx
    00000256: 	cmpq	%rcx, %rdx
    00000259: 	je	.Ltmp211 # Offset: 601
    0000025f: 	movzbl	0x3(%rbx), %ecx
    00000263: 	addq	%rcx, %rax
    00000266: 	leaq	0x4(%rbx), %rcx
    0000026a: 	cmpq	%rcx, %rdx
    0000026d: 	je	.Ltmp211 # Offset: 621
    00000273: 	movzbl	0x4(%rbx), %ecx
    00000277: 	addq	%rcx, %rax
    0000027a: 	leaq	0x5(%rbx), %rcx
    0000027e: 	cmpq	%rcx, %rdx
    00000281: 	je	.Ltmp211 # Offset: 641
    00000287: 	movzbl	0x5(%rbx), %ecx
    0000028b: 	addq	%rcx, %rax
    0000028e: 	leaq	0x6(%rbx), %rcx
    00000292: 	cmpq	%rcx, %rdx
    00000295: 	je	.Ltmp211 # Offset: 661
    0000029b: 	movzbl	0x6(%rbx), %ecx
    0000029f: 	addq	%rcx, %rax
    000002a2: 	leaq	0x7(%rbx), %rcx
    000002a6: 	cmpq	%rcx, %rdx
    000002a9: 	je	.Ltmp211 # Offset: 681
    000002ab: 	movzbl	0x7(%rbx), %ecx
    000002af: 	addq	%rcx, %rax
    000002b2: 	leaq	0x8(%rbx), %rcx
    000002b6: 	cmpq	%rcx, %rdx
    000002b9: 	je	.Ltmp211 # Offset: 697
    000002bb: 	movzbl	0x8(%rbx), %ecx
    000002bf: 	addq	%rcx, %rax
    000002c2: 	leaq	0x9(%rbx), %rcx
    000002c6: 	cmpq	%rcx, %rdx
    000002c9: 	je	.Ltmp211 # Offset: 713
    000002cb: 	movzbl	0x9(%rbx), %ecx
    000002cf: 	addq	%rcx, %rax
    000002d2: 	leaq	0xa(%rbx), %rcx
    000002d6: 	cmpq	%rcx, %rdx
    000002d9: 	je	.Ltmp211 # Offset: 729
    000002db: 	movzbl	0xa(%rbx), %ecx
    000002df: 	addq	%rcx, %rax
    000002e2: 	leaq	0xb(%rbx), %rcx
    000002e6: 	cmpq	%rcx, %rdx
    000002e9: 	je	.Ltmp211 # Offset: 745
    000002eb: 	movzbl	0xb(%rbx), %ecx
    000002ef: 	addq	%rcx, %rax
    000002f2: 	leaq	0xc(%rbx), %rcx
    000002f6: 	cmpq	%rcx, %rdx
    000002f9: 	je	.Ltmp211 # Offset: 761
    000002fb: 	movzbl	0xc(%rbx), %ecx
    000002ff: 	addq	%rcx, %rax
    00000302: 	leaq	0xd(%rbx), %rcx
    00000306: 	cmpq	%rcx, %rdx
    00000309: 	je	.Ltmp211 # Offset: 777
    0000030b: 	movzbl	0xd(%rbx), %ecx
    0000030f: 	addq	%rcx, %rax
    00000312: 	leaq	0xe(%rbx), %rcx
    00000316: 	cmpq	%rcx, %rdx
    00000319: 	je	.Ltmp211 # Offset: 793
    0000031b: 	movzbl	0xe(%rbx), %edx
    0000031f: 	addq	%rdx, %rax
    00000322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp211:
    00000328: 	movzbl	init_value(%rip), %edx
    0000032f: 	imulq	%r14, %rdx
    00000333: 	cmpq	%rax, %rdx
    00000336: 	je	.Ltmp212 # Offset: 822
    00000338: 	movq	0x8(%rsp), %rax
    0000033d: 	subq	%fs:0x28, %rax
    00000346: 	jne	.Ltmp213 # Offset: 838
    0000034c: 	movq	(%r13), %rdx
    00000350: 	addq	$0x18, %rsp
    00000354: 	leaq	DATAat0x12278(%rip), %rsi
    0000035b: 	xorl	%eax, %eax
    0000035d: 	popq	%rbx
    0000035e: 	movl	$0x1, %edi
    00000363: 	popq	%rbp
    00000364: 	popq	%r12
    00000366: 	popq	%r13
    00000368: 	popq	%r14
    0000036a: 	popq	%r15
    0000036c: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 876
    00000371: 	nopl	(%rax) # Size: 7
.Ltmp205:
    00000378: 	movq	%rbp, %rdi
    0000037b: 	movq	%rsp, %rsi
    0000037e: 	xorl	%edx, %edx
    00000380: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 896
    00000385: 	movq	%rax, (%rbp)
    00000389: 	movq	%rax, %rdi
    0000038c: 	movq	(%rsp), %rax
    00000390: 	movq	%rax, 0x10(%rbp)
.Ltmp216:
    00000394: 	movq	%r12, %rdx
    00000397: 	movq	%r15, %rsi
    0000039a: 	callq	memcpy@PLT # Offset: 922
    0000039f: 	movq	(%rsp), %r12
    000003a3: 	movq	(%rbp), %rdi
    000003a7: 	jmp	.Ltmp214 # Offset: 935
    000003ac: 	nopl	(%rax) # Size: 4
.Ltmp212:
    000003b0: 	movq	0x8(%rsp), %rax
    000003b5: 	subq	%fs:0x28, %rax
    000003be: 	jne	.Ltmp213 # Offset: 958
    000003c0: 	addq	$0x18, %rsp
    000003c4: 	popq	%rbx
    000003c5: 	popq	%rbp
    000003c6: 	popq	%r12
    000003c8: 	popq	%r13
    000003ca: 	popq	%r14
    000003cc: 	popq	%r15
    000003ce: 	retq # Offset: 974
    000003cf: 	nop # Size: 1
.Ltmp202:
    000003d0: 	movq	%r13, %rsi
    000003d3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000003da: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 986
    000003df: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000003e6: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000003ed: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000003f4: 	jne	.Ltmp215 # Offset: 1012
.Ltmp207:
    000003fa: 	movq	-0x8(%rdx), %rax
    000003fe: 	addq	$0x200, %rax
    00000404: 	jmp	.Ltmp215 # Offset: 1028
    00000409: 	nopl	(%rax) # Size: 7
.Ltmp206:
    00000410: 	testq	%r12, %r12
    00000413: 	je	.Ltmp214 # Offset: 1043
    00000419: 	jmp	.Ltmp216 # Offset: 1049
    0000041e: 	nop # Size: 2
.Ltmp208:
    00000420: 	xorl	%eax, %eax
    00000422: 	jmp	.Ltmp211 # Offset: 1058
.Ltmp209:
    00000427: 	xorl	%eax, %eax
    00000429: 	jmp	.Ltmp217 # Offset: 1065
.Ltmp213:
    0000042e: 	callq	__stack_chk_fail@PLT # Offset: 1070
.Ltmp204:
    00000433: 	leaq	DATAat0x12008(%rip), %rdi
    0000043a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1082
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_library_memsetImEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_std_fillIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x4780
  Size        : 0x43f
  MaxSize     : 0x440
  Offset      : 0x4780
  Section     : .text
  Orc Section : .local.text._Z13test_std_fillIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movzbl	%dl, %r15d
    0000000a: 	pushq	%r14
    0000000c: 	pushq	%r13
    0000000e: 	movq	%rcx, %r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	movslq	%esi, %rbp
    00000017: 	pushq	%rbx
    00000018: 	movq	%rdi, %rbx
    0000001b: 	subq	$0x18, %rsp
    0000001f: 	movq	%fs:0x28, %rax
    00000028: 	movq	%rax, 0x8(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	callq	clock@PLT # Offset: 47
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	iterations(%rip), %eax
    00000041: 	testl	%eax, %eax
    00000043: 	jle	.Ltmp218 # Offset: 67
    00000045: 	movslq	%ebp, %r14
    00000048: 	testq	%r14, %r14
    0000004b: 	jne	.Ltmp219 # Offset: 75
.Ltmp218:
    00000051: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000058: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    0000005f: 	subq	$0x20, %rax
    00000063: 	cmpq	%rax, %r14
    00000066: 	je	.Ltmp220 # Offset: 102
    0000006c: 	leaq	0x10(%r14), %rdi
    00000070: 	movq	0x8(%r13), %r12
    00000074: 	movq	%rdi, (%r14)
    00000077: 	movq	(%r13), %r15
    0000007b: 	movq	%r15, %rax
    0000007e: 	addq	%r12, %rax
    00000081: 	je	.Ltmp221 # Offset: 129
    00000083: 	testq	%r15, %r15
    00000086: 	je	.Ltmp222 # Offset: 134
.Ltmp221:
    0000008c: 	movq	%r12, (%rsp)
    00000090: 	cmpq	$0xf, %r12
    00000094: 	ja	.Ltmp223 # Offset: 148
    0000009a: 	cmpq	$0x1, %r12
    0000009e: 	jne	.Ltmp224 # Offset: 158
    000000a4: 	movzbl	(%r15), %eax
    000000a8: 	movb	%al, 0x10(%r14)
.Ltmp232:
    000000ac: 	movq	%r12, 0x8(%r14)
    000000b0: 	movb	$0x0, (%rdi,%r12)
    000000b5: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000000bc: 	addq	$0x20, %rax
    000000c0: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp234:
    000000c7: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000000ce: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000000d5: 	je	.Ltmp225 # Offset: 213
.Ltmp233:
    000000db: 	movq	-0x20(%rax), %r12
    000000df: 	callq	clock@PLT # Offset: 223
    000000e4: 	pxor	%xmm0, %xmm0
    000000e8: 	movq	%rax, end_time(%rip)
    000000ef: 	movq	%r12, %rdi
    000000f2: 	subq	start_time(%rip), %rax
    000000f9: 	cvtsi2sd	%rax, %xmm0
    000000fe: 	divsd	DATAat0x12360(%rip), %xmm0
    00000106: 	callq	_Z13record_resultdPKc # Offset: 262
    0000010b: 	leaq	(%rbx,%rbp), %rdx
    0000010f: 	cmpq	%rdx, %rbx
    00000112: 	je	.Ltmp226 # Offset: 274
    00000118: 	leaq	-0x1(%rbp), %rcx
    0000011c: 	movq	%rbx, %rax
    0000011f: 	cmpq	$0xe, %rcx
    00000123: 	jbe	.Ltmp227 # Offset: 291
    00000129: 	pxor	%xmm6, %xmm6
    0000012d: 	pxor	%xmm5, %xmm5
    00000131: 	pxor	%xmm4, %xmm4
    00000135: 	movq	%rbp, %rcx
    00000138: 	andq	$-0x10, %rcx
    0000013c: 	pxor	%xmm3, %xmm3
    00000140: 	addq	%rbx, %rcx
    00000143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp228:
    00000148: 	movdqu	(%rax), %xmm1
    0000014c: 	addq	$0x10, %rax
    00000150: 	movdqa	%xmm1, %xmm0
    00000154: 	punpckhbw	%xmm5, %xmm1
    00000158: 	punpcklbw	%xmm5, %xmm0
    0000015c: 	movdqa	%xmm1, %xmm2
    00000160: 	punpckhwd	%xmm4, %xmm1
    00000164: 	movdqa	%xmm0, %xmm7
    00000168: 	punpckhwd	%xmm4, %xmm0
    0000016c: 	punpcklwd	%xmm4, %xmm2
    00000170: 	movdqa	%xmm0, %xmm8
    00000175: 	punpcklwd	%xmm4, %xmm7
    00000179: 	punpckhdq	%xmm3, %xmm0
    0000017d: 	punpckldq	%xmm3, %xmm8
    00000182: 	paddq	%xmm8, %xmm0
    00000187: 	movdqa	%xmm7, %xmm8
    0000018c: 	punpckhdq	%xmm3, %xmm7
    00000190: 	punpckldq	%xmm3, %xmm8
    00000195: 	paddq	%xmm8, %xmm7
    0000019a: 	paddq	%xmm7, %xmm0
    0000019e: 	movdqa	%xmm2, %xmm7
    000001a2: 	punpckhdq	%xmm3, %xmm2
    000001a6: 	punpckldq	%xmm3, %xmm7
    000001aa: 	paddq	%xmm7, %xmm2
    000001ae: 	movdqa	%xmm1, %xmm7
    000001b2: 	punpckhdq	%xmm3, %xmm1
    000001b6: 	punpckldq	%xmm3, %xmm7
    000001ba: 	paddq	%xmm6, %xmm1
    000001be: 	paddq	%xmm7, %xmm2
    000001c2: 	paddq	%xmm2, %xmm0
    000001c6: 	movdqa	%xmm0, %xmm6
    000001ca: 	paddq	%xmm1, %xmm6
    000001ce: 	cmpq	%rcx, %rax
    000001d1: 	jne	.Ltmp228 # Offset: 465
    000001d7: 	movdqa	%xmm6, %xmm0
    000001db: 	movq	%rbp, %rcx
    000001de: 	psrldq	$0x8, %xmm0
    000001e3: 	andq	$-0x10, %rcx
    000001e7: 	paddq	%xmm0, %xmm6
    000001eb: 	addq	%rcx, %rbx
    000001ee: 	movq	%xmm6, %rax
    000001f3: 	cmpq	%rbp, %rcx
    000001f6: 	je	.Ltmp229 # Offset: 502
.Ltmp237:
    000001fc: 	movzbl	(%rbx), %ecx
    000001ff: 	addq	%rcx, %rax
    00000202: 	leaq	0x1(%rbx), %rcx
    00000206: 	cmpq	%rcx, %rdx
    00000209: 	je	.Ltmp229 # Offset: 521
    0000020f: 	movzbl	0x1(%rbx), %ecx
    00000213: 	addq	%rcx, %rax
    00000216: 	leaq	0x2(%rbx), %rcx
    0000021a: 	cmpq	%rcx, %rdx
    0000021d: 	je	.Ltmp229 # Offset: 541
    00000223: 	movzbl	0x2(%rbx), %ecx
    00000227: 	addq	%rcx, %rax
    0000022a: 	leaq	0x3(%rbx), %rcx
    0000022e: 	cmpq	%rcx, %rdx
    00000231: 	je	.Ltmp229 # Offset: 561
    00000237: 	movzbl	0x3(%rbx), %ecx
    0000023b: 	addq	%rcx, %rax
    0000023e: 	leaq	0x4(%rbx), %rcx
    00000242: 	cmpq	%rcx, %rdx
    00000245: 	je	.Ltmp229 # Offset: 581
    0000024b: 	movzbl	0x4(%rbx), %ecx
    0000024f: 	addq	%rcx, %rax
    00000252: 	leaq	0x5(%rbx), %rcx
    00000256: 	cmpq	%rcx, %rdx
    00000259: 	je	.Ltmp229 # Offset: 601
    0000025f: 	movzbl	0x5(%rbx), %ecx
    00000263: 	addq	%rcx, %rax
    00000266: 	leaq	0x6(%rbx), %rcx
    0000026a: 	cmpq	%rcx, %rdx
    0000026d: 	je	.Ltmp229 # Offset: 621
    00000273: 	movzbl	0x6(%rbx), %ecx
    00000277: 	addq	%rcx, %rax
    0000027a: 	leaq	0x7(%rbx), %rcx
    0000027e: 	cmpq	%rcx, %rdx
    00000281: 	je	.Ltmp229 # Offset: 641
    00000283: 	movzbl	0x7(%rbx), %ecx
    00000287: 	addq	%rcx, %rax
    0000028a: 	leaq	0x8(%rbx), %rcx
    0000028e: 	cmpq	%rcx, %rdx
    00000291: 	je	.Ltmp229 # Offset: 657
    00000293: 	movzbl	0x8(%rbx), %ecx
    00000297: 	addq	%rcx, %rax
    0000029a: 	leaq	0x9(%rbx), %rcx
    0000029e: 	cmpq	%rcx, %rdx
    000002a1: 	je	.Ltmp229 # Offset: 673
    000002a3: 	movzbl	0x9(%rbx), %ecx
    000002a7: 	addq	%rcx, %rax
    000002aa: 	leaq	0xa(%rbx), %rcx
    000002ae: 	cmpq	%rcx, %rdx
    000002b1: 	je	.Ltmp229 # Offset: 689
    000002b3: 	movzbl	0xa(%rbx), %ecx
    000002b7: 	addq	%rcx, %rax
    000002ba: 	leaq	0xb(%rbx), %rcx
    000002be: 	cmpq	%rcx, %rdx
    000002c1: 	je	.Ltmp229 # Offset: 705
    000002c3: 	movzbl	0xb(%rbx), %ecx
    000002c7: 	addq	%rcx, %rax
    000002ca: 	leaq	0xc(%rbx), %rcx
    000002ce: 	cmpq	%rcx, %rdx
    000002d1: 	je	.Ltmp229 # Offset: 721
    000002d3: 	movzbl	0xc(%rbx), %ecx
    000002d7: 	addq	%rcx, %rax
    000002da: 	leaq	0xd(%rbx), %rcx
    000002de: 	cmpq	%rcx, %rdx
    000002e1: 	je	.Ltmp229 # Offset: 737
    000002e3: 	movzbl	0xd(%rbx), %ecx
    000002e7: 	addq	%rcx, %rax
    000002ea: 	leaq	0xe(%rbx), %rcx
    000002ee: 	cmpq	%rcx, %rdx
    000002f1: 	je	.Ltmp229 # Offset: 753
    000002f3: 	movzbl	0xe(%rbx), %edx
    000002f7: 	addq	%rdx, %rax
    000002fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp229:
    00000300: 	movzbl	init_value(%rip), %edx
    00000307: 	imulq	%rbp, %rdx
    0000030b: 	cmpq	%rax, %rdx
    0000030e: 	je	.Ltmp230 # Offset: 782
    00000310: 	movq	0x8(%rsp), %rax
    00000315: 	subq	%fs:0x28, %rax
    0000031e: 	jne	.Ltmp231 # Offset: 798
    00000324: 	movq	(%r13), %rdx
    00000328: 	addq	$0x18, %rsp
    0000032c: 	leaq	DATAat0x12278(%rip), %rsi
    00000333: 	xorl	%eax, %eax
    00000335: 	popq	%rbx
    00000336: 	movl	$0x1, %edi
    0000033b: 	popq	%rbp
    0000033c: 	popq	%r12
    0000033e: 	popq	%r13
    00000340: 	popq	%r14
    00000342: 	popq	%r15
    00000344: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 836
    00000349: 	nopl	(%rax) # Size: 7
.Ltmp223:
    00000350: 	movq	%r14, %rdi
    00000353: 	movq	%rsp, %rsi
    00000356: 	xorl	%edx, %edx
    00000358: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 856
    0000035d: 	movq	%rax, (%r14)
    00000360: 	movq	%rax, %rdi
    00000363: 	movq	(%rsp), %rax
    00000367: 	movq	%rax, 0x10(%r14)
.Ltmp236:
    0000036b: 	movq	%r12, %rdx
    0000036e: 	movq	%r15, %rsi
    00000371: 	callq	memcpy@PLT # Offset: 881
    00000376: 	movq	(%rsp), %r12
    0000037a: 	movq	(%r14), %rdi
    0000037d: 	jmp	.Ltmp232 # Offset: 893
    00000382: 	nopw	(%rax,%rax) # Size: 6
.Ltmp230:
    00000388: 	movq	0x8(%rsp), %rax
    0000038d: 	subq	%fs:0x28, %rax
    00000396: 	jne	.Ltmp231 # Offset: 918
    0000039c: 	addq	$0x18, %rsp
    000003a0: 	popq	%rbx
    000003a1: 	popq	%rbp
    000003a2: 	popq	%r12
    000003a4: 	popq	%r13
    000003a6: 	popq	%r14
    000003a8: 	popq	%r15
    000003aa: 	retq # Offset: 938
    000003ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp225:
    000003b0: 	movq	-0x8(%rdx), %rax
    000003b4: 	addq	$0x200, %rax
    000003ba: 	jmp	.Ltmp233 # Offset: 954
    000003bf: 	nop # Size: 1
.Ltmp220:
    000003c0: 	movq	%r13, %rsi
    000003c3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000003ca: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 970
    000003cf: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000003d6: 	jmp	.Ltmp234 # Offset: 982
    000003db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp219:
    000003e0: 	xorl	%r12d, %r12d
    000003e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp235:
    000003e8: 	movq	%r14, %rdx
    000003eb: 	movl	%r15d, %esi
    000003ee: 	movq	%rbx, %rdi
    000003f1: 	addl	$0x1, %r12d
    000003f5: 	callq	memset@PLT # Offset: 1013
    000003fa: 	cmpl	iterations(%rip), %r12d
    00000401: 	jl	.Ltmp235 # Offset: 1025
    00000403: 	jmp	.Ltmp218 # Offset: 1027
    00000408: 	nopl	(%rax,%rax) # Size: 8
.Ltmp224:
    00000410: 	testq	%r12, %r12
    00000413: 	je	.Ltmp232 # Offset: 1043
    00000419: 	jmp	.Ltmp236 # Offset: 1049
    0000041e: 	nop # Size: 2
.Ltmp226:
    00000420: 	xorl	%eax, %eax
    00000422: 	jmp	.Ltmp229 # Offset: 1058
.Ltmp227:
    00000427: 	xorl	%eax, %eax
    00000429: 	jmp	.Ltmp237 # Offset: 1065
.Ltmp231:
    0000042e: 	callq	__stack_chk_fail@PLT # Offset: 1070
.Ltmp222:
    00000433: 	leaq	DATAat0x12008(%rip), %rdi
    0000043a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1082
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_std_fillIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_std_fillItEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x4bc0
  Size        : 0x4f7
  MaxSize     : 0x500
  Offset      : 0x4bc0
  Section     : .text
  Orc Section : .local.text._Z13test_std_fillItEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	movq	%rdi, %rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movl	%esi, 0x4(%rsp)
    00000019: 	movq	%rcx, 0x8(%rsp)
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x18(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movzbl	%dl, %eax
    00000031: 	shll	$0x8, %edx
    00000034: 	leal	(%rdx,%rax), %ebp
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movl	iterations(%rip), %r12d
    00000043: 	movq	%rax, start_time(%rip)
    0000004a: 	testl	%r12d, %r12d
    0000004d: 	jle	.Ltmp238 # Offset: 77
    00000053: 	movslq	0x4(%rsp), %r10
    00000058: 	addq	%r10, %r10
    0000005b: 	leaq	(%rbx,%r10), %r11
    0000005f: 	cmpq	%rbx, %r11
    00000062: 	je	.Ltmp238 # Offset: 98
    00000068: 	subq	$0x2, %r10
    0000006c: 	movd	%ebp, %xmm0
    00000070: 	movd	%ebp, %xmm6
    00000074: 	xorl	%edi, %edi
    00000076: 	movq	%r10, %r14
    00000079: 	punpcklwd	%xmm0, %xmm0
    0000007d: 	pshuflw	$0x0, %xmm6, %xmm1
    00000082: 	shrq	%r14
    00000085: 	pshufd	$0x0, %xmm0, %xmm0
    0000008a: 	leaq	0x1(%r14), %r13
    0000008e: 	movq	%r13, %rdx
    00000091: 	movq	%r13, %r9
    00000094: 	shrq	$0x3, %rdx
    00000098: 	andq	$-0x8, %r9
    0000009c: 	shlq	$0x4, %rdx
    000000a0: 	leaq	(%rbx,%r9,2), %r15
    000000a4: 	addq	%rbx, %rdx
    000000a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp243:
    000000b0: 	movq	%rbx, %rax
    000000b3: 	cmpq	$0xc, %r10
    000000b7: 	jbe	.Ltmp239 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp240:
    000000c0: 	movups	%xmm0, (%rax)
    000000c3: 	addq	$0x10, %rax
    000000c7: 	cmpq	%rdx, %rax
    000000ca: 	jne	.Ltmp240 # Offset: 202
    000000cc: 	cmpq	%r9, %r13
    000000cf: 	je	.Ltmp241 # Offset: 207
    000000d1: 	movq	%r9, %rcx
    000000d4: 	movq	%r15, %rax
.Ltmp256:
    000000d7: 	movq	%r14, %r8
    000000da: 	subq	%rcx, %r8
    000000dd: 	leaq	0x1(%r8), %rsi
    000000e1: 	cmpq	$0x2, %r8
    000000e5: 	jbe	.Ltmp242 # Offset: 229
    000000e7: 	movq	%xmm1, (%rbx,%rcx,2)
    000000ec: 	movq	%rsi, %rcx
    000000ef: 	andq	$-0x4, %rcx
    000000f3: 	leaq	(%rax,%rcx,2), %rax
    000000f7: 	cmpq	%rcx, %rsi
    000000fa: 	je	.Ltmp241 # Offset: 250
.Ltmp242:
    000000fc: 	leaq	0x2(%rax), %rcx
    00000100: 	movw	%bp, (%rax)
    00000103: 	cmpq	%rcx, %r11
    00000106: 	je	.Ltmp241 # Offset: 262
    00000108: 	leaq	0x4(%rax), %rcx
    0000010c: 	movw	%bp, 0x2(%rax)
    00000110: 	cmpq	%rcx, %r11
    00000113: 	je	.Ltmp241 # Offset: 275
    00000115: 	movw	%bp, 0x4(%rax)
.Ltmp241:
    00000119: 	addl	$0x1, %edi
    0000011c: 	cmpl	%r12d, %edi
    0000011f: 	jne	.Ltmp243 # Offset: 287
.Ltmp238:
    00000121: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000128: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    0000012f: 	subq	$0x20, %rax
    00000133: 	cmpq	%rax, %rbp
    00000136: 	je	.Ltmp244 # Offset: 310
    0000013c: 	movq	0x8(%rsp), %rax
    00000141: 	leaq	0x10(%rbp), %rdi
    00000145: 	movq	%rdi, (%rbp)
    00000149: 	movq	(%rax), %r13
    0000014c: 	movq	0x8(%rax), %r12
    00000150: 	movq	%r13, %rax
    00000153: 	addq	%r12, %rax
    00000156: 	je	.Ltmp245 # Offset: 342
    00000158: 	testq	%r13, %r13
    0000015b: 	je	.Ltmp246 # Offset: 347
.Ltmp245:
    00000161: 	movq	%r12, 0x10(%rsp)
    00000166: 	cmpq	$0xf, %r12
    0000016a: 	ja	.Ltmp247 # Offset: 362
    00000170: 	cmpq	$0x1, %r12
    00000174: 	jne	.Ltmp248 # Offset: 372
    0000017a: 	movzbl	(%r13), %eax
    0000017f: 	movb	%al, 0x10(%rbp)
.Ltmp257:
    00000182: 	movq	%r12, 0x8(%rbp)
    00000186: 	movb	$0x0, (%rdi,%r12)
    0000018b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000192: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000199: 	addq	$0x20, %rax
    0000019d: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001a4: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000001ab: 	je	.Ltmp249 # Offset: 427
.Ltmp258:
    000001b1: 	movq	-0x20(%rax), %rbp
    000001b5: 	callq	clock@PLT # Offset: 437
    000001ba: 	pxor	%xmm0, %xmm0
    000001be: 	movq	%rax, end_time(%rip)
    000001c5: 	movq	%rbp, %rdi
    000001c8: 	subq	start_time(%rip), %rax
    000001cf: 	cvtsi2sd	%rax, %xmm0
    000001d4: 	divsd	DATAat0x12360(%rip), %xmm0
    000001dc: 	callq	_Z13record_resultdPKc # Offset: 476
    000001e1: 	movl	0x4(%rsp), %edx
    000001e5: 	addl	%edx, %edx
    000001e7: 	movslq	%edx, %rdx
    000001ea: 	leaq	(%rbx,%rdx), %rcx
    000001ee: 	cmpq	%rcx, %rbx
    000001f1: 	je	.Ltmp250 # Offset: 497
    000001f7: 	leaq	-0x1(%rdx), %rsi
    000001fb: 	movq	%rbx, %rax
    000001fe: 	cmpq	$0xe, %rsi
    00000202: 	jbe	.Ltmp251 # Offset: 514
    00000208: 	pxor	%xmm2, %xmm2
    0000020c: 	pxor	%xmm6, %xmm6
    00000210: 	pxor	%xmm5, %xmm5
    00000214: 	movq	%rdx, %rsi
    00000217: 	andq	$-0x10, %rsi
    0000021b: 	pxor	%xmm4, %xmm4
    0000021f: 	addq	%rbx, %rsi
    00000222: 	nopw	(%rax,%rax) # Size: 6
.Ltmp252:
    00000228: 	movdqu	(%rax), %xmm1
    0000022c: 	addq	$0x10, %rax
    00000230: 	movdqa	%xmm1, %xmm0
    00000234: 	punpckhbw	%xmm6, %xmm1
    00000238: 	punpcklbw	%xmm6, %xmm0
    0000023c: 	movdqa	%xmm1, %xmm3
    00000240: 	punpckhwd	%xmm5, %xmm1
    00000244: 	movdqa	%xmm0, %xmm7
    00000248: 	punpckhwd	%xmm5, %xmm0
    0000024c: 	punpcklwd	%xmm5, %xmm3
    00000250: 	movdqa	%xmm0, %xmm8
    00000255: 	punpcklwd	%xmm5, %xmm7
    00000259: 	punpckhdq	%xmm4, %xmm0
    0000025d: 	punpckldq	%xmm4, %xmm8
    00000262: 	paddq	%xmm8, %xmm0
    00000267: 	movdqa	%xmm7, %xmm8
    0000026c: 	punpckhdq	%xmm4, %xmm7
    00000270: 	punpckldq	%xmm4, %xmm8
    00000275: 	paddq	%xmm8, %xmm7
    0000027a: 	paddq	%xmm7, %xmm0
    0000027e: 	movdqa	%xmm3, %xmm7
    00000282: 	punpckhdq	%xmm4, %xmm3
    00000286: 	punpckldq	%xmm4, %xmm7
    0000028a: 	paddq	%xmm7, %xmm3
    0000028e: 	movdqa	%xmm1, %xmm7
    00000292: 	punpckhdq	%xmm4, %xmm1
    00000296: 	punpckldq	%xmm4, %xmm7
    0000029a: 	paddq	%xmm1, %xmm2
    0000029e: 	paddq	%xmm7, %xmm3
    000002a2: 	paddq	%xmm3, %xmm0
    000002a6: 	paddq	%xmm0, %xmm2
    000002aa: 	cmpq	%rax, %rsi
    000002ad: 	jne	.Ltmp252 # Offset: 685
    000002b3: 	movdqa	%xmm2, %xmm0
    000002b7: 	movq	%rdx, %rsi
    000002ba: 	psrldq	$0x8, %xmm0
    000002bf: 	andq	$-0x10, %rsi
    000002c3: 	paddq	%xmm0, %xmm2
    000002c7: 	addq	%rsi, %rbx
    000002ca: 	movq	%xmm2, %rax
    000002cf: 	cmpq	%rsi, %rdx
    000002d2: 	je	.Ltmp253 # Offset: 722
.Ltmp260:
    000002d8: 	movzbl	(%rbx), %esi
    000002db: 	addq	%rsi, %rax
    000002de: 	leaq	0x1(%rbx), %rsi
    000002e2: 	cmpq	%rsi, %rcx
    000002e5: 	je	.Ltmp253 # Offset: 741
    000002eb: 	movzbl	0x1(%rbx), %esi
    000002ef: 	addq	%rsi, %rax
    000002f2: 	leaq	0x2(%rbx), %rsi
    000002f6: 	cmpq	%rsi, %rcx
    000002f9: 	je	.Ltmp253 # Offset: 761
    000002ff: 	movzbl	0x2(%rbx), %esi
    00000303: 	addq	%rsi, %rax
    00000306: 	leaq	0x3(%rbx), %rsi
    0000030a: 	cmpq	%rsi, %rcx
    0000030d: 	je	.Ltmp253 # Offset: 781
    00000313: 	movzbl	0x3(%rbx), %esi
    00000317: 	addq	%rsi, %rax
    0000031a: 	leaq	0x4(%rbx), %rsi
    0000031e: 	cmpq	%rsi, %rcx
    00000321: 	je	.Ltmp253 # Offset: 801
    00000327: 	movzbl	0x4(%rbx), %esi
    0000032b: 	addq	%rsi, %rax
    0000032e: 	leaq	0x5(%rbx), %rsi
    00000332: 	cmpq	%rsi, %rcx
    00000335: 	je	.Ltmp253 # Offset: 821
    0000033b: 	movzbl	0x5(%rbx), %esi
    0000033f: 	addq	%rsi, %rax
    00000342: 	leaq	0x6(%rbx), %rsi
    00000346: 	cmpq	%rsi, %rcx
    00000349: 	je	.Ltmp253 # Offset: 841
    0000034f: 	movzbl	0x6(%rbx), %esi
    00000353: 	addq	%rsi, %rax
    00000356: 	leaq	0x7(%rbx), %rsi
    0000035a: 	cmpq	%rsi, %rcx
    0000035d: 	je	.Ltmp253 # Offset: 861
    00000363: 	movzbl	0x7(%rbx), %esi
    00000367: 	addq	%rsi, %rax
    0000036a: 	leaq	0x8(%rbx), %rsi
    0000036e: 	cmpq	%rsi, %rcx
    00000371: 	je	.Ltmp253 # Offset: 881
    00000373: 	movzbl	0x8(%rbx), %esi
    00000377: 	addq	%rsi, %rax
    0000037a: 	leaq	0x9(%rbx), %rsi
    0000037e: 	cmpq	%rsi, %rcx
    00000381: 	je	.Ltmp253 # Offset: 897
    00000383: 	movzbl	0x9(%rbx), %esi
    00000387: 	addq	%rsi, %rax
    0000038a: 	leaq	0xa(%rbx), %rsi
    0000038e: 	cmpq	%rsi, %rcx
    00000391: 	je	.Ltmp253 # Offset: 913
    00000393: 	movzbl	0xa(%rbx), %esi
    00000397: 	addq	%rsi, %rax
    0000039a: 	leaq	0xb(%rbx), %rsi
    0000039e: 	cmpq	%rsi, %rcx
    000003a1: 	je	.Ltmp253 # Offset: 929
    000003a3: 	movzbl	0xb(%rbx), %esi
    000003a7: 	addq	%rsi, %rax
    000003aa: 	leaq	0xc(%rbx), %rsi
    000003ae: 	cmpq	%rsi, %rcx
    000003b1: 	je	.Ltmp253 # Offset: 945
    000003b3: 	movzbl	0xc(%rbx), %esi
    000003b7: 	addq	%rsi, %rax
    000003ba: 	leaq	0xd(%rbx), %rsi
    000003be: 	cmpq	%rsi, %rcx
    000003c1: 	je	.Ltmp253 # Offset: 961
    000003c3: 	movzbl	0xd(%rbx), %esi
    000003c7: 	addq	%rsi, %rax
    000003ca: 	leaq	0xe(%rbx), %rsi
    000003ce: 	cmpq	%rsi, %rcx
    000003d1: 	je	.Ltmp253 # Offset: 977
    000003d3: 	movzbl	0xe(%rbx), %ecx
    000003d7: 	addq	%rcx, %rax
    000003da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp253:
    000003e0: 	movzbl	init_value(%rip), %ecx
    000003e7: 	imulq	%rcx, %rdx
    000003eb: 	cmpq	%rax, %rdx
    000003ee: 	je	.Ltmp254 # Offset: 1006
    000003f0: 	movq	0x18(%rsp), %rax
    000003f5: 	subq	%fs:0x28, %rax
    000003fe: 	jne	.Ltmp255 # Offset: 1022
    00000404: 	movq	0x8(%rsp), %rax
    00000409: 	leaq	DATAat0x12278(%rip), %rsi
    00000410: 	movl	$0x1, %edi
    00000415: 	movq	(%rax), %rdx
    00000418: 	addq	$0x28, %rsp
    0000041c: 	xorl	%eax, %eax
    0000041e: 	popq	%rbx
    0000041f: 	popq	%rbp
    00000420: 	popq	%r12
    00000422: 	popq	%r13
    00000424: 	popq	%r14
    00000426: 	popq	%r15
    00000428: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1064
.Ltmp239:
    0000042d: 	xorl	%ecx, %ecx
    0000042f: 	jmp	.Ltmp256 # Offset: 1071
.Ltmp247:
    00000434: 	movq	%rbp, %rdi
    00000437: 	leaq	0x10(%rsp), %rsi
    0000043c: 	xorl	%edx, %edx
    0000043e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1086
    00000443: 	movq	%rax, (%rbp)
    00000447: 	movq	%rax, %rdi
    0000044a: 	movq	0x10(%rsp), %rax
    0000044f: 	movq	%rax, 0x10(%rbp)
.Ltmp259:
    00000453: 	movq	%r12, %rdx
    00000456: 	movq	%r13, %rsi
    00000459: 	callq	memcpy@PLT # Offset: 1113
    0000045e: 	movq	0x10(%rsp), %r12
    00000463: 	movq	(%rbp), %rdi
    00000467: 	jmp	.Ltmp257 # Offset: 1127
.Ltmp254:
    0000046c: 	movq	0x18(%rsp), %rax
    00000471: 	subq	%fs:0x28, %rax
    0000047a: 	jne	.Ltmp255 # Offset: 1146
    0000047c: 	addq	$0x28, %rsp
    00000480: 	popq	%rbx
    00000481: 	popq	%rbp
    00000482: 	popq	%r12
    00000484: 	popq	%r13
    00000486: 	popq	%r14
    00000488: 	popq	%r15
    0000048a: 	retq # Offset: 1162
.Ltmp244:
    0000048b: 	movq	0x8(%rsp), %rsi
    00000490: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000497: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1175
    0000049c: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000004a3: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000004aa: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000004b1: 	jne	.Ltmp258 # Offset: 1201
.Ltmp249:
    000004b7: 	movq	-0x8(%rdx), %rax
    000004bb: 	addq	$0x200, %rax
    000004c1: 	jmp	.Ltmp258 # Offset: 1217
.Ltmp248:
    000004c6: 	testq	%r12, %r12
    000004c9: 	je	.Ltmp257 # Offset: 1225
    000004cf: 	jmp	.Ltmp259 # Offset: 1231
    000004d1: 	nopl	(%rax) # Size: 7
.Ltmp250:
    000004d8: 	xorl	%eax, %eax
    000004da: 	jmp	.Ltmp253 # Offset: 1242
.Ltmp251:
    000004df: 	xorl	%eax, %eax
    000004e1: 	jmp	.Ltmp260 # Offset: 1249
.Ltmp255:
    000004e6: 	callq	__stack_chk_fail@PLT # Offset: 1254
.Ltmp246:
    000004eb: 	leaq	DATAat0x12008(%rip), %rdi
    000004f2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1266
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_std_fillItEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_iterator_fillItEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x50c0
  Size        : 0x4e7
  MaxSize     : 0x4f0
  Offset      : 0x50c0
  Section     : .text
  Orc Section : .local.text._Z18test_iterator_fillItEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movslq	%esi, %r10
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	leaq	(%r10,%r10), %r13
    00000011: 	pushq	%r12
    00000013: 	leaq	(%rdi,%r13), %r12
    00000017: 	pushq	%rbp
    00000018: 	pushq	%rbx
    00000019: 	movq	%rdi, %rbx
    0000001c: 	subq	$0x28, %rsp
    00000020: 	movl	%esi, 0xc(%rsp)
    00000024: 	movq	%rcx, (%rsp)
    00000028: 	movq	%fs:0x28, %rax
    00000031: 	movq	%rax, 0x18(%rsp)
    00000036: 	xorl	%eax, %eax
    00000038: 	movzbl	%dl, %eax
    0000003b: 	shll	$0x8, %edx
    0000003e: 	leal	(%rdx,%rax), %ebp
    00000041: 	callq	clock@PLT # Offset: 65
    00000046: 	movl	iterations(%rip), %r11d
    0000004d: 	movq	%rax, start_time(%rip)
    00000054: 	testl	%r11d, %r11d
    00000057: 	jle	.Ltmp261 # Offset: 87
    0000005d: 	cmpq	%r12, %rbx
    00000060: 	je	.Ltmp261 # Offset: 96
    00000066: 	leaq	-0x2(%r13), %r10
    0000006a: 	movd	%ebp, %xmm0
    0000006e: 	movd	%ebp, %xmm6
    00000072: 	xorl	%edi, %edi
    00000074: 	movq	%r10, %r14
    00000077: 	punpcklwd	%xmm0, %xmm0
    0000007b: 	pshuflw	$0x0, %xmm6, %xmm1
    00000080: 	shrq	%r14
    00000083: 	pshufd	$0x0, %xmm0, %xmm0
    00000088: 	leaq	0x1(%r14), %r13
    0000008c: 	movq	%r13, %rdx
    0000008f: 	movq	%r13, %r9
    00000092: 	shrq	$0x3, %rdx
    00000096: 	andq	$-0x8, %r9
    0000009a: 	shlq	$0x4, %rdx
    0000009e: 	leaq	(%rbx,%r9,2), %r15
    000000a2: 	addq	%rbx, %rdx
    000000a5: 	nopl	(%rax) # Size: 3
.Ltmp266:
    000000a8: 	movq	%rbx, %rax
    000000ab: 	cmpq	$0xc, %r10
    000000af: 	jbe	.Ltmp262 # Offset: 175
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp263:
    000000b8: 	movups	%xmm0, (%rax)
    000000bb: 	addq	$0x10, %rax
    000000bf: 	cmpq	%rdx, %rax
    000000c2: 	jne	.Ltmp263 # Offset: 194
    000000c4: 	cmpq	%r9, %r13
    000000c7: 	je	.Ltmp264 # Offset: 199
    000000c9: 	movq	%r9, %rcx
    000000cc: 	movq	%r15, %rax
.Ltmp279:
    000000cf: 	movq	%r14, %r8
    000000d2: 	subq	%rcx, %r8
    000000d5: 	leaq	0x1(%r8), %rsi
    000000d9: 	cmpq	$0x2, %r8
    000000dd: 	jbe	.Ltmp265 # Offset: 221
    000000df: 	movq	%xmm1, (%rbx,%rcx,2)
    000000e4: 	movq	%rsi, %rcx
    000000e7: 	andq	$-0x4, %rcx
    000000eb: 	leaq	(%rax,%rcx,2), %rax
    000000ef: 	cmpq	%rcx, %rsi
    000000f2: 	je	.Ltmp264 # Offset: 242
.Ltmp265:
    000000f4: 	leaq	0x2(%rax), %rcx
    000000f8: 	movw	%bp, (%rax)
    000000fb: 	cmpq	%rcx, %r12
    000000fe: 	je	.Ltmp264 # Offset: 254
    00000100: 	leaq	0x4(%rax), %rcx
    00000104: 	movw	%bp, 0x2(%rax)
    00000108: 	cmpq	%rcx, %r12
    0000010b: 	je	.Ltmp264 # Offset: 267
    0000010d: 	movw	%bp, 0x4(%rax)
.Ltmp264:
    00000111: 	addl	$0x1, %edi
    00000114: 	cmpl	%edi, %r11d
    00000117: 	jne	.Ltmp266 # Offset: 279
.Ltmp261:
    00000119: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000120: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    00000127: 	subq	$0x20, %rax
    0000012b: 	cmpq	%rax, %rbp
    0000012e: 	je	.Ltmp267 # Offset: 302
    00000134: 	movq	(%rsp), %rax
    00000138: 	leaq	0x10(%rbp), %rdi
    0000013c: 	movq	%rdi, (%rbp)
    00000140: 	movq	(%rax), %r13
    00000143: 	movq	0x8(%rax), %r12
    00000147: 	movq	%r13, %rax
    0000014a: 	addq	%r12, %rax
    0000014d: 	je	.Ltmp268 # Offset: 333
    0000014f: 	testq	%r13, %r13
    00000152: 	je	.Ltmp269 # Offset: 338
.Ltmp268:
    00000158: 	movq	%r12, 0x10(%rsp)
    0000015d: 	cmpq	$0xf, %r12
    00000161: 	ja	.Ltmp270 # Offset: 353
    00000167: 	cmpq	$0x1, %r12
    0000016b: 	jne	.Ltmp271 # Offset: 363
    00000171: 	movzbl	(%r13), %eax
    00000176: 	movb	%al, 0x10(%rbp)
.Ltmp280:
    00000179: 	movq	%r12, 0x8(%rbp)
    0000017d: 	movb	$0x0, (%rdi,%r12)
    00000182: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000189: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000190: 	addq	$0x20, %rax
    00000194: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000019b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000001a2: 	je	.Ltmp272 # Offset: 418
.Ltmp281:
    000001a8: 	movq	-0x20(%rax), %rbp
    000001ac: 	callq	clock@PLT # Offset: 428
    000001b1: 	pxor	%xmm0, %xmm0
    000001b5: 	movq	%rax, end_time(%rip)
    000001bc: 	movq	%rbp, %rdi
    000001bf: 	subq	start_time(%rip), %rax
    000001c6: 	cvtsi2sd	%rax, %xmm0
    000001cb: 	divsd	DATAat0x12360(%rip), %xmm0
    000001d3: 	callq	_Z13record_resultdPKc # Offset: 467
    000001d8: 	movl	0xc(%rsp), %edx
    000001dc: 	addl	%edx, %edx
    000001de: 	movslq	%edx, %rdx
    000001e1: 	leaq	(%rbx,%rdx), %rcx
    000001e5: 	cmpq	%rcx, %rbx
    000001e8: 	je	.Ltmp273 # Offset: 488
    000001ee: 	leaq	-0x1(%rdx), %rsi
    000001f2: 	movq	%rbx, %rax
    000001f5: 	cmpq	$0xe, %rsi
    000001f9: 	jbe	.Ltmp274 # Offset: 505
    000001ff: 	pxor	%xmm2, %xmm2
    00000203: 	pxor	%xmm6, %xmm6
    00000207: 	pxor	%xmm5, %xmm5
    0000020b: 	movq	%rdx, %rsi
    0000020e: 	andq	$-0x10, %rsi
    00000212: 	pxor	%xmm4, %xmm4
    00000216: 	addq	%rbx, %rsi
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp275:
    00000220: 	movdqu	(%rax), %xmm1
    00000224: 	addq	$0x10, %rax
    00000228: 	movdqa	%xmm1, %xmm0
    0000022c: 	punpckhbw	%xmm6, %xmm1
    00000230: 	punpcklbw	%xmm6, %xmm0
    00000234: 	movdqa	%xmm1, %xmm3
    00000238: 	punpckhwd	%xmm5, %xmm1
    0000023c: 	movdqa	%xmm0, %xmm7
    00000240: 	punpckhwd	%xmm5, %xmm0
    00000244: 	punpcklwd	%xmm5, %xmm3
    00000248: 	movdqa	%xmm0, %xmm8
    0000024d: 	punpcklwd	%xmm5, %xmm7
    00000251: 	punpckhdq	%xmm4, %xmm0
    00000255: 	punpckldq	%xmm4, %xmm8
    0000025a: 	paddq	%xmm8, %xmm0
    0000025f: 	movdqa	%xmm7, %xmm8
    00000264: 	punpckhdq	%xmm4, %xmm7
    00000268: 	punpckldq	%xmm4, %xmm8
    0000026d: 	paddq	%xmm8, %xmm7
    00000272: 	paddq	%xmm7, %xmm0
    00000276: 	movdqa	%xmm3, %xmm7
    0000027a: 	punpckhdq	%xmm4, %xmm3
    0000027e: 	punpckldq	%xmm4, %xmm7
    00000282: 	paddq	%xmm7, %xmm3
    00000286: 	movdqa	%xmm1, %xmm7
    0000028a: 	punpckhdq	%xmm4, %xmm1
    0000028e: 	punpckldq	%xmm4, %xmm7
    00000292: 	paddq	%xmm1, %xmm2
    00000296: 	paddq	%xmm7, %xmm3
    0000029a: 	paddq	%xmm3, %xmm0
    0000029e: 	paddq	%xmm0, %xmm2
    000002a2: 	cmpq	%rax, %rsi
    000002a5: 	jne	.Ltmp275 # Offset: 677
    000002ab: 	movdqa	%xmm2, %xmm0
    000002af: 	movq	%rdx, %rsi
    000002b2: 	psrldq	$0x8, %xmm0
    000002b7: 	andq	$-0x10, %rsi
    000002bb: 	paddq	%xmm0, %xmm2
    000002bf: 	addq	%rsi, %rbx
    000002c2: 	movq	%xmm2, %rax
    000002c7: 	cmpq	%rsi, %rdx
    000002ca: 	je	.Ltmp276 # Offset: 714
.Ltmp283:
    000002d0: 	movzbl	(%rbx), %esi
    000002d3: 	addq	%rsi, %rax
    000002d6: 	leaq	0x1(%rbx), %rsi
    000002da: 	cmpq	%rsi, %rcx
    000002dd: 	je	.Ltmp276 # Offset: 733
    000002e3: 	movzbl	0x1(%rbx), %esi
    000002e7: 	addq	%rsi, %rax
    000002ea: 	leaq	0x2(%rbx), %rsi
    000002ee: 	cmpq	%rsi, %rcx
    000002f1: 	je	.Ltmp276 # Offset: 753
    000002f7: 	movzbl	0x2(%rbx), %esi
    000002fb: 	addq	%rsi, %rax
    000002fe: 	leaq	0x3(%rbx), %rsi
    00000302: 	cmpq	%rsi, %rcx
    00000305: 	je	.Ltmp276 # Offset: 773
    0000030b: 	movzbl	0x3(%rbx), %esi
    0000030f: 	addq	%rsi, %rax
    00000312: 	leaq	0x4(%rbx), %rsi
    00000316: 	cmpq	%rsi, %rcx
    00000319: 	je	.Ltmp276 # Offset: 793
    0000031f: 	movzbl	0x4(%rbx), %esi
    00000323: 	addq	%rsi, %rax
    00000326: 	leaq	0x5(%rbx), %rsi
    0000032a: 	cmpq	%rsi, %rcx
    0000032d: 	je	.Ltmp276 # Offset: 813
    00000333: 	movzbl	0x5(%rbx), %esi
    00000337: 	addq	%rsi, %rax
    0000033a: 	leaq	0x6(%rbx), %rsi
    0000033e: 	cmpq	%rsi, %rcx
    00000341: 	je	.Ltmp276 # Offset: 833
    00000347: 	movzbl	0x6(%rbx), %esi
    0000034b: 	addq	%rsi, %rax
    0000034e: 	leaq	0x7(%rbx), %rsi
    00000352: 	cmpq	%rsi, %rcx
    00000355: 	je	.Ltmp276 # Offset: 853
    00000357: 	movzbl	0x7(%rbx), %esi
    0000035b: 	addq	%rsi, %rax
    0000035e: 	leaq	0x8(%rbx), %rsi
    00000362: 	cmpq	%rsi, %rcx
    00000365: 	je	.Ltmp276 # Offset: 869
    00000367: 	movzbl	0x8(%rbx), %esi
    0000036b: 	addq	%rsi, %rax
    0000036e: 	leaq	0x9(%rbx), %rsi
    00000372: 	cmpq	%rsi, %rcx
    00000375: 	je	.Ltmp276 # Offset: 885
    00000377: 	movzbl	0x9(%rbx), %esi
    0000037b: 	addq	%rsi, %rax
    0000037e: 	leaq	0xa(%rbx), %rsi
    00000382: 	cmpq	%rsi, %rcx
    00000385: 	je	.Ltmp276 # Offset: 901
    00000387: 	movzbl	0xa(%rbx), %esi
    0000038b: 	addq	%rsi, %rax
    0000038e: 	leaq	0xb(%rbx), %rsi
    00000392: 	cmpq	%rsi, %rcx
    00000395: 	je	.Ltmp276 # Offset: 917
    00000397: 	movzbl	0xb(%rbx), %esi
    0000039b: 	addq	%rsi, %rax
    0000039e: 	leaq	0xc(%rbx), %rsi
    000003a2: 	cmpq	%rsi, %rcx
    000003a5: 	je	.Ltmp276 # Offset: 933
    000003a7: 	movzbl	0xc(%rbx), %esi
    000003ab: 	addq	%rsi, %rax
    000003ae: 	leaq	0xd(%rbx), %rsi
    000003b2: 	cmpq	%rsi, %rcx
    000003b5: 	je	.Ltmp276 # Offset: 949
    000003b7: 	movzbl	0xd(%rbx), %esi
    000003bb: 	addq	%rsi, %rax
    000003be: 	leaq	0xe(%rbx), %rsi
    000003c2: 	cmpq	%rsi, %rcx
    000003c5: 	je	.Ltmp276 # Offset: 965
    000003c7: 	movzbl	0xe(%rbx), %ecx
    000003cb: 	addq	%rcx, %rax
    000003ce: 	nop # Size: 2
.Ltmp276:
    000003d0: 	movzbl	init_value(%rip), %ecx
    000003d7: 	imulq	%rcx, %rdx
    000003db: 	cmpq	%rax, %rdx
    000003de: 	je	.Ltmp277 # Offset: 990
    000003e0: 	movq	0x18(%rsp), %rax
    000003e5: 	subq	%fs:0x28, %rax
    000003ee: 	jne	.Ltmp278 # Offset: 1006
    000003f4: 	movq	(%rsp), %rax
    000003f8: 	leaq	DATAat0x12278(%rip), %rsi
    000003ff: 	movl	$0x1, %edi
    00000404: 	movq	(%rax), %rdx
    00000407: 	addq	$0x28, %rsp
    0000040b: 	xorl	%eax, %eax
    0000040d: 	popq	%rbx
    0000040e: 	popq	%rbp
    0000040f: 	popq	%r12
    00000411: 	popq	%r13
    00000413: 	popq	%r14
    00000415: 	popq	%r15
    00000417: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1047
.Ltmp262:
    0000041c: 	movq	%rbx, %rax
    0000041f: 	xorl	%ecx, %ecx
    00000421: 	jmp	.Ltmp279 # Offset: 1057
.Ltmp270:
    00000426: 	movq	%rbp, %rdi
    00000429: 	leaq	0x10(%rsp), %rsi
    0000042e: 	xorl	%edx, %edx
    00000430: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1072
    00000435: 	movq	%rax, (%rbp)
    00000439: 	movq	%rax, %rdi
    0000043c: 	movq	0x10(%rsp), %rax
    00000441: 	movq	%rax, 0x10(%rbp)
.Ltmp282:
    00000445: 	movq	%r12, %rdx
    00000448: 	movq	%r13, %rsi
    0000044b: 	callq	memcpy@PLT # Offset: 1099
    00000450: 	movq	0x10(%rsp), %r12
    00000455: 	movq	(%rbp), %rdi
    00000459: 	jmp	.Ltmp280 # Offset: 1113
.Ltmp277:
    0000045e: 	movq	0x18(%rsp), %rax
    00000463: 	subq	%fs:0x28, %rax
    0000046c: 	jne	.Ltmp278 # Offset: 1132
    0000046e: 	addq	$0x28, %rsp
    00000472: 	popq	%rbx
    00000473: 	popq	%rbp
    00000474: 	popq	%r12
    00000476: 	popq	%r13
    00000478: 	popq	%r14
    0000047a: 	popq	%r15
    0000047c: 	retq # Offset: 1148
.Ltmp267:
    0000047d: 	movq	(%rsp), %rsi
    00000481: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000488: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1160
    0000048d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000494: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000049b: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000004a2: 	jne	.Ltmp281 # Offset: 1186
.Ltmp272:
    000004a8: 	movq	-0x8(%rdx), %rax
    000004ac: 	addq	$0x200, %rax
    000004b2: 	jmp	.Ltmp281 # Offset: 1202
.Ltmp271:
    000004b7: 	testq	%r12, %r12
    000004ba: 	je	.Ltmp280 # Offset: 1210
    000004c0: 	jmp	.Ltmp282 # Offset: 1216
    000004c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp273:
    000004c8: 	xorl	%eax, %eax
    000004ca: 	jmp	.Ltmp276 # Offset: 1226
.Ltmp274:
    000004cf: 	xorl	%eax, %eax
    000004d1: 	jmp	.Ltmp283 # Offset: 1233
.Ltmp278:
    000004d6: 	callq	__stack_chk_fail@PLT # Offset: 1238
.Ltmp269:
    000004db: 	leaq	DATAat0x12008(%rip), %rdi
    000004e2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1250
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_iterator_fillItEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_iterator_fillIjEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x55b0
  Size        : 0x4ef
  MaxSize     : 0x4f0
  Offset      : 0x55b0
  Section     : .text
  Orc Section : .local.text._Z18test_iterator_fillIjEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movzbl	%dl, %r13d
    0000000e: 	pushq	%r12
    00000010: 	movq	%rdi, %r12
    00000013: 	movslq	%esi, %rdi
    00000016: 	pushq	%rbp
    00000017: 	leaq	(,%rdi,4), %r15
    0000001f: 	movq	%rcx, %rbp
    00000022: 	pushq	%rbx
    00000023: 	movq	%rdi, %rbx
    00000026: 	leaq	(%r12,%r15), %r14
    0000002a: 	subq	$0x18, %rsp
    0000002e: 	movq	%fs:0x28, %rax
    00000037: 	movq	%rax, 0x8(%rsp)
    0000003c: 	xorl	%eax, %eax
    0000003e: 	movl	%r13d, %eax
    00000041: 	shll	$0x8, %eax
    00000044: 	addl	%r13d, %eax
    00000047: 	shll	$0x8, %eax
    0000004a: 	addl	%r13d, %eax
    0000004d: 	shll	$0x8, %eax
    00000050: 	addl	%eax, %r13d
    00000053: 	callq	clock@PLT # Offset: 83
    00000058: 	movq	%rax, start_time(%rip)
    0000005f: 	movl	iterations(%rip), %eax
    00000065: 	testl	%eax, %eax
    00000067: 	jle	.Ltmp284 # Offset: 103
    0000006d: 	cmpq	%r14, %r12
    00000070: 	je	.Ltmp284 # Offset: 112
    00000076: 	leaq	-0x4(%r15), %rdi
    0000007a: 	movd	%r13d, %xmm5
    0000007f: 	movq	%rdi, %r8
    00000082: 	pshufd	$0x0, %xmm5, %xmm0
    00000087: 	shrq	$0x2, %r8
    0000008b: 	addq	$0x1, %r8
    0000008f: 	movq	%r8, %rdx
    00000092: 	movq	%r8, %r9
    00000095: 	shrq	$0x2, %rdx
    00000099: 	andq	$-0x4, %r9
    0000009d: 	shlq	$0x4, %rdx
    000000a1: 	leaq	(%r12,%r9,4), %rsi
    000000a5: 	addq	%r12, %rdx
    000000a8: 	cmpq	$0x8, %rdi
    000000ac: 	cmovbeq	%r12, %rsi
    000000b0: 	xorl	%ecx, %ecx
    000000b2: 	leaq	0x4(%rsi), %r10
    000000b6: 	leaq	0x8(%rsi), %r11
    000000ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp288:
    000000c0: 	movq	%r12, %rax
    000000c3: 	cmpq	$0x8, %rdi
    000000c7: 	jbe	.Ltmp285 # Offset: 199
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp286:
    000000d0: 	movups	%xmm0, (%rax)
    000000d3: 	addq	$0x10, %rax
    000000d7: 	cmpq	%rdx, %rax
    000000da: 	jne	.Ltmp286 # Offset: 218
    000000dc: 	cmpq	%r9, %r8
    000000df: 	je	.Ltmp287 # Offset: 223
.Ltmp285:
    000000e1: 	movl	%r13d, (%rsi)
    000000e4: 	cmpq	%r10, %r14
    000000e7: 	je	.Ltmp287 # Offset: 231
    000000e9: 	movl	%r13d, 0x4(%rsi)
    000000ed: 	cmpq	%r11, %r14
    000000f0: 	je	.Ltmp287 # Offset: 240
    000000f2: 	movl	%r13d, 0x8(%rsi)
.Ltmp287:
    000000f6: 	addl	$0x1, %ecx
    000000f9: 	cmpl	%ecx, iterations(%rip)
    000000ff: 	jg	.Ltmp288 # Offset: 255
.Ltmp284:
    00000101: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000108: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    0000010f: 	subq	$0x20, %rax
    00000113: 	cmpq	%rax, %r14
    00000116: 	je	.Ltmp289 # Offset: 278
    0000011c: 	leaq	0x10(%r14), %rdi
    00000120: 	movq	0x8(%rbp), %r13
    00000124: 	movq	%rdi, (%r14)
    00000127: 	movq	(%rbp), %r15
    0000012b: 	movq	%r15, %rax
    0000012e: 	addq	%r13, %rax
    00000131: 	je	.Ltmp290 # Offset: 305
    00000133: 	testq	%r15, %r15
    00000136: 	je	.Ltmp291 # Offset: 310
.Ltmp290:
    0000013c: 	movq	%r13, (%rsp)
    00000140: 	cmpq	$0xf, %r13
    00000144: 	ja	.Ltmp292 # Offset: 324
    0000014a: 	cmpq	$0x1, %r13
    0000014e: 	jne	.Ltmp293 # Offset: 334
    00000154: 	movzbl	(%r15), %eax
    00000158: 	movb	%al, 0x10(%r14)
.Ltmp301:
    0000015c: 	movq	%r13, 0x8(%r14)
    00000160: 	movb	$0x0, (%rdi,%r13)
    00000165: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000016c: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000173: 	addq	$0x20, %rax
    00000177: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    0000017e: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000185: 	je	.Ltmp294 # Offset: 389
.Ltmp302:
    0000018b: 	movq	-0x20(%rax), %r13
    0000018f: 	callq	clock@PLT # Offset: 399
    00000194: 	pxor	%xmm0, %xmm0
    00000198: 	movq	%rax, end_time(%rip)
    0000019f: 	movq	%r13, %rdi
    000001a2: 	subq	start_time(%rip), %rax
    000001a9: 	cvtsi2sd	%rax, %xmm0
    000001ae: 	divsd	DATAat0x12360(%rip), %xmm0
    000001b6: 	callq	_Z13record_resultdPKc # Offset: 438
    000001bb: 	leal	(,%rbx,4), %edx
    000001c2: 	movslq	%edx, %rdx
    000001c5: 	leaq	(%r12,%rdx), %rcx
    000001c9: 	cmpq	%rcx, %r12
    000001cc: 	je	.Ltmp295 # Offset: 460
    000001d2: 	leaq	-0x1(%rdx), %rsi
    000001d6: 	movq	%r12, %rax
    000001d9: 	cmpq	$0xe, %rsi
    000001dd: 	jbe	.Ltmp296 # Offset: 477
    000001e3: 	pxor	%xmm6, %xmm6
    000001e7: 	pxor	%xmm5, %xmm5
    000001eb: 	pxor	%xmm4, %xmm4
    000001ef: 	movq	%rdx, %rsi
    000001f2: 	andq	$-0x10, %rsi
    000001f6: 	pxor	%xmm3, %xmm3
    000001fa: 	addq	%r12, %rsi
    000001fd: 	nopl	(%rax) # Size: 3
.Ltmp297:
    00000200: 	movdqu	(%rax), %xmm1
    00000204: 	addq	$0x10, %rax
    00000208: 	movdqa	%xmm1, %xmm0
    0000020c: 	punpckhbw	%xmm5, %xmm1
    00000210: 	punpcklbw	%xmm5, %xmm0
    00000214: 	movdqa	%xmm1, %xmm2
    00000218: 	punpckhwd	%xmm4, %xmm1
    0000021c: 	movdqa	%xmm0, %xmm7
    00000220: 	punpckhwd	%xmm4, %xmm0
    00000224: 	punpcklwd	%xmm4, %xmm2
    00000228: 	movdqa	%xmm0, %xmm8
    0000022d: 	punpcklwd	%xmm4, %xmm7
    00000231: 	punpckhdq	%xmm3, %xmm0
    00000235: 	punpckldq	%xmm3, %xmm8
    0000023a: 	paddq	%xmm8, %xmm0
    0000023f: 	movdqa	%xmm7, %xmm8
    00000244: 	punpckhdq	%xmm3, %xmm7
    00000248: 	punpckldq	%xmm3, %xmm8
    0000024d: 	paddq	%xmm8, %xmm7
    00000252: 	paddq	%xmm7, %xmm0
    00000256: 	movdqa	%xmm2, %xmm7
    0000025a: 	punpckhdq	%xmm3, %xmm2
    0000025e: 	punpckldq	%xmm3, %xmm7
    00000262: 	paddq	%xmm7, %xmm2
    00000266: 	movdqa	%xmm1, %xmm7
    0000026a: 	punpckhdq	%xmm3, %xmm1
    0000026e: 	punpckldq	%xmm3, %xmm7
    00000272: 	paddq	%xmm6, %xmm1
    00000276: 	paddq	%xmm7, %xmm2
    0000027a: 	paddq	%xmm2, %xmm0
    0000027e: 	movdqa	%xmm0, %xmm6
    00000282: 	paddq	%xmm1, %xmm6
    00000286: 	cmpq	%rsi, %rax
    00000289: 	jne	.Ltmp297 # Offset: 649
    0000028f: 	movdqa	%xmm6, %xmm0
    00000293: 	movq	%rdx, %rsi
    00000296: 	psrldq	$0x8, %xmm0
    0000029b: 	andq	$-0x10, %rsi
    0000029f: 	paddq	%xmm0, %xmm6
    000002a3: 	addq	%rsi, %r12
    000002a6: 	movq	%xmm6, %rax
    000002ab: 	cmpq	%rsi, %rdx
    000002ae: 	je	.Ltmp298 # Offset: 686
.Ltmp304:
    000002b4: 	movzbl	(%r12), %esi
    000002b9: 	addq	%rsi, %rax
    000002bc: 	leaq	0x1(%r12), %rsi
    000002c1: 	cmpq	%rsi, %rcx
    000002c4: 	je	.Ltmp298 # Offset: 708
    000002ca: 	movzbl	0x1(%r12), %esi
    000002d0: 	addq	%rsi, %rax
    000002d3: 	leaq	0x2(%r12), %rsi
    000002d8: 	cmpq	%rsi, %rcx
    000002db: 	je	.Ltmp298 # Offset: 731
    000002e1: 	movzbl	0x2(%r12), %esi
    000002e7: 	addq	%rsi, %rax
    000002ea: 	leaq	0x3(%r12), %rsi
    000002ef: 	cmpq	%rsi, %rcx
    000002f2: 	je	.Ltmp298 # Offset: 754
    000002f8: 	movzbl	0x3(%r12), %esi
    000002fe: 	addq	%rsi, %rax
    00000301: 	leaq	0x4(%r12), %rsi
    00000306: 	cmpq	%rsi, %rcx
    00000309: 	je	.Ltmp298 # Offset: 777
    0000030f: 	movzbl	0x4(%r12), %esi
    00000315: 	addq	%rsi, %rax
    00000318: 	leaq	0x5(%r12), %rsi
    0000031d: 	cmpq	%rsi, %rcx
    00000320: 	je	.Ltmp298 # Offset: 800
    00000326: 	movzbl	0x5(%r12), %esi
    0000032c: 	addq	%rsi, %rax
    0000032f: 	leaq	0x6(%r12), %rsi
    00000334: 	cmpq	%rsi, %rcx
    00000337: 	je	.Ltmp298 # Offset: 823
    0000033d: 	movzbl	0x6(%r12), %esi
    00000343: 	addq	%rsi, %rax
    00000346: 	leaq	0x7(%r12), %rsi
    0000034b: 	cmpq	%rsi, %rcx
    0000034e: 	je	.Ltmp298 # Offset: 846
    00000354: 	movzbl	0x7(%r12), %esi
    0000035a: 	addq	%rsi, %rax
    0000035d: 	leaq	0x8(%r12), %rsi
    00000362: 	cmpq	%rsi, %rcx
    00000365: 	je	.Ltmp298 # Offset: 869
    0000036b: 	movzbl	0x8(%r12), %esi
    00000371: 	addq	%rsi, %rax
    00000374: 	leaq	0x9(%r12), %rsi
    00000379: 	cmpq	%rsi, %rcx
    0000037c: 	je	.Ltmp298 # Offset: 892
    0000037e: 	movzbl	0x9(%r12), %esi
    00000384: 	addq	%rsi, %rax
    00000387: 	leaq	0xa(%r12), %rsi
    0000038c: 	cmpq	%rsi, %rcx
    0000038f: 	je	.Ltmp298 # Offset: 911
    00000391: 	movzbl	0xa(%r12), %esi
    00000397: 	addq	%rsi, %rax
    0000039a: 	leaq	0xb(%r12), %rsi
    0000039f: 	cmpq	%rsi, %rcx
    000003a2: 	je	.Ltmp298 # Offset: 930
    000003a4: 	movzbl	0xb(%r12), %esi
    000003aa: 	addq	%rsi, %rax
    000003ad: 	leaq	0xc(%r12), %rsi
    000003b2: 	cmpq	%rsi, %rcx
    000003b5: 	je	.Ltmp298 # Offset: 949
    000003b7: 	movzbl	0xc(%r12), %esi
    000003bd: 	addq	%rsi, %rax
    000003c0: 	leaq	0xd(%r12), %rsi
    000003c5: 	cmpq	%rsi, %rcx
    000003c8: 	je	.Ltmp298 # Offset: 968
    000003ca: 	movzbl	0xd(%r12), %esi
    000003d0: 	addq	%rsi, %rax
    000003d3: 	leaq	0xe(%r12), %rsi
    000003d8: 	cmpq	%rsi, %rcx
    000003db: 	je	.Ltmp298 # Offset: 987
    000003dd: 	movzbl	0xe(%r12), %ecx
    000003e3: 	addq	%rcx, %rax
    000003e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp298:
    000003f0: 	movzbl	init_value(%rip), %ecx
    000003f7: 	imulq	%rcx, %rdx
    000003fb: 	cmpq	%rax, %rdx
    000003fe: 	je	.Ltmp299 # Offset: 1022
    00000400: 	movq	0x8(%rsp), %rax
    00000405: 	subq	%fs:0x28, %rax
    0000040e: 	jne	.Ltmp300 # Offset: 1038
    00000414: 	movq	(%rbp), %rdx
    00000418: 	addq	$0x18, %rsp
    0000041c: 	leaq	DATAat0x12278(%rip), %rsi
    00000423: 	xorl	%eax, %eax
    00000425: 	popq	%rbx
    00000426: 	movl	$0x1, %edi
    0000042b: 	popq	%rbp
    0000042c: 	popq	%r12
    0000042e: 	popq	%r13
    00000430: 	popq	%r14
    00000432: 	popq	%r15
    00000434: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1076
.Ltmp292:
    00000439: 	movq	%r14, %rdi
    0000043c: 	movq	%rsp, %rsi
    0000043f: 	xorl	%edx, %edx
    00000441: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1089
    00000446: 	movq	%rax, (%r14)
    00000449: 	movq	%rax, %rdi
    0000044c: 	movq	(%rsp), %rax
    00000450: 	movq	%rax, 0x10(%r14)
.Ltmp303:
    00000454: 	movq	%r13, %rdx
    00000457: 	movq	%r15, %rsi
    0000045a: 	callq	memcpy@PLT # Offset: 1114
    0000045f: 	movq	(%rsp), %r13
    00000463: 	movq	(%r14), %rdi
    00000466: 	jmp	.Ltmp301 # Offset: 1126
.Ltmp299:
    0000046b: 	movq	0x8(%rsp), %rax
    00000470: 	subq	%fs:0x28, %rax
    00000479: 	jne	.Ltmp300 # Offset: 1145
    0000047b: 	addq	$0x18, %rsp
    0000047f: 	popq	%rbx
    00000480: 	popq	%rbp
    00000481: 	popq	%r12
    00000483: 	popq	%r13
    00000485: 	popq	%r14
    00000487: 	popq	%r15
    00000489: 	retq # Offset: 1161
.Ltmp289:
    0000048a: 	movq	%rbp, %rsi
    0000048d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000494: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1172
    00000499: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000004a0: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    000004a7: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000004ae: 	jne	.Ltmp302 # Offset: 1198
.Ltmp294:
    000004b4: 	movq	-0x8(%rdx), %rax
    000004b8: 	addq	$0x200, %rax
    000004be: 	jmp	.Ltmp302 # Offset: 1214
.Ltmp293:
    000004c3: 	testq	%r13, %r13
    000004c6: 	je	.Ltmp301 # Offset: 1222
    000004cc: 	jmp	.Ltmp303 # Offset: 1228
    000004ce: 	nop # Size: 2
.Ltmp295:
    000004d0: 	xorl	%eax, %eax
    000004d2: 	jmp	.Ltmp298 # Offset: 1234
.Ltmp296:
    000004d7: 	xorl	%eax, %eax
    000004d9: 	jmp	.Ltmp304 # Offset: 1241
.Ltmp300:
    000004de: 	callq	__stack_chk_fail@PLT # Offset: 1246
.Ltmp291:
    000004e3: 	leaq	DATAat0x12008(%rip), %rdi
    000004ea: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1258
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_iterator_fillIjEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_std_fillImEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x5aa0
  Size        : 0x4bf
  MaxSize     : 0x4c0
  Offset      : 0x5aa0
  Section     : .text
  Orc Section : .local.text._Z13test_std_fillImEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	movq	%rdi, %r13
    0000000d: 	pushq	%r12
    0000000f: 	movq	%rcx, %r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%esi, %ebp
    00000015: 	pushq	%rbx
    00000016: 	subq	$0x18, %rsp
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0x8(%rsp)
    00000028: 	xorl	%eax, %eax
    0000002a: 	movzbl	%dl, %eax
    0000002d: 	movq	%rax, %rbx
    00000030: 	shlq	$0x8, %rbx
    00000034: 	addq	%rax, %rbx
    00000037: 	shlq	$0x8, %rbx
    0000003b: 	addq	%rax, %rbx
    0000003e: 	shlq	$0x8, %rbx
    00000042: 	addq	%rax, %rbx
    00000045: 	shlq	$0x8, %rbx
    00000049: 	addq	%rax, %rbx
    0000004c: 	shlq	$0x8, %rbx
    00000050: 	addq	%rax, %rbx
    00000053: 	shlq	$0x8, %rbx
    00000057: 	addq	%rax, %rbx
    0000005a: 	shlq	$0x8, %rbx
    0000005e: 	addq	%rax, %rbx
    00000061: 	callq	clock@PLT # Offset: 97
    00000066: 	movl	iterations(%rip), %r9d
    0000006d: 	movq	%rax, start_time(%rip)
    00000074: 	testl	%r9d, %r9d
    00000077: 	jle	.Ltmp305 # Offset: 119
    00000079: 	movslq	%ebp, %rdi
    0000007c: 	shlq	$0x3, %rdi
    00000080: 	je	.Ltmp305 # Offset: 128
    00000082: 	leaq	-0x8(%rdi), %r8
    00000086: 	movq	%rbx, %xmm0
    0000008b: 	shrq	$0x3, %r8
    0000008f: 	punpcklqdq	%xmm0, %xmm0
    00000093: 	addq	$0x1, %r8
    00000097: 	movq	%r8, %rcx
    0000009a: 	movq	%r8, %r10
    0000009d: 	shrq	%rcx
    000000a0: 	andq	$-0x2, %r10
    000000a4: 	shlq	$0x4, %rcx
    000000a8: 	leaq	(%r13,%r10,8), %rdx
    000000ad: 	addq	%r13, %rcx
    000000b0: 	cmpq	$0x8, %rdi
    000000b4: 	cmoveq	%r13, %rdx
    000000b8: 	xorl	%esi, %esi
    000000ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp309:
    000000c0: 	cmpq	$0x8, %rdi
    000000c4: 	je	.Ltmp306 # Offset: 196
    000000c6: 	movq	%r13, %rax
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp307:
    000000d0: 	movups	%xmm0, (%rax)
    000000d3: 	addq	$0x10, %rax
    000000d7: 	cmpq	%rax, %rcx
    000000da: 	jne	.Ltmp307 # Offset: 218
    000000dc: 	cmpq	%r10, %r8
    000000df: 	je	.Ltmp308 # Offset: 223
.Ltmp306:
    000000e1: 	movq	%rbx, (%rdx)
.Ltmp308:
    000000e4: 	addl	$0x1, %esi
    000000e7: 	cmpl	%r9d, %esi
    000000ea: 	jne	.Ltmp309 # Offset: 234
.Ltmp305:
    000000ec: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000f3: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000000fa: 	subq	$0x20, %rax
    000000fe: 	cmpq	%rax, %r14
    00000101: 	je	.Ltmp310 # Offset: 257
    00000107: 	leaq	0x10(%r14), %rdi
    0000010b: 	movq	0x8(%r12), %rbx
    00000110: 	movq	%rdi, (%r14)
    00000113: 	movq	(%r12), %r15
    00000117: 	movq	%r15, %rax
    0000011a: 	addq	%rbx, %rax
    0000011d: 	je	.Ltmp311 # Offset: 285
    0000011f: 	testq	%r15, %r15
    00000122: 	je	.Ltmp312 # Offset: 290
.Ltmp311:
    00000128: 	movq	%rbx, (%rsp)
    0000012c: 	cmpq	$0xf, %rbx
    00000130: 	ja	.Ltmp313 # Offset: 304
    00000136: 	cmpq	$0x1, %rbx
    0000013a: 	jne	.Ltmp314 # Offset: 314
    00000140: 	movzbl	(%r15), %eax
    00000144: 	movb	%al, 0x10(%r14)
.Ltmp322:
    00000148: 	movq	%rbx, 0x8(%r14)
    0000014c: 	movb	$0x0, (%rdi,%rbx)
    00000150: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000157: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000015e: 	addq	$0x20, %rax
    00000162: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000169: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000170: 	je	.Ltmp315 # Offset: 368
.Ltmp323:
    00000176: 	movq	-0x20(%rax), %r14
    0000017a: 	callq	clock@PLT # Offset: 378
    0000017f: 	pxor	%xmm0, %xmm0
    00000183: 	movq	%rax, end_time(%rip)
    0000018a: 	movq	%r14, %rdi
    0000018d: 	subq	start_time(%rip), %rax
    00000194: 	cvtsi2sd	%rax, %xmm0
    00000199: 	divsd	DATAat0x12360(%rip), %xmm0
    000001a1: 	callq	_Z13record_resultdPKc # Offset: 417
    000001a6: 	leal	(,%rbp,8), %edx
    000001ad: 	movslq	%edx, %rdx
    000001b0: 	leaq	(%r13,%rdx), %rcx
    000001b5: 	cmpq	%rcx, %r13
    000001b8: 	je	.Ltmp316 # Offset: 440
    000001be: 	leaq	-0x1(%rdx), %rsi
    000001c2: 	movq	%r13, %rax
    000001c5: 	cmpq	$0xe, %rsi
    000001c9: 	jbe	.Ltmp317 # Offset: 457
    000001cf: 	pxor	%xmm6, %xmm6
    000001d3: 	pxor	%xmm5, %xmm5
    000001d7: 	pxor	%xmm4, %xmm4
    000001db: 	movq	%rdx, %rsi
    000001de: 	andq	$-0x10, %rsi
    000001e2: 	pxor	%xmm3, %xmm3
    000001e6: 	addq	%r13, %rsi
    000001e9: 	nopl	(%rax) # Size: 7
.Ltmp318:
    000001f0: 	movdqu	(%rax), %xmm1
    000001f4: 	addq	$0x10, %rax
    000001f8: 	movdqa	%xmm1, %xmm0
    000001fc: 	punpckhbw	%xmm5, %xmm1
    00000200: 	punpcklbw	%xmm5, %xmm0
    00000204: 	movdqa	%xmm1, %xmm2
    00000208: 	punpckhwd	%xmm4, %xmm1
    0000020c: 	movdqa	%xmm0, %xmm7
    00000210: 	punpckhwd	%xmm4, %xmm0
    00000214: 	punpcklwd	%xmm4, %xmm2
    00000218: 	movdqa	%xmm0, %xmm8
    0000021d: 	punpcklwd	%xmm4, %xmm7
    00000221: 	punpckhdq	%xmm3, %xmm0
    00000225: 	punpckldq	%xmm3, %xmm8
    0000022a: 	paddq	%xmm8, %xmm0
    0000022f: 	movdqa	%xmm7, %xmm8
    00000234: 	punpckhdq	%xmm3, %xmm7
    00000238: 	punpckldq	%xmm3, %xmm8
    0000023d: 	paddq	%xmm8, %xmm7
    00000242: 	paddq	%xmm7, %xmm0
    00000246: 	movdqa	%xmm2, %xmm7
    0000024a: 	punpckhdq	%xmm3, %xmm2
    0000024e: 	punpckldq	%xmm3, %xmm7
    00000252: 	paddq	%xmm7, %xmm2
    00000256: 	movdqa	%xmm1, %xmm7
    0000025a: 	punpckhdq	%xmm3, %xmm1
    0000025e: 	punpckldq	%xmm3, %xmm7
    00000262: 	paddq	%xmm6, %xmm1
    00000266: 	paddq	%xmm7, %xmm2
    0000026a: 	paddq	%xmm2, %xmm0
    0000026e: 	movdqa	%xmm0, %xmm6
    00000272: 	paddq	%xmm1, %xmm6
    00000276: 	cmpq	%rax, %rsi
    00000279: 	jne	.Ltmp318 # Offset: 633
    0000027f: 	movdqa	%xmm6, %xmm0
    00000283: 	movq	%rdx, %rsi
    00000286: 	psrldq	$0x8, %xmm0
    0000028b: 	andq	$-0x10, %rsi
    0000028f: 	paddq	%xmm0, %xmm6
    00000293: 	addq	%rsi, %r13
    00000296: 	movq	%xmm6, %rax
    0000029b: 	cmpq	%rsi, %rdx
    0000029e: 	je	.Ltmp319 # Offset: 670
.Ltmp325:
    000002a4: 	movzbl	(%r13), %esi
    000002a9: 	addq	%rsi, %rax
    000002ac: 	leaq	0x1(%r13), %rsi
    000002b0: 	cmpq	%rsi, %rcx
    000002b3: 	je	.Ltmp319 # Offset: 691
    000002b9: 	movzbl	0x1(%r13), %esi
    000002be: 	addq	%rsi, %rax
    000002c1: 	leaq	0x2(%r13), %rsi
    000002c5: 	cmpq	%rsi, %rcx
    000002c8: 	je	.Ltmp319 # Offset: 712
    000002ce: 	movzbl	0x2(%r13), %esi
    000002d3: 	addq	%rsi, %rax
    000002d6: 	leaq	0x3(%r13), %rsi
    000002da: 	cmpq	%rsi, %rcx
    000002dd: 	je	.Ltmp319 # Offset: 733
    000002e3: 	movzbl	0x3(%r13), %esi
    000002e8: 	addq	%rsi, %rax
    000002eb: 	leaq	0x4(%r13), %rsi
    000002ef: 	cmpq	%rsi, %rcx
    000002f2: 	je	.Ltmp319 # Offset: 754
    000002f8: 	movzbl	0x4(%r13), %esi
    000002fd: 	addq	%rsi, %rax
    00000300: 	leaq	0x5(%r13), %rsi
    00000304: 	cmpq	%rsi, %rcx
    00000307: 	je	.Ltmp319 # Offset: 775
    0000030d: 	movzbl	0x5(%r13), %esi
    00000312: 	addq	%rsi, %rax
    00000315: 	leaq	0x6(%r13), %rsi
    00000319: 	cmpq	%rsi, %rcx
    0000031c: 	je	.Ltmp319 # Offset: 796
    00000322: 	movzbl	0x6(%r13), %esi
    00000327: 	addq	%rsi, %rax
    0000032a: 	leaq	0x7(%r13), %rsi
    0000032e: 	cmpq	%rsi, %rcx
    00000331: 	je	.Ltmp319 # Offset: 817
    00000337: 	movzbl	0x7(%r13), %esi
    0000033c: 	addq	%rsi, %rax
    0000033f: 	leaq	0x8(%r13), %rsi
    00000343: 	cmpq	%rsi, %rcx
    00000346: 	je	.Ltmp319 # Offset: 838
    00000348: 	movzbl	0x8(%r13), %esi
    0000034d: 	addq	%rsi, %rax
    00000350: 	leaq	0x9(%r13), %rsi
    00000354: 	cmpq	%rsi, %rcx
    00000357: 	je	.Ltmp319 # Offset: 855
    00000359: 	movzbl	0x9(%r13), %esi
    0000035e: 	addq	%rsi, %rax
    00000361: 	leaq	0xa(%r13), %rsi
    00000365: 	cmpq	%rsi, %rcx
    00000368: 	je	.Ltmp319 # Offset: 872
    0000036a: 	movzbl	0xa(%r13), %esi
    0000036f: 	addq	%rsi, %rax
    00000372: 	leaq	0xb(%r13), %rsi
    00000376: 	cmpq	%rsi, %rcx
    00000379: 	je	.Ltmp319 # Offset: 889
    0000037b: 	movzbl	0xb(%r13), %esi
    00000380: 	addq	%rsi, %rax
    00000383: 	leaq	0xc(%r13), %rsi
    00000387: 	cmpq	%rsi, %rcx
    0000038a: 	je	.Ltmp319 # Offset: 906
    0000038c: 	movzbl	0xc(%r13), %esi
    00000391: 	addq	%rsi, %rax
    00000394: 	leaq	0xd(%r13), %rsi
    00000398: 	cmpq	%rsi, %rcx
    0000039b: 	je	.Ltmp319 # Offset: 923
    0000039d: 	movzbl	0xd(%r13), %esi
    000003a2: 	addq	%rsi, %rax
    000003a5: 	leaq	0xe(%r13), %rsi
    000003a9: 	cmpq	%rsi, %rcx
    000003ac: 	je	.Ltmp319 # Offset: 940
    000003ae: 	movzbl	0xe(%r13), %ecx
    000003b3: 	addq	%rcx, %rax
    000003b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp319:
    000003c0: 	movzbl	init_value(%rip), %ecx
    000003c7: 	imulq	%rcx, %rdx
    000003cb: 	cmpq	%rax, %rdx
    000003ce: 	je	.Ltmp320 # Offset: 974
    000003d0: 	movq	0x8(%rsp), %rax
    000003d5: 	subq	%fs:0x28, %rax
    000003de: 	jne	.Ltmp321 # Offset: 990
    000003e4: 	movq	(%r12), %rdx
    000003e8: 	addq	$0x18, %rsp
    000003ec: 	leaq	DATAat0x12278(%rip), %rsi
    000003f3: 	xorl	%eax, %eax
    000003f5: 	popq	%rbx
    000003f6: 	movl	$0x1, %edi
    000003fb: 	popq	%rbp
    000003fc: 	popq	%r12
    000003fe: 	popq	%r13
    00000400: 	popq	%r14
    00000402: 	popq	%r15
    00000404: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1028
.Ltmp313:
    00000409: 	movq	%r14, %rdi
    0000040c: 	movq	%rsp, %rsi
    0000040f: 	xorl	%edx, %edx
    00000411: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1041
    00000416: 	movq	%rax, (%r14)
    00000419: 	movq	%rax, %rdi
    0000041c: 	movq	(%rsp), %rax
    00000420: 	movq	%rax, 0x10(%r14)
.Ltmp324:
    00000424: 	movq	%rbx, %rdx
    00000427: 	movq	%r15, %rsi
    0000042a: 	callq	memcpy@PLT # Offset: 1066
    0000042f: 	movq	(%rsp), %rbx
    00000433: 	movq	(%r14), %rdi
    00000436: 	jmp	.Ltmp322 # Offset: 1078
.Ltmp320:
    0000043b: 	movq	0x8(%rsp), %rax
    00000440: 	subq	%fs:0x28, %rax
    00000449: 	jne	.Ltmp321 # Offset: 1097
    0000044b: 	addq	$0x18, %rsp
    0000044f: 	popq	%rbx
    00000450: 	popq	%rbp
    00000451: 	popq	%r12
    00000453: 	popq	%r13
    00000455: 	popq	%r14
    00000457: 	popq	%r15
    00000459: 	retq # Offset: 1113
.Ltmp310:
    0000045a: 	movq	%r12, %rsi
    0000045d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000464: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1124
    00000469: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000470: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000477: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000047e: 	jne	.Ltmp323 # Offset: 1150
.Ltmp315:
    00000484: 	movq	-0x8(%rdx), %rax
    00000488: 	addq	$0x200, %rax
    0000048e: 	jmp	.Ltmp323 # Offset: 1166
.Ltmp314:
    00000493: 	testq	%rbx, %rbx
    00000496: 	je	.Ltmp322 # Offset: 1174
    0000049c: 	jmp	.Ltmp324 # Offset: 1180
    0000049e: 	nop # Size: 2
.Ltmp316:
    000004a0: 	xorl	%eax, %eax
    000004a2: 	jmp	.Ltmp319 # Offset: 1186
.Ltmp317:
    000004a7: 	xorl	%eax, %eax
    000004a9: 	jmp	.Ltmp325 # Offset: 1193
.Ltmp321:
    000004ae: 	callq	__stack_chk_fail@PLT # Offset: 1198
.Ltmp312:
    000004b3: 	leaq	DATAat0x12008(%rip), %rdi
    000004ba: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1210
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_std_fillImEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z13test_std_fillIjEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x5f60
  Size        : 0x4ef
  MaxSize     : 0x4f0
  Offset      : 0x5f60
  Section     : .text
  Orc Section : .local.text._Z13test_std_fillIjEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rcx, %rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	%esi, %ebx
    00000016: 	subq	$0x18, %rsp
    0000001a: 	movq	%fs:0x28, %rax
    00000023: 	movq	%rax, 0x8(%rsp)
    00000028: 	xorl	%eax, %eax
    0000002a: 	movzbl	%dl, %eax
    0000002d: 	movl	%eax, %r13d
    00000030: 	shll	$0x8, %r13d
    00000034: 	addl	%eax, %r13d
    00000037: 	shll	$0x8, %r13d
    0000003b: 	addl	%eax, %r13d
    0000003e: 	shll	$0x8, %r13d
    00000042: 	addl	%eax, %r13d
    00000045: 	callq	clock@PLT # Offset: 69
    0000004a: 	movq	%rax, start_time(%rip)
    00000051: 	movl	iterations(%rip), %eax
    00000057: 	testl	%eax, %eax
    00000059: 	jle	.Ltmp326 # Offset: 89
    0000005f: 	movslq	%ebx, %rdi
    00000062: 	shlq	$0x2, %rdi
    00000066: 	leaq	(%r12,%rdi), %r8
    0000006a: 	cmpq	%r12, %r8
    0000006d: 	je	.Ltmp326 # Offset: 109
    00000073: 	subq	$0x4, %rdi
    00000077: 	movd	%r13d, %xmm5
    0000007c: 	movq	%rdi, %r9
    0000007f: 	pshufd	$0x0, %xmm5, %xmm0
    00000084: 	shrq	$0x2, %r9
    00000088: 	addq	$0x1, %r9
    0000008c: 	movq	%r9, %rdx
    0000008f: 	movq	%r9, %r10
    00000092: 	shrq	$0x2, %rdx
    00000096: 	andq	$-0x4, %r10
    0000009a: 	shlq	$0x4, %rdx
    0000009e: 	leaq	(%r12,%r10,4), %rsi
    000000a2: 	addq	%r12, %rdx
    000000a5: 	cmpq	$0x8, %rdi
    000000a9: 	cmovbeq	%r12, %rsi
    000000ad: 	xorl	%ecx, %ecx
    000000af: 	leaq	0x4(%rsi), %r11
    000000b3: 	leaq	0x8(%rsi), %r14
    000000b7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp330:
    000000c0: 	cmpq	$0x8, %rdi
    000000c4: 	jbe	.Ltmp327 # Offset: 196
    000000c6: 	movq	%r12, %rax
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp328:
    000000d0: 	movups	%xmm0, (%rax)
    000000d3: 	addq	$0x10, %rax
    000000d7: 	cmpq	%rdx, %rax
    000000da: 	jne	.Ltmp328 # Offset: 218
    000000dc: 	cmpq	%r10, %r9
    000000df: 	je	.Ltmp329 # Offset: 223
.Ltmp327:
    000000e1: 	movl	%r13d, (%rsi)
    000000e4: 	cmpq	%r11, %r8
    000000e7: 	je	.Ltmp329 # Offset: 231
    000000e9: 	movl	%r13d, 0x4(%rsi)
    000000ed: 	cmpq	%r14, %r8
    000000f0: 	je	.Ltmp329 # Offset: 240
    000000f2: 	movl	%r13d, 0x8(%rsi)
.Ltmp329:
    000000f6: 	addl	$0x1, %ecx
    000000f9: 	cmpl	iterations(%rip), %ecx
    000000ff: 	jl	.Ltmp330 # Offset: 255
.Ltmp326:
    00000101: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000108: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    0000010f: 	subq	$0x20, %rax
    00000113: 	cmpq	%rax, %r14
    00000116: 	je	.Ltmp331 # Offset: 278
    0000011c: 	leaq	0x10(%r14), %rdi
    00000120: 	movq	0x8(%rbp), %r13
    00000124: 	movq	%rdi, (%r14)
    00000127: 	movq	(%rbp), %r15
    0000012b: 	movq	%r15, %rax
    0000012e: 	addq	%r13, %rax
    00000131: 	je	.Ltmp332 # Offset: 305
    00000133: 	testq	%r15, %r15
    00000136: 	je	.Ltmp333 # Offset: 310
.Ltmp332:
    0000013c: 	movq	%r13, (%rsp)
    00000140: 	cmpq	$0xf, %r13
    00000144: 	ja	.Ltmp334 # Offset: 324
    0000014a: 	cmpq	$0x1, %r13
    0000014e: 	jne	.Ltmp335 # Offset: 334
    00000154: 	movzbl	(%r15), %eax
    00000158: 	movb	%al, 0x10(%r14)
.Ltmp343:
    0000015c: 	movq	%r13, 0x8(%r14)
    00000160: 	movb	$0x0, (%rdi,%r13)
    00000165: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000016c: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000173: 	addq	$0x20, %rax
    00000177: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000017e: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000185: 	je	.Ltmp336 # Offset: 389
.Ltmp344:
    0000018b: 	movq	-0x20(%rax), %r13
    0000018f: 	callq	clock@PLT # Offset: 399
    00000194: 	pxor	%xmm0, %xmm0
    00000198: 	movq	%rax, end_time(%rip)
    0000019f: 	movq	%r13, %rdi
    000001a2: 	subq	start_time(%rip), %rax
    000001a9: 	cvtsi2sd	%rax, %xmm0
    000001ae: 	divsd	DATAat0x12360(%rip), %xmm0
    000001b6: 	callq	_Z13record_resultdPKc # Offset: 438
    000001bb: 	leal	(,%rbx,4), %edx
    000001c2: 	movslq	%edx, %rdx
    000001c5: 	leaq	(%r12,%rdx), %rcx
    000001c9: 	cmpq	%rcx, %r12
    000001cc: 	je	.Ltmp337 # Offset: 460
    000001d2: 	leaq	-0x1(%rdx), %rsi
    000001d6: 	movq	%r12, %rax
    000001d9: 	cmpq	$0xe, %rsi
    000001dd: 	jbe	.Ltmp338 # Offset: 477
    000001e3: 	pxor	%xmm6, %xmm6
    000001e7: 	pxor	%xmm5, %xmm5
    000001eb: 	pxor	%xmm4, %xmm4
    000001ef: 	movq	%rdx, %rsi
    000001f2: 	andq	$-0x10, %rsi
    000001f6: 	pxor	%xmm3, %xmm3
    000001fa: 	addq	%r12, %rsi
    000001fd: 	nopl	(%rax) # Size: 3
.Ltmp339:
    00000200: 	movdqu	(%rax), %xmm1
    00000204: 	addq	$0x10, %rax
    00000208: 	movdqa	%xmm1, %xmm0
    0000020c: 	punpckhbw	%xmm5, %xmm1
    00000210: 	punpcklbw	%xmm5, %xmm0
    00000214: 	movdqa	%xmm1, %xmm2
    00000218: 	punpckhwd	%xmm4, %xmm1
    0000021c: 	movdqa	%xmm0, %xmm7
    00000220: 	punpckhwd	%xmm4, %xmm0
    00000224: 	punpcklwd	%xmm4, %xmm2
    00000228: 	movdqa	%xmm0, %xmm8
    0000022d: 	punpcklwd	%xmm4, %xmm7
    00000231: 	punpckhdq	%xmm3, %xmm0
    00000235: 	punpckldq	%xmm3, %xmm8
    0000023a: 	paddq	%xmm8, %xmm0
    0000023f: 	movdqa	%xmm7, %xmm8
    00000244: 	punpckhdq	%xmm3, %xmm7
    00000248: 	punpckldq	%xmm3, %xmm8
    0000024d: 	paddq	%xmm8, %xmm7
    00000252: 	paddq	%xmm7, %xmm0
    00000256: 	movdqa	%xmm2, %xmm7
    0000025a: 	punpckhdq	%xmm3, %xmm2
    0000025e: 	punpckldq	%xmm3, %xmm7
    00000262: 	paddq	%xmm7, %xmm2
    00000266: 	movdqa	%xmm1, %xmm7
    0000026a: 	punpckhdq	%xmm3, %xmm1
    0000026e: 	punpckldq	%xmm3, %xmm7
    00000272: 	paddq	%xmm6, %xmm1
    00000276: 	paddq	%xmm7, %xmm2
    0000027a: 	paddq	%xmm2, %xmm0
    0000027e: 	movdqa	%xmm0, %xmm6
    00000282: 	paddq	%xmm1, %xmm6
    00000286: 	cmpq	%rax, %rsi
    00000289: 	jne	.Ltmp339 # Offset: 649
    0000028f: 	movdqa	%xmm6, %xmm0
    00000293: 	movq	%rdx, %rsi
    00000296: 	psrldq	$0x8, %xmm0
    0000029b: 	andq	$-0x10, %rsi
    0000029f: 	paddq	%xmm0, %xmm6
    000002a3: 	addq	%rsi, %r12
    000002a6: 	movq	%xmm6, %rax
    000002ab: 	cmpq	%rsi, %rdx
    000002ae: 	je	.Ltmp340 # Offset: 686
.Ltmp346:
    000002b4: 	movzbl	(%r12), %esi
    000002b9: 	addq	%rsi, %rax
    000002bc: 	leaq	0x1(%r12), %rsi
    000002c1: 	cmpq	%rsi, %rcx
    000002c4: 	je	.Ltmp340 # Offset: 708
    000002ca: 	movzbl	0x1(%r12), %esi
    000002d0: 	addq	%rsi, %rax
    000002d3: 	leaq	0x2(%r12), %rsi
    000002d8: 	cmpq	%rsi, %rcx
    000002db: 	je	.Ltmp340 # Offset: 731
    000002e1: 	movzbl	0x2(%r12), %esi
    000002e7: 	addq	%rsi, %rax
    000002ea: 	leaq	0x3(%r12), %rsi
    000002ef: 	cmpq	%rsi, %rcx
    000002f2: 	je	.Ltmp340 # Offset: 754
    000002f8: 	movzbl	0x3(%r12), %esi
    000002fe: 	addq	%rsi, %rax
    00000301: 	leaq	0x4(%r12), %rsi
    00000306: 	cmpq	%rsi, %rcx
    00000309: 	je	.Ltmp340 # Offset: 777
    0000030f: 	movzbl	0x4(%r12), %esi
    00000315: 	addq	%rsi, %rax
    00000318: 	leaq	0x5(%r12), %rsi
    0000031d: 	cmpq	%rsi, %rcx
    00000320: 	je	.Ltmp340 # Offset: 800
    00000326: 	movzbl	0x5(%r12), %esi
    0000032c: 	addq	%rsi, %rax
    0000032f: 	leaq	0x6(%r12), %rsi
    00000334: 	cmpq	%rsi, %rcx
    00000337: 	je	.Ltmp340 # Offset: 823
    0000033d: 	movzbl	0x6(%r12), %esi
    00000343: 	addq	%rsi, %rax
    00000346: 	leaq	0x7(%r12), %rsi
    0000034b: 	cmpq	%rsi, %rcx
    0000034e: 	je	.Ltmp340 # Offset: 846
    00000354: 	movzbl	0x7(%r12), %esi
    0000035a: 	addq	%rsi, %rax
    0000035d: 	leaq	0x8(%r12), %rsi
    00000362: 	cmpq	%rsi, %rcx
    00000365: 	je	.Ltmp340 # Offset: 869
    0000036b: 	movzbl	0x8(%r12), %esi
    00000371: 	addq	%rsi, %rax
    00000374: 	leaq	0x9(%r12), %rsi
    00000379: 	cmpq	%rsi, %rcx
    0000037c: 	je	.Ltmp340 # Offset: 892
    0000037e: 	movzbl	0x9(%r12), %esi
    00000384: 	addq	%rsi, %rax
    00000387: 	leaq	0xa(%r12), %rsi
    0000038c: 	cmpq	%rsi, %rcx
    0000038f: 	je	.Ltmp340 # Offset: 911
    00000391: 	movzbl	0xa(%r12), %esi
    00000397: 	addq	%rsi, %rax
    0000039a: 	leaq	0xb(%r12), %rsi
    0000039f: 	cmpq	%rsi, %rcx
    000003a2: 	je	.Ltmp340 # Offset: 930
    000003a4: 	movzbl	0xb(%r12), %esi
    000003aa: 	addq	%rsi, %rax
    000003ad: 	leaq	0xc(%r12), %rsi
    000003b2: 	cmpq	%rsi, %rcx
    000003b5: 	je	.Ltmp340 # Offset: 949
    000003b7: 	movzbl	0xc(%r12), %esi
    000003bd: 	addq	%rsi, %rax
    000003c0: 	leaq	0xd(%r12), %rsi
    000003c5: 	cmpq	%rsi, %rcx
    000003c8: 	je	.Ltmp340 # Offset: 968
    000003ca: 	movzbl	0xd(%r12), %esi
    000003d0: 	addq	%rsi, %rax
    000003d3: 	leaq	0xe(%r12), %rsi
    000003d8: 	cmpq	%rsi, %rcx
    000003db: 	je	.Ltmp340 # Offset: 987
    000003dd: 	movzbl	0xe(%r12), %ecx
    000003e3: 	addq	%rcx, %rax
    000003e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp340:
    000003f0: 	movzbl	init_value(%rip), %ecx
    000003f7: 	imulq	%rcx, %rdx
    000003fb: 	cmpq	%rax, %rdx
    000003fe: 	je	.Ltmp341 # Offset: 1022
    00000400: 	movq	0x8(%rsp), %rax
    00000405: 	subq	%fs:0x28, %rax
    0000040e: 	jne	.Ltmp342 # Offset: 1038
    00000414: 	movq	(%rbp), %rdx
    00000418: 	addq	$0x18, %rsp
    0000041c: 	leaq	DATAat0x12278(%rip), %rsi
    00000423: 	xorl	%eax, %eax
    00000425: 	popq	%rbx
    00000426: 	movl	$0x1, %edi
    0000042b: 	popq	%rbp
    0000042c: 	popq	%r12
    0000042e: 	popq	%r13
    00000430: 	popq	%r14
    00000432: 	popq	%r15
    00000434: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1076
.Ltmp334:
    00000439: 	movq	%r14, %rdi
    0000043c: 	movq	%rsp, %rsi
    0000043f: 	xorl	%edx, %edx
    00000441: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1089
    00000446: 	movq	%rax, (%r14)
    00000449: 	movq	%rax, %rdi
    0000044c: 	movq	(%rsp), %rax
    00000450: 	movq	%rax, 0x10(%r14)
.Ltmp345:
    00000454: 	movq	%r13, %rdx
    00000457: 	movq	%r15, %rsi
    0000045a: 	callq	memcpy@PLT # Offset: 1114
    0000045f: 	movq	(%rsp), %r13
    00000463: 	movq	(%r14), %rdi
    00000466: 	jmp	.Ltmp343 # Offset: 1126
.Ltmp341:
    0000046b: 	movq	0x8(%rsp), %rax
    00000470: 	subq	%fs:0x28, %rax
    00000479: 	jne	.Ltmp342 # Offset: 1145
    0000047b: 	addq	$0x18, %rsp
    0000047f: 	popq	%rbx
    00000480: 	popq	%rbp
    00000481: 	popq	%r12
    00000483: 	popq	%r13
    00000485: 	popq	%r14
    00000487: 	popq	%r15
    00000489: 	retq # Offset: 1161
.Ltmp331:
    0000048a: 	movq	%rbp, %rsi
    0000048d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000494: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1172
    00000499: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000004a0: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000004a7: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000004ae: 	jne	.Ltmp344 # Offset: 1198
.Ltmp336:
    000004b4: 	movq	-0x8(%rdx), %rax
    000004b8: 	addq	$0x200, %rax
    000004be: 	jmp	.Ltmp344 # Offset: 1214
.Ltmp335:
    000004c3: 	testq	%r13, %r13
    000004c6: 	je	.Ltmp343 # Offset: 1222
    000004cc: 	jmp	.Ltmp345 # Offset: 1228
    000004ce: 	nop # Size: 2
.Ltmp337:
    000004d0: 	xorl	%eax, %eax
    000004d2: 	jmp	.Ltmp340 # Offset: 1234
.Ltmp338:
    000004d7: 	xorl	%eax, %eax
    000004d9: 	jmp	.Ltmp346 # Offset: 1241
.Ltmp342:
    000004de: 	callq	__stack_chk_fail@PLT # Offset: 1246
.Ltmp333:
    000004e3: 	leaq	DATAat0x12008(%rip), %rdi
    000004ea: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1258
DWARF CFI Instructions:
    <empty>
End of Function "_Z13test_std_fillIjEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_iterator_fillImEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x6450
  Size        : 0x4bf
  MaxSize     : 0x4c0
  Offset      : 0x6450
  Section     : .text
  Orc Section : .local.text._Z18test_iterator_fillImEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movslq	%esi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movq	%rdi, %r13
    00000010: 	pushq	%r12
    00000012: 	movq	%rcx, %r12
    00000015: 	pushq	%rbp
    00000016: 	movq	%r14, %rbp
    00000019: 	shlq	$0x3, %r14
    0000001d: 	pushq	%rbx
    0000001e: 	subq	$0x18, %rsp
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x8(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	movzbl	%dl, %eax
    00000035: 	movq	%rax, %rbx
    00000038: 	shlq	$0x8, %rbx
    0000003c: 	addq	%rax, %rbx
    0000003f: 	shlq	$0x8, %rbx
    00000043: 	addq	%rax, %rbx
    00000046: 	shlq	$0x8, %rbx
    0000004a: 	addq	%rax, %rbx
    0000004d: 	shlq	$0x8, %rbx
    00000051: 	addq	%rax, %rbx
    00000054: 	shlq	$0x8, %rbx
    00000058: 	addq	%rax, %rbx
    0000005b: 	shlq	$0x8, %rbx
    0000005f: 	addq	%rax, %rbx
    00000062: 	shlq	$0x8, %rbx
    00000066: 	addq	%rax, %rbx
    00000069: 	callq	clock@PLT # Offset: 105
    0000006e: 	movl	iterations(%rip), %r8d
    00000075: 	movq	%rax, start_time(%rip)
    0000007c: 	testl	%r8d, %r8d
    0000007f: 	jle	.Ltmp347 # Offset: 127
    00000081: 	testq	%r14, %r14
    00000084: 	je	.Ltmp347 # Offset: 132
    00000086: 	leaq	-0x8(%r14), %rdi
    0000008a: 	movq	%rbx, %xmm0
    0000008f: 	shrq	$0x3, %rdi
    00000093: 	punpcklqdq	%xmm0, %xmm0
    00000097: 	addq	$0x1, %rdi
    0000009b: 	movq	%rdi, %rcx
    0000009e: 	movq	%rdi, %r9
    000000a1: 	shrq	%rcx
    000000a4: 	andq	$-0x2, %r9
    000000a8: 	shlq	$0x4, %rcx
    000000ac: 	leaq	(%r13,%r9,8), %rdx
    000000b1: 	addq	%r13, %rcx
    000000b4: 	cmpq	$0x8, %r14
    000000b8: 	cmoveq	%r13, %rdx
    000000bc: 	xorl	%esi, %esi
    000000be: 	nop # Size: 2
.Ltmp351:
    000000c0: 	movq	%r13, %rax
    000000c3: 	cmpq	$0x8, %r14
    000000c7: 	je	.Ltmp348 # Offset: 199
    000000c9: 	nopl	(%rax) # Size: 7
.Ltmp349:
    000000d0: 	movups	%xmm0, (%rax)
    000000d3: 	addq	$0x10, %rax
    000000d7: 	cmpq	%rax, %rcx
    000000da: 	jne	.Ltmp349 # Offset: 218
    000000dc: 	cmpq	%r9, %rdi
    000000df: 	je	.Ltmp350 # Offset: 223
.Ltmp348:
    000000e1: 	movq	%rbx, (%rdx)
.Ltmp350:
    000000e4: 	addl	$0x1, %esi
    000000e7: 	cmpl	%r8d, %esi
    000000ea: 	jne	.Ltmp351 # Offset: 234
.Ltmp347:
    000000ec: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000f3: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    000000fa: 	subq	$0x20, %rax
    000000fe: 	cmpq	%rax, %rbx
    00000101: 	je	.Ltmp352 # Offset: 257
    00000107: 	leaq	0x10(%rbx), %rdi
    0000010b: 	movq	0x8(%r12), %r14
    00000110: 	movq	%rdi, (%rbx)
    00000113: 	movq	(%r12), %r15
    00000117: 	movq	%r15, %rax
    0000011a: 	addq	%r14, %rax
    0000011d: 	je	.Ltmp353 # Offset: 285
    0000011f: 	testq	%r15, %r15
    00000122: 	je	.Ltmp354 # Offset: 290
.Ltmp353:
    00000128: 	movq	%r14, (%rsp)
    0000012c: 	cmpq	$0xf, %r14
    00000130: 	ja	.Ltmp355 # Offset: 304
    00000136: 	cmpq	$0x1, %r14
    0000013a: 	jne	.Ltmp356 # Offset: 314
    00000140: 	movzbl	(%r15), %eax
    00000144: 	movb	%al, 0x10(%rbx)
.Ltmp364:
    00000147: 	movq	%r14, 0x8(%rbx)
    0000014b: 	movb	$0x0, (%rdi,%r14)
    00000150: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000157: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000015e: 	addq	$0x20, %rax
    00000162: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000169: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000170: 	je	.Ltmp357 # Offset: 368
.Ltmp365:
    00000176: 	movq	-0x20(%rax), %r14
    0000017a: 	callq	clock@PLT # Offset: 378
    0000017f: 	pxor	%xmm0, %xmm0
    00000183: 	movq	%rax, end_time(%rip)
    0000018a: 	movq	%r14, %rdi
    0000018d: 	subq	start_time(%rip), %rax
    00000194: 	cvtsi2sd	%rax, %xmm0
    00000199: 	divsd	DATAat0x12360(%rip), %xmm0
    000001a1: 	callq	_Z13record_resultdPKc # Offset: 417
    000001a6: 	leal	(,%rbp,8), %edx
    000001ad: 	movslq	%edx, %rdx
    000001b0: 	leaq	(%r13,%rdx), %rcx
    000001b5: 	cmpq	%rcx, %r13
    000001b8: 	je	.Ltmp358 # Offset: 440
    000001be: 	leaq	-0x1(%rdx), %rsi
    000001c2: 	movq	%r13, %rax
    000001c5: 	cmpq	$0xe, %rsi
    000001c9: 	jbe	.Ltmp359 # Offset: 457
    000001cf: 	pxor	%xmm6, %xmm6
    000001d3: 	pxor	%xmm5, %xmm5
    000001d7: 	pxor	%xmm4, %xmm4
    000001db: 	movq	%rdx, %rsi
    000001de: 	andq	$-0x10, %rsi
    000001e2: 	pxor	%xmm3, %xmm3
    000001e6: 	addq	%r13, %rsi
    000001e9: 	nopl	(%rax) # Size: 7
.Ltmp360:
    000001f0: 	movdqu	(%rax), %xmm1
    000001f4: 	addq	$0x10, %rax
    000001f8: 	movdqa	%xmm1, %xmm0
    000001fc: 	punpckhbw	%xmm5, %xmm1
    00000200: 	punpcklbw	%xmm5, %xmm0
    00000204: 	movdqa	%xmm1, %xmm2
    00000208: 	punpckhwd	%xmm4, %xmm1
    0000020c: 	movdqa	%xmm0, %xmm7
    00000210: 	punpckhwd	%xmm4, %xmm0
    00000214: 	punpcklwd	%xmm4, %xmm2
    00000218: 	movdqa	%xmm0, %xmm8
    0000021d: 	punpcklwd	%xmm4, %xmm7
    00000221: 	punpckhdq	%xmm3, %xmm0
    00000225: 	punpckldq	%xmm3, %xmm8
    0000022a: 	paddq	%xmm8, %xmm0
    0000022f: 	movdqa	%xmm7, %xmm8
    00000234: 	punpckhdq	%xmm3, %xmm7
    00000238: 	punpckldq	%xmm3, %xmm8
    0000023d: 	paddq	%xmm8, %xmm7
    00000242: 	paddq	%xmm7, %xmm0
    00000246: 	movdqa	%xmm2, %xmm7
    0000024a: 	punpckhdq	%xmm3, %xmm2
    0000024e: 	punpckldq	%xmm3, %xmm7
    00000252: 	paddq	%xmm7, %xmm2
    00000256: 	movdqa	%xmm1, %xmm7
    0000025a: 	punpckhdq	%xmm3, %xmm1
    0000025e: 	punpckldq	%xmm3, %xmm7
    00000262: 	paddq	%xmm6, %xmm1
    00000266: 	paddq	%xmm7, %xmm2
    0000026a: 	paddq	%xmm2, %xmm0
    0000026e: 	movdqa	%xmm0, %xmm6
    00000272: 	paddq	%xmm1, %xmm6
    00000276: 	cmpq	%rax, %rsi
    00000279: 	jne	.Ltmp360 # Offset: 633
    0000027f: 	movdqa	%xmm6, %xmm0
    00000283: 	movq	%rdx, %rsi
    00000286: 	psrldq	$0x8, %xmm0
    0000028b: 	andq	$-0x10, %rsi
    0000028f: 	paddq	%xmm0, %xmm6
    00000293: 	addq	%rsi, %r13
    00000296: 	movq	%xmm6, %rax
    0000029b: 	cmpq	%rsi, %rdx
    0000029e: 	je	.Ltmp361 # Offset: 670
.Ltmp367:
    000002a4: 	movzbl	(%r13), %esi
    000002a9: 	addq	%rsi, %rax
    000002ac: 	leaq	0x1(%r13), %rsi
    000002b0: 	cmpq	%rsi, %rcx
    000002b3: 	je	.Ltmp361 # Offset: 691
    000002b9: 	movzbl	0x1(%r13), %esi
    000002be: 	addq	%rsi, %rax
    000002c1: 	leaq	0x2(%r13), %rsi
    000002c5: 	cmpq	%rsi, %rcx
    000002c8: 	je	.Ltmp361 # Offset: 712
    000002ce: 	movzbl	0x2(%r13), %esi
    000002d3: 	addq	%rsi, %rax
    000002d6: 	leaq	0x3(%r13), %rsi
    000002da: 	cmpq	%rsi, %rcx
    000002dd: 	je	.Ltmp361 # Offset: 733
    000002e3: 	movzbl	0x3(%r13), %esi
    000002e8: 	addq	%rsi, %rax
    000002eb: 	leaq	0x4(%r13), %rsi
    000002ef: 	cmpq	%rsi, %rcx
    000002f2: 	je	.Ltmp361 # Offset: 754
    000002f8: 	movzbl	0x4(%r13), %esi
    000002fd: 	addq	%rsi, %rax
    00000300: 	leaq	0x5(%r13), %rsi
    00000304: 	cmpq	%rsi, %rcx
    00000307: 	je	.Ltmp361 # Offset: 775
    0000030d: 	movzbl	0x5(%r13), %esi
    00000312: 	addq	%rsi, %rax
    00000315: 	leaq	0x6(%r13), %rsi
    00000319: 	cmpq	%rsi, %rcx
    0000031c: 	je	.Ltmp361 # Offset: 796
    00000322: 	movzbl	0x6(%r13), %esi
    00000327: 	addq	%rsi, %rax
    0000032a: 	leaq	0x7(%r13), %rsi
    0000032e: 	cmpq	%rsi, %rcx
    00000331: 	je	.Ltmp361 # Offset: 817
    00000337: 	movzbl	0x7(%r13), %esi
    0000033c: 	addq	%rsi, %rax
    0000033f: 	leaq	0x8(%r13), %rsi
    00000343: 	cmpq	%rsi, %rcx
    00000346: 	je	.Ltmp361 # Offset: 838
    00000348: 	movzbl	0x8(%r13), %esi
    0000034d: 	addq	%rsi, %rax
    00000350: 	leaq	0x9(%r13), %rsi
    00000354: 	cmpq	%rsi, %rcx
    00000357: 	je	.Ltmp361 # Offset: 855
    00000359: 	movzbl	0x9(%r13), %esi
    0000035e: 	addq	%rsi, %rax
    00000361: 	leaq	0xa(%r13), %rsi
    00000365: 	cmpq	%rsi, %rcx
    00000368: 	je	.Ltmp361 # Offset: 872
    0000036a: 	movzbl	0xa(%r13), %esi
    0000036f: 	addq	%rsi, %rax
    00000372: 	leaq	0xb(%r13), %rsi
    00000376: 	cmpq	%rsi, %rcx
    00000379: 	je	.Ltmp361 # Offset: 889
    0000037b: 	movzbl	0xb(%r13), %esi
    00000380: 	addq	%rsi, %rax
    00000383: 	leaq	0xc(%r13), %rsi
    00000387: 	cmpq	%rsi, %rcx
    0000038a: 	je	.Ltmp361 # Offset: 906
    0000038c: 	movzbl	0xc(%r13), %esi
    00000391: 	addq	%rsi, %rax
    00000394: 	leaq	0xd(%r13), %rsi
    00000398: 	cmpq	%rsi, %rcx
    0000039b: 	je	.Ltmp361 # Offset: 923
    0000039d: 	movzbl	0xd(%r13), %esi
    000003a2: 	addq	%rsi, %rax
    000003a5: 	leaq	0xe(%r13), %rsi
    000003a9: 	cmpq	%rsi, %rcx
    000003ac: 	je	.Ltmp361 # Offset: 940
    000003ae: 	movzbl	0xe(%r13), %ecx
    000003b3: 	addq	%rcx, %rax
    000003b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp361:
    000003c0: 	movzbl	init_value(%rip), %ecx
    000003c7: 	imulq	%rcx, %rdx
    000003cb: 	cmpq	%rax, %rdx
    000003ce: 	je	.Ltmp362 # Offset: 974
    000003d0: 	movq	0x8(%rsp), %rax
    000003d5: 	subq	%fs:0x28, %rax
    000003de: 	jne	.Ltmp363 # Offset: 990
    000003e4: 	movq	(%r12), %rdx
    000003e8: 	addq	$0x18, %rsp
    000003ec: 	leaq	DATAat0x12278(%rip), %rsi
    000003f3: 	xorl	%eax, %eax
    000003f5: 	popq	%rbx
    000003f6: 	movl	$0x1, %edi
    000003fb: 	popq	%rbp
    000003fc: 	popq	%r12
    000003fe: 	popq	%r13
    00000400: 	popq	%r14
    00000402: 	popq	%r15
    00000404: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1028
.Ltmp355:
    00000409: 	movq	%rbx, %rdi
    0000040c: 	movq	%rsp, %rsi
    0000040f: 	xorl	%edx, %edx
    00000411: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1041
    00000416: 	movq	%rax, (%rbx)
    00000419: 	movq	%rax, %rdi
    0000041c: 	movq	(%rsp), %rax
    00000420: 	movq	%rax, 0x10(%rbx)
.Ltmp366:
    00000424: 	movq	%r14, %rdx
    00000427: 	movq	%r15, %rsi
    0000042a: 	callq	memcpy@PLT # Offset: 1066
    0000042f: 	movq	(%rsp), %r14
    00000433: 	movq	(%rbx), %rdi
    00000436: 	jmp	.Ltmp364 # Offset: 1078
.Ltmp362:
    0000043b: 	movq	0x8(%rsp), %rax
    00000440: 	subq	%fs:0x28, %rax
    00000449: 	jne	.Ltmp363 # Offset: 1097
    0000044b: 	addq	$0x18, %rsp
    0000044f: 	popq	%rbx
    00000450: 	popq	%rbp
    00000451: 	popq	%r12
    00000453: 	popq	%r13
    00000455: 	popq	%r14
    00000457: 	popq	%r15
    00000459: 	retq # Offset: 1113
.Ltmp352:
    0000045a: 	movq	%r12, %rsi
    0000045d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000464: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1124
    00000469: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000470: 	cmpq	"_ZL7gLabels/1"+56(%rip), %rax
    00000477: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000047e: 	jne	.Ltmp365 # Offset: 1150
.Ltmp357:
    00000484: 	movq	-0x8(%rdx), %rax
    00000488: 	addq	$0x200, %rax
    0000048e: 	jmp	.Ltmp365 # Offset: 1166
.Ltmp356:
    00000493: 	testq	%r14, %r14
    00000496: 	je	.Ltmp364 # Offset: 1174
    0000049c: 	jmp	.Ltmp366 # Offset: 1180
    0000049e: 	nop # Size: 2
.Ltmp358:
    000004a0: 	xorl	%eax, %eax
    000004a2: 	jmp	.Ltmp361 # Offset: 1186
.Ltmp359:
    000004a7: 	xorl	%eax, %eax
    000004a9: 	jmp	.Ltmp367 # Offset: 1193
.Ltmp363:
    000004ae: 	callq	__stack_chk_fail@PLT # Offset: 1198
.Ltmp354:
    000004b3: 	leaq	DATAat0x12008(%rip), %rdi
    000004ba: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1210
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_iterator_fillImEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z26test_forloop_fill_unrolledIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x6910
  Size        : 0x51f
  MaxSize     : 0x520
  Offset      : 0x6910
  Section     : .text
  Orc Section : .local.text._Z26test_forloop_fill_unrolledIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%esi, %r13d
    00000010: 	pushq	%r12
    00000012: 	movl	%edx, %r12d
    00000015: 	pushq	%rbp
    00000016: 	pushq	%rbx
    00000017: 	subq	$0x48, %rsp
    0000001b: 	movq	%rcx, 0x28(%rsp)
    00000020: 	movq	%fs:0x28, %rax
    00000029: 	movq	%rax, 0x38(%rsp)
    0000002e: 	xorl	%eax, %eax
    00000030: 	callq	clock@PLT # Offset: 48
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	movl	iterations(%rip), %eax
    00000042: 	testl	%eax, %eax
    00000044: 	jle	.Ltmp368 # Offset: 68
    0000004a: 	leal	-0x8(%r13), %eax
    0000004e: 	movd	%r12d, %xmm0
    00000053: 	xorl	%r15d, %r15d
    00000056: 	movl	%eax, %ebx
    00000058: 	movl	%eax, 0x20(%rsp)
    0000005c: 	punpcklbw	%xmm0, %xmm0
    00000060: 	shrl	$0x3, %ebx
    00000063: 	movdqa	%xmm0, %xmm6
    00000067: 	leal	0x1(%rbx), %edi
    0000006a: 	punpcklwd	%xmm0, %xmm6
    0000006e: 	movl	%edi, %eax
    00000070: 	movl	%edi, 0x24(%rsp)
    00000074: 	movl	%edi, %ebp
    00000076: 	shrl	%eax
    00000078: 	andl	$-0x2, %ebp
    0000007b: 	movaps	%xmm6, 0x10(%rsp)
    00000080: 	subl	$0x1, %eax
    00000083: 	shlq	$0x4, %rax
    00000087: 	leaq	0x10(%r14,%rax), %rbx
    0000008c: 	leal	(,%rdi,8), %eax
    00000093: 	movl	%eax, 0xc(%rsp)
    00000097: 	nopw	(%rax,%rax) # Size: 9
.Ltmp374:
    000000a0: 	xorl	%eax, %eax
    000000a2: 	cmpl	$0x7, %r13d
    000000a6: 	jle	.Ltmp369 # Offset: 166
    000000a8: 	cmpl	$0x7, 0x20(%rsp)
    000000ad: 	jbe	.Ltmp370 # Offset: 173
    000000b3: 	movq	%r14, %rax
    000000b6: 	pshufd	$0x0, 0x10(%rsp), %xmm0
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp371:
    000000c0: 	movups	%xmm0, (%rax)
    000000c3: 	addq	$0x10, %rax
    000000c7: 	cmpq	%rax, %rbx
    000000ca: 	jne	.Ltmp371 # Offset: 202
    000000cc: 	movl	%ebp, %esi
    000000ce: 	cmpl	%ebp, 0x24(%rsp)
    000000d2: 	je	.Ltmp372 # Offset: 210
.Ltmp387:
    000000d4: 	movl	%r12d, %eax
    000000d7: 	movzbl	%r12b, %edx
    000000db: 	shll	$0x8, %eax
    000000de: 	orl	%edx, %eax
    000000e0: 	movl	%esi, %edx
    000000e2: 	movd	%eax, %xmm7
    000000e6: 	pshuflw	$0x0, %xmm7, %xmm0
    000000eb: 	movq	%xmm0, (%r14,%rdx,8)
.Ltmp372:
    000000f1: 	movslq	0xc(%rsp), %rax
.Ltmp369:
    000000f6: 	cmpl	%eax, %r13d
    000000f9: 	jle	.Ltmp373 # Offset: 249
    000000ff: 	leal	-0x1(%r13), %edx
    00000103: 	movzbl	%r12b, %esi
    00000107: 	leaq	(%r14,%rax), %rdi
    0000010b: 	addl	$0x1, %r15d
    0000010f: 	subl	%eax, %edx
    00000111: 	addq	$0x1, %rdx
    00000115: 	callq	memset@PLT # Offset: 277
    0000011a: 	cmpl	iterations(%rip), %r15d
    00000121: 	jl	.Ltmp374 # Offset: 289
.Ltmp368:
    00000127: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000012e: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000135: 	subq	$0x20, %rax
    00000139: 	cmpq	%rax, %rbx
    0000013c: 	je	.Ltmp375 # Offset: 316
    00000142: 	movq	0x28(%rsp), %rax
    00000147: 	leaq	0x10(%rbx), %rdi
    0000014b: 	movq	%rdi, (%rbx)
    0000014e: 	movq	(%rax), %rbp
    00000151: 	movq	0x8(%rax), %r12
    00000155: 	movq	%rbp, %rax
    00000158: 	addq	%r12, %rax
    0000015b: 	je	.Ltmp376 # Offset: 347
    0000015d: 	testq	%rbp, %rbp
    00000160: 	je	.Ltmp377 # Offset: 352
.Ltmp376:
    00000166: 	movq	%r12, 0x30(%rsp)
    0000016b: 	cmpq	$0xf, %r12
    0000016f: 	ja	.Ltmp378 # Offset: 367
    00000175: 	cmpq	$0x1, %r12
    00000179: 	jne	.Ltmp379 # Offset: 377
    0000017f: 	movzbl	(%rbp), %eax
    00000183: 	movb	%al, 0x10(%rbx)
.Ltmp388:
    00000186: 	movq	%r12, 0x8(%rbx)
    0000018a: 	movb	$0x0, (%rdi,%r12)
    0000018f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000196: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000019d: 	addq	$0x20, %rax
    000001a1: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001a8: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000001af: 	je	.Ltmp380 # Offset: 431
.Ltmp389:
    000001b5: 	movq	-0x20(%rax), %rbp
    000001b9: 	callq	clock@PLT # Offset: 441
    000001be: 	pxor	%xmm0, %xmm0
    000001c2: 	movq	%rax, end_time(%rip)
    000001c9: 	movq	%rbp, %rdi
    000001cc: 	subq	start_time(%rip), %rax
    000001d3: 	cvtsi2sd	%rax, %xmm0
    000001d8: 	divsd	DATAat0x12360(%rip), %xmm0
    000001e0: 	callq	_Z13record_resultdPKc # Offset: 480
    000001e5: 	movslq	%r13d, %r9
    000001e8: 	leaq	(%r14,%r9), %rdx
    000001ec: 	cmpq	%rdx, %r14
    000001ef: 	je	.Ltmp381 # Offset: 495
    000001f5: 	leaq	-0x1(%r9), %rcx
    000001f9: 	movq	%r14, %rax
    000001fc: 	cmpq	$0xe, %rcx
    00000200: 	jbe	.Ltmp382 # Offset: 512
    00000206: 	pxor	%xmm5, %xmm5
    0000020a: 	pxor	%xmm7, %xmm7
    0000020e: 	pxor	%xmm6, %xmm6
    00000212: 	movq	%r9, %rcx
    00000215: 	andq	$-0x10, %rcx
    00000219: 	pxor	%xmm4, %xmm4
    0000021d: 	addq	%r14, %rcx
.Ltmp383:
    00000220: 	movdqu	(%rax), %xmm0
    00000224: 	addq	$0x10, %rax
    00000228: 	movdqa	%xmm0, %xmm2
    0000022c: 	punpckhbw	%xmm7, %xmm0
    00000230: 	punpcklbw	%xmm7, %xmm2
    00000234: 	movdqa	%xmm0, %xmm3
    00000238: 	punpckhwd	%xmm6, %xmm0
    0000023c: 	movdqa	%xmm2, %xmm1
    00000240: 	punpckhwd	%xmm6, %xmm2
    00000244: 	punpcklwd	%xmm6, %xmm3
    00000248: 	punpcklwd	%xmm6, %xmm1
    0000024c: 	movdqa	%xmm1, %xmm8
    00000251: 	punpckldq	%xmm4, %xmm1
    00000255: 	punpckhdq	%xmm4, %xmm8
    0000025a: 	paddq	%xmm8, %xmm1
    0000025f: 	movdqa	%xmm2, %xmm8
    00000264: 	punpckldq	%xmm4, %xmm2
    00000268: 	punpckhdq	%xmm4, %xmm8
    0000026d: 	paddq	%xmm8, %xmm2
    00000272: 	paddq	%xmm2, %xmm1
    00000276: 	movdqa	%xmm3, %xmm2
    0000027a: 	punpckhdq	%xmm4, %xmm3
    0000027e: 	punpckldq	%xmm4, %xmm2
    00000282: 	paddq	%xmm2, %xmm3
    00000286: 	movdqa	%xmm0, %xmm2
    0000028a: 	punpckhdq	%xmm4, %xmm0
    0000028e: 	punpckldq	%xmm4, %xmm2
    00000292: 	paddq	%xmm5, %xmm0
    00000296: 	paddq	%xmm2, %xmm3
    0000029a: 	paddq	%xmm3, %xmm1
    0000029e: 	movdqa	%xmm1, %xmm5
    000002a2: 	paddq	%xmm0, %xmm5
    000002a6: 	cmpq	%rcx, %rax
    000002a9: 	jne	.Ltmp383 # Offset: 681
    000002af: 	movdqa	%xmm5, %xmm0
    000002b3: 	movq	%r9, %rcx
    000002b6: 	psrldq	$0x8, %xmm0
    000002bb: 	andq	$-0x10, %rcx
    000002bf: 	paddq	%xmm0, %xmm5
    000002c3: 	addq	%rcx, %r14
    000002c6: 	movq	%xmm5, %rax
    000002cb: 	cmpq	%rcx, %r9
    000002ce: 	je	.Ltmp384 # Offset: 718
.Ltmp391:
    000002d4: 	movzbl	(%r14), %ecx
    000002d8: 	addq	%rcx, %rax
    000002db: 	leaq	0x1(%r14), %rcx
    000002df: 	cmpq	%rcx, %rdx
    000002e2: 	je	.Ltmp384 # Offset: 738
    000002e8: 	movzbl	0x1(%r14), %ecx
    000002ed: 	addq	%rcx, %rax
    000002f0: 	leaq	0x2(%r14), %rcx
    000002f4: 	cmpq	%rcx, %rdx
    000002f7: 	je	.Ltmp384 # Offset: 759
    000002fd: 	movzbl	0x2(%r14), %ecx
    00000302: 	addq	%rcx, %rax
    00000305: 	leaq	0x3(%r14), %rcx
    00000309: 	cmpq	%rcx, %rdx
    0000030c: 	je	.Ltmp384 # Offset: 780
    00000312: 	movzbl	0x3(%r14), %ecx
    00000317: 	addq	%rcx, %rax
    0000031a: 	leaq	0x4(%r14), %rcx
    0000031e: 	cmpq	%rcx, %rdx
    00000321: 	je	.Ltmp384 # Offset: 801
    00000327: 	movzbl	0x4(%r14), %ecx
    0000032c: 	addq	%rcx, %rax
    0000032f: 	leaq	0x5(%r14), %rcx
    00000333: 	cmpq	%rcx, %rdx
    00000336: 	je	.Ltmp384 # Offset: 822
    0000033c: 	movzbl	0x5(%r14), %ecx
    00000341: 	addq	%rcx, %rax
    00000344: 	leaq	0x6(%r14), %rcx
    00000348: 	cmpq	%rcx, %rdx
    0000034b: 	je	.Ltmp384 # Offset: 843
    00000351: 	movzbl	0x6(%r14), %ecx
    00000356: 	addq	%rcx, %rax
    00000359: 	leaq	0x7(%r14), %rcx
    0000035d: 	cmpq	%rcx, %rdx
    00000360: 	je	.Ltmp384 # Offset: 864
    00000366: 	movzbl	0x7(%r14), %ecx
    0000036b: 	addq	%rcx, %rax
    0000036e: 	leaq	0x8(%r14), %rcx
    00000372: 	cmpq	%rcx, %rdx
    00000375: 	je	.Ltmp384 # Offset: 885
    00000377: 	movzbl	0x8(%r14), %ecx
    0000037c: 	addq	%rcx, %rax
    0000037f: 	leaq	0x9(%r14), %rcx
    00000383: 	cmpq	%rcx, %rdx
    00000386: 	je	.Ltmp384 # Offset: 902
    00000388: 	movzbl	0x9(%r14), %ecx
    0000038d: 	addq	%rcx, %rax
    00000390: 	leaq	0xa(%r14), %rcx
    00000394: 	cmpq	%rcx, %rdx
    00000397: 	je	.Ltmp384 # Offset: 919
    00000399: 	movzbl	0xa(%r14), %ecx
    0000039e: 	addq	%rcx, %rax
    000003a1: 	leaq	0xb(%r14), %rcx
    000003a5: 	cmpq	%rcx, %rdx
    000003a8: 	je	.Ltmp384 # Offset: 936
    000003aa: 	movzbl	0xb(%r14), %ecx
    000003af: 	addq	%rcx, %rax
    000003b2: 	leaq	0xc(%r14), %rcx
    000003b6: 	cmpq	%rcx, %rdx
    000003b9: 	je	.Ltmp384 # Offset: 953
    000003bb: 	movzbl	0xc(%r14), %ecx
    000003c0: 	addq	%rcx, %rax
    000003c3: 	leaq	0xd(%r14), %rcx
    000003c7: 	cmpq	%rcx, %rdx
    000003ca: 	je	.Ltmp384 # Offset: 970
    000003cc: 	movzbl	0xd(%r14), %ecx
    000003d1: 	addq	%rcx, %rax
    000003d4: 	leaq	0xe(%r14), %rcx
    000003d8: 	cmpq	%rcx, %rdx
    000003db: 	je	.Ltmp384 # Offset: 987
    000003dd: 	movzbl	0xe(%r14), %edx
    000003e2: 	addq	%rdx, %rax
    000003e5: 	nopl	(%rax) # Size: 3
.Ltmp384:
    000003e8: 	movzbl	init_value(%rip), %edx
    000003ef: 	imulq	%r9, %rdx
    000003f3: 	cmpq	%rax, %rdx
    000003f6: 	je	.Ltmp385 # Offset: 1014
    000003fc: 	movq	0x38(%rsp), %rax
    00000401: 	subq	%fs:0x28, %rax
    0000040a: 	jne	.Ltmp386 # Offset: 1034
    00000410: 	movq	0x28(%rsp), %rax
    00000415: 	leaq	DATAat0x12278(%rip), %rsi
    0000041c: 	movl	$0x1, %edi
    00000421: 	movq	(%rax), %rdx
    00000424: 	addq	$0x48, %rsp
    00000428: 	xorl	%eax, %eax
    0000042a: 	popq	%rbx
    0000042b: 	popq	%rbp
    0000042c: 	popq	%r12
    0000042e: 	popq	%r13
    00000430: 	popq	%r14
    00000432: 	popq	%r15
    00000434: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1076
    00000439: 	nopl	(%rax) # Size: 7
.Ltmp373:
    00000440: 	addl	$0x1, %r15d
    00000444: 	cmpl	%r15d, iterations(%rip)
    0000044b: 	jg	.Ltmp374 # Offset: 1099
    00000451: 	jmp	.Ltmp368 # Offset: 1105
.Ltmp370:
    00000456: 	xorl	%esi, %esi
    00000458: 	jmp	.Ltmp387 # Offset: 1112
.Ltmp378:
    0000045d: 	movq	%rbx, %rdi
    00000460: 	leaq	0x30(%rsp), %rsi
    00000465: 	xorl	%edx, %edx
    00000467: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1127
    0000046c: 	movq	%rax, (%rbx)
    0000046f: 	movq	%rax, %rdi
    00000472: 	movq	0x30(%rsp), %rax
    00000477: 	movq	%rax, 0x10(%rbx)
.Ltmp390:
    0000047b: 	movq	%r12, %rdx
    0000047e: 	movq	%rbp, %rsi
    00000481: 	callq	memcpy@PLT # Offset: 1153
    00000486: 	movq	0x30(%rsp), %r12
    0000048b: 	movq	(%rbx), %rdi
    0000048e: 	jmp	.Ltmp388 # Offset: 1166
.Ltmp385:
    00000493: 	movq	0x38(%rsp), %rax
    00000498: 	subq	%fs:0x28, %rax
    000004a1: 	jne	.Ltmp386 # Offset: 1185
    000004a3: 	addq	$0x48, %rsp
    000004a7: 	popq	%rbx
    000004a8: 	popq	%rbp
    000004a9: 	popq	%r12
    000004ab: 	popq	%r13
    000004ad: 	popq	%r14
    000004af: 	popq	%r15
    000004b1: 	retq # Offset: 1201
.Ltmp375:
    000004b2: 	movq	0x28(%rsp), %rsi
    000004b7: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000004be: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1214
    000004c3: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000004ca: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000004d1: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000004d8: 	jne	.Ltmp389 # Offset: 1240
.Ltmp380:
    000004de: 	movq	-0x8(%rdx), %rax
    000004e2: 	addq	$0x200, %rax
    000004e8: 	jmp	.Ltmp389 # Offset: 1256
.Ltmp379:
    000004ed: 	testq	%r12, %r12
    000004f0: 	je	.Ltmp388 # Offset: 1264
    000004f6: 	jmp	.Ltmp390 # Offset: 1270
    000004f8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp381:
    00000500: 	xorl	%eax, %eax
    00000502: 	jmp	.Ltmp384 # Offset: 1282
.Ltmp382:
    00000507: 	xorl	%eax, %eax
    00000509: 	jmp	.Ltmp391 # Offset: 1289
.Ltmp386:
    0000050e: 	callq	__stack_chk_fail@PLT # Offset: 1294
.Ltmp377:
    00000513: 	leaq	DATAat0x12008(%rip), %rdi
    0000051a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1306
DWARF CFI Instructions:
    <empty>
End of Function "_Z26test_forloop_fill_unrolledIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_forloop_fill_32IhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x6e30
  Size        : 0x5a6
  MaxSize     : 0x5b0
  Offset      : 0x6e30
  Section     : .text
  Orc Section : .local.text._Z20test_forloop_fill_32IhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%edx, %r13d
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%edx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	movl	%esi, %ebx
    00000018: 	subq	$0x38, %rsp
    0000001c: 	movq	%rcx, 0x18(%rsp)
    00000021: 	movq	%fs:0x28, %rax
    0000002a: 	movq	%rax, 0x28(%rsp)
    0000002f: 	xorl	%eax, %eax
    00000031: 	movslq	%esi, %rax
    00000034: 	movq	%rax, 0x8(%rsp)
    00000039: 	leaq	(%rdi,%rax), %r12
    0000003d: 	callq	clock@PLT # Offset: 61
    00000042: 	movq	%rax, start_time(%rip)
    00000049: 	movl	iterations(%rip), %eax
    0000004f: 	testl	%eax, %eax
    00000051: 	jle	.Ltmp392 # Offset: 81
    00000053: 	movzbl	%bpl, %ebp
    00000057: 	xorl	%r15d, %r15d
    0000005a: 	movl	%ebp, %eax
    0000005c: 	shll	$0x8, %eax
    0000005f: 	orl	%ebp, %eax
    00000061: 	movl	%eax, %ebp
    00000063: 	shll	$0x10, %ebp
    00000066: 	orl	%eax, %ebp
    00000068: 	leal	-0xf(%rbx), %eax
    0000006b: 	movl	%eax, 0x14(%rsp)
    0000006f: 	nop # Size: 1
.Ltmp395:
    00000070: 	cmpl	$0x80, %ebx
    00000076: 	jg	.Ltmp393 # Offset: 118
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp408:
    00000080: 	xorl	%edi, %edi
.Ltmp413:
    00000082: 	cmpl	%edi, %ebx
    00000084: 	jle	.Ltmp394 # Offset: 132
    0000008a: 	leal	-0x1(%rbx), %edx
    0000008d: 	movzbl	%r13b, %esi
    00000091: 	addl	$0x1, %r15d
    00000095: 	subl	%edi, %edx
    00000097: 	movslq	%edi, %rdi
    0000009a: 	addq	$0x1, %rdx
    0000009e: 	addq	%r14, %rdi
    000000a1: 	callq	memset@PLT # Offset: 161
    000000a6: 	cmpl	iterations(%rip), %r15d
    000000ad: 	jl	.Ltmp395 # Offset: 173
.Ltmp392:
    000000af: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000b6: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    000000bd: 	subq	$0x20, %rax
    000000c1: 	cmpq	%rax, %rbx
    000000c4: 	je	.Ltmp396 # Offset: 196
    000000ca: 	movq	0x18(%rsp), %rax
    000000cf: 	leaq	0x10(%rbx), %rdi
    000000d3: 	movq	%rdi, (%rbx)
    000000d6: 	movq	(%rax), %rbp
    000000d9: 	movq	0x8(%rax), %r15
    000000dd: 	movq	%rbp, %rax
    000000e0: 	addq	%r15, %rax
    000000e3: 	je	.Ltmp397 # Offset: 227
    000000e5: 	testq	%rbp, %rbp
    000000e8: 	je	.Ltmp398 # Offset: 232
.Ltmp397:
    000000ee: 	movq	%r15, 0x20(%rsp)
    000000f3: 	cmpq	$0xf, %r15
    000000f7: 	ja	.Ltmp399 # Offset: 247
    000000fd: 	cmpq	$0x1, %r15
    00000101: 	jne	.Ltmp400 # Offset: 257
    00000107: 	movzbl	(%rbp), %eax
    0000010b: 	movb	%al, 0x10(%rbx)
.Ltmp418:
    0000010e: 	movq	%r15, 0x8(%rbx)
    00000112: 	movb	$0x0, (%rdi,%r15)
    00000117: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000011e: 	addq	$0x20, %rax
    00000122: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp420:
    00000129: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000130: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000137: 	je	.Ltmp401 # Offset: 311
.Ltmp419:
    0000013d: 	movq	-0x20(%rax), %rbp
    00000141: 	callq	clock@PLT # Offset: 321
    00000146: 	pxor	%xmm0, %xmm0
    0000014a: 	movq	%rax, end_time(%rip)
    00000151: 	movq	%rbp, %rdi
    00000154: 	subq	start_time(%rip), %rax
    0000015b: 	cvtsi2sd	%rax, %xmm0
    00000160: 	divsd	DATAat0x12360(%rip), %xmm0
    00000168: 	callq	_Z13record_resultdPKc # Offset: 360
    0000016d: 	cmpq	%r12, %r14
    00000170: 	je	.Ltmp402 # Offset: 368
    00000176: 	movq	0x8(%rsp), %rcx
    0000017b: 	movq	%r14, %rax
    0000017e: 	leaq	-0x1(%rcx), %rdx
    00000182: 	cmpq	$0xe, %rdx
    00000186: 	jbe	.Ltmp403 # Offset: 390
    0000018c: 	pxor	%xmm2, %xmm2
    00000190: 	pxor	%xmm6, %xmm6
    00000194: 	pxor	%xmm5, %xmm5
    00000198: 	andq	$-0x10, %rcx
    0000019c: 	movq	%rcx, %rdx
    0000019f: 	pxor	%xmm4, %xmm4
    000001a3: 	addq	%r14, %rdx
    000001a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp404:
    000001b0: 	movdqu	(%rax), %xmm1
    000001b4: 	addq	$0x10, %rax
    000001b8: 	movdqa	%xmm1, %xmm0
    000001bc: 	punpckhbw	%xmm6, %xmm1
    000001c0: 	punpcklbw	%xmm6, %xmm0
    000001c4: 	movdqa	%xmm1, %xmm3
    000001c8: 	punpckhwd	%xmm5, %xmm1
    000001cc: 	movdqa	%xmm0, %xmm7
    000001d0: 	punpckhwd	%xmm5, %xmm0
    000001d4: 	punpcklwd	%xmm5, %xmm3
    000001d8: 	movdqa	%xmm0, %xmm8
    000001dd: 	punpcklwd	%xmm5, %xmm7
    000001e1: 	punpckhdq	%xmm4, %xmm0
    000001e5: 	punpckldq	%xmm4, %xmm8
    000001ea: 	paddq	%xmm8, %xmm0
    000001ef: 	movdqa	%xmm7, %xmm8
    000001f4: 	punpckhdq	%xmm4, %xmm7
    000001f8: 	punpckldq	%xmm4, %xmm8
    000001fd: 	paddq	%xmm8, %xmm7
    00000202: 	paddq	%xmm7, %xmm0
    00000206: 	movdqa	%xmm3, %xmm7
    0000020a: 	punpckhdq	%xmm4, %xmm3
    0000020e: 	punpckldq	%xmm4, %xmm7
    00000212: 	paddq	%xmm7, %xmm3
    00000216: 	movdqa	%xmm1, %xmm7
    0000021a: 	punpckhdq	%xmm4, %xmm1
    0000021e: 	punpckldq	%xmm4, %xmm7
    00000222: 	paddq	%xmm1, %xmm2
    00000226: 	paddq	%xmm7, %xmm3
    0000022a: 	paddq	%xmm3, %xmm0
    0000022e: 	paddq	%xmm0, %xmm2
    00000232: 	cmpq	%rdx, %rax
    00000235: 	jne	.Ltmp404 # Offset: 565
    0000023b: 	movq	0x8(%rsp), %rcx
    00000240: 	movdqa	%xmm2, %xmm0
    00000244: 	psrldq	$0x8, %xmm0
    00000249: 	movq	%rcx, %rdx
    0000024c: 	paddq	%xmm0, %xmm2
    00000250: 	andq	$-0x10, %rdx
    00000254: 	movq	%xmm2, %rax
    00000259: 	addq	%rdx, %r14
    0000025c: 	cmpq	%rdx, %rcx
    0000025f: 	je	.Ltmp405 # Offset: 607
.Ltmp423:
    00000265: 	movzbl	(%r14), %edx
    00000269: 	addq	%rdx, %rax
    0000026c: 	leaq	0x1(%r14), %rdx
    00000270: 	cmpq	%rdx, %r12
    00000273: 	je	.Ltmp405 # Offset: 627
    00000279: 	movzbl	0x1(%r14), %edx
    0000027e: 	addq	%rdx, %rax
    00000281: 	leaq	0x2(%r14), %rdx
    00000285: 	cmpq	%rdx, %r12
    00000288: 	je	.Ltmp405 # Offset: 648
    0000028e: 	movzbl	0x2(%r14), %edx
    00000293: 	addq	%rdx, %rax
    00000296: 	leaq	0x3(%r14), %rdx
    0000029a: 	cmpq	%rdx, %r12
    0000029d: 	je	.Ltmp405 # Offset: 669
    000002a3: 	movzbl	0x3(%r14), %edx
    000002a8: 	addq	%rdx, %rax
    000002ab: 	leaq	0x4(%r14), %rdx
    000002af: 	cmpq	%rdx, %r12
    000002b2: 	je	.Ltmp405 # Offset: 690
    000002b8: 	movzbl	0x4(%r14), %edx
    000002bd: 	addq	%rdx, %rax
    000002c0: 	leaq	0x5(%r14), %rdx
    000002c4: 	cmpq	%rdx, %r12
    000002c7: 	je	.Ltmp405 # Offset: 711
    000002cd: 	movzbl	0x5(%r14), %edx
    000002d2: 	addq	%rdx, %rax
    000002d5: 	leaq	0x6(%r14), %rdx
    000002d9: 	cmpq	%rdx, %r12
    000002dc: 	je	.Ltmp405 # Offset: 732
    000002e2: 	movzbl	0x6(%r14), %edx
    000002e7: 	addq	%rdx, %rax
    000002ea: 	leaq	0x7(%r14), %rdx
    000002ee: 	cmpq	%rdx, %r12
    000002f1: 	je	.Ltmp405 # Offset: 753
    000002f7: 	movzbl	0x7(%r14), %edx
    000002fc: 	addq	%rdx, %rax
    000002ff: 	leaq	0x8(%r14), %rdx
    00000303: 	cmpq	%rdx, %r12
    00000306: 	je	.Ltmp405 # Offset: 774
    00000308: 	movzbl	0x8(%r14), %edx
    0000030d: 	addq	%rdx, %rax
    00000310: 	leaq	0x9(%r14), %rdx
    00000314: 	cmpq	%rdx, %r12
    00000317: 	je	.Ltmp405 # Offset: 791
    00000319: 	movzbl	0x9(%r14), %edx
    0000031e: 	addq	%rdx, %rax
    00000321: 	leaq	0xa(%r14), %rdx
    00000325: 	cmpq	%rdx, %r12
    00000328: 	je	.Ltmp405 # Offset: 808
    0000032a: 	movzbl	0xa(%r14), %edx
    0000032f: 	addq	%rdx, %rax
    00000332: 	leaq	0xb(%r14), %rdx
    00000336: 	cmpq	%rdx, %r12
    00000339: 	je	.Ltmp405 # Offset: 825
    0000033b: 	movzbl	0xb(%r14), %edx
    00000340: 	addq	%rdx, %rax
    00000343: 	leaq	0xc(%r14), %rdx
    00000347: 	cmpq	%rdx, %r12
    0000034a: 	je	.Ltmp405 # Offset: 842
    0000034c: 	movzbl	0xc(%r14), %edx
    00000351: 	addq	%rdx, %rax
    00000354: 	leaq	0xd(%r14), %rdx
    00000358: 	cmpq	%rdx, %r12
    0000035b: 	je	.Ltmp405 # Offset: 859
    0000035d: 	movzbl	0xd(%r14), %edx
    00000362: 	addq	%rdx, %rax
    00000365: 	leaq	0xe(%r14), %rdx
    00000369: 	cmpq	%rdx, %r12
    0000036c: 	je	.Ltmp405 # Offset: 876
    0000036e: 	movzbl	0xe(%r14), %edx
    00000373: 	addq	%rdx, %rax
    00000376: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp405:
    00000380: 	movzbl	init_value(%rip), %edx
    00000387: 	imulq	0x8(%rsp), %rdx
    0000038d: 	cmpq	%rdx, %rax
    00000390: 	je	.Ltmp406 # Offset: 912
    00000396: 	movq	0x28(%rsp), %rax
    0000039b: 	subq	%fs:0x28, %rax
    000003a4: 	jne	.Ltmp407 # Offset: 932
    000003aa: 	movq	0x18(%rsp), %rax
    000003af: 	leaq	DATAat0x12278(%rip), %rsi
    000003b6: 	movl	$0x1, %edi
    000003bb: 	movq	(%rax), %rdx
    000003be: 	addq	$0x38, %rsp
    000003c2: 	xorl	%eax, %eax
    000003c4: 	popq	%rbx
    000003c5: 	popq	%rbp
    000003c6: 	popq	%r12
    000003c8: 	popq	%r13
    000003ca: 	popq	%r14
    000003cc: 	popq	%r15
    000003ce: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 974
    000003d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp394:
    000003d8: 	addl	$0x1, %r15d
    000003dc: 	cmpl	%r15d, iterations(%rip)
    000003e3: 	jle	.Ltmp392 # Offset: 995
    000003e9: 	cmpl	$0x80, %ebx
    000003ef: 	jle	.Ltmp408 # Offset: 1007
.Ltmp393:
    000003f5: 	movq	%r14, %rax
    000003f8: 	xorl	%edi, %edi
    000003fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp410:
    00000400: 	testb	$0x3, %al
    00000402: 	je	.Ltmp409 # Offset: 1026
    00000404: 	addl	$0x1, %edi
    00000407: 	movb	%r13b, (%rax)
    0000040a: 	addq	$0x1, %rax
    0000040e: 	cmpl	%edi, %ebx
    00000410: 	jne	.Ltmp410 # Offset: 1040
.Ltmp409:
    00000412: 	cmpl	0x14(%rsp), %edi
    00000416: 	jge	.Ltmp411 # Offset: 1046
    00000418: 	leal	-0x10(%rbx), %r8d
    0000041c: 	movd	%ebp, %xmm6
    00000420: 	movslq	%edi, %rcx
    00000423: 	xorl	%eax, %eax
    00000425: 	subl	%edi, %r8d
    00000428: 	pshufd	$0x0, %xmm6, %xmm0
    0000042d: 	addq	%r14, %rcx
    00000430: 	shrl	$0x4, %r8d
    00000434: 	leal	0x1(%r8), %esi
    00000438: 	nopl	(%rax,%rax) # Size: 8
.Ltmp412:
    00000440: 	movq	%rax, %rdx
    00000443: 	addq	$0x1, %rax
    00000447: 	shlq	$0x4, %rdx
    0000044b: 	movups	%xmm0, (%rcx,%rdx)
    0000044f: 	cmpl	%eax, %esi
    00000451: 	ja	.Ltmp412 # Offset: 1105
    00000453: 	shll	$0x4, %r8d
    00000457: 	leal	0x10(%rdi,%r8), %edi
.Ltmp411:
    0000045c: 	leal	-0x3(%rbx), %esi
    0000045f: 	cmpl	%esi, %edi
    00000461: 	jge	.Ltmp413 # Offset: 1121
    00000467: 	leal	-0x4(%rbx), %eax
    0000046a: 	subl	%edi, %eax
    0000046c: 	movl	%eax, %r9d
    0000046f: 	shrl	$0x2, %r9d
    00000473: 	leal	0x1(%r9), %r8d
    00000477: 	cmpl	$0xb, %eax
    0000047a: 	jbe	.Ltmp414 # Offset: 1146
    00000480: 	movl	%r8d, %eax
    00000483: 	movslq	%edi, %rdx
    00000486: 	movd	%ebp, %xmm6
    0000048a: 	shrl	$0x2, %eax
    0000048d: 	addq	%r14, %rdx
    00000490: 	pshufd	$0x0, %xmm6, %xmm0
    00000495: 	leal	-0x1(%rax), %ecx
    00000498: 	leaq	0x10(%rdx), %rax
    0000049c: 	shlq	$0x4, %rcx
    000004a0: 	addq	%rax, %rcx
    000004a3: 	jmp	.Ltmp415 # Offset: 1187
    000004a5: 	nopl	(%rax) # Size: 3
.Ltmp416:
    000004a8: 	addq	$0x10, %rax
.Ltmp415:
    000004ac: 	movups	%xmm0, (%rdx)
    000004af: 	movq	%rax, %rdx
    000004b2: 	cmpq	%rcx, %rax
    000004b5: 	jne	.Ltmp416 # Offset: 1205
    000004b7: 	movl	%r8d, %edx
    000004ba: 	andl	$-0x4, %edx
    000004bd: 	leal	(%rdi,%rdx,4), %eax
    000004c0: 	cmpl	%edx, %r8d
    000004c3: 	je	.Ltmp417 # Offset: 1219
.Ltmp422:
    000004c5: 	movslq	%eax, %rdx
    000004c8: 	movl	%ebp, (%r14,%rdx)
    000004cc: 	leal	0x4(%rax), %edx
    000004cf: 	cmpl	%edx, %esi
    000004d1: 	jle	.Ltmp417 # Offset: 1233
    000004d3: 	movslq	%edx, %rdx
    000004d6: 	addl	$0x8, %eax
    000004d9: 	movl	%ebp, (%r14,%rdx)
    000004dd: 	cmpl	%eax, %esi
    000004df: 	jle	.Ltmp417 # Offset: 1247
    000004e1: 	cltq
    000004e3: 	movl	%ebp, (%r14,%rax)
.Ltmp417:
    000004e7: 	leal	0x4(%rdi,%r9,4), %edi
    000004ec: 	jmp	.Ltmp413 # Offset: 1260
.Ltmp399:
    000004f1: 	movq	%rbx, %rdi
    000004f4: 	leaq	0x20(%rsp), %rsi
    000004f9: 	xorl	%edx, %edx
    000004fb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1275
    00000500: 	movq	%rax, (%rbx)
    00000503: 	movq	%rax, %rdi
    00000506: 	movq	0x20(%rsp), %rax
    0000050b: 	movq	%rax, 0x10(%rbx)
.Ltmp421:
    0000050f: 	movq	%r15, %rdx
    00000512: 	movq	%rbp, %rsi
    00000515: 	callq	memcpy@PLT # Offset: 1301
    0000051a: 	movq	0x20(%rsp), %r15
    0000051f: 	movq	(%rbx), %rdi
    00000522: 	jmp	.Ltmp418 # Offset: 1314
.Ltmp406:
    00000527: 	movq	0x28(%rsp), %rax
    0000052c: 	subq	%fs:0x28, %rax
    00000535: 	jne	.Ltmp407 # Offset: 1333
    00000537: 	addq	$0x38, %rsp
    0000053b: 	popq	%rbx
    0000053c: 	popq	%rbp
    0000053d: 	popq	%r12
    0000053f: 	popq	%r13
    00000541: 	popq	%r14
    00000543: 	popq	%r15
    00000545: 	retq # Offset: 1349
.Ltmp401:
    00000546: 	movq	-0x8(%rdx), %rax
    0000054a: 	addq	$0x200, %rax
    00000550: 	jmp	.Ltmp419 # Offset: 1360
.Ltmp396:
    00000555: 	movq	0x18(%rsp), %rsi
    0000055a: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000561: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1377
    00000566: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000056d: 	jmp	.Ltmp420 # Offset: 1389
.Ltmp400:
    00000572: 	testq	%r15, %r15
    00000575: 	je	.Ltmp418 # Offset: 1397
    0000057b: 	jmp	.Ltmp421 # Offset: 1403
    0000057d: 	nopl	(%rax) # Size: 3
.Ltmp414:
    00000580: 	movl	%edi, %eax
    00000582: 	jmp	.Ltmp422 # Offset: 1410
.Ltmp402:
    00000587: 	xorl	%eax, %eax
    00000589: 	jmp	.Ltmp405 # Offset: 1417
.Ltmp403:
    0000058e: 	xorl	%eax, %eax
    00000590: 	jmp	.Ltmp423 # Offset: 1424
.Ltmp407:
    00000595: 	callq	__stack_chk_fail@PLT # Offset: 1429
.Ltmp398:
    0000059a: 	leaq	DATAat0x12008(%rip), %rdi
    000005a1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1441
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_forloop_fill_32IhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_forloop_fill_64IhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x73e0
  Size        : 0x5a6
  MaxSize     : 0x5b0
  Offset      : 0x73e0
  Section     : .text
  Orc Section : .local.text._Z20test_forloop_fill_64IhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %r15
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	movl	%edx, %r13d
    00000010: 	pushq	%r12
    00000012: 	movl	%edx, %r12d
    00000015: 	pushq	%rbp
    00000016: 	movslq	%esi, %rbp
    00000019: 	pushq	%rbx
    0000001a: 	leaq	(%rdi,%rbp), %rbx
    0000001e: 	subq	$0x38, %rsp
    00000022: 	movq	%rcx, 0x18(%rsp)
    00000027: 	movq	%fs:0x28, %rax
    00000030: 	movq	%rax, 0x28(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	callq	clock@PLT # Offset: 55
    0000003c: 	movq	%rax, start_time(%rip)
    00000043: 	movl	iterations(%rip), %eax
    00000049: 	testl	%eax, %eax
    0000004b: 	jle	.Ltmp424 # Offset: 75
    00000051: 	movzbl	%r13b, %r13d
    00000055: 	movq	%rbp, %r14
    00000058: 	movq	%r13, %rax
    0000005b: 	shlq	$0x8, %rax
    0000005f: 	orq	%r13, %rax
    00000062: 	xorl	%r13d, %r13d
    00000065: 	movq	%rax, %rdx
    00000068: 	shlq	$0x10, %rdx
    0000006c: 	orq	%rax, %rdx
    0000006f: 	movq	%rdx, %rax
    00000072: 	shlq	$0x20, %rax
    00000076: 	orq	%rdx, %rax
    00000079: 	movq	%rax, %xmm1
    0000007e: 	leal	-0x1f(%rbp), %eax
    00000081: 	movl	%eax, 0x14(%rsp)
    00000085: 	nopl	(%rax) # Size: 3
.Ltmp427:
    00000088: 	cmpl	$0x80, %r14d
    0000008f: 	jg	.Ltmp425 # Offset: 143
    00000095: 	nopl	(%rax) # Size: 3
.Ltmp440:
    00000098: 	xorl	%edi, %edi
.Ltmp445:
    0000009a: 	cmpl	%edi, %r14d
    0000009d: 	jle	.Ltmp426 # Offset: 157
    000000a3: 	leal	-0x1(%r14), %edx
    000000a7: 	movzbl	%r12b, %esi
    000000ab: 	movq	%xmm1, 0x8(%rsp)
    000000b1: 	addl	$0x1, %r13d
    000000b5: 	subl	%edi, %edx
    000000b7: 	movslq	%edi, %rdi
    000000ba: 	addq	$0x1, %rdx
    000000be: 	addq	%r15, %rdi
    000000c1: 	callq	memset@PLT # Offset: 193
    000000c6: 	cmpl	iterations(%rip), %r13d
    000000cd: 	movq	0x8(%rsp), %xmm1
    000000d3: 	jl	.Ltmp427 # Offset: 211
.Ltmp424:
    000000d5: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000dc: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000000e3: 	subq	$0x20, %rax
    000000e7: 	cmpq	%rax, %r14
    000000ea: 	je	.Ltmp428 # Offset: 234
    000000f0: 	movq	0x18(%rsp), %rax
    000000f5: 	leaq	0x10(%r14), %rdi
    000000f9: 	movq	%rdi, (%r14)
    000000fc: 	movq	(%rax), %r8
    000000ff: 	movq	0x8(%rax), %r13
    00000103: 	movq	%r8, %rax
    00000106: 	addq	%r13, %rax
    00000109: 	je	.Ltmp429 # Offset: 265
    0000010b: 	testq	%r8, %r8
    0000010e: 	je	.Ltmp430 # Offset: 270
.Ltmp429:
    00000114: 	movq	%r13, 0x20(%rsp)
    00000119: 	cmpq	$0xf, %r13
    0000011d: 	ja	.Ltmp431 # Offset: 285
    00000123: 	cmpq	$0x1, %r13
    00000127: 	jne	.Ltmp432 # Offset: 295
    0000012d: 	movzbl	(%r8), %eax
    00000131: 	movb	%al, 0x10(%r14)
.Ltmp450:
    00000135: 	movq	%r13, 0x8(%r14)
    00000139: 	movb	$0x0, (%rdi,%r13)
    0000013e: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000145: 	addq	$0x20, %rax
    00000149: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp452:
    00000150: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000157: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000015e: 	je	.Ltmp433 # Offset: 350
.Ltmp451:
    00000164: 	movq	-0x20(%rax), %r13
    00000168: 	callq	clock@PLT # Offset: 360
    0000016d: 	pxor	%xmm0, %xmm0
    00000171: 	movq	%rax, end_time(%rip)
    00000178: 	movq	%r13, %rdi
    0000017b: 	subq	start_time(%rip), %rax
    00000182: 	cvtsi2sd	%rax, %xmm0
    00000187: 	divsd	DATAat0x12360(%rip), %xmm0
    0000018f: 	callq	_Z13record_resultdPKc # Offset: 399
    00000194: 	cmpq	%rbx, %r15
    00000197: 	je	.Ltmp434 # Offset: 407
    0000019d: 	leaq	-0x1(%rbp), %rdx
    000001a1: 	movq	%r15, %rax
    000001a4: 	cmpq	$0xe, %rdx
    000001a8: 	jbe	.Ltmp435 # Offset: 424
    000001ae: 	pxor	%xmm5, %xmm5
    000001b2: 	pxor	%xmm7, %xmm7
    000001b6: 	pxor	%xmm6, %xmm6
    000001ba: 	movq	%rbp, %rdx
    000001bd: 	andq	$-0x10, %rdx
    000001c1: 	pxor	%xmm4, %xmm4
    000001c5: 	addq	%r15, %rdx
    000001c8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp436:
    000001d0: 	movdqu	(%rax), %xmm0
    000001d4: 	addq	$0x10, %rax
    000001d8: 	movdqa	%xmm0, %xmm2
    000001dc: 	punpckhbw	%xmm7, %xmm0
    000001e0: 	punpcklbw	%xmm7, %xmm2
    000001e4: 	movdqa	%xmm0, %xmm3
    000001e8: 	punpckhwd	%xmm6, %xmm0
    000001ec: 	movdqa	%xmm2, %xmm1
    000001f0: 	punpckhwd	%xmm6, %xmm2
    000001f4: 	punpcklwd	%xmm6, %xmm3
    000001f8: 	punpcklwd	%xmm6, %xmm1
    000001fc: 	movdqa	%xmm1, %xmm8
    00000201: 	punpckhdq	%xmm4, %xmm1
    00000205: 	punpckldq	%xmm4, %xmm8
    0000020a: 	paddq	%xmm8, %xmm1
    0000020f: 	movdqa	%xmm2, %xmm8
    00000214: 	punpckhdq	%xmm4, %xmm2
    00000218: 	punpckldq	%xmm4, %xmm8
    0000021d: 	paddq	%xmm8, %xmm2
    00000222: 	paddq	%xmm2, %xmm1
    00000226: 	movdqa	%xmm3, %xmm2
    0000022a: 	punpckhdq	%xmm4, %xmm3
    0000022e: 	punpckldq	%xmm4, %xmm2
    00000232: 	paddq	%xmm2, %xmm3
    00000236: 	movdqa	%xmm0, %xmm2
    0000023a: 	punpckhdq	%xmm4, %xmm0
    0000023e: 	punpckldq	%xmm4, %xmm2
    00000242: 	paddq	%xmm5, %xmm0
    00000246: 	paddq	%xmm2, %xmm3
    0000024a: 	paddq	%xmm3, %xmm1
    0000024e: 	movdqa	%xmm1, %xmm5
    00000252: 	paddq	%xmm0, %xmm5
    00000256: 	cmpq	%rdx, %rax
    00000259: 	jne	.Ltmp436 # Offset: 601
    0000025f: 	movdqa	%xmm5, %xmm0
    00000263: 	movq	%rbp, %rdx
    00000266: 	psrldq	$0x8, %xmm0
    0000026b: 	andq	$-0x10, %rdx
    0000026f: 	paddq	%xmm0, %xmm5
    00000273: 	addq	%rdx, %r15
    00000276: 	movq	%xmm5, %rax
    0000027b: 	cmpq	%rdx, %rbp
    0000027e: 	je	.Ltmp437 # Offset: 638
.Ltmp455:
    00000284: 	movzbl	(%r15), %edx
    00000288: 	addq	%rdx, %rax
    0000028b: 	leaq	0x1(%r15), %rdx
    0000028f: 	cmpq	%rdx, %rbx
    00000292: 	je	.Ltmp437 # Offset: 658
    00000298: 	movzbl	0x1(%r15), %edx
    0000029d: 	addq	%rdx, %rax
    000002a0: 	leaq	0x2(%r15), %rdx
    000002a4: 	cmpq	%rdx, %rbx
    000002a7: 	je	.Ltmp437 # Offset: 679
    000002ad: 	movzbl	0x2(%r15), %edx
    000002b2: 	addq	%rdx, %rax
    000002b5: 	leaq	0x3(%r15), %rdx
    000002b9: 	cmpq	%rdx, %rbx
    000002bc: 	je	.Ltmp437 # Offset: 700
    000002c2: 	movzbl	0x3(%r15), %edx
    000002c7: 	addq	%rdx, %rax
    000002ca: 	leaq	0x4(%r15), %rdx
    000002ce: 	cmpq	%rdx, %rbx
    000002d1: 	je	.Ltmp437 # Offset: 721
    000002d7: 	movzbl	0x4(%r15), %edx
    000002dc: 	addq	%rdx, %rax
    000002df: 	leaq	0x5(%r15), %rdx
    000002e3: 	cmpq	%rdx, %rbx
    000002e6: 	je	.Ltmp437 # Offset: 742
    000002ec: 	movzbl	0x5(%r15), %edx
    000002f1: 	addq	%rdx, %rax
    000002f4: 	leaq	0x6(%r15), %rdx
    000002f8: 	cmpq	%rdx, %rbx
    000002fb: 	je	.Ltmp437 # Offset: 763
    00000301: 	movzbl	0x6(%r15), %edx
    00000306: 	addq	%rdx, %rax
    00000309: 	leaq	0x7(%r15), %rdx
    0000030d: 	cmpq	%rdx, %rbx
    00000310: 	je	.Ltmp437 # Offset: 784
    00000316: 	movzbl	0x7(%r15), %edx
    0000031b: 	addq	%rdx, %rax
    0000031e: 	leaq	0x8(%r15), %rdx
    00000322: 	cmpq	%rdx, %rbx
    00000325: 	je	.Ltmp437 # Offset: 805
    00000327: 	movzbl	0x8(%r15), %edx
    0000032c: 	addq	%rdx, %rax
    0000032f: 	leaq	0x9(%r15), %rdx
    00000333: 	cmpq	%rdx, %rbx
    00000336: 	je	.Ltmp437 # Offset: 822
    00000338: 	movzbl	0x9(%r15), %edx
    0000033d: 	addq	%rdx, %rax
    00000340: 	leaq	0xa(%r15), %rdx
    00000344: 	cmpq	%rdx, %rbx
    00000347: 	je	.Ltmp437 # Offset: 839
    00000349: 	movzbl	0xa(%r15), %edx
    0000034e: 	addq	%rdx, %rax
    00000351: 	leaq	0xb(%r15), %rdx
    00000355: 	cmpq	%rdx, %rbx
    00000358: 	je	.Ltmp437 # Offset: 856
    0000035a: 	movzbl	0xb(%r15), %edx
    0000035f: 	addq	%rdx, %rax
    00000362: 	leaq	0xc(%r15), %rdx
    00000366: 	cmpq	%rdx, %rbx
    00000369: 	je	.Ltmp437 # Offset: 873
    0000036b: 	movzbl	0xc(%r15), %edx
    00000370: 	addq	%rdx, %rax
    00000373: 	leaq	0xd(%r15), %rdx
    00000377: 	cmpq	%rdx, %rbx
    0000037a: 	je	.Ltmp437 # Offset: 890
    0000037c: 	movzbl	0xd(%r15), %edx
    00000381: 	addq	%rdx, %rax
    00000384: 	leaq	0xe(%r15), %rdx
    00000388: 	cmpq	%rdx, %rbx
    0000038b: 	je	.Ltmp437 # Offset: 907
    0000038d: 	movzbl	0xe(%r15), %edx
    00000392: 	addq	%rdx, %rax
    00000395: 	nopl	(%rax) # Size: 3
.Ltmp437:
    00000398: 	movzbl	init_value(%rip), %edx
    0000039f: 	imulq	%rbp, %rdx
    000003a3: 	cmpq	%rdx, %rax
    000003a6: 	je	.Ltmp438 # Offset: 934
    000003ac: 	movq	0x28(%rsp), %rax
    000003b1: 	subq	%fs:0x28, %rax
    000003ba: 	jne	.Ltmp439 # Offset: 954
    000003c0: 	movq	0x18(%rsp), %rax
    000003c5: 	leaq	DATAat0x12278(%rip), %rsi
    000003cc: 	movl	$0x1, %edi
    000003d1: 	movq	(%rax), %rdx
    000003d4: 	addq	$0x38, %rsp
    000003d8: 	xorl	%eax, %eax
    000003da: 	popq	%rbx
    000003db: 	popq	%rbp
    000003dc: 	popq	%r12
    000003de: 	popq	%r13
    000003e0: 	popq	%r14
    000003e2: 	popq	%r15
    000003e4: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 996
    000003e9: 	nopl	(%rax) # Size: 7
.Ltmp426:
    000003f0: 	addl	$0x1, %r13d
    000003f4: 	cmpl	%r13d, iterations(%rip)
    000003fb: 	jle	.Ltmp424 # Offset: 1019
    00000401: 	cmpl	$0x80, %r14d
    00000408: 	jle	.Ltmp440 # Offset: 1032
.Ltmp425:
    0000040e: 	movq	%r15, %rax
    00000411: 	xorl	%edi, %edi
    00000413: 	nopl	(%rax,%rax) # Size: 5
.Ltmp442:
    00000418: 	testb	$0x7, %al
    0000041a: 	je	.Ltmp441 # Offset: 1050
    0000041c: 	addl	$0x1, %edi
    0000041f: 	movb	%r12b, (%rax)
    00000422: 	addq	$0x1, %rax
    00000426: 	cmpl	%edi, %r14d
    00000429: 	jne	.Ltmp442 # Offset: 1065
.Ltmp441:
    0000042b: 	cmpl	0x14(%rsp), %edi
    0000042f: 	jge	.Ltmp443 # Offset: 1071
    00000431: 	leal	-0x20(%r14), %r9d
    00000435: 	movdqa	%xmm1, %xmm0
    00000439: 	movslq	%edi, %rax
    0000043c: 	xorl	%edx, %edx
    0000043e: 	subl	%edi, %r9d
    00000441: 	punpcklqdq	%xmm0, %xmm0
    00000445: 	addq	%r15, %rax
    00000448: 	shrl	$0x5, %r9d
    0000044c: 	leal	0x1(%r9), %esi
.Ltmp444:
    00000450: 	addl	$0x1, %edx
    00000453: 	movups	%xmm0, (%rax)
    00000456: 	addq	$0x20, %rax
    0000045a: 	movups	%xmm0, -0x10(%rax)
    0000045e: 	cmpl	%edx, %esi
    00000460: 	ja	.Ltmp444 # Offset: 1120
    00000462: 	shll	$0x5, %r9d
    00000466: 	leal	0x20(%rdi,%r9), %edi
.Ltmp443:
    0000046b: 	leal	-0x7(%r14), %eax
    0000046f: 	cmpl	%eax, %edi
    00000471: 	jge	.Ltmp445 # Offset: 1137
    00000477: 	leal	-0x8(%r14), %eax
    0000047b: 	subl	%edi, %eax
    0000047d: 	movl	%eax, %r9d
    00000480: 	shrl	$0x3, %r9d
    00000484: 	leal	0x1(%r9), %r10d
    00000488: 	cmpl	$0x7, %eax
    0000048b: 	jbe	.Ltmp446 # Offset: 1163
    00000491: 	movl	%r10d, %eax
    00000494: 	movslq	%edi, %rdx
    00000497: 	movdqa	%xmm1, %xmm0
    0000049b: 	shrl	%eax
    0000049d: 	addq	%r15, %rdx
    000004a0: 	punpcklqdq	%xmm0, %xmm0
    000004a4: 	leal	-0x1(%rax), %esi
    000004a7: 	leaq	0x10(%rdx), %rax
    000004ab: 	shlq	$0x4, %rsi
    000004af: 	addq	%rax, %rsi
    000004b2: 	jmp	.Ltmp447 # Offset: 1202
    000004b4: 	nopl	(%rax) # Size: 4
.Ltmp448:
    000004b8: 	addq	$0x10, %rax
.Ltmp447:
    000004bc: 	movups	%xmm0, (%rdx)
    000004bf: 	movq	%rax, %rdx
    000004c2: 	cmpq	%rsi, %rax
    000004c5: 	jne	.Ltmp448 # Offset: 1221
    000004c7: 	movl	%r10d, %edx
    000004ca: 	andl	$-0x2, %edx
    000004cd: 	leal	(%rdi,%rdx,8), %eax
    000004d0: 	cmpl	%edx, %r10d
    000004d3: 	je	.Ltmp449 # Offset: 1235
.Ltmp454:
    000004d5: 	cltq
    000004d7: 	movq	%xmm1, (%r15,%rax)
.Ltmp449:
    000004dd: 	leal	0x8(%rdi,%r9,8), %edi
    000004e2: 	jmp	.Ltmp445 # Offset: 1250
.Ltmp431:
    000004e7: 	movq	%r14, %rdi
    000004ea: 	leaq	0x20(%rsp), %rsi
    000004ef: 	xorl	%edx, %edx
    000004f1: 	movq	%r8, 0x8(%rsp)
    000004f6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1270
    000004fb: 	movq	0x8(%rsp), %r8
    00000500: 	movq	%rax, (%r14)
    00000503: 	movq	%rax, %rdi
    00000506: 	movq	0x20(%rsp), %rax
    0000050b: 	movq	%rax, 0x10(%r14)
.Ltmp453:
    0000050f: 	movq	%r13, %rdx
    00000512: 	movq	%r8, %rsi
    00000515: 	callq	memcpy@PLT # Offset: 1301
    0000051a: 	movq	0x20(%rsp), %r13
    0000051f: 	movq	(%r14), %rdi
    00000522: 	jmp	.Ltmp450 # Offset: 1314
.Ltmp438:
    00000527: 	movq	0x28(%rsp), %rax
    0000052c: 	subq	%fs:0x28, %rax
    00000535: 	jne	.Ltmp439 # Offset: 1333
    00000537: 	addq	$0x38, %rsp
    0000053b: 	popq	%rbx
    0000053c: 	popq	%rbp
    0000053d: 	popq	%r12
    0000053f: 	popq	%r13
    00000541: 	popq	%r14
    00000543: 	popq	%r15
    00000545: 	retq # Offset: 1349
.Ltmp433:
    00000546: 	movq	-0x8(%rdx), %rax
    0000054a: 	addq	$0x200, %rax
    00000550: 	jmp	.Ltmp451 # Offset: 1360
.Ltmp428:
    00000555: 	movq	0x18(%rsp), %rsi
    0000055a: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000561: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1377
    00000566: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000056d: 	jmp	.Ltmp452 # Offset: 1389
.Ltmp432:
    00000572: 	testq	%r13, %r13
    00000575: 	je	.Ltmp450 # Offset: 1397
    0000057b: 	jmp	.Ltmp453 # Offset: 1403
    0000057d: 	nopl	(%rax) # Size: 3
.Ltmp446:
    00000580: 	movl	%edi, %eax
    00000582: 	jmp	.Ltmp454 # Offset: 1410
.Ltmp434:
    00000587: 	xorl	%eax, %eax
    00000589: 	jmp	.Ltmp437 # Offset: 1417
.Ltmp435:
    0000058e: 	xorl	%eax, %eax
    00000590: 	jmp	.Ltmp455 # Offset: 1424
.Ltmp439:
    00000595: 	callq	__stack_chk_fail@PLT # Offset: 1429
.Ltmp430:
    0000059a: 	leaq	DATAat0x12008(%rip), %rdi
    000005a1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1441
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_forloop_fill_64IhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z29test_forloop_fill_64cachelineIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x7990
  Size        : 0x63b
  MaxSize     : 0x640
  Offset      : 0x7990
  Section     : .text
  Orc Section : .local.text._Z29test_forloop_fill_64cachelineIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	movq	%rdi, %r13
    00000013: 	pushq	%r12
    00000015: 	pushq	%rbp
    00000016: 	movl	%edx, %ebp
    00000018: 	pushq	%rbx
    00000019: 	subq	$0x38, %rsp
    0000001d: 	movq	%rcx, 0x18(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x28(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	movslq	%esi, %rax
    00000035: 	movq	%rax, 0x10(%rsp)
    0000003a: 	leaq	(%rdi,%rax), %rbx
    0000003e: 	callq	clock@PLT # Offset: 62
    00000043: 	movq	%rax, start_time(%rip)
    0000004a: 	movl	iterations(%rip), %eax
    00000050: 	testl	%eax, %eax
    00000052: 	jle	.Ltmp456 # Offset: 82
    00000058: 	movzbl	%r15b, %r15d
    0000005c: 	leal	-0x7(%r14), %r12d
    00000060: 	movq	%r15, %rax
    00000063: 	shlq	$0x8, %rax
    00000067: 	orq	%r15, %rax
    0000006a: 	xorl	%r15d, %r15d
    0000006d: 	movq	%rax, %rdx
    00000070: 	shlq	$0x10, %rdx
    00000074: 	orq	%rax, %rdx
    00000077: 	movq	%rdx, %rax
    0000007a: 	shlq	$0x20, %rax
    0000007e: 	orq	%rdx, %rax
    00000081: 	movq	%rax, %xmm1
    00000086: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp459:
    00000090: 	cmpl	$0x80, %r14d
    00000097: 	jg	.Ltmp457 # Offset: 151
    0000009d: 	nopl	(%rax) # Size: 3
.Ltmp472:
    000000a0: 	xorl	%eax, %eax
.Ltmp482:
    000000a2: 	cmpl	%eax, %r14d
    000000a5: 	jle	.Ltmp458 # Offset: 165
    000000ab: 	leal	-0x1(%r14), %edx
    000000af: 	movzbl	%bpl, %esi
    000000b3: 	movq	%xmm1, 0x8(%rsp)
    000000b9: 	addl	$0x1, %r15d
    000000bd: 	subl	%eax, %edx
    000000bf: 	cltq
    000000c1: 	addq	$0x1, %rdx
    000000c5: 	leaq	(%r13,%rax), %rdi
    000000ca: 	callq	memset@PLT # Offset: 202
    000000cf: 	cmpl	%r15d, iterations(%rip)
    000000d6: 	movq	0x8(%rsp), %xmm1
    000000dc: 	jg	.Ltmp459 # Offset: 220
.Ltmp456:
    000000de: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000000e5: 	movq	"_ZL7gLabels/1"+48(%rip), %r15
    000000ec: 	subq	$0x20, %rax
    000000f0: 	cmpq	%rax, %r15
    000000f3: 	je	.Ltmp460 # Offset: 243
    000000f9: 	movq	0x18(%rsp), %rax
    000000fe: 	leaq	0x10(%r15), %rdi
    00000102: 	movq	%rdi, (%r15)
    00000105: 	movq	(%rax), %r8
    00000108: 	movq	0x8(%rax), %r14
    0000010c: 	movq	%r8, %rax
    0000010f: 	addq	%r14, %rax
    00000112: 	je	.Ltmp461 # Offset: 274
    00000114: 	testq	%r8, %r8
    00000117: 	je	.Ltmp462 # Offset: 279
.Ltmp461:
    0000011d: 	movq	%r14, 0x20(%rsp)
    00000122: 	cmpq	$0xf, %r14
    00000126: 	ja	.Ltmp463 # Offset: 294
    0000012c: 	cmpq	$0x1, %r14
    00000130: 	jne	.Ltmp464 # Offset: 304
    00000136: 	movzbl	(%r8), %eax
    0000013a: 	movb	%al, 0x10(%r15)
.Ltmp487:
    0000013e: 	movq	%r14, 0x8(%r15)
    00000142: 	movb	$0x0, (%rdi,%r14)
    00000147: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000014e: 	addq	$0x20, %rax
    00000152: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp489:
    00000159: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000160: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000167: 	je	.Ltmp465 # Offset: 359
.Ltmp488:
    0000016d: 	movq	-0x20(%rax), %r14
    00000171: 	callq	clock@PLT # Offset: 369
    00000176: 	pxor	%xmm0, %xmm0
    0000017a: 	movq	%rax, end_time(%rip)
    00000181: 	movq	%r14, %rdi
    00000184: 	subq	start_time(%rip), %rax
    0000018b: 	cvtsi2sd	%rax, %xmm0
    00000190: 	divsd	DATAat0x12360(%rip), %xmm0
    00000198: 	callq	_Z13record_resultdPKc # Offset: 408
    0000019d: 	cmpq	%rbx, %r13
    000001a0: 	je	.Ltmp466 # Offset: 416
    000001a6: 	movq	0x10(%rsp), %rcx
    000001ab: 	movq	%r13, %rax
    000001ae: 	leaq	-0x1(%rcx), %rdx
    000001b2: 	cmpq	$0xe, %rdx
    000001b6: 	jbe	.Ltmp467 # Offset: 438
    000001bc: 	pxor	%xmm6, %xmm6
    000001c0: 	pxor	%xmm5, %xmm5
    000001c4: 	pxor	%xmm4, %xmm4
    000001c8: 	andq	$-0x10, %rcx
    000001cc: 	movq	%rcx, %rdx
    000001cf: 	pxor	%xmm3, %xmm3
    000001d3: 	addq	%r13, %rdx
    000001d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp468:
    000001e0: 	movdqu	(%rax), %xmm1
    000001e4: 	addq	$0x10, %rax
    000001e8: 	movdqa	%xmm1, %xmm0
    000001ec: 	punpckhbw	%xmm5, %xmm1
    000001f0: 	punpcklbw	%xmm5, %xmm0
    000001f4: 	movdqa	%xmm1, %xmm2
    000001f8: 	punpckhwd	%xmm4, %xmm1
    000001fc: 	movdqa	%xmm0, %xmm7
    00000200: 	punpckhwd	%xmm4, %xmm0
    00000204: 	punpcklwd	%xmm4, %xmm2
    00000208: 	movdqa	%xmm0, %xmm8
    0000020d: 	punpcklwd	%xmm4, %xmm7
    00000211: 	punpckldq	%xmm3, %xmm0
    00000215: 	punpckhdq	%xmm3, %xmm8
    0000021a: 	paddq	%xmm8, %xmm0
    0000021f: 	movdqa	%xmm7, %xmm8
    00000224: 	punpckldq	%xmm3, %xmm7
    00000228: 	punpckhdq	%xmm3, %xmm8
    0000022d: 	paddq	%xmm8, %xmm7
    00000232: 	paddq	%xmm7, %xmm0
    00000236: 	movdqa	%xmm2, %xmm7
    0000023a: 	punpckldq	%xmm3, %xmm2
    0000023e: 	punpckhdq	%xmm3, %xmm7
    00000242: 	paddq	%xmm7, %xmm2
    00000246: 	movdqa	%xmm1, %xmm7
    0000024a: 	punpckhdq	%xmm3, %xmm1
    0000024e: 	punpckldq	%xmm3, %xmm7
    00000252: 	paddq	%xmm6, %xmm1
    00000256: 	paddq	%xmm7, %xmm2
    0000025a: 	paddq	%xmm2, %xmm0
    0000025e: 	movdqa	%xmm0, %xmm6
    00000262: 	paddq	%xmm1, %xmm6
    00000266: 	cmpq	%rdx, %rax
    00000269: 	jne	.Ltmp468 # Offset: 617
    0000026f: 	movq	0x10(%rsp), %rcx
    00000274: 	movdqa	%xmm6, %xmm0
    00000278: 	psrldq	$0x8, %xmm0
    0000027d: 	movq	%rcx, %rdx
    00000280: 	paddq	%xmm0, %xmm6
    00000284: 	andq	$-0x10, %rdx
    00000288: 	movq	%xmm6, %rax
    0000028d: 	addq	%rdx, %r13
    00000290: 	cmpq	%rdx, %rcx
    00000293: 	je	.Ltmp469 # Offset: 659
.Ltmp494:
    00000299: 	movzbl	(%r13), %edx
    0000029e: 	addq	%rdx, %rax
    000002a1: 	leaq	0x1(%r13), %rdx
    000002a5: 	cmpq	%rdx, %rbx
    000002a8: 	je	.Ltmp469 # Offset: 680
    000002ae: 	movzbl	0x1(%r13), %edx
    000002b3: 	addq	%rdx, %rax
    000002b6: 	leaq	0x2(%r13), %rdx
    000002ba: 	cmpq	%rdx, %rbx
    000002bd: 	je	.Ltmp469 # Offset: 701
    000002c3: 	movzbl	0x2(%r13), %edx
    000002c8: 	addq	%rdx, %rax
    000002cb: 	leaq	0x3(%r13), %rdx
    000002cf: 	cmpq	%rdx, %rbx
    000002d2: 	je	.Ltmp469 # Offset: 722
    000002d8: 	movzbl	0x3(%r13), %edx
    000002dd: 	addq	%rdx, %rax
    000002e0: 	leaq	0x4(%r13), %rdx
    000002e4: 	cmpq	%rdx, %rbx
    000002e7: 	je	.Ltmp469 # Offset: 743
    000002ed: 	movzbl	0x4(%r13), %edx
    000002f2: 	addq	%rdx, %rax
    000002f5: 	leaq	0x5(%r13), %rdx
    000002f9: 	cmpq	%rdx, %rbx
    000002fc: 	je	.Ltmp469 # Offset: 764
    00000302: 	movzbl	0x5(%r13), %edx
    00000307: 	addq	%rdx, %rax
    0000030a: 	leaq	0x6(%r13), %rdx
    0000030e: 	cmpq	%rdx, %rbx
    00000311: 	je	.Ltmp469 # Offset: 785
    00000317: 	movzbl	0x6(%r13), %edx
    0000031c: 	addq	%rdx, %rax
    0000031f: 	leaq	0x7(%r13), %rdx
    00000323: 	cmpq	%rdx, %rbx
    00000326: 	je	.Ltmp469 # Offset: 806
    0000032c: 	movzbl	0x7(%r13), %edx
    00000331: 	addq	%rdx, %rax
    00000334: 	leaq	0x8(%r13), %rdx
    00000338: 	cmpq	%rdx, %rbx
    0000033b: 	je	.Ltmp469 # Offset: 827
    0000033d: 	movzbl	0x8(%r13), %edx
    00000342: 	addq	%rdx, %rax
    00000345: 	leaq	0x9(%r13), %rdx
    00000349: 	cmpq	%rdx, %rbx
    0000034c: 	je	.Ltmp469 # Offset: 844
    0000034e: 	movzbl	0x9(%r13), %edx
    00000353: 	addq	%rdx, %rax
    00000356: 	leaq	0xa(%r13), %rdx
    0000035a: 	cmpq	%rdx, %rbx
    0000035d: 	je	.Ltmp469 # Offset: 861
    0000035f: 	movzbl	0xa(%r13), %edx
    00000364: 	addq	%rdx, %rax
    00000367: 	leaq	0xb(%r13), %rdx
    0000036b: 	cmpq	%rdx, %rbx
    0000036e: 	je	.Ltmp469 # Offset: 878
    00000370: 	movzbl	0xb(%r13), %edx
    00000375: 	addq	%rdx, %rax
    00000378: 	leaq	0xc(%r13), %rdx
    0000037c: 	cmpq	%rdx, %rbx
    0000037f: 	je	.Ltmp469 # Offset: 895
    00000381: 	movzbl	0xc(%r13), %edx
    00000386: 	addq	%rdx, %rax
    00000389: 	leaq	0xd(%r13), %rdx
    0000038d: 	cmpq	%rdx, %rbx
    00000390: 	je	.Ltmp469 # Offset: 912
    00000392: 	movzbl	0xd(%r13), %edx
    00000397: 	addq	%rdx, %rax
    0000039a: 	leaq	0xe(%r13), %rdx
    0000039e: 	cmpq	%rdx, %rbx
    000003a1: 	je	.Ltmp469 # Offset: 929
    000003a3: 	movzbl	0xe(%r13), %edx
    000003a8: 	addq	%rdx, %rax
    000003ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp469:
    000003b0: 	movzbl	init_value(%rip), %edx
    000003b7: 	imulq	0x10(%rsp), %rdx
    000003bd: 	cmpq	%rax, %rdx
    000003c0: 	je	.Ltmp470 # Offset: 960
    000003c6: 	movq	0x28(%rsp), %rax
    000003cb: 	subq	%fs:0x28, %rax
    000003d4: 	jne	.Ltmp471 # Offset: 980
    000003da: 	movq	0x18(%rsp), %rax
    000003df: 	leaq	DATAat0x12278(%rip), %rsi
    000003e6: 	movl	$0x1, %edi
    000003eb: 	movq	(%rax), %rdx
    000003ee: 	addq	$0x38, %rsp
    000003f2: 	xorl	%eax, %eax
    000003f4: 	popq	%rbx
    000003f5: 	popq	%rbp
    000003f6: 	popq	%r12
    000003f8: 	popq	%r13
    000003fa: 	popq	%r14
    000003fc: 	popq	%r15
    000003fe: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1022
    00000403: 	nopl	(%rax,%rax) # Size: 5
.Ltmp458:
    00000408: 	addl	$0x1, %r15d
    0000040c: 	cmpl	%r15d, iterations(%rip)
    00000413: 	jle	.Ltmp456 # Offset: 1043
    00000419: 	cmpl	$0x80, %r14d
    00000420: 	jle	.Ltmp472 # Offset: 1056
.Ltmp457:
    00000426: 	movq	%r13, %rdx
    00000429: 	xorl	%eax, %eax
    0000042b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp474:
    00000430: 	testb	$0x7, %dl
    00000433: 	je	.Ltmp473 # Offset: 1075
    00000435: 	addl	$0x1, %eax
    00000438: 	movb	%bpl, (%rdx)
    0000043b: 	addq	$0x1, %rdx
    0000043f: 	cmpl	%eax, %r14d
    00000442: 	jne	.Ltmp474 # Offset: 1090
.Ltmp473:
    00000444: 	cmpl	%r12d, %eax
    00000447: 	jge	.Ltmp475 # Offset: 1095
    0000044d: 	movslq	%eax, %rdx
    00000450: 	leaq	(%r13,%rdx), %rsi
    00000455: 	andl	$0x3f, %esi
    00000458: 	je	.Ltmp476 # Offset: 1112
    0000045e: 	leal	0x8(%rax), %edx
    00000461: 	movslq	%edx, %rdx
    00000464: 	jmp	.Ltmp477 # Offset: 1124
    00000466: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp479:
    00000470: 	leaq	(%r13,%rdx), %rsi
    00000475: 	addq	$0x8, %rdx
    00000479: 	andl	$0x3f, %esi
    0000047c: 	je	.Ltmp478 # Offset: 1148
.Ltmp477:
    0000047e: 	movq	%xmm1, -0x8(%r13,%rdx)
    00000485: 	movl	%edx, %eax
    00000487: 	cmpl	%edx, %r12d
    0000048a: 	jg	.Ltmp479 # Offset: 1162
.Ltmp478:
    0000048c: 	leal	-0x40(%r14), %edx
    00000490: 	cmpl	%edx, %eax
    00000492: 	jge	.Ltmp480 # Offset: 1170
    00000494: 	movslq	%eax, %rdx
.Ltmp492:
    00000497: 	leal	-0x41(%r14), %r9d
    0000049b: 	movdqa	%xmm1, %xmm0
    0000049f: 	addq	%r13, %rdx
    000004a2: 	xorl	%esi, %esi
    000004a4: 	subl	%eax, %r9d
    000004a7: 	punpcklqdq	%xmm0, %xmm0
    000004ab: 	shrl	$0x6, %r9d
    000004af: 	leal	0x1(%r9), %edi
    000004b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp481:
    000004b8: 	addl	$0x1, %esi
    000004bb: 	movups	%xmm0, (%rdx)
    000004be: 	addq	$0x40, %rdx
    000004c2: 	movups	%xmm0, -0x30(%rdx)
    000004c6: 	movups	%xmm0, -0x20(%rdx)
    000004ca: 	movups	%xmm0, -0x10(%rdx)
    000004ce: 	cmpl	%esi, %edi
    000004d0: 	ja	.Ltmp481 # Offset: 1232
    000004d2: 	shll	$0x6, %r9d
    000004d6: 	leal	0x40(%rax,%r9), %eax
.Ltmp480:
    000004db: 	cmpl	%r12d, %eax
    000004de: 	jge	.Ltmp482 # Offset: 1246
.Ltmp493:
    000004e4: 	leal	-0x8(%r14), %edx
    000004e8: 	subl	%eax, %edx
    000004ea: 	movl	%edx, %edi
    000004ec: 	shrl	$0x3, %edi
    000004ef: 	leal	0x1(%rdi), %r9d
    000004f3: 	cmpl	$0x7, %edx
    000004f6: 	jbe	.Ltmp483 # Offset: 1270
    000004fc: 	movl	%r9d, %edx
    000004ff: 	movslq	%eax, %rsi
    00000502: 	movdqa	%xmm1, %xmm0
    00000506: 	shrl	%edx
    00000508: 	addq	%r13, %rsi
    0000050b: 	punpcklqdq	%xmm0, %xmm0
    0000050f: 	leal	-0x1(%rdx), %r10d
    00000513: 	leaq	0x10(%rsi), %rdx
    00000517: 	shlq	$0x4, %r10
    0000051b: 	addq	%rdx, %r10
    0000051e: 	jmp	.Ltmp484 # Offset: 1310
.Ltmp485:
    00000520: 	addq	$0x10, %rdx
.Ltmp484:
    00000524: 	movups	%xmm0, (%rsi)
    00000527: 	movq	%rdx, %rsi
    0000052a: 	cmpq	%r10, %rdx
    0000052d: 	jne	.Ltmp485 # Offset: 1325
    0000052f: 	movl	%r9d, %esi
    00000532: 	andl	$-0x2, %esi
    00000535: 	leal	(%rax,%rsi,8), %edx
    00000538: 	cmpl	%esi, %r9d
    0000053b: 	je	.Ltmp486 # Offset: 1339
.Ltmp491:
    0000053d: 	movslq	%edx, %rdx
    00000540: 	movq	%xmm1, (%r13,%rdx)
.Ltmp486:
    00000547: 	leal	0x8(%rax,%rdi,8), %eax
    0000054b: 	jmp	.Ltmp482 # Offset: 1355
.Ltmp463:
    00000550: 	movq	%r15, %rdi
    00000553: 	leaq	0x20(%rsp), %rsi
    00000558: 	xorl	%edx, %edx
    0000055a: 	movq	%r8, 0x8(%rsp)
    0000055f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1375
    00000564: 	movq	0x8(%rsp), %r8
    00000569: 	movq	%rax, (%r15)
    0000056c: 	movq	%rax, %rdi
    0000056f: 	movq	0x20(%rsp), %rax
    00000574: 	movq	%rax, 0x10(%r15)
.Ltmp490:
    00000578: 	movq	%r14, %rdx
    0000057b: 	movq	%r8, %rsi
    0000057e: 	callq	memcpy@PLT # Offset: 1406
    00000583: 	movq	0x20(%rsp), %r14
    00000588: 	movq	(%r15), %rdi
    0000058b: 	jmp	.Ltmp487 # Offset: 1419
.Ltmp470:
    00000590: 	movq	0x28(%rsp), %rax
    00000595: 	subq	%fs:0x28, %rax
    0000059e: 	jne	.Ltmp471 # Offset: 1438
    000005a4: 	addq	$0x38, %rsp
    000005a8: 	popq	%rbx
    000005a9: 	popq	%rbp
    000005aa: 	popq	%r12
    000005ac: 	popq	%r13
    000005ae: 	popq	%r14
    000005b0: 	popq	%r15
    000005b2: 	retq # Offset: 1458
.Ltmp465:
    000005b3: 	movq	-0x8(%rdx), %rax
    000005b7: 	addq	$0x200, %rax
    000005bd: 	jmp	.Ltmp488 # Offset: 1469
.Ltmp460:
    000005c2: 	movq	0x18(%rsp), %rsi
    000005c7: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000005ce: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1486
    000005d3: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000005da: 	jmp	.Ltmp489 # Offset: 1498
.Ltmp464:
    000005df: 	testq	%r14, %r14
    000005e2: 	je	.Ltmp487 # Offset: 1506
    000005e8: 	jmp	.Ltmp490 # Offset: 1512
    000005ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp483:
    000005f0: 	movl	%eax, %edx
    000005f2: 	jmp	.Ltmp491 # Offset: 1522
.Ltmp475:
    000005f7: 	leal	-0x40(%r14), %esi
    000005fb: 	movslq	%eax, %rdx
    000005fe: 	cmpl	%esi, %eax
    00000600: 	jl	.Ltmp492 # Offset: 1536
    00000606: 	jmp	.Ltmp482 # Offset: 1542
.Ltmp466:
    0000060b: 	xorl	%eax, %eax
    0000060d: 	jmp	.Ltmp469 # Offset: 1549
.Ltmp476:
    00000612: 	leal	-0x40(%r14), %esi
    00000616: 	cmpl	%esi, %eax
    00000618: 	jl	.Ltmp492 # Offset: 1560
    0000061e: 	jmp	.Ltmp493 # Offset: 1566
.Ltmp467:
    00000623: 	xorl	%eax, %eax
    00000625: 	jmp	.Ltmp494 # Offset: 1573
.Ltmp471:
    0000062a: 	callq	__stack_chk_fail@PLT # Offset: 1578
.Ltmp462:
    0000062f: 	leaq	DATAat0x12008(%rip), %rdi
    00000636: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1590
DWARF CFI Instructions:
    <empty>
End of Function "_Z29test_forloop_fill_64cachelineIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z29test_forloop_fill_32cachelineIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x7fd0
  Size        : 0x5fb
  MaxSize     : 0x600
  Offset      : 0x7fd0
  Section     : .text
  Orc Section : .local.text._Z29test_forloop_fill_32cachelineIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movl	%edx, %r15d
    00000009: 	pushq	%r14
    0000000b: 	movl	%esi, %r14d
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	movl	%edx, %ebp
    00000015: 	pushq	%rbx
    00000016: 	movq	%rdi, %rbx
    00000019: 	subq	$0x38, %rsp
    0000001d: 	movq	%rcx, 0x10(%rsp)
    00000022: 	movq	%fs:0x28, %rax
    0000002b: 	movq	%rax, 0x28(%rsp)
    00000030: 	xorl	%eax, %eax
    00000032: 	movslq	%esi, %rax
    00000035: 	movq	%rax, (%rsp)
    00000039: 	addq	%rdi, %rax
    0000003c: 	movq	%rax, 0x8(%rsp)
    00000041: 	callq	clock@PLT # Offset: 65
    00000046: 	movq	%rax, start_time(%rip)
    0000004d: 	movl	iterations(%rip), %eax
    00000053: 	testl	%eax, %eax
    00000055: 	jle	.Ltmp495 # Offset: 85
    0000005b: 	movzbl	%r15b, %r15d
    0000005f: 	leal	-0x3(%r14), %r13d
    00000063: 	movl	%r15d, %eax
    00000066: 	shll	$0x8, %eax
    00000069: 	orl	%r15d, %eax
    0000006c: 	xorl	%r15d, %r15d
    0000006f: 	movl	%eax, %ecx
    00000071: 	shll	$0x10, %ecx
    00000074: 	orl	%eax, %ecx
    00000076: 	movl	%ecx, %r12d
    00000079: 	jmp	.Ltmp496 # Offset: 121
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp498:
    00000080: 	xorl	%eax, %eax
.Ltmp508:
    00000082: 	cmpl	%eax, %r14d
    00000085: 	jle	.Ltmp497 # Offset: 133
    00000087: 	leal	-0x1(%r14), %edx
    0000008b: 	movzbl	%bpl, %esi
    0000008f: 	subl	%eax, %edx
    00000091: 	cltq
    00000093: 	addq	$0x1, %rdx
    00000097: 	leaq	(%rbx,%rax), %rdi
    0000009b: 	callq	memset@PLT # Offset: 155
.Ltmp497:
    000000a0: 	addl	$0x1, %r15d
    000000a4: 	cmpl	%r15d, iterations(%rip)
    000000ab: 	jle	.Ltmp495 # Offset: 171
.Ltmp496:
    000000b1: 	cmpl	$0x80, %r14d
    000000b8: 	jle	.Ltmp498 # Offset: 184
    000000ba: 	movq	%rbx, %rdx
    000000bd: 	xorl	%eax, %eax
    000000bf: 	nop # Size: 1
.Ltmp500:
    000000c0: 	testb	$0x3, %dl
    000000c3: 	je	.Ltmp499 # Offset: 195
    000000c5: 	addl	$0x1, %eax
    000000c8: 	movb	%bpl, (%rdx)
    000000cb: 	addq	$0x1, %rdx
    000000cf: 	cmpl	%eax, %r14d
    000000d2: 	jne	.Ltmp500 # Offset: 210
.Ltmp499:
    000000d4: 	cmpl	%r13d, %eax
    000000d7: 	jge	.Ltmp501 # Offset: 215
    000000dd: 	movslq	%eax, %rdx
    000000e0: 	leaq	(%rbx,%rdx), %rsi
    000000e4: 	andl	$0x3f, %esi
    000000e7: 	je	.Ltmp502 # Offset: 231
    000000ed: 	leal	0x4(%rax), %edx
    000000f0: 	movslq	%edx, %rdx
    000000f3: 	jmp	.Ltmp503 # Offset: 243
    000000f5: 	nopl	(%rax) # Size: 3
.Ltmp505:
    000000f8: 	leaq	(%rbx,%rdx), %rsi
    000000fc: 	addq	$0x4, %rdx
    00000100: 	andl	$0x3f, %esi
    00000103: 	je	.Ltmp504 # Offset: 259
.Ltmp503:
    00000105: 	movl	%r12d, -0x4(%rbx,%rdx)
    0000010a: 	movl	%edx, %eax
    0000010c: 	cmpl	%edx, %r13d
    0000010f: 	jg	.Ltmp505 # Offset: 271
.Ltmp504:
    00000111: 	leal	-0x3f(%r14), %edx
    00000115: 	cmpl	%edx, %eax
    00000117: 	jge	.Ltmp506 # Offset: 279
    00000119: 	movslq	%eax, %rdx
.Ltmp530:
    0000011c: 	leal	-0x40(%r14), %r10d
    00000120: 	movd	%r12d, %xmm5
    00000125: 	addq	%rbx, %rdx
    00000128: 	xorl	%esi, %esi
    0000012a: 	subl	%eax, %r10d
    0000012d: 	pshufd	$0x0, %xmm5, %xmm0
    00000132: 	shrl	$0x6, %r10d
    00000136: 	leal	0x1(%r10), %edi
    0000013a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp507:
    00000140: 	addl	$0x1, %esi
    00000143: 	movups	%xmm0, (%rdx)
    00000146: 	addq	$0x40, %rdx
    0000014a: 	movups	%xmm0, -0x30(%rdx)
    0000014e: 	movups	%xmm0, -0x20(%rdx)
    00000152: 	movups	%xmm0, -0x10(%rdx)
    00000156: 	cmpl	%edi, %esi
    00000158: 	jb	.Ltmp507 # Offset: 344
    0000015a: 	shll	$0x6, %r10d
    0000015e: 	leal	0x40(%rax,%r10), %eax
.Ltmp506:
    00000163: 	cmpl	%r13d, %eax
    00000166: 	jge	.Ltmp508 # Offset: 358
.Ltmp531:
    0000016c: 	leal	-0x4(%r14), %edx
    00000170: 	subl	%eax, %edx
    00000172: 	movl	%edx, %r11d
    00000175: 	shrl	$0x2, %r11d
    00000179: 	leal	0x1(%r11), %r10d
    0000017d: 	cmpl	$0xb, %edx
    00000180: 	jbe	.Ltmp509 # Offset: 384
    00000186: 	movl	%r10d, %edx
    00000189: 	movslq	%eax, %rsi
    0000018c: 	movd	%r12d, %xmm5
    00000191: 	shrl	$0x2, %edx
    00000194: 	addq	%rbx, %rsi
    00000197: 	pshufd	$0x0, %xmm5, %xmm0
    0000019c: 	leal	-0x1(%rdx), %edi
    0000019f: 	leaq	0x10(%rsi), %rdx
    000001a3: 	shlq	$0x4, %rdi
    000001a7: 	addq	%rdx, %rdi
    000001aa: 	jmp	.Ltmp510 # Offset: 426
    000001ac: 	nopl	(%rax) # Size: 4
.Ltmp511:
    000001b0: 	addq	$0x10, %rdx
.Ltmp510:
    000001b4: 	movups	%xmm0, (%rsi)
    000001b7: 	movq	%rdx, %rsi
    000001ba: 	cmpq	%rdi, %rdx
    000001bd: 	jne	.Ltmp511 # Offset: 445
    000001bf: 	movl	%r10d, %esi
    000001c2: 	andl	$-0x4, %esi
    000001c5: 	leal	(%rax,%rsi,4), %edx
    000001c8: 	cmpl	%r10d, %esi
    000001cb: 	je	.Ltmp512 # Offset: 459
.Ltmp529:
    000001cd: 	movslq	%edx, %rsi
    000001d0: 	movl	%r12d, (%rbx,%rsi)
    000001d4: 	leal	0x4(%rdx), %esi
    000001d7: 	cmpl	%esi, %r13d
    000001da: 	jle	.Ltmp512 # Offset: 474
    000001dc: 	movslq	%esi, %rsi
    000001df: 	addl	$0x8, %edx
    000001e2: 	movl	%r12d, (%rbx,%rsi)
    000001e6: 	cmpl	%edx, %r13d
    000001e9: 	jle	.Ltmp512 # Offset: 489
    000001eb: 	movslq	%edx, %rdx
    000001ee: 	movl	%r12d, (%rbx,%rdx)
.Ltmp512:
    000001f2: 	leal	0x4(%rax,%r11,4), %eax
    000001f7: 	jmp	.Ltmp508 # Offset: 503
    000001fc: 	nopl	(%rax) # Size: 4
.Ltmp495:
    00000200: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000207: 	movq	"_ZL7gLabels/1"+48(%rip), %r15
    0000020e: 	subq	$0x20, %rax
    00000212: 	cmpq	%rax, %r15
    00000215: 	je	.Ltmp513 # Offset: 533
    0000021b: 	movq	0x10(%rsp), %rax
    00000220: 	leaq	0x10(%r15), %rdi
    00000224: 	movq	%rdi, (%r15)
    00000227: 	movq	(%rax), %r8
    0000022a: 	movq	0x8(%rax), %r14
    0000022e: 	movq	%r8, %rax
    00000231: 	addq	%r14, %rax
    00000234: 	je	.Ltmp514 # Offset: 564
    00000236: 	testq	%r8, %r8
    00000239: 	je	.Ltmp515 # Offset: 569
.Ltmp514:
    0000023f: 	movq	%r14, 0x20(%rsp)
    00000244: 	cmpq	$0xf, %r14
    00000248: 	ja	.Ltmp516 # Offset: 584
    0000024e: 	cmpq	$0x1, %r14
    00000252: 	jne	.Ltmp517 # Offset: 594
    00000258: 	movzbl	(%r8), %eax
    0000025c: 	movb	%al, 0x10(%r15)
.Ltmp525:
    00000260: 	movq	%r14, 0x8(%r15)
    00000264: 	movb	$0x0, (%rdi,%r14)
    00000269: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000270: 	addq	$0x20, %rax
    00000274: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp527:
    0000027b: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000282: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000289: 	je	.Ltmp518 # Offset: 649
.Ltmp526:
    0000028f: 	movq	-0x20(%rax), %r14
    00000293: 	callq	clock@PLT # Offset: 659
    00000298: 	pxor	%xmm0, %xmm0
    0000029c: 	movq	%rax, end_time(%rip)
    000002a3: 	movq	%r14, %rdi
    000002a6: 	subq	start_time(%rip), %rax
    000002ad: 	cvtsi2sd	%rax, %xmm0
    000002b2: 	divsd	DATAat0x12360(%rip), %xmm0
    000002ba: 	callq	_Z13record_resultdPKc # Offset: 698
    000002bf: 	cmpq	0x8(%rsp), %rbx
    000002c4: 	je	.Ltmp519 # Offset: 708
    000002ca: 	movq	(%rsp), %rcx
    000002ce: 	movq	%rbx, %rax
    000002d1: 	leaq	-0x1(%rcx), %rdx
    000002d5: 	cmpq	$0xe, %rdx
    000002d9: 	jbe	.Ltmp520 # Offset: 729
    000002df: 	pxor	%xmm6, %xmm6
    000002e3: 	pxor	%xmm5, %xmm5
    000002e7: 	pxor	%xmm4, %xmm4
    000002eb: 	andq	$-0x10, %rcx
    000002ef: 	movq	%rcx, %rdx
    000002f2: 	pxor	%xmm3, %xmm3
    000002f6: 	addq	%rbx, %rdx
    000002f9: 	nopl	(%rax) # Size: 7
.Ltmp521:
    00000300: 	movdqu	(%rax), %xmm1
    00000304: 	addq	$0x10, %rax
    00000308: 	movdqa	%xmm1, %xmm0
    0000030c: 	punpckhbw	%xmm5, %xmm1
    00000310: 	punpcklbw	%xmm5, %xmm0
    00000314: 	movdqa	%xmm1, %xmm2
    00000318: 	punpckhwd	%xmm4, %xmm1
    0000031c: 	movdqa	%xmm0, %xmm7
    00000320: 	punpckhwd	%xmm4, %xmm0
    00000324: 	punpcklwd	%xmm4, %xmm2
    00000328: 	movdqa	%xmm0, %xmm8
    0000032d: 	punpcklwd	%xmm4, %xmm7
    00000331: 	punpckldq	%xmm3, %xmm0
    00000335: 	punpckhdq	%xmm3, %xmm8
    0000033a: 	paddq	%xmm8, %xmm0
    0000033f: 	movdqa	%xmm7, %xmm8
    00000344: 	punpckldq	%xmm3, %xmm7
    00000348: 	punpckhdq	%xmm3, %xmm8
    0000034d: 	paddq	%xmm8, %xmm7
    00000352: 	paddq	%xmm7, %xmm0
    00000356: 	movdqa	%xmm2, %xmm7
    0000035a: 	punpckldq	%xmm3, %xmm2
    0000035e: 	punpckhdq	%xmm3, %xmm7
    00000362: 	paddq	%xmm7, %xmm2
    00000366: 	movdqa	%xmm1, %xmm7
    0000036a: 	punpckhdq	%xmm3, %xmm1
    0000036e: 	punpckldq	%xmm3, %xmm7
    00000372: 	paddq	%xmm6, %xmm1
    00000376: 	paddq	%xmm7, %xmm2
    0000037a: 	paddq	%xmm2, %xmm0
    0000037e: 	movdqa	%xmm0, %xmm6
    00000382: 	paddq	%xmm1, %xmm6
    00000386: 	cmpq	%rdx, %rax
    00000389: 	jne	.Ltmp521 # Offset: 905
    0000038f: 	movq	(%rsp), %rcx
    00000393: 	movdqa	%xmm6, %xmm0
    00000397: 	psrldq	$0x8, %xmm0
    0000039c: 	movq	%rcx, %rdx
    0000039f: 	paddq	%xmm0, %xmm6
    000003a3: 	andq	$-0x10, %rdx
    000003a7: 	movq	%xmm6, %rax
    000003ac: 	addq	%rdx, %rbx
    000003af: 	cmpq	%rdx, %rcx
    000003b2: 	je	.Ltmp522 # Offset: 946
.Ltmp532:
    000003b8: 	movzbl	(%rbx), %edx
    000003bb: 	movq	0x8(%rsp), %rcx
    000003c0: 	addq	%rdx, %rax
    000003c3: 	leaq	0x1(%rbx), %rdx
    000003c7: 	cmpq	%rdx, %rcx
    000003ca: 	je	.Ltmp522 # Offset: 970
    000003d0: 	movzbl	0x1(%rbx), %edx
    000003d4: 	addq	%rdx, %rax
    000003d7: 	leaq	0x2(%rbx), %rdx
    000003db: 	cmpq	%rdx, %rcx
    000003de: 	je	.Ltmp522 # Offset: 990
    000003e4: 	movzbl	0x2(%rbx), %edx
    000003e8: 	addq	%rdx, %rax
    000003eb: 	leaq	0x3(%rbx), %rdx
    000003ef: 	cmpq	%rdx, %rcx
    000003f2: 	je	.Ltmp522 # Offset: 1010
    000003f8: 	movzbl	0x3(%rbx), %edx
    000003fc: 	addq	%rdx, %rax
    000003ff: 	leaq	0x4(%rbx), %rdx
    00000403: 	cmpq	%rdx, %rcx
    00000406: 	je	.Ltmp522 # Offset: 1030
    0000040c: 	movzbl	0x4(%rbx), %edx
    00000410: 	addq	%rdx, %rax
    00000413: 	leaq	0x5(%rbx), %rdx
    00000417: 	cmpq	%rdx, %rcx
    0000041a: 	je	.Ltmp522 # Offset: 1050
    00000420: 	movzbl	0x5(%rbx), %edx
    00000424: 	addq	%rdx, %rax
    00000427: 	leaq	0x6(%rbx), %rdx
    0000042b: 	cmpq	%rdx, %rcx
    0000042e: 	je	.Ltmp522 # Offset: 1070
    00000434: 	movzbl	0x6(%rbx), %edx
    00000438: 	addq	%rdx, %rax
    0000043b: 	leaq	0x7(%rbx), %rdx
    0000043f: 	cmpq	%rdx, %rcx
    00000442: 	je	.Ltmp522 # Offset: 1090
    00000444: 	movzbl	0x7(%rbx), %edx
    00000448: 	addq	%rdx, %rax
    0000044b: 	leaq	0x8(%rbx), %rdx
    0000044f: 	cmpq	%rdx, %rcx
    00000452: 	je	.Ltmp522 # Offset: 1106
    00000454: 	movzbl	0x8(%rbx), %edx
    00000458: 	addq	%rdx, %rax
    0000045b: 	leaq	0x9(%rbx), %rdx
    0000045f: 	cmpq	%rdx, %rcx
    00000462: 	je	.Ltmp522 # Offset: 1122
    00000464: 	movzbl	0x9(%rbx), %edx
    00000468: 	addq	%rdx, %rax
    0000046b: 	leaq	0xa(%rbx), %rdx
    0000046f: 	cmpq	%rdx, %rcx
    00000472: 	je	.Ltmp522 # Offset: 1138
    00000474: 	movzbl	0xa(%rbx), %edx
    00000478: 	addq	%rdx, %rax
    0000047b: 	leaq	0xb(%rbx), %rdx
    0000047f: 	cmpq	%rdx, %rcx
    00000482: 	je	.Ltmp522 # Offset: 1154
    00000484: 	movzbl	0xb(%rbx), %edx
    00000488: 	addq	%rdx, %rax
    0000048b: 	leaq	0xc(%rbx), %rdx
    0000048f: 	cmpq	%rdx, %rcx
    00000492: 	je	.Ltmp522 # Offset: 1170
    00000494: 	movzbl	0xc(%rbx), %edx
    00000498: 	addq	%rdx, %rax
    0000049b: 	leaq	0xd(%rbx), %rdx
    0000049f: 	cmpq	%rdx, %rcx
    000004a2: 	je	.Ltmp522 # Offset: 1186
    000004a4: 	movzbl	0xd(%rbx), %edx
    000004a8: 	addq	%rdx, %rax
    000004ab: 	leaq	0xe(%rbx), %rdx
    000004af: 	cmpq	%rdx, %rcx
    000004b2: 	je	.Ltmp522 # Offset: 1202
    000004b4: 	movzbl	0xe(%rbx), %edx
    000004b8: 	addq	%rdx, %rax
    000004bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp522:
    000004c0: 	movzbl	init_value(%rip), %edx
    000004c7: 	imulq	(%rsp), %rdx
    000004cc: 	cmpq	%rax, %rdx
    000004cf: 	je	.Ltmp523 # Offset: 1231
    000004d1: 	movq	0x28(%rsp), %rax
    000004d6: 	subq	%fs:0x28, %rax
    000004df: 	jne	.Ltmp524 # Offset: 1247
    000004e5: 	movq	0x10(%rsp), %rax
    000004ea: 	leaq	DATAat0x12278(%rip), %rsi
    000004f1: 	movl	$0x1, %edi
    000004f6: 	movq	(%rax), %rdx
    000004f9: 	addq	$0x38, %rsp
    000004fd: 	xorl	%eax, %eax
    000004ff: 	popq	%rbx
    00000500: 	popq	%rbp
    00000501: 	popq	%r12
    00000503: 	popq	%r13
    00000505: 	popq	%r14
    00000507: 	popq	%r15
    00000509: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 1289
.Ltmp516:
    0000050e: 	movq	%r15, %rdi
    00000511: 	leaq	0x20(%rsp), %rsi
    00000516: 	xorl	%edx, %edx
    00000518: 	movq	%r8, 0x18(%rsp)
    0000051d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 1309
    00000522: 	movq	0x18(%rsp), %r8
    00000527: 	movq	%rax, (%r15)
    0000052a: 	movq	%rax, %rdi
    0000052d: 	movq	0x20(%rsp), %rax
    00000532: 	movq	%rax, 0x10(%r15)
.Ltmp528:
    00000536: 	movq	%r14, %rdx
    00000539: 	movq	%r8, %rsi
    0000053c: 	callq	memcpy@PLT # Offset: 1340
    00000541: 	movq	0x20(%rsp), %r14
    00000546: 	movq	(%r15), %rdi
    00000549: 	jmp	.Ltmp525 # Offset: 1353
.Ltmp523:
    0000054e: 	movq	0x28(%rsp), %rax
    00000553: 	subq	%fs:0x28, %rax
    0000055c: 	jne	.Ltmp524 # Offset: 1372
    00000562: 	addq	$0x38, %rsp
    00000566: 	popq	%rbx
    00000567: 	popq	%rbp
    00000568: 	popq	%r12
    0000056a: 	popq	%r13
    0000056c: 	popq	%r14
    0000056e: 	popq	%r15
    00000570: 	retq # Offset: 1392
.Ltmp518:
    00000571: 	movq	-0x8(%rdx), %rax
    00000575: 	addq	$0x200, %rax
    0000057b: 	jmp	.Ltmp526 # Offset: 1403
.Ltmp513:
    00000580: 	movq	0x10(%rsp), %rsi
    00000585: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000058c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 1420
    00000591: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000598: 	jmp	.Ltmp527 # Offset: 1432
.Ltmp517:
    0000059d: 	testq	%r14, %r14
    000005a0: 	je	.Ltmp525 # Offset: 1440
    000005a6: 	jmp	.Ltmp528 # Offset: 1446
    000005a8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp509:
    000005b0: 	movl	%eax, %edx
    000005b2: 	jmp	.Ltmp529 # Offset: 1458
.Ltmp501:
    000005b7: 	leal	-0x3f(%r14), %esi
    000005bb: 	movslq	%eax, %rdx
    000005be: 	cmpl	%esi, %eax
    000005c0: 	jl	.Ltmp530 # Offset: 1472
    000005c6: 	jmp	.Ltmp508 # Offset: 1478
.Ltmp519:
    000005cb: 	xorl	%eax, %eax
    000005cd: 	jmp	.Ltmp522 # Offset: 1485
.Ltmp502:
    000005d2: 	leal	-0x3f(%r14), %esi
    000005d6: 	cmpl	%esi, %eax
    000005d8: 	jl	.Ltmp530 # Offset: 1496
    000005de: 	jmp	.Ltmp531 # Offset: 1502
.Ltmp520:
    000005e3: 	xorl	%eax, %eax
    000005e5: 	jmp	.Ltmp532 # Offset: 1509
.Ltmp524:
    000005ea: 	callq	__stack_chk_fail@PLT # Offset: 1514
.Ltmp515:
    000005ef: 	leaq	DATAat0x12008(%rip), %rdi
    000005f6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 1526
DWARF CFI Instructions:
    <empty>
End of Function "_Z29test_forloop_fill_32cachelineIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIjEvv" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x85d0
  Size        : 0x2580
  MaxSize     : 0x2580
  Offset      : 0x85d0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIjEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xb8, %rsp
    00000015: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm7
    0000001d: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0xa8(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000003e: 	movaps	%xmm7, 0x20(%rsp)
    00000043: 	movq	%xmm7, %rbp
    00000048: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm7
    00000050: 	movq	%rax, 0x8(%rsp)
    00000055: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000005c: 	movhlps	%xmm7, %xmm6
    0000005f: 	movaps	%xmm7, 0x30(%rsp)
    00000064: 	movq	%xmm6, %rbx
    00000069: 	movq	%rax, 0x18(%rsp)
    0000006e: 	leaq	0x8(%rbx), %r12
    00000072: 	movq	%xmm6, 0x40(%rsp)
    00000078: 	movq	%xmm7, 0x10(%rsp)
    0000007e: 	cmpq	%r12, %rax
    00000081: 	jbe	.Ltmp533 # Offset: 129
    00000083: 	movq	%rbp, 0x48(%rsp)
    00000088: 	movq	%r12, %r13
    0000008b: 	movq	%rax, %r15
    0000008e: 	nop # Size: 2
.Ltmp536:
    00000090: 	movq	(%r13), %rbp
    00000094: 	leaq	0x200(%rbp), %rbx
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp535:
    000000a0: 	movq	(%rbp), %rdi
    000000a4: 	leaq	0x10(%rbp), %rdx
    000000a8: 	cmpq	%rdx, %rdi
    000000ab: 	je	.Ltmp534 # Offset: 171
    000000b1: 	movq	0x10(%rbp), %rax
    000000b5: 	addq	$0x20, %rbp
    000000b9: 	leaq	0x1(%rax), %rsi
    000000bd: 	callq	_ZdlPvm@PLT # Offset: 189
    000000c2: 	cmpq	%rbp, %rbx
    000000c5: 	jne	.Ltmp535 # Offset: 197
    000000c7: 	addq	$0x8, %r13
    000000cb: 	cmpq	%r13, %r15
    000000ce: 	ja	.Ltmp536 # Offset: 206
.Ltmp680:
    000000d0: 	movq	0x48(%rsp), %rbp
.Ltmp533:
    000000d5: 	movq	0x40(%rsp), %rbx
    000000da: 	cmpq	%rbx, 0x18(%rsp)
    000000df: 	jne	.Ltmp537 # Offset: 223
    000000e1: 	jmp	.Ltmp538 # Offset: 225
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp540:
    000000f0: 	movq	(%rbp), %rdi
    000000f4: 	leaq	0x10(%rbp), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp539 # Offset: 251
    000000fd: 	movq	0x10(%rbp), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp539:
    0000010a: 	addq	$0x20, %rbp
.Ltmp537:
    0000010e: 	cmpq	0x10(%rsp), %rbp
    00000113: 	jne	.Ltmp540 # Offset: 275
    00000115: 	cmpq	%r14, 0x8(%rsp)
    0000011a: 	je	.Ltmp541 # Offset: 282
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp543:
    00000120: 	movq	(%r14), %rdi
    00000123: 	leaq	0x10(%r14), %rax
    00000127: 	cmpq	%rax, %rdi
    0000012a: 	je	.Ltmp542 # Offset: 298
    0000012c: 	movq	0x10(%r14), %rax
    00000130: 	leaq	0x1(%rax), %rsi
    00000134: 	callq	_ZdlPvm@PLT # Offset: 308
.Ltmp542:
    00000139: 	addq	$0x20, %r14
    0000013d: 	cmpq	%r14, 0x8(%rsp)
    00000142: 	jne	.Ltmp543 # Offset: 322
.Ltmp541:
    00000144: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000014b: 	leaq	0x8(%rax), %rbx
    0000014f: 	cmpq	%r12, %rbx
    00000152: 	jbe	.Ltmp544 # Offset: 338
    00000154: 	nopl	(%rax) # Size: 4
.Ltmp545:
    00000158: 	movq	(%r12), %rdi
    0000015c: 	movl	$0x200, %esi
    00000161: 	addq	$0x8, %r12
    00000165: 	callq	_ZdlPvm@PLT # Offset: 357
    0000016a: 	cmpq	%r12, %rbx
    0000016d: 	ja	.Ltmp545 # Offset: 365
.Ltmp544:
    0000016f: 	movdqa	0x20(%rsp), %xmm7
    00000175: 	leaq	0x70(%rsp), %rax
    0000017a: 	movl	$0x4000000, %edi
    0000017f: 	movq	$0x8, 0x68(%rsp)
    00000188: 	movq	%rax, 0x10(%rsp)
    0000018d: 	movaps	%xmm7, "_ZL7gLabels/1"+48(%rip)
    00000194: 	movdqa	0x30(%rsp), %xmm7
    0000019a: 	movq	%rax, 0x60(%rsp)
    0000019f: 	movabsq	$0x745f3233746e6975, %rax
    000001a9: 	movq	%rax, 0x70(%rsp)
    000001ae: 	movb	$0x0, 0x78(%rsp)
    000001b3: 	movaps	%xmm7, "_ZL7gLabels/1"+64(%rip)
    000001ba: 	callq	_Znam@PLT # Offset: 442
    000001bf: 	movq	0x60(%rsp), %r13
    000001c4: 	movq	0x68(%rsp), %r12
    000001c9: 	movq	%rax, %rbp
    000001cc: 	leaq	0x90(%rsp), %rax
    000001d4: 	movq	%rax, 0x8(%rsp)
    000001d9: 	movq	%rax, 0x80(%rsp)
    000001e1: 	movq	%r13, %rax
    000001e4: 	addq	%r12, %rax
    000001e7: 	je	.Ltmp546 # Offset: 487
    000001e9: 	testq	%r13, %r13
    000001ec: 	je	.Ltmp547 # Offset: 492
.Ltmp546:
    000001f2: 	movq	%r12, 0x58(%rsp)
    000001f7: 	cmpq	$0xf, %r12
    000001fb: 	ja	.Ltmp548 # Offset: 507
    00000201: 	cmpq	$0x1, %r12
    00000205: 	jne	.Ltmp549 # Offset: 517
    0000020b: 	movzbl	(%r13), %eax
    00000210: 	movb	%al, 0x90(%rsp)
    00000217: 	movq	0x8(%rsp), %rax
.Ltmp682:
    0000021c: 	movq	%r12, 0x88(%rsp)
    00000224: 	movb	$0x0, (%rax,%r12)
    00000229: 	movabsq	$0x3fffffffffffffff, %rax
    00000233: 	subq	0x88(%rsp), %rax
    0000023b: 	cmpq	$0x6, %rax
    0000023f: 	jbe	.Ltmp550 # Offset: 575
    00000245: 	leaq	0x80(%rsp), %r12
    0000024d: 	movl	$0x7, %edx
    00000252: 	leaq	DATAat0x1229d(%rip), %rsi
    00000259: 	movq	%r12, %rdi
    0000025c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 604
    00000261: 	movzbl	init_value(%rip), %edx
    00000268: 	movq	%r12, %rcx
    0000026b: 	movl	$0x1000000, %esi
    00000270: 	movq	%rbp, %rdi
    00000273: 	callq	_Z19test_library_memsetIjEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 627
    00000278: 	movq	0x80(%rsp), %rdi
    00000280: 	cmpq	0x8(%rsp), %rdi
    00000285: 	je	.Ltmp551 # Offset: 645
    00000287: 	movq	0x90(%rsp), %rax
    0000028f: 	leaq	0x1(%rax), %rsi
    00000293: 	callq	_ZdlPvm@PLT # Offset: 659
.Ltmp551:
    00000298: 	movq	0x8(%rsp), %rax
    0000029d: 	movq	0x60(%rsp), %r14
    000002a2: 	movq	0x68(%rsp), %r13
    000002a7: 	movq	%rax, 0x80(%rsp)
    000002af: 	movq	%r14, %rax
    000002b2: 	addq	%r13, %rax
    000002b5: 	je	.Ltmp552 # Offset: 693
    000002b7: 	testq	%r14, %r14
    000002ba: 	je	.Ltmp553 # Offset: 698
.Ltmp552:
    000002c0: 	movq	%r13, 0x58(%rsp)
    000002c5: 	cmpq	$0xf, %r13
    000002c9: 	ja	.Ltmp554 # Offset: 713
    000002cf: 	cmpq	$0x1, %r13
    000002d3: 	jne	.Ltmp555 # Offset: 723
    000002d9: 	movzbl	(%r14), %eax
    000002dd: 	movb	%al, 0x90(%rsp)
    000002e4: 	movq	0x8(%rsp), %rax
.Ltmp733:
    000002e9: 	movq	%r13, 0x88(%rsp)
    000002f1: 	movb	$0x0, (%rax,%r13)
    000002f6: 	movabsq	$0x3fffffffffffffff, %rax
    00000300: 	subq	0x88(%rsp), %rax
    00000308: 	cmpq	$0x9, %rax
    0000030c: 	jbe	.Ltmp556 # Offset: 780
    00000312: 	movl	$0xa, %edx
    00000317: 	leaq	DATAat0x122a5(%rip), %rsi
    0000031e: 	movq	%r12, %rdi
    00000321: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 801
    00000326: 	movzbl	init_value(%rip), %edx
    0000032d: 	movq	%r12, %rcx
    00000330: 	movl	$0x1000000, %esi
    00000335: 	movq	%rbp, %rdi
    00000338: 	callq	_Z13test_std_fillIjEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 824
    0000033d: 	movq	0x80(%rsp), %rdi
    00000345: 	cmpq	0x8(%rsp), %rdi
    0000034a: 	je	.Ltmp557 # Offset: 842
    0000034c: 	movq	0x90(%rsp), %rax
    00000354: 	leaq	0x1(%rax), %rsi
    00000358: 	callq	_ZdlPvm@PLT # Offset: 856
.Ltmp557:
    0000035d: 	movq	0x8(%rsp), %rax
    00000362: 	movq	0x60(%rsp), %r14
    00000367: 	movq	0x68(%rsp), %r13
    0000036c: 	movq	%rax, 0x80(%rsp)
    00000374: 	movq	%r14, %rax
    00000377: 	addq	%r13, %rax
    0000037a: 	je	.Ltmp558 # Offset: 890
    0000037c: 	testq	%r14, %r14
    0000037f: 	je	.Ltmp559 # Offset: 895
.Ltmp558:
    00000385: 	movq	%r13, 0x58(%rsp)
    0000038a: 	cmpq	$0xf, %r13
    0000038e: 	ja	.Ltmp560 # Offset: 910
    00000394: 	cmpq	$0x1, %r13
    00000398: 	jne	.Ltmp561 # Offset: 920
    0000039e: 	movzbl	(%r14), %eax
    000003a2: 	movb	%al, 0x90(%rsp)
    000003a9: 	movq	0x8(%rsp), %rax
.Ltmp731:
    000003ae: 	movq	%r13, 0x88(%rsp)
    000003b6: 	movb	$0x0, (%rax,%r13)
    000003bb: 	movabsq	$0x3fffffffffffffff, %rax
    000003c5: 	subq	0x88(%rsp), %rax
    000003cd: 	cmpq	$0xd, %rax
    000003d1: 	jbe	.Ltmp562 # Offset: 977
    000003d7: 	movl	$0xe, %edx
    000003dc: 	leaq	DATAat0x122b0(%rip), %rsi
    000003e3: 	movq	%r12, %rdi
    000003e6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 998
    000003eb: 	movzbl	init_value(%rip), %edx
    000003f2: 	movq	%r12, %rcx
    000003f5: 	movl	$0x1000000, %esi
    000003fa: 	movq	%rbp, %rdi
    000003fd: 	callq	_Z18test_iterator_fillIjEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1021
    00000402: 	movq	0x80(%rsp), %rdi
    0000040a: 	cmpq	0x8(%rsp), %rdi
    0000040f: 	je	.Ltmp563 # Offset: 1039
    00000411: 	movq	0x90(%rsp), %rax
    00000419: 	leaq	0x1(%rax), %rsi
    0000041d: 	callq	_ZdlPvm@PLT # Offset: 1053
.Ltmp563:
    00000422: 	movq	0x8(%rsp), %rax
    00000427: 	movq	0x60(%rsp), %r14
    0000042c: 	movq	0x68(%rsp), %r13
    00000431: 	movq	%rax, 0x80(%rsp)
    00000439: 	movq	%r14, %rax
    0000043c: 	addq	%r13, %rax
    0000043f: 	je	.Ltmp564 # Offset: 1087
    00000441: 	testq	%r14, %r14
    00000444: 	je	.Ltmp565 # Offset: 1092
.Ltmp564:
    0000044a: 	movq	%r13, 0x58(%rsp)
    0000044f: 	cmpq	$0xf, %r13
    00000453: 	ja	.Ltmp566 # Offset: 1107
    00000459: 	cmpq	$0x1, %r13
    0000045d: 	jne	.Ltmp567 # Offset: 1117
    00000463: 	movzbl	(%r14), %eax
    00000467: 	movb	%al, 0x90(%rsp)
    0000046e: 	movq	0x8(%rsp), %rax
.Ltmp737:
    00000473: 	movq	%r13, 0x88(%rsp)
    0000047b: 	movb	$0x0, (%rax,%r13)
    00000480: 	movabsq	$0x3fffffffffffffff, %rax
    0000048a: 	subq	0x88(%rsp), %rax
    00000492: 	cmpq	$0xd, %rax
    00000496: 	jbe	.Ltmp568 # Offset: 1174
    0000049c: 	movl	$0xe, %edx
    000004a1: 	leaq	DATAat0x122bf(%rip), %rsi
    000004a8: 	movq	%r12, %rdi
    000004ab: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1195
    000004b0: 	movzbl	init_value(%rip), %ebx
    000004b7: 	movl	%ebx, %eax
    000004b9: 	shll	$0x8, %eax
    000004bc: 	addl	%ebx, %eax
    000004be: 	shll	$0x8, %eax
    000004c1: 	addl	%ebx, %eax
    000004c3: 	shll	$0x8, %eax
    000004c6: 	addl	%eax, %ebx
    000004c8: 	callq	clock@PLT # Offset: 1224
    000004cd: 	movl	iterations(%rip), %esi
    000004d3: 	movd	%ebx, %xmm7
    000004d7: 	xorl	%ecx, %ecx
    000004d9: 	movq	%rax, start_time(%rip)
    000004e0: 	pshufd	$0x0, %xmm7, %xmm0
    000004e5: 	leaq	0x4000000(%rbp), %rdx
    000004ec: 	testl	%esi, %esi
    000004ee: 	jle	.Ltmp569 # Offset: 1262
.Ltmp571:
    000004f0: 	movq	%rbp, %rax
    000004f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp570:
    000004f8: 	movups	%xmm0, (%rax)
    000004fb: 	addq	$0x10, %rax
    000004ff: 	cmpq	%rax, %rdx
    00000502: 	jne	.Ltmp570 # Offset: 1282
    00000504: 	addl	$0x1, %ecx
    00000507: 	cmpl	%esi, %ecx
    00000509: 	jne	.Ltmp571 # Offset: 1289
.Ltmp569:
    0000050b: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000512: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000519: 	subq	$0x20, %rax
    0000051d: 	cmpq	%rax, %rbx
    00000520: 	je	.Ltmp572 # Offset: 1312
    00000526: 	leaq	0x10(%rbx), %rdi
    0000052a: 	movq	0x88(%rsp), %r13
    00000532: 	movq	%rdi, (%rbx)
    00000535: 	movq	0x80(%rsp), %r14
    0000053d: 	movq	%r14, %rax
    00000540: 	addq	%r13, %rax
    00000543: 	je	.Ltmp573 # Offset: 1347
    00000545: 	testq	%r14, %r14
    00000548: 	je	.Ltmp574 # Offset: 1352
.Ltmp573:
    0000054e: 	movq	%r13, 0x58(%rsp)
    00000553: 	cmpq	$0xf, %r13
    00000557: 	ja	.Ltmp575 # Offset: 1367
    0000055d: 	cmpq	$0x1, %r13
    00000561: 	jne	.Ltmp576 # Offset: 1377
    00000567: 	movzbl	(%r14), %eax
    0000056b: 	movb	%al, 0x10(%rbx)
.Ltmp764:
    0000056e: 	movq	%r13, 0x8(%rbx)
    00000572: 	movb	$0x0, (%rdi,%r13)
    00000577: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000057e: 	addq	$0x20, %rax
    00000582: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp748:
    00000589: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000590: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000597: 	je	.Ltmp577 # Offset: 1431
.Ltmp746:
    0000059d: 	movq	-0x20(%rax), %r13
    000005a1: 	callq	clock@PLT # Offset: 1441
    000005a6: 	pxor	%xmm0, %xmm0
    000005aa: 	movq	%rax, end_time(%rip)
    000005b1: 	movq	%r13, %rdi
    000005b4: 	subq	start_time(%rip), %rax
    000005bb: 	cvtsi2sd	%rax, %xmm0
    000005c0: 	divsd	DATAat0x12360(%rip), %xmm0
    000005c8: 	callq	_Z13record_resultdPKc # Offset: 1480
    000005cd: 	movq	%rbp, %r15
    000005d0: 	pxor	%xmm1, %xmm1
    000005d4: 	pxor	%xmm7, %xmm7
    000005d8: 	movq	%rbp, %rax
    000005db: 	leaq	0x4000000(%rbp), %rbx
    000005e2: 	pxor	%xmm6, %xmm6
    000005e6: 	pxor	%xmm5, %xmm5
    000005ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp578:
    000005f0: 	movdqu	(%rax), %xmm0
    000005f4: 	addq	$0x10, %rax
    000005f8: 	movdqa	%xmm0, %xmm3
    000005fc: 	punpckhbw	%xmm7, %xmm0
    00000600: 	punpcklbw	%xmm7, %xmm3
    00000604: 	movdqa	%xmm0, %xmm4
    00000608: 	punpckhwd	%xmm6, %xmm0
    0000060c: 	movdqa	%xmm3, %xmm2
    00000610: 	punpckhwd	%xmm6, %xmm3
    00000614: 	punpcklwd	%xmm6, %xmm4
    00000618: 	punpcklwd	%xmm6, %xmm2
    0000061c: 	movdqa	%xmm2, %xmm8
    00000621: 	punpckldq	%xmm5, %xmm2
    00000625: 	punpckhdq	%xmm5, %xmm8
    0000062a: 	paddq	%xmm8, %xmm2
    0000062f: 	movdqa	%xmm3, %xmm8
    00000634: 	punpckldq	%xmm5, %xmm3
    00000638: 	punpckhdq	%xmm5, %xmm8
    0000063d: 	paddq	%xmm8, %xmm3
    00000642: 	paddq	%xmm3, %xmm2
    00000646: 	movdqa	%xmm4, %xmm3
    0000064a: 	punpckldq	%xmm5, %xmm4
    0000064e: 	punpckhdq	%xmm5, %xmm3
    00000652: 	paddq	%xmm3, %xmm4
    00000656: 	movdqa	%xmm0, %xmm3
    0000065a: 	punpckhdq	%xmm5, %xmm0
    0000065e: 	punpckldq	%xmm5, %xmm3
    00000662: 	paddq	%xmm0, %xmm1
    00000666: 	paddq	%xmm3, %xmm4
    0000066a: 	paddq	%xmm4, %xmm2
    0000066e: 	paddq	%xmm2, %xmm1
    00000672: 	cmpq	%rbx, %rax
    00000675: 	jne	.Ltmp578 # Offset: 1653
    0000067b: 	movdqa	%xmm1, %xmm0
    0000067f: 	movzbl	init_value(%rip), %edx
    00000686: 	movq	0x80(%rsp), %rdi
    0000068e: 	psrldq	$0x8, %xmm0
    00000693: 	paddq	%xmm0, %xmm1
    00000697: 	shlq	$0x1a, %rdx
    0000069b: 	movq	%xmm1, %rax
    000006a0: 	cmpq	%rax, %rdx
    000006a3: 	je	.Ltmp579 # Offset: 1699
    000006a5: 	movq	%rdi, %rdx
    000006a8: 	leaq	DATAat0x12278(%rip), %rsi
    000006af: 	movl	$0x1, %edi
    000006b4: 	xorl	%eax, %eax
    000006b6: 	callq	__printf_chk@PLT # Offset: 1718
    000006bb: 	movq	0x80(%rsp), %rdi
.Ltmp579:
    000006c3: 	cmpq	0x8(%rsp), %rdi
    000006c8: 	je	.Ltmp580 # Offset: 1736
    000006ca: 	movq	0x90(%rsp), %rax
    000006d2: 	leaq	0x1(%rax), %rsi
    000006d6: 	callq	_ZdlPvm@PLT # Offset: 1750
.Ltmp580:
    000006db: 	movq	0x8(%rsp), %rax
    000006e0: 	movq	0x60(%rsp), %r14
    000006e5: 	movq	0x68(%rsp), %r13
    000006ea: 	movq	%rax, 0x80(%rsp)
    000006f2: 	movq	%r14, %rax
    000006f5: 	addq	%r13, %rax
    000006f8: 	je	.Ltmp581 # Offset: 1784
    000006fa: 	testq	%r14, %r14
    000006fd: 	je	.Ltmp582 # Offset: 1789
.Ltmp581:
    00000703: 	movq	%r13, 0x58(%rsp)
    00000708: 	cmpq	$0xf, %r13
    0000070c: 	ja	.Ltmp583 # Offset: 1804
    00000712: 	cmpq	$0x1, %r13
    00000716: 	jne	.Ltmp584 # Offset: 1814
    0000071c: 	movzbl	(%r14), %eax
    00000720: 	movb	%al, 0x90(%rsp)
    00000727: 	movq	0x8(%rsp), %rax
.Ltmp735:
    0000072c: 	movq	%r13, 0x88(%rsp)
    00000734: 	movb	$0x0, (%rax,%r13)
    00000739: 	movabsq	$0x3fffffffffffffff, %rax
    00000743: 	subq	0x88(%rsp), %rax
    0000074b: 	cmpq	$0x16, %rax
    0000074f: 	jbe	.Ltmp585 # Offset: 1871
    00000755: 	movl	$0x17, %edx
    0000075a: 	leaq	DATAat0x122ce(%rip), %rsi
    00000761: 	movq	%r12, %rdi
    00000764: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1892
    00000769: 	movzbl	init_value(%rip), %eax
    00000770: 	movl	%eax, %r13d
    00000773: 	shll	$0x8, %r13d
    00000777: 	addl	%eax, %r13d
    0000077a: 	shll	$0x8, %r13d
    0000077e: 	addl	%eax, %r13d
    00000781: 	shll	$0x8, %r13d
    00000785: 	addl	%eax, %r13d
    00000788: 	callq	clock@PLT # Offset: 1928
    0000078d: 	movl	iterations(%rip), %ecx
    00000793: 	movd	%r13d, %xmm7
    00000798: 	xorl	%edx, %edx
    0000079a: 	movq	%rax, start_time(%rip)
    000007a1: 	pshufd	$0x0, %xmm7, %xmm0
    000007a6: 	testl	%ecx, %ecx
    000007a8: 	jle	.Ltmp586 # Offset: 1960
    000007aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp588:
    000007b0: 	movq	%rbp, %rax
    000007b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp587:
    000007b8: 	movups	%xmm0, (%rax)
    000007bb: 	addq	$0x20, %rax
    000007bf: 	movups	%xmm0, -0x10(%rax)
    000007c3: 	cmpq	%rbx, %rax
    000007c6: 	jne	.Ltmp587 # Offset: 1990
    000007c8: 	addl	$0x1, %edx
    000007cb: 	cmpl	%ecx, %edx
    000007cd: 	jne	.Ltmp588 # Offset: 1997
.Ltmp586:
    000007cf: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000007d6: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000007dd: 	subq	$0x20, %rax
    000007e1: 	cmpq	%rax, %r14
    000007e4: 	je	.Ltmp589 # Offset: 2020
    000007ea: 	leaq	0x10(%r14), %rdi
    000007ee: 	movq	0x88(%rsp), %r13
    000007f6: 	movq	%rdi, (%r14)
    000007f9: 	movq	0x80(%rsp), %rax
    00000801: 	movq	%rax, %rcx
    00000804: 	movq	%rax, 0x18(%rsp)
    00000809: 	addq	%r13, %rcx
    0000080c: 	je	.Ltmp590 # Offset: 2060
    0000080e: 	testq	%rax, %rax
    00000811: 	je	.Ltmp591 # Offset: 2065
.Ltmp590:
    00000817: 	movq	%r13, 0x58(%rsp)
    0000081c: 	cmpq	$0xf, %r13
    00000820: 	ja	.Ltmp592 # Offset: 2080
    00000826: 	cmpq	$0x1, %r13
    0000082a: 	jne	.Ltmp593 # Offset: 2090
    00000830: 	movq	0x18(%rsp), %rax
    00000835: 	movzbl	(%rax), %eax
    00000838: 	movb	%al, 0x10(%r14)
.Ltmp754:
    0000083c: 	movq	%r13, 0x8(%r14)
    00000840: 	movb	$0x0, (%rdi,%r13)
    00000845: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000084c: 	addq	$0x20, %rax
    00000850: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp753:
    00000857: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000085e: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000865: 	je	.Ltmp594 # Offset: 2149
.Ltmp752:
    0000086b: 	movq	-0x20(%rax), %r13
    0000086f: 	callq	clock@PLT # Offset: 2159
    00000874: 	pxor	%xmm0, %xmm0
    00000878: 	movq	%rax, end_time(%rip)
    0000087f: 	movq	%r13, %rdi
    00000882: 	subq	start_time(%rip), %rax
    00000889: 	cvtsi2sd	%rax, %xmm0
    0000088e: 	divsd	DATAat0x12360(%rip), %xmm0
    00000896: 	callq	_Z13record_resultdPKc # Offset: 2198
    0000089b: 	pxor	%xmm1, %xmm1
    0000089f: 	pxor	%xmm7, %xmm7
    000008a3: 	pxor	%xmm6, %xmm6
    000008a7: 	movq	%rbp, %rax
    000008aa: 	pxor	%xmm5, %xmm5
    000008ae: 	nop # Size: 2
.Ltmp595:
    000008b0: 	movdqu	(%rax), %xmm0
    000008b4: 	addq	$0x10, %rax
    000008b8: 	movdqa	%xmm0, %xmm3
    000008bc: 	punpckhbw	%xmm7, %xmm0
    000008c0: 	punpcklbw	%xmm7, %xmm3
    000008c4: 	movdqa	%xmm0, %xmm4
    000008c8: 	punpckhwd	%xmm6, %xmm0
    000008cc: 	movdqa	%xmm3, %xmm2
    000008d0: 	punpckhwd	%xmm6, %xmm3
    000008d4: 	punpcklwd	%xmm6, %xmm4
    000008d8: 	punpcklwd	%xmm6, %xmm2
    000008dc: 	movdqa	%xmm2, %xmm8
    000008e1: 	punpckldq	%xmm5, %xmm2
    000008e5: 	punpckhdq	%xmm5, %xmm8
    000008ea: 	paddq	%xmm8, %xmm2
    000008ef: 	movdqa	%xmm3, %xmm8
    000008f4: 	punpckldq	%xmm5, %xmm3
    000008f8: 	punpckhdq	%xmm5, %xmm8
    000008fd: 	paddq	%xmm8, %xmm3
    00000902: 	paddq	%xmm3, %xmm2
    00000906: 	movdqa	%xmm4, %xmm3
    0000090a: 	punpckldq	%xmm5, %xmm4
    0000090e: 	punpckhdq	%xmm5, %xmm3
    00000912: 	paddq	%xmm3, %xmm4
    00000916: 	movdqa	%xmm0, %xmm3
    0000091a: 	punpckhdq	%xmm5, %xmm0
    0000091e: 	punpckldq	%xmm5, %xmm3
    00000922: 	paddq	%xmm0, %xmm1
    00000926: 	paddq	%xmm3, %xmm4
    0000092a: 	paddq	%xmm4, %xmm2
    0000092e: 	paddq	%xmm2, %xmm1
    00000932: 	cmpq	%rbx, %rax
    00000935: 	jne	.Ltmp595 # Offset: 2357
    0000093b: 	movdqa	%xmm1, %xmm0
    0000093f: 	movzbl	init_value(%rip), %edx
    00000946: 	movq	0x80(%rsp), %rdi
    0000094e: 	psrldq	$0x8, %xmm0
    00000953: 	paddq	%xmm0, %xmm1
    00000957: 	shlq	$0x1a, %rdx
    0000095b: 	movq	%xmm1, %rax
    00000960: 	cmpq	%rax, %rdx
    00000963: 	je	.Ltmp596 # Offset: 2403
    00000965: 	movq	%rdi, %rdx
    00000968: 	leaq	DATAat0x12278(%rip), %rsi
    0000096f: 	movl	$0x1, %edi
    00000974: 	xorl	%eax, %eax
    00000976: 	callq	__printf_chk@PLT # Offset: 2422
    0000097b: 	movq	0x80(%rsp), %rdi
.Ltmp596:
    00000983: 	cmpq	0x8(%rsp), %rdi
    00000988: 	je	.Ltmp597 # Offset: 2440
    0000098a: 	movq	0x90(%rsp), %rax
    00000992: 	leaq	0x1(%rax), %rsi
    00000996: 	callq	_ZdlPvm@PLT # Offset: 2454
.Ltmp597:
    0000099b: 	movq	0x8(%rsp), %rax
    000009a0: 	movq	0x60(%rsp), %r14
    000009a5: 	movq	0x68(%rsp), %r13
    000009aa: 	movq	%rax, 0x80(%rsp)
    000009b2: 	movq	%r14, %rax
    000009b5: 	addq	%r13, %rax
    000009b8: 	je	.Ltmp598 # Offset: 2488
    000009ba: 	testq	%r14, %r14
    000009bd: 	je	.Ltmp599 # Offset: 2493
.Ltmp598:
    000009c3: 	movq	%r13, 0x58(%rsp)
    000009c8: 	cmpq	$0xf, %r13
    000009cc: 	ja	.Ltmp600 # Offset: 2508
    000009d2: 	cmpq	$0x1, %r13
    000009d6: 	jne	.Ltmp601 # Offset: 2518
    000009dc: 	movzbl	(%r14), %eax
    000009e0: 	movb	%al, 0x90(%rsp)
    000009e7: 	movq	0x8(%rsp), %rax
.Ltmp727:
    000009ec: 	movq	%r13, 0x88(%rsp)
    000009f4: 	movb	$0x0, (%rax,%r13)
    000009f9: 	movabsq	$0x3fffffffffffffff, %rax
    00000a03: 	subq	0x88(%rsp), %rax
    00000a0b: 	cmpq	$0x13, %rax
    00000a0f: 	jbe	.Ltmp602 # Offset: 2575
    00000a15: 	movl	$0x14, %edx
    00000a1a: 	leaq	DATAat0x122e6(%rip), %rsi
    00000a21: 	movq	%r12, %rdi
    00000a24: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2596
    00000a29: 	movzbl	init_value(%rip), %r13d
    00000a31: 	callq	clock@PLT # Offset: 2609
    00000a36: 	movl	iterations(%rip), %r10d
    00000a3d: 	movq	%rax, start_time(%rip)
    00000a44: 	testl	%r10d, %r10d
    00000a47: 	jle	.Ltmp603 # Offset: 2631
    00000a49: 	movzbl	%r13b, %eax
    00000a4d: 	movzbl	%r13b, %r11d
    00000a51: 	xorl	%esi, %esi
    00000a53: 	movl	%eax, %r9d
    00000a56: 	shll	$0x8, %r9d
    00000a5a: 	orl	%eax, %r9d
    00000a5d: 	movl	%r9d, %eax
    00000a60: 	shll	$0x10, %eax
    00000a63: 	orl	%eax, %r9d
    00000a66: 	movabsq	$0x101010101010101, %rax
    00000a70: 	imulq	%rax, %r11
    00000a74: 	movd	%r9d, %xmm7
    00000a79: 	pshufd	$0x0, %xmm7, %xmm0
    00000a7e: 	nop # Size: 2
.Ltmp606:
    00000a80: 	movq	%rbp, %rdx
    00000a83: 	xorl	%eax, %eax
    00000a85: 	nopl	(%rax) # Size: 3
.Ltmp605:
    00000a88: 	testb	$0x3, %dl
    00000a8b: 	je	.Ltmp604 # Offset: 2699
    00000a91: 	addl	$0x1, %eax
    00000a94: 	movb	%r13b, (%rdx)
    00000a97: 	addq	$0x1, %rdx
    00000a9b: 	cmpl	$0x4000000, %eax
    00000aa0: 	jne	.Ltmp605 # Offset: 2720
.Ltmp717:
    00000aa2: 	addl	$0x1, %esi
    00000aa5: 	cmpl	%esi, %r10d
    00000aa8: 	jne	.Ltmp606 # Offset: 2728
.Ltmp603:
    00000aaa: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000ab1: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00000ab8: 	subq	$0x20, %rax
    00000abc: 	cmpq	%rax, %r14
    00000abf: 	je	.Ltmp607 # Offset: 2751
    00000ac5: 	leaq	0x10(%r14), %rdi
    00000ac9: 	movq	0x88(%rsp), %r13
    00000ad1: 	movq	%rdi, (%r14)
    00000ad4: 	movq	0x80(%rsp), %rax
    00000adc: 	movq	%rax, %rcx
    00000adf: 	movq	%rax, 0x18(%rsp)
    00000ae4: 	addq	%r13, %rcx
    00000ae7: 	je	.Ltmp608 # Offset: 2791
    00000ae9: 	testq	%rax, %rax
    00000aec: 	je	.Ltmp609 # Offset: 2796
.Ltmp608:
    00000af2: 	movq	%r13, 0x58(%rsp)
    00000af7: 	cmpq	$0xf, %r13
    00000afb: 	ja	.Ltmp610 # Offset: 2811
    00000b01: 	cmpq	$0x1, %r13
    00000b05: 	jne	.Ltmp611 # Offset: 2821
    00000b0b: 	movq	0x18(%rsp), %rax
    00000b10: 	movzbl	(%rax), %eax
    00000b13: 	movb	%al, 0x10(%r14)
.Ltmp758:
    00000b17: 	movq	%r13, 0x8(%r14)
    00000b1b: 	movb	$0x0, (%rdi,%r13)
    00000b20: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000b27: 	addq	$0x20, %rax
    00000b2b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp751:
    00000b32: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000b39: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000b40: 	je	.Ltmp612 # Offset: 2880
.Ltmp750:
    00000b46: 	movq	-0x20(%rax), %r13
    00000b4a: 	callq	clock@PLT # Offset: 2890
    00000b4f: 	pxor	%xmm0, %xmm0
    00000b53: 	movq	%rax, end_time(%rip)
    00000b5a: 	movq	%r13, %rdi
    00000b5d: 	subq	start_time(%rip), %rax
    00000b64: 	cvtsi2sd	%rax, %xmm0
    00000b69: 	divsd	DATAat0x12360(%rip), %xmm0
    00000b71: 	callq	_Z13record_resultdPKc # Offset: 2929
    00000b76: 	pxor	%xmm1, %xmm1
    00000b7a: 	pxor	%xmm7, %xmm7
    00000b7e: 	pxor	%xmm6, %xmm6
    00000b82: 	movq	%rbp, %rax
    00000b85: 	pxor	%xmm5, %xmm5
    00000b89: 	nopl	(%rax) # Size: 7
.Ltmp613:
    00000b90: 	movdqu	(%rax), %xmm0
    00000b94: 	addq	$0x10, %rax
    00000b98: 	movdqa	%xmm0, %xmm3
    00000b9c: 	punpckhbw	%xmm7, %xmm0
    00000ba0: 	punpcklbw	%xmm7, %xmm3
    00000ba4: 	movdqa	%xmm0, %xmm4
    00000ba8: 	punpckhwd	%xmm6, %xmm0
    00000bac: 	movdqa	%xmm3, %xmm2
    00000bb0: 	punpckhwd	%xmm6, %xmm3
    00000bb4: 	punpcklwd	%xmm6, %xmm4
    00000bb8: 	punpcklwd	%xmm6, %xmm2
    00000bbc: 	movdqa	%xmm2, %xmm8
    00000bc1: 	punpckldq	%xmm5, %xmm2
    00000bc5: 	punpckhdq	%xmm5, %xmm8
    00000bca: 	paddq	%xmm8, %xmm2
    00000bcf: 	movdqa	%xmm3, %xmm8
    00000bd4: 	punpckldq	%xmm5, %xmm3
    00000bd8: 	punpckhdq	%xmm5, %xmm8
    00000bdd: 	paddq	%xmm8, %xmm3
    00000be2: 	paddq	%xmm3, %xmm2
    00000be6: 	movdqa	%xmm4, %xmm3
    00000bea: 	punpckldq	%xmm5, %xmm4
    00000bee: 	punpckhdq	%xmm5, %xmm3
    00000bf2: 	paddq	%xmm3, %xmm4
    00000bf6: 	movdqa	%xmm0, %xmm3
    00000bfa: 	punpckhdq	%xmm5, %xmm0
    00000bfe: 	punpckldq	%xmm5, %xmm3
    00000c02: 	paddq	%xmm0, %xmm1
    00000c06: 	paddq	%xmm3, %xmm4
    00000c0a: 	paddq	%xmm4, %xmm2
    00000c0e: 	paddq	%xmm2, %xmm1
    00000c12: 	cmpq	%rbx, %rax
    00000c15: 	jne	.Ltmp613 # Offset: 3093
    00000c1b: 	movdqa	%xmm1, %xmm0
    00000c1f: 	movzbl	init_value(%rip), %edx
    00000c26: 	movq	0x80(%rsp), %rdi
    00000c2e: 	psrldq	$0x8, %xmm0
    00000c33: 	paddq	%xmm0, %xmm1
    00000c37: 	shlq	$0x1a, %rdx
    00000c3b: 	movq	%xmm1, %rax
    00000c40: 	cmpq	%rax, %rdx
    00000c43: 	je	.Ltmp614 # Offset: 3139
    00000c45: 	movq	%rdi, %rdx
    00000c48: 	leaq	DATAat0x12278(%rip), %rsi
    00000c4f: 	movl	$0x1, %edi
    00000c54: 	xorl	%eax, %eax
    00000c56: 	callq	__printf_chk@PLT # Offset: 3158
    00000c5b: 	movq	0x80(%rsp), %rdi
.Ltmp614:
    00000c63: 	cmpq	0x8(%rsp), %rdi
    00000c68: 	je	.Ltmp615 # Offset: 3176
    00000c6a: 	movq	0x90(%rsp), %rax
    00000c72: 	leaq	0x1(%rax), %rsi
    00000c76: 	callq	_ZdlPvm@PLT # Offset: 3190
.Ltmp615:
    00000c7b: 	movq	0x8(%rsp), %rax
    00000c80: 	movq	0x60(%rsp), %r14
    00000c85: 	movq	0x68(%rsp), %r13
    00000c8a: 	movq	%rax, 0x80(%rsp)
    00000c92: 	movq	%r14, %rax
    00000c95: 	addq	%r13, %rax
    00000c98: 	je	.Ltmp616 # Offset: 3224
    00000c9a: 	testq	%r14, %r14
    00000c9d: 	je	.Ltmp617 # Offset: 3229
.Ltmp616:
    00000ca3: 	movq	%r13, 0x58(%rsp)
    00000ca8: 	cmpq	$0xf, %r13
    00000cac: 	ja	.Ltmp618 # Offset: 3244
    00000cb2: 	cmpq	$0x1, %r13
    00000cb6: 	jne	.Ltmp619 # Offset: 3254
    00000cbc: 	movzbl	(%r14), %eax
    00000cc0: 	movb	%al, 0x90(%rsp)
    00000cc7: 	movq	0x8(%rsp), %rax
.Ltmp741:
    00000ccc: 	movq	%r13, 0x88(%rsp)
    00000cd4: 	movb	$0x0, (%rax,%r13)
    00000cd9: 	movabsq	$0x3fffffffffffffff, %rax
    00000ce3: 	subq	0x88(%rsp), %rax
    00000ceb: 	cmpq	$0x13, %rax
    00000cef: 	jbe	.Ltmp620 # Offset: 3311
    00000cf5: 	movl	$0x14, %edx
    00000cfa: 	leaq	DATAat0x122fb(%rip), %rsi
    00000d01: 	movq	%r12, %rdi
    00000d04: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3332
    00000d09: 	movzbl	init_value(%rip), %r13d
    00000d11: 	callq	clock@PLT # Offset: 3345
    00000d16: 	movl	iterations(%rip), %r8d
    00000d1d: 	movq	%rax, start_time(%rip)
    00000d24: 	testl	%r8d, %r8d
    00000d27: 	jle	.Ltmp621 # Offset: 3367
    00000d29: 	movzbl	%r13b, %r9d
    00000d2d: 	xorl	%esi, %esi
    00000d2f: 	movl	$0x4000000, %r11d
    00000d35: 	movl	$0x3fffff8, %r14d
    00000d3b: 	movq	%r9, %rax
    00000d3e: 	shlq	$0x8, %rax
    00000d42: 	orq	%r9, %rax
    00000d45: 	movq	%rax, %rdx
    00000d48: 	shlq	$0x10, %rdx
    00000d4c: 	orq	%rdx, %rax
    00000d4f: 	movq	%rax, %rdx
    00000d52: 	shlq	$0x20, %rdx
    00000d56: 	orq	%rdx, %rax
    00000d59: 	movq	%rax, %xmm0
    00000d5e: 	movq	%rax, %xmm1
    00000d63: 	movabsq	$0x101010101010101, %rax
    00000d6d: 	imulq	%rax, %r9
    00000d71: 	punpcklqdq	%xmm0, %xmm0
    00000d75: 	nopl	(%rax) # Size: 3
.Ltmp624:
    00000d78: 	movq	%rbp, %rdx
    00000d7b: 	xorl	%eax, %eax
    00000d7d: 	nopl	(%rax) # Size: 3
.Ltmp623:
    00000d80: 	testb	$0x7, %dl
    00000d83: 	je	.Ltmp622 # Offset: 3459
    00000d89: 	addl	$0x1, %eax
    00000d8c: 	movb	%r13b, (%rdx)
    00000d8f: 	addq	$0x1, %rdx
    00000d93: 	cmpl	$0x4000000, %eax
    00000d98: 	jne	.Ltmp623 # Offset: 3480
.Ltmp710:
    00000d9a: 	addl	$0x1, %esi
    00000d9d: 	cmpl	%r8d, %esi
    00000da0: 	jne	.Ltmp624 # Offset: 3488
.Ltmp621:
    00000da2: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000da9: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00000db0: 	subq	$0x20, %rax
    00000db4: 	cmpq	%rax, %r14
    00000db7: 	je	.Ltmp625 # Offset: 3511
    00000dbd: 	leaq	0x10(%r14), %rdi
    00000dc1: 	movq	0x88(%rsp), %r13
    00000dc9: 	movq	%rdi, (%r14)
    00000dcc: 	movq	0x80(%rsp), %rax
    00000dd4: 	movq	%rax, %rcx
    00000dd7: 	movq	%rax, 0x18(%rsp)
    00000ddc: 	addq	%r13, %rcx
    00000ddf: 	je	.Ltmp626 # Offset: 3551
    00000de1: 	testq	%rax, %rax
    00000de4: 	je	.Ltmp627 # Offset: 3556
.Ltmp626:
    00000dea: 	movq	%r13, 0x58(%rsp)
    00000def: 	cmpq	$0xf, %r13
    00000df3: 	ja	.Ltmp628 # Offset: 3571
    00000df9: 	cmpq	$0x1, %r13
    00000dfd: 	jne	.Ltmp629 # Offset: 3581
    00000e03: 	movq	0x18(%rsp), %rax
    00000e08: 	movzbl	(%rax), %eax
    00000e0b: 	movb	%al, 0x10(%r14)
.Ltmp756:
    00000e0f: 	movq	%r13, 0x8(%r14)
    00000e13: 	movb	$0x0, (%rdi,%r13)
    00000e18: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000e1f: 	addq	$0x20, %rax
    00000e23: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp749:
    00000e2a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000e31: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000e38: 	je	.Ltmp630 # Offset: 3640
.Ltmp747:
    00000e3e: 	movq	-0x20(%rax), %r13
    00000e42: 	callq	clock@PLT # Offset: 3650
    00000e47: 	pxor	%xmm0, %xmm0
    00000e4b: 	movq	%rax, end_time(%rip)
    00000e52: 	movq	%r13, %rdi
    00000e55: 	subq	start_time(%rip), %rax
    00000e5c: 	cvtsi2sd	%rax, %xmm0
    00000e61: 	divsd	DATAat0x12360(%rip), %xmm0
    00000e69: 	callq	_Z13record_resultdPKc # Offset: 3689
    00000e6e: 	pxor	%xmm1, %xmm1
    00000e72: 	pxor	%xmm7, %xmm7
    00000e76: 	pxor	%xmm6, %xmm6
    00000e7a: 	movq	%rbp, %rax
    00000e7d: 	pxor	%xmm5, %xmm5
    00000e81: 	nopl	(%rax) # Size: 7
.Ltmp631:
    00000e88: 	movdqu	(%rax), %xmm0
    00000e8c: 	addq	$0x10, %rax
    00000e90: 	movdqa	%xmm0, %xmm3
    00000e94: 	punpckhbw	%xmm7, %xmm0
    00000e98: 	punpcklbw	%xmm7, %xmm3
    00000e9c: 	movdqa	%xmm0, %xmm4
    00000ea0: 	punpckhwd	%xmm6, %xmm0
    00000ea4: 	movdqa	%xmm3, %xmm2
    00000ea8: 	punpckhwd	%xmm6, %xmm3
    00000eac: 	punpcklwd	%xmm6, %xmm4
    00000eb0: 	punpcklwd	%xmm6, %xmm2
    00000eb4: 	movdqa	%xmm2, %xmm8
    00000eb9: 	punpckldq	%xmm5, %xmm2
    00000ebd: 	punpckhdq	%xmm5, %xmm8
    00000ec2: 	paddq	%xmm8, %xmm2
    00000ec7: 	movdqa	%xmm3, %xmm8
    00000ecc: 	punpckldq	%xmm5, %xmm3
    00000ed0: 	punpckhdq	%xmm5, %xmm8
    00000ed5: 	paddq	%xmm8, %xmm3
    00000eda: 	paddq	%xmm3, %xmm2
    00000ede: 	movdqa	%xmm4, %xmm3
    00000ee2: 	punpckldq	%xmm5, %xmm4
    00000ee6: 	punpckhdq	%xmm5, %xmm3
    00000eea: 	paddq	%xmm3, %xmm4
    00000eee: 	movdqa	%xmm0, %xmm3
    00000ef2: 	punpckhdq	%xmm5, %xmm0
    00000ef6: 	punpckldq	%xmm5, %xmm3
    00000efa: 	paddq	%xmm0, %xmm1
    00000efe: 	paddq	%xmm3, %xmm4
    00000f02: 	paddq	%xmm4, %xmm2
    00000f06: 	paddq	%xmm2, %xmm1
    00000f0a: 	cmpq	%rax, %rbx
    00000f0d: 	jne	.Ltmp631 # Offset: 3853
    00000f13: 	movdqa	%xmm1, %xmm0
    00000f17: 	movzbl	init_value(%rip), %edx
    00000f1e: 	movq	0x80(%rsp), %rdi
    00000f26: 	psrldq	$0x8, %xmm0
    00000f2b: 	paddq	%xmm0, %xmm1
    00000f2f: 	shlq	$0x1a, %rdx
    00000f33: 	movq	%xmm1, %rax
    00000f38: 	cmpq	%rax, %rdx
    00000f3b: 	je	.Ltmp632 # Offset: 3899
    00000f3d: 	movq	%rdi, %rdx
    00000f40: 	leaq	DATAat0x12278(%rip), %rsi
    00000f47: 	movl	$0x1, %edi
    00000f4c: 	xorl	%eax, %eax
    00000f4e: 	callq	__printf_chk@PLT # Offset: 3918
    00000f53: 	movq	0x80(%rsp), %rdi
.Ltmp632:
    00000f5b: 	cmpq	0x8(%rsp), %rdi
    00000f60: 	je	.Ltmp633 # Offset: 3936
    00000f62: 	movq	0x90(%rsp), %rax
    00000f6a: 	leaq	0x1(%rax), %rsi
    00000f6e: 	callq	_ZdlPvm@PLT # Offset: 3950
.Ltmp633:
    00000f73: 	movq	0x8(%rsp), %rax
    00000f78: 	movq	0x60(%rsp), %r14
    00000f7d: 	movq	0x68(%rsp), %r13
    00000f82: 	movq	%rax, 0x80(%rsp)
    00000f8a: 	movq	%r14, %rax
    00000f8d: 	addq	%r13, %rax
    00000f90: 	je	.Ltmp634 # Offset: 3984
    00000f92: 	testq	%r14, %r14
    00000f95: 	je	.Ltmp635 # Offset: 3989
.Ltmp634:
    00000f9b: 	movq	%r13, 0x58(%rsp)
    00000fa0: 	cmpq	$0xf, %r13
    00000fa4: 	ja	.Ltmp636 # Offset: 4004
    00000faa: 	cmpq	$0x1, %r13
    00000fae: 	jne	.Ltmp637 # Offset: 4014
    00000fb4: 	movzbl	(%r14), %eax
    00000fb8: 	movb	%al, 0x90(%rsp)
    00000fbf: 	movq	0x8(%rsp), %rax
.Ltmp739:
    00000fc4: 	movq	%r13, 0x88(%rsp)
    00000fcc: 	movb	$0x0, (%rax,%r13)
    00000fd1: 	movabsq	$0x3fffffffffffffff, %rax
    00000fdb: 	subq	0x88(%rsp), %rax
    00000fe3: 	cmpq	$0x1d, %rax
    00000fe7: 	jbe	.Ltmp638 # Offset: 4071
    00000fed: 	movl	$0x1e, %edx
    00000ff2: 	leaq	DATAat0x12310(%rip), %rsi
    00000ff9: 	movq	%r12, %rdi
    00000ffc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4092
    00001001: 	movzbl	init_value(%rip), %r13d
    00001009: 	callq	clock@PLT # Offset: 4105
    0000100e: 	movl	iterations(%rip), %r10d
    00001015: 	movq	%rax, start_time(%rip)
    0000101c: 	testl	%r10d, %r10d
    0000101f: 	jle	.Ltmp639 # Offset: 4127
    00001021: 	movzbl	%r13b, %eax
    00001025: 	movzbl	%r13b, %r11d
    00001029: 	xorl	%edi, %edi
    0000102b: 	movl	$0x4000000, %r14d
    00001031: 	movl	%eax, %esi
    00001033: 	shll	$0x8, %esi
    00001036: 	orl	%eax, %esi
    00001038: 	movl	%esi, %eax
    0000103a: 	shll	$0x10, %eax
    0000103d: 	orl	%eax, %esi
    0000103f: 	movabsq	$0x101010101010101, %rax
    00001049: 	imulq	%rax, %r11
    0000104d: 	movd	%esi, %xmm7
    00001051: 	pshufd	$0x0, %xmm7, %xmm0
    00001056: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp642:
    00001060: 	movq	%rbp, %rax
    00001063: 	xorl	%edx, %edx
    00001065: 	nopl	(%rax) # Size: 3
.Ltmp641:
    00001068: 	testb	$0x3, %al
    0000106a: 	je	.Ltmp640 # Offset: 4202
    00001070: 	addl	$0x1, %edx
    00001073: 	movb	%r13b, (%rax)
    00001076: 	addq	$0x1, %rax
    0000107a: 	cmpl	$0x4000000, %edx
    00001080: 	jne	.Ltmp641 # Offset: 4224
.Ltmp693:
    00001082: 	addl	$0x1, %edi
    00001085: 	cmpl	%edi, %r10d
    00001088: 	jne	.Ltmp642 # Offset: 4232
.Ltmp639:
    0000108a: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001091: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00001098: 	subq	$0x20, %rax
    0000109c: 	cmpq	%rax, %r14
    0000109f: 	je	.Ltmp643 # Offset: 4255
    000010a5: 	leaq	0x10(%r14), %rdi
    000010a9: 	movq	0x88(%rsp), %r13
    000010b1: 	movq	%rdi, (%r14)
    000010b4: 	movq	0x80(%rsp), %rax
    000010bc: 	movq	%rax, %rcx
    000010bf: 	movq	%rax, 0x18(%rsp)
    000010c4: 	addq	%r13, %rcx
    000010c7: 	je	.Ltmp644 # Offset: 4295
    000010c9: 	testq	%rax, %rax
    000010cc: 	je	.Ltmp645 # Offset: 4300
.Ltmp644:
    000010d2: 	movq	%r13, 0x58(%rsp)
    000010d7: 	cmpq	$0xf, %r13
    000010db: 	ja	.Ltmp646 # Offset: 4315
    000010e1: 	cmpq	$0x1, %r13
    000010e5: 	jne	.Ltmp647 # Offset: 4325
    000010eb: 	movq	0x18(%rsp), %rax
    000010f0: 	movzbl	(%rax), %eax
    000010f3: 	movb	%al, 0x10(%r14)
.Ltmp762:
    000010f7: 	movq	%r13, 0x8(%r14)
    000010fb: 	movb	$0x0, (%rdi,%r13)
    00001100: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001107: 	addq	$0x20, %rax
    0000110b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp745:
    00001112: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001119: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001120: 	je	.Ltmp648 # Offset: 4384
.Ltmp742:
    00001126: 	movq	-0x20(%rax), %r13
    0000112a: 	callq	clock@PLT # Offset: 4394
    0000112f: 	pxor	%xmm0, %xmm0
    00001133: 	movq	%rax, end_time(%rip)
    0000113a: 	movq	%r13, %rdi
    0000113d: 	subq	start_time(%rip), %rax
    00001144: 	cvtsi2sd	%rax, %xmm0
    00001149: 	divsd	DATAat0x12360(%rip), %xmm0
    00001151: 	callq	_Z13record_resultdPKc # Offset: 4433
    00001156: 	pxor	%xmm1, %xmm1
    0000115a: 	pxor	%xmm7, %xmm7
    0000115e: 	pxor	%xmm6, %xmm6
    00001162: 	movq	%rbp, %rax
    00001165: 	pxor	%xmm5, %xmm5
    00001169: 	nopl	(%rax) # Size: 7
.Ltmp649:
    00001170: 	movdqu	(%rax), %xmm0
    00001174: 	addq	$0x10, %rax
    00001178: 	movdqa	%xmm0, %xmm3
    0000117c: 	punpckhbw	%xmm7, %xmm0
    00001180: 	punpcklbw	%xmm7, %xmm3
    00001184: 	movdqa	%xmm0, %xmm4
    00001188: 	punpckhwd	%xmm6, %xmm0
    0000118c: 	movdqa	%xmm3, %xmm2
    00001190: 	punpckhwd	%xmm6, %xmm3
    00001194: 	punpcklwd	%xmm6, %xmm4
    00001198: 	punpcklwd	%xmm6, %xmm2
    0000119c: 	movdqa	%xmm2, %xmm8
    000011a1: 	punpckldq	%xmm5, %xmm2
    000011a5: 	punpckhdq	%xmm5, %xmm8
    000011aa: 	paddq	%xmm8, %xmm2
    000011af: 	movdqa	%xmm3, %xmm8
    000011b4: 	punpckldq	%xmm5, %xmm3
    000011b8: 	punpckhdq	%xmm5, %xmm8
    000011bd: 	paddq	%xmm8, %xmm3
    000011c2: 	paddq	%xmm3, %xmm2
    000011c6: 	movdqa	%xmm4, %xmm3
    000011ca: 	punpckldq	%xmm5, %xmm4
    000011ce: 	punpckhdq	%xmm5, %xmm3
    000011d2: 	paddq	%xmm3, %xmm4
    000011d6: 	movdqa	%xmm0, %xmm3
    000011da: 	punpckhdq	%xmm5, %xmm0
    000011de: 	punpckldq	%xmm5, %xmm3
    000011e2: 	paddq	%xmm0, %xmm1
    000011e6: 	paddq	%xmm3, %xmm4
    000011ea: 	paddq	%xmm4, %xmm2
    000011ee: 	paddq	%xmm2, %xmm1
    000011f2: 	cmpq	%rax, %rbx
    000011f5: 	jne	.Ltmp649 # Offset: 4597
    000011fb: 	movdqa	%xmm1, %xmm0
    000011ff: 	movzbl	init_value(%rip), %edx
    00001206: 	movq	0x80(%rsp), %rdi
    0000120e: 	psrldq	$0x8, %xmm0
    00001213: 	paddq	%xmm0, %xmm1
    00001217: 	shlq	$0x1a, %rdx
    0000121b: 	movq	%xmm1, %rax
    00001220: 	cmpq	%rax, %rdx
    00001223: 	je	.Ltmp650 # Offset: 4643
    00001225: 	movq	%rdi, %rdx
    00001228: 	leaq	DATAat0x12278(%rip), %rsi
    0000122f: 	movl	$0x1, %edi
    00001234: 	xorl	%eax, %eax
    00001236: 	callq	__printf_chk@PLT # Offset: 4662
    0000123b: 	movq	0x80(%rsp), %rdi
.Ltmp650:
    00001243: 	cmpq	0x8(%rsp), %rdi
    00001248: 	je	.Ltmp651 # Offset: 4680
    0000124a: 	movq	0x90(%rsp), %rax
    00001252: 	leaq	0x1(%rax), %rsi
    00001256: 	callq	_ZdlPvm@PLT # Offset: 4694
.Ltmp651:
    0000125b: 	movq	0x8(%rsp), %rax
    00001260: 	movq	0x60(%rsp), %r14
    00001265: 	movq	0x68(%rsp), %r13
    0000126a: 	movq	%rax, 0x80(%rsp)
    00001272: 	movq	%r14, %rax
    00001275: 	addq	%r13, %rax
    00001278: 	je	.Ltmp652 # Offset: 4728
    0000127a: 	testq	%r14, %r14
    0000127d: 	je	.Ltmp653 # Offset: 4733
.Ltmp652:
    00001283: 	movq	%r13, 0x58(%rsp)
    00001288: 	cmpq	$0xf, %r13
    0000128c: 	ja	.Ltmp654 # Offset: 4748
    00001292: 	cmpq	$0x1, %r13
    00001296: 	jne	.Ltmp655 # Offset: 4758
    0000129c: 	movzbl	(%r14), %eax
    000012a0: 	movb	%al, 0x90(%rsp)
    000012a7: 	movq	0x8(%rsp), %rax
.Ltmp725:
    000012ac: 	movq	%r13, 0x88(%rsp)
    000012b4: 	movb	$0x0, (%rax,%r13)
    000012b9: 	movabsq	$0x3fffffffffffffff, %rax
    000012c3: 	subq	0x88(%rsp), %rax
    000012cb: 	cmpq	$0x1d, %rax
    000012cf: 	jbe	.Ltmp656 # Offset: 4815
    000012d5: 	movl	$0x1e, %edx
    000012da: 	leaq	DATAat0x12330(%rip), %rsi
    000012e1: 	movq	%r12, %rdi
    000012e4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4836
    000012e9: 	movzbl	init_value(%rip), %r13d
    000012f1: 	callq	clock@PLT # Offset: 4849
    000012f6: 	movl	iterations(%rip), %r9d
    000012fd: 	movq	%rax, start_time(%rip)
    00001304: 	testl	%r9d, %r9d
    00001307: 	jle	.Ltmp657 # Offset: 4871
    00001309: 	movzbl	%r13b, %r10d
    0000130d: 	xorl	%esi, %esi
    0000130f: 	movl	$0x4000000, %r11d
    00001315: 	movl	$0x1, %r14d
    0000131b: 	movq	%r10, %rax
    0000131e: 	shlq	$0x8, %rax
    00001322: 	orq	%r10, %rax
    00001325: 	movq	%rax, %rdx
    00001328: 	shlq	$0x10, %rdx
    0000132c: 	orq	%rdx, %rax
    0000132f: 	movq	%rax, %rdx
    00001332: 	shlq	$0x20, %rdx
    00001336: 	orq	%rdx, %rax
    00001339: 	movq	%rax, %xmm1
    0000133e: 	movabsq	$0x101010101010101, %rax
    00001348: 	imulq	%rax, %r10
    0000134c: 	movdqa	%xmm1, %xmm0
    00001350: 	punpcklqdq	%xmm0, %xmm0
    00001354: 	nopl	(%rax) # Size: 4
.Ltmp660:
    00001358: 	movq	%rbp, %rdx
    0000135b: 	xorl	%eax, %eax
    0000135d: 	nopl	(%rax) # Size: 3
.Ltmp659:
    00001360: 	testb	$0x7, %dl
    00001363: 	je	.Ltmp658 # Offset: 4963
    00001369: 	addl	$0x1, %eax
    0000136c: 	movb	%r13b, (%rdx)
    0000136f: 	addq	$0x1, %rdx
    00001373: 	cmpl	$0x4000000, %eax
    00001378: 	jne	.Ltmp659 # Offset: 4984
.Ltmp703:
    0000137a: 	addl	$0x1, %esi
    0000137d: 	cmpl	%esi, %r9d
    00001380: 	jne	.Ltmp660 # Offset: 4992
.Ltmp657:
    00001382: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001389: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00001390: 	subq	$0x20, %rax
    00001394: 	cmpq	%rax, %r14
    00001397: 	je	.Ltmp661 # Offset: 5015
    0000139d: 	leaq	0x10(%r14), %rdi
    000013a1: 	movq	0x88(%rsp), %r13
    000013a9: 	movq	%rdi, (%r14)
    000013ac: 	movq	0x80(%rsp), %rax
    000013b4: 	movq	%rax, %rcx
    000013b7: 	movq	%rax, 0x18(%rsp)
    000013bc: 	addq	%r13, %rcx
    000013bf: 	je	.Ltmp662 # Offset: 5055
    000013c1: 	testq	%rax, %rax
    000013c4: 	je	.Ltmp663 # Offset: 5060
.Ltmp662:
    000013ca: 	movq	%r13, 0x58(%rsp)
    000013cf: 	cmpq	$0xf, %r13
    000013d3: 	ja	.Ltmp664 # Offset: 5075
    000013d9: 	cmpq	$0x1, %r13
    000013dd: 	jne	.Ltmp665 # Offset: 5085
    000013e3: 	movq	0x18(%rsp), %rax
    000013e8: 	movzbl	(%rax), %eax
    000013eb: 	movb	%al, 0x10(%r14)
.Ltmp760:
    000013ef: 	movq	%r13, 0x8(%r14)
    000013f3: 	movb	$0x0, (%rdi,%r13)
    000013f8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000013ff: 	addq	$0x20, %rax
    00001403: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp744:
    0000140a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001411: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001418: 	je	.Ltmp666 # Offset: 5144
.Ltmp743:
    0000141e: 	movq	-0x20(%rax), %r13
    00001422: 	callq	clock@PLT # Offset: 5154
    00001427: 	pxor	%xmm0, %xmm0
    0000142b: 	movq	%rax, end_time(%rip)
    00001432: 	movq	%r13, %rdi
    00001435: 	subq	start_time(%rip), %rax
    0000143c: 	cvtsi2sd	%rax, %xmm0
    00001441: 	divsd	DATAat0x12360(%rip), %xmm0
    00001449: 	callq	_Z13record_resultdPKc # Offset: 5193
    0000144e: 	pxor	%xmm1, %xmm1
    00001452: 	pxor	%xmm7, %xmm7
    00001456: 	pxor	%xmm6, %xmm6
    0000145a: 	pxor	%xmm5, %xmm5
    0000145e: 	nop # Size: 2
.Ltmp667:
    00001460: 	movdqu	(%r15), %xmm0
    00001465: 	addq	$0x10, %r15
    00001469: 	movdqa	%xmm0, %xmm3
    0000146d: 	punpckhbw	%xmm7, %xmm0
    00001471: 	punpcklbw	%xmm7, %xmm3
    00001475: 	movdqa	%xmm0, %xmm4
    00001479: 	punpckhwd	%xmm6, %xmm0
    0000147d: 	movdqa	%xmm3, %xmm2
    00001481: 	punpckhwd	%xmm6, %xmm3
    00001485: 	punpcklwd	%xmm6, %xmm4
    00001489: 	punpcklwd	%xmm6, %xmm2
    0000148d: 	movdqa	%xmm2, %xmm8
    00001492: 	punpckhdq	%xmm5, %xmm2
    00001496: 	punpckldq	%xmm5, %xmm8
    0000149b: 	paddq	%xmm8, %xmm2
    000014a0: 	movdqa	%xmm3, %xmm8
    000014a5: 	punpckhdq	%xmm5, %xmm3
    000014a9: 	punpckldq	%xmm5, %xmm8
    000014ae: 	paddq	%xmm8, %xmm3
    000014b3: 	paddq	%xmm3, %xmm2
    000014b7: 	movdqa	%xmm4, %xmm3
    000014bb: 	punpckldq	%xmm5, %xmm4
    000014bf: 	punpckhdq	%xmm5, %xmm3
    000014c3: 	paddq	%xmm3, %xmm4
    000014c7: 	movdqa	%xmm0, %xmm3
    000014cb: 	punpckhdq	%xmm5, %xmm0
    000014cf: 	punpckldq	%xmm5, %xmm3
    000014d3: 	paddq	%xmm0, %xmm1
    000014d7: 	paddq	%xmm3, %xmm4
    000014db: 	paddq	%xmm4, %xmm2
    000014df: 	paddq	%xmm2, %xmm1
    000014e3: 	cmpq	%rbx, %r15
    000014e6: 	jne	.Ltmp667 # Offset: 5350
    000014ec: 	movdqa	%xmm1, %xmm0
    000014f0: 	movzbl	init_value(%rip), %edx
    000014f7: 	movq	0x80(%rsp), %rdi
    000014ff: 	psrldq	$0x8, %xmm0
    00001504: 	paddq	%xmm0, %xmm1
    00001508: 	shlq	$0x1a, %rdx
    0000150c: 	movq	%xmm1, %rax
    00001511: 	cmpq	%rax, %rdx
    00001514: 	je	.Ltmp668 # Offset: 5396
    00001516: 	movq	%rdi, %rdx
    00001519: 	leaq	DATAat0x12278(%rip), %rsi
    00001520: 	movl	$0x1, %edi
    00001525: 	xorl	%eax, %eax
    00001527: 	callq	__printf_chk@PLT # Offset: 5415
    0000152c: 	movq	0x80(%rsp), %rdi
.Ltmp668:
    00001534: 	cmpq	0x8(%rsp), %rdi
    00001539: 	je	.Ltmp669 # Offset: 5433
    0000153b: 	movq	0x90(%rsp), %rax
    00001543: 	leaq	0x1(%rax), %rsi
    00001547: 	callq	_ZdlPvm@PLT # Offset: 5447
.Ltmp669:
    0000154c: 	movq	%rbp, %rdi
    0000154f: 	callq	_ZdaPv@PLT # Offset: 5455
    00001554: 	movq	0x8(%rsp), %rax
    00001559: 	movq	0x60(%rsp), %rbp
    0000155e: 	movq	0x68(%rsp), %r13
    00001563: 	movq	%rax, 0x80(%rsp)
    0000156b: 	movq	%rbp, %rax
    0000156e: 	addq	%r13, %rax
    00001571: 	je	.Ltmp670 # Offset: 5489
    00001573: 	testq	%rbp, %rbp
    00001576: 	je	.Ltmp671 # Offset: 5494
.Ltmp670:
    0000157c: 	movq	%r13, 0x58(%rsp)
    00001581: 	cmpq	$0xf, %r13
    00001585: 	ja	.Ltmp672 # Offset: 5509
    0000158b: 	cmpq	$0x1, %r13
    0000158f: 	jne	.Ltmp673 # Offset: 5519
    00001595: 	movzbl	(%rbp), %eax
    00001599: 	movb	%al, 0x90(%rsp)
    000015a0: 	movq	0x8(%rsp), %rax
.Ltmp729:
    000015a5: 	movq	%r13, 0x88(%rsp)
    000015ad: 	movb	$0x0, (%rax,%r13)
    000015b2: 	movabsq	$0x3fffffffffffffff, %rax
    000015bc: 	subq	0x88(%rsp), %rax
    000015c4: 	cmpq	$0x6, %rax
    000015c8: 	jbe	.Ltmp674 # Offset: 5576
    000015ce: 	movl	$0x7, %edx
    000015d3: 	leaq	DATAat0x1229d(%rip), %rsi
    000015da: 	movq	%r12, %rdi
    000015dd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5597
    000015e2: 	movl	iterations(%rip), %edx
    000015e8: 	xorl	%r8d, %r8d
    000015eb: 	xorl	%ecx, %ecx
    000015ed: 	movl	$0x4000000, %esi
    000015f2: 	movq	0x80(%rsp), %rdi
    000015fa: 	callq	_Z9summarizePKciiii # Offset: 5626
    000015ff: 	movq	0x80(%rsp), %rdi
    00001607: 	cmpq	0x8(%rsp), %rdi
    0000160c: 	je	.Ltmp675 # Offset: 5644
    0000160e: 	movq	0x90(%rsp), %rax
    00001616: 	leaq	0x1(%rax), %rsi
    0000161a: 	callq	_ZdlPvm@PLT # Offset: 5658
.Ltmp675:
    0000161f: 	movq	0x60(%rsp), %rdi
    00001624: 	cmpq	0x10(%rsp), %rdi
    00001629: 	je	.Ltmp676 # Offset: 5673
    0000162b: 	movq	0x70(%rsp), %rax
    00001630: 	leaq	0x1(%rax), %rsi
    00001634: 	callq	_ZdlPvm@PLT # Offset: 5684
.Ltmp676:
    00001639: 	movq	0xa8(%rsp), %rax
    00001641: 	subq	%fs:0x28, %rax
    0000164a: 	jne	.Ltmp677 # Offset: 5706
    00001650: 	addq	$0xb8, %rsp
    00001657: 	popq	%rbx
    00001658: 	popq	%rbp
    00001659: 	popq	%r12
    0000165b: 	popq	%r13
    0000165d: 	popq	%r14
    0000165f: 	popq	%r15
    00001661: 	retq # Offset: 5729
    00001662: 	nopw	(%rax,%rax) # Size: 6
.Ltmp678:
    00001668: 	addq	$0x20, %rbp
.Ltmp538:
    0000166c: 	cmpq	%rbp, 0x8(%rsp)
    00001671: 	je	.Ltmp541 # Offset: 5745
.Ltmp679:
    00001677: 	movq	(%rbp), %rdi
    0000167b: 	leaq	0x10(%rbp), %rax
    0000167f: 	cmpq	%rax, %rdi
    00001682: 	je	.Ltmp678 # Offset: 5762
    00001684: 	movq	0x10(%rbp), %rax
    00001688: 	addq	$0x20, %rbp
    0000168c: 	leaq	0x1(%rax), %rsi
    00001690: 	callq	_ZdlPvm@PLT # Offset: 5776
    00001695: 	cmpq	%rbp, 0x8(%rsp)
    0000169a: 	jne	.Ltmp679 # Offset: 5786
    0000169c: 	jmp	.Ltmp541 # Offset: 5788
    000016a1: 	nopl	(%rax) # Size: 7
.Ltmp534:
    000016a8: 	addq	$0x20, %rbp
    000016ac: 	cmpq	%rbx, %rbp
    000016af: 	jne	.Ltmp535 # Offset: 5807
    000016b5: 	addq	$0x8, %r13
    000016b9: 	cmpq	%r13, %r15
    000016bc: 	ja	.Ltmp536 # Offset: 5820
    000016c2: 	jmp	.Ltmp680 # Offset: 5826
.Ltmp549:
    000016c7: 	testq	%r12, %r12
    000016ca: 	jne	.Ltmp681 # Offset: 5834
    000016d0: 	movq	0x8(%rsp), %rax
    000016d5: 	jmp	.Ltmp682 # Offset: 5845
    000016da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp640:
    000016e0: 	cmpl	$0x3fffffc, %edx
    000016e6: 	jg	.Ltmp683 # Offset: 5862
    000016ec: 	testb	$0x3f, %al
    000016ee: 	je	.Ltmp684 # Offset: 5870
    000016f4: 	leal	0x4(%rdx), %eax
    000016f7: 	cltq
    000016f9: 	nopl	(%rax) # Size: 7
.Ltmp686:
    00001700: 	movl	%esi, -0x4(%rbp,%rax)
    00001704: 	movl	%eax, %edx
    00001706: 	cmpl	$0x3fffffc, %eax
    0000170b: 	jg	.Ltmp685 # Offset: 5899
    0000170d: 	leaq	(%rbp,%rax), %rcx
    00001712: 	addq	$0x4, %rax
    00001716: 	andl	$0x3f, %ecx
    00001719: 	jne	.Ltmp686 # Offset: 5913
.Ltmp685:
    0000171b: 	cmpl	$0x3ffffc0, %edx
    00001721: 	jg	.Ltmp687 # Offset: 5921
.Ltmp769:
    00001723: 	movl	$0x3ffffc0, %r8d
    00001729: 	movslq	%edx, %rax
    0000172c: 	xorl	%r9d, %r9d
    0000172f: 	subl	%edx, %r8d
    00001732: 	addq	%rbp, %rax
    00001735: 	shrl	$0x6, %r8d
    00001739: 	leal	0x1(%r8), %ecx
    0000173d: 	nopl	(%rax) # Size: 3
.Ltmp688:
    00001740: 	addl	$0x1, %r9d
    00001744: 	movups	%xmm0, (%rax)
    00001747: 	addq	$0x40, %rax
    0000174b: 	movups	%xmm0, -0x30(%rax)
    0000174f: 	movups	%xmm0, -0x20(%rax)
    00001753: 	movups	%xmm0, -0x10(%rax)
    00001757: 	cmpl	%r9d, %ecx
    0000175a: 	ja	.Ltmp688 # Offset: 5978
    0000175c: 	shll	$0x6, %r8d
    00001760: 	leal	0x40(%rdx,%r8), %edx
.Ltmp687:
    00001765: 	cmpl	$0x3fffffc, %edx
    0000176b: 	jg	.Ltmp689 # Offset: 5995
.Ltmp770:
    0000176d: 	movl	$0x3fffffc, %eax
    00001772: 	subl	%edx, %eax
    00001774: 	movl	%eax, %ecx
    00001776: 	shrl	$0x2, %ecx
    00001779: 	leal	0x1(%rcx), %r8d
    0000177d: 	cmpl	$0xb, %eax
    00001780: 	jbe	.Ltmp690 # Offset: 6016
    00001786: 	movl	%r8d, %r9d
    00001789: 	movslq	%edx, %rax
    0000178c: 	addq	%rbp, %rax
    0000178f: 	shrl	$0x2, %r9d
    00001793: 	movups	%xmm0, (%rax)
    00001796: 	cmpl	$0x1, %r9d
    0000179a: 	je	.Ltmp691 # Offset: 6042
    0000179c: 	movups	%xmm0, 0x10(%rax)
    000017a0: 	cmpl	$0x2, %r9d
    000017a4: 	je	.Ltmp691 # Offset: 6052
    000017a6: 	movups	%xmm0, 0x20(%rax)
.Ltmp691:
    000017aa: 	movl	%r8d, %r9d
    000017ad: 	andl	$-0x4, %r9d
    000017b1: 	leal	(%rdx,%r9,4), %eax
    000017b5: 	cmpl	%r8d, %r9d
    000017b8: 	je	.Ltmp692 # Offset: 6072
.Ltmp768:
    000017ba: 	movslq	%eax, %r8
    000017bd: 	movl	%esi, (%rbp,%r8)
    000017c2: 	leal	0x4(%rax), %r8d
    000017c6: 	cmpl	$0x3fffffc, %r8d
    000017cd: 	jg	.Ltmp692 # Offset: 6093
    000017cf: 	movslq	%r8d, %r8
    000017d2: 	addl	$0x8, %eax
    000017d5: 	movl	%esi, (%rbp,%r8)
    000017da: 	cmpl	$0x3fffffc, %eax
    000017df: 	jg	.Ltmp692 # Offset: 6111
    000017e1: 	cltq
    000017e3: 	movl	%esi, (%rbp,%rax)
.Ltmp692:
    000017e7: 	leal	0x4(%rdx,%rcx,4), %edx
.Ltmp689:
    000017eb: 	cmpl	$0x4000000, %edx
    000017f1: 	je	.Ltmp693 # Offset: 6129
.Ltmp683:
    000017f7: 	movl	%r14d, %eax
    000017fa: 	subl	%edx, %eax
    000017fc: 	movslq	%edx, %rdx
    000017ff: 	addq	%rbp, %rdx
    00001802: 	cmpl	$0x8, %eax
    00001805: 	jae	.Ltmp694 # Offset: 6149
    0000180b: 	testb	$0x4, %al
    0000180d: 	jne	.Ltmp695 # Offset: 6157
    00001813: 	testl	%eax, %eax
    00001815: 	je	.Ltmp693 # Offset: 6165
    0000181b: 	movb	%r11b, (%rdx)
    0000181e: 	testb	$0x2, %al
    00001820: 	je	.Ltmp693 # Offset: 6176
    00001826: 	movw	%r11w, -0x2(%rdx,%rax)
    0000182c: 	jmp	.Ltmp693 # Offset: 6188
    00001831: 	nopl	(%rax) # Size: 7
.Ltmp658:
    00001838: 	cmpl	$0x3fffff8, %eax
    0000183d: 	jg	.Ltmp696 # Offset: 6205
    00001843: 	andl	$0x3f, %edx
    00001846: 	je	.Ltmp697 # Offset: 6214
    0000184c: 	addl	$0x8, %eax
    0000184f: 	movslq	%eax, %rdx
    00001852: 	nopw	(%rax,%rax) # Size: 6
.Ltmp699:
    00001858: 	movq	%xmm1, -0x8(%rbp,%rdx)
    0000185e: 	movl	%edx, %eax
    00001860: 	cmpl	$0x3fffff8, %edx
    00001866: 	jg	.Ltmp698 # Offset: 6246
    00001868: 	leaq	(%rbp,%rdx), %rcx
    0000186d: 	addq	$0x8, %rdx
    00001871: 	andl	$0x3f, %ecx
    00001874: 	jne	.Ltmp699 # Offset: 6260
.Ltmp698:
    00001876: 	cmpl	$0x3ffffbf, %eax
    0000187b: 	jg	.Ltmp700 # Offset: 6267
.Ltmp771:
    00001881: 	movl	$0x3ffffbf, %r8d
    00001887: 	movslq	%eax, %rdx
    0000188a: 	xorl	%ecx, %ecx
    0000188c: 	subl	%eax, %r8d
    0000188f: 	addq	%rbp, %rdx
    00001892: 	shrl	$0x6, %r8d
    00001896: 	leal	0x1(%r8), %edi
    0000189a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp701:
    000018a0: 	addl	$0x1, %ecx
    000018a3: 	movups	%xmm0, (%rdx)
    000018a6: 	addq	$0x40, %rdx
    000018aa: 	movups	%xmm0, -0x30(%rdx)
    000018ae: 	movups	%xmm0, -0x20(%rdx)
    000018b2: 	movups	%xmm0, -0x10(%rdx)
    000018b6: 	cmpl	%edi, %ecx
    000018b8: 	jb	.Ltmp701 # Offset: 6328
    000018ba: 	shll	$0x6, %r8d
    000018be: 	leal	0x40(%rax,%r8), %eax
    000018c3: 	cmpl	$0x3fffff8, %eax
    000018c8: 	jg	.Ltmp696 # Offset: 6344
.Ltmp766:
    000018ce: 	movslq	%eax, %rdx
    000018d1: 	leal	0x8(%rax), %ecx
    000018d4: 	movq	%xmm1, (%rbp,%rdx)
    000018da: 	cmpl	$0x3fffff8, %ecx
    000018e0: 	jg	.Ltmp702 # Offset: 6368
    000018e2: 	movslq	%ecx, %rdx
    000018e5: 	movq	%xmm1, (%rbp,%rdx)
    000018eb: 	leal	0x10(%rax), %edx
    000018ee: 	cmpl	$0x3fffff8, %edx
    000018f4: 	jg	.Ltmp702 # Offset: 6388
    000018f6: 	movslq	%edx, %rdx
    000018f9: 	movq	%xmm1, (%rbp,%rdx)
    000018ff: 	leal	0x18(%rax), %edx
    00001902: 	cmpl	$0x3fffff8, %edx
    00001908: 	jg	.Ltmp702 # Offset: 6408
    0000190a: 	movslq	%edx, %rdx
    0000190d: 	movq	%xmm1, (%rbp,%rdx)
    00001913: 	leal	0x20(%rax), %edx
    00001916: 	cmpl	$0x3fffff8, %edx
    0000191c: 	jg	.Ltmp702 # Offset: 6428
    0000191e: 	movslq	%edx, %rdx
    00001921: 	movq	%xmm1, (%rbp,%rdx)
    00001927: 	leal	0x28(%rax), %edx
    0000192a: 	cmpl	$0x3fffff8, %edx
    00001930: 	jg	.Ltmp702 # Offset: 6448
    00001932: 	movslq	%edx, %rdx
    00001935: 	movq	%xmm1, (%rbp,%rdx)
    0000193b: 	leal	0x30(%rax), %edx
    0000193e: 	cmpl	$0x3fffff8, %edx
    00001944: 	jg	.Ltmp702 # Offset: 6468
    00001946: 	movslq	%edx, %rdi
    00001949: 	movq	%xmm1, (%rbp,%rdi)
    0000194f: 	cmpl	$0x3fffff0, %edx
    00001955: 	jne	.Ltmp702 # Offset: 6485
    00001957: 	movq	%xmm1, 0x3fffff8(%rbp)
.Ltmp702:
    0000195f: 	movl	$0x3fffff8, %edx
    00001964: 	subl	%eax, %edx
    00001966: 	andl	$-0x8, %edx
    00001969: 	cmpl	$0x3fffff8, %eax
    0000196e: 	movl	$0x0, %eax
    00001973: 	cmovgl	%eax, %edx
    00001976: 	leal	(%rcx,%rdx), %eax
.Ltmp767:
    00001979: 	cmpl	$0x4000000, %eax
    0000197e: 	je	.Ltmp703 # Offset: 6526
.Ltmp696:
    00001984: 	movl	%r11d, %edx
    00001987: 	subl	%eax, %edx
    00001989: 	cmpl	$0x3ffffff, %eax
    0000198e: 	cltq
    00001990: 	cmovgq	%r14, %rdx
    00001994: 	addq	%rbp, %rax
    00001997: 	movl	%edx, %ecx
    00001999: 	cmpl	$0x8, %edx
    0000199c: 	jae	.Ltmp704 # Offset: 6556
    000019a2: 	andl	$0x4, %edx
    000019a5: 	jne	.Ltmp705 # Offset: 6565
    000019ab: 	testl	%ecx, %ecx
    000019ad: 	je	.Ltmp703 # Offset: 6573
    000019b3: 	movb	%r10b, (%rax)
    000019b6: 	testb	$0x2, %cl
    000019b9: 	je	.Ltmp703 # Offset: 6585
    000019bf: 	movw	%r10w, -0x2(%rax,%rcx)
    000019c5: 	jmp	.Ltmp703 # Offset: 6597
    000019ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp622:
    000019d0: 	cmpl	$0x3ffffe0, %eax
    000019d5: 	jg	.Ltmp706 # Offset: 6613
    000019d7: 	movl	$0x3ffffe0, %r10d
    000019dd: 	movslq	%eax, %rdx
    000019e0: 	xorl	%ecx, %ecx
    000019e2: 	subl	%eax, %r10d
    000019e5: 	addq	%rbp, %rdx
    000019e8: 	shrl	$0x5, %r10d
    000019ec: 	leal	0x1(%r10), %edi
.Ltmp707:
    000019f0: 	addl	$0x1, %ecx
    000019f3: 	movups	%xmm0, (%rdx)
    000019f6: 	addq	$0x20, %rdx
    000019fa: 	movups	%xmm0, -0x10(%rdx)
    000019fe: 	cmpl	%ecx, %edi
    00001a00: 	ja	.Ltmp707 # Offset: 6656
    00001a02: 	shll	$0x5, %r10d
    00001a06: 	leal	0x20(%rax,%r10), %eax
.Ltmp706:
    00001a0b: 	cmpl	$0x3fffff8, %eax
    00001a10: 	jg	.Ltmp708 # Offset: 6672
    00001a12: 	movslq	%eax, %rdx
    00001a15: 	leal	0x8(%rax), %ecx
    00001a18: 	movq	%xmm1, (%rbp,%rdx)
    00001a1e: 	cmpl	$0x3fffff8, %ecx
    00001a24: 	jg	.Ltmp709 # Offset: 6692
    00001a26: 	movslq	%ecx, %rdx
    00001a29: 	movq	%xmm1, (%rbp,%rdx)
    00001a2f: 	leal	0x10(%rax), %edx
    00001a32: 	cmpl	$0x3fffff8, %edx
    00001a38: 	jg	.Ltmp709 # Offset: 6712
    00001a3a: 	movslq	%edx, %rdx
    00001a3d: 	movq	%xmm1, (%rbp,%rdx)
.Ltmp709:
    00001a43: 	movl	%r14d, %edx
    00001a46: 	subl	%eax, %edx
    00001a48: 	movl	%edx, %eax
    00001a4a: 	andl	$-0x8, %eax
    00001a4d: 	addl	%ecx, %eax
.Ltmp708:
    00001a4f: 	cmpl	$0x4000000, %eax
    00001a54: 	je	.Ltmp710 # Offset: 6740
    00001a5a: 	movl	%r11d, %edx
    00001a5d: 	subl	%eax, %edx
    00001a5f: 	cltq
    00001a61: 	addq	%rbp, %rax
    00001a64: 	cmpl	$0x8, %edx
    00001a67: 	jae	.Ltmp711 # Offset: 6759
    00001a6d: 	testb	$0x4, %dl
    00001a70: 	jne	.Ltmp712 # Offset: 6768
    00001a76: 	testl	%edx, %edx
    00001a78: 	je	.Ltmp710 # Offset: 6776
    00001a7e: 	movb	%r9b, (%rax)
    00001a81: 	testb	$0x2, %dl
    00001a84: 	je	.Ltmp710 # Offset: 6788
    00001a8a: 	movw	%r9w, -0x2(%rax,%rdx)
    00001a90: 	jmp	.Ltmp710 # Offset: 6800
    00001a95: 	nopl	(%rax) # Size: 3
.Ltmp604:
    00001a98: 	cmpl	$0x3fffff0, %eax
    00001a9d: 	jg	.Ltmp713 # Offset: 6813
    00001a9f: 	movl	$0x3fffff0, %r14d
    00001aa5: 	movslq	%eax, %rdi
    00001aa8: 	xorl	%edx, %edx
    00001aaa: 	subl	%eax, %r14d
    00001aad: 	addq	%rbp, %rdi
    00001ab0: 	shrl	$0x4, %r14d
    00001ab4: 	leal	0x1(%r14), %r8d
    00001ab8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp714:
    00001ac0: 	movq	%rdx, %rcx
    00001ac3: 	addq	$0x1, %rdx
    00001ac7: 	shlq	$0x4, %rcx
    00001acb: 	movups	%xmm0, (%rdi,%rcx)
    00001acf: 	cmpl	%edx, %r8d
    00001ad2: 	ja	.Ltmp714 # Offset: 6866
    00001ad4: 	shll	$0x4, %r14d
    00001ad8: 	leal	0x10(%rax,%r14), %eax
.Ltmp713:
    00001add: 	cmpl	$0x3fffffc, %eax
    00001ae2: 	jg	.Ltmp715 # Offset: 6882
    00001ae4: 	movslq	%eax, %rdx
    00001ae7: 	leal	0x4(%rax), %ecx
    00001aea: 	movl	%r9d, (%rbp,%rdx)
    00001aef: 	cmpl	$0x3fffffc, %ecx
    00001af5: 	jg	.Ltmp716 # Offset: 6901
    00001af7: 	movslq	%ecx, %rdx
    00001afa: 	movl	%r9d, (%rbp,%rdx)
    00001aff: 	leal	0x8(%rax), %edx
    00001b02: 	cmpl	$0x3fffffc, %edx
    00001b08: 	jg	.Ltmp716 # Offset: 6920
    00001b0a: 	movslq	%edx, %rdx
    00001b0d: 	movl	%r9d, (%rbp,%rdx)
.Ltmp716:
    00001b12: 	movl	$0x3fffffc, %edx
    00001b17: 	subl	%eax, %edx
    00001b19: 	movl	%edx, %eax
    00001b1b: 	andl	$-0x4, %eax
    00001b1e: 	addl	%ecx, %eax
.Ltmp715:
    00001b20: 	cmpl	$0x4000000, %eax
    00001b25: 	je	.Ltmp717 # Offset: 6949
    00001b2b: 	movl	$0x4000000, %edx
    00001b30: 	subl	%eax, %edx
    00001b32: 	cltq
    00001b34: 	addq	%rbp, %rax
    00001b37: 	cmpl	$0x8, %edx
    00001b3a: 	jae	.Ltmp718 # Offset: 6970
    00001b3c: 	testb	$0x4, %dl
    00001b3f: 	jne	.Ltmp719 # Offset: 6975
    00001b45: 	testl	%edx, %edx
    00001b47: 	je	.Ltmp717 # Offset: 6983
    00001b4d: 	movb	%r11b, (%rax)
    00001b50: 	testb	$0x2, %dl
    00001b53: 	je	.Ltmp717 # Offset: 6995
    00001b59: 	movw	%r11w, -0x2(%rax,%rdx)
    00001b5f: 	jmp	.Ltmp717 # Offset: 7007
    00001b64: 	nopl	(%rax) # Size: 4
.Ltmp711:
    00001b68: 	movl	%edx, %ecx
    00001b6a: 	movq	%r9, (%rax)
    00001b6d: 	movq	%r9, -0x8(%rax,%rcx)
    00001b72: 	leaq	0x8(%rax), %rcx
    00001b76: 	andq	$-0x8, %rcx
    00001b7a: 	subq	%rcx, %rax
    00001b7d: 	addl	%eax, %edx
    00001b7f: 	andl	$-0x8, %edx
    00001b82: 	cmpl	$0x8, %edx
    00001b85: 	jb	.Ltmp710 # Offset: 7045
    00001b8b: 	andl	$-0x8, %edx
    00001b8e: 	xorl	%eax, %eax
.Ltmp720:
    00001b90: 	movl	%eax, %edi
    00001b92: 	addl	$0x8, %eax
    00001b95: 	movq	%r9, (%rcx,%rdi)
    00001b99: 	cmpl	%edx, %eax
    00001b9b: 	jb	.Ltmp720 # Offset: 7067
    00001b9d: 	addl	$0x1, %esi
    00001ba0: 	cmpl	%r8d, %esi
    00001ba3: 	jne	.Ltmp624 # Offset: 7075
    00001ba9: 	jmp	.Ltmp621 # Offset: 7081
    00001bae: 	nop # Size: 2
.Ltmp718:
    00001bb0: 	movl	%edx, %ecx
    00001bb2: 	movq	%r11, (%rax)
    00001bb5: 	movq	%r11, -0x8(%rax,%rcx)
    00001bba: 	leaq	0x8(%rax), %rcx
    00001bbe: 	andq	$-0x8, %rcx
    00001bc2: 	subq	%rcx, %rax
    00001bc5: 	addl	%eax, %edx
    00001bc7: 	andl	$-0x8, %edx
    00001bca: 	cmpl	$0x8, %edx
    00001bcd: 	jb	.Ltmp717 # Offset: 7117
    00001bd3: 	andl	$-0x8, %edx
    00001bd6: 	xorl	%eax, %eax
.Ltmp721:
    00001bd8: 	movl	%eax, %edi
    00001bda: 	addl	$0x8, %eax
    00001bdd: 	movq	%r11, (%rcx,%rdi)
    00001be1: 	cmpl	%edx, %eax
    00001be3: 	jb	.Ltmp721 # Offset: 7139
    00001be5: 	addl	$0x1, %esi
    00001be8: 	cmpl	%esi, %r10d
    00001beb: 	jne	.Ltmp606 # Offset: 7147
    00001bf1: 	jmp	.Ltmp603 # Offset: 7153
    00001bf6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp694:
    00001c00: 	movl	%eax, %ecx
    00001c02: 	movq	%r11, (%rdx)
    00001c05: 	movq	%r11, -0x8(%rdx,%rcx)
    00001c0a: 	leaq	0x8(%rdx), %rcx
    00001c0e: 	andq	$-0x8, %rcx
    00001c12: 	subq	%rcx, %rdx
    00001c15: 	addl	%edx, %eax
    00001c17: 	andl	$-0x8, %eax
    00001c1a: 	cmpl	$0x8, %eax
    00001c1d: 	jb	.Ltmp693 # Offset: 7197
    00001c23: 	andl	$-0x8, %eax
    00001c26: 	xorl	%edx, %edx
.Ltmp722:
    00001c28: 	movl	%edx, %r8d
    00001c2b: 	addl	$0x8, %edx
    00001c2e: 	movq	%r11, (%rcx,%r8)
    00001c32: 	cmpl	%eax, %edx
    00001c34: 	jb	.Ltmp722 # Offset: 7220
    00001c36: 	addl	$0x1, %edi
    00001c39: 	cmpl	%edi, %r10d
    00001c3c: 	jne	.Ltmp642 # Offset: 7228
    00001c42: 	jmp	.Ltmp639 # Offset: 7234
    00001c47: 	nopw	(%rax,%rax) # Size: 9
.Ltmp704:
    00001c50: 	leaq	0x8(%rax), %rdi
    00001c54: 	movq	%r10, (%rax)
    00001c57: 	andq	$-0x8, %rdi
    00001c5b: 	movq	%r10, -0x8(%rdx,%rax)
    00001c60: 	subq	%rdi, %rax
    00001c63: 	leal	(%rdx,%rax), %ecx
    00001c66: 	andl	$-0x8, %ecx
    00001c69: 	cmpl	$0x8, %ecx
    00001c6c: 	jb	.Ltmp703 # Offset: 7276
    00001c72: 	andl	$-0x8, %ecx
    00001c75: 	xorl	%eax, %eax
.Ltmp723:
    00001c77: 	movl	%eax, %edx
    00001c79: 	addl	$0x8, %eax
    00001c7c: 	movq	%r10, (%rdi,%rdx)
    00001c80: 	cmpl	%ecx, %eax
    00001c82: 	jb	.Ltmp723 # Offset: 7298
    00001c84: 	addl	$0x1, %esi
    00001c87: 	cmpl	%esi, %r9d
    00001c8a: 	jne	.Ltmp660 # Offset: 7306
    00001c90: 	jmp	.Ltmp657 # Offset: 7312
.Ltmp655:
    00001c95: 	testq	%r13, %r13
    00001c98: 	jne	.Ltmp724 # Offset: 7320
    00001c9e: 	movq	0x8(%rsp), %rax
    00001ca3: 	jmp	.Ltmp725 # Offset: 7331
.Ltmp601:
    00001ca8: 	testq	%r13, %r13
    00001cab: 	jne	.Ltmp726 # Offset: 7339
    00001cb1: 	movq	0x8(%rsp), %rax
    00001cb6: 	jmp	.Ltmp727 # Offset: 7350
.Ltmp673:
    00001cbb: 	testq	%r13, %r13
    00001cbe: 	jne	.Ltmp728 # Offset: 7358
    00001cc4: 	movq	0x8(%rsp), %rax
    00001cc9: 	jmp	.Ltmp729 # Offset: 7369
.Ltmp561:
    00001cce: 	testq	%r13, %r13
    00001cd1: 	jne	.Ltmp730 # Offset: 7377
    00001cd7: 	movq	0x8(%rsp), %rax
    00001cdc: 	jmp	.Ltmp731 # Offset: 7388
.Ltmp555:
    00001ce1: 	testq	%r13, %r13
    00001ce4: 	jne	.Ltmp732 # Offset: 7396
    00001cea: 	movq	0x8(%rsp), %rax
    00001cef: 	jmp	.Ltmp733 # Offset: 7407
.Ltmp584:
    00001cf4: 	testq	%r13, %r13
    00001cf7: 	jne	.Ltmp734 # Offset: 7415
    00001cfd: 	movq	0x8(%rsp), %rax
    00001d02: 	jmp	.Ltmp735 # Offset: 7426
.Ltmp567:
    00001d07: 	testq	%r13, %r13
    00001d0a: 	jne	.Ltmp736 # Offset: 7434
    00001d10: 	movq	0x8(%rsp), %rax
    00001d15: 	jmp	.Ltmp737 # Offset: 7445
.Ltmp637:
    00001d1a: 	testq	%r13, %r13
    00001d1d: 	jne	.Ltmp738 # Offset: 7453
    00001d23: 	movq	0x8(%rsp), %rax
    00001d28: 	jmp	.Ltmp739 # Offset: 7464
.Ltmp619:
    00001d2d: 	testq	%r13, %r13
    00001d30: 	jne	.Ltmp740 # Offset: 7472
    00001d36: 	movq	0x8(%rsp), %rax
    00001d3b: 	jmp	.Ltmp741 # Offset: 7483
.Ltmp618:
    00001d40: 	leaq	0x58(%rsp), %rsi
    00001d45: 	xorl	%edx, %edx
    00001d47: 	movq	%r12, %rdi
    00001d4a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7498
    00001d4f: 	movq	%rax, 0x80(%rsp)
    00001d57: 	movq	%rax, %rdi
    00001d5a: 	movq	0x58(%rsp), %rax
    00001d5f: 	movq	%rax, 0x90(%rsp)
.Ltmp781:
    00001d67: 	movq	%r13, %rdx
    00001d6a: 	movq	%r14, %rsi
    00001d6d: 	callq	memcpy@PLT # Offset: 7533
    00001d72: 	movq	0x58(%rsp), %r13
    00001d77: 	movq	0x80(%rsp), %rax
    00001d7f: 	jmp	.Ltmp741 # Offset: 7551
.Ltmp554:
    00001d84: 	leaq	0x58(%rsp), %rsi
    00001d89: 	xorl	%edx, %edx
    00001d8b: 	movq	%r12, %rdi
    00001d8e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7566
    00001d93: 	movq	%rax, 0x80(%rsp)
    00001d9b: 	movq	%rax, %rdi
    00001d9e: 	movq	0x58(%rsp), %rax
    00001da3: 	movq	%rax, 0x90(%rsp)
.Ltmp777:
    00001dab: 	movq	%r13, %rdx
    00001dae: 	movq	%r14, %rsi
    00001db1: 	callq	memcpy@PLT # Offset: 7601
    00001db6: 	movq	0x58(%rsp), %r13
    00001dbb: 	movq	0x80(%rsp), %rax
    00001dc3: 	jmp	.Ltmp733 # Offset: 7619
.Ltmp583:
    00001dc8: 	leaq	0x58(%rsp), %rsi
    00001dcd: 	xorl	%edx, %edx
    00001dcf: 	movq	%r12, %rdi
    00001dd2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7634
    00001dd7: 	movq	%rax, 0x80(%rsp)
    00001ddf: 	movq	%rax, %rdi
    00001de2: 	movq	0x58(%rsp), %rax
    00001de7: 	movq	%rax, 0x90(%rsp)
.Ltmp778:
    00001def: 	movq	%r13, %rdx
    00001df2: 	movq	%r14, %rsi
    00001df5: 	callq	memcpy@PLT # Offset: 7669
    00001dfa: 	movq	0x58(%rsp), %r13
    00001dff: 	movq	0x80(%rsp), %rax
    00001e07: 	jmp	.Ltmp735 # Offset: 7687
.Ltmp566:
    00001e0c: 	leaq	0x58(%rsp), %rsi
    00001e11: 	xorl	%edx, %edx
    00001e13: 	movq	%r12, %rdi
    00001e16: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7702
    00001e1b: 	movq	%rax, 0x80(%rsp)
    00001e23: 	movq	%rax, %rdi
    00001e26: 	movq	0x58(%rsp), %rax
    00001e2b: 	movq	%rax, 0x90(%rsp)
.Ltmp779:
    00001e33: 	movq	%r13, %rdx
    00001e36: 	movq	%r14, %rsi
    00001e39: 	callq	memcpy@PLT # Offset: 7737
    00001e3e: 	movq	0x58(%rsp), %r13
    00001e43: 	movq	0x80(%rsp), %rax
    00001e4b: 	jmp	.Ltmp737 # Offset: 7755
.Ltmp636:
    00001e50: 	leaq	0x58(%rsp), %rsi
    00001e55: 	xorl	%edx, %edx
    00001e57: 	movq	%r12, %rdi
    00001e5a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7770
    00001e5f: 	movq	%rax, 0x80(%rsp)
    00001e67: 	movq	%rax, %rdi
    00001e6a: 	movq	0x58(%rsp), %rax
    00001e6f: 	movq	%rax, 0x90(%rsp)
.Ltmp780:
    00001e77: 	movq	%r13, %rdx
    00001e7a: 	movq	%r14, %rsi
    00001e7d: 	callq	memcpy@PLT # Offset: 7805
    00001e82: 	movq	0x58(%rsp), %r13
    00001e87: 	movq	0x80(%rsp), %rax
    00001e8f: 	jmp	.Ltmp739 # Offset: 7823
.Ltmp600:
    00001e94: 	leaq	0x58(%rsp), %rsi
    00001e99: 	xorl	%edx, %edx
    00001e9b: 	movq	%r12, %rdi
    00001e9e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7838
    00001ea3: 	movq	%rax, 0x80(%rsp)
    00001eab: 	movq	%rax, %rdi
    00001eae: 	movq	0x58(%rsp), %rax
    00001eb3: 	movq	%rax, 0x90(%rsp)
.Ltmp774:
    00001ebb: 	movq	%r13, %rdx
    00001ebe: 	movq	%r14, %rsi
    00001ec1: 	callq	memcpy@PLT # Offset: 7873
    00001ec6: 	movq	0x58(%rsp), %r13
    00001ecb: 	movq	0x80(%rsp), %rax
    00001ed3: 	jmp	.Ltmp727 # Offset: 7891
.Ltmp654:
    00001ed8: 	leaq	0x58(%rsp), %rsi
    00001edd: 	xorl	%edx, %edx
    00001edf: 	movq	%r12, %rdi
    00001ee2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7906
    00001ee7: 	movq	%rax, 0x80(%rsp)
    00001eef: 	movq	%rax, %rdi
    00001ef2: 	movq	0x58(%rsp), %rax
    00001ef7: 	movq	%rax, 0x90(%rsp)
.Ltmp773:
    00001eff: 	movq	%r13, %rdx
    00001f02: 	movq	%r14, %rsi
    00001f05: 	callq	memcpy@PLT # Offset: 7941
    00001f0a: 	movq	0x58(%rsp), %r13
    00001f0f: 	movq	0x80(%rsp), %rax
    00001f17: 	jmp	.Ltmp725 # Offset: 7959
.Ltmp548:
    00001f1c: 	leaq	0x58(%rsp), %rsi
    00001f21: 	leaq	0x80(%rsp), %rdi
    00001f29: 	xorl	%edx, %edx
    00001f2b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7979
    00001f30: 	movq	%rax, 0x80(%rsp)
    00001f38: 	movq	%rax, %rdi
    00001f3b: 	movq	0x58(%rsp), %rax
    00001f40: 	movq	%rax, 0x90(%rsp)
.Ltmp772:
    00001f48: 	movq	%r12, %rdx
    00001f4b: 	movq	%r13, %rsi
    00001f4e: 	callq	memcpy@PLT # Offset: 8014
    00001f53: 	movq	0x58(%rsp), %r12
    00001f58: 	movq	0x80(%rsp), %rax
    00001f60: 	jmp	.Ltmp682 # Offset: 8032
.Ltmp672:
    00001f65: 	leaq	0x58(%rsp), %rsi
    00001f6a: 	xorl	%edx, %edx
    00001f6c: 	movq	%r12, %rdi
    00001f6f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8047
    00001f74: 	movq	%rax, 0x80(%rsp)
    00001f7c: 	movq	%rax, %rdi
    00001f7f: 	movq	0x58(%rsp), %rax
    00001f84: 	movq	%rax, 0x90(%rsp)
.Ltmp775:
    00001f8c: 	movq	%r13, %rdx
    00001f8f: 	movq	%rbp, %rsi
    00001f92: 	callq	memcpy@PLT # Offset: 8082
    00001f97: 	movq	0x58(%rsp), %r13
    00001f9c: 	movq	0x80(%rsp), %rax
    00001fa4: 	jmp	.Ltmp729 # Offset: 8100
.Ltmp560:
    00001fa9: 	leaq	0x58(%rsp), %rsi
    00001fae: 	xorl	%edx, %edx
    00001fb0: 	movq	%r12, %rdi
    00001fb3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8115
    00001fb8: 	movq	%rax, 0x80(%rsp)
    00001fc0: 	movq	%rax, %rdi
    00001fc3: 	movq	0x58(%rsp), %rax
    00001fc8: 	movq	%rax, 0x90(%rsp)
.Ltmp776:
    00001fd0: 	movq	%r13, %rdx
    00001fd3: 	movq	%r14, %rsi
    00001fd6: 	callq	memcpy@PLT # Offset: 8150
    00001fdb: 	movq	0x58(%rsp), %r13
    00001fe0: 	movq	0x80(%rsp), %rax
    00001fe8: 	jmp	.Ltmp731 # Offset: 8168
.Ltmp648:
    00001fed: 	movq	-0x8(%rdx), %rax
    00001ff1: 	addq	$0x200, %rax
    00001ff7: 	jmp	.Ltmp742 # Offset: 8183
.Ltmp666:
    00001ffc: 	movq	-0x8(%rdx), %rax
    00002000: 	addq	$0x200, %rax
    00002006: 	jmp	.Ltmp743 # Offset: 8198
.Ltmp661:
    0000200b: 	movq	%r12, %rsi
    0000200e: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002015: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8213
    0000201a: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002021: 	jmp	.Ltmp744 # Offset: 8225
.Ltmp643:
    00002026: 	movq	%r12, %rsi
    00002029: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002030: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8240
    00002035: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000203c: 	jmp	.Ltmp745 # Offset: 8252
.Ltmp577:
    00002041: 	movq	-0x8(%rdx), %rax
    00002045: 	addq	$0x200, %rax
    0000204b: 	jmp	.Ltmp746 # Offset: 8267
.Ltmp630:
    00002050: 	movq	-0x8(%rdx), %rax
    00002054: 	addq	$0x200, %rax
    0000205a: 	jmp	.Ltmp747 # Offset: 8282
.Ltmp572:
    0000205f: 	movq	%r12, %rsi
    00002062: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002069: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8297
    0000206e: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002075: 	jmp	.Ltmp748 # Offset: 8309
.Ltmp625:
    0000207a: 	movq	%r12, %rsi
    0000207d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002084: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8324
    00002089: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002090: 	jmp	.Ltmp749 # Offset: 8336
.Ltmp612:
    00002095: 	movq	-0x8(%rdx), %rax
    00002099: 	addq	$0x200, %rax
    0000209f: 	jmp	.Ltmp750 # Offset: 8351
.Ltmp607:
    000020a4: 	movq	%r12, %rsi
    000020a7: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000020ae: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8366
    000020b3: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000020ba: 	jmp	.Ltmp751 # Offset: 8378
.Ltmp594:
    000020bf: 	movq	-0x8(%rdx), %rax
    000020c3: 	addq	$0x200, %rax
    000020c9: 	jmp	.Ltmp752 # Offset: 8393
.Ltmp589:
    000020ce: 	movq	%r12, %rsi
    000020d1: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000020d8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8408
    000020dd: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000020e4: 	jmp	.Ltmp753 # Offset: 8420
.Ltmp593:
    000020e9: 	testq	%r13, %r13
    000020ec: 	je	.Ltmp754 # Offset: 8428
    000020f2: 	jmp	.Ltmp755 # Offset: 8434
    000020f4: 	nopl	(%rax) # Size: 4
.Ltmp629:
    000020f8: 	testq	%r13, %r13
    000020fb: 	je	.Ltmp756 # Offset: 8443
    00002101: 	jmp	.Ltmp757 # Offset: 8449
    00002106: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp611:
    00002110: 	testq	%r13, %r13
    00002113: 	je	.Ltmp758 # Offset: 8467
    00002119: 	jmp	.Ltmp759 # Offset: 8473
    0000211e: 	nop # Size: 2
.Ltmp665:
    00002120: 	testq	%r13, %r13
    00002123: 	je	.Ltmp760 # Offset: 8483
    00002129: 	jmp	.Ltmp761 # Offset: 8489
    0000212e: 	nop # Size: 2
.Ltmp647:
    00002130: 	testq	%r13, %r13
    00002133: 	je	.Ltmp762 # Offset: 8499
    00002139: 	jmp	.Ltmp763 # Offset: 8505
    0000213e: 	nop # Size: 2
.Ltmp576:
    00002140: 	testq	%r13, %r13
    00002143: 	je	.Ltmp764 # Offset: 8515
    00002149: 	jmp	.Ltmp765 # Offset: 8521
    0000214b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp592:
    00002150: 	leaq	0x58(%rsp), %rsi
    00002155: 	xorl	%edx, %edx
    00002157: 	movq	%r14, %rdi
    0000215a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8538
    0000215f: 	movq	%rax, (%r14)
    00002162: 	movq	%rax, %rdi
    00002165: 	movq	0x58(%rsp), %rax
    0000216a: 	movq	%rax, 0x10(%r14)
.Ltmp755:
    0000216e: 	movq	0x18(%rsp), %rsi
    00002173: 	movq	%r13, %rdx
    00002176: 	callq	memcpy@PLT # Offset: 8566
    0000217b: 	movq	0x58(%rsp), %r13
    00002180: 	movq	(%r14), %rdi
    00002183: 	jmp	.Ltmp754 # Offset: 8579
.Ltmp575:
    00002188: 	leaq	0x58(%rsp), %rsi
    0000218d: 	xorl	%edx, %edx
    0000218f: 	movq	%rbx, %rdi
    00002192: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8594
    00002197: 	movq	%rax, (%rbx)
    0000219a: 	movq	%rax, %rdi
    0000219d: 	movq	0x58(%rsp), %rax
    000021a2: 	movq	%rax, 0x10(%rbx)
.Ltmp765:
    000021a6: 	movq	%r13, %rdx
    000021a9: 	movq	%r14, %rsi
    000021ac: 	callq	memcpy@PLT # Offset: 8620
    000021b1: 	movq	0x58(%rsp), %r13
    000021b6: 	movq	(%rbx), %rdi
    000021b9: 	jmp	.Ltmp764 # Offset: 8633
.Ltmp610:
    000021be: 	leaq	0x58(%rsp), %rsi
    000021c3: 	xorl	%edx, %edx
    000021c5: 	movq	%r14, %rdi
    000021c8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8648
    000021cd: 	movq	%rax, (%r14)
    000021d0: 	movq	%rax, %rdi
    000021d3: 	movq	0x58(%rsp), %rax
    000021d8: 	movq	%rax, 0x10(%r14)
.Ltmp759:
    000021dc: 	movq	0x18(%rsp), %rsi
    000021e1: 	movq	%r13, %rdx
    000021e4: 	callq	memcpy@PLT # Offset: 8676
    000021e9: 	movq	0x58(%rsp), %r13
    000021ee: 	movq	(%r14), %rdi
    000021f1: 	jmp	.Ltmp758 # Offset: 8689
.Ltmp628:
    000021f6: 	leaq	0x58(%rsp), %rsi
    000021fb: 	xorl	%edx, %edx
    000021fd: 	movq	%r14, %rdi
    00002200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8704
    00002205: 	movq	%rax, (%r14)
    00002208: 	movq	%rax, %rdi
    0000220b: 	movq	0x58(%rsp), %rax
    00002210: 	movq	%rax, 0x10(%r14)
.Ltmp757:
    00002214: 	movq	0x18(%rsp), %rsi
    00002219: 	movq	%r13, %rdx
    0000221c: 	callq	memcpy@PLT # Offset: 8732
    00002221: 	movq	0x58(%rsp), %r13
    00002226: 	movq	(%r14), %rdi
    00002229: 	jmp	.Ltmp756 # Offset: 8745
.Ltmp664:
    0000222e: 	leaq	0x58(%rsp), %rsi
    00002233: 	xorl	%edx, %edx
    00002235: 	movq	%r14, %rdi
    00002238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8760
    0000223d: 	movq	%rax, (%r14)
    00002240: 	movq	%rax, %rdi
    00002243: 	movq	0x58(%rsp), %rax
    00002248: 	movq	%rax, 0x10(%r14)
.Ltmp761:
    0000224c: 	movq	0x18(%rsp), %rsi
    00002251: 	movq	%r13, %rdx
    00002254: 	callq	memcpy@PLT # Offset: 8788
    00002259: 	movq	0x58(%rsp), %r13
    0000225e: 	movq	(%r14), %rdi
    00002261: 	jmp	.Ltmp760 # Offset: 8801
.Ltmp646:
    00002266: 	leaq	0x58(%rsp), %rsi
    0000226b: 	xorl	%edx, %edx
    0000226d: 	movq	%r14, %rdi
    00002270: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8816
    00002275: 	movq	%rax, (%r14)
    00002278: 	movq	%rax, %rdi
    0000227b: 	movq	0x58(%rsp), %rax
    00002280: 	movq	%rax, 0x10(%r14)
.Ltmp763:
    00002284: 	movq	0x18(%rsp), %rsi
    00002289: 	movq	%r13, %rdx
    0000228c: 	callq	memcpy@PLT # Offset: 8844
    00002291: 	movq	0x58(%rsp), %r13
    00002296: 	movq	(%r14), %rdi
    00002299: 	jmp	.Ltmp762 # Offset: 8857
.Ltmp700:
    0000229e: 	cmpl	$0x3fffff8, %eax
    000022a3: 	jle	.Ltmp766 # Offset: 8867
    000022a9: 	jmp	.Ltmp767 # Offset: 8873
    000022ae: 	nop # Size: 2
.Ltmp690:
    000022b0: 	movl	%edx, %eax
    000022b2: 	jmp	.Ltmp768 # Offset: 8882
.Ltmp695:
    000022b7: 	movl	%r11d, (%rdx)
    000022ba: 	movl	%r11d, -0x4(%rdx,%rax)
    000022bf: 	jmp	.Ltmp693 # Offset: 8895
.Ltmp719:
    000022c4: 	movl	%r11d, (%rax)
    000022c7: 	movl	%r11d, -0x4(%rax,%rdx)
    000022cc: 	jmp	.Ltmp717 # Offset: 8908
.Ltmp712:
    000022d1: 	movl	%r9d, (%rax)
    000022d4: 	movl	%r9d, -0x4(%rax,%rdx)
    000022d9: 	jmp	.Ltmp710 # Offset: 8921
.Ltmp705:
    000022de: 	movl	%r10d, (%rax)
    000022e1: 	movl	%r10d, -0x4(%rax,%rcx)
    000022e6: 	jmp	.Ltmp703 # Offset: 8934
.Ltmp684:
    000022eb: 	cmpl	$0x3ffffc0, %edx
    000022f1: 	jle	.Ltmp769 # Offset: 8945
    000022f7: 	jmp	.Ltmp770 # Offset: 8951
    000022fc: 	nopl	(%rax) # Size: 4
.Ltmp697:
    00002300: 	cmpl	$0x3ffffbf, %eax
    00002305: 	jle	.Ltmp771 # Offset: 8965
    0000230b: 	jmp	.Ltmp766 # Offset: 8971
.Ltmp681:
    00002310: 	movq	0x8(%rsp), %rdi
    00002315: 	jmp	.Ltmp772 # Offset: 8981
.Ltmp724:
    0000231a: 	movq	0x8(%rsp), %rdi
    0000231f: 	jmp	.Ltmp773 # Offset: 8991
.Ltmp726:
    00002324: 	movq	0x8(%rsp), %rdi
    00002329: 	jmp	.Ltmp774 # Offset: 9001
.Ltmp728:
    0000232e: 	movq	0x8(%rsp), %rdi
    00002333: 	jmp	.Ltmp775 # Offset: 9011
.Ltmp730:
    00002338: 	movq	0x8(%rsp), %rdi
    0000233d: 	jmp	.Ltmp776 # Offset: 9021
.Ltmp732:
    00002342: 	movq	0x8(%rsp), %rdi
    00002347: 	jmp	.Ltmp777 # Offset: 9031
.Ltmp734:
    0000234c: 	movq	0x8(%rsp), %rdi
    00002351: 	jmp	.Ltmp778 # Offset: 9041
.Ltmp736:
    00002356: 	movq	0x8(%rsp), %rdi
    0000235b: 	jmp	.Ltmp779 # Offset: 9051
.Ltmp738:
    00002360: 	movq	0x8(%rsp), %rdi
    00002365: 	jmp	.Ltmp780 # Offset: 9061
.Ltmp663:
    0000236a: 	leaq	DATAat0x12008(%rip), %rdi
    00002371: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9073
.Ltmp671:
    00002376: 	leaq	DATAat0x12008(%rip), %rdi
    0000237d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9085
.Ltmp674:
    00002382: 	leaq	DATAat0x12288(%rip), %rdi
    00002389: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9097
.Ltmp677:
    0000238e: 	callq	__stack_chk_fail@PLT # Offset: 9102
.Ltmp617:
    00002393: 	leaq	DATAat0x12008(%rip), %rdi
    0000239a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9114
.Ltmp620:
    0000239f: 	leaq	DATAat0x12288(%rip), %rdi
    000023a6: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9126
.Ltmp627:
    000023ab: 	leaq	DATAat0x12008(%rip), %rdi
    000023b2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9138
.Ltmp635:
    000023b7: 	leaq	DATAat0x12008(%rip), %rdi
    000023be: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9150
.Ltmp638:
    000023c3: 	leaq	DATAat0x12288(%rip), %rdi
    000023ca: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9162
.Ltmp645:
    000023cf: 	leaq	DATAat0x12008(%rip), %rdi
    000023d6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9174
.Ltmp653:
    000023db: 	leaq	DATAat0x12008(%rip), %rdi
    000023e2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9186
.Ltmp656:
    000023e7: 	leaq	DATAat0x12288(%rip), %rdi
    000023ee: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9198
.Ltmp740:
    000023f3: 	movq	0x8(%rsp), %rdi
    000023f8: 	jmp	.Ltmp781 # Offset: 9208
.Ltmp547:
    000023fd: 	leaq	DATAat0x12008(%rip), %rdi
    00002404: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9220
.Ltmp550:
    00002409: 	leaq	DATAat0x12288(%rip), %rdi
    00002410: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9232
.Ltmp553:
    00002415: 	leaq	DATAat0x12008(%rip), %rdi
    0000241c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9244
.Ltmp556:
    00002421: 	leaq	DATAat0x12288(%rip), %rdi
    00002428: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9256
.Ltmp559:
    0000242d: 	leaq	DATAat0x12008(%rip), %rdi
    00002434: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9268
.Ltmp562:
    00002439: 	leaq	DATAat0x12288(%rip), %rdi
    00002440: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9280
.Ltmp565:
    00002445: 	leaq	DATAat0x12008(%rip), %rdi
    0000244c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9292
.Ltmp568:
    00002451: 	leaq	DATAat0x12288(%rip), %rdi
    00002458: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9304
.Ltmp574:
    0000245d: 	leaq	DATAat0x12008(%rip), %rdi
    00002464: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9316
.Ltmp582:
    00002469: 	leaq	DATAat0x12008(%rip), %rdi
    00002470: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9328
.Ltmp585:
    00002475: 	leaq	DATAat0x12288(%rip), %rdi
    0000247c: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9340
.Ltmp591:
    00002481: 	leaq	DATAat0x12008(%rip), %rdi
    00002488: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9352
.Ltmp599:
    0000248d: 	leaq	DATAat0x12008(%rip), %rdi
    00002494: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9364
.Ltmp602:
    00002499: 	leaq	DATAat0x12288(%rip), %rdi
    000024a0: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9376
.Ltmp609:
    000024a5: 	leaq	DATAat0x12008(%rip), %rdi
    000024ac: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9388
    000024b1: 	endbr64
.Ltmp783:
    000024b5: 	movq	%rax, %rbp
    000024b8: 	jmp	.Ltmp782 # Offset: 9400
    000024ba: 	endbr64
    000024be: 	jmp	.Ltmp783 # Offset: 9406
    000024c0: 	endbr64
    000024c4: 	jmp	.Ltmp783 # Offset: 9412
    000024c6: 	endbr64
    000024ca: 	jmp	.Ltmp783 # Offset: 9418
    000024cc: 	endbr64
    000024d0: 	jmp	.Ltmp783 # Offset: 9424
    000024d2: 	endbr64
    000024d6: 	jmp	.Ltmp783 # Offset: 9430
    000024d8: 	endbr64
    000024dc: 	jmp	.Ltmp783 # Offset: 9436
    000024de: 	endbr64
    000024e2: 	jmp	.Ltmp783 # Offset: 9442
    000024e4: 	endbr64
    000024e8: 	jmp	.Ltmp783 # Offset: 9448
    000024ea: 	endbr64
    000024ee: 	jmp	.Ltmp783 # Offset: 9454
    000024f0: 	endbr64
    000024f4: 	jmp	.Ltmp783 # Offset: 9460
    000024f6: 	endbr64
    000024fa: 	jmp	.Ltmp783 # Offset: 9466
    000024fc: 	endbr64
    00002500: 	jmp	.Ltmp783 # Offset: 9472
    00002502: 	endbr64
    00002506: 	movq	%rax, %rbp
    00002509: 	jmp	.Ltmp784 # Offset: 9481
    0000250b: 	endbr64
    0000250f: 	jmp	.Ltmp783 # Offset: 9487
    00002511: 	endbr64
    00002515: 	jmp	.Ltmp783 # Offset: 9493
    00002517: 	endbr64
    0000251b: 	jmp	.Ltmp783 # Offset: 9499
    0000251d: 	endbr64
    00002521: 	jmp	.Ltmp783 # Offset: 9505
.Ltmp782:
    00002523: 	movq	0x80(%rsp), %rdi
    0000252b: 	cmpq	0x8(%rsp), %rdi
    00002530: 	je	.Ltmp784 # Offset: 9520
    00002532: 	movq	0x90(%rsp), %rax
    0000253a: 	leaq	0x1(%rax), %rsi
    0000253e: 	callq	_ZdlPvm@PLT # Offset: 9534
.Ltmp784:
    00002543: 	movq	0x60(%rsp), %rdi
    00002548: 	cmpq	0x10(%rsp), %rdi
    0000254d: 	je	.Ltmp785 # Offset: 9549
    0000254f: 	movq	0x70(%rsp), %rax
    00002554: 	leaq	0x1(%rax), %rsi
    00002558: 	callq	_ZdlPvm@PLT # Offset: 9560
.Ltmp785:
    0000255d: 	movq	%rbp, %rdi
    00002560: 	callq	_Unwind_Resume@PLT # Offset: 9568
    00002565: 	endbr64
    00002569: 	jmp	.Ltmp783 # Offset: 9577
    0000256e: 	endbr64
    00002572: 	jmp	.Ltmp783 # Offset: 9586
    00002577: 	endbr64
    0000257b: 	jmp	.Ltmp783 # Offset: 9595
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIjEvv"

Binary Function "_Z11TestOneTypeIhEvv" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0xab50
  Size        : 0x25e8
  MaxSize     : 0x25f0
  Offset      : 0xab50
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIhEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xb8, %rsp
    00000015: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm7
    0000001d: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0xa8(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000003e: 	movaps	%xmm7, 0x30(%rsp)
    00000043: 	movq	%xmm7, %rbp
    00000048: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm7
    00000050: 	movq	%rax, 0x8(%rsp)
    00000055: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000005c: 	movhlps	%xmm7, %xmm6
    0000005f: 	movaps	%xmm7, 0x20(%rsp)
    00000064: 	movq	%xmm6, %rbx
    00000069: 	movq	%rax, 0x18(%rsp)
    0000006e: 	leaq	0x8(%rbx), %r12
    00000072: 	movq	%xmm6, 0x40(%rsp)
    00000078: 	movq	%xmm7, 0x10(%rsp)
    0000007e: 	cmpq	%r12, %rax
    00000081: 	jbe	.Ltmp786 # Offset: 129
    00000083: 	movq	%rbp, 0x48(%rsp)
    00000088: 	movq	%r12, %r13
    0000008b: 	movq	%rax, %r15
    0000008e: 	nop # Size: 2
.Ltmp789:
    00000090: 	movq	(%r13), %rbp
    00000094: 	leaq	0x200(%rbp), %rbx
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp788:
    000000a0: 	movq	(%rbp), %rdi
    000000a4: 	leaq	0x10(%rbp), %rdx
    000000a8: 	cmpq	%rdx, %rdi
    000000ab: 	je	.Ltmp787 # Offset: 171
    000000b1: 	movq	0x10(%rbp), %rax
    000000b5: 	addq	$0x20, %rbp
    000000b9: 	leaq	0x1(%rax), %rsi
    000000bd: 	callq	_ZdlPvm@PLT # Offset: 189
    000000c2: 	cmpq	%rbp, %rbx
    000000c5: 	jne	.Ltmp788 # Offset: 197
    000000c7: 	addq	$0x8, %r13
    000000cb: 	cmpq	%r13, %r15
    000000ce: 	ja	.Ltmp789 # Offset: 206
.Ltmp932:
    000000d0: 	movq	0x48(%rsp), %rbp
.Ltmp786:
    000000d5: 	movq	0x40(%rsp), %rbx
    000000da: 	cmpq	%rbx, 0x18(%rsp)
    000000df: 	jne	.Ltmp790 # Offset: 223
    000000e1: 	jmp	.Ltmp791 # Offset: 225
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp793:
    000000f0: 	movq	(%rbp), %rdi
    000000f4: 	leaq	0x10(%rbp), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp792 # Offset: 251
    000000fd: 	movq	0x10(%rbp), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp792:
    0000010a: 	addq	$0x20, %rbp
.Ltmp790:
    0000010e: 	cmpq	0x10(%rsp), %rbp
    00000113: 	jne	.Ltmp793 # Offset: 275
    00000115: 	cmpq	%r14, 0x8(%rsp)
    0000011a: 	je	.Ltmp794 # Offset: 282
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp796:
    00000120: 	movq	(%r14), %rdi
    00000123: 	leaq	0x10(%r14), %rax
    00000127: 	cmpq	%rax, %rdi
    0000012a: 	je	.Ltmp795 # Offset: 298
    0000012c: 	movq	0x10(%r14), %rax
    00000130: 	leaq	0x1(%rax), %rsi
    00000134: 	callq	_ZdlPvm@PLT # Offset: 308
.Ltmp795:
    00000139: 	addq	$0x20, %r14
    0000013d: 	cmpq	%r14, 0x8(%rsp)
    00000142: 	jne	.Ltmp796 # Offset: 322
.Ltmp794:
    00000144: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000014b: 	leaq	0x8(%rax), %rbx
    0000014f: 	cmpq	%r12, %rbx
    00000152: 	jbe	.Ltmp797 # Offset: 338
    00000154: 	nopl	(%rax) # Size: 4
.Ltmp798:
    00000158: 	movq	(%r12), %rdi
    0000015c: 	movl	$0x200, %esi
    00000161: 	addq	$0x8, %r12
    00000165: 	callq	_ZdlPvm@PLT # Offset: 357
    0000016a: 	cmpq	%r12, %rbx
    0000016d: 	ja	.Ltmp798 # Offset: 365
.Ltmp797:
    0000016f: 	movdqa	0x30(%rsp), %xmm7
    00000175: 	leaq	0x70(%rsp), %rax
    0000017a: 	movl	$0x4000000, %edi
    0000017f: 	movl	$0x746e6975, 0x70(%rsp)
    00000187: 	movq	%rax, 0x10(%rsp)
    0000018c: 	movaps	%xmm7, "_ZL7gLabels/1"+48(%rip)
    00000193: 	movdqa	0x20(%rsp), %xmm7
    00000199: 	movq	%rax, 0x60(%rsp)
    0000019e: 	movl	$0x5f38, %eax
    000001a3: 	movw	%ax, 0x74(%rsp)
    000001a8: 	movb	$0x74, 0x76(%rsp)
    000001ad: 	movq	$0x7, 0x68(%rsp)
    000001b6: 	movb	$0x0, 0x77(%rsp)
    000001bb: 	movaps	%xmm7, "_ZL7gLabels/1"+64(%rip)
    000001c2: 	callq	_Znam@PLT # Offset: 450
    000001c7: 	movq	0x60(%rsp), %r13
    000001cc: 	movq	0x68(%rsp), %r12
    000001d1: 	movq	%rax, %rbp
    000001d4: 	leaq	0x90(%rsp), %rax
    000001dc: 	movq	%rax, 0x8(%rsp)
    000001e1: 	movq	%rax, 0x80(%rsp)
    000001e9: 	movq	%r13, %rax
    000001ec: 	addq	%r12, %rax
    000001ef: 	je	.Ltmp799 # Offset: 495
    000001f1: 	testq	%r13, %r13
    000001f4: 	je	.Ltmp800 # Offset: 500
.Ltmp799:
    000001fa: 	movq	%r12, 0x58(%rsp)
    000001ff: 	cmpq	$0xf, %r12
    00000203: 	ja	.Ltmp801 # Offset: 515
    00000209: 	cmpq	$0x1, %r12
    0000020d: 	jne	.Ltmp802 # Offset: 525
    00000213: 	movzbl	(%r13), %eax
    00000218: 	movb	%al, 0x90(%rsp)
    0000021f: 	movq	0x8(%rsp), %rax
.Ltmp934:
    00000224: 	movq	%r12, 0x88(%rsp)
    0000022c: 	movb	$0x0, (%rax,%r12)
    00000231: 	movabsq	$0x3fffffffffffffff, %rax
    0000023b: 	subq	0x88(%rsp), %rax
    00000243: 	cmpq	$0x6, %rax
    00000247: 	jbe	.Ltmp803 # Offset: 583
    0000024d: 	leaq	0x80(%rsp), %r12
    00000255: 	movl	$0x7, %edx
    0000025a: 	leaq	DATAat0x1229d(%rip), %rsi
    00000261: 	movq	%r12, %rdi
    00000264: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 612
    00000269: 	movzbl	init_value(%rip), %edx
    00000270: 	movq	%r12, %rcx
    00000273: 	movl	$0x4000000, %esi
    00000278: 	movq	%rbp, %rdi
    0000027b: 	callq	_Z19test_library_memsetIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 635
    00000280: 	movq	0x80(%rsp), %rdi
    00000288: 	cmpq	0x8(%rsp), %rdi
    0000028d: 	je	.Ltmp804 # Offset: 653
    0000028f: 	movq	0x90(%rsp), %rax
    00000297: 	leaq	0x1(%rax), %rsi
    0000029b: 	callq	_ZdlPvm@PLT # Offset: 667
.Ltmp804:
    000002a0: 	movq	0x8(%rsp), %rax
    000002a5: 	movq	0x60(%rsp), %r14
    000002aa: 	movq	0x68(%rsp), %r13
    000002af: 	movq	%rax, 0x80(%rsp)
    000002b7: 	movq	%r14, %rax
    000002ba: 	addq	%r13, %rax
    000002bd: 	je	.Ltmp805 # Offset: 701
    000002bf: 	testq	%r14, %r14
    000002c2: 	je	.Ltmp806 # Offset: 706
.Ltmp805:
    000002c8: 	movq	%r13, 0x58(%rsp)
    000002cd: 	cmpq	$0xf, %r13
    000002d1: 	ja	.Ltmp807 # Offset: 721
    000002d7: 	cmpq	$0x1, %r13
    000002db: 	jne	.Ltmp808 # Offset: 731
    000002e1: 	movzbl	(%r14), %eax
    000002e5: 	movb	%al, 0x90(%rsp)
    000002ec: 	movq	0x8(%rsp), %rax
.Ltmp992:
    000002f1: 	movq	%r13, 0x88(%rsp)
    000002f9: 	movb	$0x0, (%rax,%r13)
    000002fe: 	movabsq	$0x3fffffffffffffff, %rax
    00000308: 	subq	0x88(%rsp), %rax
    00000310: 	cmpq	$0x9, %rax
    00000314: 	jbe	.Ltmp809 # Offset: 788
    0000031a: 	movl	$0xa, %edx
    0000031f: 	leaq	DATAat0x122a5(%rip), %rsi
    00000326: 	movq	%r12, %rdi
    00000329: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 809
    0000032e: 	movzbl	init_value(%rip), %edx
    00000335: 	movq	%r12, %rcx
    00000338: 	movl	$0x4000000, %esi
    0000033d: 	movq	%rbp, %rdi
    00000340: 	callq	_Z13test_std_fillIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 832
    00000345: 	movq	0x80(%rsp), %rdi
    0000034d: 	cmpq	0x8(%rsp), %rdi
    00000352: 	je	.Ltmp810 # Offset: 850
    00000354: 	movq	0x90(%rsp), %rax
    0000035c: 	leaq	0x1(%rax), %rsi
    00000360: 	callq	_ZdlPvm@PLT # Offset: 864
.Ltmp810:
    00000365: 	movq	0x8(%rsp), %rax
    0000036a: 	movq	0x60(%rsp), %r14
    0000036f: 	movq	0x68(%rsp), %r13
    00000374: 	movq	%rax, 0x80(%rsp)
    0000037c: 	movq	%r14, %rax
    0000037f: 	addq	%r13, %rax
    00000382: 	je	.Ltmp811 # Offset: 898
    00000384: 	testq	%r14, %r14
    00000387: 	je	.Ltmp812 # Offset: 903
.Ltmp811:
    0000038d: 	movq	%r13, 0x58(%rsp)
    00000392: 	cmpq	$0xf, %r13
    00000396: 	ja	.Ltmp813 # Offset: 918
    0000039c: 	cmpq	$0x1, %r13
    000003a0: 	jne	.Ltmp814 # Offset: 928
    000003a6: 	movzbl	(%r14), %eax
    000003aa: 	movb	%al, 0x90(%rsp)
    000003b1: 	movq	0x8(%rsp), %rax
.Ltmp990:
    000003b6: 	movq	%r13, 0x88(%rsp)
    000003be: 	movb	$0x0, (%rax,%r13)
    000003c3: 	movabsq	$0x3fffffffffffffff, %rax
    000003cd: 	subq	0x88(%rsp), %rax
    000003d5: 	cmpq	$0xd, %rax
    000003d9: 	jbe	.Ltmp815 # Offset: 985
    000003df: 	movl	$0xe, %edx
    000003e4: 	leaq	DATAat0x122b0(%rip), %rsi
    000003eb: 	movq	%r12, %rdi
    000003ee: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1006
    000003f3: 	movzbl	init_value(%rip), %edx
    000003fa: 	movq	%r12, %rcx
    000003fd: 	movl	$0x4000000, %esi
    00000402: 	movq	%rbp, %rdi
    00000405: 	callq	_Z18test_iterator_fillIhEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1029
    0000040a: 	movq	0x80(%rsp), %rdi
    00000412: 	cmpq	0x8(%rsp), %rdi
    00000417: 	je	.Ltmp816 # Offset: 1047
    00000419: 	movq	0x90(%rsp), %rax
    00000421: 	leaq	0x1(%rax), %rsi
    00000425: 	callq	_ZdlPvm@PLT # Offset: 1061
.Ltmp816:
    0000042a: 	movq	0x8(%rsp), %rax
    0000042f: 	movq	0x60(%rsp), %r14
    00000434: 	movq	0x68(%rsp), %r13
    00000439: 	movq	%rax, 0x80(%rsp)
    00000441: 	movq	%r14, %rax
    00000444: 	addq	%r13, %rax
    00000447: 	je	.Ltmp817 # Offset: 1095
    00000449: 	testq	%r14, %r14
    0000044c: 	je	.Ltmp818 # Offset: 1100
.Ltmp817:
    00000452: 	movq	%r13, 0x58(%rsp)
    00000457: 	cmpq	$0xf, %r13
    0000045b: 	ja	.Ltmp819 # Offset: 1115
    00000461: 	cmpq	$0x1, %r13
    00000465: 	jne	.Ltmp820 # Offset: 1125
    0000046b: 	movzbl	(%r14), %eax
    0000046f: 	movb	%al, 0x90(%rsp)
    00000476: 	movq	0x8(%rsp), %rax
.Ltmp996:
    0000047b: 	movq	%r13, 0x88(%rsp)
    00000483: 	movb	$0x0, (%rax,%r13)
    00000488: 	movabsq	$0x3fffffffffffffff, %rax
    00000492: 	subq	0x88(%rsp), %rax
    0000049a: 	cmpq	$0xd, %rax
    0000049e: 	jbe	.Ltmp821 # Offset: 1182
    000004a4: 	movl	$0xe, %edx
    000004a9: 	leaq	DATAat0x122bf(%rip), %rsi
    000004b0: 	movq	%r12, %rdi
    000004b3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1203
    000004b8: 	movzbl	init_value(%rip), %ebx
    000004bf: 	xorl	%r14d, %r14d
    000004c2: 	callq	clock@PLT # Offset: 1218
    000004c7: 	movl	iterations(%rip), %r13d
    000004ce: 	movq	%rax, start_time(%rip)
    000004d5: 	testl	%r13d, %r13d
    000004d8: 	jle	.Ltmp822 # Offset: 1240
    000004da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp823:
    000004e0: 	movl	$0x4000000, %edx
    000004e5: 	movl	%ebx, %esi
    000004e7: 	movq	%rbp, %rdi
    000004ea: 	addl	$0x1, %r14d
    000004ee: 	callq	memset@PLT # Offset: 1262
    000004f3: 	cmpl	%r13d, %r14d
    000004f6: 	jne	.Ltmp823 # Offset: 1270
.Ltmp822:
    000004f8: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000004ff: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000506: 	subq	$0x20, %rax
    0000050a: 	cmpq	%rax, %rbx
    0000050d: 	je	.Ltmp824 # Offset: 1293
    00000513: 	leaq	0x10(%rbx), %rdi
    00000517: 	movq	0x88(%rsp), %r13
    0000051f: 	movq	%rdi, (%rbx)
    00000522: 	movq	0x80(%rsp), %r14
    0000052a: 	movq	%r14, %rax
    0000052d: 	addq	%r13, %rax
    00000530: 	je	.Ltmp825 # Offset: 1328
    00000532: 	testq	%r14, %r14
    00000535: 	je	.Ltmp826 # Offset: 1333
.Ltmp825:
    0000053b: 	movq	%r13, 0x58(%rsp)
    00000540: 	cmpq	$0xf, %r13
    00000544: 	ja	.Ltmp827 # Offset: 1348
    0000054a: 	cmpq	$0x1, %r13
    0000054e: 	jne	.Ltmp828 # Offset: 1358
    00000554: 	movzbl	(%r14), %eax
    00000558: 	movb	%al, 0x10(%rbx)
.Ltmp1012:
    0000055b: 	movq	%r13, 0x8(%rbx)
    0000055f: 	movb	$0x0, (%rdi,%r13)
    00000564: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000056b: 	addq	$0x20, %rax
    0000056f: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp998:
    00000576: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000057d: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000584: 	je	.Ltmp829 # Offset: 1412
.Ltmp997:
    0000058a: 	movq	-0x20(%rax), %r13
    0000058e: 	callq	clock@PLT # Offset: 1422
    00000593: 	pxor	%xmm0, %xmm0
    00000597: 	movq	%rax, end_time(%rip)
    0000059e: 	movq	%r13, %rdi
    000005a1: 	subq	start_time(%rip), %rax
    000005a8: 	cvtsi2sd	%rax, %xmm0
    000005ad: 	divsd	DATAat0x12360(%rip), %xmm0
    000005b5: 	callq	_Z13record_resultdPKc # Offset: 1461
    000005ba: 	movq	%rbp, 0x18(%rsp)
    000005bf: 	movq	%rbp, %rax
    000005c2: 	pxor	%xmm1, %xmm1
    000005c6: 	pxor	%xmm7, %xmm7
    000005ca: 	leaq	0x4000000(%rbp), %rbx
    000005d1: 	pxor	%xmm6, %xmm6
    000005d5: 	pxor	%xmm5, %xmm5
    000005d9: 	nopl	(%rax) # Size: 7
.Ltmp830:
    000005e0: 	movdqu	(%rax), %xmm0
    000005e4: 	addq	$0x10, %rax
    000005e8: 	movdqa	%xmm0, %xmm3
    000005ec: 	punpckhbw	%xmm7, %xmm0
    000005f0: 	punpcklbw	%xmm7, %xmm3
    000005f4: 	movdqa	%xmm0, %xmm4
    000005f8: 	punpckhwd	%xmm6, %xmm0
    000005fc: 	movdqa	%xmm3, %xmm2
    00000600: 	punpckhwd	%xmm6, %xmm3
    00000604: 	punpcklwd	%xmm6, %xmm4
    00000608: 	punpcklwd	%xmm6, %xmm2
    0000060c: 	movdqa	%xmm2, %xmm8
    00000611: 	punpckldq	%xmm5, %xmm2
    00000615: 	punpckhdq	%xmm5, %xmm8
    0000061a: 	paddq	%xmm8, %xmm2
    0000061f: 	movdqa	%xmm3, %xmm8
    00000624: 	punpckldq	%xmm5, %xmm3
    00000628: 	punpckhdq	%xmm5, %xmm8
    0000062d: 	paddq	%xmm8, %xmm3
    00000632: 	paddq	%xmm3, %xmm2
    00000636: 	movdqa	%xmm4, %xmm3
    0000063a: 	punpckldq	%xmm5, %xmm4
    0000063e: 	punpckhdq	%xmm5, %xmm3
    00000642: 	paddq	%xmm3, %xmm4
    00000646: 	movdqa	%xmm0, %xmm3
    0000064a: 	punpckhdq	%xmm5, %xmm0
    0000064e: 	punpckldq	%xmm5, %xmm3
    00000652: 	paddq	%xmm0, %xmm1
    00000656: 	paddq	%xmm3, %xmm4
    0000065a: 	paddq	%xmm4, %xmm2
    0000065e: 	paddq	%xmm2, %xmm1
    00000662: 	cmpq	%rbx, %rax
    00000665: 	jne	.Ltmp830 # Offset: 1637
    0000066b: 	movdqa	%xmm1, %xmm0
    0000066f: 	movzbl	init_value(%rip), %edx
    00000676: 	movq	0x80(%rsp), %rdi
    0000067e: 	psrldq	$0x8, %xmm0
    00000683: 	paddq	%xmm0, %xmm1
    00000687: 	shlq	$0x1a, %rdx
    0000068b: 	movq	%xmm1, %rax
    00000690: 	cmpq	%rax, %rdx
    00000693: 	je	.Ltmp831 # Offset: 1683
    00000695: 	movq	%rdi, %rdx
    00000698: 	leaq	DATAat0x12278(%rip), %rsi
    0000069f: 	movl	$0x1, %edi
    000006a4: 	xorl	%eax, %eax
    000006a6: 	callq	__printf_chk@PLT # Offset: 1702
    000006ab: 	movq	0x80(%rsp), %rdi
.Ltmp831:
    000006b3: 	cmpq	0x8(%rsp), %rdi
    000006b8: 	je	.Ltmp832 # Offset: 1720
    000006ba: 	movq	0x90(%rsp), %rax
    000006c2: 	leaq	0x1(%rax), %rsi
    000006c6: 	callq	_ZdlPvm@PLT # Offset: 1734
.Ltmp832:
    000006cb: 	movq	0x8(%rsp), %rax
    000006d0: 	movq	0x60(%rsp), %r14
    000006d5: 	movq	0x68(%rsp), %r13
    000006da: 	movq	%rax, 0x80(%rsp)
    000006e2: 	movq	%r14, %rax
    000006e5: 	addq	%r13, %rax
    000006e8: 	je	.Ltmp833 # Offset: 1768
    000006ea: 	testq	%r14, %r14
    000006ed: 	je	.Ltmp834 # Offset: 1773
.Ltmp833:
    000006f3: 	movq	%r13, 0x58(%rsp)
    000006f8: 	cmpq	$0xf, %r13
    000006fc: 	ja	.Ltmp835 # Offset: 1788
    00000702: 	cmpq	$0x1, %r13
    00000706: 	jne	.Ltmp836 # Offset: 1798
    0000070c: 	movzbl	(%r14), %eax
    00000710: 	movb	%al, 0x90(%rsp)
    00000717: 	movq	0x8(%rsp), %rax
.Ltmp994:
    0000071c: 	movq	%r13, 0x88(%rsp)
    00000724: 	movb	$0x0, (%rax,%r13)
    00000729: 	movabsq	$0x3fffffffffffffff, %rax
    00000733: 	subq	0x88(%rsp), %rax
    0000073b: 	cmpq	$0x16, %rax
    0000073f: 	jbe	.Ltmp837 # Offset: 1855
    00000745: 	movl	$0x17, %edx
    0000074a: 	leaq	DATAat0x122ce(%rip), %rsi
    00000751: 	movq	%r12, %rdi
    00000754: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1876
    00000759: 	movzbl	init_value(%rip), %r13d
    00000761: 	callq	clock@PLT # Offset: 1889
    00000766: 	movl	iterations(%rip), %ecx
    0000076c: 	xorl	%edx, %edx
    0000076e: 	movq	%rax, start_time(%rip)
    00000775: 	testl	%ecx, %ecx
    00000777: 	jle	.Ltmp838 # Offset: 1911
    00000779: 	movd	%r13d, %xmm0
    0000077e: 	punpcklbw	%xmm0, %xmm0
    00000782: 	punpcklwd	%xmm0, %xmm0
    00000786: 	pshufd	$0x0, %xmm0, %xmm0
    0000078b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp840:
    00000790: 	movq	%rbp, %rax
    00000793: 	nopl	(%rax,%rax) # Size: 5
.Ltmp839:
    00000798: 	movups	%xmm0, (%rax)
    0000079b: 	addq	$0x10, %rax
    0000079f: 	cmpq	%rax, %rbx
    000007a2: 	jne	.Ltmp839 # Offset: 1954
    000007a4: 	addl	$0x1, %edx
    000007a7: 	cmpl	%ecx, %edx
    000007a9: 	jne	.Ltmp840 # Offset: 1961
.Ltmp838:
    000007ab: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000007b2: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000007b9: 	subq	$0x20, %rax
    000007bd: 	cmpq	%rax, %r14
    000007c0: 	je	.Ltmp841 # Offset: 1984
    000007c6: 	leaq	0x10(%r14), %rdi
    000007ca: 	movq	0x88(%rsp), %r13
    000007d2: 	movq	%rdi, (%r14)
    000007d5: 	movq	0x80(%rsp), %r15
    000007dd: 	movq	%r15, %rax
    000007e0: 	addq	%r13, %rax
    000007e3: 	je	.Ltmp842 # Offset: 2019
    000007e5: 	testq	%r15, %r15
    000007e8: 	je	.Ltmp843 # Offset: 2024
.Ltmp842:
    000007ee: 	movq	%r13, 0x58(%rsp)
    000007f3: 	cmpq	$0xf, %r13
    000007f7: 	ja	.Ltmp844 # Offset: 2039
    000007fd: 	cmpq	$0x1, %r13
    00000801: 	jne	.Ltmp845 # Offset: 2049
    00000807: 	movzbl	(%r15), %eax
    0000080b: 	movb	%al, 0x10(%r14)
.Ltmp1007:
    0000080f: 	movq	%r13, 0x8(%r14)
    00000813: 	movb	$0x0, (%rdi,%r13)
    00000818: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000081f: 	addq	$0x20, %rax
    00000823: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1006:
    0000082a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000831: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000838: 	je	.Ltmp846 # Offset: 2104
.Ltmp1005:
    0000083e: 	movq	-0x20(%rax), %r13
    00000842: 	callq	clock@PLT # Offset: 2114
    00000847: 	pxor	%xmm0, %xmm0
    0000084b: 	movq	%rax, end_time(%rip)
    00000852: 	movq	%r13, %rdi
    00000855: 	subq	start_time(%rip), %rax
    0000085c: 	cvtsi2sd	%rax, %xmm0
    00000861: 	divsd	DATAat0x12360(%rip), %xmm0
    00000869: 	callq	_Z13record_resultdPKc # Offset: 2153
    0000086e: 	pxor	%xmm1, %xmm1
    00000872: 	pxor	%xmm7, %xmm7
    00000876: 	pxor	%xmm6, %xmm6
    0000087a: 	movq	%rbp, %rax
    0000087d: 	pxor	%xmm5, %xmm5
    00000881: 	nopl	(%rax) # Size: 7
.Ltmp847:
    00000888: 	movdqu	(%rax), %xmm0
    0000088c: 	addq	$0x10, %rax
    00000890: 	movdqa	%xmm0, %xmm3
    00000894: 	punpckhbw	%xmm7, %xmm0
    00000898: 	punpcklbw	%xmm7, %xmm3
    0000089c: 	movdqa	%xmm0, %xmm4
    000008a0: 	punpckhwd	%xmm6, %xmm0
    000008a4: 	movdqa	%xmm3, %xmm2
    000008a8: 	punpckhwd	%xmm6, %xmm3
    000008ac: 	punpcklwd	%xmm6, %xmm4
    000008b0: 	punpcklwd	%xmm6, %xmm2
    000008b4: 	movdqa	%xmm2, %xmm8
    000008b9: 	punpckldq	%xmm5, %xmm2
    000008bd: 	punpckhdq	%xmm5, %xmm8
    000008c2: 	paddq	%xmm8, %xmm2
    000008c7: 	movdqa	%xmm3, %xmm8
    000008cc: 	punpckldq	%xmm5, %xmm3
    000008d0: 	punpckhdq	%xmm5, %xmm8
    000008d5: 	paddq	%xmm8, %xmm3
    000008da: 	paddq	%xmm3, %xmm2
    000008de: 	movdqa	%xmm4, %xmm3
    000008e2: 	punpckldq	%xmm5, %xmm4
    000008e6: 	punpckhdq	%xmm5, %xmm3
    000008ea: 	paddq	%xmm3, %xmm4
    000008ee: 	movdqa	%xmm0, %xmm3
    000008f2: 	punpckhdq	%xmm5, %xmm0
    000008f6: 	punpckldq	%xmm5, %xmm3
    000008fa: 	paddq	%xmm0, %xmm1
    000008fe: 	paddq	%xmm3, %xmm4
    00000902: 	paddq	%xmm4, %xmm2
    00000906: 	paddq	%xmm2, %xmm1
    0000090a: 	cmpq	%rbx, %rax
    0000090d: 	jne	.Ltmp847 # Offset: 2317
    00000913: 	movdqa	%xmm1, %xmm0
    00000917: 	movzbl	init_value(%rip), %edx
    0000091e: 	movq	0x80(%rsp), %rdi
    00000926: 	psrldq	$0x8, %xmm0
    0000092b: 	paddq	%xmm0, %xmm1
    0000092f: 	shlq	$0x1a, %rdx
    00000933: 	movq	%xmm1, %rax
    00000938: 	cmpq	%rax, %rdx
    0000093b: 	je	.Ltmp848 # Offset: 2363
    0000093d: 	movq	%rdi, %rdx
    00000940: 	leaq	DATAat0x12278(%rip), %rsi
    00000947: 	movl	$0x1, %edi
    0000094c: 	xorl	%eax, %eax
    0000094e: 	callq	__printf_chk@PLT # Offset: 2382
    00000953: 	movq	0x80(%rsp), %rdi
.Ltmp848:
    0000095b: 	cmpq	0x8(%rsp), %rdi
    00000960: 	je	.Ltmp849 # Offset: 2400
    00000962: 	movq	0x90(%rsp), %rax
    0000096a: 	leaq	0x1(%rax), %rsi
    0000096e: 	callq	_ZdlPvm@PLT # Offset: 2414
.Ltmp849:
    00000973: 	movq	0x8(%rsp), %rax
    00000978: 	movq	0x60(%rsp), %r14
    0000097d: 	movq	0x68(%rsp), %r13
    00000982: 	movq	%rax, 0x80(%rsp)
    0000098a: 	movq	%r14, %rax
    0000098d: 	addq	%r13, %rax
    00000990: 	je	.Ltmp850 # Offset: 2448
    00000992: 	testq	%r14, %r14
    00000995: 	je	.Ltmp851 # Offset: 2453
.Ltmp850:
    0000099b: 	movq	%r13, 0x58(%rsp)
    000009a0: 	cmpq	$0xf, %r13
    000009a4: 	ja	.Ltmp852 # Offset: 2468
    000009aa: 	cmpq	$0x1, %r13
    000009ae: 	jne	.Ltmp853 # Offset: 2478
    000009b4: 	movzbl	(%r14), %eax
    000009b8: 	movb	%al, 0x90(%rsp)
    000009bf: 	movq	0x8(%rsp), %rax
.Ltmp982:
    000009c4: 	movq	%r13, 0x88(%rsp)
    000009cc: 	movb	$0x0, (%rax,%r13)
    000009d1: 	movabsq	$0x3fffffffffffffff, %rax
    000009db: 	subq	0x88(%rsp), %rax
    000009e3: 	cmpq	$0x13, %rax
    000009e7: 	jbe	.Ltmp854 # Offset: 2535
    000009ed: 	movl	$0x14, %edx
    000009f2: 	leaq	DATAat0x122e6(%rip), %rsi
    000009f9: 	movq	%r12, %rdi
    000009fc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2556
    00000a01: 	movzbl	init_value(%rip), %r13d
    00000a09: 	callq	clock@PLT # Offset: 2569
    00000a0e: 	movl	iterations(%rip), %r14d
    00000a15: 	movq	%rax, start_time(%rip)
    00000a1c: 	testl	%r14d, %r14d
    00000a1f: 	jle	.Ltmp855 # Offset: 2591
    00000a21: 	movzbl	%r13b, %eax
    00000a25: 	movzbl	%r13b, %r11d
    00000a29: 	xorl	%r9d, %r9d
    00000a2c: 	movl	$0x4000000, %r15d
    00000a32: 	movl	%eax, %r10d
    00000a35: 	shll	$0x8, %r10d
    00000a39: 	orl	%eax, %r10d
    00000a3c: 	movl	%r10d, %eax
    00000a3f: 	shll	$0x10, %eax
    00000a42: 	orl	%eax, %r10d
    00000a45: 	movabsq	$0x101010101010101, %rax
    00000a4f: 	imulq	%rax, %r11
    00000a53: 	movd	%r10d, %xmm7
    00000a58: 	pshufd	$0x0, %xmm7, %xmm0
    00000a5d: 	nopl	(%rax) # Size: 3
.Ltmp858:
    00000a60: 	movq	%rbp, %rdx
    00000a63: 	xorl	%eax, %eax
    00000a65: 	nopl	(%rax) # Size: 3
.Ltmp857:
    00000a68: 	testb	$0x3, %dl
    00000a6b: 	je	.Ltmp856 # Offset: 2667
    00000a71: 	addl	$0x1, %eax
    00000a74: 	movb	%r13b, (%rdx)
    00000a77: 	addq	$0x1, %rdx
    00000a7b: 	cmpl	$0x4000000, %eax
    00000a80: 	jne	.Ltmp857 # Offset: 2688
.Ltmp939:
    00000a82: 	addl	$0x1, %r9d
    00000a86: 	cmpl	%r14d, %r9d
    00000a89: 	jne	.Ltmp858 # Offset: 2697
.Ltmp855:
    00000a8b: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000a92: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00000a99: 	subq	$0x20, %rax
    00000a9d: 	cmpq	%rax, %r14
    00000aa0: 	je	.Ltmp859 # Offset: 2720
    00000aa6: 	leaq	0x10(%r14), %rdi
    00000aaa: 	movq	0x88(%rsp), %r13
    00000ab2: 	movq	%rdi, (%r14)
    00000ab5: 	movq	0x80(%rsp), %r15
    00000abd: 	movq	%r15, %rax
    00000ac0: 	addq	%r13, %rax
    00000ac3: 	je	.Ltmp860 # Offset: 2755
    00000ac5: 	testq	%r15, %r15
    00000ac8: 	je	.Ltmp861 # Offset: 2760
.Ltmp860:
    00000ace: 	movq	%r13, 0x58(%rsp)
    00000ad3: 	cmpq	$0xf, %r13
    00000ad7: 	ja	.Ltmp862 # Offset: 2775
    00000add: 	cmpq	$0x1, %r13
    00000ae1: 	jne	.Ltmp863 # Offset: 2785
    00000ae7: 	movzbl	(%r15), %eax
    00000aeb: 	movb	%al, 0x10(%r14)
.Ltmp1009:
    00000aef: 	movq	%r13, 0x8(%r14)
    00000af3: 	movb	$0x0, (%rdi,%r13)
    00000af8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000aff: 	addq	$0x20, %rax
    00000b03: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1004:
    00000b0a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000b11: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000b18: 	je	.Ltmp864 # Offset: 2840
.Ltmp1003:
    00000b1e: 	movq	-0x20(%rax), %r13
    00000b22: 	callq	clock@PLT # Offset: 2850
    00000b27: 	pxor	%xmm0, %xmm0
    00000b2b: 	movq	%rax, end_time(%rip)
    00000b32: 	movq	%r13, %rdi
    00000b35: 	subq	start_time(%rip), %rax
    00000b3c: 	cvtsi2sd	%rax, %xmm0
    00000b41: 	divsd	DATAat0x12360(%rip), %xmm0
    00000b49: 	callq	_Z13record_resultdPKc # Offset: 2889
    00000b4e: 	pxor	%xmm1, %xmm1
    00000b52: 	pxor	%xmm7, %xmm7
    00000b56: 	pxor	%xmm6, %xmm6
    00000b5a: 	movq	%rbp, %rax
    00000b5d: 	pxor	%xmm5, %xmm5
    00000b61: 	nopl	(%rax) # Size: 7
.Ltmp865:
    00000b68: 	movdqu	(%rax), %xmm0
    00000b6c: 	addq	$0x10, %rax
    00000b70: 	movdqa	%xmm0, %xmm3
    00000b74: 	punpckhbw	%xmm7, %xmm0
    00000b78: 	punpcklbw	%xmm7, %xmm3
    00000b7c: 	movdqa	%xmm0, %xmm4
    00000b80: 	punpckhwd	%xmm6, %xmm0
    00000b84: 	movdqa	%xmm3, %xmm2
    00000b88: 	punpckhwd	%xmm6, %xmm3
    00000b8c: 	punpcklwd	%xmm6, %xmm4
    00000b90: 	punpcklwd	%xmm6, %xmm2
    00000b94: 	movdqa	%xmm2, %xmm8
    00000b99: 	punpckldq	%xmm5, %xmm2
    00000b9d: 	punpckhdq	%xmm5, %xmm8
    00000ba2: 	paddq	%xmm8, %xmm2
    00000ba7: 	movdqa	%xmm3, %xmm8
    00000bac: 	punpckldq	%xmm5, %xmm3
    00000bb0: 	punpckhdq	%xmm5, %xmm8
    00000bb5: 	paddq	%xmm8, %xmm3
    00000bba: 	paddq	%xmm3, %xmm2
    00000bbe: 	movdqa	%xmm4, %xmm3
    00000bc2: 	punpckldq	%xmm5, %xmm4
    00000bc6: 	punpckhdq	%xmm5, %xmm3
    00000bca: 	paddq	%xmm3, %xmm4
    00000bce: 	movdqa	%xmm0, %xmm3
    00000bd2: 	punpckhdq	%xmm5, %xmm0
    00000bd6: 	punpckldq	%xmm5, %xmm3
    00000bda: 	paddq	%xmm0, %xmm1
    00000bde: 	paddq	%xmm3, %xmm4
    00000be2: 	paddq	%xmm4, %xmm2
    00000be6: 	paddq	%xmm2, %xmm1
    00000bea: 	cmpq	%rbx, %rax
    00000bed: 	jne	.Ltmp865 # Offset: 3053
    00000bf3: 	movdqa	%xmm1, %xmm0
    00000bf7: 	movzbl	init_value(%rip), %edx
    00000bfe: 	movq	0x80(%rsp), %rdi
    00000c06: 	psrldq	$0x8, %xmm0
    00000c0b: 	paddq	%xmm0, %xmm1
    00000c0f: 	shlq	$0x1a, %rdx
    00000c13: 	movq	%xmm1, %rax
    00000c18: 	cmpq	%rax, %rdx
    00000c1b: 	je	.Ltmp866 # Offset: 3099
    00000c1d: 	movq	%rdi, %rdx
    00000c20: 	leaq	DATAat0x12278(%rip), %rsi
    00000c27: 	movl	$0x1, %edi
    00000c2c: 	xorl	%eax, %eax
    00000c2e: 	callq	__printf_chk@PLT # Offset: 3118
    00000c33: 	movq	0x80(%rsp), %rdi
.Ltmp866:
    00000c3b: 	cmpq	0x8(%rsp), %rdi
    00000c40: 	je	.Ltmp867 # Offset: 3136
    00000c42: 	movq	0x90(%rsp), %rax
    00000c4a: 	leaq	0x1(%rax), %rsi
    00000c4e: 	callq	_ZdlPvm@PLT # Offset: 3150
.Ltmp867:
    00000c53: 	movq	0x8(%rsp), %rax
    00000c58: 	movq	0x60(%rsp), %r14
    00000c5d: 	movq	0x68(%rsp), %r13
    00000c62: 	movq	%rax, 0x80(%rsp)
    00000c6a: 	movq	%r14, %rax
    00000c6d: 	addq	%r13, %rax
    00000c70: 	je	.Ltmp868 # Offset: 3184
    00000c72: 	testq	%r14, %r14
    00000c75: 	je	.Ltmp869 # Offset: 3189
.Ltmp868:
    00000c7b: 	movq	%r13, 0x58(%rsp)
    00000c80: 	cmpq	$0xf, %r13
    00000c84: 	ja	.Ltmp870 # Offset: 3204
    00000c8a: 	cmpq	$0x1, %r13
    00000c8e: 	jne	.Ltmp871 # Offset: 3214
    00000c94: 	movzbl	(%r14), %eax
    00000c98: 	movb	%al, 0x90(%rsp)
    00000c9f: 	movq	0x8(%rsp), %rax
.Ltmp984:
    00000ca4: 	movq	%r13, 0x88(%rsp)
    00000cac: 	movb	$0x0, (%rax,%r13)
    00000cb1: 	movabsq	$0x3fffffffffffffff, %rax
    00000cbb: 	subq	0x88(%rsp), %rax
    00000cc3: 	cmpq	$0x13, %rax
    00000cc7: 	jbe	.Ltmp872 # Offset: 3271
    00000ccd: 	movl	$0x14, %edx
    00000cd2: 	leaq	DATAat0x122fb(%rip), %rsi
    00000cd9: 	movq	%r12, %rdi
    00000cdc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3292
    00000ce1: 	movzbl	init_value(%rip), %r13d
    00000ce9: 	callq	clock@PLT # Offset: 3305
    00000cee: 	movl	iterations(%rip), %r10d
    00000cf5: 	movq	%rax, start_time(%rip)
    00000cfc: 	testl	%r10d, %r10d
    00000cff: 	jle	.Ltmp873 # Offset: 3327
    00000d05: 	movzbl	%r13b, %r9d
    00000d09: 	xorl	%r8d, %r8d
    00000d0c: 	movl	$0x3ffffe0, %r15d
    00000d12: 	movl	$0x4000000, %r14d
    00000d18: 	movq	%r9, %rax
    00000d1b: 	movl	$0x3fffff8, %r11d
    00000d21: 	shlq	$0x8, %rax
    00000d25: 	orq	%r9, %rax
    00000d28: 	movq	%rax, %rdx
    00000d2b: 	shlq	$0x10, %rdx
    00000d2f: 	orq	%rdx, %rax
    00000d32: 	movq	%rax, %rdx
    00000d35: 	shlq	$0x20, %rdx
    00000d39: 	orq	%rdx, %rax
    00000d3c: 	movq	%rax, %xmm0
    00000d41: 	movq	%rax, %xmm1
    00000d46: 	movabsq	$0x101010101010101, %rax
    00000d50: 	imulq	%rax, %r9
    00000d54: 	punpcklqdq	%xmm0, %xmm0
    00000d58: 	nopl	(%rax,%rax) # Size: 8
.Ltmp876:
    00000d60: 	movq	%rbp, %rdx
    00000d63: 	xorl	%eax, %eax
    00000d65: 	nopl	(%rax) # Size: 3
.Ltmp875:
    00000d68: 	testb	$0x7, %dl
    00000d6b: 	je	.Ltmp874 # Offset: 3435
    00000d71: 	addl	$0x1, %eax
    00000d74: 	movb	%r13b, (%rdx)
    00000d77: 	addq	$0x1, %rdx
    00000d7b: 	cmpl	$0x4000000, %eax
    00000d80: 	jne	.Ltmp875 # Offset: 3456
.Ltmp969:
    00000d82: 	addl	$0x1, %r8d
    00000d86: 	cmpl	%r8d, %r10d
    00000d89: 	jne	.Ltmp876 # Offset: 3465
.Ltmp873:
    00000d8b: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000d92: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00000d99: 	subq	$0x20, %rax
    00000d9d: 	cmpq	%rax, %r14
    00000da0: 	je	.Ltmp877 # Offset: 3488
    00000da6: 	leaq	0x10(%r14), %rdi
    00000daa: 	movq	0x88(%rsp), %r13
    00000db2: 	movq	%rdi, (%r14)
    00000db5: 	movq	0x80(%rsp), %r15
    00000dbd: 	movq	%r15, %rax
    00000dc0: 	addq	%r13, %rax
    00000dc3: 	je	.Ltmp878 # Offset: 3523
    00000dc5: 	testq	%r15, %r15
    00000dc8: 	je	.Ltmp879 # Offset: 3528
.Ltmp878:
    00000dce: 	movq	%r13, 0x58(%rsp)
    00000dd3: 	cmpq	$0xf, %r13
    00000dd7: 	ja	.Ltmp880 # Offset: 3543
    00000ddd: 	cmpq	$0x1, %r13
    00000de1: 	jne	.Ltmp881 # Offset: 3553
    00000de7: 	movzbl	(%r15), %eax
    00000deb: 	movb	%al, 0x10(%r14)
.Ltmp1011:
    00000def: 	movq	%r13, 0x8(%r14)
    00000df3: 	movb	$0x0, (%rdi,%r13)
    00000df8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000dff: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000e06: 	addq	$0x20, %rax
    00000e0a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000e11: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000e18: 	je	.Ltmp882 # Offset: 3608
.Ltmp999:
    00000e1e: 	movq	-0x20(%rax), %r13
    00000e22: 	callq	clock@PLT # Offset: 3618
    00000e27: 	pxor	%xmm0, %xmm0
    00000e2b: 	movq	%rax, end_time(%rip)
    00000e32: 	movq	%r13, %rdi
    00000e35: 	subq	start_time(%rip), %rax
    00000e3c: 	cvtsi2sd	%rax, %xmm0
    00000e41: 	divsd	DATAat0x12360(%rip), %xmm0
    00000e49: 	callq	_Z13record_resultdPKc # Offset: 3657
    00000e4e: 	pxor	%xmm1, %xmm1
    00000e52: 	pxor	%xmm7, %xmm7
    00000e56: 	pxor	%xmm6, %xmm6
    00000e5a: 	movq	%rbp, %rax
    00000e5d: 	pxor	%xmm5, %xmm5
    00000e61: 	nopl	(%rax) # Size: 7
.Ltmp883:
    00000e68: 	movdqu	(%rax), %xmm0
    00000e6c: 	addq	$0x10, %rax
    00000e70: 	movdqa	%xmm0, %xmm3
    00000e74: 	punpckhbw	%xmm7, %xmm0
    00000e78: 	punpcklbw	%xmm7, %xmm3
    00000e7c: 	movdqa	%xmm0, %xmm4
    00000e80: 	punpckhwd	%xmm6, %xmm0
    00000e84: 	movdqa	%xmm3, %xmm2
    00000e88: 	punpckhwd	%xmm6, %xmm3
    00000e8c: 	punpcklwd	%xmm6, %xmm4
    00000e90: 	punpcklwd	%xmm6, %xmm2
    00000e94: 	movdqa	%xmm2, %xmm8
    00000e99: 	punpckldq	%xmm5, %xmm2
    00000e9d: 	punpckhdq	%xmm5, %xmm8
    00000ea2: 	paddq	%xmm8, %xmm2
    00000ea7: 	movdqa	%xmm3, %xmm8
    00000eac: 	punpckldq	%xmm5, %xmm3
    00000eb0: 	punpckhdq	%xmm5, %xmm8
    00000eb5: 	paddq	%xmm8, %xmm3
    00000eba: 	paddq	%xmm3, %xmm2
    00000ebe: 	movdqa	%xmm4, %xmm3
    00000ec2: 	punpckldq	%xmm5, %xmm4
    00000ec6: 	punpckhdq	%xmm5, %xmm3
    00000eca: 	paddq	%xmm3, %xmm4
    00000ece: 	movdqa	%xmm0, %xmm3
    00000ed2: 	punpckhdq	%xmm5, %xmm0
    00000ed6: 	punpckldq	%xmm5, %xmm3
    00000eda: 	paddq	%xmm0, %xmm1
    00000ede: 	paddq	%xmm3, %xmm4
    00000ee2: 	paddq	%xmm4, %xmm2
    00000ee6: 	paddq	%xmm2, %xmm1
    00000eea: 	cmpq	%rbx, %rax
    00000eed: 	jne	.Ltmp883 # Offset: 3821
    00000ef3: 	movdqa	%xmm1, %xmm0
    00000ef7: 	movzbl	init_value(%rip), %edx
    00000efe: 	movq	0x80(%rsp), %rdi
    00000f06: 	psrldq	$0x8, %xmm0
    00000f0b: 	paddq	%xmm0, %xmm1
    00000f0f: 	shlq	$0x1a, %rdx
    00000f13: 	movq	%xmm1, %rax
    00000f18: 	cmpq	%rax, %rdx
    00000f1b: 	je	.Ltmp884 # Offset: 3867
    00000f1d: 	movq	%rdi, %rdx
    00000f20: 	leaq	DATAat0x12278(%rip), %rsi
    00000f27: 	movl	$0x1, %edi
    00000f2c: 	xorl	%eax, %eax
    00000f2e: 	callq	__printf_chk@PLT # Offset: 3886
    00000f33: 	movq	0x80(%rsp), %rdi
.Ltmp884:
    00000f3b: 	cmpq	0x8(%rsp), %rdi
    00000f40: 	je	.Ltmp885 # Offset: 3904
    00000f42: 	movq	0x90(%rsp), %rax
    00000f4a: 	leaq	0x1(%rax), %rsi
    00000f4e: 	callq	_ZdlPvm@PLT # Offset: 3918
.Ltmp885:
    00000f53: 	movq	0x8(%rsp), %rax
    00000f58: 	movq	0x60(%rsp), %r14
    00000f5d: 	movq	0x68(%rsp), %r13
    00000f62: 	movq	%rax, 0x80(%rsp)
    00000f6a: 	movq	%r14, %rax
    00000f6d: 	addq	%r13, %rax
    00000f70: 	je	.Ltmp886 # Offset: 3952
    00000f72: 	testq	%r14, %r14
    00000f75: 	je	.Ltmp887 # Offset: 3957
.Ltmp886:
    00000f7b: 	movq	%r13, 0x58(%rsp)
    00000f80: 	cmpq	$0xf, %r13
    00000f84: 	ja	.Ltmp888 # Offset: 3972
    00000f8a: 	cmpq	$0x1, %r13
    00000f8e: 	jne	.Ltmp889 # Offset: 3982
    00000f94: 	movzbl	(%r14), %eax
    00000f98: 	movb	%al, 0x90(%rsp)
    00000f9f: 	movq	0x8(%rsp), %rax
.Ltmp986:
    00000fa4: 	movq	%r13, 0x88(%rsp)
    00000fac: 	movb	$0x0, (%rax,%r13)
    00000fb1: 	movabsq	$0x3fffffffffffffff, %rax
    00000fbb: 	subq	0x88(%rsp), %rax
    00000fc3: 	cmpq	$0x1d, %rax
    00000fc7: 	jbe	.Ltmp890 # Offset: 4039
    00000fcd: 	movl	$0x1e, %edx
    00000fd2: 	leaq	DATAat0x12310(%rip), %rsi
    00000fd9: 	movq	%r12, %rdi
    00000fdc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4060
    00000fe1: 	movzbl	init_value(%rip), %r13d
    00000fe9: 	callq	clock@PLT # Offset: 4073
    00000fee: 	movl	iterations(%rip), %r11d
    00000ff5: 	movq	%rax, start_time(%rip)
    00000ffc: 	testl	%r11d, %r11d
    00000fff: 	jle	.Ltmp891 # Offset: 4095
    00001001: 	movzbl	%r13b, %eax
    00001005: 	movzbl	%r13b, %r10d
    00001009: 	xorl	%r9d, %r9d
    0000100c: 	movl	$0x4000000, %r14d
    00001012: 	movl	%eax, %esi
    00001014: 	movl	$0x3fffffc, %r15d
    0000101a: 	shll	$0x8, %esi
    0000101d: 	orl	%eax, %esi
    0000101f: 	movl	%esi, %eax
    00001021: 	shll	$0x10, %eax
    00001024: 	orl	%eax, %esi
    00001026: 	movabsq	$0x101010101010101, %rax
    00001030: 	imulq	%rax, %r10
    00001034: 	movd	%esi, %xmm7
    00001038: 	pshufd	$0x0, %xmm7, %xmm0
    0000103d: 	nopl	(%rax) # Size: 3
.Ltmp894:
    00001040: 	movq	%rbp, %rax
    00001043: 	xorl	%edx, %edx
    00001045: 	nopl	(%rax) # Size: 3
.Ltmp893:
    00001048: 	testb	$0x3, %al
    0000104a: 	je	.Ltmp892 # Offset: 4170
    00001050: 	addl	$0x1, %edx
    00001053: 	movb	%r13b, (%rax)
    00001056: 	addq	$0x1, %rax
    0000105a: 	cmpl	$0x4000000, %edx
    00001060: 	jne	.Ltmp893 # Offset: 4192
.Ltmp952:
    00001062: 	addl	$0x1, %r9d
    00001066: 	cmpl	%r9d, %r11d
    00001069: 	jne	.Ltmp894 # Offset: 4201
.Ltmp891:
    0000106b: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001072: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00001079: 	subq	$0x20, %rax
    0000107d: 	cmpq	%rax, %r14
    00001080: 	je	.Ltmp895 # Offset: 4224
    00001086: 	leaq	0x10(%r14), %rdi
    0000108a: 	movq	0x88(%rsp), %r13
    00001092: 	movq	%rdi, (%r14)
    00001095: 	movq	0x80(%rsp), %r15
    0000109d: 	movq	%r15, %rax
    000010a0: 	addq	%r13, %rax
    000010a3: 	je	.Ltmp896 # Offset: 4259
    000010a5: 	testq	%r15, %r15
    000010a8: 	je	.Ltmp897 # Offset: 4264
.Ltmp896:
    000010ae: 	movq	%r13, 0x58(%rsp)
    000010b3: 	cmpq	$0xf, %r13
    000010b7: 	ja	.Ltmp898 # Offset: 4279
    000010bd: 	cmpq	$0x1, %r13
    000010c1: 	jne	.Ltmp899 # Offset: 4289
    000010c7: 	movzbl	(%r15), %eax
    000010cb: 	movb	%al, 0x10(%r14)
.Ltmp1016:
    000010cf: 	movq	%r13, 0x8(%r14)
    000010d3: 	movb	$0x0, (%rdi,%r13)
    000010d8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000010df: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000010e6: 	addq	$0x20, %rax
    000010ea: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000010f1: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000010f8: 	je	.Ltmp900 # Offset: 4344
.Ltmp1000:
    000010fe: 	movq	-0x20(%rax), %r13
    00001102: 	callq	clock@PLT # Offset: 4354
    00001107: 	pxor	%xmm0, %xmm0
    0000110b: 	movq	%rax, end_time(%rip)
    00001112: 	movq	%r13, %rdi
    00001115: 	subq	start_time(%rip), %rax
    0000111c: 	cvtsi2sd	%rax, %xmm0
    00001121: 	divsd	DATAat0x12360(%rip), %xmm0
    00001129: 	callq	_Z13record_resultdPKc # Offset: 4393
    0000112e: 	pxor	%xmm1, %xmm1
    00001132: 	pxor	%xmm7, %xmm7
    00001136: 	pxor	%xmm6, %xmm6
    0000113a: 	movq	%rbp, %rax
    0000113d: 	pxor	%xmm5, %xmm5
    00001141: 	nopl	(%rax) # Size: 7
.Ltmp901:
    00001148: 	movdqu	(%rax), %xmm0
    0000114c: 	addq	$0x10, %rax
    00001150: 	movdqa	%xmm0, %xmm3
    00001154: 	punpckhbw	%xmm7, %xmm0
    00001158: 	punpcklbw	%xmm7, %xmm3
    0000115c: 	movdqa	%xmm0, %xmm4
    00001160: 	punpckhwd	%xmm6, %xmm0
    00001164: 	movdqa	%xmm3, %xmm2
    00001168: 	punpckhwd	%xmm6, %xmm3
    0000116c: 	punpcklwd	%xmm6, %xmm4
    00001170: 	punpcklwd	%xmm6, %xmm2
    00001174: 	movdqa	%xmm2, %xmm8
    00001179: 	punpckldq	%xmm5, %xmm2
    0000117d: 	punpckhdq	%xmm5, %xmm8
    00001182: 	paddq	%xmm8, %xmm2
    00001187: 	movdqa	%xmm3, %xmm8
    0000118c: 	punpckldq	%xmm5, %xmm3
    00001190: 	punpckhdq	%xmm5, %xmm8
    00001195: 	paddq	%xmm8, %xmm3
    0000119a: 	paddq	%xmm3, %xmm2
    0000119e: 	movdqa	%xmm4, %xmm3
    000011a2: 	punpckldq	%xmm5, %xmm4
    000011a6: 	punpckhdq	%xmm5, %xmm3
    000011aa: 	paddq	%xmm3, %xmm4
    000011ae: 	movdqa	%xmm0, %xmm3
    000011b2: 	punpckhdq	%xmm5, %xmm0
    000011b6: 	punpckldq	%xmm5, %xmm3
    000011ba: 	paddq	%xmm0, %xmm1
    000011be: 	paddq	%xmm3, %xmm4
    000011c2: 	paddq	%xmm4, %xmm2
    000011c6: 	paddq	%xmm2, %xmm1
    000011ca: 	cmpq	%rax, %rbx
    000011cd: 	jne	.Ltmp901 # Offset: 4557
    000011d3: 	movdqa	%xmm1, %xmm0
    000011d7: 	movzbl	init_value(%rip), %edx
    000011de: 	movq	0x80(%rsp), %rdi
    000011e6: 	psrldq	$0x8, %xmm0
    000011eb: 	paddq	%xmm0, %xmm1
    000011ef: 	shlq	$0x1a, %rdx
    000011f3: 	movq	%xmm1, %rax
    000011f8: 	cmpq	%rax, %rdx
    000011fb: 	je	.Ltmp902 # Offset: 4603
    000011fd: 	movq	%rdi, %rdx
    00001200: 	leaq	DATAat0x12278(%rip), %rsi
    00001207: 	movl	$0x1, %edi
    0000120c: 	xorl	%eax, %eax
    0000120e: 	callq	__printf_chk@PLT # Offset: 4622
    00001213: 	movq	0x80(%rsp), %rdi
.Ltmp902:
    0000121b: 	cmpq	0x8(%rsp), %rdi
    00001220: 	je	.Ltmp903 # Offset: 4640
    00001222: 	movq	0x90(%rsp), %rax
    0000122a: 	leaq	0x1(%rax), %rsi
    0000122e: 	callq	_ZdlPvm@PLT # Offset: 4654
.Ltmp903:
    00001233: 	movq	0x8(%rsp), %rax
    00001238: 	movq	0x60(%rsp), %r14
    0000123d: 	movq	0x68(%rsp), %r13
    00001242: 	movq	%rax, 0x80(%rsp)
    0000124a: 	movq	%r14, %rax
    0000124d: 	addq	%r13, %rax
    00001250: 	je	.Ltmp904 # Offset: 4688
    00001252: 	testq	%r14, %r14
    00001255: 	je	.Ltmp905 # Offset: 4693
.Ltmp904:
    0000125b: 	movq	%r13, 0x58(%rsp)
    00001260: 	cmpq	$0xf, %r13
    00001264: 	ja	.Ltmp906 # Offset: 4708
    0000126a: 	cmpq	$0x1, %r13
    0000126e: 	jne	.Ltmp907 # Offset: 4718
    00001274: 	movzbl	(%r14), %eax
    00001278: 	movb	%al, 0x90(%rsp)
    0000127f: 	movq	0x8(%rsp), %rax
.Ltmp980:
    00001284: 	movq	%r13, 0x88(%rsp)
    0000128c: 	movb	$0x0, (%rax,%r13)
    00001291: 	movabsq	$0x3fffffffffffffff, %rax
    0000129b: 	subq	0x88(%rsp), %rax
    000012a3: 	cmpq	$0x1d, %rax
    000012a7: 	jbe	.Ltmp908 # Offset: 4775
    000012ad: 	movl	$0x1e, %edx
    000012b2: 	leaq	DATAat0x12330(%rip), %rsi
    000012b9: 	movq	%r12, %rdi
    000012bc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4796
    000012c1: 	movzbl	init_value(%rip), %r13d
    000012c9: 	callq	clock@PLT # Offset: 4809
    000012ce: 	movl	iterations(%rip), %r10d
    000012d5: 	movq	%rax, start_time(%rip)
    000012dc: 	testl	%r10d, %r10d
    000012df: 	jle	.Ltmp909 # Offset: 4831
    000012e5: 	movzbl	%r13b, %r9d
    000012e9: 	xorl	%r8d, %r8d
    000012ec: 	movl	$0x4000000, %r11d
    000012f2: 	movl	$0x1, %r14d
    000012f8: 	movq	%r9, %rax
    000012fb: 	movl	$0x3fffff8, %r15d
    00001301: 	shlq	$0x8, %rax
    00001305: 	orq	%r9, %rax
    00001308: 	movq	%rax, %rdx
    0000130b: 	shlq	$0x10, %rdx
    0000130f: 	orq	%rdx, %rax
    00001312: 	movq	%rax, %rdx
    00001315: 	shlq	$0x20, %rdx
    00001319: 	orq	%rdx, %rax
    0000131c: 	movq	%rax, %xmm1
    00001321: 	movabsq	$0x101010101010101, %rax
    0000132b: 	imulq	%rax, %r9
    0000132f: 	movdqa	%xmm1, %xmm0
    00001333: 	punpcklqdq	%xmm0, %xmm0
    00001337: 	nopw	(%rax,%rax) # Size: 9
.Ltmp912:
    00001340: 	movq	%rbp, %rdx
    00001343: 	xorl	%eax, %eax
    00001345: 	nopl	(%rax) # Size: 3
.Ltmp911:
    00001348: 	testb	$0x7, %dl
    0000134b: 	je	.Ltmp910 # Offset: 4939
    00001351: 	addl	$0x1, %eax
    00001354: 	movb	%r13b, (%rdx)
    00001357: 	addq	$0x1, %rdx
    0000135b: 	cmpl	$0x4000000, %eax
    00001360: 	jne	.Ltmp911 # Offset: 4960
.Ltmp962:
    00001362: 	addl	$0x1, %r8d
    00001366: 	cmpl	%r8d, %r10d
    00001369: 	jne	.Ltmp912 # Offset: 4969
.Ltmp909:
    0000136b: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001372: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00001379: 	subq	$0x20, %rax
    0000137d: 	cmpq	%rax, %r14
    00001380: 	je	.Ltmp913 # Offset: 4992
    00001386: 	leaq	0x10(%r14), %rdi
    0000138a: 	movq	0x88(%rsp), %r13
    00001392: 	movq	%rdi, (%r14)
    00001395: 	movq	0x80(%rsp), %r15
    0000139d: 	movq	%r15, %rax
    000013a0: 	addq	%r13, %rax
    000013a3: 	je	.Ltmp914 # Offset: 5027
    000013a5: 	testq	%r15, %r15
    000013a8: 	je	.Ltmp915 # Offset: 5032
.Ltmp914:
    000013ae: 	movq	%r13, 0x58(%rsp)
    000013b3: 	cmpq	$0xf, %r13
    000013b7: 	ja	.Ltmp916 # Offset: 5047
    000013bd: 	cmpq	$0x1, %r13
    000013c1: 	jne	.Ltmp917 # Offset: 5057
    000013c7: 	movzbl	(%r15), %eax
    000013cb: 	movb	%al, 0x10(%r14)
.Ltmp1015:
    000013cf: 	movq	%r13, 0x8(%r14)
    000013d3: 	movb	$0x0, (%rdi,%r13)
    000013d8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000013df: 	addq	$0x20, %rax
    000013e3: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1002:
    000013ea: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000013f1: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000013f8: 	je	.Ltmp918 # Offset: 5112
.Ltmp1001:
    000013fe: 	movq	-0x20(%rax), %r13
    00001402: 	callq	clock@PLT # Offset: 5122
    00001407: 	pxor	%xmm0, %xmm0
    0000140b: 	movq	%rax, end_time(%rip)
    00001412: 	movq	%r13, %rdi
    00001415: 	subq	start_time(%rip), %rax
    0000141c: 	cvtsi2sd	%rax, %xmm0
    00001421: 	divsd	DATAat0x12360(%rip), %xmm0
    00001429: 	callq	_Z13record_resultdPKc # Offset: 5161
    0000142e: 	movq	0x18(%rsp), %rax
    00001433: 	pxor	%xmm1, %xmm1
    00001437: 	pxor	%xmm7, %xmm7
    0000143b: 	pxor	%xmm6, %xmm6
    0000143f: 	pxor	%xmm5, %xmm5
    00001443: 	nopl	(%rax,%rax) # Size: 5
.Ltmp919:
    00001448: 	movdqu	(%rax), %xmm0
    0000144c: 	addq	$0x10, %rax
    00001450: 	movdqa	%xmm0, %xmm3
    00001454: 	punpckhbw	%xmm7, %xmm0
    00001458: 	punpcklbw	%xmm7, %xmm3
    0000145c: 	movdqa	%xmm0, %xmm4
    00001460: 	punpckhwd	%xmm6, %xmm0
    00001464: 	movdqa	%xmm3, %xmm2
    00001468: 	punpckhwd	%xmm6, %xmm3
    0000146c: 	punpcklwd	%xmm6, %xmm4
    00001470: 	punpcklwd	%xmm6, %xmm2
    00001474: 	movdqa	%xmm2, %xmm8
    00001479: 	punpckhdq	%xmm5, %xmm2
    0000147d: 	punpckldq	%xmm5, %xmm8
    00001482: 	paddq	%xmm8, %xmm2
    00001487: 	movdqa	%xmm3, %xmm8
    0000148c: 	punpckhdq	%xmm5, %xmm3
    00001490: 	punpckldq	%xmm5, %xmm8
    00001495: 	paddq	%xmm8, %xmm3
    0000149a: 	paddq	%xmm3, %xmm2
    0000149e: 	movdqa	%xmm4, %xmm3
    000014a2: 	punpckldq	%xmm5, %xmm4
    000014a6: 	punpckhdq	%xmm5, %xmm3
    000014aa: 	paddq	%xmm3, %xmm4
    000014ae: 	movdqa	%xmm0, %xmm3
    000014b2: 	punpckhdq	%xmm5, %xmm0
    000014b6: 	punpckldq	%xmm5, %xmm3
    000014ba: 	paddq	%xmm0, %xmm1
    000014be: 	paddq	%xmm3, %xmm4
    000014c2: 	paddq	%xmm4, %xmm2
    000014c6: 	paddq	%xmm2, %xmm1
    000014ca: 	cmpq	%rbx, %rax
    000014cd: 	jne	.Ltmp919 # Offset: 5325
    000014d3: 	movdqa	%xmm1, %xmm0
    000014d7: 	movzbl	init_value(%rip), %edx
    000014de: 	movq	0x80(%rsp), %rdi
    000014e6: 	psrldq	$0x8, %xmm0
    000014eb: 	paddq	%xmm0, %xmm1
    000014ef: 	shlq	$0x1a, %rdx
    000014f3: 	movq	%xmm1, %rax
    000014f8: 	cmpq	%rax, %rdx
    000014fb: 	je	.Ltmp920 # Offset: 5371
    000014fd: 	movq	%rdi, %rdx
    00001500: 	leaq	DATAat0x12278(%rip), %rsi
    00001507: 	movl	$0x1, %edi
    0000150c: 	xorl	%eax, %eax
    0000150e: 	callq	__printf_chk@PLT # Offset: 5390
    00001513: 	movq	0x80(%rsp), %rdi
.Ltmp920:
    0000151b: 	cmpq	0x8(%rsp), %rdi
    00001520: 	je	.Ltmp921 # Offset: 5408
    00001522: 	movq	0x90(%rsp), %rax
    0000152a: 	leaq	0x1(%rax), %rsi
    0000152e: 	callq	_ZdlPvm@PLT # Offset: 5422
.Ltmp921:
    00001533: 	movq	%rbp, %rdi
    00001536: 	callq	_ZdaPv@PLT # Offset: 5430
    0000153b: 	movq	0x8(%rsp), %rax
    00001540: 	movq	0x60(%rsp), %rbp
    00001545: 	movq	0x68(%rsp), %r13
    0000154a: 	movq	%rax, 0x80(%rsp)
    00001552: 	movq	%rbp, %rax
    00001555: 	addq	%r13, %rax
    00001558: 	je	.Ltmp922 # Offset: 5464
    0000155a: 	testq	%rbp, %rbp
    0000155d: 	je	.Ltmp923 # Offset: 5469
.Ltmp922:
    00001563: 	movq	%r13, 0x58(%rsp)
    00001568: 	cmpq	$0xf, %r13
    0000156c: 	ja	.Ltmp924 # Offset: 5484
    00001572: 	cmpq	$0x1, %r13
    00001576: 	jne	.Ltmp925 # Offset: 5494
    0000157c: 	movzbl	(%rbp), %eax
    00001580: 	movb	%al, 0x90(%rsp)
    00001587: 	movq	0x8(%rsp), %rax
.Ltmp988:
    0000158c: 	movq	%r13, 0x88(%rsp)
    00001594: 	movb	$0x0, (%rax,%r13)
    00001599: 	movabsq	$0x3fffffffffffffff, %rax
    000015a3: 	subq	0x88(%rsp), %rax
    000015ab: 	cmpq	$0x6, %rax
    000015af: 	jbe	.Ltmp926 # Offset: 5551
    000015b5: 	movl	$0x7, %edx
    000015ba: 	leaq	DATAat0x1229d(%rip), %rsi
    000015c1: 	movq	%r12, %rdi
    000015c4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5572
    000015c9: 	movl	iterations(%rip), %edx
    000015cf: 	xorl	%r8d, %r8d
    000015d2: 	xorl	%ecx, %ecx
    000015d4: 	movl	$0x4000000, %esi
    000015d9: 	movq	0x80(%rsp), %rdi
    000015e1: 	callq	_Z9summarizePKciiii # Offset: 5601
    000015e6: 	movq	0x80(%rsp), %rdi
    000015ee: 	cmpq	0x8(%rsp), %rdi
    000015f3: 	je	.Ltmp927 # Offset: 5619
    000015f5: 	movq	0x90(%rsp), %rax
    000015fd: 	leaq	0x1(%rax), %rsi
    00001601: 	callq	_ZdlPvm@PLT # Offset: 5633
.Ltmp927:
    00001606: 	movq	0x60(%rsp), %rdi
    0000160b: 	cmpq	0x10(%rsp), %rdi
    00001610: 	je	.Ltmp928 # Offset: 5648
    00001612: 	movq	0x70(%rsp), %rax
    00001617: 	leaq	0x1(%rax), %rsi
    0000161b: 	callq	_ZdlPvm@PLT # Offset: 5659
.Ltmp928:
    00001620: 	movq	0xa8(%rsp), %rax
    00001628: 	subq	%fs:0x28, %rax
    00001631: 	jne	.Ltmp929 # Offset: 5681
    00001637: 	addq	$0xb8, %rsp
    0000163e: 	popq	%rbx
    0000163f: 	popq	%rbp
    00001640: 	popq	%r12
    00001642: 	popq	%r13
    00001644: 	popq	%r14
    00001646: 	popq	%r15
    00001648: 	retq # Offset: 5704
    00001649: 	nopl	(%rax) # Size: 7
.Ltmp930:
    00001650: 	addq	$0x20, %rbp
.Ltmp791:
    00001654: 	cmpq	%rbp, 0x8(%rsp)
    00001659: 	je	.Ltmp794 # Offset: 5721
.Ltmp931:
    0000165f: 	movq	(%rbp), %rdi
    00001663: 	leaq	0x10(%rbp), %rax
    00001667: 	cmpq	%rax, %rdi
    0000166a: 	je	.Ltmp930 # Offset: 5738
    0000166c: 	movq	0x10(%rbp), %rax
    00001670: 	addq	$0x20, %rbp
    00001674: 	leaq	0x1(%rax), %rsi
    00001678: 	callq	_ZdlPvm@PLT # Offset: 5752
    0000167d: 	cmpq	%rbp, 0x8(%rsp)
    00001682: 	jne	.Ltmp931 # Offset: 5762
    00001684: 	jmp	.Ltmp794 # Offset: 5764
    00001689: 	nopl	(%rax) # Size: 7
.Ltmp787:
    00001690: 	addq	$0x20, %rbp
    00001694: 	cmpq	%rbx, %rbp
    00001697: 	jne	.Ltmp788 # Offset: 5783
    0000169d: 	addq	$0x8, %r13
    000016a1: 	cmpq	%r13, %r15
    000016a4: 	ja	.Ltmp789 # Offset: 5796
    000016aa: 	jmp	.Ltmp932 # Offset: 5802
.Ltmp802:
    000016af: 	testq	%r12, %r12
    000016b2: 	jne	.Ltmp933 # Offset: 5810
    000016b8: 	movq	0x8(%rsp), %rax
    000016bd: 	jmp	.Ltmp934 # Offset: 5821
    000016c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp856:
    000016c8: 	cmpl	$0x3fffff0, %eax
    000016cd: 	jg	.Ltmp935 # Offset: 5837
    000016cf: 	movl	$0x3fffff0, %r8d
    000016d5: 	movslq	%eax, %rsi
    000016d8: 	xorl	%edx, %edx
    000016da: 	subl	%eax, %r8d
    000016dd: 	addq	%rbp, %rsi
    000016e0: 	shrl	$0x4, %r8d
    000016e4: 	leal	0x1(%r8), %edi
    000016e8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp936:
    000016f0: 	movq	%rdx, %rcx
    000016f3: 	addq	$0x1, %rdx
    000016f7: 	shlq	$0x4, %rcx
    000016fb: 	movups	%xmm0, (%rsi,%rcx)
    000016ff: 	cmpl	%edx, %edi
    00001701: 	ja	.Ltmp936 # Offset: 5889
    00001703: 	shll	$0x4, %r8d
    00001707: 	leal	0x10(%rax,%r8), %eax
.Ltmp935:
    0000170c: 	cmpl	$0x3fffffc, %eax
    00001711: 	jg	.Ltmp937 # Offset: 5905
    00001713: 	movslq	%eax, %rdx
    00001716: 	leal	0x4(%rax), %ecx
    00001719: 	movl	%r10d, (%rbp,%rdx)
    0000171e: 	cmpl	$0x3fffffc, %ecx
    00001724: 	jg	.Ltmp938 # Offset: 5924
    00001726: 	movslq	%ecx, %rdx
    00001729: 	movl	%r10d, (%rbp,%rdx)
    0000172e: 	leal	0x8(%rax), %edx
    00001731: 	cmpl	$0x3fffffc, %edx
    00001737: 	jg	.Ltmp938 # Offset: 5943
    00001739: 	movslq	%edx, %rdx
    0000173c: 	movl	%r10d, (%rbp,%rdx)
.Ltmp938:
    00001741: 	movl	$0x3fffffc, %edx
    00001746: 	subl	%eax, %edx
    00001748: 	movl	%edx, %eax
    0000174a: 	andl	$-0x4, %eax
    0000174d: 	addl	%ecx, %eax
.Ltmp937:
    0000174f: 	cmpl	$0x4000000, %eax
    00001754: 	je	.Ltmp939 # Offset: 5972
    0000175a: 	movl	%r15d, %edx
    0000175d: 	subl	%eax, %edx
    0000175f: 	cltq
    00001761: 	addq	%rbp, %rax
    00001764: 	cmpl	$0x8, %edx
    00001767: 	jae	.Ltmp940 # Offset: 5991
    0000176d: 	testb	$0x4, %dl
    00001770: 	jne	.Ltmp941 # Offset: 6000
    00001776: 	testl	%edx, %edx
    00001778: 	je	.Ltmp939 # Offset: 6008
    0000177e: 	movb	%r11b, (%rax)
    00001781: 	testb	$0x2, %dl
    00001784: 	je	.Ltmp939 # Offset: 6020
    0000178a: 	addl	$0x1, %r9d
    0000178e: 	movw	%r11w, -0x2(%rax,%rdx)
    00001794: 	cmpl	%r14d, %r9d
    00001797: 	jne	.Ltmp858 # Offset: 6039
    0000179d: 	jmp	.Ltmp855 # Offset: 6045
    000017a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp892:
    000017a8: 	cmpl	$0x3fffffc, %edx
    000017ae: 	jg	.Ltmp942 # Offset: 6062
    000017b4: 	testb	$0x3f, %al
    000017b6: 	je	.Ltmp943 # Offset: 6070
    000017bc: 	leal	0x4(%rdx), %eax
    000017bf: 	cltq
    000017c1: 	nopl	(%rax) # Size: 7
.Ltmp945:
    000017c8: 	movl	%esi, -0x4(%rbp,%rax)
    000017cc: 	movl	%eax, %edx
    000017ce: 	cmpl	$0x3fffffc, %eax
    000017d3: 	jg	.Ltmp944 # Offset: 6099
    000017d5: 	leaq	(%rbp,%rax), %rcx
    000017da: 	addq	$0x4, %rax
    000017de: 	andl	$0x3f, %ecx
    000017e1: 	jne	.Ltmp945 # Offset: 6113
.Ltmp944:
    000017e3: 	cmpl	$0x3ffffc0, %edx
    000017e9: 	jg	.Ltmp946 # Offset: 6121
.Ltmp1019:
    000017eb: 	movl	$0x3ffffc0, %edi
    000017f0: 	movslq	%edx, %rax
    000017f3: 	xorl	%r8d, %r8d
    000017f6: 	subl	%edx, %edi
    000017f8: 	addq	%rbp, %rax
    000017fb: 	shrl	$0x6, %edi
    000017fe: 	leal	0x1(%rdi), %ecx
    00001801: 	nopl	(%rax) # Size: 7
.Ltmp947:
    00001808: 	addl	$0x1, %r8d
    0000180c: 	movups	%xmm0, (%rax)
    0000180f: 	addq	$0x40, %rax
    00001813: 	movups	%xmm0, -0x30(%rax)
    00001817: 	movups	%xmm0, -0x20(%rax)
    0000181b: 	movups	%xmm0, -0x10(%rax)
    0000181f: 	cmpl	%r8d, %ecx
    00001822: 	ja	.Ltmp947 # Offset: 6178
    00001824: 	shll	$0x6, %edi
    00001827: 	leal	0x40(%rdx,%rdi), %edx
.Ltmp946:
    0000182b: 	cmpl	$0x3fffffc, %edx
    00001831: 	jg	.Ltmp948 # Offset: 6193
.Ltmp1020:
    00001833: 	movl	%r15d, %eax
    00001836: 	subl	%edx, %eax
    00001838: 	movl	%eax, %ecx
    0000183a: 	shrl	$0x2, %ecx
    0000183d: 	leal	0x1(%rcx), %edi
    00001840: 	cmpl	$0xb, %eax
    00001843: 	jbe	.Ltmp949 # Offset: 6211
    00001849: 	movl	%edi, %r8d
    0000184c: 	movslq	%edx, %rax
    0000184f: 	addq	%rbp, %rax
    00001852: 	shrl	$0x2, %r8d
    00001856: 	movups	%xmm0, (%rax)
    00001859: 	cmpl	$0x1, %r8d
    0000185d: 	je	.Ltmp950 # Offset: 6237
    0000185f: 	movups	%xmm0, 0x10(%rax)
    00001863: 	cmpl	$0x2, %r8d
    00001867: 	je	.Ltmp950 # Offset: 6247
    00001869: 	movups	%xmm0, 0x20(%rax)
.Ltmp950:
    0000186d: 	movl	%edi, %r8d
    00001870: 	andl	$-0x4, %r8d
    00001874: 	leal	(%rdx,%r8,4), %eax
    00001878: 	cmpl	%edi, %r8d
    0000187b: 	je	.Ltmp951 # Offset: 6267
.Ltmp978:
    0000187d: 	movslq	%eax, %rdi
    00001880: 	movl	%esi, (%rbp,%rdi)
    00001884: 	leal	0x4(%rax), %edi
    00001887: 	cmpl	$0x3fffffc, %edi
    0000188d: 	jg	.Ltmp951 # Offset: 6285
    0000188f: 	movslq	%edi, %rdi
    00001892: 	addl	$0x8, %eax
    00001895: 	movl	%esi, (%rbp,%rdi)
    00001899: 	cmpl	$0x3fffffc, %eax
    0000189e: 	jg	.Ltmp951 # Offset: 6302
    000018a0: 	cltq
    000018a2: 	movl	%esi, (%rbp,%rax)
.Ltmp951:
    000018a6: 	leal	0x4(%rdx,%rcx,4), %edx
.Ltmp948:
    000018aa: 	cmpl	$0x4000000, %edx
    000018b0: 	je	.Ltmp952 # Offset: 6320
.Ltmp942:
    000018b6: 	movl	%r14d, %ecx
    000018b9: 	subl	%edx, %ecx
    000018bb: 	movslq	%edx, %rdx
    000018be: 	addq	%rbp, %rdx
    000018c1: 	cmpl	$0x8, %ecx
    000018c4: 	jae	.Ltmp953 # Offset: 6340
    000018ca: 	testb	$0x4, %cl
    000018cd: 	jne	.Ltmp954 # Offset: 6349
    000018d3: 	testl	%ecx, %ecx
    000018d5: 	je	.Ltmp952 # Offset: 6357
    000018db: 	movb	%r10b, (%rdx)
    000018de: 	testb	$0x2, %cl
    000018e1: 	je	.Ltmp952 # Offset: 6369
    000018e7: 	addl	$0x1, %r9d
    000018eb: 	movw	%r10w, -0x2(%rdx,%rcx)
    000018f1: 	cmpl	%r9d, %r11d
    000018f4: 	jne	.Ltmp894 # Offset: 6388
    000018fa: 	jmp	.Ltmp891 # Offset: 6394
    000018ff: 	nop # Size: 1
.Ltmp910:
    00001900: 	cmpl	$0x3fffff8, %eax
    00001905: 	jg	.Ltmp955 # Offset: 6405
    0000190b: 	andl	$0x3f, %edx
    0000190e: 	je	.Ltmp956 # Offset: 6414
    00001914: 	addl	$0x8, %eax
    00001917: 	movslq	%eax, %rdx
    0000191a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp958:
    00001920: 	movq	%xmm1, -0x8(%rbp,%rdx)
    00001926: 	movl	%edx, %eax
    00001928: 	cmpl	$0x3fffff8, %edx
    0000192e: 	jg	.Ltmp957 # Offset: 6446
    00001930: 	leaq	(%rbp,%rdx), %rcx
    00001935: 	addq	$0x8, %rdx
    00001939: 	andl	$0x3f, %ecx
    0000193c: 	jne	.Ltmp958 # Offset: 6460
.Ltmp957:
    0000193e: 	cmpl	$0x3ffffbf, %eax
    00001943: 	jg	.Ltmp959 # Offset: 6467
.Ltmp1021:
    00001949: 	movl	$0x3ffffbf, %edi
    0000194e: 	movslq	%eax, %rdx
    00001951: 	xorl	%ecx, %ecx
    00001953: 	subl	%eax, %edi
    00001955: 	addq	%rbp, %rdx
    00001958: 	shrl	$0x6, %edi
    0000195b: 	leal	0x1(%rdi), %esi
    0000195e: 	nop # Size: 2
.Ltmp960:
    00001960: 	addl	$0x1, %ecx
    00001963: 	movups	%xmm0, (%rdx)
    00001966: 	addq	$0x40, %rdx
    0000196a: 	movups	%xmm0, -0x30(%rdx)
    0000196e: 	movups	%xmm0, -0x20(%rdx)
    00001972: 	movups	%xmm0, -0x10(%rdx)
    00001976: 	cmpl	%esi, %ecx
    00001978: 	jb	.Ltmp960 # Offset: 6520
    0000197a: 	shll	$0x6, %edi
    0000197d: 	leal	0x40(%rax,%rdi), %eax
    00001981: 	cmpl	$0x3fffff8, %eax
    00001986: 	jg	.Ltmp955 # Offset: 6534
.Ltmp976:
    0000198c: 	movslq	%eax, %rdx
    0000198f: 	leal	0x8(%rax), %ecx
    00001992: 	movq	%xmm1, (%rbp,%rdx)
    00001998: 	cmpl	$0x3fffff8, %ecx
    0000199e: 	jg	.Ltmp961 # Offset: 6558
    000019a0: 	movslq	%ecx, %rdx
    000019a3: 	movq	%xmm1, (%rbp,%rdx)
    000019a9: 	leal	0x10(%rax), %edx
    000019ac: 	cmpl	$0x3fffff8, %edx
    000019b2: 	jg	.Ltmp961 # Offset: 6578
    000019b4: 	movslq	%edx, %rdx
    000019b7: 	movq	%xmm1, (%rbp,%rdx)
    000019bd: 	leal	0x18(%rax), %edx
    000019c0: 	cmpl	$0x3fffff8, %edx
    000019c6: 	jg	.Ltmp961 # Offset: 6598
    000019c8: 	movslq	%edx, %rdx
    000019cb: 	movq	%xmm1, (%rbp,%rdx)
    000019d1: 	leal	0x20(%rax), %edx
    000019d4: 	cmpl	$0x3fffff8, %edx
    000019da: 	jg	.Ltmp961 # Offset: 6618
    000019dc: 	movslq	%edx, %rdx
    000019df: 	movq	%xmm1, (%rbp,%rdx)
    000019e5: 	leal	0x28(%rax), %edx
    000019e8: 	cmpl	$0x3fffff8, %edx
    000019ee: 	jg	.Ltmp961 # Offset: 6638
    000019f0: 	movslq	%edx, %rdx
    000019f3: 	movq	%xmm1, (%rbp,%rdx)
    000019f9: 	leal	0x30(%rax), %edx
    000019fc: 	cmpl	$0x3fffff8, %edx
    00001a02: 	jg	.Ltmp961 # Offset: 6658
    00001a04: 	movslq	%edx, %rsi
    00001a07: 	movq	%xmm1, (%rbp,%rsi)
    00001a0d: 	cmpl	$0x3fffff0, %edx
    00001a13: 	jne	.Ltmp961 # Offset: 6675
    00001a15: 	movq	%xmm1, 0x3fffff8(%rbp)
.Ltmp961:
    00001a1d: 	movl	%r15d, %edx
    00001a20: 	subl	%eax, %edx
    00001a22: 	andl	$-0x8, %edx
    00001a25: 	cmpl	$0x3fffff8, %eax
    00001a2a: 	movl	$0x0, %eax
    00001a2f: 	cmovgl	%eax, %edx
    00001a32: 	leal	(%rcx,%rdx), %eax
.Ltmp977:
    00001a35: 	cmpl	$0x4000000, %eax
    00001a3a: 	je	.Ltmp962 # Offset: 6714
.Ltmp955:
    00001a40: 	movl	%r11d, %edx
    00001a43: 	subl	%eax, %edx
    00001a45: 	cmpl	$0x3ffffff, %eax
    00001a4a: 	cltq
    00001a4c: 	cmovgq	%r14, %rdx
    00001a50: 	addq	%rbp, %rax
    00001a53: 	movl	%edx, %ecx
    00001a55: 	cmpl	$0x8, %edx
    00001a58: 	jae	.Ltmp963 # Offset: 6744
    00001a5e: 	andl	$0x4, %edx
    00001a61: 	jne	.Ltmp964 # Offset: 6753
    00001a67: 	testl	%ecx, %ecx
    00001a69: 	je	.Ltmp962 # Offset: 6761
    00001a6f: 	movb	%r9b, (%rax)
    00001a72: 	testb	$0x2, %cl
    00001a75: 	je	.Ltmp962 # Offset: 6773
    00001a7b: 	addl	$0x1, %r8d
    00001a7f: 	movw	%r9w, -0x2(%rax,%rcx)
    00001a85: 	cmpl	%r8d, %r10d
    00001a88: 	jne	.Ltmp912 # Offset: 6792
    00001a8e: 	jmp	.Ltmp909 # Offset: 6798
    00001a93: 	nopl	(%rax,%rax) # Size: 5
.Ltmp874:
    00001a98: 	cmpl	$0x3ffffe0, %eax
    00001a9d: 	jg	.Ltmp965 # Offset: 6813
    00001a9f: 	movl	%r15d, %edi
    00001aa2: 	movslq	%eax, %rdx
    00001aa5: 	xorl	%ecx, %ecx
    00001aa7: 	subl	%eax, %edi
    00001aa9: 	addq	%rbp, %rdx
    00001aac: 	shrl	$0x5, %edi
    00001aaf: 	leal	0x1(%rdi), %esi
    00001ab2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp966:
    00001ab8: 	addl	$0x1, %ecx
    00001abb: 	movups	%xmm0, (%rdx)
    00001abe: 	addq	$0x20, %rdx
    00001ac2: 	movups	%xmm0, -0x10(%rdx)
    00001ac6: 	cmpl	%esi, %ecx
    00001ac8: 	jb	.Ltmp966 # Offset: 6856
    00001aca: 	shll	$0x5, %edi
    00001acd: 	leal	0x20(%rax,%rdi), %eax
.Ltmp965:
    00001ad1: 	cmpl	$0x3fffff8, %eax
    00001ad6: 	jg	.Ltmp967 # Offset: 6870
    00001ad8: 	movslq	%eax, %rdx
    00001adb: 	leal	0x8(%rax), %ecx
    00001ade: 	movq	%xmm1, (%rbp,%rdx)
    00001ae4: 	cmpl	$0x3fffff8, %ecx
    00001aea: 	jg	.Ltmp968 # Offset: 6890
    00001aec: 	movslq	%ecx, %rdx
    00001aef: 	movq	%xmm1, (%rbp,%rdx)
    00001af5: 	leal	0x10(%rax), %edx
    00001af8: 	cmpl	$0x3fffff8, %edx
    00001afe: 	jg	.Ltmp968 # Offset: 6910
    00001b00: 	movslq	%edx, %rdx
    00001b03: 	movq	%xmm1, (%rbp,%rdx)
.Ltmp968:
    00001b09: 	movl	%r11d, %edx
    00001b0c: 	subl	%eax, %edx
    00001b0e: 	movl	%edx, %eax
    00001b10: 	andl	$-0x8, %eax
    00001b13: 	addl	%ecx, %eax
.Ltmp967:
    00001b15: 	cmpl	$0x4000000, %eax
    00001b1a: 	je	.Ltmp969 # Offset: 6938
    00001b20: 	movl	%r14d, %edx
    00001b23: 	subl	%eax, %edx
    00001b25: 	cltq
    00001b27: 	addq	%rbp, %rax
    00001b2a: 	cmpl	$0x8, %edx
    00001b2d: 	jae	.Ltmp970 # Offset: 6957
    00001b33: 	testb	$0x4, %dl
    00001b36: 	jne	.Ltmp971 # Offset: 6966
    00001b3c: 	testl	%edx, %edx
    00001b3e: 	je	.Ltmp969 # Offset: 6974
    00001b44: 	movb	%r9b, (%rax)
    00001b47: 	testb	$0x2, %dl
    00001b4a: 	je	.Ltmp969 # Offset: 6986
    00001b50: 	addl	$0x1, %r8d
    00001b54: 	movw	%r9w, -0x2(%rax,%rdx)
    00001b5a: 	cmpl	%r8d, %r10d
    00001b5d: 	jne	.Ltmp876 # Offset: 7005
    00001b63: 	jmp	.Ltmp873 # Offset: 7011
    00001b68: 	nopl	(%rax,%rax) # Size: 8
.Ltmp940:
    00001b70: 	movl	%edx, %ecx
    00001b72: 	movq	%r11, (%rax)
    00001b75: 	movq	%r11, -0x8(%rax,%rcx)
    00001b7a: 	leaq	0x8(%rax), %rcx
    00001b7e: 	andq	$-0x8, %rcx
    00001b82: 	subq	%rcx, %rax
    00001b85: 	addl	%eax, %edx
    00001b87: 	andl	$-0x8, %edx
    00001b8a: 	cmpl	$0x8, %edx
    00001b8d: 	jb	.Ltmp939 # Offset: 7053
    00001b93: 	andl	$-0x8, %edx
    00001b96: 	xorl	%eax, %eax
.Ltmp972:
    00001b98: 	movl	%eax, %esi
    00001b9a: 	addl	$0x8, %eax
    00001b9d: 	movq	%r11, (%rcx,%rsi)
    00001ba1: 	cmpl	%edx, %eax
    00001ba3: 	jb	.Ltmp972 # Offset: 7075
    00001ba5: 	addl	$0x1, %r9d
    00001ba9: 	cmpl	%r14d, %r9d
    00001bac: 	jne	.Ltmp858 # Offset: 7084
    00001bb2: 	jmp	.Ltmp855 # Offset: 7090
    00001bb7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp970:
    00001bc0: 	movl	%edx, %ecx
    00001bc2: 	movq	%r9, (%rax)
    00001bc5: 	movq	%r9, -0x8(%rax,%rcx)
    00001bca: 	leaq	0x8(%rax), %rcx
    00001bce: 	andq	$-0x8, %rcx
    00001bd2: 	subq	%rcx, %rax
    00001bd5: 	addl	%eax, %edx
    00001bd7: 	andl	$-0x8, %edx
    00001bda: 	cmpl	$0x8, %edx
    00001bdd: 	jb	.Ltmp969 # Offset: 7133
    00001be3: 	andl	$-0x8, %edx
    00001be6: 	xorl	%eax, %eax
.Ltmp973:
    00001be8: 	movl	%eax, %esi
    00001bea: 	addl	$0x8, %eax
    00001bed: 	movq	%r9, (%rcx,%rsi)
    00001bf1: 	cmpl	%edx, %eax
    00001bf3: 	jb	.Ltmp973 # Offset: 7155
    00001bf5: 	addl	$0x1, %r8d
    00001bf9: 	cmpl	%r8d, %r10d
    00001bfc: 	jne	.Ltmp876 # Offset: 7164
    00001c02: 	jmp	.Ltmp873 # Offset: 7170
    00001c07: 	nopw	(%rax,%rax) # Size: 9
.Ltmp953:
    00001c10: 	leaq	0x8(%rdx), %rdi
    00001c14: 	movl	%ecx, %eax
    00001c16: 	movq	%r10, (%rdx)
    00001c19: 	andq	$-0x8, %rdi
    00001c1d: 	movq	%r10, -0x8(%rdx,%rax)
    00001c22: 	subq	%rdi, %rdx
    00001c25: 	addl	%edx, %ecx
    00001c27: 	andl	$-0x8, %ecx
    00001c2a: 	cmpl	$0x8, %ecx
    00001c2d: 	jb	.Ltmp952 # Offset: 7213
    00001c33: 	andl	$-0x8, %ecx
    00001c36: 	xorl	%eax, %eax
.Ltmp974:
    00001c38: 	movl	%eax, %edx
    00001c3a: 	addl	$0x8, %eax
    00001c3d: 	movq	%r10, (%rdi,%rdx)
    00001c41: 	cmpl	%ecx, %eax
    00001c43: 	jb	.Ltmp974 # Offset: 7235
    00001c45: 	addl	$0x1, %r9d
    00001c49: 	cmpl	%r9d, %r11d
    00001c4c: 	jne	.Ltmp894 # Offset: 7244
    00001c52: 	jmp	.Ltmp891 # Offset: 7250
    00001c57: 	nopw	(%rax,%rax) # Size: 9
.Ltmp963:
    00001c60: 	leaq	0x8(%rax), %rsi
    00001c64: 	movq	%r9, (%rax)
    00001c67: 	andq	$-0x8, %rsi
    00001c6b: 	movq	%r9, -0x8(%rdx,%rax)
    00001c70: 	subq	%rsi, %rax
    00001c73: 	leal	(%rdx,%rax), %ecx
    00001c76: 	andl	$-0x8, %ecx
    00001c79: 	cmpl	$0x8, %ecx
    00001c7c: 	jb	.Ltmp962 # Offset: 7292
    00001c82: 	andl	$-0x8, %ecx
    00001c85: 	xorl	%eax, %eax
.Ltmp975:
    00001c87: 	movl	%eax, %edx
    00001c89: 	addl	$0x8, %eax
    00001c8c: 	movq	%r9, (%rsi,%rdx)
    00001c90: 	cmpl	%ecx, %eax
    00001c92: 	jb	.Ltmp975 # Offset: 7314
    00001c94: 	addl	$0x1, %r8d
    00001c98: 	cmpl	%r8d, %r10d
    00001c9b: 	jne	.Ltmp912 # Offset: 7323
    00001ca1: 	jmp	.Ltmp909 # Offset: 7329
.Ltmp959:
    00001ca6: 	cmpl	$0x3fffff8, %eax
    00001cab: 	jle	.Ltmp976 # Offset: 7339
    00001cb1: 	jmp	.Ltmp977 # Offset: 7345
    00001cb6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp949:
    00001cc0: 	movl	%edx, %eax
    00001cc2: 	jmp	.Ltmp978 # Offset: 7362
.Ltmp964:
    00001cc7: 	addl	$0x1, %r8d
    00001ccb: 	movl	%r9d, (%rax)
    00001cce: 	movl	%r9d, -0x4(%rax,%rcx)
    00001cd3: 	cmpl	%r8d, %r10d
    00001cd6: 	jne	.Ltmp912 # Offset: 7382
    00001cdc: 	jmp	.Ltmp909 # Offset: 7388
.Ltmp971:
    00001ce1: 	addl	$0x1, %r8d
    00001ce5: 	movl	%r9d, (%rax)
    00001ce8: 	movl	%r9d, -0x4(%rax,%rdx)
    00001ced: 	cmpl	%r8d, %r10d
    00001cf0: 	jne	.Ltmp876 # Offset: 7408
    00001cf6: 	jmp	.Ltmp873 # Offset: 7414
.Ltmp954:
    00001cfb: 	addl	$0x1, %r9d
    00001cff: 	movl	%r10d, (%rdx)
    00001d02: 	movl	%r10d, -0x4(%rdx,%rcx)
    00001d07: 	cmpl	%r9d, %r11d
    00001d0a: 	jne	.Ltmp894 # Offset: 7434
    00001d10: 	jmp	.Ltmp891 # Offset: 7440
.Ltmp941:
    00001d15: 	addl	$0x1, %r9d
    00001d19: 	movl	%r11d, (%rax)
    00001d1c: 	movl	%r11d, -0x4(%rax,%rdx)
    00001d21: 	cmpl	%r14d, %r9d
    00001d24: 	jne	.Ltmp858 # Offset: 7460
    00001d2a: 	jmp	.Ltmp855 # Offset: 7466
.Ltmp907:
    00001d2f: 	testq	%r13, %r13
    00001d32: 	jne	.Ltmp979 # Offset: 7474
    00001d38: 	movq	0x8(%rsp), %rax
    00001d3d: 	jmp	.Ltmp980 # Offset: 7485
.Ltmp853:
    00001d42: 	testq	%r13, %r13
    00001d45: 	jne	.Ltmp981 # Offset: 7493
    00001d4b: 	movq	0x8(%rsp), %rax
    00001d50: 	jmp	.Ltmp982 # Offset: 7504
.Ltmp871:
    00001d55: 	testq	%r13, %r13
    00001d58: 	jne	.Ltmp983 # Offset: 7512
    00001d5e: 	movq	0x8(%rsp), %rax
    00001d63: 	jmp	.Ltmp984 # Offset: 7523
.Ltmp889:
    00001d68: 	testq	%r13, %r13
    00001d6b: 	jne	.Ltmp985 # Offset: 7531
    00001d71: 	movq	0x8(%rsp), %rax
    00001d76: 	jmp	.Ltmp986 # Offset: 7542
.Ltmp925:
    00001d7b: 	testq	%r13, %r13
    00001d7e: 	jne	.Ltmp987 # Offset: 7550
    00001d84: 	movq	0x8(%rsp), %rax
    00001d89: 	jmp	.Ltmp988 # Offset: 7561
.Ltmp814:
    00001d8e: 	testq	%r13, %r13
    00001d91: 	jne	.Ltmp989 # Offset: 7569
    00001d97: 	movq	0x8(%rsp), %rax
    00001d9c: 	jmp	.Ltmp990 # Offset: 7580
.Ltmp808:
    00001da1: 	testq	%r13, %r13
    00001da4: 	jne	.Ltmp991 # Offset: 7588
    00001daa: 	movq	0x8(%rsp), %rax
    00001daf: 	jmp	.Ltmp992 # Offset: 7599
.Ltmp836:
    00001db4: 	testq	%r13, %r13
    00001db7: 	jne	.Ltmp993 # Offset: 7607
    00001dbd: 	movq	0x8(%rsp), %rax
    00001dc2: 	jmp	.Ltmp994 # Offset: 7618
.Ltmp820:
    00001dc7: 	testq	%r13, %r13
    00001dca: 	jne	.Ltmp995 # Offset: 7626
    00001dd0: 	movq	0x8(%rsp), %rax
    00001dd5: 	jmp	.Ltmp996 # Offset: 7637
.Ltmp835:
    00001dda: 	leaq	0x58(%rsp), %rsi
    00001ddf: 	xorl	%edx, %edx
    00001de1: 	movq	%r12, %rdi
    00001de4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7652
    00001de9: 	movq	%rax, 0x80(%rsp)
    00001df1: 	movq	%rax, %rdi
    00001df4: 	movq	0x58(%rsp), %rax
    00001df9: 	movq	%rax, 0x90(%rsp)
.Ltmp1030:
    00001e01: 	movq	%r13, %rdx
    00001e04: 	movq	%r14, %rsi
    00001e07: 	callq	memcpy@PLT # Offset: 7687
    00001e0c: 	movq	0x58(%rsp), %r13
    00001e11: 	movq	0x80(%rsp), %rax
    00001e19: 	jmp	.Ltmp994 # Offset: 7705
.Ltmp819:
    00001e1e: 	leaq	0x58(%rsp), %rsi
    00001e23: 	xorl	%edx, %edx
    00001e25: 	movq	%r12, %rdi
    00001e28: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7720
    00001e2d: 	movq	%rax, 0x80(%rsp)
    00001e35: 	movq	%rax, %rdi
    00001e38: 	movq	0x58(%rsp), %rax
    00001e3d: 	movq	%rax, 0x90(%rsp)
.Ltmp1031:
    00001e45: 	movq	%r13, %rdx
    00001e48: 	movq	%r14, %rsi
    00001e4b: 	callq	memcpy@PLT # Offset: 7755
    00001e50: 	movq	0x58(%rsp), %r13
    00001e55: 	movq	0x80(%rsp), %rax
    00001e5d: 	jmp	.Ltmp996 # Offset: 7773
.Ltmp813:
    00001e62: 	leaq	0x58(%rsp), %rsi
    00001e67: 	xorl	%edx, %edx
    00001e69: 	movq	%r12, %rdi
    00001e6c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7788
    00001e71: 	movq	%rax, 0x80(%rsp)
    00001e79: 	movq	%rax, %rdi
    00001e7c: 	movq	0x58(%rsp), %rax
    00001e81: 	movq	%rax, 0x90(%rsp)
.Ltmp1028:
    00001e89: 	movq	%r13, %rdx
    00001e8c: 	movq	%r14, %rsi
    00001e8f: 	callq	memcpy@PLT # Offset: 7823
    00001e94: 	movq	0x58(%rsp), %r13
    00001e99: 	movq	0x80(%rsp), %rax
    00001ea1: 	jmp	.Ltmp990 # Offset: 7841
.Ltmp807:
    00001ea6: 	leaq	0x58(%rsp), %rsi
    00001eab: 	xorl	%edx, %edx
    00001ead: 	movq	%r12, %rdi
    00001eb0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7856
    00001eb5: 	movq	%rax, 0x80(%rsp)
    00001ebd: 	movq	%rax, %rdi
    00001ec0: 	movq	0x58(%rsp), %rax
    00001ec5: 	movq	%rax, 0x90(%rsp)
.Ltmp1029:
    00001ecd: 	movq	%r13, %rdx
    00001ed0: 	movq	%r14, %rsi
    00001ed3: 	callq	memcpy@PLT # Offset: 7891
    00001ed8: 	movq	0x58(%rsp), %r13
    00001edd: 	movq	0x80(%rsp), %rax
    00001ee5: 	jmp	.Ltmp992 # Offset: 7909
.Ltmp888:
    00001eea: 	leaq	0x58(%rsp), %rsi
    00001eef: 	xorl	%edx, %edx
    00001ef1: 	movq	%r12, %rdi
    00001ef4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7924
    00001ef9: 	movq	%rax, 0x80(%rsp)
    00001f01: 	movq	%rax, %rdi
    00001f04: 	movq	0x58(%rsp), %rax
    00001f09: 	movq	%rax, 0x90(%rsp)
.Ltmp1026:
    00001f11: 	movq	%r13, %rdx
    00001f14: 	movq	%r14, %rsi
    00001f17: 	callq	memcpy@PLT # Offset: 7959
    00001f1c: 	movq	0x58(%rsp), %r13
    00001f21: 	movq	0x80(%rsp), %rax
    00001f29: 	jmp	.Ltmp986 # Offset: 7977
.Ltmp924:
    00001f2e: 	leaq	0x58(%rsp), %rsi
    00001f33: 	xorl	%edx, %edx
    00001f35: 	movq	%r12, %rdi
    00001f38: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7992
    00001f3d: 	movq	%rax, 0x80(%rsp)
    00001f45: 	movq	%rax, %rdi
    00001f48: 	movq	0x58(%rsp), %rax
    00001f4d: 	movq	%rax, 0x90(%rsp)
.Ltmp1027:
    00001f55: 	movq	%r13, %rdx
    00001f58: 	movq	%rbp, %rsi
    00001f5b: 	callq	memcpy@PLT # Offset: 8027
    00001f60: 	movq	0x58(%rsp), %r13
    00001f65: 	movq	0x80(%rsp), %rax
    00001f6d: 	jmp	.Ltmp988 # Offset: 8045
.Ltmp801:
    00001f72: 	leaq	0x58(%rsp), %rsi
    00001f77: 	leaq	0x80(%rsp), %rdi
    00001f7f: 	xorl	%edx, %edx
    00001f81: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8065
    00001f86: 	movq	%rax, 0x80(%rsp)
    00001f8e: 	movq	%rax, %rdi
    00001f91: 	movq	0x58(%rsp), %rax
    00001f96: 	movq	%rax, 0x90(%rsp)
.Ltmp1022:
    00001f9e: 	movq	%r12, %rdx
    00001fa1: 	movq	%r13, %rsi
    00001fa4: 	callq	memcpy@PLT # Offset: 8100
    00001fa9: 	movq	0x58(%rsp), %r12
    00001fae: 	movq	0x80(%rsp), %rax
    00001fb6: 	jmp	.Ltmp934 # Offset: 8118
.Ltmp906:
    00001fbb: 	leaq	0x58(%rsp), %rsi
    00001fc0: 	xorl	%edx, %edx
    00001fc2: 	movq	%r12, %rdi
    00001fc5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8133
    00001fca: 	movq	%rax, 0x80(%rsp)
    00001fd2: 	movq	%rax, %rdi
    00001fd5: 	movq	0x58(%rsp), %rax
    00001fda: 	movq	%rax, 0x90(%rsp)
.Ltmp1023:
    00001fe2: 	movq	%r13, %rdx
    00001fe5: 	movq	%r14, %rsi
    00001fe8: 	callq	memcpy@PLT # Offset: 8168
    00001fed: 	movq	0x58(%rsp), %r13
    00001ff2: 	movq	0x80(%rsp), %rax
    00001ffa: 	jmp	.Ltmp980 # Offset: 8186
.Ltmp852:
    00001fff: 	leaq	0x58(%rsp), %rsi
    00002004: 	xorl	%edx, %edx
    00002006: 	movq	%r12, %rdi
    00002009: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8201
    0000200e: 	movq	%rax, 0x80(%rsp)
    00002016: 	movq	%rax, %rdi
    00002019: 	movq	0x58(%rsp), %rax
    0000201e: 	movq	%rax, 0x90(%rsp)
.Ltmp1024:
    00002026: 	movq	%r13, %rdx
    00002029: 	movq	%r14, %rsi
    0000202c: 	callq	memcpy@PLT # Offset: 8236
    00002031: 	movq	0x58(%rsp), %r13
    00002036: 	movq	0x80(%rsp), %rax
    0000203e: 	jmp	.Ltmp982 # Offset: 8254
.Ltmp870:
    00002043: 	leaq	0x58(%rsp), %rsi
    00002048: 	xorl	%edx, %edx
    0000204a: 	movq	%r12, %rdi
    0000204d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8269
    00002052: 	movq	%rax, 0x80(%rsp)
    0000205a: 	movq	%rax, %rdi
    0000205d: 	movq	0x58(%rsp), %rax
    00002062: 	movq	%rax, 0x90(%rsp)
.Ltmp1025:
    0000206a: 	movq	%r13, %rdx
    0000206d: 	movq	%r14, %rsi
    00002070: 	callq	memcpy@PLT # Offset: 8304
    00002075: 	movq	0x58(%rsp), %r13
    0000207a: 	movq	0x80(%rsp), %rax
    00002082: 	jmp	.Ltmp984 # Offset: 8322
.Ltmp829:
    00002087: 	movq	-0x8(%rdx), %rax
    0000208b: 	addq	$0x200, %rax
    00002091: 	jmp	.Ltmp997 # Offset: 8337
.Ltmp824:
    00002096: 	movq	%r12, %rsi
    00002099: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000020a0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8352
    000020a5: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000020ac: 	jmp	.Ltmp998 # Offset: 8364
.Ltmp877:
    000020b1: 	movq	%r12, %rsi
    000020b4: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000020bb: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8379
    000020c0: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000020c7: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000020ce: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000020d5: 	jne	.Ltmp999 # Offset: 8405
.Ltmp882:
    000020db: 	movq	-0x8(%rdx), %rax
    000020df: 	addq	$0x200, %rax
    000020e5: 	jmp	.Ltmp999 # Offset: 8421
.Ltmp895:
    000020ea: 	movq	%r12, %rsi
    000020ed: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000020f4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8436
    000020f9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002100: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00002107: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000210e: 	jne	.Ltmp1000 # Offset: 8462
.Ltmp900:
    00002114: 	movq	-0x8(%rdx), %rax
    00002118: 	addq	$0x200, %rax
    0000211e: 	jmp	.Ltmp1000 # Offset: 8478
.Ltmp918:
    00002123: 	movq	-0x8(%rdx), %rax
    00002127: 	addq	$0x200, %rax
    0000212d: 	jmp	.Ltmp1001 # Offset: 8493
.Ltmp913:
    00002132: 	movq	%r12, %rsi
    00002135: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000213c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8508
    00002141: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002148: 	jmp	.Ltmp1002 # Offset: 8520
.Ltmp864:
    0000214d: 	movq	-0x8(%rdx), %rax
    00002151: 	addq	$0x200, %rax
    00002157: 	jmp	.Ltmp1003 # Offset: 8535
.Ltmp859:
    0000215c: 	movq	%r12, %rsi
    0000215f: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002166: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8550
    0000216b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002172: 	jmp	.Ltmp1004 # Offset: 8562
.Ltmp846:
    00002177: 	movq	-0x8(%rdx), %rax
    0000217b: 	addq	$0x200, %rax
    00002181: 	jmp	.Ltmp1005 # Offset: 8577
.Ltmp841:
    00002186: 	movq	%r12, %rsi
    00002189: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002190: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8592
    00002195: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000219c: 	jmp	.Ltmp1006 # Offset: 8604
.Ltmp845:
    000021a1: 	testq	%r13, %r13
    000021a4: 	je	.Ltmp1007 # Offset: 8612
    000021aa: 	jmp	.Ltmp1008 # Offset: 8618
    000021ac: 	nopl	(%rax) # Size: 4
.Ltmp844:
    000021b0: 	leaq	0x58(%rsp), %rsi
    000021b5: 	xorl	%edx, %edx
    000021b7: 	movq	%r14, %rdi
    000021ba: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8634
    000021bf: 	movq	%rax, (%r14)
    000021c2: 	movq	%rax, %rdi
    000021c5: 	movq	0x58(%rsp), %rax
    000021ca: 	movq	%rax, 0x10(%r14)
.Ltmp1008:
    000021ce: 	movq	%r13, %rdx
    000021d1: 	movq	%r15, %rsi
    000021d4: 	callq	memcpy@PLT # Offset: 8660
    000021d9: 	movq	0x58(%rsp), %r13
    000021de: 	movq	(%r14), %rdi
    000021e1: 	jmp	.Ltmp1007 # Offset: 8673
.Ltmp863:
    000021e6: 	testq	%r13, %r13
    000021e9: 	je	.Ltmp1009 # Offset: 8681
    000021ef: 	jmp	.Ltmp1010 # Offset: 8687
    000021f1: 	nopl	(%rax) # Size: 7
.Ltmp862:
    000021f8: 	leaq	0x58(%rsp), %rsi
    000021fd: 	xorl	%edx, %edx
    000021ff: 	movq	%r14, %rdi
    00002202: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8706
    00002207: 	movq	%rax, (%r14)
    0000220a: 	movq	%rax, %rdi
    0000220d: 	movq	0x58(%rsp), %rax
    00002212: 	movq	%rax, 0x10(%r14)
.Ltmp1010:
    00002216: 	movq	%r13, %rdx
    00002219: 	movq	%r15, %rsi
    0000221c: 	callq	memcpy@PLT # Offset: 8732
    00002221: 	movq	0x58(%rsp), %r13
    00002226: 	movq	(%r14), %rdi
    00002229: 	jmp	.Ltmp1009 # Offset: 8745
.Ltmp880:
    0000222e: 	leaq	0x58(%rsp), %rsi
    00002233: 	xorl	%edx, %edx
    00002235: 	movq	%r14, %rdi
    00002238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8760
    0000223d: 	movq	%rax, (%r14)
    00002240: 	movq	%rax, %rdi
    00002243: 	movq	0x58(%rsp), %rax
    00002248: 	movq	%rax, 0x10(%r14)
.Ltmp1014:
    0000224c: 	movq	%r13, %rdx
    0000224f: 	movq	%r15, %rsi
    00002252: 	callq	memcpy@PLT # Offset: 8786
    00002257: 	movq	0x58(%rsp), %r13
    0000225c: 	movq	(%r14), %rdi
    0000225f: 	jmp	.Ltmp1011 # Offset: 8799
.Ltmp828:
    00002264: 	testq	%r13, %r13
    00002267: 	je	.Ltmp1012 # Offset: 8807
    0000226d: 	jmp	.Ltmp1013 # Offset: 8813
    0000226f: 	nop # Size: 1
.Ltmp827:
    00002270: 	leaq	0x58(%rsp), %rsi
    00002275: 	xorl	%edx, %edx
    00002277: 	movq	%rbx, %rdi
    0000227a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8826
    0000227f: 	movq	%rax, (%rbx)
    00002282: 	movq	%rax, %rdi
    00002285: 	movq	0x58(%rsp), %rax
    0000228a: 	movq	%rax, 0x10(%rbx)
.Ltmp1013:
    0000228e: 	movq	%r13, %rdx
    00002291: 	movq	%r14, %rsi
    00002294: 	callq	memcpy@PLT # Offset: 8852
    00002299: 	movq	0x58(%rsp), %r13
    0000229e: 	movq	(%rbx), %rdi
    000022a1: 	jmp	.Ltmp1012 # Offset: 8865
.Ltmp881:
    000022a6: 	testq	%r13, %r13
    000022a9: 	je	.Ltmp1011 # Offset: 8873
    000022af: 	jmp	.Ltmp1014 # Offset: 8879
    000022b1: 	nopl	(%rax) # Size: 7
.Ltmp917:
    000022b8: 	testq	%r13, %r13
    000022bb: 	je	.Ltmp1015 # Offset: 8891
.Ltmp1018:
    000022c1: 	movq	%r13, %rdx
    000022c4: 	movq	%r15, %rsi
    000022c7: 	callq	memcpy@PLT # Offset: 8903
    000022cc: 	movq	0x58(%rsp), %r13
    000022d1: 	movq	(%r14), %rdi
    000022d4: 	jmp	.Ltmp1015 # Offset: 8916
.Ltmp899:
    000022d9: 	testq	%r13, %r13
    000022dc: 	je	.Ltmp1016 # Offset: 8924
    000022e2: 	jmp	.Ltmp1017 # Offset: 8930
    000022e4: 	nopl	(%rax) # Size: 4
.Ltmp898:
    000022e8: 	leaq	0x58(%rsp), %rsi
    000022ed: 	xorl	%edx, %edx
    000022ef: 	movq	%r14, %rdi
    000022f2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8946
    000022f7: 	movq	%rax, (%r14)
    000022fa: 	movq	%rax, %rdi
    000022fd: 	movq	0x58(%rsp), %rax
    00002302: 	movq	%rax, 0x10(%r14)
.Ltmp1017:
    00002306: 	movq	%r13, %rdx
    00002309: 	movq	%r15, %rsi
    0000230c: 	callq	memcpy@PLT # Offset: 8972
    00002311: 	movq	0x58(%rsp), %r13
    00002316: 	movq	(%r14), %rdi
    00002319: 	jmp	.Ltmp1016 # Offset: 8985
.Ltmp916:
    0000231e: 	leaq	0x58(%rsp), %rsi
    00002323: 	xorl	%edx, %edx
    00002325: 	movq	%r14, %rdi
    00002328: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9000
    0000232d: 	movq	%rax, (%r14)
    00002330: 	movq	%rax, %rdi
    00002333: 	movq	0x58(%rsp), %rax
    00002338: 	movq	%rax, 0x10(%r14)
    0000233c: 	jmp	.Ltmp1018 # Offset: 9020
.Ltmp943:
    0000233e: 	cmpl	$0x3ffffc0, %edx
    00002344: 	jle	.Ltmp1019 # Offset: 9028
    0000234a: 	jmp	.Ltmp1020 # Offset: 9034
    0000234f: 	nop # Size: 1
.Ltmp956:
    00002350: 	cmpl	$0x3ffffbf, %eax
    00002355: 	jle	.Ltmp1021 # Offset: 9045
    0000235b: 	jmp	.Ltmp976 # Offset: 9051
.Ltmp933:
    00002360: 	movq	0x8(%rsp), %rdi
    00002365: 	jmp	.Ltmp1022 # Offset: 9061
.Ltmp979:
    0000236a: 	movq	0x8(%rsp), %rdi
    0000236f: 	jmp	.Ltmp1023 # Offset: 9071
.Ltmp981:
    00002374: 	movq	0x8(%rsp), %rdi
    00002379: 	jmp	.Ltmp1024 # Offset: 9081
.Ltmp983:
    0000237e: 	movq	0x8(%rsp), %rdi
    00002383: 	jmp	.Ltmp1025 # Offset: 9091
.Ltmp985:
    00002388: 	movq	0x8(%rsp), %rdi
    0000238d: 	jmp	.Ltmp1026 # Offset: 9101
.Ltmp987:
    00002392: 	movq	0x8(%rsp), %rdi
    00002397: 	jmp	.Ltmp1027 # Offset: 9111
.Ltmp989:
    0000239c: 	movq	0x8(%rsp), %rdi
    000023a1: 	jmp	.Ltmp1028 # Offset: 9121
.Ltmp991:
    000023a6: 	movq	0x8(%rsp), %rdi
    000023ab: 	jmp	.Ltmp1029 # Offset: 9131
.Ltmp993:
    000023b0: 	movq	0x8(%rsp), %rdi
    000023b5: 	jmp	.Ltmp1030 # Offset: 9141
.Ltmp995:
    000023ba: 	movq	0x8(%rsp), %rdi
    000023bf: 	jmp	.Ltmp1031 # Offset: 9151
.Ltmp800:
    000023c4: 	leaq	DATAat0x12008(%rip), %rdi
    000023cb: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9163
.Ltmp803:
    000023d0: 	leaq	DATAat0x12288(%rip), %rdi
    000023d7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9175
.Ltmp806:
    000023dc: 	leaq	DATAat0x12008(%rip), %rdi
    000023e3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9187
.Ltmp809:
    000023e8: 	leaq	DATAat0x12288(%rip), %rdi
    000023ef: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9199
.Ltmp812:
    000023f4: 	leaq	DATAat0x12008(%rip), %rdi
    000023fb: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9211
.Ltmp815:
    00002400: 	leaq	DATAat0x12288(%rip), %rdi
    00002407: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9223
.Ltmp818:
    0000240c: 	leaq	DATAat0x12008(%rip), %rdi
    00002413: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9235
.Ltmp821:
    00002418: 	leaq	DATAat0x12288(%rip), %rdi
    0000241f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9247
.Ltmp826:
    00002424: 	leaq	DATAat0x12008(%rip), %rdi
    0000242b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9259
.Ltmp834:
    00002430: 	leaq	DATAat0x12008(%rip), %rdi
    00002437: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9271
.Ltmp837:
    0000243c: 	leaq	DATAat0x12288(%rip), %rdi
    00002443: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9283
.Ltmp843:
    00002448: 	leaq	DATAat0x12008(%rip), %rdi
    0000244f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9295
.Ltmp851:
    00002454: 	leaq	DATAat0x12008(%rip), %rdi
    0000245b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9307
.Ltmp854:
    00002460: 	leaq	DATAat0x12288(%rip), %rdi
    00002467: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9319
.Ltmp861:
    0000246c: 	leaq	DATAat0x12008(%rip), %rdi
    00002473: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9331
.Ltmp869:
    00002478: 	leaq	DATAat0x12008(%rip), %rdi
    0000247f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9343
.Ltmp872:
    00002484: 	leaq	DATAat0x12288(%rip), %rdi
    0000248b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9355
.Ltmp879:
    00002490: 	leaq	DATAat0x12008(%rip), %rdi
    00002497: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9367
.Ltmp887:
    0000249c: 	leaq	DATAat0x12008(%rip), %rdi
    000024a3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9379
.Ltmp890:
    000024a8: 	leaq	DATAat0x12288(%rip), %rdi
    000024af: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9391
.Ltmp897:
    000024b4: 	leaq	DATAat0x12008(%rip), %rdi
    000024bb: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9403
.Ltmp905:
    000024c0: 	leaq	DATAat0x12008(%rip), %rdi
    000024c7: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9415
.Ltmp908:
    000024cc: 	leaq	DATAat0x12288(%rip), %rdi
    000024d3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9427
.Ltmp915:
    000024d8: 	leaq	DATAat0x12008(%rip), %rdi
    000024df: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9439
.Ltmp923:
    000024e4: 	leaq	DATAat0x12008(%rip), %rdi
    000024eb: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9451
.Ltmp926:
    000024f0: 	leaq	DATAat0x12288(%rip), %rdi
    000024f7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9463
.Ltmp929:
    000024fc: 	callq	__stack_chk_fail@PLT # Offset: 9468
    00002501: 	endbr64
.Ltmp1033:
    00002505: 	movq	%rax, %rbp
    00002508: 	jmp	.Ltmp1032 # Offset: 9480
    0000250a: 	endbr64
    0000250e: 	jmp	.Ltmp1033 # Offset: 9486
    00002510: 	endbr64
    00002514: 	jmp	.Ltmp1033 # Offset: 9492
    00002516: 	endbr64
    0000251a: 	movq	%rax, %rbp
    0000251d: 	jmp	.Ltmp1034 # Offset: 9501
    0000251f: 	endbr64
    00002523: 	jmp	.Ltmp1033 # Offset: 9507
.Ltmp1032:
    00002525: 	movq	0x80(%rsp), %rdi
    0000252d: 	cmpq	0x8(%rsp), %rdi
    00002532: 	je	.Ltmp1034 # Offset: 9522
    00002534: 	movq	0x90(%rsp), %rax
    0000253c: 	leaq	0x1(%rax), %rsi
    00002540: 	callq	_ZdlPvm@PLT # Offset: 9536
.Ltmp1034:
    00002545: 	movq	0x60(%rsp), %rdi
    0000254a: 	cmpq	0x10(%rsp), %rdi
    0000254f: 	je	.Ltmp1035 # Offset: 9551
    00002551: 	movq	0x70(%rsp), %rax
    00002556: 	leaq	0x1(%rax), %rsi
    0000255a: 	callq	_ZdlPvm@PLT # Offset: 9562
.Ltmp1035:
    0000255f: 	movq	%rbp, %rdi
    00002562: 	callq	_Unwind_Resume@PLT # Offset: 9570
    00002567: 	endbr64
    0000256b: 	jmp	.Ltmp1033 # Offset: 9579
    0000256d: 	endbr64
    00002571: 	jmp	.Ltmp1033 # Offset: 9585
    00002573: 	endbr64
    00002577: 	jmp	.Ltmp1033 # Offset: 9591
    00002579: 	endbr64
    0000257d: 	jmp	.Ltmp1033 # Offset: 9597
    0000257f: 	endbr64
    00002583: 	jmp	.Ltmp1033 # Offset: 9603
    00002585: 	endbr64
    00002589: 	jmp	.Ltmp1033 # Offset: 9609
    0000258e: 	endbr64
    00002592: 	jmp	.Ltmp1033 # Offset: 9618
    00002597: 	endbr64
    0000259b: 	jmp	.Ltmp1033 # Offset: 9627
    000025a0: 	endbr64
    000025a4: 	jmp	.Ltmp1033 # Offset: 9636
    000025a9: 	endbr64
    000025ad: 	jmp	.Ltmp1033 # Offset: 9645
    000025b2: 	endbr64
    000025b6: 	jmp	.Ltmp1033 # Offset: 9654
    000025bb: 	endbr64
    000025bf: 	jmp	.Ltmp1033 # Offset: 9663
    000025c4: 	endbr64
    000025c8: 	jmp	.Ltmp1033 # Offset: 9672
    000025cd: 	endbr64
    000025d1: 	jmp	.Ltmp1033 # Offset: 9681
    000025d6: 	endbr64
    000025da: 	jmp	.Ltmp1033 # Offset: 9690
    000025df: 	endbr64
    000025e3: 	jmp	.Ltmp1033 # Offset: 9699
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIhEvv"

Binary Function "_Z11TestOneTypeItEvv" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0xd140
  Size        : 0x2570
  MaxSize     : 0x2570
  Offset      : 0xd140
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeItEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xb8, %rsp
    00000015: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm7
    0000001d: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0xa8(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000003e: 	movaps	%xmm7, 0x20(%rsp)
    00000043: 	movq	%xmm7, %rbp
    00000048: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm7
    00000050: 	movq	%rax, 0x8(%rsp)
    00000055: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000005c: 	movhlps	%xmm7, %xmm6
    0000005f: 	movaps	%xmm7, 0x30(%rsp)
    00000064: 	movq	%xmm6, %rbx
    00000069: 	movq	%rax, 0x18(%rsp)
    0000006e: 	leaq	0x8(%rbx), %r12
    00000072: 	movq	%xmm6, 0x40(%rsp)
    00000078: 	movq	%xmm7, 0x10(%rsp)
    0000007e: 	cmpq	%r12, %rax
    00000081: 	jbe	.Ltmp1036 # Offset: 129
    00000083: 	movq	%rbp, 0x48(%rsp)
    00000088: 	movq	%r12, %r13
    0000008b: 	movq	%rax, %r15
    0000008e: 	nop # Size: 2
.Ltmp1039:
    00000090: 	movq	(%r13), %rbp
    00000094: 	leaq	0x200(%rbp), %rbx
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1038:
    000000a0: 	movq	(%rbp), %rdi
    000000a4: 	leaq	0x10(%rbp), %rdx
    000000a8: 	cmpq	%rdx, %rdi
    000000ab: 	je	.Ltmp1037 # Offset: 171
    000000b1: 	movq	0x10(%rbp), %rax
    000000b5: 	addq	$0x20, %rbp
    000000b9: 	leaq	0x1(%rax), %rsi
    000000bd: 	callq	_ZdlPvm@PLT # Offset: 189
    000000c2: 	cmpq	%rbp, %rbx
    000000c5: 	jne	.Ltmp1038 # Offset: 197
    000000c7: 	addq	$0x8, %r13
    000000cb: 	cmpq	%r13, %r15
    000000ce: 	ja	.Ltmp1039 # Offset: 206
.Ltmp1183:
    000000d0: 	movq	0x48(%rsp), %rbp
.Ltmp1036:
    000000d5: 	movq	0x40(%rsp), %rbx
    000000da: 	cmpq	%rbx, 0x18(%rsp)
    000000df: 	jne	.Ltmp1040 # Offset: 223
    000000e1: 	jmp	.Ltmp1041 # Offset: 225
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1043:
    000000f0: 	movq	(%rbp), %rdi
    000000f4: 	leaq	0x10(%rbp), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp1042 # Offset: 251
    000000fd: 	movq	0x10(%rbp), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp1042:
    0000010a: 	addq	$0x20, %rbp
.Ltmp1040:
    0000010e: 	cmpq	0x10(%rsp), %rbp
    00000113: 	jne	.Ltmp1043 # Offset: 275
    00000115: 	cmpq	%r14, 0x8(%rsp)
    0000011a: 	je	.Ltmp1044 # Offset: 282
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp1046:
    00000120: 	movq	(%r14), %rdi
    00000123: 	leaq	0x10(%r14), %rax
    00000127: 	cmpq	%rax, %rdi
    0000012a: 	je	.Ltmp1045 # Offset: 298
    0000012c: 	movq	0x10(%r14), %rax
    00000130: 	leaq	0x1(%rax), %rsi
    00000134: 	callq	_ZdlPvm@PLT # Offset: 308
.Ltmp1045:
    00000139: 	addq	$0x20, %r14
    0000013d: 	cmpq	%r14, 0x8(%rsp)
    00000142: 	jne	.Ltmp1046 # Offset: 322
.Ltmp1044:
    00000144: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000014b: 	leaq	0x8(%rax), %rbx
    0000014f: 	cmpq	%r12, %rbx
    00000152: 	jbe	.Ltmp1047 # Offset: 338
    00000154: 	nopl	(%rax) # Size: 4
.Ltmp1048:
    00000158: 	movq	(%r12), %rdi
    0000015c: 	movl	$0x200, %esi
    00000161: 	addq	$0x8, %r12
    00000165: 	callq	_ZdlPvm@PLT # Offset: 357
    0000016a: 	cmpq	%r12, %rbx
    0000016d: 	ja	.Ltmp1048 # Offset: 365
.Ltmp1047:
    0000016f: 	movdqa	0x20(%rsp), %xmm7
    00000175: 	leaq	0x70(%rsp), %rax
    0000017a: 	movl	$0x4000000, %edi
    0000017f: 	movq	$0x8, 0x68(%rsp)
    00000188: 	movq	%rax, 0x10(%rsp)
    0000018d: 	movaps	%xmm7, "_ZL7gLabels/1"+48(%rip)
    00000194: 	movdqa	0x30(%rsp), %xmm7
    0000019a: 	movq	%rax, 0x60(%rsp)
    0000019f: 	movabsq	$0x745f3631746e6975, %rax
    000001a9: 	movq	%rax, 0x70(%rsp)
    000001ae: 	movb	$0x0, 0x78(%rsp)
    000001b3: 	movaps	%xmm7, "_ZL7gLabels/1"+64(%rip)
    000001ba: 	callq	_Znam@PLT # Offset: 442
    000001bf: 	movq	0x60(%rsp), %r13
    000001c4: 	movq	0x68(%rsp), %r12
    000001c9: 	movq	%rax, %rbp
    000001cc: 	leaq	0x90(%rsp), %rax
    000001d4: 	movq	%rax, 0x8(%rsp)
    000001d9: 	movq	%rax, 0x80(%rsp)
    000001e1: 	movq	%r13, %rax
    000001e4: 	addq	%r12, %rax
    000001e7: 	je	.Ltmp1049 # Offset: 487
    000001e9: 	testq	%r13, %r13
    000001ec: 	je	.Ltmp1050 # Offset: 492
.Ltmp1049:
    000001f2: 	movq	%r12, 0x58(%rsp)
    000001f7: 	cmpq	$0xf, %r12
    000001fb: 	ja	.Ltmp1051 # Offset: 507
    00000201: 	cmpq	$0x1, %r12
    00000205: 	jne	.Ltmp1052 # Offset: 517
    0000020b: 	movzbl	(%r13), %eax
    00000210: 	movb	%al, 0x90(%rsp)
    00000217: 	movq	0x8(%rsp), %rax
.Ltmp1185:
    0000021c: 	movq	%r12, 0x88(%rsp)
    00000224: 	movb	$0x0, (%rax,%r12)
    00000229: 	movabsq	$0x3fffffffffffffff, %rax
    00000233: 	subq	0x88(%rsp), %rax
    0000023b: 	cmpq	$0x6, %rax
    0000023f: 	jbe	.Ltmp1053 # Offset: 575
    00000245: 	leaq	0x80(%rsp), %r12
    0000024d: 	movl	$0x7, %edx
    00000252: 	leaq	DATAat0x1229d(%rip), %rsi
    00000259: 	movq	%r12, %rdi
    0000025c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 604
    00000261: 	movzbl	init_value(%rip), %edx
    00000268: 	movq	%r12, %rcx
    0000026b: 	movl	$0x2000000, %esi
    00000270: 	movq	%rbp, %rdi
    00000273: 	callq	_Z19test_library_memsetItEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 627
    00000278: 	movq	0x80(%rsp), %rdi
    00000280: 	cmpq	0x8(%rsp), %rdi
    00000285: 	je	.Ltmp1054 # Offset: 645
    00000287: 	movq	0x90(%rsp), %rax
    0000028f: 	leaq	0x1(%rax), %rsi
    00000293: 	callq	_ZdlPvm@PLT # Offset: 659
.Ltmp1054:
    00000298: 	movq	0x8(%rsp), %rax
    0000029d: 	movq	0x60(%rsp), %r14
    000002a2: 	movq	0x68(%rsp), %r13
    000002a7: 	movq	%rax, 0x80(%rsp)
    000002af: 	movq	%r14, %rax
    000002b2: 	addq	%r13, %rax
    000002b5: 	je	.Ltmp1055 # Offset: 693
    000002b7: 	testq	%r14, %r14
    000002ba: 	je	.Ltmp1056 # Offset: 698
.Ltmp1055:
    000002c0: 	movq	%r13, 0x58(%rsp)
    000002c5: 	cmpq	$0xf, %r13
    000002c9: 	ja	.Ltmp1057 # Offset: 713
    000002cf: 	cmpq	$0x1, %r13
    000002d3: 	jne	.Ltmp1058 # Offset: 723
    000002d9: 	movzbl	(%r14), %eax
    000002dd: 	movb	%al, 0x90(%rsp)
    000002e4: 	movq	0x8(%rsp), %rax
.Ltmp1236:
    000002e9: 	movq	%r13, 0x88(%rsp)
    000002f1: 	movb	$0x0, (%rax,%r13)
    000002f6: 	movabsq	$0x3fffffffffffffff, %rax
    00000300: 	subq	0x88(%rsp), %rax
    00000308: 	cmpq	$0x9, %rax
    0000030c: 	jbe	.Ltmp1059 # Offset: 780
    00000312: 	movl	$0xa, %edx
    00000317: 	leaq	DATAat0x122a5(%rip), %rsi
    0000031e: 	movq	%r12, %rdi
    00000321: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 801
    00000326: 	movzbl	init_value(%rip), %edx
    0000032d: 	movq	%r12, %rcx
    00000330: 	movl	$0x2000000, %esi
    00000335: 	movq	%rbp, %rdi
    00000338: 	callq	_Z13test_std_fillItEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 824
    0000033d: 	movq	0x80(%rsp), %rdi
    00000345: 	cmpq	0x8(%rsp), %rdi
    0000034a: 	je	.Ltmp1060 # Offset: 842
    0000034c: 	movq	0x90(%rsp), %rax
    00000354: 	leaq	0x1(%rax), %rsi
    00000358: 	callq	_ZdlPvm@PLT # Offset: 856
.Ltmp1060:
    0000035d: 	movq	0x8(%rsp), %rax
    00000362: 	movq	0x60(%rsp), %r14
    00000367: 	movq	0x68(%rsp), %r13
    0000036c: 	movq	%rax, 0x80(%rsp)
    00000374: 	movq	%r14, %rax
    00000377: 	addq	%r13, %rax
    0000037a: 	je	.Ltmp1061 # Offset: 890
    0000037c: 	testq	%r14, %r14
    0000037f: 	je	.Ltmp1062 # Offset: 895
.Ltmp1061:
    00000385: 	movq	%r13, 0x58(%rsp)
    0000038a: 	cmpq	$0xf, %r13
    0000038e: 	ja	.Ltmp1063 # Offset: 910
    00000394: 	cmpq	$0x1, %r13
    00000398: 	jne	.Ltmp1064 # Offset: 920
    0000039e: 	movzbl	(%r14), %eax
    000003a2: 	movb	%al, 0x90(%rsp)
    000003a9: 	movq	0x8(%rsp), %rax
.Ltmp1234:
    000003ae: 	movq	%r13, 0x88(%rsp)
    000003b6: 	movb	$0x0, (%rax,%r13)
    000003bb: 	movabsq	$0x3fffffffffffffff, %rax
    000003c5: 	subq	0x88(%rsp), %rax
    000003cd: 	cmpq	$0xd, %rax
    000003d1: 	jbe	.Ltmp1065 # Offset: 977
    000003d7: 	movl	$0xe, %edx
    000003dc: 	leaq	DATAat0x122b0(%rip), %rsi
    000003e3: 	movq	%r12, %rdi
    000003e6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 998
    000003eb: 	movzbl	init_value(%rip), %edx
    000003f2: 	movq	%r12, %rcx
    000003f5: 	movl	$0x2000000, %esi
    000003fa: 	movq	%rbp, %rdi
    000003fd: 	callq	_Z18test_iterator_fillItEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1021
    00000402: 	movq	0x80(%rsp), %rdi
    0000040a: 	cmpq	0x8(%rsp), %rdi
    0000040f: 	je	.Ltmp1066 # Offset: 1039
    00000411: 	movq	0x90(%rsp), %rax
    00000419: 	leaq	0x1(%rax), %rsi
    0000041d: 	callq	_ZdlPvm@PLT # Offset: 1053
.Ltmp1066:
    00000422: 	movq	0x8(%rsp), %rax
    00000427: 	movq	0x60(%rsp), %r14
    0000042c: 	movq	0x68(%rsp), %r13
    00000431: 	movq	%rax, 0x80(%rsp)
    00000439: 	movq	%r14, %rax
    0000043c: 	addq	%r13, %rax
    0000043f: 	je	.Ltmp1067 # Offset: 1087
    00000441: 	testq	%r14, %r14
    00000444: 	je	.Ltmp1068 # Offset: 1092
.Ltmp1067:
    0000044a: 	movq	%r13, 0x58(%rsp)
    0000044f: 	cmpq	$0xf, %r13
    00000453: 	ja	.Ltmp1069 # Offset: 1107
    00000459: 	cmpq	$0x1, %r13
    0000045d: 	jne	.Ltmp1070 # Offset: 1117
    00000463: 	movzbl	(%r14), %eax
    00000467: 	movb	%al, 0x90(%rsp)
    0000046e: 	movq	0x8(%rsp), %rax
.Ltmp1240:
    00000473: 	movq	%r13, 0x88(%rsp)
    0000047b: 	movb	$0x0, (%rax,%r13)
    00000480: 	movabsq	$0x3fffffffffffffff, %rax
    0000048a: 	subq	0x88(%rsp), %rax
    00000492: 	cmpq	$0xd, %rax
    00000496: 	jbe	.Ltmp1071 # Offset: 1174
    0000049c: 	movl	$0xe, %edx
    000004a1: 	leaq	DATAat0x122bf(%rip), %rsi
    000004a8: 	movq	%r12, %rdi
    000004ab: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1195
    000004b0: 	movzbl	init_value(%rip), %eax
    000004b7: 	movl	%eax, %ebx
    000004b9: 	shll	$0x8, %ebx
    000004bc: 	addl	%eax, %ebx
    000004be: 	callq	clock@PLT # Offset: 1214
    000004c3: 	movd	%ebx, %xmm0
    000004c7: 	movl	iterations(%rip), %esi
    000004cd: 	xorl	%ecx, %ecx
    000004cf: 	punpcklwd	%xmm0, %xmm0
    000004d3: 	movq	%rax, start_time(%rip)
    000004da: 	leaq	0x4000000(%rbp), %rdx
    000004e1: 	pshufd	$0x0, %xmm0, %xmm0
    000004e6: 	testl	%esi, %esi
    000004e8: 	jle	.Ltmp1072 # Offset: 1256
    000004ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1074:
    000004f0: 	movq	%rbp, %rax
    000004f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1073:
    000004f8: 	movups	%xmm0, (%rax)
    000004fb: 	addq	$0x10, %rax
    000004ff: 	cmpq	%rax, %rdx
    00000502: 	jne	.Ltmp1073 # Offset: 1282
    00000504: 	addl	$0x1, %ecx
    00000507: 	cmpl	%esi, %ecx
    00000509: 	jne	.Ltmp1074 # Offset: 1289
.Ltmp1072:
    0000050b: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000512: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000519: 	subq	$0x20, %rax
    0000051d: 	cmpq	%rax, %rbx
    00000520: 	je	.Ltmp1075 # Offset: 1312
    00000526: 	leaq	0x10(%rbx), %rdi
    0000052a: 	movq	0x88(%rsp), %r13
    00000532: 	movq	%rdi, (%rbx)
    00000535: 	movq	0x80(%rsp), %r14
    0000053d: 	movq	%r14, %rax
    00000540: 	addq	%r13, %rax
    00000543: 	je	.Ltmp1076 # Offset: 1347
    00000545: 	testq	%r14, %r14
    00000548: 	je	.Ltmp1077 # Offset: 1352
.Ltmp1076:
    0000054e: 	movq	%r13, 0x58(%rsp)
    00000553: 	cmpq	$0xf, %r13
    00000557: 	ja	.Ltmp1078 # Offset: 1367
    0000055d: 	cmpq	$0x1, %r13
    00000561: 	jne	.Ltmp1079 # Offset: 1377
    00000567: 	movzbl	(%r14), %eax
    0000056b: 	movb	%al, 0x10(%rbx)
.Ltmp1267:
    0000056e: 	movq	%r13, 0x8(%rbx)
    00000572: 	movb	$0x0, (%rdi,%r13)
    00000577: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000057e: 	addq	$0x20, %rax
    00000582: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1251:
    00000589: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000590: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000597: 	je	.Ltmp1080 # Offset: 1431
.Ltmp1249:
    0000059d: 	movq	-0x20(%rax), %r13
    000005a1: 	callq	clock@PLT # Offset: 1441
    000005a6: 	pxor	%xmm0, %xmm0
    000005aa: 	movq	%rax, end_time(%rip)
    000005b1: 	movq	%r13, %rdi
    000005b4: 	subq	start_time(%rip), %rax
    000005bb: 	cvtsi2sd	%rax, %xmm0
    000005c0: 	divsd	DATAat0x12360(%rip), %xmm0
    000005c8: 	callq	_Z13record_resultdPKc # Offset: 1480
    000005cd: 	movq	%rbp, %r15
    000005d0: 	pxor	%xmm1, %xmm1
    000005d4: 	pxor	%xmm7, %xmm7
    000005d8: 	movq	%rbp, %rax
    000005db: 	leaq	0x4000000(%rbp), %rbx
    000005e2: 	pxor	%xmm6, %xmm6
    000005e6: 	pxor	%xmm5, %xmm5
    000005ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1081:
    000005f0: 	movdqu	(%rax), %xmm0
    000005f4: 	addq	$0x10, %rax
    000005f8: 	movdqa	%xmm0, %xmm3
    000005fc: 	punpckhbw	%xmm7, %xmm0
    00000600: 	punpcklbw	%xmm7, %xmm3
    00000604: 	movdqa	%xmm0, %xmm4
    00000608: 	punpckhwd	%xmm6, %xmm0
    0000060c: 	movdqa	%xmm3, %xmm2
    00000610: 	punpckhwd	%xmm6, %xmm3
    00000614: 	punpcklwd	%xmm6, %xmm4
    00000618: 	punpcklwd	%xmm6, %xmm2
    0000061c: 	movdqa	%xmm2, %xmm8
    00000621: 	punpckldq	%xmm5, %xmm2
    00000625: 	punpckhdq	%xmm5, %xmm8
    0000062a: 	paddq	%xmm8, %xmm2
    0000062f: 	movdqa	%xmm3, %xmm8
    00000634: 	punpckldq	%xmm5, %xmm3
    00000638: 	punpckhdq	%xmm5, %xmm8
    0000063d: 	paddq	%xmm8, %xmm3
    00000642: 	paddq	%xmm3, %xmm2
    00000646: 	movdqa	%xmm4, %xmm3
    0000064a: 	punpckldq	%xmm5, %xmm4
    0000064e: 	punpckhdq	%xmm5, %xmm3
    00000652: 	paddq	%xmm3, %xmm4
    00000656: 	movdqa	%xmm0, %xmm3
    0000065a: 	punpckhdq	%xmm5, %xmm0
    0000065e: 	punpckldq	%xmm5, %xmm3
    00000662: 	paddq	%xmm0, %xmm1
    00000666: 	paddq	%xmm3, %xmm4
    0000066a: 	paddq	%xmm4, %xmm2
    0000066e: 	paddq	%xmm2, %xmm1
    00000672: 	cmpq	%rbx, %rax
    00000675: 	jne	.Ltmp1081 # Offset: 1653
    0000067b: 	movdqa	%xmm1, %xmm0
    0000067f: 	movzbl	init_value(%rip), %edx
    00000686: 	movq	0x80(%rsp), %rdi
    0000068e: 	psrldq	$0x8, %xmm0
    00000693: 	paddq	%xmm0, %xmm1
    00000697: 	shlq	$0x1a, %rdx
    0000069b: 	movq	%xmm1, %rax
    000006a0: 	cmpq	%rax, %rdx
    000006a3: 	je	.Ltmp1082 # Offset: 1699
    000006a5: 	movq	%rdi, %rdx
    000006a8: 	leaq	DATAat0x12278(%rip), %rsi
    000006af: 	movl	$0x1, %edi
    000006b4: 	xorl	%eax, %eax
    000006b6: 	callq	__printf_chk@PLT # Offset: 1718
    000006bb: 	movq	0x80(%rsp), %rdi
.Ltmp1082:
    000006c3: 	cmpq	0x8(%rsp), %rdi
    000006c8: 	je	.Ltmp1083 # Offset: 1736
    000006ca: 	movq	0x90(%rsp), %rax
    000006d2: 	leaq	0x1(%rax), %rsi
    000006d6: 	callq	_ZdlPvm@PLT # Offset: 1750
.Ltmp1083:
    000006db: 	movq	0x8(%rsp), %rax
    000006e0: 	movq	0x60(%rsp), %r14
    000006e5: 	movq	0x68(%rsp), %r13
    000006ea: 	movq	%rax, 0x80(%rsp)
    000006f2: 	movq	%r14, %rax
    000006f5: 	addq	%r13, %rax
    000006f8: 	je	.Ltmp1084 # Offset: 1784
    000006fa: 	testq	%r14, %r14
    000006fd: 	je	.Ltmp1085 # Offset: 1789
.Ltmp1084:
    00000703: 	movq	%r13, 0x58(%rsp)
    00000708: 	cmpq	$0xf, %r13
    0000070c: 	ja	.Ltmp1086 # Offset: 1804
    00000712: 	cmpq	$0x1, %r13
    00000716: 	jne	.Ltmp1087 # Offset: 1814
    0000071c: 	movzbl	(%r14), %eax
    00000720: 	movb	%al, 0x90(%rsp)
    00000727: 	movq	0x8(%rsp), %rax
.Ltmp1238:
    0000072c: 	movq	%r13, 0x88(%rsp)
    00000734: 	movb	$0x0, (%rax,%r13)
    00000739: 	movabsq	$0x3fffffffffffffff, %rax
    00000743: 	subq	0x88(%rsp), %rax
    0000074b: 	cmpq	$0x16, %rax
    0000074f: 	jbe	.Ltmp1088 # Offset: 1871
    00000755: 	movl	$0x17, %edx
    0000075a: 	leaq	DATAat0x122ce(%rip), %rsi
    00000761: 	movq	%r12, %rdi
    00000764: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1892
    00000769: 	movzbl	init_value(%rip), %eax
    00000770: 	movl	%eax, %r13d
    00000773: 	shll	$0x8, %r13d
    00000777: 	addl	%eax, %r13d
    0000077a: 	callq	clock@PLT # Offset: 1914
    0000077f: 	movd	%r13d, %xmm0
    00000784: 	movl	iterations(%rip), %ecx
    0000078a: 	xorl	%edx, %edx
    0000078c: 	punpcklwd	%xmm0, %xmm0
    00000790: 	movq	%rax, start_time(%rip)
    00000797: 	pshufd	$0x0, %xmm0, %xmm0
    0000079c: 	testl	%ecx, %ecx
    0000079e: 	jle	.Ltmp1089 # Offset: 1950
.Ltmp1091:
    000007a0: 	movq	%rbp, %rax
    000007a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1090:
    000007a8: 	movups	%xmm0, (%rax)
    000007ab: 	addq	$0x10, %rax
    000007af: 	cmpq	%rbx, %rax
    000007b2: 	jne	.Ltmp1090 # Offset: 1970
    000007b4: 	addl	$0x1, %edx
    000007b7: 	cmpl	%ecx, %edx
    000007b9: 	jne	.Ltmp1091 # Offset: 1977
.Ltmp1089:
    000007bb: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000007c2: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000007c9: 	subq	$0x20, %rax
    000007cd: 	cmpq	%rax, %r14
    000007d0: 	je	.Ltmp1092 # Offset: 2000
    000007d6: 	leaq	0x10(%r14), %rdi
    000007da: 	movq	0x88(%rsp), %r13
    000007e2: 	movq	%rdi, (%r14)
    000007e5: 	movq	0x80(%rsp), %rax
    000007ed: 	movq	%rax, %rcx
    000007f0: 	movq	%rax, 0x18(%rsp)
    000007f5: 	addq	%r13, %rcx
    000007f8: 	je	.Ltmp1093 # Offset: 2040
    000007fa: 	testq	%rax, %rax
    000007fd: 	je	.Ltmp1094 # Offset: 2045
.Ltmp1093:
    00000803: 	movq	%r13, 0x58(%rsp)
    00000808: 	cmpq	$0xf, %r13
    0000080c: 	ja	.Ltmp1095 # Offset: 2060
    00000812: 	cmpq	$0x1, %r13
    00000816: 	jne	.Ltmp1096 # Offset: 2070
    0000081c: 	movq	0x18(%rsp), %rax
    00000821: 	movzbl	(%rax), %eax
    00000824: 	movb	%al, 0x10(%r14)
.Ltmp1257:
    00000828: 	movq	%r13, 0x8(%r14)
    0000082c: 	movb	$0x0, (%rdi,%r13)
    00000831: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000838: 	addq	$0x20, %rax
    0000083c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1256:
    00000843: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000084a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000851: 	je	.Ltmp1097 # Offset: 2129
.Ltmp1255:
    00000857: 	movq	-0x20(%rax), %r13
    0000085b: 	callq	clock@PLT # Offset: 2139
    00000860: 	pxor	%xmm0, %xmm0
    00000864: 	movq	%rax, end_time(%rip)
    0000086b: 	movq	%r13, %rdi
    0000086e: 	subq	start_time(%rip), %rax
    00000875: 	cvtsi2sd	%rax, %xmm0
    0000087a: 	divsd	DATAat0x12360(%rip), %xmm0
    00000882: 	callq	_Z13record_resultdPKc # Offset: 2178
    00000887: 	pxor	%xmm1, %xmm1
    0000088b: 	pxor	%xmm7, %xmm7
    0000088f: 	pxor	%xmm6, %xmm6
    00000893: 	movq	%rbp, %rax
    00000896: 	pxor	%xmm5, %xmm5
    0000089a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1098:
    000008a0: 	movdqu	(%rax), %xmm0
    000008a4: 	addq	$0x10, %rax
    000008a8: 	movdqa	%xmm0, %xmm3
    000008ac: 	punpckhbw	%xmm7, %xmm0
    000008b0: 	punpcklbw	%xmm7, %xmm3
    000008b4: 	movdqa	%xmm0, %xmm4
    000008b8: 	punpckhwd	%xmm6, %xmm0
    000008bc: 	movdqa	%xmm3, %xmm2
    000008c0: 	punpckhwd	%xmm6, %xmm3
    000008c4: 	punpcklwd	%xmm6, %xmm4
    000008c8: 	punpcklwd	%xmm6, %xmm2
    000008cc: 	movdqa	%xmm2, %xmm8
    000008d1: 	punpckldq	%xmm5, %xmm2
    000008d5: 	punpckhdq	%xmm5, %xmm8
    000008da: 	paddq	%xmm8, %xmm2
    000008df: 	movdqa	%xmm3, %xmm8
    000008e4: 	punpckldq	%xmm5, %xmm3
    000008e8: 	punpckhdq	%xmm5, %xmm8
    000008ed: 	paddq	%xmm8, %xmm3
    000008f2: 	paddq	%xmm3, %xmm2
    000008f6: 	movdqa	%xmm4, %xmm3
    000008fa: 	punpckldq	%xmm5, %xmm4
    000008fe: 	punpckhdq	%xmm5, %xmm3
    00000902: 	paddq	%xmm3, %xmm4
    00000906: 	movdqa	%xmm0, %xmm3
    0000090a: 	punpckhdq	%xmm5, %xmm0
    0000090e: 	punpckldq	%xmm5, %xmm3
    00000912: 	paddq	%xmm0, %xmm1
    00000916: 	paddq	%xmm3, %xmm4
    0000091a: 	paddq	%xmm4, %xmm2
    0000091e: 	paddq	%xmm2, %xmm1
    00000922: 	cmpq	%rbx, %rax
    00000925: 	jne	.Ltmp1098 # Offset: 2341
    0000092b: 	movdqa	%xmm1, %xmm0
    0000092f: 	movzbl	init_value(%rip), %edx
    00000936: 	movq	0x80(%rsp), %rdi
    0000093e: 	psrldq	$0x8, %xmm0
    00000943: 	paddq	%xmm0, %xmm1
    00000947: 	shlq	$0x1a, %rdx
    0000094b: 	movq	%xmm1, %rax
    00000950: 	cmpq	%rax, %rdx
    00000953: 	je	.Ltmp1099 # Offset: 2387
    00000955: 	movq	%rdi, %rdx
    00000958: 	leaq	DATAat0x12278(%rip), %rsi
    0000095f: 	movl	$0x1, %edi
    00000964: 	xorl	%eax, %eax
    00000966: 	callq	__printf_chk@PLT # Offset: 2406
    0000096b: 	movq	0x80(%rsp), %rdi
.Ltmp1099:
    00000973: 	cmpq	0x8(%rsp), %rdi
    00000978: 	je	.Ltmp1100 # Offset: 2424
    0000097a: 	movq	0x90(%rsp), %rax
    00000982: 	leaq	0x1(%rax), %rsi
    00000986: 	callq	_ZdlPvm@PLT # Offset: 2438
.Ltmp1100:
    0000098b: 	movq	0x8(%rsp), %rax
    00000990: 	movq	0x60(%rsp), %r14
    00000995: 	movq	0x68(%rsp), %r13
    0000099a: 	movq	%rax, 0x80(%rsp)
    000009a2: 	movq	%r14, %rax
    000009a5: 	addq	%r13, %rax
    000009a8: 	je	.Ltmp1101 # Offset: 2472
    000009aa: 	testq	%r14, %r14
    000009ad: 	je	.Ltmp1102 # Offset: 2477
.Ltmp1101:
    000009b3: 	movq	%r13, 0x58(%rsp)
    000009b8: 	cmpq	$0xf, %r13
    000009bc: 	ja	.Ltmp1103 # Offset: 2492
    000009c2: 	cmpq	$0x1, %r13
    000009c6: 	jne	.Ltmp1104 # Offset: 2502
    000009cc: 	movzbl	(%r14), %eax
    000009d0: 	movb	%al, 0x90(%rsp)
    000009d7: 	movq	0x8(%rsp), %rax
.Ltmp1230:
    000009dc: 	movq	%r13, 0x88(%rsp)
    000009e4: 	movb	$0x0, (%rax,%r13)
    000009e9: 	movabsq	$0x3fffffffffffffff, %rax
    000009f3: 	subq	0x88(%rsp), %rax
    000009fb: 	cmpq	$0x13, %rax
    000009ff: 	jbe	.Ltmp1105 # Offset: 2559
    00000a05: 	movl	$0x14, %edx
    00000a0a: 	leaq	DATAat0x122e6(%rip), %rsi
    00000a11: 	movq	%r12, %rdi
    00000a14: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2580
    00000a19: 	movzbl	init_value(%rip), %r13d
    00000a21: 	callq	clock@PLT # Offset: 2593
    00000a26: 	movl	iterations(%rip), %r10d
    00000a2d: 	movq	%rax, start_time(%rip)
    00000a34: 	testl	%r10d, %r10d
    00000a37: 	jle	.Ltmp1106 # Offset: 2615
    00000a39: 	movzbl	%r13b, %eax
    00000a3d: 	movzbl	%r13b, %r11d
    00000a41: 	xorl	%esi, %esi
    00000a43: 	movl	%eax, %r9d
    00000a46: 	shll	$0x8, %r9d
    00000a4a: 	orl	%eax, %r9d
    00000a4d: 	movl	%r9d, %eax
    00000a50: 	shll	$0x10, %eax
    00000a53: 	orl	%eax, %r9d
    00000a56: 	movabsq	$0x101010101010101, %rax
    00000a60: 	imulq	%rax, %r11
    00000a64: 	movd	%r9d, %xmm7
    00000a69: 	pshufd	$0x0, %xmm7, %xmm0
    00000a6e: 	nop # Size: 2
.Ltmp1109:
    00000a70: 	movq	%rbp, %rdx
    00000a73: 	xorl	%eax, %eax
    00000a75: 	nopl	(%rax) # Size: 3
.Ltmp1108:
    00000a78: 	testb	$0x3, %dl
    00000a7b: 	je	.Ltmp1107 # Offset: 2683
    00000a81: 	addl	$0x1, %eax
    00000a84: 	movb	%r13b, (%rdx)
    00000a87: 	addq	$0x1, %rdx
    00000a8b: 	cmpl	$0x4000000, %eax
    00000a90: 	jne	.Ltmp1108 # Offset: 2704
.Ltmp1220:
    00000a92: 	addl	$0x1, %esi
    00000a95: 	cmpl	%r10d, %esi
    00000a98: 	jne	.Ltmp1109 # Offset: 2712
.Ltmp1106:
    00000a9a: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000aa1: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00000aa8: 	subq	$0x20, %rax
    00000aac: 	cmpq	%rax, %r14
    00000aaf: 	je	.Ltmp1110 # Offset: 2735
    00000ab5: 	leaq	0x10(%r14), %rdi
    00000ab9: 	movq	0x88(%rsp), %r13
    00000ac1: 	movq	%rdi, (%r14)
    00000ac4: 	movq	0x80(%rsp), %rax
    00000acc: 	movq	%rax, %rcx
    00000acf: 	movq	%rax, 0x18(%rsp)
    00000ad4: 	addq	%r13, %rcx
    00000ad7: 	je	.Ltmp1111 # Offset: 2775
    00000ad9: 	testq	%rax, %rax
    00000adc: 	je	.Ltmp1112 # Offset: 2780
.Ltmp1111:
    00000ae2: 	movq	%r13, 0x58(%rsp)
    00000ae7: 	cmpq	$0xf, %r13
    00000aeb: 	ja	.Ltmp1113 # Offset: 2795
    00000af1: 	cmpq	$0x1, %r13
    00000af5: 	jne	.Ltmp1114 # Offset: 2805
    00000afb: 	movq	0x18(%rsp), %rax
    00000b00: 	movzbl	(%rax), %eax
    00000b03: 	movb	%al, 0x10(%r14)
.Ltmp1261:
    00000b07: 	movq	%r13, 0x8(%r14)
    00000b0b: 	movb	$0x0, (%rdi,%r13)
    00000b10: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000b17: 	addq	$0x20, %rax
    00000b1b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1254:
    00000b22: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000b29: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000b30: 	je	.Ltmp1115 # Offset: 2864
.Ltmp1253:
    00000b36: 	movq	-0x20(%rax), %r13
    00000b3a: 	callq	clock@PLT # Offset: 2874
    00000b3f: 	pxor	%xmm0, %xmm0
    00000b43: 	movq	%rax, end_time(%rip)
    00000b4a: 	movq	%r13, %rdi
    00000b4d: 	subq	start_time(%rip), %rax
    00000b54: 	cvtsi2sd	%rax, %xmm0
    00000b59: 	divsd	DATAat0x12360(%rip), %xmm0
    00000b61: 	callq	_Z13record_resultdPKc # Offset: 2913
    00000b66: 	pxor	%xmm1, %xmm1
    00000b6a: 	pxor	%xmm7, %xmm7
    00000b6e: 	pxor	%xmm6, %xmm6
    00000b72: 	movq	%rbp, %rax
    00000b75: 	pxor	%xmm5, %xmm5
    00000b79: 	nopl	(%rax) # Size: 7
.Ltmp1116:
    00000b80: 	movdqu	(%rax), %xmm0
    00000b84: 	addq	$0x10, %rax
    00000b88: 	movdqa	%xmm0, %xmm3
    00000b8c: 	punpckhbw	%xmm7, %xmm0
    00000b90: 	punpcklbw	%xmm7, %xmm3
    00000b94: 	movdqa	%xmm0, %xmm4
    00000b98: 	punpckhwd	%xmm6, %xmm0
    00000b9c: 	movdqa	%xmm3, %xmm2
    00000ba0: 	punpckhwd	%xmm6, %xmm3
    00000ba4: 	punpcklwd	%xmm6, %xmm4
    00000ba8: 	punpcklwd	%xmm6, %xmm2
    00000bac: 	movdqa	%xmm2, %xmm8
    00000bb1: 	punpckldq	%xmm5, %xmm2
    00000bb5: 	punpckhdq	%xmm5, %xmm8
    00000bba: 	paddq	%xmm8, %xmm2
    00000bbf: 	movdqa	%xmm3, %xmm8
    00000bc4: 	punpckldq	%xmm5, %xmm3
    00000bc8: 	punpckhdq	%xmm5, %xmm8
    00000bcd: 	paddq	%xmm8, %xmm3
    00000bd2: 	paddq	%xmm3, %xmm2
    00000bd6: 	movdqa	%xmm4, %xmm3
    00000bda: 	punpckldq	%xmm5, %xmm4
    00000bde: 	punpckhdq	%xmm5, %xmm3
    00000be2: 	paddq	%xmm3, %xmm4
    00000be6: 	movdqa	%xmm0, %xmm3
    00000bea: 	punpckhdq	%xmm5, %xmm0
    00000bee: 	punpckldq	%xmm5, %xmm3
    00000bf2: 	paddq	%xmm0, %xmm1
    00000bf6: 	paddq	%xmm3, %xmm4
    00000bfa: 	paddq	%xmm4, %xmm2
    00000bfe: 	paddq	%xmm2, %xmm1
    00000c02: 	cmpq	%rbx, %rax
    00000c05: 	jne	.Ltmp1116 # Offset: 3077
    00000c0b: 	movdqa	%xmm1, %xmm0
    00000c0f: 	movzbl	init_value(%rip), %edx
    00000c16: 	movq	0x80(%rsp), %rdi
    00000c1e: 	psrldq	$0x8, %xmm0
    00000c23: 	paddq	%xmm0, %xmm1
    00000c27: 	shlq	$0x1a, %rdx
    00000c2b: 	movq	%xmm1, %rax
    00000c30: 	cmpq	%rax, %rdx
    00000c33: 	je	.Ltmp1117 # Offset: 3123
    00000c35: 	movq	%rdi, %rdx
    00000c38: 	leaq	DATAat0x12278(%rip), %rsi
    00000c3f: 	movl	$0x1, %edi
    00000c44: 	xorl	%eax, %eax
    00000c46: 	callq	__printf_chk@PLT # Offset: 3142
    00000c4b: 	movq	0x80(%rsp), %rdi
.Ltmp1117:
    00000c53: 	cmpq	0x8(%rsp), %rdi
    00000c58: 	je	.Ltmp1118 # Offset: 3160
    00000c5a: 	movq	0x90(%rsp), %rax
    00000c62: 	leaq	0x1(%rax), %rsi
    00000c66: 	callq	_ZdlPvm@PLT # Offset: 3174
.Ltmp1118:
    00000c6b: 	movq	0x8(%rsp), %rax
    00000c70: 	movq	0x60(%rsp), %r14
    00000c75: 	movq	0x68(%rsp), %r13
    00000c7a: 	movq	%rax, 0x80(%rsp)
    00000c82: 	movq	%r14, %rax
    00000c85: 	addq	%r13, %rax
    00000c88: 	je	.Ltmp1119 # Offset: 3208
    00000c8a: 	testq	%r14, %r14
    00000c8d: 	je	.Ltmp1120 # Offset: 3213
.Ltmp1119:
    00000c93: 	movq	%r13, 0x58(%rsp)
    00000c98: 	cmpq	$0xf, %r13
    00000c9c: 	ja	.Ltmp1121 # Offset: 3228
    00000ca2: 	cmpq	$0x1, %r13
    00000ca6: 	jne	.Ltmp1122 # Offset: 3238
    00000cac: 	movzbl	(%r14), %eax
    00000cb0: 	movb	%al, 0x90(%rsp)
    00000cb7: 	movq	0x8(%rsp), %rax
.Ltmp1244:
    00000cbc: 	movq	%r13, 0x88(%rsp)
    00000cc4: 	movb	$0x0, (%rax,%r13)
    00000cc9: 	movabsq	$0x3fffffffffffffff, %rax
    00000cd3: 	subq	0x88(%rsp), %rax
    00000cdb: 	cmpq	$0x13, %rax
    00000cdf: 	jbe	.Ltmp1123 # Offset: 3295
    00000ce5: 	movl	$0x14, %edx
    00000cea: 	leaq	DATAat0x122fb(%rip), %rsi
    00000cf1: 	movq	%r12, %rdi
    00000cf4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3316
    00000cf9: 	movzbl	init_value(%rip), %r13d
    00000d01: 	callq	clock@PLT # Offset: 3329
    00000d06: 	movl	iterations(%rip), %r8d
    00000d0d: 	movq	%rax, start_time(%rip)
    00000d14: 	testl	%r8d, %r8d
    00000d17: 	jle	.Ltmp1124 # Offset: 3351
    00000d19: 	movzbl	%r13b, %r9d
    00000d1d: 	xorl	%esi, %esi
    00000d1f: 	movl	$0x4000000, %r11d
    00000d25: 	movl	$0x3fffff8, %r14d
    00000d2b: 	movq	%r9, %rax
    00000d2e: 	shlq	$0x8, %rax
    00000d32: 	orq	%r9, %rax
    00000d35: 	movq	%rax, %rdx
    00000d38: 	shlq	$0x10, %rdx
    00000d3c: 	orq	%rdx, %rax
    00000d3f: 	movq	%rax, %rdx
    00000d42: 	shlq	$0x20, %rdx
    00000d46: 	orq	%rdx, %rax
    00000d49: 	movq	%rax, %xmm0
    00000d4e: 	movq	%rax, %xmm1
    00000d53: 	movabsq	$0x101010101010101, %rax
    00000d5d: 	imulq	%rax, %r9
    00000d61: 	punpcklqdq	%xmm0, %xmm0
    00000d65: 	nopl	(%rax) # Size: 3
.Ltmp1127:
    00000d68: 	movq	%rbp, %rdx
    00000d6b: 	xorl	%eax, %eax
    00000d6d: 	nopl	(%rax) # Size: 3
.Ltmp1126:
    00000d70: 	testb	$0x7, %dl
    00000d73: 	je	.Ltmp1125 # Offset: 3443
    00000d79: 	addl	$0x1, %eax
    00000d7c: 	movb	%r13b, (%rdx)
    00000d7f: 	addq	$0x1, %rdx
    00000d83: 	cmpl	$0x4000000, %eax
    00000d88: 	jne	.Ltmp1126 # Offset: 3464
.Ltmp1213:
    00000d8a: 	addl	$0x1, %esi
    00000d8d: 	cmpl	%r8d, %esi
    00000d90: 	jne	.Ltmp1127 # Offset: 3472
.Ltmp1124:
    00000d92: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000d99: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00000da0: 	subq	$0x20, %rax
    00000da4: 	cmpq	%rax, %r14
    00000da7: 	je	.Ltmp1128 # Offset: 3495
    00000dad: 	leaq	0x10(%r14), %rdi
    00000db1: 	movq	0x88(%rsp), %r13
    00000db9: 	movq	%rdi, (%r14)
    00000dbc: 	movq	0x80(%rsp), %rax
    00000dc4: 	movq	%rax, %rcx
    00000dc7: 	movq	%rax, 0x18(%rsp)
    00000dcc: 	addq	%r13, %rcx
    00000dcf: 	je	.Ltmp1129 # Offset: 3535
    00000dd1: 	testq	%rax, %rax
    00000dd4: 	je	.Ltmp1130 # Offset: 3540
.Ltmp1129:
    00000dda: 	movq	%r13, 0x58(%rsp)
    00000ddf: 	cmpq	$0xf, %r13
    00000de3: 	ja	.Ltmp1131 # Offset: 3555
    00000de9: 	cmpq	$0x1, %r13
    00000ded: 	jne	.Ltmp1132 # Offset: 3565
    00000df3: 	movq	0x18(%rsp), %rax
    00000df8: 	movzbl	(%rax), %eax
    00000dfb: 	movb	%al, 0x10(%r14)
.Ltmp1259:
    00000dff: 	movq	%r13, 0x8(%r14)
    00000e03: 	movb	$0x0, (%rdi,%r13)
    00000e08: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000e0f: 	addq	$0x20, %rax
    00000e13: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1252:
    00000e1a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000e21: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000e28: 	je	.Ltmp1133 # Offset: 3624
.Ltmp1250:
    00000e2e: 	movq	-0x20(%rax), %r13
    00000e32: 	callq	clock@PLT # Offset: 3634
    00000e37: 	pxor	%xmm0, %xmm0
    00000e3b: 	movq	%rax, end_time(%rip)
    00000e42: 	movq	%r13, %rdi
    00000e45: 	subq	start_time(%rip), %rax
    00000e4c: 	cvtsi2sd	%rax, %xmm0
    00000e51: 	divsd	DATAat0x12360(%rip), %xmm0
    00000e59: 	callq	_Z13record_resultdPKc # Offset: 3673
    00000e5e: 	pxor	%xmm1, %xmm1
    00000e62: 	pxor	%xmm7, %xmm7
    00000e66: 	pxor	%xmm6, %xmm6
    00000e6a: 	movq	%rbp, %rax
    00000e6d: 	pxor	%xmm5, %xmm5
    00000e71: 	nopl	(%rax) # Size: 7
.Ltmp1134:
    00000e78: 	movdqu	(%rax), %xmm0
    00000e7c: 	addq	$0x10, %rax
    00000e80: 	movdqa	%xmm0, %xmm3
    00000e84: 	punpckhbw	%xmm7, %xmm0
    00000e88: 	punpcklbw	%xmm7, %xmm3
    00000e8c: 	movdqa	%xmm0, %xmm4
    00000e90: 	punpckhwd	%xmm6, %xmm0
    00000e94: 	movdqa	%xmm3, %xmm2
    00000e98: 	punpckhwd	%xmm6, %xmm3
    00000e9c: 	punpcklwd	%xmm6, %xmm4
    00000ea0: 	punpcklwd	%xmm6, %xmm2
    00000ea4: 	movdqa	%xmm2, %xmm8
    00000ea9: 	punpckldq	%xmm5, %xmm2
    00000ead: 	punpckhdq	%xmm5, %xmm8
    00000eb2: 	paddq	%xmm8, %xmm2
    00000eb7: 	movdqa	%xmm3, %xmm8
    00000ebc: 	punpckldq	%xmm5, %xmm3
    00000ec0: 	punpckhdq	%xmm5, %xmm8
    00000ec5: 	paddq	%xmm8, %xmm3
    00000eca: 	paddq	%xmm3, %xmm2
    00000ece: 	movdqa	%xmm4, %xmm3
    00000ed2: 	punpckldq	%xmm5, %xmm4
    00000ed6: 	punpckhdq	%xmm5, %xmm3
    00000eda: 	paddq	%xmm3, %xmm4
    00000ede: 	movdqa	%xmm0, %xmm3
    00000ee2: 	punpckhdq	%xmm5, %xmm0
    00000ee6: 	punpckldq	%xmm5, %xmm3
    00000eea: 	paddq	%xmm0, %xmm1
    00000eee: 	paddq	%xmm3, %xmm4
    00000ef2: 	paddq	%xmm4, %xmm2
    00000ef6: 	paddq	%xmm2, %xmm1
    00000efa: 	cmpq	%rax, %rbx
    00000efd: 	jne	.Ltmp1134 # Offset: 3837
    00000f03: 	movdqa	%xmm1, %xmm0
    00000f07: 	movzbl	init_value(%rip), %edx
    00000f0e: 	movq	0x80(%rsp), %rdi
    00000f16: 	psrldq	$0x8, %xmm0
    00000f1b: 	paddq	%xmm0, %xmm1
    00000f1f: 	shlq	$0x1a, %rdx
    00000f23: 	movq	%xmm1, %rax
    00000f28: 	cmpq	%rax, %rdx
    00000f2b: 	je	.Ltmp1135 # Offset: 3883
    00000f2d: 	movq	%rdi, %rdx
    00000f30: 	leaq	DATAat0x12278(%rip), %rsi
    00000f37: 	movl	$0x1, %edi
    00000f3c: 	xorl	%eax, %eax
    00000f3e: 	callq	__printf_chk@PLT # Offset: 3902
    00000f43: 	movq	0x80(%rsp), %rdi
.Ltmp1135:
    00000f4b: 	cmpq	0x8(%rsp), %rdi
    00000f50: 	je	.Ltmp1136 # Offset: 3920
    00000f52: 	movq	0x90(%rsp), %rax
    00000f5a: 	leaq	0x1(%rax), %rsi
    00000f5e: 	callq	_ZdlPvm@PLT # Offset: 3934
.Ltmp1136:
    00000f63: 	movq	0x8(%rsp), %rax
    00000f68: 	movq	0x60(%rsp), %r14
    00000f6d: 	movq	0x68(%rsp), %r13
    00000f72: 	movq	%rax, 0x80(%rsp)
    00000f7a: 	movq	%r14, %rax
    00000f7d: 	addq	%r13, %rax
    00000f80: 	je	.Ltmp1137 # Offset: 3968
    00000f82: 	testq	%r14, %r14
    00000f85: 	je	.Ltmp1138 # Offset: 3973
.Ltmp1137:
    00000f8b: 	movq	%r13, 0x58(%rsp)
    00000f90: 	cmpq	$0xf, %r13
    00000f94: 	ja	.Ltmp1139 # Offset: 3988
    00000f9a: 	cmpq	$0x1, %r13
    00000f9e: 	jne	.Ltmp1140 # Offset: 3998
    00000fa4: 	movzbl	(%r14), %eax
    00000fa8: 	movb	%al, 0x90(%rsp)
    00000faf: 	movq	0x8(%rsp), %rax
.Ltmp1242:
    00000fb4: 	movq	%r13, 0x88(%rsp)
    00000fbc: 	movb	$0x0, (%rax,%r13)
    00000fc1: 	movabsq	$0x3fffffffffffffff, %rax
    00000fcb: 	subq	0x88(%rsp), %rax
    00000fd3: 	cmpq	$0x1d, %rax
    00000fd7: 	jbe	.Ltmp1141 # Offset: 4055
    00000fdd: 	movl	$0x1e, %edx
    00000fe2: 	leaq	DATAat0x12310(%rip), %rsi
    00000fe9: 	movq	%r12, %rdi
    00000fec: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4076
    00000ff1: 	movzbl	init_value(%rip), %r13d
    00000ff9: 	callq	clock@PLT # Offset: 4089
    00000ffe: 	movl	iterations(%rip), %r10d
    00001005: 	movq	%rax, start_time(%rip)
    0000100c: 	testl	%r10d, %r10d
    0000100f: 	jle	.Ltmp1142 # Offset: 4111
    00001011: 	movzbl	%r13b, %eax
    00001015: 	movzbl	%r13b, %r11d
    00001019: 	xorl	%edi, %edi
    0000101b: 	movl	$0x4000000, %r14d
    00001021: 	movl	%eax, %esi
    00001023: 	shll	$0x8, %esi
    00001026: 	orl	%eax, %esi
    00001028: 	movl	%esi, %eax
    0000102a: 	shll	$0x10, %eax
    0000102d: 	orl	%eax, %esi
    0000102f: 	movabsq	$0x101010101010101, %rax
    00001039: 	imulq	%rax, %r11
    0000103d: 	movd	%esi, %xmm7
    00001041: 	pshufd	$0x0, %xmm7, %xmm0
    00001046: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1145:
    00001050: 	movq	%rbp, %rax
    00001053: 	xorl	%edx, %edx
    00001055: 	nopl	(%rax) # Size: 3
.Ltmp1144:
    00001058: 	testb	$0x3, %al
    0000105a: 	je	.Ltmp1143 # Offset: 4186
    00001060: 	addl	$0x1, %edx
    00001063: 	movb	%r13b, (%rax)
    00001066: 	addq	$0x1, %rax
    0000106a: 	cmpl	$0x4000000, %edx
    00001070: 	jne	.Ltmp1144 # Offset: 4208
.Ltmp1196:
    00001072: 	addl	$0x1, %edi
    00001075: 	cmpl	%r10d, %edi
    00001078: 	jne	.Ltmp1145 # Offset: 4216
.Ltmp1142:
    0000107a: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001081: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00001088: 	subq	$0x20, %rax
    0000108c: 	cmpq	%rax, %r14
    0000108f: 	je	.Ltmp1146 # Offset: 4239
    00001095: 	leaq	0x10(%r14), %rdi
    00001099: 	movq	0x88(%rsp), %r13
    000010a1: 	movq	%rdi, (%r14)
    000010a4: 	movq	0x80(%rsp), %rax
    000010ac: 	movq	%rax, %rcx
    000010af: 	movq	%rax, 0x18(%rsp)
    000010b4: 	addq	%r13, %rcx
    000010b7: 	je	.Ltmp1147 # Offset: 4279
    000010b9: 	testq	%rax, %rax
    000010bc: 	je	.Ltmp1148 # Offset: 4284
.Ltmp1147:
    000010c2: 	movq	%r13, 0x58(%rsp)
    000010c7: 	cmpq	$0xf, %r13
    000010cb: 	ja	.Ltmp1149 # Offset: 4299
    000010d1: 	cmpq	$0x1, %r13
    000010d5: 	jne	.Ltmp1150 # Offset: 4309
    000010db: 	movq	0x18(%rsp), %rax
    000010e0: 	movzbl	(%rax), %eax
    000010e3: 	movb	%al, 0x10(%r14)
.Ltmp1265:
    000010e7: 	movq	%r13, 0x8(%r14)
    000010eb: 	movb	$0x0, (%rdi,%r13)
    000010f0: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000010f7: 	addq	$0x20, %rax
    000010fb: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1248:
    00001102: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001109: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001110: 	je	.Ltmp1151 # Offset: 4368
.Ltmp1245:
    00001116: 	movq	-0x20(%rax), %r13
    0000111a: 	callq	clock@PLT # Offset: 4378
    0000111f: 	pxor	%xmm0, %xmm0
    00001123: 	movq	%rax, end_time(%rip)
    0000112a: 	movq	%r13, %rdi
    0000112d: 	subq	start_time(%rip), %rax
    00001134: 	cvtsi2sd	%rax, %xmm0
    00001139: 	divsd	DATAat0x12360(%rip), %xmm0
    00001141: 	callq	_Z13record_resultdPKc # Offset: 4417
    00001146: 	pxor	%xmm1, %xmm1
    0000114a: 	pxor	%xmm7, %xmm7
    0000114e: 	pxor	%xmm6, %xmm6
    00001152: 	movq	%rbp, %rax
    00001155: 	pxor	%xmm5, %xmm5
    00001159: 	nopl	(%rax) # Size: 7
.Ltmp1152:
    00001160: 	movdqu	(%rax), %xmm0
    00001164: 	addq	$0x10, %rax
    00001168: 	movdqa	%xmm0, %xmm3
    0000116c: 	punpckhbw	%xmm7, %xmm0
    00001170: 	punpcklbw	%xmm7, %xmm3
    00001174: 	movdqa	%xmm0, %xmm4
    00001178: 	punpckhwd	%xmm6, %xmm0
    0000117c: 	movdqa	%xmm3, %xmm2
    00001180: 	punpckhwd	%xmm6, %xmm3
    00001184: 	punpcklwd	%xmm6, %xmm4
    00001188: 	punpcklwd	%xmm6, %xmm2
    0000118c: 	movdqa	%xmm2, %xmm8
    00001191: 	punpckldq	%xmm5, %xmm2
    00001195: 	punpckhdq	%xmm5, %xmm8
    0000119a: 	paddq	%xmm8, %xmm2
    0000119f: 	movdqa	%xmm3, %xmm8
    000011a4: 	punpckldq	%xmm5, %xmm3
    000011a8: 	punpckhdq	%xmm5, %xmm8
    000011ad: 	paddq	%xmm8, %xmm3
    000011b2: 	paddq	%xmm3, %xmm2
    000011b6: 	movdqa	%xmm4, %xmm3
    000011ba: 	punpckldq	%xmm5, %xmm4
    000011be: 	punpckhdq	%xmm5, %xmm3
    000011c2: 	paddq	%xmm3, %xmm4
    000011c6: 	movdqa	%xmm0, %xmm3
    000011ca: 	punpckhdq	%xmm5, %xmm0
    000011ce: 	punpckldq	%xmm5, %xmm3
    000011d2: 	paddq	%xmm0, %xmm1
    000011d6: 	paddq	%xmm3, %xmm4
    000011da: 	paddq	%xmm4, %xmm2
    000011de: 	paddq	%xmm2, %xmm1
    000011e2: 	cmpq	%rax, %rbx
    000011e5: 	jne	.Ltmp1152 # Offset: 4581
    000011eb: 	movdqa	%xmm1, %xmm0
    000011ef: 	movzbl	init_value(%rip), %edx
    000011f6: 	movq	0x80(%rsp), %rdi
    000011fe: 	psrldq	$0x8, %xmm0
    00001203: 	paddq	%xmm0, %xmm1
    00001207: 	shlq	$0x1a, %rdx
    0000120b: 	movq	%xmm1, %rax
    00001210: 	cmpq	%rax, %rdx
    00001213: 	je	.Ltmp1153 # Offset: 4627
    00001215: 	movq	%rdi, %rdx
    00001218: 	leaq	DATAat0x12278(%rip), %rsi
    0000121f: 	movl	$0x1, %edi
    00001224: 	xorl	%eax, %eax
    00001226: 	callq	__printf_chk@PLT # Offset: 4646
    0000122b: 	movq	0x80(%rsp), %rdi
.Ltmp1153:
    00001233: 	cmpq	0x8(%rsp), %rdi
    00001238: 	je	.Ltmp1154 # Offset: 4664
    0000123a: 	movq	0x90(%rsp), %rax
    00001242: 	leaq	0x1(%rax), %rsi
    00001246: 	callq	_ZdlPvm@PLT # Offset: 4678
.Ltmp1154:
    0000124b: 	movq	0x8(%rsp), %rax
    00001250: 	movq	0x60(%rsp), %r14
    00001255: 	movq	0x68(%rsp), %r13
    0000125a: 	movq	%rax, 0x80(%rsp)
    00001262: 	movq	%r14, %rax
    00001265: 	addq	%r13, %rax
    00001268: 	je	.Ltmp1155 # Offset: 4712
    0000126a: 	testq	%r14, %r14
    0000126d: 	je	.Ltmp1156 # Offset: 4717
.Ltmp1155:
    00001273: 	movq	%r13, 0x58(%rsp)
    00001278: 	cmpq	$0xf, %r13
    0000127c: 	ja	.Ltmp1157 # Offset: 4732
    00001282: 	cmpq	$0x1, %r13
    00001286: 	jne	.Ltmp1158 # Offset: 4742
    0000128c: 	movzbl	(%r14), %eax
    00001290: 	movb	%al, 0x90(%rsp)
    00001297: 	movq	0x8(%rsp), %rax
.Ltmp1228:
    0000129c: 	movq	%r13, 0x88(%rsp)
    000012a4: 	movb	$0x0, (%rax,%r13)
    000012a9: 	movabsq	$0x3fffffffffffffff, %rax
    000012b3: 	subq	0x88(%rsp), %rax
    000012bb: 	cmpq	$0x1d, %rax
    000012bf: 	jbe	.Ltmp1159 # Offset: 4799
    000012c5: 	movl	$0x1e, %edx
    000012ca: 	leaq	DATAat0x12330(%rip), %rsi
    000012d1: 	movq	%r12, %rdi
    000012d4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4820
    000012d9: 	movzbl	init_value(%rip), %r13d
    000012e1: 	callq	clock@PLT # Offset: 4833
    000012e6: 	movl	iterations(%rip), %r9d
    000012ed: 	movq	%rax, start_time(%rip)
    000012f4: 	testl	%r9d, %r9d
    000012f7: 	jle	.Ltmp1160 # Offset: 4855
    000012f9: 	movzbl	%r13b, %r10d
    000012fd: 	xorl	%esi, %esi
    000012ff: 	movl	$0x4000000, %r11d
    00001305: 	movl	$0x1, %r14d
    0000130b: 	movq	%r10, %rax
    0000130e: 	shlq	$0x8, %rax
    00001312: 	orq	%r10, %rax
    00001315: 	movq	%rax, %rdx
    00001318: 	shlq	$0x10, %rdx
    0000131c: 	orq	%rdx, %rax
    0000131f: 	movq	%rax, %rdx
    00001322: 	shlq	$0x20, %rdx
    00001326: 	orq	%rdx, %rax
    00001329: 	movq	%rax, %xmm1
    0000132e: 	movabsq	$0x101010101010101, %rax
    00001338: 	imulq	%rax, %r10
    0000133c: 	movdqa	%xmm1, %xmm0
    00001340: 	punpcklqdq	%xmm0, %xmm0
    00001344: 	nopl	(%rax) # Size: 4
.Ltmp1163:
    00001348: 	movq	%rbp, %rdx
    0000134b: 	xorl	%eax, %eax
    0000134d: 	nopl	(%rax) # Size: 3
.Ltmp1162:
    00001350: 	testb	$0x7, %dl
    00001353: 	je	.Ltmp1161 # Offset: 4947
    00001359: 	addl	$0x1, %eax
    0000135c: 	movb	%r13b, (%rdx)
    0000135f: 	addq	$0x1, %rdx
    00001363: 	cmpl	$0x4000000, %eax
    00001368: 	jne	.Ltmp1162 # Offset: 4968
.Ltmp1206:
    0000136a: 	addl	$0x1, %esi
    0000136d: 	cmpl	%r9d, %esi
    00001370: 	jne	.Ltmp1163 # Offset: 4976
.Ltmp1160:
    00001372: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001379: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00001380: 	subq	$0x20, %rax
    00001384: 	cmpq	%rax, %r14
    00001387: 	je	.Ltmp1164 # Offset: 4999
    0000138d: 	leaq	0x10(%r14), %rdi
    00001391: 	movq	0x88(%rsp), %r13
    00001399: 	movq	%rdi, (%r14)
    0000139c: 	movq	0x80(%rsp), %rax
    000013a4: 	movq	%rax, %rcx
    000013a7: 	movq	%rax, 0x18(%rsp)
    000013ac: 	addq	%r13, %rcx
    000013af: 	je	.Ltmp1165 # Offset: 5039
    000013b1: 	testq	%rax, %rax
    000013b4: 	je	.Ltmp1166 # Offset: 5044
.Ltmp1165:
    000013ba: 	movq	%r13, 0x58(%rsp)
    000013bf: 	cmpq	$0xf, %r13
    000013c3: 	ja	.Ltmp1167 # Offset: 5059
    000013c9: 	cmpq	$0x1, %r13
    000013cd: 	jne	.Ltmp1168 # Offset: 5069
    000013d3: 	movq	0x18(%rsp), %rax
    000013d8: 	movzbl	(%rax), %eax
    000013db: 	movb	%al, 0x10(%r14)
.Ltmp1263:
    000013df: 	movq	%r13, 0x8(%r14)
    000013e3: 	movb	$0x0, (%rdi,%r13)
    000013e8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000013ef: 	addq	$0x20, %rax
    000013f3: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1247:
    000013fa: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001401: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001408: 	je	.Ltmp1169 # Offset: 5128
.Ltmp1246:
    0000140e: 	movq	-0x20(%rax), %r13
    00001412: 	callq	clock@PLT # Offset: 5138
    00001417: 	pxor	%xmm0, %xmm0
    0000141b: 	movq	%rax, end_time(%rip)
    00001422: 	movq	%r13, %rdi
    00001425: 	subq	start_time(%rip), %rax
    0000142c: 	cvtsi2sd	%rax, %xmm0
    00001431: 	divsd	DATAat0x12360(%rip), %xmm0
    00001439: 	callq	_Z13record_resultdPKc # Offset: 5177
    0000143e: 	pxor	%xmm1, %xmm1
    00001442: 	pxor	%xmm7, %xmm7
    00001446: 	pxor	%xmm6, %xmm6
    0000144a: 	pxor	%xmm5, %xmm5
    0000144e: 	nop # Size: 2
.Ltmp1170:
    00001450: 	movdqu	(%r15), %xmm0
    00001455: 	addq	$0x10, %r15
    00001459: 	movdqa	%xmm0, %xmm3
    0000145d: 	punpckhbw	%xmm7, %xmm0
    00001461: 	punpcklbw	%xmm7, %xmm3
    00001465: 	movdqa	%xmm0, %xmm4
    00001469: 	punpckhwd	%xmm6, %xmm0
    0000146d: 	movdqa	%xmm3, %xmm2
    00001471: 	punpckhwd	%xmm6, %xmm3
    00001475: 	punpcklwd	%xmm6, %xmm4
    00001479: 	punpcklwd	%xmm6, %xmm2
    0000147d: 	movdqa	%xmm2, %xmm8
    00001482: 	punpckhdq	%xmm5, %xmm2
    00001486: 	punpckldq	%xmm5, %xmm8
    0000148b: 	paddq	%xmm8, %xmm2
    00001490: 	movdqa	%xmm3, %xmm8
    00001495: 	punpckhdq	%xmm5, %xmm3
    00001499: 	punpckldq	%xmm5, %xmm8
    0000149e: 	paddq	%xmm8, %xmm3
    000014a3: 	paddq	%xmm3, %xmm2
    000014a7: 	movdqa	%xmm4, %xmm3
    000014ab: 	punpckldq	%xmm5, %xmm4
    000014af: 	punpckhdq	%xmm5, %xmm3
    000014b3: 	paddq	%xmm3, %xmm4
    000014b7: 	movdqa	%xmm0, %xmm3
    000014bb: 	punpckhdq	%xmm5, %xmm0
    000014bf: 	punpckldq	%xmm5, %xmm3
    000014c3: 	paddq	%xmm0, %xmm1
    000014c7: 	paddq	%xmm3, %xmm4
    000014cb: 	paddq	%xmm4, %xmm2
    000014cf: 	paddq	%xmm2, %xmm1
    000014d3: 	cmpq	%rbx, %r15
    000014d6: 	jne	.Ltmp1170 # Offset: 5334
    000014dc: 	movdqa	%xmm1, %xmm0
    000014e0: 	movzbl	init_value(%rip), %edx
    000014e7: 	movq	0x80(%rsp), %rdi
    000014ef: 	psrldq	$0x8, %xmm0
    000014f4: 	paddq	%xmm0, %xmm1
    000014f8: 	shlq	$0x1a, %rdx
    000014fc: 	movq	%xmm1, %rax
    00001501: 	cmpq	%rax, %rdx
    00001504: 	je	.Ltmp1171 # Offset: 5380
    00001506: 	movq	%rdi, %rdx
    00001509: 	leaq	DATAat0x12278(%rip), %rsi
    00001510: 	movl	$0x1, %edi
    00001515: 	xorl	%eax, %eax
    00001517: 	callq	__printf_chk@PLT # Offset: 5399
    0000151c: 	movq	0x80(%rsp), %rdi
.Ltmp1171:
    00001524: 	cmpq	0x8(%rsp), %rdi
    00001529: 	je	.Ltmp1172 # Offset: 5417
    0000152b: 	movq	0x90(%rsp), %rax
    00001533: 	leaq	0x1(%rax), %rsi
    00001537: 	callq	_ZdlPvm@PLT # Offset: 5431
.Ltmp1172:
    0000153c: 	movq	%rbp, %rdi
    0000153f: 	callq	_ZdaPv@PLT # Offset: 5439
    00001544: 	movq	0x8(%rsp), %rax
    00001549: 	movq	0x60(%rsp), %rbp
    0000154e: 	movq	0x68(%rsp), %r13
    00001553: 	movq	%rax, 0x80(%rsp)
    0000155b: 	movq	%rbp, %rax
    0000155e: 	addq	%r13, %rax
    00001561: 	je	.Ltmp1173 # Offset: 5473
    00001563: 	testq	%rbp, %rbp
    00001566: 	je	.Ltmp1174 # Offset: 5478
.Ltmp1173:
    0000156c: 	movq	%r13, 0x58(%rsp)
    00001571: 	cmpq	$0xf, %r13
    00001575: 	ja	.Ltmp1175 # Offset: 5493
    0000157b: 	cmpq	$0x1, %r13
    0000157f: 	jne	.Ltmp1176 # Offset: 5503
    00001585: 	movzbl	(%rbp), %eax
    00001589: 	movb	%al, 0x90(%rsp)
    00001590: 	movq	0x8(%rsp), %rax
.Ltmp1232:
    00001595: 	movq	%r13, 0x88(%rsp)
    0000159d: 	movb	$0x0, (%rax,%r13)
    000015a2: 	movabsq	$0x3fffffffffffffff, %rax
    000015ac: 	subq	0x88(%rsp), %rax
    000015b4: 	cmpq	$0x6, %rax
    000015b8: 	jbe	.Ltmp1177 # Offset: 5560
    000015be: 	movl	$0x7, %edx
    000015c3: 	leaq	DATAat0x1229d(%rip), %rsi
    000015ca: 	movq	%r12, %rdi
    000015cd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5581
    000015d2: 	movl	iterations(%rip), %edx
    000015d8: 	xorl	%r8d, %r8d
    000015db: 	xorl	%ecx, %ecx
    000015dd: 	movl	$0x4000000, %esi
    000015e2: 	movq	0x80(%rsp), %rdi
    000015ea: 	callq	_Z9summarizePKciiii # Offset: 5610
    000015ef: 	movq	0x80(%rsp), %rdi
    000015f7: 	cmpq	0x8(%rsp), %rdi
    000015fc: 	je	.Ltmp1178 # Offset: 5628
    000015fe: 	movq	0x90(%rsp), %rax
    00001606: 	leaq	0x1(%rax), %rsi
    0000160a: 	callq	_ZdlPvm@PLT # Offset: 5642
.Ltmp1178:
    0000160f: 	movq	0x60(%rsp), %rdi
    00001614: 	cmpq	0x10(%rsp), %rdi
    00001619: 	je	.Ltmp1179 # Offset: 5657
    0000161b: 	movq	0x70(%rsp), %rax
    00001620: 	leaq	0x1(%rax), %rsi
    00001624: 	callq	_ZdlPvm@PLT # Offset: 5668
.Ltmp1179:
    00001629: 	movq	0xa8(%rsp), %rax
    00001631: 	subq	%fs:0x28, %rax
    0000163a: 	jne	.Ltmp1180 # Offset: 5690
    00001640: 	addq	$0xb8, %rsp
    00001647: 	popq	%rbx
    00001648: 	popq	%rbp
    00001649: 	popq	%r12
    0000164b: 	popq	%r13
    0000164d: 	popq	%r14
    0000164f: 	popq	%r15
    00001651: 	retq # Offset: 5713
    00001652: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1181:
    00001658: 	addq	$0x20, %rbp
.Ltmp1041:
    0000165c: 	cmpq	%rbp, 0x8(%rsp)
    00001661: 	je	.Ltmp1044 # Offset: 5729
.Ltmp1182:
    00001667: 	movq	(%rbp), %rdi
    0000166b: 	leaq	0x10(%rbp), %rax
    0000166f: 	cmpq	%rax, %rdi
    00001672: 	je	.Ltmp1181 # Offset: 5746
    00001674: 	movq	0x10(%rbp), %rax
    00001678: 	addq	$0x20, %rbp
    0000167c: 	leaq	0x1(%rax), %rsi
    00001680: 	callq	_ZdlPvm@PLT # Offset: 5760
    00001685: 	cmpq	%rbp, 0x8(%rsp)
    0000168a: 	jne	.Ltmp1182 # Offset: 5770
    0000168c: 	jmp	.Ltmp1044 # Offset: 5772
    00001691: 	nopl	(%rax) # Size: 7
.Ltmp1037:
    00001698: 	addq	$0x20, %rbp
    0000169c: 	cmpq	%rbx, %rbp
    0000169f: 	jne	.Ltmp1038 # Offset: 5791
    000016a5: 	addq	$0x8, %r13
    000016a9: 	cmpq	%r13, %r15
    000016ac: 	ja	.Ltmp1039 # Offset: 5804
    000016b2: 	jmp	.Ltmp1183 # Offset: 5810
.Ltmp1052:
    000016b7: 	testq	%r12, %r12
    000016ba: 	jne	.Ltmp1184 # Offset: 5818
    000016c0: 	movq	0x8(%rsp), %rax
    000016c5: 	jmp	.Ltmp1185 # Offset: 5829
    000016ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1143:
    000016d0: 	cmpl	$0x3fffffc, %edx
    000016d6: 	jg	.Ltmp1186 # Offset: 5846
    000016dc: 	testb	$0x3f, %al
    000016de: 	je	.Ltmp1187 # Offset: 5854
    000016e4: 	leal	0x4(%rdx), %eax
    000016e7: 	cltq
    000016e9: 	nopl	(%rax) # Size: 7
.Ltmp1189:
    000016f0: 	movl	%esi, -0x4(%rbp,%rax)
    000016f4: 	movl	%eax, %edx
    000016f6: 	cmpl	$0x3fffffc, %eax
    000016fb: 	jg	.Ltmp1188 # Offset: 5883
    000016fd: 	leaq	(%rbp,%rax), %rcx
    00001702: 	addq	$0x4, %rax
    00001706: 	andl	$0x3f, %ecx
    00001709: 	jne	.Ltmp1189 # Offset: 5897
.Ltmp1188:
    0000170b: 	cmpl	$0x3ffffc0, %edx
    00001711: 	jg	.Ltmp1190 # Offset: 5905
.Ltmp1272:
    00001713: 	movl	$0x3ffffc0, %r8d
    00001719: 	movslq	%edx, %rax
    0000171c: 	xorl	%r9d, %r9d
    0000171f: 	subl	%edx, %r8d
    00001722: 	addq	%rbp, %rax
    00001725: 	shrl	$0x6, %r8d
    00001729: 	leal	0x1(%r8), %ecx
    0000172d: 	nopl	(%rax) # Size: 3
.Ltmp1191:
    00001730: 	addl	$0x1, %r9d
    00001734: 	movups	%xmm0, (%rax)
    00001737: 	addq	$0x40, %rax
    0000173b: 	movups	%xmm0, -0x30(%rax)
    0000173f: 	movups	%xmm0, -0x20(%rax)
    00001743: 	movups	%xmm0, -0x10(%rax)
    00001747: 	cmpl	%r9d, %ecx
    0000174a: 	ja	.Ltmp1191 # Offset: 5962
    0000174c: 	shll	$0x6, %r8d
    00001750: 	leal	0x40(%rdx,%r8), %edx
.Ltmp1190:
    00001755: 	cmpl	$0x3fffffc, %edx
    0000175b: 	jg	.Ltmp1192 # Offset: 5979
.Ltmp1273:
    0000175d: 	movl	$0x3fffffc, %eax
    00001762: 	subl	%edx, %eax
    00001764: 	movl	%eax, %ecx
    00001766: 	shrl	$0x2, %ecx
    00001769: 	leal	0x1(%rcx), %r8d
    0000176d: 	cmpl	$0xb, %eax
    00001770: 	jbe	.Ltmp1193 # Offset: 6000
    00001776: 	movl	%r8d, %r9d
    00001779: 	movslq	%edx, %rax
    0000177c: 	addq	%rbp, %rax
    0000177f: 	shrl	$0x2, %r9d
    00001783: 	movups	%xmm0, (%rax)
    00001786: 	cmpl	$0x1, %r9d
    0000178a: 	je	.Ltmp1194 # Offset: 6026
    0000178c: 	movups	%xmm0, 0x10(%rax)
    00001790: 	cmpl	$0x2, %r9d
    00001794: 	je	.Ltmp1194 # Offset: 6036
    00001796: 	movups	%xmm0, 0x20(%rax)
.Ltmp1194:
    0000179a: 	movl	%r8d, %r9d
    0000179d: 	andl	$-0x4, %r9d
    000017a1: 	leal	(%rdx,%r9,4), %eax
    000017a5: 	cmpl	%r8d, %r9d
    000017a8: 	je	.Ltmp1195 # Offset: 6056
.Ltmp1271:
    000017aa: 	movslq	%eax, %r8
    000017ad: 	movl	%esi, (%rbp,%r8)
    000017b2: 	leal	0x4(%rax), %r8d
    000017b6: 	cmpl	$0x3fffffc, %r8d
    000017bd: 	jg	.Ltmp1195 # Offset: 6077
    000017bf: 	movslq	%r8d, %r8
    000017c2: 	addl	$0x8, %eax
    000017c5: 	movl	%esi, (%rbp,%r8)
    000017ca: 	cmpl	$0x3fffffc, %eax
    000017cf: 	jg	.Ltmp1195 # Offset: 6095
    000017d1: 	cltq
    000017d3: 	movl	%esi, (%rbp,%rax)
.Ltmp1195:
    000017d7: 	leal	0x4(%rdx,%rcx,4), %edx
.Ltmp1192:
    000017db: 	cmpl	$0x4000000, %edx
    000017e1: 	je	.Ltmp1196 # Offset: 6113
.Ltmp1186:
    000017e7: 	movl	%r14d, %eax
    000017ea: 	subl	%edx, %eax
    000017ec: 	movslq	%edx, %rdx
    000017ef: 	addq	%rbp, %rdx
    000017f2: 	cmpl	$0x8, %eax
    000017f5: 	jae	.Ltmp1197 # Offset: 6133
    000017fb: 	testb	$0x4, %al
    000017fd: 	jne	.Ltmp1198 # Offset: 6141
    00001803: 	testl	%eax, %eax
    00001805: 	je	.Ltmp1196 # Offset: 6149
    0000180b: 	movb	%r11b, (%rdx)
    0000180e: 	testb	$0x2, %al
    00001810: 	je	.Ltmp1196 # Offset: 6160
    00001816: 	movw	%r11w, -0x2(%rdx,%rax)
    0000181c: 	jmp	.Ltmp1196 # Offset: 6172
    00001821: 	nopl	(%rax) # Size: 7
.Ltmp1161:
    00001828: 	cmpl	$0x3fffff8, %eax
    0000182d: 	jg	.Ltmp1199 # Offset: 6189
    00001833: 	andl	$0x3f, %edx
    00001836: 	je	.Ltmp1200 # Offset: 6198
    0000183c: 	addl	$0x8, %eax
    0000183f: 	movslq	%eax, %rdx
    00001842: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1202:
    00001848: 	movq	%xmm1, -0x8(%rbp,%rdx)
    0000184e: 	movl	%edx, %eax
    00001850: 	cmpl	$0x3fffff8, %edx
    00001856: 	jg	.Ltmp1201 # Offset: 6230
    00001858: 	leaq	(%rbp,%rdx), %rcx
    0000185d: 	addq	$0x8, %rdx
    00001861: 	andl	$0x3f, %ecx
    00001864: 	jne	.Ltmp1202 # Offset: 6244
.Ltmp1201:
    00001866: 	cmpl	$0x3ffffbf, %eax
    0000186b: 	jg	.Ltmp1203 # Offset: 6251
.Ltmp1274:
    00001871: 	movl	$0x3ffffbf, %r8d
    00001877: 	movslq	%eax, %rdx
    0000187a: 	xorl	%ecx, %ecx
    0000187c: 	subl	%eax, %r8d
    0000187f: 	addq	%rbp, %rdx
    00001882: 	shrl	$0x6, %r8d
    00001886: 	leal	0x1(%r8), %edi
    0000188a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1204:
    00001890: 	addl	$0x1, %ecx
    00001893: 	movups	%xmm0, (%rdx)
    00001896: 	addq	$0x40, %rdx
    0000189a: 	movups	%xmm0, -0x30(%rdx)
    0000189e: 	movups	%xmm0, -0x20(%rdx)
    000018a2: 	movups	%xmm0, -0x10(%rdx)
    000018a6: 	cmpl	%edi, %ecx
    000018a8: 	jb	.Ltmp1204 # Offset: 6312
    000018aa: 	shll	$0x6, %r8d
    000018ae: 	leal	0x40(%rax,%r8), %eax
    000018b3: 	cmpl	$0x3fffff8, %eax
    000018b8: 	jg	.Ltmp1199 # Offset: 6328
.Ltmp1269:
    000018be: 	movslq	%eax, %rdx
    000018c1: 	leal	0x8(%rax), %ecx
    000018c4: 	movq	%xmm1, (%rbp,%rdx)
    000018ca: 	cmpl	$0x3fffff8, %ecx
    000018d0: 	jg	.Ltmp1205 # Offset: 6352
    000018d2: 	movslq	%ecx, %rdx
    000018d5: 	movq	%xmm1, (%rbp,%rdx)
    000018db: 	leal	0x10(%rax), %edx
    000018de: 	cmpl	$0x3fffff8, %edx
    000018e4: 	jg	.Ltmp1205 # Offset: 6372
    000018e6: 	movslq	%edx, %rdx
    000018e9: 	movq	%xmm1, (%rbp,%rdx)
    000018ef: 	leal	0x18(%rax), %edx
    000018f2: 	cmpl	$0x3fffff8, %edx
    000018f8: 	jg	.Ltmp1205 # Offset: 6392
    000018fa: 	movslq	%edx, %rdx
    000018fd: 	movq	%xmm1, (%rbp,%rdx)
    00001903: 	leal	0x20(%rax), %edx
    00001906: 	cmpl	$0x3fffff8, %edx
    0000190c: 	jg	.Ltmp1205 # Offset: 6412
    0000190e: 	movslq	%edx, %rdx
    00001911: 	movq	%xmm1, (%rbp,%rdx)
    00001917: 	leal	0x28(%rax), %edx
    0000191a: 	cmpl	$0x3fffff8, %edx
    00001920: 	jg	.Ltmp1205 # Offset: 6432
    00001922: 	movslq	%edx, %rdx
    00001925: 	movq	%xmm1, (%rbp,%rdx)
    0000192b: 	leal	0x30(%rax), %edx
    0000192e: 	cmpl	$0x3fffff8, %edx
    00001934: 	jg	.Ltmp1205 # Offset: 6452
    00001936: 	movslq	%edx, %rdi
    00001939: 	movq	%xmm1, (%rbp,%rdi)
    0000193f: 	cmpl	$0x3fffff0, %edx
    00001945: 	jne	.Ltmp1205 # Offset: 6469
    00001947: 	movq	%xmm1, 0x3fffff8(%rbp)
.Ltmp1205:
    0000194f: 	movl	$0x3fffff8, %edx
    00001954: 	subl	%eax, %edx
    00001956: 	andl	$-0x8, %edx
    00001959: 	cmpl	$0x3fffff8, %eax
    0000195e: 	movl	$0x0, %eax
    00001963: 	cmovgl	%eax, %edx
    00001966: 	leal	(%rcx,%rdx), %eax
.Ltmp1270:
    00001969: 	cmpl	$0x4000000, %eax
    0000196e: 	je	.Ltmp1206 # Offset: 6510
.Ltmp1199:
    00001974: 	movl	%r11d, %edx
    00001977: 	subl	%eax, %edx
    00001979: 	cmpl	$0x3ffffff, %eax
    0000197e: 	cltq
    00001980: 	cmovgq	%r14, %rdx
    00001984: 	addq	%rbp, %rax
    00001987: 	movl	%edx, %ecx
    00001989: 	cmpl	$0x8, %edx
    0000198c: 	jae	.Ltmp1207 # Offset: 6540
    00001992: 	andl	$0x4, %edx
    00001995: 	jne	.Ltmp1208 # Offset: 6549
    0000199b: 	testl	%ecx, %ecx
    0000199d: 	je	.Ltmp1206 # Offset: 6557
    000019a3: 	movb	%r10b, (%rax)
    000019a6: 	testb	$0x2, %cl
    000019a9: 	je	.Ltmp1206 # Offset: 6569
    000019af: 	movw	%r10w, -0x2(%rax,%rcx)
    000019b5: 	jmp	.Ltmp1206 # Offset: 6581
    000019ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1125:
    000019c0: 	cmpl	$0x3ffffe0, %eax
    000019c5: 	jg	.Ltmp1209 # Offset: 6597
    000019c7: 	movl	$0x3ffffe0, %r10d
    000019cd: 	movslq	%eax, %rdx
    000019d0: 	xorl	%ecx, %ecx
    000019d2: 	subl	%eax, %r10d
    000019d5: 	addq	%rbp, %rdx
    000019d8: 	shrl	$0x5, %r10d
    000019dc: 	leal	0x1(%r10), %edi
.Ltmp1210:
    000019e0: 	addl	$0x1, %ecx
    000019e3: 	movups	%xmm0, (%rdx)
    000019e6: 	addq	$0x20, %rdx
    000019ea: 	movups	%xmm0, -0x10(%rdx)
    000019ee: 	cmpl	%ecx, %edi
    000019f0: 	ja	.Ltmp1210 # Offset: 6640
    000019f2: 	shll	$0x5, %r10d
    000019f6: 	leal	0x20(%rax,%r10), %eax
.Ltmp1209:
    000019fb: 	cmpl	$0x3fffff8, %eax
    00001a00: 	jg	.Ltmp1211 # Offset: 6656
    00001a02: 	movslq	%eax, %rdx
    00001a05: 	leal	0x8(%rax), %ecx
    00001a08: 	movq	%xmm1, (%rbp,%rdx)
    00001a0e: 	cmpl	$0x3fffff8, %ecx
    00001a14: 	jg	.Ltmp1212 # Offset: 6676
    00001a16: 	movslq	%ecx, %rdx
    00001a19: 	movq	%xmm1, (%rbp,%rdx)
    00001a1f: 	leal	0x10(%rax), %edx
    00001a22: 	cmpl	$0x3fffff8, %edx
    00001a28: 	jg	.Ltmp1212 # Offset: 6696
    00001a2a: 	movslq	%edx, %rdx
    00001a2d: 	movq	%xmm1, (%rbp,%rdx)
.Ltmp1212:
    00001a33: 	movl	%r14d, %edx
    00001a36: 	subl	%eax, %edx
    00001a38: 	movl	%edx, %eax
    00001a3a: 	andl	$-0x8, %eax
    00001a3d: 	addl	%ecx, %eax
.Ltmp1211:
    00001a3f: 	cmpl	$0x4000000, %eax
    00001a44: 	je	.Ltmp1213 # Offset: 6724
    00001a4a: 	movl	%r11d, %edx
    00001a4d: 	subl	%eax, %edx
    00001a4f: 	cltq
    00001a51: 	addq	%rbp, %rax
    00001a54: 	cmpl	$0x8, %edx
    00001a57: 	jae	.Ltmp1214 # Offset: 6743
    00001a5d: 	testb	$0x4, %dl
    00001a60: 	jne	.Ltmp1215 # Offset: 6752
    00001a66: 	testl	%edx, %edx
    00001a68: 	je	.Ltmp1213 # Offset: 6760
    00001a6e: 	movb	%r9b, (%rax)
    00001a71: 	testb	$0x2, %dl
    00001a74: 	je	.Ltmp1213 # Offset: 6772
    00001a7a: 	movw	%r9w, -0x2(%rax,%rdx)
    00001a80: 	jmp	.Ltmp1213 # Offset: 6784
    00001a85: 	nopl	(%rax) # Size: 3
.Ltmp1107:
    00001a88: 	cmpl	$0x3fffff0, %eax
    00001a8d: 	jg	.Ltmp1216 # Offset: 6797
    00001a8f: 	movl	$0x3fffff0, %r14d
    00001a95: 	movslq	%eax, %rdi
    00001a98: 	xorl	%edx, %edx
    00001a9a: 	subl	%eax, %r14d
    00001a9d: 	addq	%rbp, %rdi
    00001aa0: 	shrl	$0x4, %r14d
    00001aa4: 	leal	0x1(%r14), %r8d
    00001aa8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1217:
    00001ab0: 	movq	%rdx, %rcx
    00001ab3: 	addq	$0x1, %rdx
    00001ab7: 	shlq	$0x4, %rcx
    00001abb: 	movups	%xmm0, (%rdi,%rcx)
    00001abf: 	cmpl	%edx, %r8d
    00001ac2: 	ja	.Ltmp1217 # Offset: 6850
    00001ac4: 	shll	$0x4, %r14d
    00001ac8: 	leal	0x10(%rax,%r14), %eax
.Ltmp1216:
    00001acd: 	cmpl	$0x3fffffc, %eax
    00001ad2: 	jg	.Ltmp1218 # Offset: 6866
    00001ad4: 	movslq	%eax, %rdx
    00001ad7: 	leal	0x4(%rax), %ecx
    00001ada: 	movl	%r9d, (%rbp,%rdx)
    00001adf: 	cmpl	$0x3fffffc, %ecx
    00001ae5: 	jg	.Ltmp1219 # Offset: 6885
    00001ae7: 	movslq	%ecx, %rdx
    00001aea: 	movl	%r9d, (%rbp,%rdx)
    00001aef: 	leal	0x8(%rax), %edx
    00001af2: 	cmpl	$0x3fffffc, %edx
    00001af8: 	jg	.Ltmp1219 # Offset: 6904
    00001afa: 	movslq	%edx, %rdx
    00001afd: 	movl	%r9d, (%rbp,%rdx)
.Ltmp1219:
    00001b02: 	movl	$0x3fffffc, %edx
    00001b07: 	subl	%eax, %edx
    00001b09: 	movl	%edx, %eax
    00001b0b: 	andl	$-0x4, %eax
    00001b0e: 	addl	%ecx, %eax
.Ltmp1218:
    00001b10: 	cmpl	$0x4000000, %eax
    00001b15: 	je	.Ltmp1220 # Offset: 6933
    00001b1b: 	movl	$0x4000000, %edx
    00001b20: 	subl	%eax, %edx
    00001b22: 	cltq
    00001b24: 	addq	%rbp, %rax
    00001b27: 	cmpl	$0x8, %edx
    00001b2a: 	jae	.Ltmp1221 # Offset: 6954
    00001b2c: 	testb	$0x4, %dl
    00001b2f: 	jne	.Ltmp1222 # Offset: 6959
    00001b35: 	testl	%edx, %edx
    00001b37: 	je	.Ltmp1220 # Offset: 6967
    00001b3d: 	movb	%r11b, (%rax)
    00001b40: 	testb	$0x2, %dl
    00001b43: 	je	.Ltmp1220 # Offset: 6979
    00001b49: 	movw	%r11w, -0x2(%rax,%rdx)
    00001b4f: 	jmp	.Ltmp1220 # Offset: 6991
    00001b54: 	nopl	(%rax) # Size: 4
.Ltmp1214:
    00001b58: 	movl	%edx, %ecx
    00001b5a: 	movq	%r9, (%rax)
    00001b5d: 	movq	%r9, -0x8(%rax,%rcx)
    00001b62: 	leaq	0x8(%rax), %rcx
    00001b66: 	andq	$-0x8, %rcx
    00001b6a: 	subq	%rcx, %rax
    00001b6d: 	addl	%eax, %edx
    00001b6f: 	andl	$-0x8, %edx
    00001b72: 	cmpl	$0x8, %edx
    00001b75: 	jb	.Ltmp1213 # Offset: 7029
    00001b7b: 	andl	$-0x8, %edx
    00001b7e: 	xorl	%eax, %eax
.Ltmp1223:
    00001b80: 	movl	%eax, %edi
    00001b82: 	addl	$0x8, %eax
    00001b85: 	movq	%r9, (%rcx,%rdi)
    00001b89: 	cmpl	%edx, %eax
    00001b8b: 	jb	.Ltmp1223 # Offset: 7051
    00001b8d: 	addl	$0x1, %esi
    00001b90: 	cmpl	%r8d, %esi
    00001b93: 	jne	.Ltmp1127 # Offset: 7059
    00001b99: 	jmp	.Ltmp1124 # Offset: 7065
    00001b9e: 	nop # Size: 2
.Ltmp1221:
    00001ba0: 	movl	%edx, %ecx
    00001ba2: 	movq	%r11, (%rax)
    00001ba5: 	movq	%r11, -0x8(%rax,%rcx)
    00001baa: 	leaq	0x8(%rax), %rcx
    00001bae: 	andq	$-0x8, %rcx
    00001bb2: 	subq	%rcx, %rax
    00001bb5: 	addl	%eax, %edx
    00001bb7: 	andl	$-0x8, %edx
    00001bba: 	cmpl	$0x8, %edx
    00001bbd: 	jb	.Ltmp1220 # Offset: 7101
    00001bc3: 	andl	$-0x8, %edx
    00001bc6: 	xorl	%eax, %eax
.Ltmp1224:
    00001bc8: 	movl	%eax, %edi
    00001bca: 	addl	$0x8, %eax
    00001bcd: 	movq	%r11, (%rcx,%rdi)
    00001bd1: 	cmpl	%edx, %eax
    00001bd3: 	jb	.Ltmp1224 # Offset: 7123
    00001bd5: 	addl	$0x1, %esi
    00001bd8: 	cmpl	%r10d, %esi
    00001bdb: 	jne	.Ltmp1109 # Offset: 7131
    00001be1: 	jmp	.Ltmp1106 # Offset: 7137
    00001be6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1197:
    00001bf0: 	movl	%eax, %ecx
    00001bf2: 	movq	%r11, (%rdx)
    00001bf5: 	movq	%r11, -0x8(%rdx,%rcx)
    00001bfa: 	leaq	0x8(%rdx), %rcx
    00001bfe: 	andq	$-0x8, %rcx
    00001c02: 	subq	%rcx, %rdx
    00001c05: 	addl	%edx, %eax
    00001c07: 	andl	$-0x8, %eax
    00001c0a: 	cmpl	$0x8, %eax
    00001c0d: 	jb	.Ltmp1196 # Offset: 7181
    00001c13: 	andl	$-0x8, %eax
    00001c16: 	xorl	%edx, %edx
.Ltmp1225:
    00001c18: 	movl	%edx, %r8d
    00001c1b: 	addl	$0x8, %edx
    00001c1e: 	movq	%r11, (%rcx,%r8)
    00001c22: 	cmpl	%eax, %edx
    00001c24: 	jb	.Ltmp1225 # Offset: 7204
    00001c26: 	addl	$0x1, %edi
    00001c29: 	cmpl	%r10d, %edi
    00001c2c: 	jne	.Ltmp1145 # Offset: 7212
    00001c32: 	jmp	.Ltmp1142 # Offset: 7218
    00001c37: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1207:
    00001c40: 	leaq	0x8(%rax), %rdi
    00001c44: 	movq	%r10, (%rax)
    00001c47: 	andq	$-0x8, %rdi
    00001c4b: 	movq	%r10, -0x8(%rdx,%rax)
    00001c50: 	subq	%rdi, %rax
    00001c53: 	leal	(%rdx,%rax), %ecx
    00001c56: 	andl	$-0x8, %ecx
    00001c59: 	cmpl	$0x8, %ecx
    00001c5c: 	jb	.Ltmp1206 # Offset: 7260
    00001c62: 	andl	$-0x8, %ecx
    00001c65: 	xorl	%eax, %eax
.Ltmp1226:
    00001c67: 	movl	%eax, %edx
    00001c69: 	addl	$0x8, %eax
    00001c6c: 	movq	%r10, (%rdi,%rdx)
    00001c70: 	cmpl	%ecx, %eax
    00001c72: 	jb	.Ltmp1226 # Offset: 7282
    00001c74: 	addl	$0x1, %esi
    00001c77: 	cmpl	%r9d, %esi
    00001c7a: 	jne	.Ltmp1163 # Offset: 7290
    00001c80: 	jmp	.Ltmp1160 # Offset: 7296
.Ltmp1158:
    00001c85: 	testq	%r13, %r13
    00001c88: 	jne	.Ltmp1227 # Offset: 7304
    00001c8e: 	movq	0x8(%rsp), %rax
    00001c93: 	jmp	.Ltmp1228 # Offset: 7315
.Ltmp1104:
    00001c98: 	testq	%r13, %r13
    00001c9b: 	jne	.Ltmp1229 # Offset: 7323
    00001ca1: 	movq	0x8(%rsp), %rax
    00001ca6: 	jmp	.Ltmp1230 # Offset: 7334
.Ltmp1176:
    00001cab: 	testq	%r13, %r13
    00001cae: 	jne	.Ltmp1231 # Offset: 7342
    00001cb4: 	movq	0x8(%rsp), %rax
    00001cb9: 	jmp	.Ltmp1232 # Offset: 7353
.Ltmp1064:
    00001cbe: 	testq	%r13, %r13
    00001cc1: 	jne	.Ltmp1233 # Offset: 7361
    00001cc7: 	movq	0x8(%rsp), %rax
    00001ccc: 	jmp	.Ltmp1234 # Offset: 7372
.Ltmp1058:
    00001cd1: 	testq	%r13, %r13
    00001cd4: 	jne	.Ltmp1235 # Offset: 7380
    00001cda: 	movq	0x8(%rsp), %rax
    00001cdf: 	jmp	.Ltmp1236 # Offset: 7391
.Ltmp1087:
    00001ce4: 	testq	%r13, %r13
    00001ce7: 	jne	.Ltmp1237 # Offset: 7399
    00001ced: 	movq	0x8(%rsp), %rax
    00001cf2: 	jmp	.Ltmp1238 # Offset: 7410
.Ltmp1070:
    00001cf7: 	testq	%r13, %r13
    00001cfa: 	jne	.Ltmp1239 # Offset: 7418
    00001d00: 	movq	0x8(%rsp), %rax
    00001d05: 	jmp	.Ltmp1240 # Offset: 7429
.Ltmp1140:
    00001d0a: 	testq	%r13, %r13
    00001d0d: 	jne	.Ltmp1241 # Offset: 7437
    00001d13: 	movq	0x8(%rsp), %rax
    00001d18: 	jmp	.Ltmp1242 # Offset: 7448
.Ltmp1122:
    00001d1d: 	testq	%r13, %r13
    00001d20: 	jne	.Ltmp1243 # Offset: 7456
    00001d26: 	movq	0x8(%rsp), %rax
    00001d2b: 	jmp	.Ltmp1244 # Offset: 7467
.Ltmp1121:
    00001d30: 	leaq	0x58(%rsp), %rsi
    00001d35: 	xorl	%edx, %edx
    00001d37: 	movq	%r12, %rdi
    00001d3a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7482
    00001d3f: 	movq	%rax, 0x80(%rsp)
    00001d47: 	movq	%rax, %rdi
    00001d4a: 	movq	0x58(%rsp), %rax
    00001d4f: 	movq	%rax, 0x90(%rsp)
.Ltmp1284:
    00001d57: 	movq	%r13, %rdx
    00001d5a: 	movq	%r14, %rsi
    00001d5d: 	callq	memcpy@PLT # Offset: 7517
    00001d62: 	movq	0x58(%rsp), %r13
    00001d67: 	movq	0x80(%rsp), %rax
    00001d6f: 	jmp	.Ltmp1244 # Offset: 7535
.Ltmp1057:
    00001d74: 	leaq	0x58(%rsp), %rsi
    00001d79: 	xorl	%edx, %edx
    00001d7b: 	movq	%r12, %rdi
    00001d7e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7550
    00001d83: 	movq	%rax, 0x80(%rsp)
    00001d8b: 	movq	%rax, %rdi
    00001d8e: 	movq	0x58(%rsp), %rax
    00001d93: 	movq	%rax, 0x90(%rsp)
.Ltmp1280:
    00001d9b: 	movq	%r13, %rdx
    00001d9e: 	movq	%r14, %rsi
    00001da1: 	callq	memcpy@PLT # Offset: 7585
    00001da6: 	movq	0x58(%rsp), %r13
    00001dab: 	movq	0x80(%rsp), %rax
    00001db3: 	jmp	.Ltmp1236 # Offset: 7603
.Ltmp1086:
    00001db8: 	leaq	0x58(%rsp), %rsi
    00001dbd: 	xorl	%edx, %edx
    00001dbf: 	movq	%r12, %rdi
    00001dc2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7618
    00001dc7: 	movq	%rax, 0x80(%rsp)
    00001dcf: 	movq	%rax, %rdi
    00001dd2: 	movq	0x58(%rsp), %rax
    00001dd7: 	movq	%rax, 0x90(%rsp)
.Ltmp1281:
    00001ddf: 	movq	%r13, %rdx
    00001de2: 	movq	%r14, %rsi
    00001de5: 	callq	memcpy@PLT # Offset: 7653
    00001dea: 	movq	0x58(%rsp), %r13
    00001def: 	movq	0x80(%rsp), %rax
    00001df7: 	jmp	.Ltmp1238 # Offset: 7671
.Ltmp1069:
    00001dfc: 	leaq	0x58(%rsp), %rsi
    00001e01: 	xorl	%edx, %edx
    00001e03: 	movq	%r12, %rdi
    00001e06: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7686
    00001e0b: 	movq	%rax, 0x80(%rsp)
    00001e13: 	movq	%rax, %rdi
    00001e16: 	movq	0x58(%rsp), %rax
    00001e1b: 	movq	%rax, 0x90(%rsp)
.Ltmp1282:
    00001e23: 	movq	%r13, %rdx
    00001e26: 	movq	%r14, %rsi
    00001e29: 	callq	memcpy@PLT # Offset: 7721
    00001e2e: 	movq	0x58(%rsp), %r13
    00001e33: 	movq	0x80(%rsp), %rax
    00001e3b: 	jmp	.Ltmp1240 # Offset: 7739
.Ltmp1139:
    00001e40: 	leaq	0x58(%rsp), %rsi
    00001e45: 	xorl	%edx, %edx
    00001e47: 	movq	%r12, %rdi
    00001e4a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7754
    00001e4f: 	movq	%rax, 0x80(%rsp)
    00001e57: 	movq	%rax, %rdi
    00001e5a: 	movq	0x58(%rsp), %rax
    00001e5f: 	movq	%rax, 0x90(%rsp)
.Ltmp1283:
    00001e67: 	movq	%r13, %rdx
    00001e6a: 	movq	%r14, %rsi
    00001e6d: 	callq	memcpy@PLT # Offset: 7789
    00001e72: 	movq	0x58(%rsp), %r13
    00001e77: 	movq	0x80(%rsp), %rax
    00001e7f: 	jmp	.Ltmp1242 # Offset: 7807
.Ltmp1103:
    00001e84: 	leaq	0x58(%rsp), %rsi
    00001e89: 	xorl	%edx, %edx
    00001e8b: 	movq	%r12, %rdi
    00001e8e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7822
    00001e93: 	movq	%rax, 0x80(%rsp)
    00001e9b: 	movq	%rax, %rdi
    00001e9e: 	movq	0x58(%rsp), %rax
    00001ea3: 	movq	%rax, 0x90(%rsp)
.Ltmp1277:
    00001eab: 	movq	%r13, %rdx
    00001eae: 	movq	%r14, %rsi
    00001eb1: 	callq	memcpy@PLT # Offset: 7857
    00001eb6: 	movq	0x58(%rsp), %r13
    00001ebb: 	movq	0x80(%rsp), %rax
    00001ec3: 	jmp	.Ltmp1230 # Offset: 7875
.Ltmp1157:
    00001ec8: 	leaq	0x58(%rsp), %rsi
    00001ecd: 	xorl	%edx, %edx
    00001ecf: 	movq	%r12, %rdi
    00001ed2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7890
    00001ed7: 	movq	%rax, 0x80(%rsp)
    00001edf: 	movq	%rax, %rdi
    00001ee2: 	movq	0x58(%rsp), %rax
    00001ee7: 	movq	%rax, 0x90(%rsp)
.Ltmp1276:
    00001eef: 	movq	%r13, %rdx
    00001ef2: 	movq	%r14, %rsi
    00001ef5: 	callq	memcpy@PLT # Offset: 7925
    00001efa: 	movq	0x58(%rsp), %r13
    00001eff: 	movq	0x80(%rsp), %rax
    00001f07: 	jmp	.Ltmp1228 # Offset: 7943
.Ltmp1051:
    00001f0c: 	leaq	0x58(%rsp), %rsi
    00001f11: 	leaq	0x80(%rsp), %rdi
    00001f19: 	xorl	%edx, %edx
    00001f1b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7963
    00001f20: 	movq	%rax, 0x80(%rsp)
    00001f28: 	movq	%rax, %rdi
    00001f2b: 	movq	0x58(%rsp), %rax
    00001f30: 	movq	%rax, 0x90(%rsp)
.Ltmp1275:
    00001f38: 	movq	%r12, %rdx
    00001f3b: 	movq	%r13, %rsi
    00001f3e: 	callq	memcpy@PLT # Offset: 7998
    00001f43: 	movq	0x58(%rsp), %r12
    00001f48: 	movq	0x80(%rsp), %rax
    00001f50: 	jmp	.Ltmp1185 # Offset: 8016
.Ltmp1175:
    00001f55: 	leaq	0x58(%rsp), %rsi
    00001f5a: 	xorl	%edx, %edx
    00001f5c: 	movq	%r12, %rdi
    00001f5f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8031
    00001f64: 	movq	%rax, 0x80(%rsp)
    00001f6c: 	movq	%rax, %rdi
    00001f6f: 	movq	0x58(%rsp), %rax
    00001f74: 	movq	%rax, 0x90(%rsp)
.Ltmp1278:
    00001f7c: 	movq	%r13, %rdx
    00001f7f: 	movq	%rbp, %rsi
    00001f82: 	callq	memcpy@PLT # Offset: 8066
    00001f87: 	movq	0x58(%rsp), %r13
    00001f8c: 	movq	0x80(%rsp), %rax
    00001f94: 	jmp	.Ltmp1232 # Offset: 8084
.Ltmp1063:
    00001f99: 	leaq	0x58(%rsp), %rsi
    00001f9e: 	xorl	%edx, %edx
    00001fa0: 	movq	%r12, %rdi
    00001fa3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8099
    00001fa8: 	movq	%rax, 0x80(%rsp)
    00001fb0: 	movq	%rax, %rdi
    00001fb3: 	movq	0x58(%rsp), %rax
    00001fb8: 	movq	%rax, 0x90(%rsp)
.Ltmp1279:
    00001fc0: 	movq	%r13, %rdx
    00001fc3: 	movq	%r14, %rsi
    00001fc6: 	callq	memcpy@PLT # Offset: 8134
    00001fcb: 	movq	0x58(%rsp), %r13
    00001fd0: 	movq	0x80(%rsp), %rax
    00001fd8: 	jmp	.Ltmp1234 # Offset: 8152
.Ltmp1151:
    00001fdd: 	movq	-0x8(%rdx), %rax
    00001fe1: 	addq	$0x200, %rax
    00001fe7: 	jmp	.Ltmp1245 # Offset: 8167
.Ltmp1169:
    00001fec: 	movq	-0x8(%rdx), %rax
    00001ff0: 	addq	$0x200, %rax
    00001ff6: 	jmp	.Ltmp1246 # Offset: 8182
.Ltmp1164:
    00001ffb: 	movq	%r12, %rsi
    00001ffe: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002005: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8197
    0000200a: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002011: 	jmp	.Ltmp1247 # Offset: 8209
.Ltmp1146:
    00002016: 	movq	%r12, %rsi
    00002019: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002020: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8224
    00002025: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000202c: 	jmp	.Ltmp1248 # Offset: 8236
.Ltmp1080:
    00002031: 	movq	-0x8(%rdx), %rax
    00002035: 	addq	$0x200, %rax
    0000203b: 	jmp	.Ltmp1249 # Offset: 8251
.Ltmp1133:
    00002040: 	movq	-0x8(%rdx), %rax
    00002044: 	addq	$0x200, %rax
    0000204a: 	jmp	.Ltmp1250 # Offset: 8266
.Ltmp1075:
    0000204f: 	movq	%r12, %rsi
    00002052: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002059: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8281
    0000205e: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002065: 	jmp	.Ltmp1251 # Offset: 8293
.Ltmp1128:
    0000206a: 	movq	%r12, %rsi
    0000206d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002074: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8308
    00002079: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002080: 	jmp	.Ltmp1252 # Offset: 8320
.Ltmp1115:
    00002085: 	movq	-0x8(%rdx), %rax
    00002089: 	addq	$0x200, %rax
    0000208f: 	jmp	.Ltmp1253 # Offset: 8335
.Ltmp1110:
    00002094: 	movq	%r12, %rsi
    00002097: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000209e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8350
    000020a3: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000020aa: 	jmp	.Ltmp1254 # Offset: 8362
.Ltmp1097:
    000020af: 	movq	-0x8(%rdx), %rax
    000020b3: 	addq	$0x200, %rax
    000020b9: 	jmp	.Ltmp1255 # Offset: 8377
.Ltmp1092:
    000020be: 	movq	%r12, %rsi
    000020c1: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000020c8: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8392
    000020cd: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000020d4: 	jmp	.Ltmp1256 # Offset: 8404
.Ltmp1096:
    000020d9: 	testq	%r13, %r13
    000020dc: 	je	.Ltmp1257 # Offset: 8412
    000020e2: 	jmp	.Ltmp1258 # Offset: 8418
    000020e4: 	nopl	(%rax) # Size: 4
.Ltmp1132:
    000020e8: 	testq	%r13, %r13
    000020eb: 	je	.Ltmp1259 # Offset: 8427
    000020f1: 	jmp	.Ltmp1260 # Offset: 8433
    000020f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1114:
    00002100: 	testq	%r13, %r13
    00002103: 	je	.Ltmp1261 # Offset: 8451
    00002109: 	jmp	.Ltmp1262 # Offset: 8457
    0000210e: 	nop # Size: 2
.Ltmp1168:
    00002110: 	testq	%r13, %r13
    00002113: 	je	.Ltmp1263 # Offset: 8467
    00002119: 	jmp	.Ltmp1264 # Offset: 8473
    0000211e: 	nop # Size: 2
.Ltmp1150:
    00002120: 	testq	%r13, %r13
    00002123: 	je	.Ltmp1265 # Offset: 8483
    00002129: 	jmp	.Ltmp1266 # Offset: 8489
    0000212e: 	nop # Size: 2
.Ltmp1079:
    00002130: 	testq	%r13, %r13
    00002133: 	je	.Ltmp1267 # Offset: 8499
    00002139: 	jmp	.Ltmp1268 # Offset: 8505
    0000213b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1095:
    00002140: 	leaq	0x58(%rsp), %rsi
    00002145: 	xorl	%edx, %edx
    00002147: 	movq	%r14, %rdi
    0000214a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8522
    0000214f: 	movq	%rax, (%r14)
    00002152: 	movq	%rax, %rdi
    00002155: 	movq	0x58(%rsp), %rax
    0000215a: 	movq	%rax, 0x10(%r14)
.Ltmp1258:
    0000215e: 	movq	0x18(%rsp), %rsi
    00002163: 	movq	%r13, %rdx
    00002166: 	callq	memcpy@PLT # Offset: 8550
    0000216b: 	movq	0x58(%rsp), %r13
    00002170: 	movq	(%r14), %rdi
    00002173: 	jmp	.Ltmp1257 # Offset: 8563
.Ltmp1078:
    00002178: 	leaq	0x58(%rsp), %rsi
    0000217d: 	xorl	%edx, %edx
    0000217f: 	movq	%rbx, %rdi
    00002182: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8578
    00002187: 	movq	%rax, (%rbx)
    0000218a: 	movq	%rax, %rdi
    0000218d: 	movq	0x58(%rsp), %rax
    00002192: 	movq	%rax, 0x10(%rbx)
.Ltmp1268:
    00002196: 	movq	%r13, %rdx
    00002199: 	movq	%r14, %rsi
    0000219c: 	callq	memcpy@PLT # Offset: 8604
    000021a1: 	movq	0x58(%rsp), %r13
    000021a6: 	movq	(%rbx), %rdi
    000021a9: 	jmp	.Ltmp1267 # Offset: 8617
.Ltmp1113:
    000021ae: 	leaq	0x58(%rsp), %rsi
    000021b3: 	xorl	%edx, %edx
    000021b5: 	movq	%r14, %rdi
    000021b8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8632
    000021bd: 	movq	%rax, (%r14)
    000021c0: 	movq	%rax, %rdi
    000021c3: 	movq	0x58(%rsp), %rax
    000021c8: 	movq	%rax, 0x10(%r14)
.Ltmp1262:
    000021cc: 	movq	0x18(%rsp), %rsi
    000021d1: 	movq	%r13, %rdx
    000021d4: 	callq	memcpy@PLT # Offset: 8660
    000021d9: 	movq	0x58(%rsp), %r13
    000021de: 	movq	(%r14), %rdi
    000021e1: 	jmp	.Ltmp1261 # Offset: 8673
.Ltmp1131:
    000021e6: 	leaq	0x58(%rsp), %rsi
    000021eb: 	xorl	%edx, %edx
    000021ed: 	movq	%r14, %rdi
    000021f0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8688
    000021f5: 	movq	%rax, (%r14)
    000021f8: 	movq	%rax, %rdi
    000021fb: 	movq	0x58(%rsp), %rax
    00002200: 	movq	%rax, 0x10(%r14)
.Ltmp1260:
    00002204: 	movq	0x18(%rsp), %rsi
    00002209: 	movq	%r13, %rdx
    0000220c: 	callq	memcpy@PLT # Offset: 8716
    00002211: 	movq	0x58(%rsp), %r13
    00002216: 	movq	(%r14), %rdi
    00002219: 	jmp	.Ltmp1259 # Offset: 8729
.Ltmp1167:
    0000221e: 	leaq	0x58(%rsp), %rsi
    00002223: 	xorl	%edx, %edx
    00002225: 	movq	%r14, %rdi
    00002228: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8744
    0000222d: 	movq	%rax, (%r14)
    00002230: 	movq	%rax, %rdi
    00002233: 	movq	0x58(%rsp), %rax
    00002238: 	movq	%rax, 0x10(%r14)
.Ltmp1264:
    0000223c: 	movq	0x18(%rsp), %rsi
    00002241: 	movq	%r13, %rdx
    00002244: 	callq	memcpy@PLT # Offset: 8772
    00002249: 	movq	0x58(%rsp), %r13
    0000224e: 	movq	(%r14), %rdi
    00002251: 	jmp	.Ltmp1263 # Offset: 8785
.Ltmp1149:
    00002256: 	leaq	0x58(%rsp), %rsi
    0000225b: 	xorl	%edx, %edx
    0000225d: 	movq	%r14, %rdi
    00002260: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8800
    00002265: 	movq	%rax, (%r14)
    00002268: 	movq	%rax, %rdi
    0000226b: 	movq	0x58(%rsp), %rax
    00002270: 	movq	%rax, 0x10(%r14)
.Ltmp1266:
    00002274: 	movq	0x18(%rsp), %rsi
    00002279: 	movq	%r13, %rdx
    0000227c: 	callq	memcpy@PLT # Offset: 8828
    00002281: 	movq	0x58(%rsp), %r13
    00002286: 	movq	(%r14), %rdi
    00002289: 	jmp	.Ltmp1265 # Offset: 8841
.Ltmp1203:
    0000228e: 	cmpl	$0x3fffff8, %eax
    00002293: 	jle	.Ltmp1269 # Offset: 8851
    00002299: 	jmp	.Ltmp1270 # Offset: 8857
    0000229e: 	nop # Size: 2
.Ltmp1193:
    000022a0: 	movl	%edx, %eax
    000022a2: 	jmp	.Ltmp1271 # Offset: 8866
.Ltmp1198:
    000022a7: 	movl	%r11d, (%rdx)
    000022aa: 	movl	%r11d, -0x4(%rdx,%rax)
    000022af: 	jmp	.Ltmp1196 # Offset: 8879
.Ltmp1222:
    000022b4: 	movl	%r11d, (%rax)
    000022b7: 	movl	%r11d, -0x4(%rax,%rdx)
    000022bc: 	jmp	.Ltmp1220 # Offset: 8892
.Ltmp1215:
    000022c1: 	movl	%r9d, (%rax)
    000022c4: 	movl	%r9d, -0x4(%rax,%rdx)
    000022c9: 	jmp	.Ltmp1213 # Offset: 8905
.Ltmp1208:
    000022ce: 	movl	%r10d, (%rax)
    000022d1: 	movl	%r10d, -0x4(%rax,%rcx)
    000022d6: 	jmp	.Ltmp1206 # Offset: 8918
.Ltmp1187:
    000022db: 	cmpl	$0x3ffffc0, %edx
    000022e1: 	jle	.Ltmp1272 # Offset: 8929
    000022e7: 	jmp	.Ltmp1273 # Offset: 8935
    000022ec: 	nopl	(%rax) # Size: 4
.Ltmp1200:
    000022f0: 	cmpl	$0x3ffffbf, %eax
    000022f5: 	jle	.Ltmp1274 # Offset: 8949
    000022fb: 	jmp	.Ltmp1269 # Offset: 8955
.Ltmp1184:
    00002300: 	movq	0x8(%rsp), %rdi
    00002305: 	jmp	.Ltmp1275 # Offset: 8965
.Ltmp1227:
    0000230a: 	movq	0x8(%rsp), %rdi
    0000230f: 	jmp	.Ltmp1276 # Offset: 8975
.Ltmp1229:
    00002314: 	movq	0x8(%rsp), %rdi
    00002319: 	jmp	.Ltmp1277 # Offset: 8985
.Ltmp1231:
    0000231e: 	movq	0x8(%rsp), %rdi
    00002323: 	jmp	.Ltmp1278 # Offset: 8995
.Ltmp1233:
    00002328: 	movq	0x8(%rsp), %rdi
    0000232d: 	jmp	.Ltmp1279 # Offset: 9005
.Ltmp1235:
    00002332: 	movq	0x8(%rsp), %rdi
    00002337: 	jmp	.Ltmp1280 # Offset: 9015
.Ltmp1237:
    0000233c: 	movq	0x8(%rsp), %rdi
    00002341: 	jmp	.Ltmp1281 # Offset: 9025
.Ltmp1239:
    00002346: 	movq	0x8(%rsp), %rdi
    0000234b: 	jmp	.Ltmp1282 # Offset: 9035
.Ltmp1241:
    00002350: 	movq	0x8(%rsp), %rdi
    00002355: 	jmp	.Ltmp1283 # Offset: 9045
.Ltmp1166:
    0000235a: 	leaq	DATAat0x12008(%rip), %rdi
    00002361: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9057
.Ltmp1174:
    00002366: 	leaq	DATAat0x12008(%rip), %rdi
    0000236d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9069
.Ltmp1177:
    00002372: 	leaq	DATAat0x12288(%rip), %rdi
    00002379: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9081
.Ltmp1180:
    0000237e: 	callq	__stack_chk_fail@PLT # Offset: 9086
.Ltmp1120:
    00002383: 	leaq	DATAat0x12008(%rip), %rdi
    0000238a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9098
.Ltmp1123:
    0000238f: 	leaq	DATAat0x12288(%rip), %rdi
    00002396: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9110
.Ltmp1130:
    0000239b: 	leaq	DATAat0x12008(%rip), %rdi
    000023a2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9122
.Ltmp1138:
    000023a7: 	leaq	DATAat0x12008(%rip), %rdi
    000023ae: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9134
.Ltmp1141:
    000023b3: 	leaq	DATAat0x12288(%rip), %rdi
    000023ba: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9146
.Ltmp1148:
    000023bf: 	leaq	DATAat0x12008(%rip), %rdi
    000023c6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9158
.Ltmp1156:
    000023cb: 	leaq	DATAat0x12008(%rip), %rdi
    000023d2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9170
.Ltmp1159:
    000023d7: 	leaq	DATAat0x12288(%rip), %rdi
    000023de: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9182
.Ltmp1243:
    000023e3: 	movq	0x8(%rsp), %rdi
    000023e8: 	jmp	.Ltmp1284 # Offset: 9192
.Ltmp1050:
    000023ed: 	leaq	DATAat0x12008(%rip), %rdi
    000023f4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9204
.Ltmp1053:
    000023f9: 	leaq	DATAat0x12288(%rip), %rdi
    00002400: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9216
.Ltmp1056:
    00002405: 	leaq	DATAat0x12008(%rip), %rdi
    0000240c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9228
.Ltmp1059:
    00002411: 	leaq	DATAat0x12288(%rip), %rdi
    00002418: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9240
.Ltmp1062:
    0000241d: 	leaq	DATAat0x12008(%rip), %rdi
    00002424: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9252
.Ltmp1065:
    00002429: 	leaq	DATAat0x12288(%rip), %rdi
    00002430: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9264
.Ltmp1068:
    00002435: 	leaq	DATAat0x12008(%rip), %rdi
    0000243c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9276
.Ltmp1071:
    00002441: 	leaq	DATAat0x12288(%rip), %rdi
    00002448: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9288
.Ltmp1077:
    0000244d: 	leaq	DATAat0x12008(%rip), %rdi
    00002454: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9300
.Ltmp1085:
    00002459: 	leaq	DATAat0x12008(%rip), %rdi
    00002460: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9312
.Ltmp1088:
    00002465: 	leaq	DATAat0x12288(%rip), %rdi
    0000246c: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9324
.Ltmp1094:
    00002471: 	leaq	DATAat0x12008(%rip), %rdi
    00002478: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9336
.Ltmp1102:
    0000247d: 	leaq	DATAat0x12008(%rip), %rdi
    00002484: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9348
.Ltmp1105:
    00002489: 	leaq	DATAat0x12288(%rip), %rdi
    00002490: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9360
.Ltmp1112:
    00002495: 	leaq	DATAat0x12008(%rip), %rdi
    0000249c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9372
    000024a1: 	endbr64
.Ltmp1286:
    000024a5: 	movq	%rax, %rbp
    000024a8: 	jmp	.Ltmp1285 # Offset: 9384
    000024aa: 	endbr64
    000024ae: 	jmp	.Ltmp1286 # Offset: 9390
    000024b0: 	endbr64
    000024b4: 	jmp	.Ltmp1286 # Offset: 9396
    000024b6: 	endbr64
    000024ba: 	jmp	.Ltmp1286 # Offset: 9402
    000024bc: 	endbr64
    000024c0: 	jmp	.Ltmp1286 # Offset: 9408
    000024c2: 	endbr64
    000024c6: 	jmp	.Ltmp1286 # Offset: 9414
    000024c8: 	endbr64
    000024cc: 	jmp	.Ltmp1286 # Offset: 9420
    000024ce: 	endbr64
    000024d2: 	jmp	.Ltmp1286 # Offset: 9426
    000024d4: 	endbr64
    000024d8: 	jmp	.Ltmp1286 # Offset: 9432
    000024da: 	endbr64
    000024de: 	jmp	.Ltmp1286 # Offset: 9438
    000024e0: 	endbr64
    000024e4: 	jmp	.Ltmp1286 # Offset: 9444
    000024e6: 	endbr64
    000024ea: 	jmp	.Ltmp1286 # Offset: 9450
    000024ec: 	endbr64
    000024f0: 	jmp	.Ltmp1286 # Offset: 9456
    000024f2: 	endbr64
    000024f6: 	movq	%rax, %rbp
    000024f9: 	jmp	.Ltmp1287 # Offset: 9465
    000024fb: 	endbr64
    000024ff: 	jmp	.Ltmp1286 # Offset: 9471
    00002501: 	endbr64
    00002505: 	jmp	.Ltmp1286 # Offset: 9477
    00002507: 	endbr64
    0000250b: 	jmp	.Ltmp1286 # Offset: 9483
    0000250d: 	endbr64
    00002511: 	jmp	.Ltmp1286 # Offset: 9489
.Ltmp1285:
    00002513: 	movq	0x80(%rsp), %rdi
    0000251b: 	cmpq	0x8(%rsp), %rdi
    00002520: 	je	.Ltmp1287 # Offset: 9504
    00002522: 	movq	0x90(%rsp), %rax
    0000252a: 	leaq	0x1(%rax), %rsi
    0000252e: 	callq	_ZdlPvm@PLT # Offset: 9518
.Ltmp1287:
    00002533: 	movq	0x60(%rsp), %rdi
    00002538: 	cmpq	0x10(%rsp), %rdi
    0000253d: 	je	.Ltmp1288 # Offset: 9533
    0000253f: 	movq	0x70(%rsp), %rax
    00002544: 	leaq	0x1(%rax), %rsi
    00002548: 	callq	_ZdlPvm@PLT # Offset: 9544
.Ltmp1288:
    0000254d: 	movq	%rbp, %rdi
    00002550: 	callq	_Unwind_Resume@PLT # Offset: 9552
    00002555: 	endbr64
    00002559: 	jmp	.Ltmp1286 # Offset: 9561
    0000255e: 	endbr64
    00002562: 	jmp	.Ltmp1286 # Offset: 9570
    00002567: 	endbr64
    0000256b: 	jmp	.Ltmp1286 # Offset: 9579
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeItEvv"

Binary Function "_Z11TestOneTypeImEvv" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0xf6b0
  Size        : 0x25d0
  MaxSize     : 0x25d0
  Offset      : 0xf6b0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeImEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0xb8, %rsp
    00000015: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm6
    0000001d: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    00000024: 	movq	%fs:0x28, %rax
    0000002d: 	movq	%rax, 0xa8(%rsp)
    00000035: 	xorl	%eax, %eax
    00000037: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000003e: 	movaps	%xmm6, 0x20(%rsp)
    00000043: 	movq	%xmm6, %rbp
    00000048: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm6
    00000050: 	movq	%rax, 0x8(%rsp)
    00000055: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000005c: 	movhlps	%xmm6, %xmm7
    0000005f: 	movaps	%xmm6, 0x30(%rsp)
    00000064: 	movq	%xmm7, %rbx
    00000069: 	movq	%rax, 0x18(%rsp)
    0000006e: 	leaq	0x8(%rbx), %r12
    00000072: 	movq	%xmm7, 0x40(%rsp)
    00000078: 	movq	%xmm6, 0x10(%rsp)
    0000007e: 	cmpq	%r12, %rax
    00000081: 	jbe	.Ltmp1289 # Offset: 129
    00000083: 	movq	%rbp, 0x48(%rsp)
    00000088: 	movq	%r12, %r13
    0000008b: 	movq	%rax, %r15
    0000008e: 	nop # Size: 2
.Ltmp1292:
    00000090: 	movq	(%r13), %rbp
    00000094: 	leaq	0x200(%rbp), %rbx
    0000009b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1291:
    000000a0: 	movq	(%rbp), %rdi
    000000a4: 	leaq	0x10(%rbp), %rdx
    000000a8: 	cmpq	%rdx, %rdi
    000000ab: 	je	.Ltmp1290 # Offset: 171
    000000b1: 	movq	0x10(%rbp), %rax
    000000b5: 	addq	$0x20, %rbp
    000000b9: 	leaq	0x1(%rax), %rsi
    000000bd: 	callq	_ZdlPvm@PLT # Offset: 189
    000000c2: 	cmpq	%rbp, %rbx
    000000c5: 	jne	.Ltmp1291 # Offset: 197
    000000c7: 	addq	$0x8, %r13
    000000cb: 	cmpq	%r13, %r15
    000000ce: 	ja	.Ltmp1292 # Offset: 206
.Ltmp1436:
    000000d0: 	movq	0x48(%rsp), %rbp
.Ltmp1289:
    000000d5: 	movq	0x40(%rsp), %rbx
    000000da: 	cmpq	%rbx, 0x18(%rsp)
    000000df: 	jne	.Ltmp1293 # Offset: 223
    000000e1: 	jmp	.Ltmp1294 # Offset: 225
    000000e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1296:
    000000f0: 	movq	(%rbp), %rdi
    000000f4: 	leaq	0x10(%rbp), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp1295 # Offset: 251
    000000fd: 	movq	0x10(%rbp), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp1295:
    0000010a: 	addq	$0x20, %rbp
.Ltmp1293:
    0000010e: 	cmpq	0x10(%rsp), %rbp
    00000113: 	jne	.Ltmp1296 # Offset: 275
    00000115: 	cmpq	%r14, 0x8(%rsp)
    0000011a: 	je	.Ltmp1297 # Offset: 282
    0000011c: 	nopl	(%rax) # Size: 4
.Ltmp1299:
    00000120: 	movq	(%r14), %rdi
    00000123: 	leaq	0x10(%r14), %rax
    00000127: 	cmpq	%rax, %rdi
    0000012a: 	je	.Ltmp1298 # Offset: 298
    0000012c: 	movq	0x10(%r14), %rax
    00000130: 	leaq	0x1(%rax), %rsi
    00000134: 	callq	_ZdlPvm@PLT # Offset: 308
.Ltmp1298:
    00000139: 	addq	$0x20, %r14
    0000013d: 	cmpq	%r14, 0x8(%rsp)
    00000142: 	jne	.Ltmp1299 # Offset: 322
.Ltmp1297:
    00000144: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000014b: 	leaq	0x8(%rax), %rbx
    0000014f: 	cmpq	%r12, %rbx
    00000152: 	jbe	.Ltmp1300 # Offset: 338
    00000154: 	nopl	(%rax) # Size: 4
.Ltmp1301:
    00000158: 	movq	(%r12), %rdi
    0000015c: 	movl	$0x200, %esi
    00000161: 	addq	$0x8, %r12
    00000165: 	callq	_ZdlPvm@PLT # Offset: 357
    0000016a: 	cmpq	%r12, %rbx
    0000016d: 	ja	.Ltmp1301 # Offset: 365
.Ltmp1300:
    0000016f: 	movdqa	0x20(%rsp), %xmm6
    00000175: 	leaq	0x70(%rsp), %rax
    0000017a: 	movl	$0x4000000, %edi
    0000017f: 	movq	$0x8, 0x68(%rsp)
    00000188: 	movq	%rax, 0x10(%rsp)
    0000018d: 	movaps	%xmm6, "_ZL7gLabels/1"+48(%rip)
    00000194: 	movdqa	0x30(%rsp), %xmm6
    0000019a: 	movq	%rax, 0x60(%rsp)
    0000019f: 	movabsq	$0x745f3436746e6975, %rax
    000001a9: 	movq	%rax, 0x70(%rsp)
    000001ae: 	movb	$0x0, 0x78(%rsp)
    000001b3: 	movaps	%xmm6, "_ZL7gLabels/1"+64(%rip)
    000001ba: 	callq	_Znam@PLT # Offset: 442
    000001bf: 	movq	0x60(%rsp), %r13
    000001c4: 	movq	0x68(%rsp), %r12
    000001c9: 	movq	%rax, %rbp
    000001cc: 	leaq	0x90(%rsp), %rax
    000001d4: 	movq	%rax, 0x8(%rsp)
    000001d9: 	movq	%rax, 0x80(%rsp)
    000001e1: 	movq	%r13, %rax
    000001e4: 	addq	%r12, %rax
    000001e7: 	je	.Ltmp1302 # Offset: 487
    000001e9: 	testq	%r13, %r13
    000001ec: 	je	.Ltmp1303 # Offset: 492
.Ltmp1302:
    000001f2: 	movq	%r12, 0x58(%rsp)
    000001f7: 	cmpq	$0xf, %r12
    000001fb: 	ja	.Ltmp1304 # Offset: 507
    00000201: 	cmpq	$0x1, %r12
    00000205: 	jne	.Ltmp1305 # Offset: 517
    0000020b: 	movzbl	(%r13), %eax
    00000210: 	movb	%al, 0x90(%rsp)
    00000217: 	movq	0x8(%rsp), %rax
.Ltmp1438:
    0000021c: 	movq	%r12, 0x88(%rsp)
    00000224: 	movb	$0x0, (%rax,%r12)
    00000229: 	movabsq	$0x3fffffffffffffff, %rax
    00000233: 	subq	0x88(%rsp), %rax
    0000023b: 	cmpq	$0x6, %rax
    0000023f: 	jbe	.Ltmp1306 # Offset: 575
    00000245: 	leaq	0x80(%rsp), %r12
    0000024d: 	movl	$0x7, %edx
    00000252: 	leaq	DATAat0x1229d(%rip), %rsi
    00000259: 	movq	%r12, %rdi
    0000025c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 604
    00000261: 	movzbl	init_value(%rip), %edx
    00000268: 	movq	%r12, %rcx
    0000026b: 	movl	$0x800000, %esi
    00000270: 	movq	%rbp, %rdi
    00000273: 	callq	_Z19test_library_memsetImEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 627
    00000278: 	movq	0x80(%rsp), %rdi
    00000280: 	cmpq	0x8(%rsp), %rdi
    00000285: 	je	.Ltmp1307 # Offset: 645
    00000287: 	movq	0x90(%rsp), %rax
    0000028f: 	leaq	0x1(%rax), %rsi
    00000293: 	callq	_ZdlPvm@PLT # Offset: 659
.Ltmp1307:
    00000298: 	movq	0x8(%rsp), %rax
    0000029d: 	movq	0x60(%rsp), %r14
    000002a2: 	movq	0x68(%rsp), %r13
    000002a7: 	movq	%rax, 0x80(%rsp)
    000002af: 	movq	%r14, %rax
    000002b2: 	addq	%r13, %rax
    000002b5: 	je	.Ltmp1308 # Offset: 693
    000002b7: 	testq	%r14, %r14
    000002ba: 	je	.Ltmp1309 # Offset: 698
.Ltmp1308:
    000002c0: 	movq	%r13, 0x58(%rsp)
    000002c5: 	cmpq	$0xf, %r13
    000002c9: 	ja	.Ltmp1310 # Offset: 713
    000002cf: 	cmpq	$0x1, %r13
    000002d3: 	jne	.Ltmp1311 # Offset: 723
    000002d9: 	movzbl	(%r14), %eax
    000002dd: 	movb	%al, 0x90(%rsp)
    000002e4: 	movq	0x8(%rsp), %rax
.Ltmp1489:
    000002e9: 	movq	%r13, 0x88(%rsp)
    000002f1: 	movb	$0x0, (%rax,%r13)
    000002f6: 	movabsq	$0x3fffffffffffffff, %rax
    00000300: 	subq	0x88(%rsp), %rax
    00000308: 	cmpq	$0x9, %rax
    0000030c: 	jbe	.Ltmp1312 # Offset: 780
    00000312: 	movl	$0xa, %edx
    00000317: 	leaq	DATAat0x122a5(%rip), %rsi
    0000031e: 	movq	%r12, %rdi
    00000321: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 801
    00000326: 	movzbl	init_value(%rip), %edx
    0000032d: 	movq	%r12, %rcx
    00000330: 	movl	$0x800000, %esi
    00000335: 	movq	%rbp, %rdi
    00000338: 	callq	_Z13test_std_fillImEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 824
    0000033d: 	movq	0x80(%rsp), %rdi
    00000345: 	cmpq	0x8(%rsp), %rdi
    0000034a: 	je	.Ltmp1313 # Offset: 842
    0000034c: 	movq	0x90(%rsp), %rax
    00000354: 	leaq	0x1(%rax), %rsi
    00000358: 	callq	_ZdlPvm@PLT # Offset: 856
.Ltmp1313:
    0000035d: 	movq	0x8(%rsp), %rax
    00000362: 	movq	0x60(%rsp), %r14
    00000367: 	movq	0x68(%rsp), %r13
    0000036c: 	movq	%rax, 0x80(%rsp)
    00000374: 	movq	%r14, %rax
    00000377: 	addq	%r13, %rax
    0000037a: 	je	.Ltmp1314 # Offset: 890
    0000037c: 	testq	%r14, %r14
    0000037f: 	je	.Ltmp1315 # Offset: 895
.Ltmp1314:
    00000385: 	movq	%r13, 0x58(%rsp)
    0000038a: 	cmpq	$0xf, %r13
    0000038e: 	ja	.Ltmp1316 # Offset: 910
    00000394: 	cmpq	$0x1, %r13
    00000398: 	jne	.Ltmp1317 # Offset: 920
    0000039e: 	movzbl	(%r14), %eax
    000003a2: 	movb	%al, 0x90(%rsp)
    000003a9: 	movq	0x8(%rsp), %rax
.Ltmp1487:
    000003ae: 	movq	%r13, 0x88(%rsp)
    000003b6: 	movb	$0x0, (%rax,%r13)
    000003bb: 	movabsq	$0x3fffffffffffffff, %rax
    000003c5: 	subq	0x88(%rsp), %rax
    000003cd: 	cmpq	$0xd, %rax
    000003d1: 	jbe	.Ltmp1318 # Offset: 977
    000003d7: 	movl	$0xe, %edx
    000003dc: 	leaq	DATAat0x122b0(%rip), %rsi
    000003e3: 	movq	%r12, %rdi
    000003e6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 998
    000003eb: 	movzbl	init_value(%rip), %edx
    000003f2: 	movq	%r12, %rcx
    000003f5: 	movl	$0x800000, %esi
    000003fa: 	movq	%rbp, %rdi
    000003fd: 	callq	_Z18test_iterator_fillImEvPT_ihNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1021
    00000402: 	movq	0x80(%rsp), %rdi
    0000040a: 	cmpq	0x8(%rsp), %rdi
    0000040f: 	je	.Ltmp1319 # Offset: 1039
    00000411: 	movq	0x90(%rsp), %rax
    00000419: 	leaq	0x1(%rax), %rsi
    0000041d: 	callq	_ZdlPvm@PLT # Offset: 1053
.Ltmp1319:
    00000422: 	movq	0x8(%rsp), %rax
    00000427: 	movq	0x60(%rsp), %r14
    0000042c: 	movq	0x68(%rsp), %r13
    00000431: 	movq	%rax, 0x80(%rsp)
    00000439: 	movq	%r14, %rax
    0000043c: 	addq	%r13, %rax
    0000043f: 	je	.Ltmp1320 # Offset: 1087
    00000441: 	testq	%r14, %r14
    00000444: 	je	.Ltmp1321 # Offset: 1092
.Ltmp1320:
    0000044a: 	movq	%r13, 0x58(%rsp)
    0000044f: 	cmpq	$0xf, %r13
    00000453: 	ja	.Ltmp1322 # Offset: 1107
    00000459: 	cmpq	$0x1, %r13
    0000045d: 	jne	.Ltmp1323 # Offset: 1117
    00000463: 	movzbl	(%r14), %eax
    00000467: 	movb	%al, 0x90(%rsp)
    0000046e: 	movq	0x8(%rsp), %rax
.Ltmp1493:
    00000473: 	movq	%r13, 0x88(%rsp)
    0000047b: 	movb	$0x0, (%rax,%r13)
    00000480: 	movabsq	$0x3fffffffffffffff, %rax
    0000048a: 	subq	0x88(%rsp), %rax
    00000492: 	cmpq	$0xd, %rax
    00000496: 	jbe	.Ltmp1324 # Offset: 1174
    0000049c: 	movl	$0xe, %edx
    000004a1: 	leaq	DATAat0x122bf(%rip), %rsi
    000004a8: 	movq	%r12, %rdi
    000004ab: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1195
    000004b0: 	movzbl	init_value(%rip), %ebx
    000004b7: 	movq	%rbx, %rax
    000004ba: 	shlq	$0x8, %rax
    000004be: 	addq	%rbx, %rax
    000004c1: 	shlq	$0x8, %rax
    000004c5: 	addq	%rbx, %rax
    000004c8: 	shlq	$0x8, %rax
    000004cc: 	addq	%rbx, %rax
    000004cf: 	shlq	$0x8, %rax
    000004d3: 	addq	%rbx, %rax
    000004d6: 	shlq	$0x8, %rax
    000004da: 	addq	%rbx, %rax
    000004dd: 	shlq	$0x8, %rax
    000004e1: 	addq	%rbx, %rax
    000004e4: 	shlq	$0x8, %rax
    000004e8: 	addq	%rax, %rbx
    000004eb: 	callq	clock@PLT # Offset: 1259
    000004f0: 	movl	iterations(%rip), %esi
    000004f6: 	xorl	%ecx, %ecx
    000004f8: 	movq	%rbx, %xmm0
    000004fd: 	movq	%rax, start_time(%rip)
    00000504: 	punpcklqdq	%xmm0, %xmm0
    00000508: 	leaq	0x4000000(%rbp), %rdx
    0000050f: 	testl	%esi, %esi
    00000511: 	jle	.Ltmp1325 # Offset: 1297
    00000513: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1327:
    00000518: 	movq	%rbp, %rax
    0000051b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1326:
    00000520: 	movups	%xmm0, (%rax)
    00000523: 	addq	$0x10, %rax
    00000527: 	cmpq	%rax, %rdx
    0000052a: 	jne	.Ltmp1326 # Offset: 1322
    0000052c: 	addl	$0x1, %ecx
    0000052f: 	cmpl	%esi, %ecx
    00000531: 	jne	.Ltmp1327 # Offset: 1329
.Ltmp1325:
    00000533: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000053a: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00000541: 	subq	$0x20, %rax
    00000545: 	cmpq	%rax, %rbx
    00000548: 	je	.Ltmp1328 # Offset: 1352
    0000054e: 	leaq	0x10(%rbx), %rdi
    00000552: 	movq	0x88(%rsp), %r13
    0000055a: 	movq	%rdi, (%rbx)
    0000055d: 	movq	0x80(%rsp), %r14
    00000565: 	movq	%r14, %rax
    00000568: 	addq	%r13, %rax
    0000056b: 	je	.Ltmp1329 # Offset: 1387
    0000056d: 	testq	%r14, %r14
    00000570: 	je	.Ltmp1330 # Offset: 1392
.Ltmp1329:
    00000576: 	movq	%r13, 0x58(%rsp)
    0000057b: 	cmpq	$0xf, %r13
    0000057f: 	ja	.Ltmp1331 # Offset: 1407
    00000585: 	cmpq	$0x1, %r13
    00000589: 	jne	.Ltmp1332 # Offset: 1417
    0000058f: 	movzbl	(%r14), %eax
    00000593: 	movb	%al, 0x10(%rbx)
.Ltmp1520:
    00000596: 	movq	%r13, 0x8(%rbx)
    0000059a: 	movb	$0x0, (%rdi,%r13)
    0000059f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000005a6: 	addq	$0x20, %rax
    000005aa: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1504:
    000005b1: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000005b8: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000005bf: 	je	.Ltmp1333 # Offset: 1471
.Ltmp1502:
    000005c5: 	movq	-0x20(%rax), %r13
    000005c9: 	callq	clock@PLT # Offset: 1481
    000005ce: 	pxor	%xmm0, %xmm0
    000005d2: 	movq	%rax, end_time(%rip)
    000005d9: 	movq	%r13, %rdi
    000005dc: 	subq	start_time(%rip), %rax
    000005e3: 	cvtsi2sd	%rax, %xmm0
    000005e8: 	divsd	DATAat0x12360(%rip), %xmm0
    000005f0: 	callq	_Z13record_resultdPKc # Offset: 1520
    000005f5: 	movq	%rbp, %r15
    000005f8: 	pxor	%xmm1, %xmm1
    000005fc: 	pxor	%xmm7, %xmm7
    00000600: 	movq	%rbp, %rax
    00000603: 	leaq	0x4000000(%rbp), %rbx
    0000060a: 	pxor	%xmm6, %xmm6
    0000060e: 	pxor	%xmm5, %xmm5
    00000612: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1334:
    00000618: 	movdqu	(%rax), %xmm0
    0000061c: 	addq	$0x10, %rax
    00000620: 	movdqa	%xmm0, %xmm3
    00000624: 	punpckhbw	%xmm7, %xmm0
    00000628: 	punpcklbw	%xmm7, %xmm3
    0000062c: 	movdqa	%xmm0, %xmm4
    00000630: 	punpckhwd	%xmm6, %xmm0
    00000634: 	movdqa	%xmm3, %xmm2
    00000638: 	punpckhwd	%xmm6, %xmm3
    0000063c: 	punpcklwd	%xmm6, %xmm4
    00000640: 	punpcklwd	%xmm6, %xmm2
    00000644: 	movdqa	%xmm2, %xmm8
    00000649: 	punpckldq	%xmm5, %xmm2
    0000064d: 	punpckhdq	%xmm5, %xmm8
    00000652: 	paddq	%xmm8, %xmm2
    00000657: 	movdqa	%xmm3, %xmm8
    0000065c: 	punpckldq	%xmm5, %xmm3
    00000660: 	punpckhdq	%xmm5, %xmm8
    00000665: 	paddq	%xmm8, %xmm3
    0000066a: 	paddq	%xmm3, %xmm2
    0000066e: 	movdqa	%xmm4, %xmm3
    00000672: 	punpckldq	%xmm5, %xmm4
    00000676: 	punpckhdq	%xmm5, %xmm3
    0000067a: 	paddq	%xmm3, %xmm4
    0000067e: 	movdqa	%xmm0, %xmm3
    00000682: 	punpckhdq	%xmm5, %xmm0
    00000686: 	punpckldq	%xmm5, %xmm3
    0000068a: 	paddq	%xmm0, %xmm1
    0000068e: 	paddq	%xmm3, %xmm4
    00000692: 	paddq	%xmm4, %xmm2
    00000696: 	paddq	%xmm2, %xmm1
    0000069a: 	cmpq	%rbx, %rax
    0000069d: 	jne	.Ltmp1334 # Offset: 1693
    000006a3: 	movdqa	%xmm1, %xmm0
    000006a7: 	movzbl	init_value(%rip), %edx
    000006ae: 	movq	0x80(%rsp), %rdi
    000006b6: 	psrldq	$0x8, %xmm0
    000006bb: 	paddq	%xmm0, %xmm1
    000006bf: 	shlq	$0x1a, %rdx
    000006c3: 	movq	%xmm1, %rax
    000006c8: 	cmpq	%rax, %rdx
    000006cb: 	je	.Ltmp1335 # Offset: 1739
    000006cd: 	movq	%rdi, %rdx
    000006d0: 	leaq	DATAat0x12278(%rip), %rsi
    000006d7: 	movl	$0x1, %edi
    000006dc: 	xorl	%eax, %eax
    000006de: 	callq	__printf_chk@PLT # Offset: 1758
    000006e3: 	movq	0x80(%rsp), %rdi
.Ltmp1335:
    000006eb: 	cmpq	0x8(%rsp), %rdi
    000006f0: 	je	.Ltmp1336 # Offset: 1776
    000006f2: 	movq	0x90(%rsp), %rax
    000006fa: 	leaq	0x1(%rax), %rsi
    000006fe: 	callq	_ZdlPvm@PLT # Offset: 1790
.Ltmp1336:
    00000703: 	movq	0x8(%rsp), %rax
    00000708: 	movq	0x60(%rsp), %r14
    0000070d: 	movq	0x68(%rsp), %r13
    00000712: 	movq	%rax, 0x80(%rsp)
    0000071a: 	movq	%r14, %rax
    0000071d: 	addq	%r13, %rax
    00000720: 	je	.Ltmp1337 # Offset: 1824
    00000722: 	testq	%r14, %r14
    00000725: 	je	.Ltmp1338 # Offset: 1829
.Ltmp1337:
    0000072b: 	movq	%r13, 0x58(%rsp)
    00000730: 	cmpq	$0xf, %r13
    00000734: 	ja	.Ltmp1339 # Offset: 1844
    0000073a: 	cmpq	$0x1, %r13
    0000073e: 	jne	.Ltmp1340 # Offset: 1854
    00000744: 	movzbl	(%r14), %eax
    00000748: 	movb	%al, 0x90(%rsp)
    0000074f: 	movq	0x8(%rsp), %rax
.Ltmp1491:
    00000754: 	movq	%r13, 0x88(%rsp)
    0000075c: 	movb	$0x0, (%rax,%r13)
    00000761: 	movabsq	$0x3fffffffffffffff, %rax
    0000076b: 	subq	0x88(%rsp), %rax
    00000773: 	cmpq	$0x16, %rax
    00000777: 	jbe	.Ltmp1341 # Offset: 1911
    0000077d: 	movl	$0x17, %edx
    00000782: 	leaq	DATAat0x122ce(%rip), %rsi
    00000789: 	movq	%r12, %rdi
    0000078c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1932
    00000791: 	movzbl	init_value(%rip), %r13d
    00000799: 	movq	%r13, %rax
    0000079c: 	shlq	$0x8, %rax
    000007a0: 	addq	%r13, %rax
    000007a3: 	shlq	$0x8, %rax
    000007a7: 	addq	%r13, %rax
    000007aa: 	shlq	$0x8, %rax
    000007ae: 	addq	%r13, %rax
    000007b1: 	shlq	$0x8, %rax
    000007b5: 	addq	%r13, %rax
    000007b8: 	shlq	$0x8, %rax
    000007bc: 	addq	%r13, %rax
    000007bf: 	shlq	$0x8, %rax
    000007c3: 	addq	%r13, %rax
    000007c6: 	shlq	$0x8, %rax
    000007ca: 	addq	%rax, %r13
    000007cd: 	callq	clock@PLT # Offset: 1997
    000007d2: 	movl	iterations(%rip), %ecx
    000007d8: 	movq	%r13, %xmm0
    000007dd: 	xorl	%edx, %edx
    000007df: 	movq	%rax, start_time(%rip)
    000007e6: 	punpcklqdq	%xmm0, %xmm0
    000007ea: 	testl	%ecx, %ecx
    000007ec: 	jle	.Ltmp1342 # Offset: 2028
    000007ee: 	nop # Size: 2
.Ltmp1344:
    000007f0: 	movq	%rbp, %rax
    000007f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1343:
    000007f8: 	movups	%xmm0, (%rax)
    000007fb: 	addq	$0x40, %rax
    000007ff: 	movups	%xmm0, -0x30(%rax)
    00000803: 	movups	%xmm0, -0x20(%rax)
    00000807: 	movups	%xmm0, -0x10(%rax)
    0000080b: 	cmpq	%rbx, %rax
    0000080e: 	jne	.Ltmp1343 # Offset: 2062
    00000810: 	addl	$0x1, %edx
    00000813: 	cmpl	%ecx, %edx
    00000815: 	jne	.Ltmp1344 # Offset: 2069
.Ltmp1342:
    00000817: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000081e: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00000825: 	subq	$0x20, %rax
    00000829: 	cmpq	%rax, %r14
    0000082c: 	je	.Ltmp1345 # Offset: 2092
    00000832: 	leaq	0x10(%r14), %rdi
    00000836: 	movq	0x88(%rsp), %r13
    0000083e: 	movq	%rdi, (%r14)
    00000841: 	movq	0x80(%rsp), %rax
    00000849: 	movq	%rax, %rcx
    0000084c: 	movq	%rax, 0x18(%rsp)
    00000851: 	addq	%r13, %rcx
    00000854: 	je	.Ltmp1346 # Offset: 2132
    00000856: 	testq	%rax, %rax
    00000859: 	je	.Ltmp1347 # Offset: 2137
.Ltmp1346:
    0000085f: 	movq	%r13, 0x58(%rsp)
    00000864: 	cmpq	$0xf, %r13
    00000868: 	ja	.Ltmp1348 # Offset: 2152
    0000086e: 	cmpq	$0x1, %r13
    00000872: 	jne	.Ltmp1349 # Offset: 2162
    00000878: 	movq	0x18(%rsp), %rax
    0000087d: 	movzbl	(%rax), %eax
    00000880: 	movb	%al, 0x10(%r14)
.Ltmp1510:
    00000884: 	movq	%r13, 0x8(%r14)
    00000888: 	movb	$0x0, (%rdi,%r13)
    0000088d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000894: 	addq	$0x20, %rax
    00000898: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1509:
    0000089f: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000008a6: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000008ad: 	je	.Ltmp1350 # Offset: 2221
.Ltmp1508:
    000008b3: 	movq	-0x20(%rax), %r13
    000008b7: 	callq	clock@PLT # Offset: 2231
    000008bc: 	pxor	%xmm0, %xmm0
    000008c0: 	movq	%rax, end_time(%rip)
    000008c7: 	movq	%r13, %rdi
    000008ca: 	subq	start_time(%rip), %rax
    000008d1: 	cvtsi2sd	%rax, %xmm0
    000008d6: 	divsd	DATAat0x12360(%rip), %xmm0
    000008de: 	callq	_Z13record_resultdPKc # Offset: 2270
    000008e3: 	pxor	%xmm1, %xmm1
    000008e7: 	pxor	%xmm7, %xmm7
    000008eb: 	pxor	%xmm6, %xmm6
    000008ef: 	movq	%rbp, %rax
    000008f2: 	pxor	%xmm5, %xmm5
    000008f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1351:
    00000900: 	movdqu	(%rax), %xmm0
    00000904: 	addq	$0x10, %rax
    00000908: 	movdqa	%xmm0, %xmm3
    0000090c: 	punpckhbw	%xmm7, %xmm0
    00000910: 	punpcklbw	%xmm7, %xmm3
    00000914: 	movdqa	%xmm0, %xmm4
    00000918: 	punpckhwd	%xmm6, %xmm0
    0000091c: 	movdqa	%xmm3, %xmm2
    00000920: 	punpckhwd	%xmm6, %xmm3
    00000924: 	punpcklwd	%xmm6, %xmm4
    00000928: 	punpcklwd	%xmm6, %xmm2
    0000092c: 	movdqa	%xmm2, %xmm8
    00000931: 	punpckldq	%xmm5, %xmm2
    00000935: 	punpckhdq	%xmm5, %xmm8
    0000093a: 	paddq	%xmm8, %xmm2
    0000093f: 	movdqa	%xmm3, %xmm8
    00000944: 	punpckldq	%xmm5, %xmm3
    00000948: 	punpckhdq	%xmm5, %xmm8
    0000094d: 	paddq	%xmm8, %xmm3
    00000952: 	paddq	%xmm3, %xmm2
    00000956: 	movdqa	%xmm4, %xmm3
    0000095a: 	punpckldq	%xmm5, %xmm4
    0000095e: 	punpckhdq	%xmm5, %xmm3
    00000962: 	paddq	%xmm3, %xmm4
    00000966: 	movdqa	%xmm0, %xmm3
    0000096a: 	punpckhdq	%xmm5, %xmm0
    0000096e: 	punpckldq	%xmm5, %xmm3
    00000972: 	paddq	%xmm0, %xmm1
    00000976: 	paddq	%xmm3, %xmm4
    0000097a: 	paddq	%xmm4, %xmm2
    0000097e: 	paddq	%xmm2, %xmm1
    00000982: 	cmpq	%rax, %rbx
    00000985: 	jne	.Ltmp1351 # Offset: 2437
    0000098b: 	movdqa	%xmm1, %xmm0
    0000098f: 	movzbl	init_value(%rip), %edx
    00000996: 	movq	0x80(%rsp), %rdi
    0000099e: 	psrldq	$0x8, %xmm0
    000009a3: 	paddq	%xmm0, %xmm1
    000009a7: 	shlq	$0x1a, %rdx
    000009ab: 	movq	%xmm1, %rax
    000009b0: 	cmpq	%rax, %rdx
    000009b3: 	je	.Ltmp1352 # Offset: 2483
    000009b5: 	movq	%rdi, %rdx
    000009b8: 	leaq	DATAat0x12278(%rip), %rsi
    000009bf: 	movl	$0x1, %edi
    000009c4: 	xorl	%eax, %eax
    000009c6: 	callq	__printf_chk@PLT # Offset: 2502
    000009cb: 	movq	0x80(%rsp), %rdi
.Ltmp1352:
    000009d3: 	cmpq	0x8(%rsp), %rdi
    000009d8: 	je	.Ltmp1353 # Offset: 2520
    000009da: 	movq	0x90(%rsp), %rax
    000009e2: 	leaq	0x1(%rax), %rsi
    000009e6: 	callq	_ZdlPvm@PLT # Offset: 2534
.Ltmp1353:
    000009eb: 	movq	0x8(%rsp), %rax
    000009f0: 	movq	0x60(%rsp), %r14
    000009f5: 	movq	0x68(%rsp), %r13
    000009fa: 	movq	%rax, 0x80(%rsp)
    00000a02: 	movq	%r14, %rax
    00000a05: 	addq	%r13, %rax
    00000a08: 	je	.Ltmp1354 # Offset: 2568
    00000a0a: 	testq	%r14, %r14
    00000a0d: 	je	.Ltmp1355 # Offset: 2573
.Ltmp1354:
    00000a13: 	movq	%r13, 0x58(%rsp)
    00000a18: 	cmpq	$0xf, %r13
    00000a1c: 	ja	.Ltmp1356 # Offset: 2588
    00000a22: 	cmpq	$0x1, %r13
    00000a26: 	jne	.Ltmp1357 # Offset: 2598
    00000a2c: 	movzbl	(%r14), %eax
    00000a30: 	movb	%al, 0x90(%rsp)
    00000a37: 	movq	0x8(%rsp), %rax
.Ltmp1483:
    00000a3c: 	movq	%r13, 0x88(%rsp)
    00000a44: 	movb	$0x0, (%rax,%r13)
    00000a49: 	movabsq	$0x3fffffffffffffff, %rax
    00000a53: 	subq	0x88(%rsp), %rax
    00000a5b: 	cmpq	$0x13, %rax
    00000a5f: 	jbe	.Ltmp1358 # Offset: 2655
    00000a65: 	movl	$0x14, %edx
    00000a6a: 	leaq	DATAat0x122e6(%rip), %rsi
    00000a71: 	movq	%r12, %rdi
    00000a74: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2676
    00000a79: 	movzbl	init_value(%rip), %r13d
    00000a81: 	callq	clock@PLT # Offset: 2689
    00000a86: 	movl	iterations(%rip), %r10d
    00000a8d: 	movq	%rax, start_time(%rip)
    00000a94: 	testl	%r10d, %r10d
    00000a97: 	jle	.Ltmp1359 # Offset: 2711
    00000a99: 	movzbl	%r13b, %eax
    00000a9d: 	movzbl	%r13b, %r11d
    00000aa1: 	xorl	%esi, %esi
    00000aa3: 	movl	%eax, %r9d
    00000aa6: 	shll	$0x8, %r9d
    00000aaa: 	orl	%eax, %r9d
    00000aad: 	movl	%r9d, %eax
    00000ab0: 	shll	$0x10, %eax
    00000ab3: 	orl	%eax, %r9d
    00000ab6: 	movabsq	$0x101010101010101, %rax
    00000ac0: 	imulq	%rax, %r11
    00000ac4: 	movd	%r9d, %xmm6
    00000ac9: 	pshufd	$0x0, %xmm6, %xmm0
    00000ace: 	nop # Size: 2
.Ltmp1362:
    00000ad0: 	movq	%rbp, %rdx
    00000ad3: 	xorl	%eax, %eax
    00000ad5: 	nopl	(%rax) # Size: 3
.Ltmp1361:
    00000ad8: 	testb	$0x3, %dl
    00000adb: 	je	.Ltmp1360 # Offset: 2779
    00000ae1: 	addl	$0x1, %eax
    00000ae4: 	movb	%r13b, (%rdx)
    00000ae7: 	addq	$0x1, %rdx
    00000aeb: 	cmpl	$0x4000000, %eax
    00000af0: 	jne	.Ltmp1361 # Offset: 2800
.Ltmp1473:
    00000af2: 	addl	$0x1, %esi
    00000af5: 	cmpl	%r10d, %esi
    00000af8: 	jne	.Ltmp1362 # Offset: 2808
.Ltmp1359:
    00000afa: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000b01: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00000b08: 	subq	$0x20, %rax
    00000b0c: 	cmpq	%rax, %r14
    00000b0f: 	je	.Ltmp1363 # Offset: 2831
    00000b15: 	leaq	0x10(%r14), %rdi
    00000b19: 	movq	0x88(%rsp), %r13
    00000b21: 	movq	%rdi, (%r14)
    00000b24: 	movq	0x80(%rsp), %rax
    00000b2c: 	movq	%rax, %rcx
    00000b2f: 	movq	%rax, 0x18(%rsp)
    00000b34: 	addq	%r13, %rcx
    00000b37: 	je	.Ltmp1364 # Offset: 2871
    00000b39: 	testq	%rax, %rax
    00000b3c: 	je	.Ltmp1365 # Offset: 2876
.Ltmp1364:
    00000b42: 	movq	%r13, 0x58(%rsp)
    00000b47: 	cmpq	$0xf, %r13
    00000b4b: 	ja	.Ltmp1366 # Offset: 2891
    00000b51: 	cmpq	$0x1, %r13
    00000b55: 	jne	.Ltmp1367 # Offset: 2901
    00000b5b: 	movq	0x18(%rsp), %rax
    00000b60: 	movzbl	(%rax), %eax
    00000b63: 	movb	%al, 0x10(%r14)
.Ltmp1514:
    00000b67: 	movq	%r13, 0x8(%r14)
    00000b6b: 	movb	$0x0, (%rdi,%r13)
    00000b70: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000b77: 	addq	$0x20, %rax
    00000b7b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1507:
    00000b82: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000b89: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000b90: 	je	.Ltmp1368 # Offset: 2960
.Ltmp1506:
    00000b96: 	movq	-0x20(%rax), %r13
    00000b9a: 	callq	clock@PLT # Offset: 2970
    00000b9f: 	pxor	%xmm0, %xmm0
    00000ba3: 	movq	%rax, end_time(%rip)
    00000baa: 	movq	%r13, %rdi
    00000bad: 	subq	start_time(%rip), %rax
    00000bb4: 	cvtsi2sd	%rax, %xmm0
    00000bb9: 	divsd	DATAat0x12360(%rip), %xmm0
    00000bc1: 	callq	_Z13record_resultdPKc # Offset: 3009
    00000bc6: 	pxor	%xmm1, %xmm1
    00000bca: 	pxor	%xmm7, %xmm7
    00000bce: 	pxor	%xmm6, %xmm6
    00000bd2: 	movq	%rbp, %rax
    00000bd5: 	pxor	%xmm5, %xmm5
    00000bd9: 	nopl	(%rax) # Size: 7
.Ltmp1369:
    00000be0: 	movdqu	(%rax), %xmm0
    00000be4: 	addq	$0x10, %rax
    00000be8: 	movdqa	%xmm0, %xmm3
    00000bec: 	punpckhbw	%xmm7, %xmm0
    00000bf0: 	punpcklbw	%xmm7, %xmm3
    00000bf4: 	movdqa	%xmm0, %xmm4
    00000bf8: 	punpckhwd	%xmm6, %xmm0
    00000bfc: 	movdqa	%xmm3, %xmm2
    00000c00: 	punpckhwd	%xmm6, %xmm3
    00000c04: 	punpcklwd	%xmm6, %xmm4
    00000c08: 	punpcklwd	%xmm6, %xmm2
    00000c0c: 	movdqa	%xmm2, %xmm8
    00000c11: 	punpckldq	%xmm5, %xmm2
    00000c15: 	punpckhdq	%xmm5, %xmm8
    00000c1a: 	paddq	%xmm8, %xmm2
    00000c1f: 	movdqa	%xmm3, %xmm8
    00000c24: 	punpckldq	%xmm5, %xmm3
    00000c28: 	punpckhdq	%xmm5, %xmm8
    00000c2d: 	paddq	%xmm8, %xmm3
    00000c32: 	paddq	%xmm3, %xmm2
    00000c36: 	movdqa	%xmm4, %xmm3
    00000c3a: 	punpckldq	%xmm5, %xmm4
    00000c3e: 	punpckhdq	%xmm5, %xmm3
    00000c42: 	paddq	%xmm3, %xmm4
    00000c46: 	movdqa	%xmm0, %xmm3
    00000c4a: 	punpckhdq	%xmm5, %xmm0
    00000c4e: 	punpckldq	%xmm5, %xmm3
    00000c52: 	paddq	%xmm0, %xmm1
    00000c56: 	paddq	%xmm3, %xmm4
    00000c5a: 	paddq	%xmm4, %xmm2
    00000c5e: 	paddq	%xmm2, %xmm1
    00000c62: 	cmpq	%rbx, %rax
    00000c65: 	jne	.Ltmp1369 # Offset: 3173
    00000c6b: 	movdqa	%xmm1, %xmm0
    00000c6f: 	movzbl	init_value(%rip), %edx
    00000c76: 	movq	0x80(%rsp), %rdi
    00000c7e: 	psrldq	$0x8, %xmm0
    00000c83: 	paddq	%xmm0, %xmm1
    00000c87: 	shlq	$0x1a, %rdx
    00000c8b: 	movq	%xmm1, %rax
    00000c90: 	cmpq	%rax, %rdx
    00000c93: 	je	.Ltmp1370 # Offset: 3219
    00000c95: 	movq	%rdi, %rdx
    00000c98: 	leaq	DATAat0x12278(%rip), %rsi
    00000c9f: 	movl	$0x1, %edi
    00000ca4: 	xorl	%eax, %eax
    00000ca6: 	callq	__printf_chk@PLT # Offset: 3238
    00000cab: 	movq	0x80(%rsp), %rdi
.Ltmp1370:
    00000cb3: 	cmpq	0x8(%rsp), %rdi
    00000cb8: 	je	.Ltmp1371 # Offset: 3256
    00000cba: 	movq	0x90(%rsp), %rax
    00000cc2: 	leaq	0x1(%rax), %rsi
    00000cc6: 	callq	_ZdlPvm@PLT # Offset: 3270
.Ltmp1371:
    00000ccb: 	movq	0x8(%rsp), %rax
    00000cd0: 	movq	0x60(%rsp), %r14
    00000cd5: 	movq	0x68(%rsp), %r13
    00000cda: 	movq	%rax, 0x80(%rsp)
    00000ce2: 	movq	%r14, %rax
    00000ce5: 	addq	%r13, %rax
    00000ce8: 	je	.Ltmp1372 # Offset: 3304
    00000cea: 	testq	%r14, %r14
    00000ced: 	je	.Ltmp1373 # Offset: 3309
.Ltmp1372:
    00000cf3: 	movq	%r13, 0x58(%rsp)
    00000cf8: 	cmpq	$0xf, %r13
    00000cfc: 	ja	.Ltmp1374 # Offset: 3324
    00000d02: 	cmpq	$0x1, %r13
    00000d06: 	jne	.Ltmp1375 # Offset: 3334
    00000d0c: 	movzbl	(%r14), %eax
    00000d10: 	movb	%al, 0x90(%rsp)
    00000d17: 	movq	0x8(%rsp), %rax
.Ltmp1497:
    00000d1c: 	movq	%r13, 0x88(%rsp)
    00000d24: 	movb	$0x0, (%rax,%r13)
    00000d29: 	movabsq	$0x3fffffffffffffff, %rax
    00000d33: 	subq	0x88(%rsp), %rax
    00000d3b: 	cmpq	$0x13, %rax
    00000d3f: 	jbe	.Ltmp1376 # Offset: 3391
    00000d45: 	movl	$0x14, %edx
    00000d4a: 	leaq	DATAat0x122fb(%rip), %rsi
    00000d51: 	movq	%r12, %rdi
    00000d54: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3412
    00000d59: 	movzbl	init_value(%rip), %r13d
    00000d61: 	callq	clock@PLT # Offset: 3425
    00000d66: 	movl	iterations(%rip), %r8d
    00000d6d: 	movq	%rax, start_time(%rip)
    00000d74: 	testl	%r8d, %r8d
    00000d77: 	jle	.Ltmp1377 # Offset: 3447
    00000d79: 	movzbl	%r13b, %r9d
    00000d7d: 	xorl	%esi, %esi
    00000d7f: 	movl	$0x4000000, %r11d
    00000d85: 	movl	$0x3fffff8, %r14d
    00000d8b: 	movq	%r9, %rax
    00000d8e: 	shlq	$0x8, %rax
    00000d92: 	orq	%r9, %rax
    00000d95: 	movq	%rax, %rdx
    00000d98: 	shlq	$0x10, %rdx
    00000d9c: 	orq	%rdx, %rax
    00000d9f: 	movq	%rax, %rdx
    00000da2: 	shlq	$0x20, %rdx
    00000da6: 	orq	%rdx, %rax
    00000da9: 	movq	%rax, %xmm0
    00000dae: 	movq	%rax, %xmm1
    00000db3: 	movabsq	$0x101010101010101, %rax
    00000dbd: 	imulq	%rax, %r9
    00000dc1: 	punpcklqdq	%xmm0, %xmm0
    00000dc5: 	nopl	(%rax) # Size: 3
.Ltmp1380:
    00000dc8: 	movq	%rbp, %rdx
    00000dcb: 	xorl	%eax, %eax
    00000dcd: 	nopl	(%rax) # Size: 3
.Ltmp1379:
    00000dd0: 	testb	$0x7, %dl
    00000dd3: 	je	.Ltmp1378 # Offset: 3539
    00000dd9: 	addl	$0x1, %eax
    00000ddc: 	movb	%r13b, (%rdx)
    00000ddf: 	addq	$0x1, %rdx
    00000de3: 	cmpl	$0x4000000, %eax
    00000de8: 	jne	.Ltmp1379 # Offset: 3560
.Ltmp1466:
    00000dea: 	addl	$0x1, %esi
    00000ded: 	cmpl	%r8d, %esi
    00000df0: 	jne	.Ltmp1380 # Offset: 3568
.Ltmp1377:
    00000df2: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000df9: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00000e00: 	subq	$0x20, %rax
    00000e04: 	cmpq	%rax, %r14
    00000e07: 	je	.Ltmp1381 # Offset: 3591
    00000e0d: 	leaq	0x10(%r14), %rdi
    00000e11: 	movq	0x88(%rsp), %r13
    00000e19: 	movq	%rdi, (%r14)
    00000e1c: 	movq	0x80(%rsp), %rax
    00000e24: 	movq	%rax, %rcx
    00000e27: 	movq	%rax, 0x18(%rsp)
    00000e2c: 	addq	%r13, %rcx
    00000e2f: 	je	.Ltmp1382 # Offset: 3631
    00000e31: 	testq	%rax, %rax
    00000e34: 	je	.Ltmp1383 # Offset: 3636
.Ltmp1382:
    00000e3a: 	movq	%r13, 0x58(%rsp)
    00000e3f: 	cmpq	$0xf, %r13
    00000e43: 	ja	.Ltmp1384 # Offset: 3651
    00000e49: 	cmpq	$0x1, %r13
    00000e4d: 	jne	.Ltmp1385 # Offset: 3661
    00000e53: 	movq	0x18(%rsp), %rax
    00000e58: 	movzbl	(%rax), %eax
    00000e5b: 	movb	%al, 0x10(%r14)
.Ltmp1512:
    00000e5f: 	movq	%r13, 0x8(%r14)
    00000e63: 	movb	$0x0, (%rdi,%r13)
    00000e68: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000e6f: 	addq	$0x20, %rax
    00000e73: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1505:
    00000e7a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000e81: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000e88: 	je	.Ltmp1386 # Offset: 3720
.Ltmp1503:
    00000e8e: 	movq	-0x20(%rax), %r13
    00000e92: 	callq	clock@PLT # Offset: 3730
    00000e97: 	pxor	%xmm0, %xmm0
    00000e9b: 	movq	%rax, end_time(%rip)
    00000ea2: 	movq	%r13, %rdi
    00000ea5: 	subq	start_time(%rip), %rax
    00000eac: 	cvtsi2sd	%rax, %xmm0
    00000eb1: 	divsd	DATAat0x12360(%rip), %xmm0
    00000eb9: 	callq	_Z13record_resultdPKc # Offset: 3769
    00000ebe: 	pxor	%xmm2, %xmm2
    00000ec2: 	pxor	%xmm6, %xmm6
    00000ec6: 	pxor	%xmm5, %xmm5
    00000eca: 	movq	%rbp, %rax
    00000ecd: 	pxor	%xmm4, %xmm4
    00000ed1: 	nopl	(%rax) # Size: 7
.Ltmp1387:
    00000ed8: 	movdqu	(%rax), %xmm1
    00000edc: 	addq	$0x10, %rax
    00000ee0: 	movdqa	%xmm1, %xmm0
    00000ee4: 	punpckhbw	%xmm6, %xmm1
    00000ee8: 	punpcklbw	%xmm6, %xmm0
    00000eec: 	movdqa	%xmm1, %xmm3
    00000ef0: 	punpckhwd	%xmm5, %xmm1
    00000ef4: 	movdqa	%xmm0, %xmm7
    00000ef8: 	punpckhwd	%xmm5, %xmm0
    00000efc: 	punpcklwd	%xmm5, %xmm3
    00000f00: 	movdqa	%xmm0, %xmm8
    00000f05: 	punpcklwd	%xmm5, %xmm7
    00000f09: 	punpckldq	%xmm4, %xmm0
    00000f0d: 	punpckhdq	%xmm4, %xmm8
    00000f12: 	paddq	%xmm8, %xmm0
    00000f17: 	movdqa	%xmm7, %xmm8
    00000f1c: 	punpckldq	%xmm4, %xmm7
    00000f20: 	punpckhdq	%xmm4, %xmm8
    00000f25: 	paddq	%xmm8, %xmm7
    00000f2a: 	paddq	%xmm7, %xmm0
    00000f2e: 	movdqa	%xmm3, %xmm7
    00000f32: 	punpckldq	%xmm4, %xmm3
    00000f36: 	punpckhdq	%xmm4, %xmm7
    00000f3a: 	paddq	%xmm7, %xmm3
    00000f3e: 	movdqa	%xmm1, %xmm7
    00000f42: 	punpckhdq	%xmm4, %xmm1
    00000f46: 	punpckldq	%xmm4, %xmm7
    00000f4a: 	paddq	%xmm1, %xmm2
    00000f4e: 	paddq	%xmm7, %xmm3
    00000f52: 	paddq	%xmm3, %xmm0
    00000f56: 	paddq	%xmm0, %xmm2
    00000f5a: 	cmpq	%rbx, %rax
    00000f5d: 	jne	.Ltmp1387 # Offset: 3933
    00000f63: 	movdqa	%xmm2, %xmm0
    00000f67: 	movzbl	init_value(%rip), %edx
    00000f6e: 	movq	0x80(%rsp), %rdi
    00000f76: 	psrldq	$0x8, %xmm0
    00000f7b: 	paddq	%xmm0, %xmm2
    00000f7f: 	shlq	$0x1a, %rdx
    00000f83: 	movq	%xmm2, %rax
    00000f88: 	cmpq	%rax, %rdx
    00000f8b: 	je	.Ltmp1388 # Offset: 3979
    00000f8d: 	movq	%rdi, %rdx
    00000f90: 	leaq	DATAat0x12278(%rip), %rsi
    00000f97: 	movl	$0x1, %edi
    00000f9c: 	xorl	%eax, %eax
    00000f9e: 	callq	__printf_chk@PLT # Offset: 3998
    00000fa3: 	movq	0x80(%rsp), %rdi
.Ltmp1388:
    00000fab: 	cmpq	0x8(%rsp), %rdi
    00000fb0: 	je	.Ltmp1389 # Offset: 4016
    00000fb2: 	movq	0x90(%rsp), %rax
    00000fba: 	leaq	0x1(%rax), %rsi
    00000fbe: 	callq	_ZdlPvm@PLT # Offset: 4030
.Ltmp1389:
    00000fc3: 	movq	0x8(%rsp), %rax
    00000fc8: 	movq	0x60(%rsp), %r14
    00000fcd: 	movq	0x68(%rsp), %r13
    00000fd2: 	movq	%rax, 0x80(%rsp)
    00000fda: 	movq	%r14, %rax
    00000fdd: 	addq	%r13, %rax
    00000fe0: 	je	.Ltmp1390 # Offset: 4064
    00000fe2: 	testq	%r14, %r14
    00000fe5: 	je	.Ltmp1391 # Offset: 4069
.Ltmp1390:
    00000feb: 	movq	%r13, 0x58(%rsp)
    00000ff0: 	cmpq	$0xf, %r13
    00000ff4: 	ja	.Ltmp1392 # Offset: 4084
    00000ffa: 	cmpq	$0x1, %r13
    00000ffe: 	jne	.Ltmp1393 # Offset: 4094
    00001004: 	movzbl	(%r14), %eax
    00001008: 	movb	%al, 0x90(%rsp)
    0000100f: 	movq	0x8(%rsp), %rax
.Ltmp1495:
    00001014: 	movq	%r13, 0x88(%rsp)
    0000101c: 	movb	$0x0, (%rax,%r13)
    00001021: 	movabsq	$0x3fffffffffffffff, %rax
    0000102b: 	subq	0x88(%rsp), %rax
    00001033: 	cmpq	$0x1d, %rax
    00001037: 	jbe	.Ltmp1394 # Offset: 4151
    0000103d: 	movl	$0x1e, %edx
    00001042: 	leaq	DATAat0x12310(%rip), %rsi
    00001049: 	movq	%r12, %rdi
    0000104c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4172
    00001051: 	movzbl	init_value(%rip), %r13d
    00001059: 	callq	clock@PLT # Offset: 4185
    0000105e: 	movl	iterations(%rip), %r10d
    00001065: 	movq	%rax, start_time(%rip)
    0000106c: 	testl	%r10d, %r10d
    0000106f: 	jle	.Ltmp1395 # Offset: 4207
    00001071: 	movzbl	%r13b, %eax
    00001075: 	movzbl	%r13b, %r11d
    00001079: 	xorl	%edi, %edi
    0000107b: 	movl	$0x4000000, %r14d
    00001081: 	movl	%eax, %esi
    00001083: 	shll	$0x8, %esi
    00001086: 	orl	%eax, %esi
    00001088: 	movl	%esi, %eax
    0000108a: 	shll	$0x10, %eax
    0000108d: 	orl	%eax, %esi
    0000108f: 	movabsq	$0x101010101010101, %rax
    00001099: 	imulq	%rax, %r11
    0000109d: 	movd	%esi, %xmm6
    000010a1: 	pshufd	$0x0, %xmm6, %xmm0
    000010a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1398:
    000010b0: 	movq	%rbp, %rax
    000010b3: 	xorl	%edx, %edx
    000010b5: 	nopl	(%rax) # Size: 3
.Ltmp1397:
    000010b8: 	testb	$0x3, %al
    000010ba: 	je	.Ltmp1396 # Offset: 4282
    000010c0: 	addl	$0x1, %edx
    000010c3: 	movb	%r13b, (%rax)
    000010c6: 	addq	$0x1, %rax
    000010ca: 	cmpl	$0x4000000, %edx
    000010d0: 	jne	.Ltmp1397 # Offset: 4304
.Ltmp1449:
    000010d2: 	addl	$0x1, %edi
    000010d5: 	cmpl	%r10d, %edi
    000010d8: 	jne	.Ltmp1398 # Offset: 4312
.Ltmp1395:
    000010da: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000010e1: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000010e8: 	subq	$0x20, %rax
    000010ec: 	cmpq	%rax, %r14
    000010ef: 	je	.Ltmp1399 # Offset: 4335
    000010f5: 	leaq	0x10(%r14), %rdi
    000010f9: 	movq	0x88(%rsp), %r13
    00001101: 	movq	%rdi, (%r14)
    00001104: 	movq	0x80(%rsp), %rax
    0000110c: 	movq	%rax, %rcx
    0000110f: 	movq	%rax, 0x18(%rsp)
    00001114: 	addq	%r13, %rcx
    00001117: 	je	.Ltmp1400 # Offset: 4375
    00001119: 	testq	%rax, %rax
    0000111c: 	je	.Ltmp1401 # Offset: 4380
.Ltmp1400:
    00001122: 	movq	%r13, 0x58(%rsp)
    00001127: 	cmpq	$0xf, %r13
    0000112b: 	ja	.Ltmp1402 # Offset: 4395
    00001131: 	cmpq	$0x1, %r13
    00001135: 	jne	.Ltmp1403 # Offset: 4405
    0000113b: 	movq	0x18(%rsp), %rax
    00001140: 	movzbl	(%rax), %eax
    00001143: 	movb	%al, 0x10(%r14)
.Ltmp1518:
    00001147: 	movq	%r13, 0x8(%r14)
    0000114b: 	movb	$0x0, (%rdi,%r13)
    00001150: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001157: 	addq	$0x20, %rax
    0000115b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1501:
    00001162: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001169: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001170: 	je	.Ltmp1404 # Offset: 4464
.Ltmp1498:
    00001176: 	movq	-0x20(%rax), %r13
    0000117a: 	callq	clock@PLT # Offset: 4474
    0000117f: 	pxor	%xmm0, %xmm0
    00001183: 	movq	%rax, end_time(%rip)
    0000118a: 	movq	%r13, %rdi
    0000118d: 	subq	start_time(%rip), %rax
    00001194: 	cvtsi2sd	%rax, %xmm0
    00001199: 	divsd	DATAat0x12360(%rip), %xmm0
    000011a1: 	callq	_Z13record_resultdPKc # Offset: 4513
    000011a6: 	pxor	%xmm1, %xmm1
    000011aa: 	pxor	%xmm7, %xmm7
    000011ae: 	pxor	%xmm6, %xmm6
    000011b2: 	movq	%rbp, %rax
    000011b5: 	pxor	%xmm5, %xmm5
    000011b9: 	nopl	(%rax) # Size: 7
.Ltmp1405:
    000011c0: 	movdqu	(%rax), %xmm0
    000011c4: 	addq	$0x10, %rax
    000011c8: 	movdqa	%xmm0, %xmm3
    000011cc: 	punpckhbw	%xmm7, %xmm0
    000011d0: 	punpcklbw	%xmm7, %xmm3
    000011d4: 	movdqa	%xmm0, %xmm4
    000011d8: 	punpckhwd	%xmm6, %xmm0
    000011dc: 	movdqa	%xmm3, %xmm2
    000011e0: 	punpckhwd	%xmm6, %xmm3
    000011e4: 	punpcklwd	%xmm6, %xmm4
    000011e8: 	punpcklwd	%xmm6, %xmm2
    000011ec: 	movdqa	%xmm2, %xmm8
    000011f1: 	punpckldq	%xmm5, %xmm2
    000011f5: 	punpckhdq	%xmm5, %xmm8
    000011fa: 	paddq	%xmm8, %xmm2
    000011ff: 	movdqa	%xmm3, %xmm8
    00001204: 	punpckldq	%xmm5, %xmm3
    00001208: 	punpckhdq	%xmm5, %xmm8
    0000120d: 	paddq	%xmm8, %xmm3
    00001212: 	paddq	%xmm3, %xmm2
    00001216: 	movdqa	%xmm4, %xmm3
    0000121a: 	punpckldq	%xmm5, %xmm4
    0000121e: 	punpckhdq	%xmm5, %xmm3
    00001222: 	paddq	%xmm3, %xmm4
    00001226: 	movdqa	%xmm0, %xmm3
    0000122a: 	punpckhdq	%xmm5, %xmm0
    0000122e: 	punpckldq	%xmm5, %xmm3
    00001232: 	paddq	%xmm0, %xmm1
    00001236: 	paddq	%xmm3, %xmm4
    0000123a: 	paddq	%xmm4, %xmm2
    0000123e: 	paddq	%xmm2, %xmm1
    00001242: 	cmpq	%rbx, %rax
    00001245: 	jne	.Ltmp1405 # Offset: 4677
    0000124b: 	movdqa	%xmm1, %xmm0
    0000124f: 	movzbl	init_value(%rip), %edx
    00001256: 	movq	0x80(%rsp), %rdi
    0000125e: 	psrldq	$0x8, %xmm0
    00001263: 	paddq	%xmm0, %xmm1
    00001267: 	shlq	$0x1a, %rdx
    0000126b: 	movq	%xmm1, %rax
    00001270: 	cmpq	%rax, %rdx
    00001273: 	je	.Ltmp1406 # Offset: 4723
    00001275: 	movq	%rdi, %rdx
    00001278: 	leaq	DATAat0x12278(%rip), %rsi
    0000127f: 	movl	$0x1, %edi
    00001284: 	xorl	%eax, %eax
    00001286: 	callq	__printf_chk@PLT # Offset: 4742
    0000128b: 	movq	0x80(%rsp), %rdi
.Ltmp1406:
    00001293: 	cmpq	0x8(%rsp), %rdi
    00001298: 	je	.Ltmp1407 # Offset: 4760
    0000129a: 	movq	0x90(%rsp), %rax
    000012a2: 	leaq	0x1(%rax), %rsi
    000012a6: 	callq	_ZdlPvm@PLT # Offset: 4774
.Ltmp1407:
    000012ab: 	movq	0x8(%rsp), %rax
    000012b0: 	movq	0x60(%rsp), %r14
    000012b5: 	movq	0x68(%rsp), %r13
    000012ba: 	movq	%rax, 0x80(%rsp)
    000012c2: 	movq	%r14, %rax
    000012c5: 	addq	%r13, %rax
    000012c8: 	je	.Ltmp1408 # Offset: 4808
    000012ca: 	testq	%r14, %r14
    000012cd: 	je	.Ltmp1409 # Offset: 4813
.Ltmp1408:
    000012d3: 	movq	%r13, 0x58(%rsp)
    000012d8: 	cmpq	$0xf, %r13
    000012dc: 	ja	.Ltmp1410 # Offset: 4828
    000012e2: 	cmpq	$0x1, %r13
    000012e6: 	jne	.Ltmp1411 # Offset: 4838
    000012ec: 	movzbl	(%r14), %eax
    000012f0: 	movb	%al, 0x90(%rsp)
    000012f7: 	movq	0x8(%rsp), %rax
.Ltmp1481:
    000012fc: 	movq	%r13, 0x88(%rsp)
    00001304: 	movb	$0x0, (%rax,%r13)
    00001309: 	movabsq	$0x3fffffffffffffff, %rax
    00001313: 	subq	0x88(%rsp), %rax
    0000131b: 	cmpq	$0x1d, %rax
    0000131f: 	jbe	.Ltmp1412 # Offset: 4895
    00001325: 	movl	$0x1e, %edx
    0000132a: 	leaq	DATAat0x12330(%rip), %rsi
    00001331: 	movq	%r12, %rdi
    00001334: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4916
    00001339: 	movzbl	init_value(%rip), %r13d
    00001341: 	callq	clock@PLT # Offset: 4929
    00001346: 	movl	iterations(%rip), %r9d
    0000134d: 	movq	%rax, start_time(%rip)
    00001354: 	testl	%r9d, %r9d
    00001357: 	jle	.Ltmp1413 # Offset: 4951
    00001359: 	movzbl	%r13b, %r10d
    0000135d: 	xorl	%esi, %esi
    0000135f: 	movl	$0x4000000, %r11d
    00001365: 	movl	$0x1, %r14d
    0000136b: 	movq	%r10, %rax
    0000136e: 	shlq	$0x8, %rax
    00001372: 	orq	%r10, %rax
    00001375: 	movq	%rax, %rdx
    00001378: 	shlq	$0x10, %rdx
    0000137c: 	orq	%rdx, %rax
    0000137f: 	movq	%rax, %rdx
    00001382: 	shlq	$0x20, %rdx
    00001386: 	orq	%rdx, %rax
    00001389: 	movq	%rax, %xmm1
    0000138e: 	movabsq	$0x101010101010101, %rax
    00001398: 	imulq	%rax, %r10
    0000139c: 	movdqa	%xmm1, %xmm0
    000013a0: 	punpcklqdq	%xmm0, %xmm0
    000013a4: 	nopl	(%rax) # Size: 4
.Ltmp1416:
    000013a8: 	movq	%rbp, %rdx
    000013ab: 	xorl	%eax, %eax
    000013ad: 	nopl	(%rax) # Size: 3
.Ltmp1415:
    000013b0: 	testb	$0x7, %dl
    000013b3: 	je	.Ltmp1414 # Offset: 5043
    000013b9: 	addl	$0x1, %eax
    000013bc: 	movb	%r13b, (%rdx)
    000013bf: 	addq	$0x1, %rdx
    000013c3: 	cmpl	$0x4000000, %eax
    000013c8: 	jne	.Ltmp1415 # Offset: 5064
.Ltmp1459:
    000013ca: 	addl	$0x1, %esi
    000013cd: 	cmpl	%r9d, %esi
    000013d0: 	jne	.Ltmp1416 # Offset: 5072
.Ltmp1413:
    000013d2: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000013d9: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000013e0: 	subq	$0x20, %rax
    000013e4: 	cmpq	%rax, %r14
    000013e7: 	je	.Ltmp1417 # Offset: 5095
    000013ed: 	leaq	0x10(%r14), %rdi
    000013f1: 	movq	0x88(%rsp), %r13
    000013f9: 	movq	%rdi, (%r14)
    000013fc: 	movq	0x80(%rsp), %rax
    00001404: 	movq	%rax, %rcx
    00001407: 	movq	%rax, 0x18(%rsp)
    0000140c: 	addq	%r13, %rcx
    0000140f: 	je	.Ltmp1418 # Offset: 5135
    00001411: 	testq	%rax, %rax
    00001414: 	je	.Ltmp1419 # Offset: 5140
.Ltmp1418:
    0000141a: 	movq	%r13, 0x58(%rsp)
    0000141f: 	cmpq	$0xf, %r13
    00001423: 	ja	.Ltmp1420 # Offset: 5155
    00001429: 	cmpq	$0x1, %r13
    0000142d: 	jne	.Ltmp1421 # Offset: 5165
    00001433: 	movq	0x18(%rsp), %rax
    00001438: 	movzbl	(%rax), %eax
    0000143b: 	movb	%al, 0x10(%r14)
.Ltmp1516:
    0000143f: 	movq	%r13, 0x8(%r14)
    00001443: 	movb	$0x0, (%rdi,%r13)
    00001448: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000144f: 	addq	$0x20, %rax
    00001453: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1500:
    0000145a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001461: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001468: 	je	.Ltmp1422 # Offset: 5224
.Ltmp1499:
    0000146e: 	movq	-0x20(%rax), %r13
    00001472: 	callq	clock@PLT # Offset: 5234
    00001477: 	pxor	%xmm0, %xmm0
    0000147b: 	movq	%rax, end_time(%rip)
    00001482: 	movq	%r13, %rdi
    00001485: 	subq	start_time(%rip), %rax
    0000148c: 	cvtsi2sd	%rax, %xmm0
    00001491: 	divsd	DATAat0x12360(%rip), %xmm0
    00001499: 	callq	_Z13record_resultdPKc # Offset: 5273
    0000149e: 	pxor	%xmm1, %xmm1
    000014a2: 	pxor	%xmm7, %xmm7
    000014a6: 	pxor	%xmm6, %xmm6
    000014aa: 	pxor	%xmm5, %xmm5
    000014ae: 	nop # Size: 2
.Ltmp1423:
    000014b0: 	movdqu	(%r15), %xmm0
    000014b5: 	addq	$0x10, %r15
    000014b9: 	movdqa	%xmm0, %xmm3
    000014bd: 	punpckhbw	%xmm7, %xmm0
    000014c1: 	punpcklbw	%xmm7, %xmm3
    000014c5: 	movdqa	%xmm0, %xmm4
    000014c9: 	punpckhwd	%xmm6, %xmm0
    000014cd: 	movdqa	%xmm3, %xmm2
    000014d1: 	punpckhwd	%xmm6, %xmm3
    000014d5: 	punpcklwd	%xmm6, %xmm4
    000014d9: 	punpcklwd	%xmm6, %xmm2
    000014dd: 	movdqa	%xmm2, %xmm8
    000014e2: 	punpckhdq	%xmm5, %xmm2
    000014e6: 	punpckldq	%xmm5, %xmm8
    000014eb: 	paddq	%xmm8, %xmm2
    000014f0: 	movdqa	%xmm3, %xmm8
    000014f5: 	punpckhdq	%xmm5, %xmm3
    000014f9: 	punpckldq	%xmm5, %xmm8
    000014fe: 	paddq	%xmm8, %xmm3
    00001503: 	paddq	%xmm3, %xmm2
    00001507: 	movdqa	%xmm4, %xmm3
    0000150b: 	punpckldq	%xmm5, %xmm4
    0000150f: 	punpckhdq	%xmm5, %xmm3
    00001513: 	paddq	%xmm3, %xmm4
    00001517: 	movdqa	%xmm0, %xmm3
    0000151b: 	punpckhdq	%xmm5, %xmm0
    0000151f: 	punpckldq	%xmm5, %xmm3
    00001523: 	paddq	%xmm0, %xmm1
    00001527: 	paddq	%xmm3, %xmm4
    0000152b: 	paddq	%xmm4, %xmm2
    0000152f: 	paddq	%xmm2, %xmm1
    00001533: 	cmpq	%rbx, %r15
    00001536: 	jne	.Ltmp1423 # Offset: 5430
    0000153c: 	movdqa	%xmm1, %xmm0
    00001540: 	movzbl	init_value(%rip), %edx
    00001547: 	movq	0x80(%rsp), %rdi
    0000154f: 	psrldq	$0x8, %xmm0
    00001554: 	paddq	%xmm0, %xmm1
    00001558: 	shlq	$0x1a, %rdx
    0000155c: 	movq	%xmm1, %rax
    00001561: 	cmpq	%rdx, %rax
    00001564: 	je	.Ltmp1424 # Offset: 5476
    00001566: 	movq	%rdi, %rdx
    00001569: 	leaq	DATAat0x12278(%rip), %rsi
    00001570: 	movl	$0x1, %edi
    00001575: 	xorl	%eax, %eax
    00001577: 	callq	__printf_chk@PLT # Offset: 5495
    0000157c: 	movq	0x80(%rsp), %rdi
.Ltmp1424:
    00001584: 	cmpq	0x8(%rsp), %rdi
    00001589: 	je	.Ltmp1425 # Offset: 5513
    0000158b: 	movq	0x90(%rsp), %rax
    00001593: 	leaq	0x1(%rax), %rsi
    00001597: 	callq	_ZdlPvm@PLT # Offset: 5527
.Ltmp1425:
    0000159c: 	movq	%rbp, %rdi
    0000159f: 	callq	_ZdaPv@PLT # Offset: 5535
    000015a4: 	movq	0x8(%rsp), %rax
    000015a9: 	movq	0x60(%rsp), %rbp
    000015ae: 	movq	0x68(%rsp), %r13
    000015b3: 	movq	%rax, 0x80(%rsp)
    000015bb: 	movq	%rbp, %rax
    000015be: 	addq	%r13, %rax
    000015c1: 	je	.Ltmp1426 # Offset: 5569
    000015c3: 	testq	%rbp, %rbp
    000015c6: 	je	.Ltmp1427 # Offset: 5574
.Ltmp1426:
    000015cc: 	movq	%r13, 0x58(%rsp)
    000015d1: 	cmpq	$0xf, %r13
    000015d5: 	ja	.Ltmp1428 # Offset: 5589
    000015db: 	cmpq	$0x1, %r13
    000015df: 	jne	.Ltmp1429 # Offset: 5599
    000015e5: 	movzbl	(%rbp), %eax
    000015e9: 	movb	%al, 0x90(%rsp)
    000015f0: 	movq	0x8(%rsp), %rax
.Ltmp1485:
    000015f5: 	movq	%r13, 0x88(%rsp)
    000015fd: 	movb	$0x0, (%rax,%r13)
    00001602: 	movabsq	$0x3fffffffffffffff, %rax
    0000160c: 	subq	0x88(%rsp), %rax
    00001614: 	cmpq	$0x6, %rax
    00001618: 	jbe	.Ltmp1430 # Offset: 5656
    0000161e: 	movl	$0x7, %edx
    00001623: 	leaq	DATAat0x1229d(%rip), %rsi
    0000162a: 	movq	%r12, %rdi
    0000162d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5677
    00001632: 	movl	iterations(%rip), %edx
    00001638: 	xorl	%r8d, %r8d
    0000163b: 	xorl	%ecx, %ecx
    0000163d: 	movl	$0x4000000, %esi
    00001642: 	movq	0x80(%rsp), %rdi
    0000164a: 	callq	_Z9summarizePKciiii # Offset: 5706
    0000164f: 	movq	0x80(%rsp), %rdi
    00001657: 	cmpq	0x8(%rsp), %rdi
    0000165c: 	je	.Ltmp1431 # Offset: 5724
    0000165e: 	movq	0x90(%rsp), %rax
    00001666: 	leaq	0x1(%rax), %rsi
    0000166a: 	callq	_ZdlPvm@PLT # Offset: 5738
.Ltmp1431:
    0000166f: 	movq	0x60(%rsp), %rdi
    00001674: 	cmpq	0x10(%rsp), %rdi
    00001679: 	je	.Ltmp1432 # Offset: 5753
    0000167b: 	movq	0x70(%rsp), %rax
    00001680: 	leaq	0x1(%rax), %rsi
    00001684: 	callq	_ZdlPvm@PLT # Offset: 5764
.Ltmp1432:
    00001689: 	movq	0xa8(%rsp), %rax
    00001691: 	subq	%fs:0x28, %rax
    0000169a: 	jne	.Ltmp1433 # Offset: 5786
    000016a0: 	addq	$0xb8, %rsp
    000016a7: 	popq	%rbx
    000016a8: 	popq	%rbp
    000016a9: 	popq	%r12
    000016ab: 	popq	%r13
    000016ad: 	popq	%r14
    000016af: 	popq	%r15
    000016b1: 	retq # Offset: 5809
    000016b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1434:
    000016b8: 	addq	$0x20, %rbp
.Ltmp1294:
    000016bc: 	cmpq	%rbp, 0x8(%rsp)
    000016c1: 	je	.Ltmp1297 # Offset: 5825
.Ltmp1435:
    000016c7: 	movq	(%rbp), %rdi
    000016cb: 	leaq	0x10(%rbp), %rax
    000016cf: 	cmpq	%rax, %rdi
    000016d2: 	je	.Ltmp1434 # Offset: 5842
    000016d4: 	movq	0x10(%rbp), %rax
    000016d8: 	addq	$0x20, %rbp
    000016dc: 	leaq	0x1(%rax), %rsi
    000016e0: 	callq	_ZdlPvm@PLT # Offset: 5856
    000016e5: 	cmpq	%rbp, 0x8(%rsp)
    000016ea: 	jne	.Ltmp1435 # Offset: 5866
    000016ec: 	jmp	.Ltmp1297 # Offset: 5868
    000016f1: 	nopl	(%rax) # Size: 7
.Ltmp1290:
    000016f8: 	addq	$0x20, %rbp
    000016fc: 	cmpq	%rbx, %rbp
    000016ff: 	jne	.Ltmp1291 # Offset: 5887
    00001705: 	addq	$0x8, %r13
    00001709: 	cmpq	%r13, %r15
    0000170c: 	ja	.Ltmp1292 # Offset: 5900
    00001712: 	jmp	.Ltmp1436 # Offset: 5906
.Ltmp1305:
    00001717: 	testq	%r12, %r12
    0000171a: 	jne	.Ltmp1437 # Offset: 5914
    00001720: 	movq	0x8(%rsp), %rax
    00001725: 	jmp	.Ltmp1438 # Offset: 5925
    0000172a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1396:
    00001730: 	cmpl	$0x3fffffc, %edx
    00001736: 	jg	.Ltmp1439 # Offset: 5942
    0000173c: 	testb	$0x3f, %al
    0000173e: 	je	.Ltmp1440 # Offset: 5950
    00001744: 	leal	0x4(%rdx), %eax
    00001747: 	cltq
    00001749: 	nopl	(%rax) # Size: 7
.Ltmp1442:
    00001750: 	movl	%esi, -0x4(%rbp,%rax)
    00001754: 	movl	%eax, %edx
    00001756: 	cmpl	$0x3fffffc, %eax
    0000175b: 	jg	.Ltmp1441 # Offset: 5979
    0000175d: 	leaq	(%rbp,%rax), %rcx
    00001762: 	addq	$0x4, %rax
    00001766: 	andl	$0x3f, %ecx
    00001769: 	jne	.Ltmp1442 # Offset: 5993
.Ltmp1441:
    0000176b: 	cmpl	$0x3ffffc0, %edx
    00001771: 	jg	.Ltmp1443 # Offset: 6001
.Ltmp1525:
    00001773: 	movl	$0x3ffffc0, %r8d
    00001779: 	movslq	%edx, %rax
    0000177c: 	xorl	%r9d, %r9d
    0000177f: 	subl	%edx, %r8d
    00001782: 	addq	%rbp, %rax
    00001785: 	shrl	$0x6, %r8d
    00001789: 	leal	0x1(%r8), %ecx
    0000178d: 	nopl	(%rax) # Size: 3
.Ltmp1444:
    00001790: 	addl	$0x1, %r9d
    00001794: 	movups	%xmm0, (%rax)
    00001797: 	addq	$0x40, %rax
    0000179b: 	movups	%xmm0, -0x30(%rax)
    0000179f: 	movups	%xmm0, -0x20(%rax)
    000017a3: 	movups	%xmm0, -0x10(%rax)
    000017a7: 	cmpl	%ecx, %r9d
    000017aa: 	jb	.Ltmp1444 # Offset: 6058
    000017ac: 	shll	$0x6, %r8d
    000017b0: 	leal	0x40(%rdx,%r8), %edx
.Ltmp1443:
    000017b5: 	cmpl	$0x3fffffc, %edx
    000017bb: 	jg	.Ltmp1445 # Offset: 6075
.Ltmp1526:
    000017bd: 	movl	$0x3fffffc, %eax
    000017c2: 	subl	%edx, %eax
    000017c4: 	movl	%eax, %ecx
    000017c6: 	shrl	$0x2, %ecx
    000017c9: 	leal	0x1(%rcx), %r8d
    000017cd: 	cmpl	$0xb, %eax
    000017d0: 	jbe	.Ltmp1446 # Offset: 6096
    000017d6: 	movl	%r8d, %r9d
    000017d9: 	movslq	%edx, %rax
    000017dc: 	addq	%rbp, %rax
    000017df: 	shrl	$0x2, %r9d
    000017e3: 	movups	%xmm0, (%rax)
    000017e6: 	cmpl	$0x1, %r9d
    000017ea: 	je	.Ltmp1447 # Offset: 6122
    000017ec: 	movups	%xmm0, 0x10(%rax)
    000017f0: 	cmpl	$0x2, %r9d
    000017f4: 	je	.Ltmp1447 # Offset: 6132
    000017f6: 	movups	%xmm0, 0x20(%rax)
.Ltmp1447:
    000017fa: 	movl	%r8d, %r9d
    000017fd: 	andl	$-0x4, %r9d
    00001801: 	leal	(%rdx,%r9,4), %eax
    00001805: 	cmpl	%r8d, %r9d
    00001808: 	je	.Ltmp1448 # Offset: 6152
.Ltmp1524:
    0000180a: 	movslq	%eax, %r8
    0000180d: 	movl	%esi, (%rbp,%r8)
    00001812: 	leal	0x4(%rax), %r8d
    00001816: 	cmpl	$0x3fffffc, %r8d
    0000181d: 	jg	.Ltmp1448 # Offset: 6173
    0000181f: 	movslq	%r8d, %r8
    00001822: 	addl	$0x8, %eax
    00001825: 	movl	%esi, (%rbp,%r8)
    0000182a: 	cmpl	$0x3fffffc, %eax
    0000182f: 	jg	.Ltmp1448 # Offset: 6191
    00001831: 	cltq
    00001833: 	movl	%esi, (%rbp,%rax)
.Ltmp1448:
    00001837: 	leal	0x4(%rdx,%rcx,4), %edx
.Ltmp1445:
    0000183b: 	cmpl	$0x4000000, %edx
    00001841: 	je	.Ltmp1449 # Offset: 6209
.Ltmp1439:
    00001847: 	movl	%r14d, %eax
    0000184a: 	subl	%edx, %eax
    0000184c: 	movslq	%edx, %rdx
    0000184f: 	addq	%rbp, %rdx
    00001852: 	cmpl	$0x8, %eax
    00001855: 	jae	.Ltmp1450 # Offset: 6229
    0000185b: 	testb	$0x4, %al
    0000185d: 	jne	.Ltmp1451 # Offset: 6237
    00001863: 	testl	%eax, %eax
    00001865: 	je	.Ltmp1449 # Offset: 6245
    0000186b: 	movb	%r11b, (%rdx)
    0000186e: 	testb	$0x2, %al
    00001870: 	je	.Ltmp1449 # Offset: 6256
    00001876: 	movw	%r11w, -0x2(%rdx,%rax)
    0000187c: 	jmp	.Ltmp1449 # Offset: 6268
    00001881: 	nopl	(%rax) # Size: 7
.Ltmp1414:
    00001888: 	cmpl	$0x3fffff8, %eax
    0000188d: 	jg	.Ltmp1452 # Offset: 6285
    00001893: 	andl	$0x3f, %edx
    00001896: 	je	.Ltmp1453 # Offset: 6294
    0000189c: 	addl	$0x8, %eax
    0000189f: 	movslq	%eax, %rdx
    000018a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1455:
    000018a8: 	movq	%xmm1, -0x8(%rbp,%rdx)
    000018ae: 	movl	%edx, %eax
    000018b0: 	cmpl	$0x3fffff8, %edx
    000018b6: 	jg	.Ltmp1454 # Offset: 6326
    000018b8: 	leaq	(%rbp,%rdx), %rcx
    000018bd: 	addq	$0x8, %rdx
    000018c1: 	andl	$0x3f, %ecx
    000018c4: 	jne	.Ltmp1455 # Offset: 6340
.Ltmp1454:
    000018c6: 	cmpl	$0x3ffffbf, %eax
    000018cb: 	jg	.Ltmp1456 # Offset: 6347
.Ltmp1527:
    000018d1: 	movl	$0x3ffffbf, %r8d
    000018d7: 	movslq	%eax, %rdx
    000018da: 	xorl	%ecx, %ecx
    000018dc: 	subl	%eax, %r8d
    000018df: 	addq	%rbp, %rdx
    000018e2: 	shrl	$0x6, %r8d
    000018e6: 	leal	0x1(%r8), %edi
    000018ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1457:
    000018f0: 	addl	$0x1, %ecx
    000018f3: 	movups	%xmm0, (%rdx)
    000018f6: 	addq	$0x40, %rdx
    000018fa: 	movups	%xmm0, -0x30(%rdx)
    000018fe: 	movups	%xmm0, -0x20(%rdx)
    00001902: 	movups	%xmm0, -0x10(%rdx)
    00001906: 	cmpl	%edi, %ecx
    00001908: 	jb	.Ltmp1457 # Offset: 6408
    0000190a: 	shll	$0x6, %r8d
    0000190e: 	leal	0x40(%rax,%r8), %eax
    00001913: 	cmpl	$0x3fffff8, %eax
    00001918: 	jg	.Ltmp1452 # Offset: 6424
.Ltmp1522:
    0000191e: 	movslq	%eax, %rdx
    00001921: 	leal	0x8(%rax), %ecx
    00001924: 	movq	%xmm1, (%rbp,%rdx)
    0000192a: 	cmpl	$0x3fffff8, %ecx
    00001930: 	jg	.Ltmp1458 # Offset: 6448
    00001932: 	movslq	%ecx, %rdx
    00001935: 	movq	%xmm1, (%rbp,%rdx)
    0000193b: 	leal	0x10(%rax), %edx
    0000193e: 	cmpl	$0x3fffff8, %edx
    00001944: 	jg	.Ltmp1458 # Offset: 6468
    00001946: 	movslq	%edx, %rdx
    00001949: 	movq	%xmm1, (%rbp,%rdx)
    0000194f: 	leal	0x18(%rax), %edx
    00001952: 	cmpl	$0x3fffff8, %edx
    00001958: 	jg	.Ltmp1458 # Offset: 6488
    0000195a: 	movslq	%edx, %rdx
    0000195d: 	movq	%xmm1, (%rbp,%rdx)
    00001963: 	leal	0x20(%rax), %edx
    00001966: 	cmpl	$0x3fffff8, %edx
    0000196c: 	jg	.Ltmp1458 # Offset: 6508
    0000196e: 	movslq	%edx, %rdx
    00001971: 	movq	%xmm1, (%rbp,%rdx)
    00001977: 	leal	0x28(%rax), %edx
    0000197a: 	cmpl	$0x3fffff8, %edx
    00001980: 	jg	.Ltmp1458 # Offset: 6528
    00001982: 	movslq	%edx, %rdx
    00001985: 	movq	%xmm1, (%rbp,%rdx)
    0000198b: 	leal	0x30(%rax), %edx
    0000198e: 	cmpl	$0x3fffff8, %edx
    00001994: 	jg	.Ltmp1458 # Offset: 6548
    00001996: 	movslq	%edx, %rdi
    00001999: 	movq	%xmm1, (%rbp,%rdi)
    0000199f: 	cmpl	$0x3fffff0, %edx
    000019a5: 	jne	.Ltmp1458 # Offset: 6565
    000019a7: 	movq	%xmm1, 0x3fffff8(%rbp)
.Ltmp1458:
    000019af: 	movl	$0x3fffff8, %edx
    000019b4: 	subl	%eax, %edx
    000019b6: 	andl	$-0x8, %edx
    000019b9: 	cmpl	$0x3fffff8, %eax
    000019be: 	movl	$0x0, %eax
    000019c3: 	cmovgl	%eax, %edx
    000019c6: 	leal	(%rcx,%rdx), %eax
.Ltmp1523:
    000019c9: 	cmpl	$0x4000000, %eax
    000019ce: 	je	.Ltmp1459 # Offset: 6606
.Ltmp1452:
    000019d4: 	movl	%r11d, %edx
    000019d7: 	subl	%eax, %edx
    000019d9: 	cmpl	$0x3ffffff, %eax
    000019de: 	cltq
    000019e0: 	cmovgq	%r14, %rdx
    000019e4: 	addq	%rbp, %rax
    000019e7: 	movl	%edx, %ecx
    000019e9: 	cmpl	$0x8, %edx
    000019ec: 	jae	.Ltmp1460 # Offset: 6636
    000019f2: 	andl	$0x4, %edx
    000019f5: 	jne	.Ltmp1461 # Offset: 6645
    000019fb: 	testl	%ecx, %ecx
    000019fd: 	je	.Ltmp1459 # Offset: 6653
    00001a03: 	movb	%r10b, (%rax)
    00001a06: 	testb	$0x2, %cl
    00001a09: 	je	.Ltmp1459 # Offset: 6665
    00001a0f: 	movw	%r10w, -0x2(%rax,%rcx)
    00001a15: 	jmp	.Ltmp1459 # Offset: 6677
    00001a1a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1378:
    00001a20: 	cmpl	$0x3ffffe0, %eax
    00001a25: 	jg	.Ltmp1462 # Offset: 6693
    00001a27: 	movl	$0x3ffffe0, %r10d
    00001a2d: 	movslq	%eax, %rdx
    00001a30: 	xorl	%ecx, %ecx
    00001a32: 	subl	%eax, %r10d
    00001a35: 	addq	%rbp, %rdx
    00001a38: 	shrl	$0x5, %r10d
    00001a3c: 	leal	0x1(%r10), %edi
.Ltmp1463:
    00001a40: 	addl	$0x1, %ecx
    00001a43: 	movups	%xmm0, (%rdx)
    00001a46: 	addq	$0x20, %rdx
    00001a4a: 	movups	%xmm0, -0x10(%rdx)
    00001a4e: 	cmpl	%ecx, %edi
    00001a50: 	ja	.Ltmp1463 # Offset: 6736
    00001a52: 	shll	$0x5, %r10d
    00001a56: 	leal	0x20(%rax,%r10), %eax
.Ltmp1462:
    00001a5b: 	cmpl	$0x3fffff8, %eax
    00001a60: 	jg	.Ltmp1464 # Offset: 6752
    00001a62: 	movslq	%eax, %rdx
    00001a65: 	leal	0x8(%rax), %ecx
    00001a68: 	movq	%xmm1, (%rbp,%rdx)
    00001a6e: 	cmpl	$0x3fffff8, %ecx
    00001a74: 	jg	.Ltmp1465 # Offset: 6772
    00001a76: 	movslq	%ecx, %rdx
    00001a79: 	movq	%xmm1, (%rbp,%rdx)
    00001a7f: 	leal	0x10(%rax), %edx
    00001a82: 	cmpl	$0x3fffff8, %edx
    00001a88: 	jg	.Ltmp1465 # Offset: 6792
    00001a8a: 	movslq	%edx, %rdx
    00001a8d: 	movq	%xmm1, (%rbp,%rdx)
.Ltmp1465:
    00001a93: 	movl	%r14d, %edx
    00001a96: 	subl	%eax, %edx
    00001a98: 	movl	%edx, %eax
    00001a9a: 	andl	$-0x8, %eax
    00001a9d: 	addl	%ecx, %eax
.Ltmp1464:
    00001a9f: 	cmpl	$0x4000000, %eax
    00001aa4: 	je	.Ltmp1466 # Offset: 6820
    00001aaa: 	movl	%r11d, %edx
    00001aad: 	subl	%eax, %edx
    00001aaf: 	cltq
    00001ab1: 	addq	%rbp, %rax
    00001ab4: 	cmpl	$0x8, %edx
    00001ab7: 	jae	.Ltmp1467 # Offset: 6839
    00001abd: 	testb	$0x4, %dl
    00001ac0: 	jne	.Ltmp1468 # Offset: 6848
    00001ac6: 	testl	%edx, %edx
    00001ac8: 	je	.Ltmp1466 # Offset: 6856
    00001ace: 	movb	%r9b, (%rax)
    00001ad1: 	testb	$0x2, %dl
    00001ad4: 	je	.Ltmp1466 # Offset: 6868
    00001ada: 	movw	%r9w, -0x2(%rax,%rdx)
    00001ae0: 	jmp	.Ltmp1466 # Offset: 6880
    00001ae5: 	nopl	(%rax) # Size: 3
.Ltmp1360:
    00001ae8: 	cmpl	$0x3fffff0, %eax
    00001aed: 	jg	.Ltmp1469 # Offset: 6893
    00001aef: 	movl	$0x3fffff0, %r14d
    00001af5: 	movslq	%eax, %rdi
    00001af8: 	xorl	%edx, %edx
    00001afa: 	subl	%eax, %r14d
    00001afd: 	addq	%rbp, %rdi
    00001b00: 	shrl	$0x4, %r14d
    00001b04: 	leal	0x1(%r14), %r8d
    00001b08: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1470:
    00001b10: 	movq	%rdx, %rcx
    00001b13: 	addq	$0x1, %rdx
    00001b17: 	shlq	$0x4, %rcx
    00001b1b: 	movups	%xmm0, (%rdi,%rcx)
    00001b1f: 	cmpl	%edx, %r8d
    00001b22: 	ja	.Ltmp1470 # Offset: 6946
    00001b24: 	shll	$0x4, %r14d
    00001b28: 	leal	0x10(%rax,%r14), %eax
.Ltmp1469:
    00001b2d: 	cmpl	$0x3fffffc, %eax
    00001b32: 	jg	.Ltmp1471 # Offset: 6962
    00001b34: 	movslq	%eax, %rdx
    00001b37: 	leal	0x4(%rax), %ecx
    00001b3a: 	movl	%r9d, (%rbp,%rdx)
    00001b3f: 	cmpl	$0x3fffffc, %ecx
    00001b45: 	jg	.Ltmp1472 # Offset: 6981
    00001b47: 	movslq	%ecx, %rdx
    00001b4a: 	movl	%r9d, (%rbp,%rdx)
    00001b4f: 	leal	0x8(%rax), %edx
    00001b52: 	cmpl	$0x3fffffc, %edx
    00001b58: 	jg	.Ltmp1472 # Offset: 7000
    00001b5a: 	movslq	%edx, %rdx
    00001b5d: 	movl	%r9d, (%rbp,%rdx)
.Ltmp1472:
    00001b62: 	movl	$0x3fffffc, %edx
    00001b67: 	subl	%eax, %edx
    00001b69: 	movl	%edx, %eax
    00001b6b: 	andl	$-0x4, %eax
    00001b6e: 	addl	%ecx, %eax
.Ltmp1471:
    00001b70: 	cmpl	$0x4000000, %eax
    00001b75: 	je	.Ltmp1473 # Offset: 7029
    00001b7b: 	movl	$0x4000000, %edx
    00001b80: 	subl	%eax, %edx
    00001b82: 	cltq
    00001b84: 	addq	%rbp, %rax
    00001b87: 	cmpl	$0x8, %edx
    00001b8a: 	jae	.Ltmp1474 # Offset: 7050
    00001b8c: 	testb	$0x4, %dl
    00001b8f: 	jne	.Ltmp1475 # Offset: 7055
    00001b95: 	testl	%edx, %edx
    00001b97: 	je	.Ltmp1473 # Offset: 7063
    00001b9d: 	movb	%r11b, (%rax)
    00001ba0: 	testb	$0x2, %dl
    00001ba3: 	je	.Ltmp1473 # Offset: 7075
    00001ba9: 	movw	%r11w, -0x2(%rax,%rdx)
    00001baf: 	jmp	.Ltmp1473 # Offset: 7087
    00001bb4: 	nopl	(%rax) # Size: 4
.Ltmp1467:
    00001bb8: 	movl	%edx, %ecx
    00001bba: 	movq	%r9, (%rax)
    00001bbd: 	movq	%r9, -0x8(%rax,%rcx)
    00001bc2: 	leaq	0x8(%rax), %rcx
    00001bc6: 	andq	$-0x8, %rcx
    00001bca: 	subq	%rcx, %rax
    00001bcd: 	addl	%eax, %edx
    00001bcf: 	andl	$-0x8, %edx
    00001bd2: 	cmpl	$0x8, %edx
    00001bd5: 	jb	.Ltmp1466 # Offset: 7125
    00001bdb: 	andl	$-0x8, %edx
    00001bde: 	xorl	%eax, %eax
.Ltmp1476:
    00001be0: 	movl	%eax, %edi
    00001be2: 	addl	$0x8, %eax
    00001be5: 	movq	%r9, (%rcx,%rdi)
    00001be9: 	cmpl	%edx, %eax
    00001beb: 	jb	.Ltmp1476 # Offset: 7147
    00001bed: 	addl	$0x1, %esi
    00001bf0: 	cmpl	%r8d, %esi
    00001bf3: 	jne	.Ltmp1380 # Offset: 7155
    00001bf9: 	jmp	.Ltmp1377 # Offset: 7161
    00001bfe: 	nop # Size: 2
.Ltmp1474:
    00001c00: 	movl	%edx, %ecx
    00001c02: 	movq	%r11, (%rax)
    00001c05: 	movq	%r11, -0x8(%rax,%rcx)
    00001c0a: 	leaq	0x8(%rax), %rcx
    00001c0e: 	andq	$-0x8, %rcx
    00001c12: 	subq	%rcx, %rax
    00001c15: 	addl	%eax, %edx
    00001c17: 	andl	$-0x8, %edx
    00001c1a: 	cmpl	$0x8, %edx
    00001c1d: 	jb	.Ltmp1473 # Offset: 7197
    00001c23: 	andl	$-0x8, %edx
    00001c26: 	xorl	%eax, %eax
.Ltmp1477:
    00001c28: 	movl	%eax, %edi
    00001c2a: 	addl	$0x8, %eax
    00001c2d: 	movq	%r11, (%rcx,%rdi)
    00001c31: 	cmpl	%edx, %eax
    00001c33: 	jb	.Ltmp1477 # Offset: 7219
    00001c35: 	addl	$0x1, %esi
    00001c38: 	cmpl	%r10d, %esi
    00001c3b: 	jne	.Ltmp1362 # Offset: 7227
    00001c41: 	jmp	.Ltmp1359 # Offset: 7233
    00001c46: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1450:
    00001c50: 	movl	%eax, %ecx
    00001c52: 	movq	%r11, (%rdx)
    00001c55: 	movq	%r11, -0x8(%rdx,%rcx)
    00001c5a: 	leaq	0x8(%rdx), %rcx
    00001c5e: 	andq	$-0x8, %rcx
    00001c62: 	subq	%rcx, %rdx
    00001c65: 	addl	%edx, %eax
    00001c67: 	andl	$-0x8, %eax
    00001c6a: 	cmpl	$0x8, %eax
    00001c6d: 	jb	.Ltmp1449 # Offset: 7277
    00001c73: 	andl	$-0x8, %eax
    00001c76: 	xorl	%edx, %edx
.Ltmp1478:
    00001c78: 	movl	%edx, %r8d
    00001c7b: 	addl	$0x8, %edx
    00001c7e: 	movq	%r11, (%rcx,%r8)
    00001c82: 	cmpl	%eax, %edx
    00001c84: 	jb	.Ltmp1478 # Offset: 7300
    00001c86: 	addl	$0x1, %edi
    00001c89: 	cmpl	%r10d, %edi
    00001c8c: 	jne	.Ltmp1398 # Offset: 7308
    00001c92: 	jmp	.Ltmp1395 # Offset: 7314
    00001c97: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1460:
    00001ca0: 	leaq	0x8(%rax), %rdi
    00001ca4: 	movq	%r10, (%rax)
    00001ca7: 	andq	$-0x8, %rdi
    00001cab: 	movq	%r10, -0x8(%rdx,%rax)
    00001cb0: 	subq	%rdi, %rax
    00001cb3: 	leal	(%rdx,%rax), %ecx
    00001cb6: 	andl	$-0x8, %ecx
    00001cb9: 	cmpl	$0x8, %ecx
    00001cbc: 	jb	.Ltmp1459 # Offset: 7356
    00001cc2: 	andl	$-0x8, %ecx
    00001cc5: 	xorl	%eax, %eax
.Ltmp1479:
    00001cc7: 	movl	%eax, %edx
    00001cc9: 	addl	$0x8, %eax
    00001ccc: 	movq	%r10, (%rdi,%rdx)
    00001cd0: 	cmpl	%ecx, %eax
    00001cd2: 	jb	.Ltmp1479 # Offset: 7378
    00001cd4: 	addl	$0x1, %esi
    00001cd7: 	cmpl	%r9d, %esi
    00001cda: 	jne	.Ltmp1416 # Offset: 7386
    00001ce0: 	jmp	.Ltmp1413 # Offset: 7392
.Ltmp1411:
    00001ce5: 	testq	%r13, %r13
    00001ce8: 	jne	.Ltmp1480 # Offset: 7400
    00001cee: 	movq	0x8(%rsp), %rax
    00001cf3: 	jmp	.Ltmp1481 # Offset: 7411
.Ltmp1357:
    00001cf8: 	testq	%r13, %r13
    00001cfb: 	jne	.Ltmp1482 # Offset: 7419
    00001d01: 	movq	0x8(%rsp), %rax
    00001d06: 	jmp	.Ltmp1483 # Offset: 7430
.Ltmp1429:
    00001d0b: 	testq	%r13, %r13
    00001d0e: 	jne	.Ltmp1484 # Offset: 7438
    00001d14: 	movq	0x8(%rsp), %rax
    00001d19: 	jmp	.Ltmp1485 # Offset: 7449
.Ltmp1317:
    00001d1e: 	testq	%r13, %r13
    00001d21: 	jne	.Ltmp1486 # Offset: 7457
    00001d27: 	movq	0x8(%rsp), %rax
    00001d2c: 	jmp	.Ltmp1487 # Offset: 7468
.Ltmp1311:
    00001d31: 	testq	%r13, %r13
    00001d34: 	jne	.Ltmp1488 # Offset: 7476
    00001d3a: 	movq	0x8(%rsp), %rax
    00001d3f: 	jmp	.Ltmp1489 # Offset: 7487
.Ltmp1340:
    00001d44: 	testq	%r13, %r13
    00001d47: 	jne	.Ltmp1490 # Offset: 7495
    00001d4d: 	movq	0x8(%rsp), %rax
    00001d52: 	jmp	.Ltmp1491 # Offset: 7506
.Ltmp1323:
    00001d57: 	testq	%r13, %r13
    00001d5a: 	jne	.Ltmp1492 # Offset: 7514
    00001d60: 	movq	0x8(%rsp), %rax
    00001d65: 	jmp	.Ltmp1493 # Offset: 7525
.Ltmp1393:
    00001d6a: 	testq	%r13, %r13
    00001d6d: 	jne	.Ltmp1494 # Offset: 7533
    00001d73: 	movq	0x8(%rsp), %rax
    00001d78: 	jmp	.Ltmp1495 # Offset: 7544
.Ltmp1375:
    00001d7d: 	testq	%r13, %r13
    00001d80: 	jne	.Ltmp1496 # Offset: 7552
    00001d86: 	movq	0x8(%rsp), %rax
    00001d8b: 	jmp	.Ltmp1497 # Offset: 7563
.Ltmp1374:
    00001d90: 	leaq	0x58(%rsp), %rsi
    00001d95: 	xorl	%edx, %edx
    00001d97: 	movq	%r12, %rdi
    00001d9a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7578
    00001d9f: 	movq	%rax, 0x80(%rsp)
    00001da7: 	movq	%rax, %rdi
    00001daa: 	movq	0x58(%rsp), %rax
    00001daf: 	movq	%rax, 0x90(%rsp)
.Ltmp1537:
    00001db7: 	movq	%r13, %rdx
    00001dba: 	movq	%r14, %rsi
    00001dbd: 	callq	memcpy@PLT # Offset: 7613
    00001dc2: 	movq	0x58(%rsp), %r13
    00001dc7: 	movq	0x80(%rsp), %rax
    00001dcf: 	jmp	.Ltmp1497 # Offset: 7631
.Ltmp1310:
    00001dd4: 	leaq	0x58(%rsp), %rsi
    00001dd9: 	xorl	%edx, %edx
    00001ddb: 	movq	%r12, %rdi
    00001dde: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7646
    00001de3: 	movq	%rax, 0x80(%rsp)
    00001deb: 	movq	%rax, %rdi
    00001dee: 	movq	0x58(%rsp), %rax
    00001df3: 	movq	%rax, 0x90(%rsp)
.Ltmp1533:
    00001dfb: 	movq	%r13, %rdx
    00001dfe: 	movq	%r14, %rsi
    00001e01: 	callq	memcpy@PLT # Offset: 7681
    00001e06: 	movq	0x58(%rsp), %r13
    00001e0b: 	movq	0x80(%rsp), %rax
    00001e13: 	jmp	.Ltmp1489 # Offset: 7699
.Ltmp1339:
    00001e18: 	leaq	0x58(%rsp), %rsi
    00001e1d: 	xorl	%edx, %edx
    00001e1f: 	movq	%r12, %rdi
    00001e22: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7714
    00001e27: 	movq	%rax, 0x80(%rsp)
    00001e2f: 	movq	%rax, %rdi
    00001e32: 	movq	0x58(%rsp), %rax
    00001e37: 	movq	%rax, 0x90(%rsp)
.Ltmp1534:
    00001e3f: 	movq	%r13, %rdx
    00001e42: 	movq	%r14, %rsi
    00001e45: 	callq	memcpy@PLT # Offset: 7749
    00001e4a: 	movq	0x58(%rsp), %r13
    00001e4f: 	movq	0x80(%rsp), %rax
    00001e57: 	jmp	.Ltmp1491 # Offset: 7767
.Ltmp1322:
    00001e5c: 	leaq	0x58(%rsp), %rsi
    00001e61: 	xorl	%edx, %edx
    00001e63: 	movq	%r12, %rdi
    00001e66: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7782
    00001e6b: 	movq	%rax, 0x80(%rsp)
    00001e73: 	movq	%rax, %rdi
    00001e76: 	movq	0x58(%rsp), %rax
    00001e7b: 	movq	%rax, 0x90(%rsp)
.Ltmp1535:
    00001e83: 	movq	%r13, %rdx
    00001e86: 	movq	%r14, %rsi
    00001e89: 	callq	memcpy@PLT # Offset: 7817
    00001e8e: 	movq	0x58(%rsp), %r13
    00001e93: 	movq	0x80(%rsp), %rax
    00001e9b: 	jmp	.Ltmp1493 # Offset: 7835
.Ltmp1392:
    00001ea0: 	leaq	0x58(%rsp), %rsi
    00001ea5: 	xorl	%edx, %edx
    00001ea7: 	movq	%r12, %rdi
    00001eaa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7850
    00001eaf: 	movq	%rax, 0x80(%rsp)
    00001eb7: 	movq	%rax, %rdi
    00001eba: 	movq	0x58(%rsp), %rax
    00001ebf: 	movq	%rax, 0x90(%rsp)
.Ltmp1536:
    00001ec7: 	movq	%r13, %rdx
    00001eca: 	movq	%r14, %rsi
    00001ecd: 	callq	memcpy@PLT # Offset: 7885
    00001ed2: 	movq	0x58(%rsp), %r13
    00001ed7: 	movq	0x80(%rsp), %rax
    00001edf: 	jmp	.Ltmp1495 # Offset: 7903
.Ltmp1356:
    00001ee4: 	leaq	0x58(%rsp), %rsi
    00001ee9: 	xorl	%edx, %edx
    00001eeb: 	movq	%r12, %rdi
    00001eee: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7918
    00001ef3: 	movq	%rax, 0x80(%rsp)
    00001efb: 	movq	%rax, %rdi
    00001efe: 	movq	0x58(%rsp), %rax
    00001f03: 	movq	%rax, 0x90(%rsp)
.Ltmp1530:
    00001f0b: 	movq	%r13, %rdx
    00001f0e: 	movq	%r14, %rsi
    00001f11: 	callq	memcpy@PLT # Offset: 7953
    00001f16: 	movq	0x58(%rsp), %r13
    00001f1b: 	movq	0x80(%rsp), %rax
    00001f23: 	jmp	.Ltmp1483 # Offset: 7971
.Ltmp1410:
    00001f28: 	leaq	0x58(%rsp), %rsi
    00001f2d: 	xorl	%edx, %edx
    00001f2f: 	movq	%r12, %rdi
    00001f32: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7986
    00001f37: 	movq	%rax, 0x80(%rsp)
    00001f3f: 	movq	%rax, %rdi
    00001f42: 	movq	0x58(%rsp), %rax
    00001f47: 	movq	%rax, 0x90(%rsp)
.Ltmp1529:
    00001f4f: 	movq	%r13, %rdx
    00001f52: 	movq	%r14, %rsi
    00001f55: 	callq	memcpy@PLT # Offset: 8021
    00001f5a: 	movq	0x58(%rsp), %r13
    00001f5f: 	movq	0x80(%rsp), %rax
    00001f67: 	jmp	.Ltmp1481 # Offset: 8039
.Ltmp1304:
    00001f6c: 	leaq	0x58(%rsp), %rsi
    00001f71: 	leaq	0x80(%rsp), %rdi
    00001f79: 	xorl	%edx, %edx
    00001f7b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8059
    00001f80: 	movq	%rax, 0x80(%rsp)
    00001f88: 	movq	%rax, %rdi
    00001f8b: 	movq	0x58(%rsp), %rax
    00001f90: 	movq	%rax, 0x90(%rsp)
.Ltmp1528:
    00001f98: 	movq	%r12, %rdx
    00001f9b: 	movq	%r13, %rsi
    00001f9e: 	callq	memcpy@PLT # Offset: 8094
    00001fa3: 	movq	0x58(%rsp), %r12
    00001fa8: 	movq	0x80(%rsp), %rax
    00001fb0: 	jmp	.Ltmp1438 # Offset: 8112
.Ltmp1428:
    00001fb5: 	leaq	0x58(%rsp), %rsi
    00001fba: 	xorl	%edx, %edx
    00001fbc: 	movq	%r12, %rdi
    00001fbf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8127
    00001fc4: 	movq	%rax, 0x80(%rsp)
    00001fcc: 	movq	%rax, %rdi
    00001fcf: 	movq	0x58(%rsp), %rax
    00001fd4: 	movq	%rax, 0x90(%rsp)
.Ltmp1531:
    00001fdc: 	movq	%r13, %rdx
    00001fdf: 	movq	%rbp, %rsi
    00001fe2: 	callq	memcpy@PLT # Offset: 8162
    00001fe7: 	movq	0x58(%rsp), %r13
    00001fec: 	movq	0x80(%rsp), %rax
    00001ff4: 	jmp	.Ltmp1485 # Offset: 8180
.Ltmp1316:
    00001ff9: 	leaq	0x58(%rsp), %rsi
    00001ffe: 	xorl	%edx, %edx
    00002000: 	movq	%r12, %rdi
    00002003: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8195
    00002008: 	movq	%rax, 0x80(%rsp)
    00002010: 	movq	%rax, %rdi
    00002013: 	movq	0x58(%rsp), %rax
    00002018: 	movq	%rax, 0x90(%rsp)
.Ltmp1532:
    00002020: 	movq	%r13, %rdx
    00002023: 	movq	%r14, %rsi
    00002026: 	callq	memcpy@PLT # Offset: 8230
    0000202b: 	movq	0x58(%rsp), %r13
    00002030: 	movq	0x80(%rsp), %rax
    00002038: 	jmp	.Ltmp1487 # Offset: 8248
.Ltmp1404:
    0000203d: 	movq	-0x8(%rdx), %rax
    00002041: 	addq	$0x200, %rax
    00002047: 	jmp	.Ltmp1498 # Offset: 8263
.Ltmp1422:
    0000204c: 	movq	-0x8(%rdx), %rax
    00002050: 	addq	$0x200, %rax
    00002056: 	jmp	.Ltmp1499 # Offset: 8278
.Ltmp1417:
    0000205b: 	movq	%r12, %rsi
    0000205e: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002065: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8293
    0000206a: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002071: 	jmp	.Ltmp1500 # Offset: 8305
.Ltmp1399:
    00002076: 	movq	%r12, %rsi
    00002079: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002080: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8320
    00002085: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000208c: 	jmp	.Ltmp1501 # Offset: 8332
.Ltmp1333:
    00002091: 	movq	-0x8(%rdx), %rax
    00002095: 	addq	$0x200, %rax
    0000209b: 	jmp	.Ltmp1502 # Offset: 8347
.Ltmp1386:
    000020a0: 	movq	-0x8(%rdx), %rax
    000020a4: 	addq	$0x200, %rax
    000020aa: 	jmp	.Ltmp1503 # Offset: 8362
.Ltmp1328:
    000020af: 	movq	%r12, %rsi
    000020b2: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000020b9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8377
    000020be: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000020c5: 	jmp	.Ltmp1504 # Offset: 8389
.Ltmp1381:
    000020ca: 	movq	%r12, %rsi
    000020cd: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000020d4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8404
    000020d9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000020e0: 	jmp	.Ltmp1505 # Offset: 8416
.Ltmp1368:
    000020e5: 	movq	-0x8(%rdx), %rax
    000020e9: 	addq	$0x200, %rax
    000020ef: 	jmp	.Ltmp1506 # Offset: 8431
.Ltmp1363:
    000020f4: 	movq	%r12, %rsi
    000020f7: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000020fe: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8446
    00002103: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000210a: 	jmp	.Ltmp1507 # Offset: 8458
.Ltmp1350:
    0000210f: 	movq	-0x8(%rdx), %rax
    00002113: 	addq	$0x200, %rax
    00002119: 	jmp	.Ltmp1508 # Offset: 8473
.Ltmp1345:
    0000211e: 	movq	%r12, %rsi
    00002121: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002128: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8488
    0000212d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002134: 	jmp	.Ltmp1509 # Offset: 8500
.Ltmp1349:
    00002139: 	testq	%r13, %r13
    0000213c: 	je	.Ltmp1510 # Offset: 8508
    00002142: 	jmp	.Ltmp1511 # Offset: 8514
    00002144: 	nopl	(%rax) # Size: 4
.Ltmp1385:
    00002148: 	testq	%r13, %r13
    0000214b: 	je	.Ltmp1512 # Offset: 8523
    00002151: 	jmp	.Ltmp1513 # Offset: 8529
    00002156: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1367:
    00002160: 	testq	%r13, %r13
    00002163: 	je	.Ltmp1514 # Offset: 8547
    00002169: 	jmp	.Ltmp1515 # Offset: 8553
    0000216e: 	nop # Size: 2
.Ltmp1421:
    00002170: 	testq	%r13, %r13
    00002173: 	je	.Ltmp1516 # Offset: 8563
    00002179: 	jmp	.Ltmp1517 # Offset: 8569
    0000217e: 	nop # Size: 2
.Ltmp1403:
    00002180: 	testq	%r13, %r13
    00002183: 	je	.Ltmp1518 # Offset: 8579
    00002189: 	jmp	.Ltmp1519 # Offset: 8585
    0000218e: 	nop # Size: 2
.Ltmp1332:
    00002190: 	testq	%r13, %r13
    00002193: 	je	.Ltmp1520 # Offset: 8595
    00002199: 	jmp	.Ltmp1521 # Offset: 8601
    0000219b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1348:
    000021a0: 	leaq	0x58(%rsp), %rsi
    000021a5: 	xorl	%edx, %edx
    000021a7: 	movq	%r14, %rdi
    000021aa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8618
    000021af: 	movq	%rax, (%r14)
    000021b2: 	movq	%rax, %rdi
    000021b5: 	movq	0x58(%rsp), %rax
    000021ba: 	movq	%rax, 0x10(%r14)
.Ltmp1511:
    000021be: 	movq	0x18(%rsp), %rsi
    000021c3: 	movq	%r13, %rdx
    000021c6: 	callq	memcpy@PLT # Offset: 8646
    000021cb: 	movq	0x58(%rsp), %r13
    000021d0: 	movq	(%r14), %rdi
    000021d3: 	jmp	.Ltmp1510 # Offset: 8659
.Ltmp1331:
    000021d8: 	leaq	0x58(%rsp), %rsi
    000021dd: 	xorl	%edx, %edx
    000021df: 	movq	%rbx, %rdi
    000021e2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8674
    000021e7: 	movq	%rax, (%rbx)
    000021ea: 	movq	%rax, %rdi
    000021ed: 	movq	0x58(%rsp), %rax
    000021f2: 	movq	%rax, 0x10(%rbx)
.Ltmp1521:
    000021f6: 	movq	%r13, %rdx
    000021f9: 	movq	%r14, %rsi
    000021fc: 	callq	memcpy@PLT # Offset: 8700
    00002201: 	movq	0x58(%rsp), %r13
    00002206: 	movq	(%rbx), %rdi
    00002209: 	jmp	.Ltmp1520 # Offset: 8713
.Ltmp1366:
    0000220e: 	leaq	0x58(%rsp), %rsi
    00002213: 	xorl	%edx, %edx
    00002215: 	movq	%r14, %rdi
    00002218: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8728
    0000221d: 	movq	%rax, (%r14)
    00002220: 	movq	%rax, %rdi
    00002223: 	movq	0x58(%rsp), %rax
    00002228: 	movq	%rax, 0x10(%r14)
.Ltmp1515:
    0000222c: 	movq	0x18(%rsp), %rsi
    00002231: 	movq	%r13, %rdx
    00002234: 	callq	memcpy@PLT # Offset: 8756
    00002239: 	movq	0x58(%rsp), %r13
    0000223e: 	movq	(%r14), %rdi
    00002241: 	jmp	.Ltmp1514 # Offset: 8769
.Ltmp1384:
    00002246: 	leaq	0x58(%rsp), %rsi
    0000224b: 	xorl	%edx, %edx
    0000224d: 	movq	%r14, %rdi
    00002250: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8784
    00002255: 	movq	%rax, (%r14)
    00002258: 	movq	%rax, %rdi
    0000225b: 	movq	0x58(%rsp), %rax
    00002260: 	movq	%rax, 0x10(%r14)
.Ltmp1513:
    00002264: 	movq	0x18(%rsp), %rsi
    00002269: 	movq	%r13, %rdx
    0000226c: 	callq	memcpy@PLT # Offset: 8812
    00002271: 	movq	0x58(%rsp), %r13
    00002276: 	movq	(%r14), %rdi
    00002279: 	jmp	.Ltmp1512 # Offset: 8825
.Ltmp1420:
    0000227e: 	leaq	0x58(%rsp), %rsi
    00002283: 	xorl	%edx, %edx
    00002285: 	movq	%r14, %rdi
    00002288: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8840
    0000228d: 	movq	%rax, (%r14)
    00002290: 	movq	%rax, %rdi
    00002293: 	movq	0x58(%rsp), %rax
    00002298: 	movq	%rax, 0x10(%r14)
.Ltmp1517:
    0000229c: 	movq	0x18(%rsp), %rsi
    000022a1: 	movq	%r13, %rdx
    000022a4: 	callq	memcpy@PLT # Offset: 8868
    000022a9: 	movq	0x58(%rsp), %r13
    000022ae: 	movq	(%r14), %rdi
    000022b1: 	jmp	.Ltmp1516 # Offset: 8881
.Ltmp1402:
    000022b6: 	leaq	0x58(%rsp), %rsi
    000022bb: 	xorl	%edx, %edx
    000022bd: 	movq	%r14, %rdi
    000022c0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8896
    000022c5: 	movq	%rax, (%r14)
    000022c8: 	movq	%rax, %rdi
    000022cb: 	movq	0x58(%rsp), %rax
    000022d0: 	movq	%rax, 0x10(%r14)
.Ltmp1519:
    000022d4: 	movq	0x18(%rsp), %rsi
    000022d9: 	movq	%r13, %rdx
    000022dc: 	callq	memcpy@PLT # Offset: 8924
    000022e1: 	movq	0x58(%rsp), %r13
    000022e6: 	movq	(%r14), %rdi
    000022e9: 	jmp	.Ltmp1518 # Offset: 8937
.Ltmp1456:
    000022ee: 	cmpl	$0x3fffff8, %eax
    000022f3: 	jle	.Ltmp1522 # Offset: 8947
    000022f9: 	jmp	.Ltmp1523 # Offset: 8953
    000022fe: 	nop # Size: 2
.Ltmp1446:
    00002300: 	movl	%edx, %eax
    00002302: 	jmp	.Ltmp1524 # Offset: 8962
.Ltmp1451:
    00002307: 	movl	%r11d, (%rdx)
    0000230a: 	movl	%r11d, -0x4(%rdx,%rax)
    0000230f: 	jmp	.Ltmp1449 # Offset: 8975
.Ltmp1475:
    00002314: 	movl	%r11d, (%rax)
    00002317: 	movl	%r11d, -0x4(%rax,%rdx)
    0000231c: 	jmp	.Ltmp1473 # Offset: 8988
.Ltmp1468:
    00002321: 	movl	%r9d, (%rax)
    00002324: 	movl	%r9d, -0x4(%rax,%rdx)
    00002329: 	jmp	.Ltmp1466 # Offset: 9001
.Ltmp1461:
    0000232e: 	movl	%r10d, (%rax)
    00002331: 	movl	%r10d, -0x4(%rax,%rcx)
    00002336: 	jmp	.Ltmp1459 # Offset: 9014
.Ltmp1440:
    0000233b: 	cmpl	$0x3ffffc0, %edx
    00002341: 	jle	.Ltmp1525 # Offset: 9025
    00002347: 	jmp	.Ltmp1526 # Offset: 9031
    0000234c: 	nopl	(%rax) # Size: 4
.Ltmp1453:
    00002350: 	cmpl	$0x3ffffbf, %eax
    00002355: 	jle	.Ltmp1527 # Offset: 9045
    0000235b: 	jmp	.Ltmp1522 # Offset: 9051
.Ltmp1437:
    00002360: 	movq	0x8(%rsp), %rdi
    00002365: 	jmp	.Ltmp1528 # Offset: 9061
.Ltmp1480:
    0000236a: 	movq	0x8(%rsp), %rdi
    0000236f: 	jmp	.Ltmp1529 # Offset: 9071
.Ltmp1482:
    00002374: 	movq	0x8(%rsp), %rdi
    00002379: 	jmp	.Ltmp1530 # Offset: 9081
.Ltmp1484:
    0000237e: 	movq	0x8(%rsp), %rdi
    00002383: 	jmp	.Ltmp1531 # Offset: 9091
.Ltmp1486:
    00002388: 	movq	0x8(%rsp), %rdi
    0000238d: 	jmp	.Ltmp1532 # Offset: 9101
.Ltmp1488:
    00002392: 	movq	0x8(%rsp), %rdi
    00002397: 	jmp	.Ltmp1533 # Offset: 9111
.Ltmp1490:
    0000239c: 	movq	0x8(%rsp), %rdi
    000023a1: 	jmp	.Ltmp1534 # Offset: 9121
.Ltmp1492:
    000023a6: 	movq	0x8(%rsp), %rdi
    000023ab: 	jmp	.Ltmp1535 # Offset: 9131
.Ltmp1494:
    000023b0: 	movq	0x8(%rsp), %rdi
    000023b5: 	jmp	.Ltmp1536 # Offset: 9141
.Ltmp1419:
    000023ba: 	leaq	DATAat0x12008(%rip), %rdi
    000023c1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9153
.Ltmp1427:
    000023c6: 	leaq	DATAat0x12008(%rip), %rdi
    000023cd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9165
.Ltmp1430:
    000023d2: 	leaq	DATAat0x12288(%rip), %rdi
    000023d9: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9177
.Ltmp1433:
    000023de: 	callq	__stack_chk_fail@PLT # Offset: 9182
.Ltmp1373:
    000023e3: 	leaq	DATAat0x12008(%rip), %rdi
    000023ea: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9194
.Ltmp1376:
    000023ef: 	leaq	DATAat0x12288(%rip), %rdi
    000023f6: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9206
.Ltmp1383:
    000023fb: 	leaq	DATAat0x12008(%rip), %rdi
    00002402: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9218
.Ltmp1391:
    00002407: 	leaq	DATAat0x12008(%rip), %rdi
    0000240e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9230
.Ltmp1394:
    00002413: 	leaq	DATAat0x12288(%rip), %rdi
    0000241a: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9242
.Ltmp1401:
    0000241f: 	leaq	DATAat0x12008(%rip), %rdi
    00002426: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9254
.Ltmp1409:
    0000242b: 	leaq	DATAat0x12008(%rip), %rdi
    00002432: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9266
.Ltmp1412:
    00002437: 	leaq	DATAat0x12288(%rip), %rdi
    0000243e: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9278
.Ltmp1496:
    00002443: 	movq	0x8(%rsp), %rdi
    00002448: 	jmp	.Ltmp1537 # Offset: 9288
.Ltmp1303:
    0000244d: 	leaq	DATAat0x12008(%rip), %rdi
    00002454: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9300
.Ltmp1306:
    00002459: 	leaq	DATAat0x12288(%rip), %rdi
    00002460: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9312
.Ltmp1309:
    00002465: 	leaq	DATAat0x12008(%rip), %rdi
    0000246c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9324
.Ltmp1312:
    00002471: 	leaq	DATAat0x12288(%rip), %rdi
    00002478: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9336
.Ltmp1315:
    0000247d: 	leaq	DATAat0x12008(%rip), %rdi
    00002484: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9348
.Ltmp1318:
    00002489: 	leaq	DATAat0x12288(%rip), %rdi
    00002490: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9360
.Ltmp1321:
    00002495: 	leaq	DATAat0x12008(%rip), %rdi
    0000249c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9372
.Ltmp1324:
    000024a1: 	leaq	DATAat0x12288(%rip), %rdi
    000024a8: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9384
.Ltmp1330:
    000024ad: 	leaq	DATAat0x12008(%rip), %rdi
    000024b4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9396
.Ltmp1338:
    000024b9: 	leaq	DATAat0x12008(%rip), %rdi
    000024c0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9408
.Ltmp1341:
    000024c5: 	leaq	DATAat0x12288(%rip), %rdi
    000024cc: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9420
.Ltmp1347:
    000024d1: 	leaq	DATAat0x12008(%rip), %rdi
    000024d8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9432
.Ltmp1355:
    000024dd: 	leaq	DATAat0x12008(%rip), %rdi
    000024e4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9444
.Ltmp1358:
    000024e9: 	leaq	DATAat0x12288(%rip), %rdi
    000024f0: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9456
.Ltmp1365:
    000024f5: 	leaq	DATAat0x12008(%rip), %rdi
    000024fc: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9468
    00002501: 	endbr64
.Ltmp1539:
    00002505: 	movq	%rax, %rbp
    00002508: 	jmp	.Ltmp1538 # Offset: 9480
    0000250a: 	endbr64
    0000250e: 	jmp	.Ltmp1539 # Offset: 9486
    00002510: 	endbr64
    00002514: 	jmp	.Ltmp1539 # Offset: 9492
    00002516: 	endbr64
    0000251a: 	jmp	.Ltmp1539 # Offset: 9498
    0000251c: 	endbr64
    00002520: 	jmp	.Ltmp1539 # Offset: 9504
    00002522: 	endbr64
    00002526: 	jmp	.Ltmp1539 # Offset: 9510
    00002528: 	endbr64
    0000252c: 	jmp	.Ltmp1539 # Offset: 9516
    0000252e: 	endbr64
    00002532: 	jmp	.Ltmp1539 # Offset: 9522
    00002534: 	endbr64
    00002538: 	jmp	.Ltmp1539 # Offset: 9528
    0000253a: 	endbr64
    0000253e: 	jmp	.Ltmp1539 # Offset: 9534
    00002540: 	endbr64
    00002544: 	jmp	.Ltmp1539 # Offset: 9540
    00002546: 	endbr64
    0000254a: 	jmp	.Ltmp1539 # Offset: 9546
    0000254c: 	endbr64
    00002550: 	jmp	.Ltmp1539 # Offset: 9552
    00002552: 	endbr64
    00002556: 	movq	%rax, %rbp
    00002559: 	jmp	.Ltmp1540 # Offset: 9561
    0000255b: 	endbr64
    0000255f: 	jmp	.Ltmp1539 # Offset: 9567
    00002561: 	endbr64
    00002565: 	jmp	.Ltmp1539 # Offset: 9573
    00002567: 	endbr64
    0000256b: 	jmp	.Ltmp1539 # Offset: 9579
    0000256d: 	endbr64
    00002571: 	jmp	.Ltmp1539 # Offset: 9585
.Ltmp1538:
    00002573: 	movq	0x80(%rsp), %rdi
    0000257b: 	cmpq	0x8(%rsp), %rdi
    00002580: 	je	.Ltmp1540 # Offset: 9600
    00002582: 	movq	0x90(%rsp), %rax
    0000258a: 	leaq	0x1(%rax), %rsi
    0000258e: 	callq	_ZdlPvm@PLT # Offset: 9614
.Ltmp1540:
    00002593: 	movq	0x60(%rsp), %rdi
    00002598: 	cmpq	0x10(%rsp), %rdi
    0000259d: 	je	.Ltmp1541 # Offset: 9629
    0000259f: 	movq	0x70(%rsp), %rax
    000025a4: 	leaq	0x1(%rax), %rsi
    000025a8: 	callq	_ZdlPvm@PLT # Offset: 9640
.Ltmp1541:
    000025ad: 	movq	%rbp, %rdi
    000025b0: 	callq	_Unwind_Resume@PLT # Offset: 9648
    000025b5: 	endbr64
    000025b9: 	jmp	.Ltmp1539 # Offset: 9657
    000025be: 	endbr64
    000025c2: 	jmp	.Ltmp1539 # Offset: 9666
    000025c7: 	endbr64
    000025cb: 	jmp	.Ltmp1539 # Offset: 9675
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeImEvv"

Binary Function "_fini" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0x11c80
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x11c80
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 69 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 1396 instructions were shortened
BOLT-INFO: removed 177 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 62 out of 99 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x202524
