BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: ignoring symbol __bss_start at 0x17030, which lies outside .bss
BOLT-WARNING: split function detected on input : _GLOBAL__sub_I_results.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x16ff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "main" after disassembly {
  Number      : 3
  State       : disassembled
  Address     : 0x13f0
  Size        : 0x143
  MaxSize     : 0x150
  Offset      : 0x13f0
  Section     : .text
  Orc Section : .local.text.main
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB02:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	pushq	%rbp
    0000000b: 	pushq	%rbx
    0000000c: 	subq	$0x10, %rsp
    00000010: 	testl	%edi, %edi
    00000012: 	jle	.Ltmp1 # Offset: 18
    00000018: 	leal	-0x1(%rdi), %eax
    0000001b: 	movl	%edi, %r13d
    0000001e: 	movq	%rsi, %r14
    00000021: 	movq	%rsi, %rbx
    00000024: 	leaq	0x8(%rsi,%rax,8), %r12
    00000029: 	leaq	DATAat0x14180(%rip), %rbp
.Ltmp2:
    00000030: 	movq	(%rbx), %rdx
    00000033: 	movq	%rbp, %rsi
    00000036: 	movl	$0x1, %edi
    0000003b: 	xorl	%eax, %eax
    0000003d: 	addq	$0x8, %rbx
    00000041: 	callq	__printf_chk@PLT # Offset: 65
    00000046: 	cmpq	%r12, %rbx
    00000049: 	jne	.Ltmp2 # Offset: 73
    0000004b: 	xorl	%eax, %eax
    0000004d: 	leaq	DATAat0x14166(%rip), %rsi
    00000054: 	movl	$0x1, %edi
    00000059: 	callq	__printf_chk@PLT # Offset: 89
    0000005e: 	cmpl	$0x1, %r13d
    00000062: 	jg	.Ltmp3 # Offset: 98
.Ltmp4:
    00000064: 	movsd	DATAat0x14380(%rip), %xmm0
.Ltmp5:
    0000006c: 	movsd	%xmm0, 0x8(%rsp)
    00000072: 	callq	_Z11TestOneTypeIsEvd # Offset: 114
    00000077: 	movsd	0x8(%rsp), %xmm0
    0000007d: 	callq	_Z11TestOneTypeItEvd # Offset: 125
    00000082: 	movsd	0x8(%rsp), %xmm0
    00000088: 	callq	_Z11TestOneTypeIiEvd # Offset: 136
    0000008d: 	movsd	0x8(%rsp), %xmm0
    00000093: 	callq	_Z11TestOneTypeIjEvd # Offset: 147
    00000098: 	movsd	0x8(%rsp), %xmm0
    0000009e: 	callq	_Z11TestOneTypeIlEvd # Offset: 158
    000000a3: 	movsd	0x8(%rsp), %xmm0
    000000a9: 	callq	_Z11TestOneTypeImEvd # Offset: 169
    000000ae: 	movsd	0x8(%rsp), %xmm0
    000000b4: 	callq	_Z16TestOneTypeFloatIfEvd # Offset: 180
    000000b9: 	movsd	0x8(%rsp), %xmm0
    000000bf: 	callq	_Z16TestOneTypeFloatIdEvd # Offset: 191
    000000c4: 	movsd	0x8(%rsp), %xmm0
    000000ca: 	callq	_Z16TestOneTypeFloatIeEvd # Offset: 202
    000000cf: 	addq	$0x10, %rsp
    000000d3: 	xorl	%eax, %eax
    000000d5: 	popq	%rbx
    000000d6: 	popq	%rbp
    000000d7: 	popq	%r12
    000000d9: 	popq	%r13
    000000db: 	popq	%r14
    000000dd: 	retq # Offset: 221
.Ltmp3:
    000000de: 	movq	0x8(%r14), %rdi
    000000e2: 	movl	$0xa, %edx
    000000e7: 	xorl	%esi, %esi
    000000e9: 	callq	strtol@PLT # Offset: 233
    000000ee: 	movl	%eax, iterations(%rip)
    000000f4: 	cmpl	$0x2, %r13d
    000000f8: 	jle	.Ltmp4 # Offset: 248
    000000fe: 	movq	0x10(%r14), %rdi
    00000102: 	xorl	%esi, %esi
    00000104: 	callq	strtod@PLT # Offset: 260
    00000109: 	movsd	%xmm0, init_value(%rip)
    00000111: 	cmpl	$0x3, %r13d
    00000115: 	jle	.Ltmp4 # Offset: 277
    0000011b: 	movq	0x18(%r14), %rdi
    0000011f: 	xorl	%esi, %esi
    00000121: 	callq	strtod@PLT # Offset: 289
    00000126: 	jmp	.Ltmp5 # Offset: 294
.Ltmp1:
    0000012b: 	leaq	DATAat0x14166(%rip), %rsi
    00000132: 	movl	$0x1, %edi
    00000137: 	xorl	%eax, %eax
    00000139: 	callq	__printf_chk@PLT # Offset: 313
    0000013e: 	jmp	.Ltmp4 # Offset: 318
DWARF CFI Instructions:
    <empty>
End of Function "main"

Binary Function "_start" after disassembly {
  Number      : 5
  State       : disassembled
  Address     : 0x1620
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x1620
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB04:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x16fe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 6
  State       : disassembled
  Address     : 0x1650
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x1650
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp6 # Offset: 17
    00000013: 	movq	DATAat0x16fe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp6 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp6:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x1680
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x1680
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	_edata(%rip), %rdi
    00000007: 	leaq	_edata(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp7 # Offset: 34
    00000024: 	movq	DATAat0x16ff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp7 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp7:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x16c0
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x16c0
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp8 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp9 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp9:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp8:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x1700
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x1700
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1(*2)" after disassembly {
  All names   : _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1
                _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/divide.cpp/1
  Number      : 10
  State       : disassembled
  Address     : 0x1710
  Size        : 0xc0
  MaxSize     : 0xc0
  Offset      : 0x1710
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	pushq	%r12
    00000002: 	movq	%rdx, %r12
    00000005: 	pushq	%rbp
    00000006: 	movq	%rsi, %rbp
    00000009: 	pushq	%rbx
    0000000a: 	movq	%rdi, %rbx
    0000000d: 	subq	$0x10, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	testq	%rdx, %rdx
    00000024: 	je	.Ltmp10 # Offset: 36
    00000026: 	testq	%rsi, %rsi
    00000029: 	je	.Ltmp11 # Offset: 41
.Ltmp10:
    0000002f: 	subq	%rbp, %r12
    00000032: 	movq	%r12, (%rsp)
    00000036: 	cmpq	$0xf, %r12
    0000003a: 	ja	.Ltmp12 # Offset: 58
    0000003c: 	movq	(%rbx), %rdi
    0000003f: 	cmpq	$0x1, %r12
    00000043: 	jne	.Ltmp13 # Offset: 67
    00000045: 	movzbl	(%rbp), %eax
    00000049: 	movb	%al, (%rdi)
    0000004b: 	movq	(%rsp), %r12
    0000004f: 	movq	(%rbx), %rdi
.Ltmp15:
    00000052: 	movq	%r12, 0x8(%rbx)
    00000056: 	movb	$0x0, (%rdi,%r12)
    0000005b: 	movq	0x8(%rsp), %rax
    00000060: 	subq	%fs:0x28, %rax
    00000069: 	jne	.Ltmp14 # Offset: 105
    0000006b: 	addq	$0x10, %rsp
    0000006f: 	popq	%rbx
    00000070: 	popq	%rbp
    00000071: 	popq	%r12
    00000073: 	retq # Offset: 115
    00000074: 	nopl	(%rax) # Size: 4
.Ltmp13:
    00000078: 	testq	%r12, %r12
    0000007b: 	je	.Ltmp15 # Offset: 123
    0000007d: 	jmp	.Ltmp16 # Offset: 125
    0000007f: 	nop # Size: 1
.Ltmp12:
    00000080: 	movq	%rbx, %rdi
    00000083: 	movq	%rsp, %rsi
    00000086: 	xorl	%edx, %edx
    00000088: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 136
    0000008d: 	movq	%rax, (%rbx)
    00000090: 	movq	%rax, %rdi
    00000093: 	movq	(%rsp), %rax
    00000097: 	movq	%rax, 0x10(%rbx)
.Ltmp16:
    0000009b: 	movq	%r12, %rdx
    0000009e: 	movq	%rbp, %rsi
    000000a1: 	callq	memcpy@PLT # Offset: 161
    000000a6: 	movq	(%rsp), %r12
    000000aa: 	movq	(%rbx), %rdi
    000000ad: 	jmp	.Ltmp15 # Offset: 173
.Ltmp11:
    000000af: 	leaq	DATAat0x14008(%rip), %rdi
    000000b6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 182
.Ltmp14:
    000000bb: 	callq	__stack_chk_fail@PLT # Offset: 187
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 11
  State       : disassembled
  Address     : 0x17d0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x17d0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp17 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp18 # Offset: 38
.Ltmp17:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp19 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp18:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp19:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x14038(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x1870
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x1870
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp20 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp21 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp22:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp22 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp35:
    00000069: 	leaq	DATAat0x14182(%rip), %rbp
    00000070: 	leaq	DATAat0x14058(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x14098(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp23 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x14310(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x140c8(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x14308(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp24 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp28:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp25 # Offset: 244
    000000fa: 	movq	DATAat0x142f8(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp29:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x142f8(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp26 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp26:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x14167(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x14310(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp27 # Offset: 398
.Ltmp24:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp28 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp29 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp25:
    000001c8: 	movq	DATAat0x14300(%rip), %rsi
    000001cf: 	movq	DATAat0x142f8(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp26 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp27:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp23 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp30 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp31:
    00000210: 	addq	$0x10, %rax
.Ltmp30:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp31 # Offset: 542
.Ltmp36:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x140f8(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp32 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp33 # Offset: 592
.Ltmp32:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp20:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp33:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp34:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp34 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x14142(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp20 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp21:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp35 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp23:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp36 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x1ba0
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x1ba0
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp37 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp38 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp39:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp39 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp44:
    0000006a: 	leaq	DATAat0x14182(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x14120(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x14168(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x14182(%rip), %r8
    000000a1: 	leaq	DATAat0x14156(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp40 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp41:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x14167(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp41 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp40 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp42 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp43:
    00000140: 	addq	$0x10, %rax
.Ltmp42:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp43 # Offset: 334
.Ltmp45:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x140f8(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp37:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp38:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp44 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp40:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp45 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x1d50
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x1d50
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x1d70
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x1d70
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x14308(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark6scrandEm" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x1db0
  Size        : 0xc
  MaxSize     : 0x10
  Offset      : 0x1db0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark6scrandEm
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	movq	%rdi, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    0000000b: 	retq # Offset: 11
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark6scrandEm"

Binary Function "_ZN9benchmark7crand64Ev" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x1dc0
  Size        : 0x42
  MaxSize     : 0x50
  Offset      : 0x1dc0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand64Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rdx
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rax
    00000015: 	imulq	%rax, %rdx
    00000019: 	movabsq	$0x14057b7ef767814f, %rax
    00000023: 	addq	%rax, %rdx
    00000026: 	movq	%rdx, %rax
    00000029: 	movq	%rdx, %rcx
    0000002c: 	movq	%rdx, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rax
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rax
    0000003e: 	xorq	%rdx, %rax
    00000041: 	retq # Offset: 65
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand64Ev"

Binary Function "_ZN9benchmark7crand32Ev" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x1e10
  Size        : 0x41
  MaxSize     : 0x50
  Offset      : 0x1e10
  Section     : .text
  Orc Section : .local.text._ZN9benchmark7crand32Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	movq	"_ZN9benchmarkL12gCRand64SeedE/1"(%rip), %rax
    0000000b: 	movabsq	$0x5851f42d4c957f2d, %rdx
    00000015: 	imulq	%rdx, %rax
    00000019: 	movabsq	$0x14057b7ef767814f, %rdx
    00000023: 	addq	%rdx, %rax
    00000026: 	movq	%rax, %rdx
    00000029: 	movq	%rax, %rcx
    0000002c: 	movq	%rax, "_ZN9benchmarkL12gCRand64SeedE/1"(%rip)
    00000033: 	shrq	$0x14, %rdx
    00000037: 	shlq	$0x17, %rcx
    0000003b: 	xorq	%rcx, %rdx
    0000003e: 	xorl	%edx, %eax
    00000040: 	retq # Offset: 64
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark7crand32Ev"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x1e60
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1e60
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x1e90
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1e90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x1ec0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1ec0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x1ef0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x1ef0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x1f20
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1f20
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x1f50
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x1f50
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x1f80
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1f80
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x1fb0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1fb0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x1fe0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x1fe0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x2010
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x2010
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x2040
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2040
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x2070
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x2070
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x20b0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x20b0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x20e0
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x20e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x2110
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2110
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x2140
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x2140
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x2170
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2170
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x21a0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x21a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x21d0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x21d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x2200
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2200
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x2230
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2230
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 40
  State       : disassembled
  Address     : 0x2260
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2260
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 41
  State       : disassembled
  Address     : 0x2290
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x2290
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_Z31ChooseGeneralUnsignedMultiplierjRjS_S_" after disassembly {
  Number      : 42
  State       : disassembled
  Address     : 0x22c0
  Size        : 0x9b
  MaxSize     : 0xa0
  Offset      : 0x22c0
  Section     : .text
  Orc Section : .local.text._Z31ChooseGeneralUnsignedMultiplierjRjS_S_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	movq	%rsi, %r8
    00000007: 	movl	%edi, %esi
    00000009: 	movq	%rdx, %r10
    0000000c: 	movq	%rcx, %r9
    0000000f: 	subl	$0x1, %esi
    00000012: 	je	.Ltmp46 # Offset: 18
    00000014: 	js	.Ltmp47 # Offset: 20
    00000016: 	xorl	%edx, %edx
    00000018: 	movl	$0x80000000, %eax
    0000001d: 	nopl	(%rax) # Size: 3
.Ltmp48:
    00000020: 	shrl	%eax
    00000022: 	addl	$0x1, %edx
    00000025: 	testl	%eax, %esi
    00000027: 	je	.Ltmp48 # Offset: 39
    00000029: 	movl	$0x20, %esi
    0000002e: 	movl	$0x1, %eax
    00000033: 	subl	%edx, %esi
    00000035: 	movl	%esi, %ecx
    00000037: 	shll	%cl, %eax
.Ltmp49:
    00000039: 	cmpl	%eax, %edi
    0000003b: 	je	.Ltmp46 # Offset: 59
    0000003d: 	testl	%esi, %esi
    0000003f: 	movl	$0x1, %r11d
    00000045: 	movl	$0x0, %eax
    0000004a: 	movl	%edi, %edi
    0000004c: 	cmovlel	%esi, %r11d
    00000050: 	movl	$0x1f, %esi
    00000055: 	movl	$0x40, %ecx
    0000005a: 	subl	%edx, %esi
    0000005c: 	cmovsl	%eax, %esi
    0000005f: 	subl	%edx, %ecx
    00000061: 	movl	$0x1, %eax
    00000066: 	movl	%r11d, (%r10)
    00000069: 	shlq	%cl, %rax
    0000006c: 	cqto
    0000006e: 	movl	%esi, (%r9)
    00000071: 	idivq	%rdi
    00000074: 	addl	$0x1, %eax
    00000077: 	movl	%eax, (%r8)
    0000007a: 	retq # Offset: 122
    0000007b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp46:
    00000080: 	xorl	%r11d, %r11d
    00000083: 	xorl	%eax, %eax
    00000085: 	movl	%r11d, (%r10)
    00000088: 	movl	%esi, (%r9)
    0000008b: 	movl	%eax, (%r8)
    0000008e: 	retq # Offset: 142
    0000008f: 	nop # Size: 1
.Ltmp47:
    00000090: 	xorl	%eax, %eax
    00000092: 	movl	$0x20, %esi
    00000097: 	xorl	%edx, %edx
    00000099: 	jmp	.Ltmp49 # Offset: 153
DWARF CFI Instructions:
    <empty>
End of Function "_Z31ChooseGeneralUnsignedMultiplierjRjS_S_"

Binary Function "_Z29ChooseGeneralSignedMultiplieriRiRjS_" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x2360
  Size        : 0x91
  MaxSize     : 0xa0
  Offset      : 0x2360
  Section     : .text
  Orc Section : .local.text._Z29ChooseGeneralSignedMultiplieriRiRjS_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	movl	%edi, %r8d
    00000007: 	movq	%rsi, %r9
    0000000a: 	movq	%rdx, %r10
    0000000d: 	movabsq	$0x100000000, %rax
    00000017: 	negl	%r8d
    0000001a: 	cmovsl	%edi, %r8d
    0000001e: 	sarl	$0x1f, %edi
    00000021: 	movl	%edi, (%rcx)
    00000023: 	movl	%r8d, %esi
    00000026: 	subl	$0x1, %esi
    00000029: 	je	.Ltmp50 # Offset: 41
    0000002b: 	js	.Ltmp51 # Offset: 43
    0000002d: 	movl	$0x80000000, %eax
    00000032: 	xorl	%edx, %edx
    00000034: 	nopl	(%rax) # Size: 4
.Ltmp52:
    00000038: 	shrl	%eax
    0000003a: 	addl	$0x1, %edx
    0000003d: 	testl	%eax, %esi
    0000003f: 	je	.Ltmp52 # Offset: 63
    00000041: 	movl	$0x20, %ecx
    00000046: 	movl	$0x1, %eax
    0000004b: 	subl	%edx, %ecx
    0000004d: 	testl	%ecx, %ecx
    0000004f: 	cmovlel	%eax, %ecx
    00000052: 	movl	$0x1, %eax
    00000057: 	leal	-0x1(%rcx), %esi
    0000005a: 	addl	$0x1f, %ecx
    0000005d: 	shlq	%cl, %rax
.Ltmp50:
    00000060: 	movslq	%r8d, %r8
    00000063: 	cqto
    00000065: 	movl	%esi, (%r10)
    00000068: 	idivq	%r8
    0000006b: 	movabsq	$-0xffffffff, %rdx
    00000075: 	addq	%rdx, %rax
    00000078: 	movl	%eax, (%r9)
    0000007b: 	retq # Offset: 123
    0000007c: 	nopl	(%rax) # Size: 4
.Ltmp51:
    00000080: 	movabsq	$-0x8000000000000000, %rax
    0000008a: 	movl	$0x1f, %esi
    0000008f: 	jmp	.Ltmp50 # Offset: 143
DWARF CFI Instructions:
    <empty>
End of Function "_Z29ChooseGeneralSignedMultiplieriRiRjS_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 44
  State       : disassembled
  Address     : 0x2400
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x2400
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp53 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp56:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp55:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp54 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp55 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp56 # Offset: 142
.Ltmp53:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp57 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp58 # Offset: 164
.Ltmp61:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp59 # Offset: 177
.Ltmp60:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp58 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp60 # Offset: 214
.Ltmp59:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp61 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp62 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp64:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp63 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp63:
    0000010a: 	addq	$0x20, %r13
.Ltmp58:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp64 # Offset: 275
.Ltmp62:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp65 # Offset: 283
.Ltmp71:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp66 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp67:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp67 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp66:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp54:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp55 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp56 # Offset: 389
    0000018b: 	jmp	.Ltmp53 # Offset: 395
.Ltmp57:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp62 # Offset: 405
.Ltmp70:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp68 # Offset: 422
.Ltmp69:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp62 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp69 # Offset: 463
.Ltmp68:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp70 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp71 # Offset: 482
.Ltmp65:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x2600
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0x2600
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp72 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp73 # Offset: 63
.Ltmp72:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp74 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp75 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp79:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp76 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp77 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp75:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp78 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp79 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp74:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp80:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp79 # Offset: 248
.Ltmp73:
    000000fd: 	leaq	DATAat0x14008(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp76:
    00000109: 	leaq	DATAat0x14184(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp77:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp78:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp80 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp81 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp81:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x2750
  Size        : 0x328
  MaxSize     : 0x330
  Offset      : 0x2750
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	0x48(%rdi), %r12
    00000019: 	movq	0x28(%rdi), %rsi
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x30(%rdi), %rax
    00000031: 	subq	0x38(%rdi), %rax
    00000035: 	movq	%r12, %r13
    00000038: 	sarq	$0x5, %rax
    0000003c: 	subq	%rsi, %r13
    0000003f: 	movq	%r13, %rcx
    00000042: 	sarq	$0x3, %rcx
    00000046: 	cmpq	$0x1, %r12
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	adcq	$-0x1, %rdx
    00000051: 	shlq	$0x4, %rdx
    00000055: 	addq	%rdx, %rax
    00000058: 	movq	0x20(%rdi), %rdx
    0000005c: 	subq	0x10(%rdi), %rdx
    00000060: 	sarq	$0x5, %rdx
    00000064: 	addq	%rdx, %rax
    00000067: 	movabsq	$0x3ffffffffffffff, %rdx
    00000071: 	cmpq	%rdx, %rax
    00000074: 	je	.Ltmp82 # Offset: 116
    0000007a: 	movq	0x8(%rdi), %rdx
    0000007e: 	movq	%rdi, %rbx
    00000081: 	movq	(%rdi), %rdi
    00000084: 	movq	%r12, %rax
    00000087: 	subq	%rdi, %rax
    0000008a: 	movq	%rdx, %r8
    0000008d: 	sarq	$0x3, %rax
    00000091: 	subq	%rax, %r8
    00000094: 	cmpq	$0x1, %r8
    00000098: 	jbe	.Ltmp83 # Offset: 152
.Ltmp94:
    0000009e: 	movl	$0x200, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	%rax, 0x8(%r12)
    000000ad: 	movq	0x30(%rbx), %r13
    000000b1: 	movq	0x8(%rbp), %r12
    000000b5: 	leaq	0x10(%r13), %rdi
    000000b9: 	movq	%rdi, (%r13)
    000000bd: 	movq	(%rbp), %r14
    000000c1: 	movq	%r14, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp84 # Offset: 199
    000000c9: 	testq	%r14, %r14
    000000cc: 	je	.Ltmp85 # Offset: 204
.Ltmp84:
    000000d2: 	movq	%r12, (%rsp)
    000000d6: 	cmpq	$0xf, %r12
    000000da: 	ja	.Ltmp86 # Offset: 218
    000000e0: 	cmpq	$0x1, %r12
    000000e4: 	jne	.Ltmp87 # Offset: 228
    000000e6: 	movzbl	(%r14), %eax
    000000ea: 	movb	%al, 0x10(%r13)
.Ltmp89:
    000000ee: 	movq	%r12, 0x8(%r13)
    000000f2: 	movb	$0x0, (%rdi,%r12)
    000000f7: 	movq	0x48(%rbx), %rdx
    000000fb: 	movq	0x8(%rdx), %rax
    000000ff: 	addq	$0x8, %rdx
    00000103: 	movq	%rdx, %xmm1
    00000108: 	movq	%rax, %xmm0
    0000010d: 	addq	$0x200, %rax
    00000113: 	punpcklqdq	%xmm0, %xmm0
    00000117: 	movups	%xmm0, 0x30(%rbx)
    0000011b: 	movq	%rax, %xmm0
    00000120: 	punpcklqdq	%xmm1, %xmm0
    00000124: 	movups	%xmm0, 0x40(%rbx)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	subq	%fs:0x28, %rax
    00000136: 	jne	.Ltmp88 # Offset: 310
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp87:
    00000150: 	testq	%r12, %r12
    00000153: 	je	.Ltmp89 # Offset: 339
    00000155: 	jmp	.Ltmp90 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp83:
    00000160: 	leaq	0x2(%rcx), %r14
    00000164: 	leaq	(%r14,%r14), %rax
    00000168: 	cmpq	%rax, %rdx
    0000016b: 	ja	.Ltmp91 # Offset: 363
    00000171: 	testq	%rdx, %rdx
    00000174: 	movl	$0x1, %eax
    00000179: 	cmovneq	%rdx, %rax
    0000017d: 	leaq	0x2(%rdx,%rax), %r15
    00000182: 	movq	%r15, %rax
    00000185: 	shrq	$0x3c, %rax
    00000189: 	jne	.Ltmp92 # Offset: 393
    0000018f: 	leaq	(,%r15,8), %rdi
    00000197: 	callq	_Znwm@PLT # Offset: 407
    0000019c: 	movq	0x28(%rbx), %rsi
    000001a0: 	movq	%rax, %r12
    000001a3: 	movq	%r15, %rax
    000001a6: 	subq	%r14, %rax
    000001a9: 	shrq	%rax
    000001ac: 	leaq	(%r12,%rax,8), %r14
    000001b0: 	movq	0x48(%rbx), %rax
    000001b4: 	leaq	0x8(%rax), %rdx
    000001b8: 	cmpq	%rsi, %rdx
    000001bb: 	je	.Ltmp93 # Offset: 443
    000001bd: 	subq	%rsi, %rdx
    000001c0: 	movq	%r14, %rdi
    000001c3: 	callq	memmove@PLT # Offset: 451
.Ltmp93:
    000001c8: 	movq	0x8(%rbx), %rax
    000001cc: 	movq	(%rbx), %rdi
    000001cf: 	leaq	(,%rax,8), %rsi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%r12, (%rbx)
    000001df: 	movq	%r15, 0x8(%rbx)
.Ltmp96:
    000001e3: 	movq	(%r14), %rax
    000001e6: 	movq	(%r14), %xmm0
    000001eb: 	leaq	(%r14,%r13), %r12
    000001ef: 	movq	%r14, 0x28(%rbx)
    000001f3: 	movq	%r12, 0x48(%rbx)
    000001f7: 	addq	$0x200, %rax
    000001fd: 	movq	%rax, %xmm2
    00000202: 	punpcklqdq	%xmm2, %xmm0
    00000206: 	movups	%xmm0, 0x18(%rbx)
    0000020a: 	movq	(%r12), %rax
    0000020e: 	movq	(%r12), %xmm0
    00000214: 	addq	$0x200, %rax
    0000021a: 	movq	%rax, %xmm3
    0000021f: 	punpcklqdq	%xmm3, %xmm0
    00000223: 	movups	%xmm0, 0x38(%rbx)
    00000227: 	jmp	.Ltmp94 # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp86:
    00000230: 	movq	%rsp, %rsi
    00000233: 	xorl	%edx, %edx
    00000235: 	movq	%r13, %rdi
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%r13)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%r13)
.Ltmp90:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r14, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%r13), %rdi
    0000025f: 	jmp	.Ltmp89 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp91:
    00000268: 	subq	%r14, %rdx
    0000026b: 	addq	$0x8, %r12
    0000026f: 	shrq	%rdx
    00000272: 	leaq	(%rdi,%rdx,8), %r14
    00000276: 	movq	%r12, %rdx
    00000279: 	subq	%rsi, %rdx
    0000027c: 	cmpq	%r14, %rsi
    0000027f: 	jbe	.Ltmp95 # Offset: 639
    00000281: 	cmpq	%r12, %rsi
    00000284: 	je	.Ltmp96 # Offset: 644
    0000028a: 	movq	%r14, %rdi
    0000028d: 	callq	memmove@PLT # Offset: 653
    00000292: 	jmp	.Ltmp96 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp95:
    000002a0: 	cmpq	%r12, %rsi
    000002a3: 	je	.Ltmp96 # Offset: 675
    000002a9: 	leaq	0x8(%r13), %rdi
    000002ad: 	subq	%rdx, %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	callq	memmove@PLT # Offset: 691
    000002b8: 	jmp	.Ltmp96 # Offset: 696
.Ltmp85:
    000002bd: 	leaq	DATAat0x14008(%rip), %rdi
    000002c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp92:
    000002d0: 	shrq	$0x3d, %r15
    000002d4: 	je	.Ltmp97 # Offset: 724
    000002d6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 726
.Ltmp97:
    000002db: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 731
.Ltmp82:
    000002e0: 	leaq	DATAat0x141a0(%rip), %rdi
    000002e7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 743
.Ltmp88:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
    000002f1: 	endbr64
    000002f5: 	movq	%rax, %rdi
    000002f8: 	callq	__cxa_begin_catch@PLT # Offset: 760
    000002fd: 	movq	0x48(%rbx), %rax
    00000301: 	movl	$0x200, %esi
    00000306: 	movq	0x8(%rax), %rdi
    0000030a: 	callq	_ZdlPvm@PLT # Offset: 778
    0000030f: 	callq	__cxa_rethrow@PLT # Offset: 783
    00000314: 	endbr64
    00000318: 	movq	%rax, %rbp
    0000031b: 	callq	__cxa_end_catch@PLT # Offset: 795
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Unwind_Resume@PLT # Offset: 803
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_"

Binary Function "_Z16TestOneTypeFloatIfEvd" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x2a80
  Size        : 0xa0d
  MaxSize     : 0xa10
  Offset      : 0x2a80
  Section     : .text
  Orc Section : .local.text._Z16TestOneTypeFloatIfEvd
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x1000, %rsp
    00000015: 	orq	$0x0, (%rsp)
    0000001a: 	subq	$0x1000, %rsp
    00000021: 	orq	$0x0, (%rsp)
    00000026: 	subq	$0x1000, %rsp
    0000002d: 	orq	$0x0, (%rsp)
    00000032: 	subq	$0xf68, %rsp
    00000039: 	pxor	%xmm1, %xmm1
    0000003d: 	cvtsd2ss	init_value(%rip), %xmm1
    00000045: 	shufps	$0x0, %xmm1, %xmm1
    00000049: 	movq	%fs:0x28, %rax
    00000052: 	movq	%rax, 0x3f58(%rsp)
    0000005a: 	xorl	%eax, %eax
    0000005c: 	movb	$0x74, 0x84(%rsp)
    00000064: 	leaq	0x80(%rsp), %rax
    0000006c: 	leaq	0xd0(%rsp), %r15
    00000074: 	movb	$0x0, 0x85(%rsp)
    0000007c: 	leaq	0x3f50(%rsp), %rbx
    00000084: 	movl	$0x616f6c66, 0x80(%rsp)
    0000008f: 	movq	$0x5, 0x78(%rsp)
    00000098: 	movq	%rax, 0x40(%rsp)
    0000009d: 	movq	%rax, 0x70(%rsp)
    000000a2: 	movq	%r15, %rax
    000000a5: 	nopl	(%rax) # Size: 3
.Ltmp98:
    000000a8: 	movaps	%xmm1, (%rax)
    000000ab: 	addq	$0x10, %rax
    000000af: 	cmpq	%rax, %rbx
    000000b2: 	jne	.Ltmp98 # Offset: 178
    000000b4: 	movq	0x40(%rsp), %rsi
    000000b9: 	leaq	0xc0(%rsp), %rax
    000000c1: 	pxor	%xmm6, %xmm6
    000000c5: 	leaq	0xb0(%rsp), %rdi
    000000cd: 	leaq	0x85(%rsp), %rdx
    000000d5: 	cvtsd2ss	%xmm0, %xmm6
    000000d9: 	movq	%rdi, 0x28(%rsp)
    000000de: 	movq	%rax, 0x18(%rsp)
    000000e3: 	movq	%rax, 0xb0(%rsp)
    000000eb: 	movss	%xmm6, 0x20(%rsp)
    000000f1: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 241
    000000f6: 	movabsq	$0x3fffffffffffffff, %rax
    00000100: 	subq	0xb8(%rsp), %rax
    00000108: 	cmpq	$0xf, %rax
    0000010c: 	jbe	.Ltmp99 # Offset: 268
    00000112: 	movq	0x28(%rsp), %rdi
    00000117: 	movl	$0x10, %edx
    0000011c: 	leaq	DATAat0x141d0(%rip), %rsi
    00000123: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 291
    00000128: 	callq	clock@PLT # Offset: 296
    0000012d: 	movl	iterations(%rip), %edx
    00000133: 	movq	%rax, start_time(%rip)
    0000013a: 	testl	%edx, %edx
    0000013c: 	jle	.Ltmp100 # Offset: 316
    00000142: 	movss	0x20(%rsp), %xmm7
    00000148: 	xorl	%r12d, %r12d
    0000014b: 	leaq	DATAat0x141e1(%rip), %r13
    00000152: 	shufps	$0x0, %xmm7, %xmm7
    00000156: 	movaps	%xmm7, (%rsp)
    0000015a: 	pxor	%xmm7, %xmm7
    0000015e: 	movd	%xmm7, %ebp
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp104:
    00000168: 	movq	%r15, %rax
    0000016b: 	movd	%ebp, %xmm1
    0000016f: 	nop # Size: 1
.Ltmp101:
    00000170: 	movaps	(%rax), %xmm0
    00000173: 	divps	(%rsp), %xmm0
    00000177: 	addss	%xmm0, %xmm1
    0000017b: 	movaps	%xmm0, %xmm2
    0000017e: 	shufps	$0x55, %xmm0, %xmm2
    00000182: 	addq	$0x10, %rax
    00000186: 	addss	%xmm1, %xmm2
    0000018a: 	movaps	%xmm0, %xmm1
    0000018d: 	unpckhps	%xmm0, %xmm1
    00000190: 	shufps	$0xff, %xmm0, %xmm0
    00000194: 	addss	%xmm2, %xmm1
    00000198: 	addss	%xmm0, %xmm1
    0000019c: 	cmpq	%rax, %rbx
    0000019f: 	jne	.Ltmp101 # Offset: 415
    000001a1: 	pxor	%xmm2, %xmm2
    000001a5: 	movaps	%xmm1, %xmm0
    000001a8: 	cvtsd2ss	init_value(%rip), %xmm2
    000001b0: 	divss	0x20(%rsp), %xmm2
    000001b6: 	mulss	DATAat0x14340(%rip), %xmm2
    000001be: 	subss	%xmm2, %xmm0
    000001c2: 	movaps	%xmm1, %xmm2
    000001c5: 	andps	DATAat0x14350(%rip), %xmm2
    000001cc: 	cvtss2sd	%xmm2, %xmm2
    000001d0: 	comisd	DATAat0x14310(%rip), %xmm2
    000001d8: 	jbe	.Ltmp102 # Offset: 472
    000001da: 	divss	%xmm1, %xmm0
.Ltmp102:
    000001de: 	movsd	DATAat0x14318(%rip), %xmm7
    000001e6: 	cvtss2sd	%xmm0, %xmm0
    000001ea: 	andpd	DATAat0x14360(%rip), %xmm0
    000001f2: 	comisd	%xmm0, %xmm7
    000001f6: 	jbe	.Ltmp103 # Offset: 502
.Ltmp143:
    000001fc: 	addl	$0x1, %r12d
    00000200: 	cmpl	%edx, %r12d
    00000203: 	jl	.Ltmp104 # Offset: 515
.Ltmp100:
    00000209: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000210: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000217: 	subq	$0x20, %rax
    0000021b: 	cmpq	%rax, %rdi
    0000021e: 	je	.Ltmp105 # Offset: 542
    00000224: 	leaq	0x10(%rdi), %rax
    00000228: 	movq	0xb8(%rsp), %rdx
    00000230: 	movq	%rax, (%rdi)
    00000233: 	movq	0xb0(%rsp), %rsi
    0000023b: 	addq	%rsi, %rdx
    0000023e: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 574
    00000243: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000024a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000251: 	addq	$0x20, %rax
    00000255: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000025c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000263: 	je	.Ltmp106 # Offset: 611
.Ltmp145:
    00000269: 	movq	-0x20(%rax), %r12
    0000026d: 	callq	clock@PLT # Offset: 621
    00000272: 	pxor	%xmm0, %xmm0
    00000276: 	movq	%rax, end_time(%rip)
    0000027d: 	movq	%r12, %rdi
    00000280: 	subq	start_time(%rip), %rax
    00000287: 	cvtsi2sd	%rax, %xmm0
    0000028c: 	divsd	DATAat0x14308(%rip), %xmm0
    00000294: 	callq	_Z13record_resultdPKc # Offset: 660
    00000299: 	movq	0xb0(%rsp), %rdi
    000002a1: 	cmpq	0x18(%rsp), %rdi
    000002a6: 	je	.Ltmp107 # Offset: 678
    000002a8: 	movq	0xc0(%rsp), %rax
    000002b0: 	leaq	0x1(%rax), %rsi
    000002b4: 	callq	_ZdlPvm@PLT # Offset: 692
.Ltmp107:
    000002b9: 	movq	0x70(%rsp), %rsi
    000002be: 	movq	0x78(%rsp), %rdx
    000002c3: 	leaq	0xa0(%rsp), %rax
    000002cb: 	leaq	0x90(%rsp), %rdi
    000002d3: 	movq	%rdi, 0x20(%rsp)
    000002d8: 	addq	%rsi, %rdx
    000002db: 	movq	%rax, 0x30(%rsp)
    000002e0: 	movq	%rax, 0x90(%rsp)
    000002e8: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 744
    000002ed: 	movabsq	$0x3fffffffffffffff, %rax
    000002f7: 	subq	0x98(%rsp), %rax
    000002ff: 	cmpq	$0xf, %rax
    00000303: 	jbe	.Ltmp108 # Offset: 771
    00000309: 	movq	0x20(%rsp), %rdi
    0000030e: 	movl	$0x10, %edx
    00000313: 	leaq	DATAat0x141f1(%rip), %rsi
    0000031a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 794
    0000031f: 	callq	clock@PLT # Offset: 799
    00000324: 	pxor	%xmm6, %xmm6
    00000328: 	xorl	%r14d, %r14d
    0000032b: 	movq	%rax, start_time(%rip)
    00000332: 	movl	iterations(%rip), %eax
    00000338: 	movd	%xmm6, %ebp
    0000033c: 	testl	%eax, %eax
    0000033e: 	jle	.Ltmp109 # Offset: 830
    00000344: 	nopl	(%rax) # Size: 4
.Ltmp118:
    00000348: 	movl	%ebp, (%rsp)
    0000034b: 	movq	%r15, %rax
    0000034e: 	nop # Size: 2
.Ltmp110:
    00000350: 	movss	(%rsp), %xmm1
    00000355: 	movaps	(%rax), %xmm0
    00000358: 	divps	DATAat0x14370(%rip), %xmm0
    0000035f: 	movaps	%xmm0, %xmm2
    00000362: 	shufps	$0x55, %xmm0, %xmm2
    00000366: 	addq	$0x10, %rax
    0000036a: 	addss	%xmm0, %xmm1
    0000036e: 	addss	%xmm1, %xmm2
    00000372: 	movaps	%xmm0, %xmm1
    00000375: 	unpckhps	%xmm0, %xmm1
    00000378: 	shufps	$0xff, %xmm0, %xmm0
    0000037c: 	addss	%xmm2, %xmm1
    00000380: 	addss	%xmm0, %xmm1
    00000384: 	movss	%xmm1, (%rsp)
    00000389: 	cmpq	%rax, %rbx
    0000038c: 	jne	.Ltmp110 # Offset: 908
    0000038e: 	movq	0x18(%rsp), %rax
    00000393: 	movq	0x90(%rsp), %r13
    0000039b: 	movq	0x98(%rsp), %r12
    000003a3: 	movq	%rax, 0xb0(%rsp)
    000003ab: 	movq	%r13, %rax
    000003ae: 	addq	%r12, %rax
    000003b1: 	je	.Ltmp111 # Offset: 945
    000003b3: 	testq	%r13, %r13
    000003b6: 	je	.Ltmp112 # Offset: 950
.Ltmp111:
    000003bc: 	movq	%r12, 0x68(%rsp)
    000003c1: 	cmpq	$0xf, %r12
    000003c5: 	ja	.Ltmp113 # Offset: 965
    000003cb: 	cmpq	$0x1, %r12
    000003cf: 	jne	.Ltmp114 # Offset: 975
    000003d5: 	movzbl	(%r13), %eax
    000003da: 	movb	%al, 0xc0(%rsp)
    000003e1: 	movq	0x18(%rsp), %rax
.Ltmp142:
    000003e6: 	movq	%r12, 0xb8(%rsp)
    000003ee: 	pxor	%xmm1, %xmm1
    000003f2: 	movss	(%rsp), %xmm5
    000003f7: 	movb	$0x0, (%rax,%r12)
    000003fc: 	movaps	%xmm5, %xmm0
    000003ff: 	cvtsd2ss	init_value(%rip), %xmm1
    00000407: 	divss	DATAat0x14370(%rip), %xmm1
    0000040f: 	mulss	DATAat0x14340(%rip), %xmm1
    00000417: 	subss	%xmm1, %xmm0
    0000041b: 	movaps	%xmm5, %xmm1
    0000041e: 	andps	DATAat0x14350(%rip), %xmm1
    00000425: 	cvtss2sd	%xmm1, %xmm1
    00000429: 	comisd	DATAat0x14310(%rip), %xmm1
    00000431: 	jbe	.Ltmp115 # Offset: 1073
    00000433: 	divss	%xmm5, %xmm0
.Ltmp115:
    00000437: 	movsd	DATAat0x14318(%rip), %xmm1
    0000043f: 	cvtss2sd	%xmm0, %xmm0
    00000443: 	andpd	DATAat0x14360(%rip), %xmm0
    0000044b: 	movq	0xb0(%rsp), %rdi
    00000453: 	comisd	%xmm0, %xmm1
    00000457: 	jbe	.Ltmp116 # Offset: 1111
.Ltmp144:
    0000045d: 	cmpq	0x18(%rsp), %rdi
    00000462: 	je	.Ltmp117 # Offset: 1122
    00000468: 	movq	0xc0(%rsp), %rax
    00000470: 	addl	$0x1, %r14d
    00000474: 	leaq	0x1(%rax), %rsi
    00000478: 	callq	_ZdlPvm@PLT # Offset: 1144
    0000047d: 	cmpl	iterations(%rip), %r14d
    00000484: 	jl	.Ltmp118 # Offset: 1156
.Ltmp109:
    0000048a: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000491: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000498: 	subq	$0x20, %rax
    0000049c: 	cmpq	%rax, %rdi
    0000049f: 	je	.Ltmp119 # Offset: 1183
    000004a5: 	leaq	0x10(%rdi), %rax
    000004a9: 	movq	0x98(%rsp), %rdx
    000004b1: 	movq	%rax, (%rdi)
    000004b4: 	movq	0x90(%rsp), %rsi
    000004bc: 	addq	%rsi, %rdx
    000004bf: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1215
    000004c4: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000004cb: 	addq	$0x20, %rax
    000004cf: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp147:
    000004d6: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000004dd: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000004e4: 	je	.Ltmp120 # Offset: 1252
.Ltmp146:
    000004ea: 	movq	-0x20(%rax), %r12
    000004ee: 	callq	clock@PLT # Offset: 1262
    000004f3: 	pxor	%xmm0, %xmm0
    000004f7: 	movq	%rax, end_time(%rip)
    000004fe: 	movq	%r12, %rdi
    00000501: 	subq	start_time(%rip), %rax
    00000508: 	cvtsi2sd	%rax, %xmm0
    0000050d: 	divsd	DATAat0x14308(%rip), %xmm0
    00000515: 	callq	_Z13record_resultdPKc # Offset: 1301
    0000051a: 	movq	0x90(%rsp), %rdi
    00000522: 	cmpq	0x30(%rsp), %rdi
    00000527: 	je	.Ltmp121 # Offset: 1319
    00000529: 	movq	0xa0(%rsp), %rax
    00000531: 	leaq	0x1(%rax), %rsi
    00000535: 	callq	_ZdlPvm@PLT # Offset: 1333
.Ltmp121:
    0000053a: 	movq	0x70(%rsp), %rsi
    0000053f: 	movq	0x78(%rsp), %rdx
    00000544: 	movq	0x18(%rsp), %rax
    00000549: 	movq	0x28(%rsp), %rdi
    0000054e: 	addq	%rsi, %rdx
    00000551: 	movq	%rax, 0xb0(%rsp)
    00000559: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1369
    0000055e: 	movabsq	$0x3fffffffffffffff, %rax
    00000568: 	subq	0xb8(%rsp), %rax
    00000570: 	cmpq	$0x8, %rax
    00000574: 	jbe	.Ltmp122 # Offset: 1396
    0000057a: 	movq	0x28(%rsp), %rdi
    0000057f: 	movl	$0x9, %edx
    00000584: 	leaq	DATAat0x14202(%rip), %rsi
    0000058b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1419
    00000590: 	movl	iterations(%rip), %edx
    00000596: 	xorl	%r8d, %r8d
    00000599: 	xorl	%ecx, %ecx
    0000059b: 	movl	$0xfa0, %esi
    000005a0: 	movq	0xb0(%rsp), %rdi
    000005a8: 	callq	_Z9summarizePKciiii # Offset: 1448
    000005ad: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm7
    000005b5: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000005bc: 	movq	"_ZL7gLabels/1"+56(%rip), %r15
    000005c3: 	movaps	%xmm7, 0x50(%rsp)
    000005c8: 	movq	%xmm7, %r12
    000005cd: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm7
    000005d5: 	movq	%rax, 0x20(%rsp)
    000005da: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000005e1: 	movhlps	%xmm7, %xmm6
    000005e4: 	movaps	%xmm7, 0x30(%rsp)
    000005e9: 	movq	%xmm6, %rcx
    000005ee: 	movq	%rax, (%rsp)
    000005f2: 	leaq	0x8(%rcx), %r13
    000005f6: 	movq	%xmm6, 0x48(%rsp)
    000005fc: 	movq	%xmm7, 0x28(%rsp)
    00000602: 	movq	%r13, %r14
    00000605: 	cmpq	%r13, %rax
    00000608: 	jbe	.Ltmp123 # Offset: 1544
    0000060a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp126:
    00000610: 	movq	(%r14), %rbp
    00000613: 	leaq	0x200(%rbp), %rbx
    0000061a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp125:
    00000620: 	movq	(%rbp), %rdi
    00000624: 	leaq	0x10(%rbp), %rdx
    00000628: 	cmpq	%rdx, %rdi
    0000062b: 	je	.Ltmp124 # Offset: 1579
    00000631: 	movq	0x10(%rbp), %rax
    00000635: 	addq	$0x20, %rbp
    00000639: 	leaq	0x1(%rax), %rsi
    0000063d: 	callq	_ZdlPvm@PLT # Offset: 1597
    00000642: 	cmpq	%rbx, %rbp
    00000645: 	jne	.Ltmp125 # Offset: 1605
    00000647: 	addq	$0x8, %r14
    0000064b: 	cmpq	%r14, (%rsp)
    0000064f: 	ja	.Ltmp126 # Offset: 1615
.Ltmp123:
    00000651: 	movq	(%rsp), %rcx
    00000655: 	cmpq	%rcx, 0x48(%rsp)
    0000065a: 	jne	.Ltmp127 # Offset: 1626
    0000065c: 	jmp	.Ltmp128 # Offset: 1628
    00000661: 	nopl	(%rax) # Size: 7
.Ltmp130:
    00000668: 	movq	(%r12), %rdi
    0000066c: 	leaq	0x10(%r12), %rax
    00000671: 	cmpq	%rax, %rdi
    00000674: 	je	.Ltmp129 # Offset: 1652
    00000676: 	movq	0x10(%r12), %rax
    0000067b: 	leaq	0x1(%rax), %rsi
    0000067f: 	callq	_ZdlPvm@PLT # Offset: 1663
.Ltmp129:
    00000684: 	addq	$0x20, %r12
.Ltmp127:
    00000688: 	cmpq	%r12, 0x28(%rsp)
    0000068d: 	jne	.Ltmp130 # Offset: 1677
    0000068f: 	cmpq	%r15, 0x20(%rsp)
    00000694: 	je	.Ltmp131 # Offset: 1684
    00000696: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp133:
    000006a0: 	movq	(%r15), %rdi
    000006a3: 	leaq	0x10(%r15), %rax
    000006a7: 	cmpq	%rax, %rdi
    000006aa: 	je	.Ltmp132 # Offset: 1706
    000006ac: 	movq	0x10(%r15), %rax
    000006b0: 	leaq	0x1(%rax), %rsi
    000006b4: 	callq	_ZdlPvm@PLT # Offset: 1716
.Ltmp132:
    000006b9: 	addq	$0x20, %r15
    000006bd: 	cmpq	%r15, 0x20(%rsp)
    000006c2: 	jne	.Ltmp133 # Offset: 1730
.Ltmp131:
    000006c4: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000006cb: 	leaq	0x8(%rax), %rbx
    000006cf: 	cmpq	%r13, %rbx
    000006d2: 	jbe	.Ltmp134 # Offset: 1746
    000006d4: 	nopl	(%rax) # Size: 4
.Ltmp135:
    000006d8: 	movq	(%r13), %rdi
    000006dc: 	movl	$0x200, %esi
    000006e1: 	addq	$0x8, %r13
    000006e5: 	callq	_ZdlPvm@PLT # Offset: 1765
    000006ea: 	cmpq	%r13, %rbx
    000006ed: 	ja	.Ltmp135 # Offset: 1773
.Ltmp134:
    000006ef: 	movdqa	0x50(%rsp), %xmm6
    000006f5: 	movq	0xb0(%rsp), %rdi
    000006fd: 	movaps	%xmm6, "_ZL7gLabels/1"+48(%rip)
    00000704: 	movdqa	0x30(%rsp), %xmm6
    0000070a: 	movaps	%xmm6, "_ZL7gLabels/1"+64(%rip)
    00000711: 	cmpq	0x18(%rsp), %rdi
    00000716: 	je	.Ltmp136 # Offset: 1814
    00000718: 	movq	0xc0(%rsp), %rax
    00000720: 	leaq	0x1(%rax), %rsi
    00000724: 	callq	_ZdlPvm@PLT # Offset: 1828
.Ltmp136:
    00000729: 	movq	0x70(%rsp), %rdi
    0000072e: 	cmpq	0x40(%rsp), %rdi
    00000733: 	je	.Ltmp137 # Offset: 1843
    00000735: 	movq	0x80(%rsp), %rax
    0000073d: 	leaq	0x1(%rax), %rsi
    00000741: 	callq	_ZdlPvm@PLT # Offset: 1857
.Ltmp137:
    00000746: 	movq	0x3f58(%rsp), %rax
    0000074e: 	subq	%fs:0x28, %rax
    00000757: 	jne	.Ltmp138 # Offset: 1879
    0000075d: 	addq	$0x3f68, %rsp
    00000764: 	popq	%rbx
    00000765: 	popq	%rbp
    00000766: 	popq	%r12
    00000768: 	popq	%r13
    0000076a: 	popq	%r14
    0000076c: 	popq	%r15
    0000076e: 	retq # Offset: 1902
    0000076f: 	nop # Size: 1
.Ltmp139:
    00000770: 	movq	0x10(%r12), %rax
    00000775: 	addq	$0x20, %r12
    00000779: 	leaq	0x1(%rax), %rsi
    0000077d: 	callq	_ZdlPvm@PLT # Offset: 1917
.Ltmp128:
    00000782: 	cmpq	0x20(%rsp), %r12
    00000787: 	je	.Ltmp131 # Offset: 1927
.Ltmp140:
    0000078d: 	movq	(%r12), %rdi
    00000791: 	leaq	0x10(%r12), %rax
    00000796: 	cmpq	%rax, %rdi
    00000799: 	jne	.Ltmp139 # Offset: 1945
    0000079b: 	addq	$0x20, %r12
    0000079f: 	cmpq	%r12, 0x20(%rsp)
    000007a4: 	jne	.Ltmp140 # Offset: 1956
    000007a6: 	jmp	.Ltmp131 # Offset: 1958
    000007ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp124:
    000007b0: 	addq	$0x20, %rbp
    000007b4: 	cmpq	%rbx, %rbp
    000007b7: 	jne	.Ltmp125 # Offset: 1975
    000007bd: 	addq	$0x8, %r14
    000007c1: 	cmpq	%r14, (%rsp)
    000007c5: 	ja	.Ltmp126 # Offset: 1989
    000007cb: 	jmp	.Ltmp123 # Offset: 1995
.Ltmp117:
    000007d0: 	addl	$0x1, %r14d
    000007d4: 	cmpl	iterations(%rip), %r14d
    000007db: 	jl	.Ltmp118 # Offset: 2011
    000007e1: 	jmp	.Ltmp109 # Offset: 2017
    000007e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp114:
    000007f0: 	testq	%r12, %r12
    000007f3: 	jne	.Ltmp141 # Offset: 2035
    000007f9: 	movq	0x18(%rsp), %rax
    000007fe: 	jmp	.Ltmp142 # Offset: 2046
    00000803: 	nopl	(%rax,%rax) # Size: 5
.Ltmp103:
    00000808: 	movq	0xb0(%rsp), %rdx
    00000810: 	movq	%r13, %rsi
    00000813: 	movl	$0x1, %edi
    00000818: 	xorl	%eax, %eax
    0000081a: 	callq	__printf_chk@PLT # Offset: 2074
    0000081f: 	movl	iterations(%rip), %edx
    00000825: 	jmp	.Ltmp143 # Offset: 2085
    0000082a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp116:
    00000830: 	movq	%rdi, %rdx
    00000833: 	leaq	DATAat0x141e1(%rip), %rsi
    0000083a: 	movl	$0x1, %edi
    0000083f: 	xorl	%eax, %eax
    00000841: 	callq	__printf_chk@PLT # Offset: 2113
    00000846: 	movq	0xb0(%rsp), %rdi
    0000084e: 	jmp	.Ltmp144 # Offset: 2126
    00000853: 	nopl	(%rax,%rax) # Size: 5
.Ltmp113:
    00000858: 	movq	0x28(%rsp), %rdi
    0000085d: 	leaq	0x68(%rsp), %rsi
    00000862: 	xorl	%edx, %edx
    00000864: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2148
    00000869: 	movq	%rax, 0xb0(%rsp)
    00000871: 	movq	%rax, %rdi
    00000874: 	movq	0x68(%rsp), %rax
    00000879: 	movq	%rax, 0xc0(%rsp)
.Ltmp148:
    00000881: 	movq	%r12, %rdx
    00000884: 	movq	%r13, %rsi
    00000887: 	callq	memcpy@PLT # Offset: 2183
    0000088c: 	movq	0x68(%rsp), %r12
    00000891: 	movq	0xb0(%rsp), %rax
    00000899: 	jmp	.Ltmp142 # Offset: 2201
.Ltmp105:
    0000089e: 	movq	0x28(%rsp), %rsi
    000008a3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000008aa: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 2218
    000008af: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000008b6: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000008bd: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000008c4: 	jne	.Ltmp145 # Offset: 2244
.Ltmp106:
    000008ca: 	movq	-0x8(%rdx), %rax
    000008ce: 	addq	$0x200, %rax
    000008d4: 	jmp	.Ltmp145 # Offset: 2260
.Ltmp120:
    000008d9: 	movq	-0x8(%rdx), %rax
    000008dd: 	addq	$0x200, %rax
    000008e3: 	jmp	.Ltmp146 # Offset: 2275
.Ltmp119:
    000008e8: 	movq	0x20(%rsp), %rsi
    000008ed: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000008f4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 2292
    000008f9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000900: 	jmp	.Ltmp147 # Offset: 2304
.Ltmp112:
    00000905: 	leaq	DATAat0x14008(%rip), %rdi
    0000090c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 2316
.Ltmp108:
    00000911: 	leaq	DATAat0x14184(%rip), %rdi
    00000918: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 2328
.Ltmp99:
    0000091d: 	leaq	DATAat0x14184(%rip), %rdi
    00000924: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 2340
.Ltmp141:
    00000929: 	movq	0x18(%rsp), %rdi
    0000092e: 	jmp	.Ltmp148 # Offset: 2350
.Ltmp138:
    00000933: 	callq	__stack_chk_fail@PLT # Offset: 2355
.Ltmp122:
    00000938: 	leaq	DATAat0x14184(%rip), %rdi
    0000093f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 2367
    00000944: 	endbr64
    00000948: 	movq	%rax, %rbx
    0000094b: 	jmp	.Ltmp149 # Offset: 2379
    0000094d: 	endbr64
.Ltmp153:
    00000951: 	movq	%rax, %rbx
    00000954: 	jmp	.Ltmp150 # Offset: 2388
.Ltmp155:
    00000959: 	movq	0xb0(%rsp), %rdi
    00000961: 	cmpq	0x18(%rsp), %rdi
    00000966: 	je	.Ltmp151 # Offset: 2406
    00000968: 	movq	0xc0(%rsp), %rax
    00000970: 	leaq	0x1(%rax), %rsi
    00000974: 	callq	_ZdlPvm@PLT # Offset: 2420
.Ltmp151:
    00000979: 	movq	0x90(%rsp), %rdi
    00000981: 	cmpq	0x30(%rsp), %rdi
    00000986: 	je	.Ltmp149 # Offset: 2438
    00000988: 	movq	0xa0(%rsp), %rax
    00000990: 	leaq	0x1(%rax), %rsi
    00000994: 	callq	_ZdlPvm@PLT # Offset: 2452
.Ltmp149:
    00000999: 	movq	0x70(%rsp), %rdi
    0000099e: 	cmpq	0x40(%rsp), %rdi
    000009a3: 	je	.Ltmp152 # Offset: 2467
    000009a5: 	movq	0x80(%rsp), %rax
    000009ad: 	leaq	0x1(%rax), %rsi
    000009b1: 	callq	_ZdlPvm@PLT # Offset: 2481
.Ltmp152:
    000009b6: 	movq	%rbx, %rdi
    000009b9: 	callq	_Unwind_Resume@PLT # Offset: 2489
    000009be: 	endbr64
    000009c2: 	jmp	.Ltmp153 # Offset: 2498
    000009c4: 	endbr64
    000009c8: 	jmp	.Ltmp153 # Offset: 2504
    000009ca: 	endbr64
    000009ce: 	jmp	.Ltmp153 # Offset: 2510
    000009d0: 	endbr64
.Ltmp154:
    000009d4: 	movq	%rax, %rbx
    000009d7: 	jmp	.Ltmp151 # Offset: 2519
    000009d9: 	endbr64
    000009dd: 	jmp	.Ltmp154 # Offset: 2525
.Ltmp150:
    000009df: 	movq	0xb0(%rsp), %rdi
    000009e7: 	cmpq	0x18(%rsp), %rdi
    000009ec: 	je	.Ltmp149 # Offset: 2540
    000009ee: 	movq	0xc0(%rsp), %rax
    000009f6: 	leaq	0x1(%rax), %rsi
    000009fa: 	callq	_ZdlPvm@PLT # Offset: 2554
    000009ff: 	jmp	.Ltmp149 # Offset: 2559
    00000a01: 	endbr64
    00000a05: 	movq	%rax, %rbx
    00000a08: 	jmp	.Ltmp155 # Offset: 2568
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestOneTypeFloatIfEvd"

Binary Function "_Z16TestOneTypeFloatIdEvd" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x3490
  Size        : 0xa6f
  MaxSize     : 0xa70
  Offset      : 0x3490
  Section     : .text
  Orc Section : .local.text._Z16TestOneTypeFloatIdEvd
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x7000(%rsp), %r11
.Ltmp156:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp156 # Offset: 37
    00000027: 	subq	$0xde8, %rsp
    0000002e: 	movl	$0x656c, %edx
    00000033: 	movsd	%xmm0, 0x20(%rsp)
    00000039: 	movsd	init_value(%rip), %xmm0
    00000041: 	leaq	0xd0(%rsp), %r15
    00000049: 	leaq	0x7dd0(%rsp), %rbx
    00000051: 	movq	%fs:0x28, %rax
    0000005a: 	movq	%rax, 0x7dd8(%rsp)
    00000062: 	xorl	%eax, %eax
    00000064: 	movw	%dx, 0x84(%rsp)
    0000006c: 	leaq	0x80(%rsp), %rax
    00000074: 	movl	$0x62756f64, 0x80(%rsp)
    0000007f: 	unpcklpd	%xmm0, %xmm0
    00000083: 	movq	$0x6, 0x78(%rsp)
    0000008c: 	movb	$0x0, 0x86(%rsp)
    00000094: 	movq	%rax, 0x40(%rsp)
    00000099: 	movq	%rax, 0x70(%rsp)
    0000009e: 	movq	%r15, %rax
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp157:
    000000a8: 	movaps	%xmm0, (%rax)
    000000ab: 	addq	$0x10, %rax
    000000af: 	cmpq	%rax, %rbx
    000000b2: 	jne	.Ltmp157 # Offset: 178
    000000b4: 	movq	0x40(%rsp), %rsi
    000000b9: 	leaq	0xc0(%rsp), %rax
    000000c1: 	leaq	0xb0(%rsp), %rdi
    000000c9: 	leaq	0x86(%rsp), %rdx
    000000d1: 	movq	%rdi, 0x28(%rsp)
    000000d6: 	movq	%rax, 0x18(%rsp)
    000000db: 	movq	%rax, 0xb0(%rsp)
    000000e3: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 227
    000000e8: 	movabsq	$0x3fffffffffffffff, %rax
    000000f2: 	subq	0xb8(%rsp), %rax
    000000fa: 	cmpq	$0xf, %rax
    000000fe: 	jbe	.Ltmp158 # Offset: 254
    00000104: 	movq	0x28(%rsp), %rdi
    00000109: 	movl	$0x10, %edx
    0000010e: 	leaq	DATAat0x141d0(%rip), %rsi
    00000115: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 277
    0000011a: 	callq	clock@PLT # Offset: 282
    0000011f: 	movl	iterations(%rip), %edx
    00000125: 	movq	%rax, start_time(%rip)
    0000012c: 	testl	%edx, %edx
    0000012e: 	jle	.Ltmp159 # Offset: 302
    00000134: 	movsd	0x20(%rsp), %xmm7
    0000013a: 	pxor	%xmm6, %xmm6
    0000013e: 	xorl	%r12d, %r12d
    00000141: 	leaq	DATAat0x141e1(%rip), %r13
    00000148: 	movq	%xmm6, %rbp
    0000014d: 	unpcklpd	%xmm7, %xmm7
    00000151: 	movaps	%xmm7, (%rsp)
    00000155: 	nopl	(%rax) # Size: 3
.Ltmp163:
    00000158: 	movq	%r15, %rax
    0000015b: 	movq	%rbp, %xmm1
.Ltmp160:
    00000160: 	movapd	(%rax), %xmm0
    00000164: 	divpd	(%rsp), %xmm0
    00000169: 	addsd	%xmm0, %xmm1
    0000016d: 	unpckhpd	%xmm0, %xmm0
    00000171: 	addq	$0x10, %rax
    00000175: 	addsd	%xmm0, %xmm1
    00000179: 	cmpq	%rax, %rbx
    0000017c: 	jne	.Ltmp160 # Offset: 380
    0000017e: 	movsd	init_value(%rip), %xmm0
    00000186: 	divsd	0x20(%rsp), %xmm0
    0000018c: 	movapd	%xmm1, %xmm2
    00000190: 	mulsd	DATAat0x14320(%rip), %xmm0
    00000198: 	subsd	%xmm0, %xmm2
    0000019c: 	movapd	%xmm1, %xmm0
    000001a0: 	andpd	DATAat0x14360(%rip), %xmm0
    000001a8: 	comisd	DATAat0x14328(%rip), %xmm0
    000001b0: 	jbe	.Ltmp161 # Offset: 432
    000001b2: 	divsd	%xmm1, %xmm2
.Ltmp161:
    000001b6: 	andpd	DATAat0x14360(%rip), %xmm2
    000001be: 	movsd	DATAat0x14330(%rip), %xmm7
    000001c6: 	comisd	%xmm2, %xmm7
    000001ca: 	jbe	.Ltmp162 # Offset: 458
.Ltmp204:
    000001d0: 	addl	$0x1, %r12d
    000001d4: 	cmpl	%edx, %r12d
    000001d7: 	jl	.Ltmp163 # Offset: 471
.Ltmp159:
    000001dd: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000001e4: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000001eb: 	subq	$0x20, %rax
    000001ef: 	cmpq	%rax, %rdi
    000001f2: 	je	.Ltmp164 # Offset: 498
    000001f8: 	leaq	0x10(%rdi), %rax
    000001fc: 	movq	0xb8(%rsp), %rdx
    00000204: 	movq	%rax, (%rdi)
    00000207: 	movq	0xb0(%rsp), %rsi
    0000020f: 	addq	%rsi, %rdx
    00000212: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 530
    00000217: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000021e: 	addq	$0x20, %rax
    00000222: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp213:
    00000229: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000230: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000237: 	je	.Ltmp165 # Offset: 567
.Ltmp212:
    0000023d: 	movq	-0x20(%rax), %r12
    00000241: 	callq	clock@PLT # Offset: 577
    00000246: 	pxor	%xmm0, %xmm0
    0000024a: 	movq	%rax, end_time(%rip)
    00000251: 	movq	%r12, %rdi
    00000254: 	subq	start_time(%rip), %rax
    0000025b: 	cvtsi2sd	%rax, %xmm0
    00000260: 	divsd	DATAat0x14308(%rip), %xmm0
    00000268: 	callq	_Z13record_resultdPKc # Offset: 616
    0000026d: 	movq	0xb0(%rsp), %rdi
    00000275: 	cmpq	0x18(%rsp), %rdi
    0000027a: 	je	.Ltmp166 # Offset: 634
    0000027c: 	movq	0xc0(%rsp), %rax
    00000284: 	leaq	0x1(%rax), %rsi
    00000288: 	callq	_ZdlPvm@PLT # Offset: 648
.Ltmp166:
    0000028d: 	movq	0x70(%rsp), %rsi
    00000292: 	movq	0x78(%rsp), %rdx
    00000297: 	leaq	0xa0(%rsp), %rax
    0000029f: 	leaq	0x90(%rsp), %rdi
    000002a7: 	movq	%rdi, 0x20(%rsp)
    000002ac: 	addq	%rsi, %rdx
    000002af: 	movq	%rax, 0x30(%rsp)
    000002b4: 	movq	%rax, 0x90(%rsp)
    000002bc: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 700
    000002c1: 	movabsq	$0x3fffffffffffffff, %rax
    000002cb: 	subq	0x98(%rsp), %rax
    000002d3: 	cmpq	$0xf, %rax
    000002d7: 	jbe	.Ltmp167 # Offset: 727
    000002dd: 	movq	0x20(%rsp), %rdi
    000002e2: 	movl	$0x10, %edx
    000002e7: 	leaq	DATAat0x141f1(%rip), %rsi
    000002ee: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 750
    000002f3: 	callq	clock@PLT # Offset: 755
    000002f8: 	pxor	%xmm7, %xmm7
    000002fc: 	xorl	%r14d, %r14d
    000002ff: 	movq	%rax, start_time(%rip)
    00000306: 	movl	iterations(%rip), %eax
    0000030c: 	movq	%xmm7, %rbp
    00000311: 	testl	%eax, %eax
    00000313: 	jle	.Ltmp168 # Offset: 787
    00000319: 	nopl	(%rax) # Size: 7
.Ltmp177:
    00000320: 	movq	%rbp, (%rsp)
    00000324: 	movq	%r15, %rax
    00000327: 	nopw	(%rax,%rax) # Size: 9
.Ltmp169:
    00000330: 	movsd	(%rsp), %xmm1
    00000335: 	movapd	(%rax), %xmm0
    00000339: 	addq	$0x10, %rax
    0000033d: 	divpd	DATAat0x14380(%rip), %xmm0
    00000345: 	addsd	%xmm0, %xmm1
    00000349: 	unpckhpd	%xmm0, %xmm0
    0000034d: 	addsd	%xmm1, %xmm0
    00000351: 	movsd	%xmm0, (%rsp)
    00000356: 	cmpq	%rax, %rbx
    00000359: 	jne	.Ltmp169 # Offset: 857
    0000035b: 	movq	0x18(%rsp), %rax
    00000360: 	movq	0x90(%rsp), %r13
    00000368: 	movq	0x98(%rsp), %r12
    00000370: 	movq	%rax, 0xb0(%rsp)
    00000378: 	movq	%r13, %rax
    0000037b: 	addq	%r12, %rax
    0000037e: 	je	.Ltmp170 # Offset: 894
    00000380: 	testq	%r13, %r13
    00000383: 	je	.Ltmp171 # Offset: 899
.Ltmp170:
    00000389: 	movq	%r12, 0x68(%rsp)
    0000038e: 	cmpq	$0xf, %r12
    00000392: 	ja	.Ltmp172 # Offset: 914
    00000398: 	cmpq	$0x1, %r12
    0000039c: 	jne	.Ltmp173 # Offset: 924
    000003a2: 	movzbl	(%r13), %eax
    000003a7: 	movb	%al, 0xc0(%rsp)
    000003ae: 	movq	0x18(%rsp), %rax
.Ltmp203:
    000003b3: 	movq	%r12, 0xb8(%rsp)
    000003bb: 	movsd	(%rsp), %xmm5
    000003c0: 	movb	$0x0, (%rax,%r12)
    000003c5: 	movsd	init_value(%rip), %xmm0
    000003cd: 	divsd	DATAat0x14380(%rip), %xmm0
    000003d5: 	mulsd	DATAat0x14320(%rip), %xmm0
    000003dd: 	movapd	%xmm5, %xmm1
    000003e1: 	subsd	%xmm0, %xmm1
    000003e5: 	movapd	%xmm5, %xmm0
    000003e9: 	andpd	DATAat0x14360(%rip), %xmm0
    000003f1: 	comisd	DATAat0x14328(%rip), %xmm0
    000003f9: 	jbe	.Ltmp174 # Offset: 1017
    000003fb: 	divsd	%xmm5, %xmm1
.Ltmp174:
    000003ff: 	andpd	DATAat0x14360(%rip), %xmm1
    00000407: 	movsd	DATAat0x14330(%rip), %xmm0
    0000040f: 	movq	0xb0(%rsp), %rdi
    00000417: 	comisd	%xmm1, %xmm0
    0000041b: 	jbe	.Ltmp175 # Offset: 1051
.Ltmp205:
    00000421: 	cmpq	0x18(%rsp), %rdi
    00000426: 	je	.Ltmp176 # Offset: 1062
    0000042c: 	movq	0xc0(%rsp), %rax
    00000434: 	addl	$0x1, %r14d
    00000438: 	leaq	0x1(%rax), %rsi
    0000043c: 	callq	_ZdlPvm@PLT # Offset: 1084
    00000441: 	cmpl	iterations(%rip), %r14d
    00000448: 	jl	.Ltmp177 # Offset: 1096
.Ltmp168:
    0000044e: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000455: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    0000045c: 	subq	$0x20, %rax
    00000460: 	cmpq	%rax, %rdi
    00000463: 	je	.Ltmp178 # Offset: 1123
    00000469: 	leaq	0x10(%rdi), %rax
    0000046d: 	movq	0x98(%rsp), %rdx
    00000475: 	movq	%rax, (%rdi)
    00000478: 	movq	0x90(%rsp), %rsi
    00000480: 	addq	%rsi, %rdx
    00000483: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1155
    00000488: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000048f: 	addq	$0x20, %rax
    00000493: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp211:
    0000049a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000004a1: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000004a8: 	je	.Ltmp179 # Offset: 1192
.Ltmp210:
    000004ae: 	movq	-0x20(%rax), %r12
    000004b2: 	callq	clock@PLT # Offset: 1202
    000004b7: 	pxor	%xmm0, %xmm0
    000004bb: 	movq	%rax, end_time(%rip)
    000004c2: 	movq	%r12, %rdi
    000004c5: 	subq	start_time(%rip), %rax
    000004cc: 	cvtsi2sd	%rax, %xmm0
    000004d1: 	divsd	DATAat0x14308(%rip), %xmm0
    000004d9: 	callq	_Z13record_resultdPKc # Offset: 1241
    000004de: 	movq	0x90(%rsp), %rdi
    000004e6: 	cmpq	0x30(%rsp), %rdi
    000004eb: 	je	.Ltmp180 # Offset: 1259
    000004ed: 	movq	0xa0(%rsp), %rax
    000004f5: 	leaq	0x1(%rax), %rsi
    000004f9: 	callq	_ZdlPvm@PLT # Offset: 1273
.Ltmp180:
    000004fe: 	movq	0x18(%rsp), %rax
    00000503: 	movq	0x70(%rsp), %r13
    00000508: 	movq	0x78(%rsp), %r12
    0000050d: 	movq	%rax, 0xb0(%rsp)
    00000515: 	movq	%r13, %rax
    00000518: 	addq	%r12, %rax
    0000051b: 	je	.Ltmp181 # Offset: 1307
    0000051d: 	testq	%r13, %r13
    00000520: 	je	.Ltmp182 # Offset: 1312
.Ltmp181:
    00000526: 	movq	%r12, 0x68(%rsp)
    0000052b: 	cmpq	$0xf, %r12
    0000052f: 	ja	.Ltmp183 # Offset: 1327
    00000535: 	cmpq	$0x1, %r12
    00000539: 	jne	.Ltmp184 # Offset: 1337
    0000053f: 	movzbl	(%r13), %eax
    00000544: 	movb	%al, 0xc0(%rsp)
    0000054b: 	movq	0x18(%rsp), %rax
.Ltmp209:
    00000550: 	movq	%r12, 0xb8(%rsp)
    00000558: 	movb	$0x0, (%rax,%r12)
    0000055d: 	movabsq	$0x3fffffffffffffff, %rax
    00000567: 	subq	0xb8(%rsp), %rax
    0000056f: 	cmpq	$0x8, %rax
    00000573: 	jbe	.Ltmp185 # Offset: 1395
    00000579: 	movq	0x28(%rsp), %rdi
    0000057e: 	movl	$0x9, %edx
    00000583: 	leaq	DATAat0x14202(%rip), %rsi
    0000058a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1418
    0000058f: 	movl	iterations(%rip), %edx
    00000595: 	xorl	%r8d, %r8d
    00000598: 	xorl	%ecx, %ecx
    0000059a: 	movl	$0xfa0, %esi
    0000059f: 	movq	0xb0(%rsp), %rdi
    000005a7: 	callq	_Z9summarizePKciiii # Offset: 1447
    000005ac: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm7
    000005b4: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000005bb: 	movq	"_ZL7gLabels/1"+56(%rip), %r15
    000005c2: 	movaps	%xmm7, 0x50(%rsp)
    000005c7: 	movq	%xmm7, %r12
    000005cc: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm7
    000005d4: 	movq	%rax, 0x20(%rsp)
    000005d9: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000005e0: 	movhlps	%xmm7, %xmm6
    000005e3: 	movaps	%xmm7, 0x30(%rsp)
    000005e8: 	movq	%xmm6, %rcx
    000005ed: 	movq	%rax, (%rsp)
    000005f1: 	leaq	0x8(%rcx), %r13
    000005f5: 	movq	%xmm6, 0x48(%rsp)
    000005fb: 	movq	%xmm7, 0x28(%rsp)
    00000601: 	movq	%r13, %r14
    00000604: 	cmpq	%r13, %rax
    00000607: 	jbe	.Ltmp186 # Offset: 1543
    00000609: 	nopl	(%rax) # Size: 7
.Ltmp189:
    00000610: 	movq	(%r14), %rbp
    00000613: 	leaq	0x200(%rbp), %rbx
    0000061a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp188:
    00000620: 	movq	(%rbp), %rdi
    00000624: 	leaq	0x10(%rbp), %rdx
    00000628: 	cmpq	%rdx, %rdi
    0000062b: 	je	.Ltmp187 # Offset: 1579
    00000631: 	movq	0x10(%rbp), %rax
    00000635: 	addq	$0x20, %rbp
    00000639: 	leaq	0x1(%rax), %rsi
    0000063d: 	callq	_ZdlPvm@PLT # Offset: 1597
    00000642: 	cmpq	%rbx, %rbp
    00000645: 	jne	.Ltmp188 # Offset: 1605
    00000647: 	addq	$0x8, %r14
    0000064b: 	cmpq	%r14, (%rsp)
    0000064f: 	ja	.Ltmp189 # Offset: 1615
.Ltmp186:
    00000651: 	movq	(%rsp), %rcx
    00000655: 	cmpq	%rcx, 0x48(%rsp)
    0000065a: 	jne	.Ltmp190 # Offset: 1626
    0000065c: 	jmp	.Ltmp191 # Offset: 1628
    00000661: 	nopl	(%rax) # Size: 7
.Ltmp193:
    00000668: 	movq	(%r12), %rdi
    0000066c: 	leaq	0x10(%r12), %rax
    00000671: 	cmpq	%rax, %rdi
    00000674: 	je	.Ltmp192 # Offset: 1652
    00000676: 	movq	0x10(%r12), %rax
    0000067b: 	leaq	0x1(%rax), %rsi
    0000067f: 	callq	_ZdlPvm@PLT # Offset: 1663
.Ltmp192:
    00000684: 	addq	$0x20, %r12
.Ltmp190:
    00000688: 	cmpq	%r12, 0x28(%rsp)
    0000068d: 	jne	.Ltmp193 # Offset: 1677
    0000068f: 	cmpq	%r15, 0x20(%rsp)
    00000694: 	je	.Ltmp194 # Offset: 1684
    00000696: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp196:
    000006a0: 	movq	(%r15), %rdi
    000006a3: 	leaq	0x10(%r15), %rax
    000006a7: 	cmpq	%rax, %rdi
    000006aa: 	je	.Ltmp195 # Offset: 1706
    000006ac: 	movq	0x10(%r15), %rax
    000006b0: 	leaq	0x1(%rax), %rsi
    000006b4: 	callq	_ZdlPvm@PLT # Offset: 1716
.Ltmp195:
    000006b9: 	addq	$0x20, %r15
    000006bd: 	cmpq	%r15, 0x20(%rsp)
    000006c2: 	jne	.Ltmp196 # Offset: 1730
.Ltmp194:
    000006c4: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000006cb: 	leaq	0x8(%rax), %rbx
    000006cf: 	cmpq	%r13, %rbx
    000006d2: 	jbe	.Ltmp197 # Offset: 1746
    000006d4: 	nopl	(%rax) # Size: 4
.Ltmp198:
    000006d8: 	movq	(%r13), %rdi
    000006dc: 	movl	$0x200, %esi
    000006e1: 	addq	$0x8, %r13
    000006e5: 	callq	_ZdlPvm@PLT # Offset: 1765
    000006ea: 	cmpq	%r13, %rbx
    000006ed: 	ja	.Ltmp198 # Offset: 1773
.Ltmp197:
    000006ef: 	movdqa	0x50(%rsp), %xmm6
    000006f5: 	movq	0xb0(%rsp), %rdi
    000006fd: 	movaps	%xmm6, "_ZL7gLabels/1"+48(%rip)
    00000704: 	movdqa	0x30(%rsp), %xmm6
    0000070a: 	movaps	%xmm6, "_ZL7gLabels/1"+64(%rip)
    00000711: 	cmpq	0x18(%rsp), %rdi
    00000716: 	je	.Ltmp199 # Offset: 1814
    00000718: 	movq	0xc0(%rsp), %rax
    00000720: 	leaq	0x1(%rax), %rsi
    00000724: 	callq	_ZdlPvm@PLT # Offset: 1828
.Ltmp199:
    00000729: 	movq	0x70(%rsp), %rdi
    0000072e: 	cmpq	0x40(%rsp), %rdi
    00000733: 	je	.Ltmp200 # Offset: 1843
    00000735: 	movq	0x80(%rsp), %rax
    0000073d: 	leaq	0x1(%rax), %rsi
    00000741: 	callq	_ZdlPvm@PLT # Offset: 1857
.Ltmp200:
    00000746: 	movq	0x7dd8(%rsp), %rax
    0000074e: 	subq	%fs:0x28, %rax
    00000757: 	jne	.Ltmp201 # Offset: 1879
    0000075d: 	addq	$0x7de8, %rsp
    00000764: 	popq	%rbx
    00000765: 	popq	%rbp
    00000766: 	popq	%r12
    00000768: 	popq	%r13
    0000076a: 	popq	%r14
    0000076c: 	popq	%r15
    0000076e: 	retq # Offset: 1902
    0000076f: 	nop # Size: 1
.Ltmp176:
    00000770: 	addl	$0x1, %r14d
    00000774: 	cmpl	iterations(%rip), %r14d
    0000077b: 	jl	.Ltmp177 # Offset: 1915
    00000781: 	jmp	.Ltmp168 # Offset: 1921
    00000786: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp173:
    00000790: 	testq	%r12, %r12
    00000793: 	jne	.Ltmp202 # Offset: 1939
    00000799: 	movq	0x18(%rsp), %rax
    0000079e: 	jmp	.Ltmp203 # Offset: 1950
    000007a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp162:
    000007a8: 	movq	0xb0(%rsp), %rdx
    000007b0: 	movq	%r13, %rsi
    000007b3: 	movl	$0x1, %edi
    000007b8: 	xorl	%eax, %eax
    000007ba: 	callq	__printf_chk@PLT # Offset: 1978
    000007bf: 	movl	iterations(%rip), %edx
    000007c5: 	jmp	.Ltmp204 # Offset: 1989
    000007ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp175:
    000007d0: 	movq	%rdi, %rdx
    000007d3: 	leaq	DATAat0x141e1(%rip), %rsi
    000007da: 	movl	$0x1, %edi
    000007df: 	xorl	%eax, %eax
    000007e1: 	callq	__printf_chk@PLT # Offset: 2017
    000007e6: 	movq	0xb0(%rsp), %rdi
    000007ee: 	jmp	.Ltmp205 # Offset: 2030
    000007f3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp172:
    000007f8: 	movq	0x28(%rsp), %rdi
    000007fd: 	leaq	0x68(%rsp), %rsi
    00000802: 	xorl	%edx, %edx
    00000804: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2052
    00000809: 	movq	%rax, 0xb0(%rsp)
    00000811: 	movq	%rax, %rdi
    00000814: 	movq	0x68(%rsp), %rax
    00000819: 	movq	%rax, 0xc0(%rsp)
.Ltmp215:
    00000821: 	movq	%r12, %rdx
    00000824: 	movq	%r13, %rsi
    00000827: 	callq	memcpy@PLT # Offset: 2087
    0000082c: 	movq	0x68(%rsp), %r12
    00000831: 	movq	0xb0(%rsp), %rax
    00000839: 	jmp	.Ltmp203 # Offset: 2105
    0000083e: 	nop # Size: 2
.Ltmp206:
    00000840: 	addq	$0x20, %r12
.Ltmp191:
    00000844: 	cmpq	%r12, 0x20(%rsp)
    00000849: 	je	.Ltmp194 # Offset: 2121
.Ltmp207:
    0000084f: 	movq	(%r12), %rdi
    00000853: 	leaq	0x10(%r12), %rax
    00000858: 	cmpq	%rax, %rdi
    0000085b: 	je	.Ltmp206 # Offset: 2139
    0000085d: 	movq	0x10(%r12), %rax
    00000862: 	addq	$0x20, %r12
    00000866: 	leaq	0x1(%rax), %rsi
    0000086a: 	callq	_ZdlPvm@PLT # Offset: 2154
    0000086f: 	cmpq	0x20(%rsp), %r12
    00000874: 	jne	.Ltmp207 # Offset: 2164
    00000876: 	jmp	.Ltmp194 # Offset: 2166
.Ltmp184:
    0000087b: 	testq	%r12, %r12
    0000087e: 	jne	.Ltmp208 # Offset: 2174
    00000884: 	movq	0x18(%rsp), %rax
    00000889: 	jmp	.Ltmp209 # Offset: 2185
    0000088e: 	nop # Size: 2
.Ltmp187:
    00000890: 	addq	$0x20, %rbp
    00000894: 	cmpq	%rbx, %rbp
    00000897: 	jne	.Ltmp188 # Offset: 2199
    0000089d: 	addq	$0x8, %r14
    000008a1: 	cmpq	%r14, (%rsp)
    000008a5: 	ja	.Ltmp189 # Offset: 2213
    000008ab: 	jmp	.Ltmp186 # Offset: 2219
.Ltmp183:
    000008b0: 	movq	0x28(%rsp), %rdi
    000008b5: 	leaq	0x68(%rsp), %rsi
    000008ba: 	xorl	%edx, %edx
    000008bc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2236
    000008c1: 	movq	%rax, 0xb0(%rsp)
    000008c9: 	movq	%rax, %rdi
    000008cc: 	movq	0x68(%rsp), %rax
    000008d1: 	movq	%rax, 0xc0(%rsp)
.Ltmp214:
    000008d9: 	movq	%r12, %rdx
    000008dc: 	movq	%r13, %rsi
    000008df: 	callq	memcpy@PLT # Offset: 2271
    000008e4: 	movq	0x68(%rsp), %r12
    000008e9: 	movq	0xb0(%rsp), %rax
    000008f1: 	jmp	.Ltmp209 # Offset: 2289
.Ltmp179:
    000008f6: 	movq	-0x8(%rdx), %rax
    000008fa: 	addq	$0x200, %rax
    00000900: 	jmp	.Ltmp210 # Offset: 2304
.Ltmp178:
    00000905: 	movq	0x20(%rsp), %rsi
    0000090a: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000911: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 2321
    00000916: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000091d: 	jmp	.Ltmp211 # Offset: 2333
.Ltmp165:
    00000922: 	movq	-0x8(%rdx), %rax
    00000926: 	addq	$0x200, %rax
    0000092c: 	jmp	.Ltmp212 # Offset: 2348
.Ltmp164:
    00000931: 	movq	0x28(%rsp), %rsi
    00000936: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000093d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 2365
    00000942: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000949: 	jmp	.Ltmp213 # Offset: 2377
.Ltmp182:
    0000094e: 	leaq	DATAat0x14008(%rip), %rdi
    00000955: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 2389
.Ltmp185:
    0000095a: 	leaq	DATAat0x14184(%rip), %rdi
    00000961: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 2401
.Ltmp201:
    00000966: 	callq	__stack_chk_fail@PLT # Offset: 2406
.Ltmp208:
    0000096b: 	movq	0x18(%rsp), %rdi
    00000970: 	jmp	.Ltmp214 # Offset: 2416
.Ltmp167:
    00000975: 	leaq	DATAat0x14184(%rip), %rdi
    0000097c: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 2428
.Ltmp158:
    00000981: 	leaq	DATAat0x14184(%rip), %rdi
    00000988: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 2440
.Ltmp202:
    0000098d: 	movq	0x18(%rsp), %rdi
    00000992: 	jmp	.Ltmp215 # Offset: 2450
.Ltmp171:
    00000997: 	leaq	DATAat0x14008(%rip), %rdi
    0000099e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 2462
    000009a3: 	endbr64
    000009a7: 	movq	%rax, %rbx
    000009aa: 	jmp	.Ltmp216 # Offset: 2474
    000009ac: 	endbr64
.Ltmp221:
    000009b0: 	movq	%rax, %rbx
    000009b3: 	jmp	.Ltmp217 # Offset: 2483
.Ltmp216:
    000009b8: 	movq	0xb0(%rsp), %rdi
    000009c0: 	cmpq	0x18(%rsp), %rdi
    000009c5: 	je	.Ltmp218 # Offset: 2501
    000009c7: 	movq	0xc0(%rsp), %rax
    000009cf: 	leaq	0x1(%rax), %rsi
    000009d3: 	callq	_ZdlPvm@PLT # Offset: 2515
.Ltmp218:
    000009d8: 	movq	0x90(%rsp), %rdi
    000009e0: 	cmpq	0x30(%rsp), %rdi
    000009e5: 	je	.Ltmp219 # Offset: 2533
    000009e7: 	movq	0xa0(%rsp), %rax
    000009ef: 	leaq	0x1(%rax), %rsi
    000009f3: 	callq	_ZdlPvm@PLT # Offset: 2547
.Ltmp219:
    000009f8: 	movq	0x70(%rsp), %rdi
    000009fd: 	cmpq	0x40(%rsp), %rdi
    00000a02: 	je	.Ltmp220 # Offset: 2562
    00000a04: 	movq	0x80(%rsp), %rax
    00000a0c: 	leaq	0x1(%rax), %rsi
    00000a10: 	callq	_ZdlPvm@PLT # Offset: 2576
.Ltmp220:
    00000a15: 	movq	%rbx, %rdi
    00000a18: 	callq	_Unwind_Resume@PLT # Offset: 2584
    00000a1d: 	endbr64
    00000a21: 	jmp	.Ltmp221 # Offset: 2593
    00000a23: 	endbr64
.Ltmp222:
    00000a27: 	movq	%rax, %rbx
    00000a2a: 	jmp	.Ltmp218 # Offset: 2602
    00000a2c: 	endbr64
    00000a30: 	movq	%rax, %rbx
    00000a33: 	jmp	.Ltmp219 # Offset: 2611
    00000a35: 	endbr64
    00000a39: 	jmp	.Ltmp222 # Offset: 2617
    00000a3b: 	endbr64
    00000a3f: 	jmp	.Ltmp221 # Offset: 2623
.Ltmp217:
    00000a44: 	movq	0xb0(%rsp), %rdi
    00000a4c: 	cmpq	0x18(%rsp), %rdi
    00000a51: 	je	.Ltmp219 # Offset: 2641
    00000a53: 	movq	0xc0(%rsp), %rax
    00000a5b: 	leaq	0x1(%rax), %rsi
    00000a5f: 	callq	_ZdlPvm@PLT # Offset: 2655
    00000a64: 	jmp	.Ltmp219 # Offset: 2660
    00000a66: 	endbr64
    00000a6a: 	jmp	.Ltmp221 # Offset: 2666
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestOneTypeFloatIdEvd"

Binary Function "_Z16TestOneTypeFloatIeEvd" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x3f00
  Size        : 0x9d6
  MaxSize     : 0x9e0
  Offset      : 0x3f00
  Section     : .text
  Orc Section : .local.text._Z16TestOneTypeFloatIeEvd
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0xf000(%rsp), %r11
.Ltmp223:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp223 # Offset: 37
    00000027: 	subq	$0xae8, %rsp
    0000002e: 	movl	$0x6c62, %edx
    00000033: 	movsd	%xmm0, (%rsp)
    00000038: 	fldl	(%rsp)
    0000003b: 	fldl	init_value(%rip)
    00000041: 	leaq	0xd0(%rsp), %r15
    00000049: 	movq	%fs:0x28, %rax
    00000052: 	movq	%rax, 0xfad8(%rsp)
    0000005a: 	xorl	%eax, %eax
    0000005c: 	leaq	0x80(%rsp), %rax
    00000064: 	movw	%dx, 0x88(%rsp)
    0000006c: 	leaq	0xfad0(%rsp), %rbx
    00000074: 	movb	$0x65, 0x8a(%rsp)
    0000007c: 	movq	$0xb, 0x78(%rsp)
    00000085: 	movb	$0x0, 0x8b(%rsp)
    0000008d: 	movq	%rax, 0x40(%rsp)
    00000092: 	movq	%rax, 0x70(%rsp)
    00000097: 	movabsq	$0x756f6420676e6f6c, %rax
    000000a1: 	movq	%rax, 0x80(%rsp)
    000000a9: 	movq	%r15, %rax
    000000ac: 	nopl	(%rax) # Size: 4
.Ltmp224:
    000000b0: 	addq	$0x10, %rax
    000000b4: 	fld	%st(0)
    000000b6: 	fstpt	-0x10(%rax)
    000000b9: 	cmpq	%rbx, %rax
    000000bc: 	jne	.Ltmp224 # Offset: 188
    000000be: 	fstp	%st(0)
    000000c0: 	movq	0x40(%rsp), %rsi
    000000c5: 	leaq	0xc0(%rsp), %rax
    000000cd: 	fstpt	(%rsp)
    000000d0: 	leaq	0xb0(%rsp), %rdi
    000000d8: 	leaq	0x8b(%rsp), %rdx
    000000e0: 	movq	%rdi, %rbp
    000000e3: 	movq	%rax, 0x18(%rsp)
    000000e8: 	movq	%rax, 0xb0(%rsp)
    000000f0: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 240
    000000f5: 	movabsq	$0x3fffffffffffffff, %rax
    000000ff: 	subq	0xb8(%rsp), %rax
    00000107: 	cmpq	$0xf, %rax
    0000010b: 	jbe	.Ltmp225 # Offset: 267
    00000111: 	movl	$0x10, %edx
    00000116: 	leaq	DATAat0x141d0(%rip), %rsi
    0000011d: 	movq	%rbp, %rdi
    00000120: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 288
    00000125: 	callq	clock@PLT # Offset: 293
    0000012a: 	movl	iterations(%rip), %edx
    00000130: 	movq	%rax, start_time(%rip)
    00000137: 	testl	%edx, %edx
    00000139: 	jle	.Ltmp226 # Offset: 313
    0000013f: 	pxor	%xmm7, %xmm7
    00000143: 	xorl	%r12d, %r12d
    00000146: 	leaq	DATAat0x141e1(%rip), %r13
    0000014d: 	movss	%xmm7, 0x28(%rsp)
    00000153: 	nopl	(%rax,%rax) # Size: 5
.Ltmp232:
    00000158: 	movq	%r15, %rax
    0000015b: 	fldz
    0000015d: 	jmp	.Ltmp227 # Offset: 349
    0000015f: 	nop # Size: 1
.Ltmp228:
    00000160: 	fstp	%st(1)
.Ltmp227:
    00000162: 	fldt	(%rax)
    00000164: 	addq	$0x10, %rax
    00000168: 	fldt	(%rsp)
    0000016b: 	fdivr	%st, %st(1)
    0000016d: 	fxch	%st(2)
    0000016f: 	faddp	%st, %st(1)
    00000171: 	cmpq	%rax, %rbx
    00000174: 	jne	.Ltmp228 # Offset: 372
    00000176: 	fxch	%st(1)
    00000178: 	fdivrl	init_value(%rip)
    0000017e: 	fmuls	DATAat0x14340(%rip)
    00000184: 	fsubr	%st(1), %st
    00000186: 	fstpl	0x20(%rsp)
    0000018a: 	fld	%st(0)
    0000018c: 	fabs
    0000018e: 	fldl	DATAat0x14328(%rip)
    00000194: 	fxch	%st(1)
    00000196: 	fcompi	%st(1), %st
    00000198: 	fstp	%st(0)
    0000019a: 	jbe	.Ltmp229 # Offset: 410
    0000019c: 	fdivrl	0x20(%rsp)
    000001a0: 	fstpl	0x20(%rsp)
    000001a4: 	jmp	.Ltmp230 # Offset: 420
    000001a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp229:
    000001b0: 	fstp	%st(0)
.Ltmp230:
    000001b2: 	movsd	0x20(%rsp), %xmm0
    000001b8: 	movsd	DATAat0x14330(%rip), %xmm1
    000001c0: 	andpd	DATAat0x14360(%rip), %xmm0
    000001c8: 	comisd	%xmm0, %xmm1
    000001cc: 	jbe	.Ltmp231 # Offset: 460
.Ltmp273:
    000001d2: 	addl	$0x1, %r12d
    000001d6: 	cmpl	%edx, %r12d
    000001d9: 	jl	.Ltmp232 # Offset: 473
.Ltmp226:
    000001df: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000001e6: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000001ed: 	subq	$0x20, %rax
    000001f1: 	cmpq	%rax, %rdi
    000001f4: 	je	.Ltmp233 # Offset: 500
    000001fa: 	leaq	0x10(%rdi), %rax
    000001fe: 	movq	0xb8(%rsp), %rdx
    00000206: 	movq	%rax, (%rdi)
    00000209: 	movq	0xb0(%rsp), %rsi
    00000211: 	addq	%rsi, %rdx
    00000214: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 532
    00000219: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000220: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000227: 	addq	$0x20, %rax
    0000022b: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000232: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000239: 	je	.Ltmp234 # Offset: 569
.Ltmp275:
    0000023f: 	movq	-0x20(%rax), %r12
    00000243: 	callq	clock@PLT # Offset: 579
    00000248: 	pxor	%xmm0, %xmm0
    0000024c: 	movq	%rax, end_time(%rip)
    00000253: 	movq	%r12, %rdi
    00000256: 	subq	start_time(%rip), %rax
    0000025d: 	cvtsi2sd	%rax, %xmm0
    00000262: 	divsd	DATAat0x14308(%rip), %xmm0
    0000026a: 	callq	_Z13record_resultdPKc # Offset: 618
    0000026f: 	movq	0xb0(%rsp), %rdi
    00000277: 	cmpq	0x18(%rsp), %rdi
    0000027c: 	je	.Ltmp235 # Offset: 636
    0000027e: 	movq	0xc0(%rsp), %rax
    00000286: 	leaq	0x1(%rax), %rsi
    0000028a: 	callq	_ZdlPvm@PLT # Offset: 650
.Ltmp235:
    0000028f: 	movq	0x70(%rsp), %rsi
    00000294: 	movq	0x78(%rsp), %rdx
    00000299: 	leaq	0xa0(%rsp), %rax
    000002a1: 	leaq	0x90(%rsp), %rdi
    000002a9: 	movq	%rdi, 0x20(%rsp)
    000002ae: 	addq	%rsi, %rdx
    000002b1: 	movq	%rax, 0x30(%rsp)
    000002b6: 	movq	%rax, 0x90(%rsp)
    000002be: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 702
    000002c3: 	movabsq	$0x3fffffffffffffff, %rax
    000002cd: 	subq	0x98(%rsp), %rax
    000002d5: 	cmpq	$0xf, %rax
    000002d9: 	jbe	.Ltmp236 # Offset: 729
    000002df: 	movq	0x20(%rsp), %rdi
    000002e4: 	movl	$0x10, %edx
    000002e9: 	leaq	DATAat0x141f1(%rip), %rsi
    000002f0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 752
    000002f5: 	callq	clock@PLT # Offset: 757
    000002fa: 	movq	%rax, start_time(%rip)
    00000301: 	movl	iterations(%rip), %eax
    00000307: 	testl	%eax, %eax
    00000309: 	jle	.Ltmp237 # Offset: 777
    0000030f: 	pxor	%xmm7, %xmm7
    00000313: 	xorl	%r14d, %r14d
    00000316: 	movss	%xmm7, 0x28(%rsp)
    0000031c: 	nopl	(%rax) # Size: 4
.Ltmp247:
    00000320: 	fldz
    00000322: 	movq	%r15, %rax
    00000325: 	fstpt	(%rsp)
    00000328: 	nopl	(%rax,%rax) # Size: 8
.Ltmp238:
    00000330: 	fldt	(%rax)
    00000332: 	addq	$0x10, %rax
    00000336: 	fdivs	DATAat0x14370(%rip)
    0000033c: 	fldt	(%rsp)
    0000033f: 	faddp	%st, %st(1)
    00000341: 	fstpt	(%rsp)
    00000344: 	cmpq	%rax, %rbx
    00000347: 	jne	.Ltmp238 # Offset: 839
    00000349: 	movq	0x18(%rsp), %rax
    0000034e: 	movq	0x90(%rsp), %r13
    00000356: 	movq	0x98(%rsp), %r12
    0000035e: 	movq	%rax, 0xb0(%rsp)
    00000366: 	movq	%r13, %rax
    00000369: 	addq	%r12, %rax
    0000036c: 	je	.Ltmp239 # Offset: 876
    0000036e: 	testq	%r13, %r13
    00000371: 	je	.Ltmp240 # Offset: 881
.Ltmp239:
    00000377: 	movq	%r12, 0x68(%rsp)
    0000037c: 	cmpq	$0xf, %r12
    00000380: 	ja	.Ltmp241 # Offset: 896
    00000386: 	cmpq	$0x1, %r12
    0000038a: 	jne	.Ltmp242 # Offset: 906
    00000390: 	movzbl	(%r13), %eax
    00000395: 	movb	%al, 0xc0(%rsp)
    0000039c: 	movq	0x18(%rsp), %rax
.Ltmp272:
    000003a1: 	movq	%r12, 0xb8(%rsp)
    000003a9: 	flds	DATAat0x14370(%rip)
    000003af: 	movb	$0x0, (%rax,%r12)
    000003b4: 	fdivrl	init_value(%rip)
    000003ba: 	fmuls	DATAat0x14340(%rip)
    000003c0: 	fldt	(%rsp)
    000003c3: 	fsub	%st, %st(1)
    000003c5: 	fxch	%st(1)
    000003c7: 	fstpl	(%rsp)
    000003ca: 	fld	%st(0)
    000003cc: 	fabs
    000003ce: 	fldl	DATAat0x14328(%rip)
    000003d4: 	fxch	%st(1)
    000003d6: 	fcompi	%st(1), %st
    000003d8: 	fstp	%st(0)
    000003da: 	jbe	.Ltmp243 # Offset: 986
    000003dc: 	fdivrl	(%rsp)
    000003df: 	fstpl	(%rsp)
    000003e2: 	jmp	.Ltmp244 # Offset: 994
    000003e4: 	nopl	(%rax) # Size: 4
.Ltmp243:
    000003e8: 	fstp	%st(0)
.Ltmp244:
    000003ea: 	movsd	(%rsp), %xmm0
    000003ef: 	movsd	DATAat0x14330(%rip), %xmm2
    000003f7: 	andpd	DATAat0x14360(%rip), %xmm0
    000003ff: 	movq	0xb0(%rsp), %rdi
    00000407: 	comisd	%xmm0, %xmm2
    0000040b: 	jbe	.Ltmp245 # Offset: 1035
.Ltmp274:
    00000411: 	cmpq	0x18(%rsp), %rdi
    00000416: 	je	.Ltmp246 # Offset: 1046
    0000041c: 	movq	0xc0(%rsp), %rax
    00000424: 	addl	$0x1, %r14d
    00000428: 	leaq	0x1(%rax), %rsi
    0000042c: 	callq	_ZdlPvm@PLT # Offset: 1068
    00000431: 	cmpl	iterations(%rip), %r14d
    00000438: 	jl	.Ltmp247 # Offset: 1080
.Ltmp237:
    0000043e: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000445: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    0000044c: 	subq	$0x20, %rax
    00000450: 	cmpq	%rax, %rdi
    00000453: 	je	.Ltmp248 # Offset: 1107
    00000459: 	leaq	0x10(%rdi), %rax
    0000045d: 	movq	0x98(%rsp), %rdx
    00000465: 	movq	%rax, (%rdi)
    00000468: 	movq	0x90(%rsp), %rsi
    00000470: 	addq	%rsi, %rdx
    00000473: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1139
    00000478: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000047f: 	addq	$0x20, %rax
    00000483: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp277:
    0000048a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000491: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000498: 	je	.Ltmp249 # Offset: 1176
.Ltmp276:
    0000049e: 	movq	-0x20(%rax), %r12
    000004a2: 	callq	clock@PLT # Offset: 1186
    000004a7: 	pxor	%xmm0, %xmm0
    000004ab: 	movq	%rax, end_time(%rip)
    000004b2: 	movq	%r12, %rdi
    000004b5: 	subq	start_time(%rip), %rax
    000004bc: 	cvtsi2sd	%rax, %xmm0
    000004c1: 	divsd	DATAat0x14308(%rip), %xmm0
    000004c9: 	callq	_Z13record_resultdPKc # Offset: 1225
    000004ce: 	movq	0x90(%rsp), %rdi
    000004d6: 	cmpq	0x30(%rsp), %rdi
    000004db: 	je	.Ltmp250 # Offset: 1243
    000004dd: 	movq	0xa0(%rsp), %rax
    000004e5: 	leaq	0x1(%rax), %rsi
    000004e9: 	callq	_ZdlPvm@PLT # Offset: 1257
.Ltmp250:
    000004ee: 	movq	0x70(%rsp), %rsi
    000004f3: 	movq	0x78(%rsp), %rdx
    000004f8: 	movq	%rbp, %rdi
    000004fb: 	movq	0x18(%rsp), %rax
    00000500: 	addq	%rsi, %rdx
    00000503: 	movq	%rax, 0xb0(%rsp)
    0000050b: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1291
    00000510: 	movabsq	$0x3fffffffffffffff, %rax
    0000051a: 	subq	0xb8(%rsp), %rax
    00000522: 	cmpq	$0x8, %rax
    00000526: 	jbe	.Ltmp251 # Offset: 1318
    0000052c: 	movl	$0x9, %edx
    00000531: 	leaq	DATAat0x14202(%rip), %rsi
    00000538: 	movq	%rbp, %rdi
    0000053b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1339
    00000540: 	movl	iterations(%rip), %edx
    00000546: 	xorl	%r8d, %r8d
    00000549: 	xorl	%ecx, %ecx
    0000054b: 	movl	$0xfa0, %esi
    00000550: 	movq	0xb0(%rsp), %rdi
    00000558: 	callq	_Z9summarizePKciiii # Offset: 1368
    0000055d: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm3
    00000565: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000056c: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm4
    00000574: 	movq	"_ZL7gLabels/1"+56(%rip), %r15
    0000057b: 	movhlps	%xmm3, %xmm5
    0000057e: 	movq	%rax, 0x20(%rsp)
    00000583: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000058a: 	movq	%xmm5, %rcx
    0000058f: 	movaps	%xmm4, 0x30(%rsp)
    00000594: 	movq	%xmm4, %r12
    00000599: 	leaq	0x8(%rcx), %r13
    0000059d: 	movq	%rax, (%rsp)
    000005a1: 	movaps	%xmm3, 0x50(%rsp)
    000005a6: 	movq	%r13, %r14
    000005a9: 	movq	%xmm5, 0x48(%rsp)
    000005af: 	movq	%xmm3, 0x28(%rsp)
    000005b5: 	cmpq	%r13, %rax
    000005b8: 	jbe	.Ltmp252 # Offset: 1464
    000005ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp255:
    000005c0: 	movq	(%r14), %rbp
    000005c3: 	leaq	0x200(%rbp), %rbx
    000005ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp254:
    000005d0: 	movq	(%rbp), %rdi
    000005d4: 	leaq	0x10(%rbp), %rdx
    000005d8: 	cmpq	%rdx, %rdi
    000005db: 	je	.Ltmp253 # Offset: 1499
    000005e1: 	movq	0x10(%rbp), %rax
    000005e5: 	addq	$0x20, %rbp
    000005e9: 	leaq	0x1(%rax), %rsi
    000005ed: 	callq	_ZdlPvm@PLT # Offset: 1517
    000005f2: 	cmpq	%rbx, %rbp
    000005f5: 	jne	.Ltmp254 # Offset: 1525
    000005f7: 	addq	$0x8, %r14
    000005fb: 	cmpq	%r14, (%rsp)
    000005ff: 	ja	.Ltmp255 # Offset: 1535
.Ltmp252:
    00000601: 	movq	0x48(%rsp), %rcx
    00000606: 	cmpq	%rcx, (%rsp)
    0000060a: 	jne	.Ltmp256 # Offset: 1546
    0000060c: 	jmp	.Ltmp257 # Offset: 1548
    00000611: 	nopl	(%rax) # Size: 7
.Ltmp259:
    00000618: 	movq	0x10(%r12), %rax
    0000061d: 	addq	$0x20, %r12
    00000621: 	leaq	0x1(%rax), %rsi
    00000625: 	callq	_ZdlPvm@PLT # Offset: 1573
.Ltmp256:
    0000062a: 	cmpq	%r12, 0x28(%rsp)
    0000062f: 	je	.Ltmp258 # Offset: 1583
.Ltmp260:
    00000631: 	movq	(%r12), %rdi
    00000635: 	leaq	0x10(%r12), %rax
    0000063a: 	cmpq	%rax, %rdi
    0000063d: 	jne	.Ltmp259 # Offset: 1597
    0000063f: 	addq	$0x20, %r12
    00000643: 	cmpq	0x28(%rsp), %r12
    00000648: 	jne	.Ltmp260 # Offset: 1608
    0000064a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp258:
    00000650: 	cmpq	%r15, 0x20(%rsp)
    00000655: 	je	.Ltmp261 # Offset: 1621
.Ltmp263:
    00000657: 	movq	(%r15), %rdi
    0000065a: 	leaq	0x10(%r15), %rax
    0000065e: 	cmpq	%rax, %rdi
    00000661: 	je	.Ltmp262 # Offset: 1633
    00000667: 	movq	0x10(%r15), %rax
    0000066b: 	addq	$0x20, %r15
    0000066f: 	leaq	0x1(%rax), %rsi
    00000673: 	callq	_ZdlPvm@PLT # Offset: 1651
    00000678: 	cmpq	0x20(%rsp), %r15
    0000067d: 	jne	.Ltmp263 # Offset: 1661
.Ltmp261:
    0000067f: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    00000686: 	leaq	0x8(%rax), %rbx
    0000068a: 	cmpq	%r13, %rbx
    0000068d: 	jbe	.Ltmp264 # Offset: 1677
    0000068f: 	nop # Size: 1
.Ltmp265:
    00000690: 	movq	(%r13), %rdi
    00000694: 	movl	$0x200, %esi
    00000699: 	addq	$0x8, %r13
    0000069d: 	callq	_ZdlPvm@PLT # Offset: 1693
    000006a2: 	cmpq	%r13, %rbx
    000006a5: 	ja	.Ltmp265 # Offset: 1701
.Ltmp264:
    000006a7: 	movdqa	0x30(%rsp), %xmm5
    000006ad: 	movdqa	0x50(%rsp), %xmm6
    000006b3: 	movq	0xb0(%rsp), %rdi
    000006bb: 	movaps	%xmm5, "_ZL7gLabels/1"+48(%rip)
    000006c2: 	movaps	%xmm6, "_ZL7gLabels/1"+64(%rip)
    000006c9: 	cmpq	0x18(%rsp), %rdi
    000006ce: 	je	.Ltmp266 # Offset: 1742
    000006d0: 	movq	0xc0(%rsp), %rax
    000006d8: 	leaq	0x1(%rax), %rsi
    000006dc: 	callq	_ZdlPvm@PLT # Offset: 1756
.Ltmp266:
    000006e1: 	movq	0x70(%rsp), %rdi
    000006e6: 	cmpq	0x40(%rsp), %rdi
    000006eb: 	je	.Ltmp267 # Offset: 1771
    000006ed: 	movq	0x80(%rsp), %rax
    000006f5: 	leaq	0x1(%rax), %rsi
    000006f9: 	callq	_ZdlPvm@PLT # Offset: 1785
.Ltmp267:
    000006fe: 	movq	0xfad8(%rsp), %rax
    00000706: 	subq	%fs:0x28, %rax
    0000070f: 	jne	.Ltmp268 # Offset: 1807
    00000715: 	addq	$0xfae8, %rsp
    0000071c: 	popq	%rbx
    0000071d: 	popq	%rbp
    0000071e: 	popq	%r12
    00000720: 	popq	%r13
    00000722: 	popq	%r14
    00000724: 	popq	%r15
    00000726: 	retq # Offset: 1830
    00000727: 	nopw	(%rax,%rax) # Size: 9
.Ltmp269:
    00000730: 	addq	$0x20, %r12
.Ltmp257:
    00000734: 	cmpq	%r12, 0x20(%rsp)
    00000739: 	je	.Ltmp261 # Offset: 1849
.Ltmp270:
    0000073f: 	movq	(%r12), %rdi
    00000743: 	leaq	0x10(%r12), %rax
    00000748: 	cmpq	%rax, %rdi
    0000074b: 	je	.Ltmp269 # Offset: 1867
    0000074d: 	movq	0x10(%r12), %rax
    00000752: 	addq	$0x20, %r12
    00000756: 	leaq	0x1(%rax), %rsi
    0000075a: 	callq	_ZdlPvm@PLT # Offset: 1882
    0000075f: 	cmpq	0x20(%rsp), %r12
    00000764: 	jne	.Ltmp270 # Offset: 1892
    00000766: 	jmp	.Ltmp261 # Offset: 1894
    0000076b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp253:
    00000770: 	addq	$0x20, %rbp
    00000774: 	cmpq	%rbx, %rbp
    00000777: 	jne	.Ltmp254 # Offset: 1911
    0000077d: 	addq	$0x8, %r14
    00000781: 	cmpq	%r14, (%rsp)
    00000785: 	ja	.Ltmp255 # Offset: 1925
    0000078b: 	jmp	.Ltmp252 # Offset: 1931
.Ltmp246:
    00000790: 	addl	$0x1, %r14d
    00000794: 	cmpl	iterations(%rip), %r14d
    0000079b: 	jl	.Ltmp247 # Offset: 1947
    000007a1: 	jmp	.Ltmp237 # Offset: 1953
    000007a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp242:
    000007b0: 	testq	%r12, %r12
    000007b3: 	jne	.Ltmp271 # Offset: 1971
    000007b9: 	movq	0x18(%rsp), %rax
    000007be: 	jmp	.Ltmp272 # Offset: 1982
    000007c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp231:
    000007c8: 	movq	0xb0(%rsp), %rdx
    000007d0: 	movq	%r13, %rsi
    000007d3: 	movl	$0x1, %edi
    000007d8: 	xorl	%eax, %eax
    000007da: 	callq	__printf_chk@PLT # Offset: 2010
    000007df: 	movl	iterations(%rip), %edx
    000007e5: 	jmp	.Ltmp273 # Offset: 2021
    000007ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp245:
    000007f0: 	movq	%rdi, %rdx
    000007f3: 	leaq	DATAat0x141e1(%rip), %rsi
    000007fa: 	movl	$0x1, %edi
    000007ff: 	xorl	%eax, %eax
    00000801: 	callq	__printf_chk@PLT # Offset: 2049
    00000806: 	movq	0xb0(%rsp), %rdi
    0000080e: 	jmp	.Ltmp274 # Offset: 2062
    00000813: 	nopl	(%rax,%rax) # Size: 5
.Ltmp241:
    00000818: 	leaq	0x68(%rsp), %rsi
    0000081d: 	xorl	%edx, %edx
    0000081f: 	movq	%rbp, %rdi
    00000822: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2082
    00000827: 	movq	%rax, 0xb0(%rsp)
    0000082f: 	movq	%rax, %rdi
    00000832: 	movq	0x68(%rsp), %rax
    00000837: 	movq	%rax, 0xc0(%rsp)
.Ltmp278:
    0000083f: 	movq	%r12, %rdx
    00000842: 	movq	%r13, %rsi
    00000845: 	callq	memcpy@PLT # Offset: 2117
    0000084a: 	movq	0x68(%rsp), %r12
    0000084f: 	movq	0xb0(%rsp), %rax
    00000857: 	jmp	.Ltmp272 # Offset: 2135
    0000085c: 	nopl	(%rax) # Size: 4
.Ltmp262:
    00000860: 	addq	$0x20, %r15
    00000864: 	jmp	.Ltmp258 # Offset: 2148
.Ltmp233:
    00000869: 	movq	%rbp, %rsi
    0000086c: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00000873: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 2163
    00000878: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000087f: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000886: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000088d: 	jne	.Ltmp275 # Offset: 2189
.Ltmp234:
    00000893: 	movq	-0x8(%rdx), %rax
    00000897: 	addq	$0x200, %rax
    0000089d: 	jmp	.Ltmp275 # Offset: 2205
.Ltmp249:
    000008a2: 	movq	-0x8(%rdx), %rax
    000008a6: 	addq	$0x200, %rax
    000008ac: 	jmp	.Ltmp276 # Offset: 2220
.Ltmp248:
    000008b1: 	movq	0x20(%rsp), %rsi
    000008b6: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000008bd: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 2237
    000008c2: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000008c9: 	jmp	.Ltmp277 # Offset: 2249
.Ltmp240:
    000008ce: 	leaq	DATAat0x14008(%rip), %rdi
    000008d5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 2261
.Ltmp236:
    000008da: 	leaq	DATAat0x14184(%rip), %rdi
    000008e1: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 2273
.Ltmp225:
    000008e6: 	leaq	DATAat0x14184(%rip), %rdi
    000008ed: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 2285
.Ltmp271:
    000008f2: 	movq	0x18(%rsp), %rdi
    000008f7: 	jmp	.Ltmp278 # Offset: 2295
.Ltmp268:
    000008fc: 	callq	__stack_chk_fail@PLT # Offset: 2300
.Ltmp251:
    00000901: 	leaq	DATAat0x14184(%rip), %rdi
    00000908: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 2312
    0000090d: 	endbr64
    00000911: 	movq	%rax, %rbx
    00000914: 	jmp	.Ltmp279 # Offset: 2324
    00000916: 	endbr64
.Ltmp283:
    0000091a: 	movq	%rax, %rbx
    0000091d: 	jmp	.Ltmp280 # Offset: 2333
.Ltmp285:
    00000922: 	movq	0xb0(%rsp), %rdi
    0000092a: 	cmpq	0x18(%rsp), %rdi
    0000092f: 	je	.Ltmp281 # Offset: 2351
    00000931: 	movq	0xc0(%rsp), %rax
    00000939: 	leaq	0x1(%rax), %rsi
    0000093d: 	callq	_ZdlPvm@PLT # Offset: 2365
.Ltmp281:
    00000942: 	movq	0x90(%rsp), %rdi
    0000094a: 	cmpq	0x30(%rsp), %rdi
    0000094f: 	je	.Ltmp279 # Offset: 2383
    00000951: 	movq	0xa0(%rsp), %rax
    00000959: 	leaq	0x1(%rax), %rsi
    0000095d: 	callq	_ZdlPvm@PLT # Offset: 2397
.Ltmp279:
    00000962: 	movq	0x70(%rsp), %rdi
    00000967: 	cmpq	0x40(%rsp), %rdi
    0000096c: 	je	.Ltmp282 # Offset: 2412
    0000096e: 	movq	0x80(%rsp), %rax
    00000976: 	leaq	0x1(%rax), %rsi
    0000097a: 	callq	_ZdlPvm@PLT # Offset: 2426
.Ltmp282:
    0000097f: 	movq	%rbx, %rdi
    00000982: 	callq	_Unwind_Resume@PLT # Offset: 2434
    00000987: 	endbr64
    0000098b: 	jmp	.Ltmp283 # Offset: 2443
    0000098d: 	endbr64
    00000991: 	jmp	.Ltmp283 # Offset: 2449
    00000993: 	endbr64
    00000997: 	jmp	.Ltmp283 # Offset: 2455
    00000999: 	endbr64
.Ltmp284:
    0000099d: 	movq	%rax, %rbx
    000009a0: 	jmp	.Ltmp281 # Offset: 2464
    000009a2: 	endbr64
    000009a6: 	jmp	.Ltmp284 # Offset: 2470
.Ltmp280:
    000009a8: 	movq	0xb0(%rsp), %rdi
    000009b0: 	cmpq	0x18(%rsp), %rdi
    000009b5: 	je	.Ltmp279 # Offset: 2485
    000009b7: 	movq	0xc0(%rsp), %rax
    000009bf: 	leaq	0x1(%rax), %rsi
    000009c3: 	callq	_ZdlPvm@PLT # Offset: 2499
    000009c8: 	jmp	.Ltmp279 # Offset: 2504
    000009ca: 	endbr64
    000009ce: 	movq	%rax, %rbx
    000009d1: 	jmp	.Ltmp285 # Offset: 2513
DWARF CFI Instructions:
    <empty>
End of Function "_Z16TestOneTypeFloatIeEvd"

Binary Function "_Z11TestOneTypeItEvd" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x48e0
  Size        : 0x29ad
  MaxSize     : 0x29b0
  Offset      : 0x48e0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeItEvd
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x1000, %rsp
    00000015: 	orq	$0x0, (%rsp)
    0000001a: 	subq	$0x1000, %rsp
    00000021: 	orq	$0x0, (%rsp)
    00000026: 	subq	$0x48, %rsp
    0000002a: 	movq	%fs:0x28, %rax
    00000033: 	movq	%rax, 0x2038(%rsp)
    0000003b: 	xorl	%eax, %eax
    0000003d: 	leaq	0xa0(%rsp), %rax
    00000045: 	movq	$0x8, 0x98(%rsp)
    00000051: 	leaq	0x2030(%rsp), %rbx
    00000059: 	movq	%rax, 0x78(%rsp)
    0000005e: 	movq	%rax, 0x90(%rsp)
    00000066: 	movabsq	$0x745f3631746e6975, %rax
    00000070: 	movq	%rax, 0xa0(%rsp)
    00000078: 	cvttsd2si	init_value(%rip), %eax
    00000080: 	movb	$0x0, 0xa8(%rsp)
    00000088: 	movd	%eax, %xmm1
    0000008c: 	leaq	0xf0(%rsp), %rax
    00000094: 	movq	%rax, 0x18(%rsp)
    00000099: 	punpcklwd	%xmm1, %xmm1
    0000009d: 	pshufd	$0x0, %xmm1, %xmm1
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp286:
    000000a8: 	movaps	%xmm1, (%rax)
    000000ab: 	addq	$0x10, %rax
    000000af: 	cmpq	%rbx, %rax
    000000b2: 	jne	.Ltmp286 # Offset: 178
    000000b4: 	cvttsd2si	%xmm0, %r14d
    000000b9: 	leaq	0x90(%rsp), %rax
    000000c1: 	leaq	0xd0(%rsp), %rdi
    000000c9: 	leaq	DATAat0x141d0(%rip), %rdx
    000000d0: 	movq	%rax, %rsi
    000000d3: 	movq	%rax, 0x58(%rsp)
    000000d8: 	movq	%rdi, 0x30(%rsp)
    000000dd: 	movl	%r14d, 0x74(%rsp)
    000000e2: 	movl	%r14d, %ebp
    000000e5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 229
    000000ea: 	movzwl	%r14w, %eax
    000000ee: 	xorl	%r12d, %r12d
    000000f1: 	leaq	DATAat0x141e1(%rip), %r13
    000000f8: 	movl	%eax, 0x40(%rsp)
    000000fc: 	callq	clock@PLT # Offset: 252
    00000101: 	movl	iterations(%rip), %edi
    00000107: 	movq	%rax, start_time(%rip)
    0000010e: 	testl	%edi, %edi
    00000110: 	jle	.Ltmp287 # Offset: 272
    00000112: 	nopw	(%rax,%rax) # Size: 6
.Ltmp290:
    00000118: 	movq	0x18(%rsp), %rcx
    0000011d: 	xorl	%esi, %esi
    0000011f: 	nop # Size: 1
.Ltmp288:
    00000120: 	movzwl	(%rcx), %eax
    00000123: 	xorl	%edx, %edx
    00000125: 	addq	$0x2, %rcx
    00000129: 	divw	%bp
    0000012c: 	addl	%eax, %esi
    0000012e: 	cmpq	%rcx, %rbx
    00000131: 	jne	.Ltmp288 # Offset: 305
    00000133: 	cvttsd2si	init_value(%rip), %eax
    0000013b: 	xorl	%edx, %edx
    0000013d: 	divw	%bp
    00000140: 	imulw	$0xfa0, %ax, %ax
    00000145: 	cmpw	%ax, %si
    00000148: 	je	.Ltmp289 # Offset: 328
    0000014a: 	movq	0xd0(%rsp), %rdx
    00000152: 	movq	%r13, %rsi
    00000155: 	movl	$0x1, %edi
    0000015a: 	xorl	%eax, %eax
    0000015c: 	callq	__printf_chk@PLT # Offset: 348
    00000161: 	movl	iterations(%rip), %edi
.Ltmp289:
    00000167: 	addl	$0x1, %r12d
    0000016b: 	cmpl	%edi, %r12d
    0000016e: 	jl	.Ltmp290 # Offset: 366
.Ltmp287:
    00000170: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000177: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    0000017e: 	subq	$0x20, %rax
    00000182: 	cmpq	%rax, %r13
    00000185: 	je	.Ltmp291 # Offset: 389
    0000018b: 	leaq	0x10(%r13), %rdi
    0000018f: 	movq	0xd8(%rsp), %r12
    00000197: 	movq	%rdi, (%r13)
    0000019b: 	movq	0xd0(%rsp), %r14
    000001a3: 	movq	%r14, %rax
    000001a6: 	addq	%r12, %rax
    000001a9: 	je	.Ltmp292 # Offset: 425
    000001ab: 	testq	%r14, %r14
    000001ae: 	je	.Ltmp293 # Offset: 430
.Ltmp292:
    000001b4: 	movq	%r12, 0x88(%rsp)
    000001bc: 	cmpq	$0xf, %r12
    000001c0: 	ja	.Ltmp294 # Offset: 448
    000001c6: 	cmpq	$0x1, %r12
    000001ca: 	jne	.Ltmp295 # Offset: 458
    000001d0: 	movzbl	(%r14), %eax
    000001d4: 	movb	%al, 0x10(%r13)
.Ltmp456:
    000001d8: 	movq	%r12, 0x8(%r13)
    000001dc: 	movb	$0x0, (%rdi,%r12)
    000001e1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001e8: 	addq	$0x20, %rax
    000001ec: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp485:
    000001f3: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001fa: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000201: 	je	.Ltmp296 # Offset: 513
.Ltmp484:
    00000207: 	movq	-0x20(%rax), %r12
    0000020b: 	callq	clock@PLT # Offset: 523
    00000210: 	pxor	%xmm0, %xmm0
    00000214: 	movq	%rax, end_time(%rip)
    0000021b: 	movq	%r12, %rdi
    0000021e: 	subq	start_time(%rip), %rax
    00000225: 	cvtsi2sd	%rax, %xmm0
    0000022a: 	divsd	DATAat0x14308(%rip), %xmm0
    00000232: 	callq	_Z13record_resultdPKc # Offset: 562
    00000237: 	movq	0xd0(%rsp), %rdi
    0000023f: 	leaq	0xe0(%rsp), %r15
    00000247: 	cmpq	%r15, %rdi
    0000024a: 	je	.Ltmp297 # Offset: 586
    0000024c: 	movq	0xe0(%rsp), %rax
    00000254: 	leaq	0x1(%rax), %rsi
    00000258: 	callq	_ZdlPvm@PLT # Offset: 600
.Ltmp297:
    0000025d: 	movq	0x90(%rsp), %r13
    00000265: 	movq	0x98(%rsp), %r12
    0000026d: 	movq	%r15, 0xd0(%rsp)
    00000275: 	movq	%r13, %rax
    00000278: 	addq	%r12, %rax
    0000027b: 	je	.Ltmp298 # Offset: 635
    0000027d: 	testq	%r13, %r13
    00000280: 	je	.Ltmp299 # Offset: 640
.Ltmp298:
    00000286: 	movq	%r12, 0x88(%rsp)
    0000028e: 	cmpq	$0xf, %r12
    00000292: 	ja	.Ltmp300 # Offset: 658
    00000298: 	cmpq	$0x1, %r12
    0000029c: 	jne	.Ltmp301 # Offset: 668
    000002a2: 	movzbl	(%r13), %eax
    000002a7: 	movb	%al, 0xe0(%rsp)
    000002ae: 	movq	%r15, %rax
.Ltmp473:
    000002b1: 	movq	%r12, 0xd8(%rsp)
    000002b9: 	movb	$0x0, (%rax,%r12)
    000002be: 	movabsq	$0x3fffffffffffffff, %rax
    000002c8: 	subq	0xd8(%rsp), %rax
    000002d0: 	cmpq	$0x1a, %rax
    000002d4: 	jbe	.Ltmp302 # Offset: 724
    000002da: 	movq	0x30(%rsp), %rdi
    000002df: 	movl	$0x1b, %edx
    000002e4: 	leaq	DATAat0x1420c(%rip), %rsi
    000002eb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 747
    000002f0: 	callq	clock@PLT # Offset: 752
    000002f5: 	movl	0x40(%rsp), %ecx
    000002f9: 	movq	%rax, start_time(%rip)
    00000300: 	subl	$0x1, %ecx
    00000303: 	movl	%ecx, 0x50(%rsp)
    00000307: 	je	.Ltmp303 # Offset: 775
    0000030d: 	js	.Ltmp304 # Offset: 781
    00000313: 	movl	$0x80000000, %eax
    00000318: 	xorl	%edx, %edx
    0000031a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp305:
    00000320: 	shrl	%eax
    00000322: 	addl	$0x1, %edx
    00000325: 	testl	%eax, %ecx
    00000327: 	je	.Ltmp305 # Offset: 807
    00000329: 	movl	$0x20, %esi
    0000032e: 	movl	$0x1, %eax
    00000333: 	subl	%edx, %esi
    00000335: 	movl	%esi, %ecx
    00000337: 	shll	%cl, %eax
.Ltmp506:
    00000339: 	cmpl	%eax, 0x40(%rsp)
    0000033d: 	je	.Ltmp306 # Offset: 829
    00000343: 	testl	%esi, %esi
    00000345: 	movl	$0x1, %edi
    0000034a: 	movl	$0x0, %eax
    0000034f: 	movl	$0x40, %ecx
    00000354: 	cmovlel	%esi, %edi
    00000357: 	movl	$0x1f, %esi
    0000035c: 	subl	%edx, %esi
    0000035e: 	cmovsl	%eax, %esi
    00000361: 	subl	%edx, %ecx
    00000363: 	movl	$0x1, %eax
    00000368: 	shlq	%cl, %rax
    0000036b: 	movzwl	0x74(%rsp), %ecx
    00000370: 	cqto
    00000372: 	idivq	%rcx
    00000375: 	addl	$0x1, %eax
.Ltmp503:
    00000378: 	movd	%eax, %xmm5
    0000037c: 	movl	iterations(%rip), %ecx
    00000382: 	movl	%edi, %eax
    00000384: 	xorl	%r12d, %r12d
    00000387: 	pshufd	$0x0, %xmm5, %xmm5
    0000038c: 	movq	%rax, (%rsp)
    00000390: 	movl	%esi, %r14d
    00000393: 	leaq	DATAat0x141e1(%rip), %r13
    0000039a: 	movaps	%xmm5, 0x20(%rsp)
    0000039f: 	testl	%ecx, %ecx
    000003a1: 	jle	.Ltmp307 # Offset: 929
    000003a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp310:
    000003b0: 	movdqa	0x20(%rsp), %xmm5
    000003b6: 	pxor	%xmm4, %xmm4
    000003ba: 	movq	0x18(%rsp), %rax
    000003bf: 	movq	%r14, %xmm10
    000003c4: 	movq	(%rsp), %xmm9
    000003ca: 	movdqa	%xmm5, %xmm7
    000003ce: 	movdqa	%xmm5, %xmm6
    000003d2: 	punpckldq	%xmm5, %xmm7
    000003d6: 	punpckhdq	%xmm5, %xmm6
    000003da: 	movdqa	%xmm4, %xmm5
    000003de: 	nop # Size: 2
.Ltmp308:
    000003e0: 	movdqa	(%rax), %xmm2
    000003e4: 	addq	$0x10, %rax
    000003e8: 	movdqa	%xmm2, %xmm1
    000003ec: 	punpckhwd	%xmm5, %xmm2
    000003f0: 	punpcklwd	%xmm5, %xmm1
    000003f4: 	movdqa	%xmm2, %xmm3
    000003f8: 	movdqa	%xmm1, %xmm8
    000003fd: 	movdqa	%xmm1, %xmm0
    00000401: 	punpckldq	%xmm2, %xmm3
    00000405: 	punpckldq	%xmm1, %xmm8
    0000040a: 	pmuludq	%xmm7, %xmm3
    0000040e: 	punpckhdq	%xmm1, %xmm0
    00000412: 	pmuludq	%xmm7, %xmm8
    00000417: 	pmuludq	%xmm6, %xmm0
    0000041b: 	psrlq	$0x20, %xmm3
    00000420: 	psrlq	$0x20, %xmm0
    00000425: 	psrlq	$0x20, %xmm8
    0000042b: 	shufps	$0x88, %xmm0, %xmm8
    00000430: 	movdqa	%xmm2, %xmm0
    00000434: 	punpckhdq	%xmm2, %xmm0
    00000438: 	pmuludq	%xmm6, %xmm0
    0000043c: 	psrlq	$0x20, %xmm0
    00000441: 	shufps	$0x88, %xmm0, %xmm3
    00000445: 	movdqa	%xmm1, %xmm0
    00000449: 	psubd	%xmm3, %xmm2
    0000044d: 	psubd	%xmm8, %xmm0
    00000452: 	psrld	%xmm9, %xmm2
    00000457: 	psrld	%xmm9, %xmm0
    0000045c: 	paddd	%xmm3, %xmm2
    00000460: 	paddd	%xmm8, %xmm0
    00000465: 	psrld	%xmm10, %xmm2
    0000046a: 	psrld	%xmm10, %xmm0
    0000046f: 	movdqa	%xmm0, %xmm1
    00000473: 	punpcklwd	%xmm2, %xmm0
    00000477: 	punpckhwd	%xmm2, %xmm1
    0000047b: 	movdqa	%xmm0, %xmm2
    0000047f: 	punpckhwd	%xmm1, %xmm2
    00000483: 	punpcklwd	%xmm1, %xmm0
    00000487: 	punpcklwd	%xmm2, %xmm0
    0000048b: 	paddw	%xmm0, %xmm4
    0000048f: 	cmpq	%rbx, %rax
    00000492: 	jne	.Ltmp308 # Offset: 1170
    00000498: 	cvttsd2si	init_value(%rip), %eax
    000004a0: 	movdqa	%xmm4, %xmm0
    000004a4: 	movq	%xmm10, %r14
    000004a9: 	xorl	%edx, %edx
    000004ab: 	psrldq	$0x8, %xmm0
    000004b0: 	paddw	%xmm0, %xmm4
    000004b4: 	movdqa	%xmm4, %xmm0
    000004b8: 	divw	%bp
    000004bb: 	psrldq	$0x4, %xmm0
    000004c0: 	paddw	%xmm0, %xmm4
    000004c4: 	movdqa	%xmm4, %xmm0
    000004c8: 	psrldq	$0x2, %xmm0
    000004cd: 	paddw	%xmm0, %xmm4
    000004d1: 	pextrw	$0x0, %xmm4, %edx
    000004d6: 	imulw	$0xfa0, %ax, %ax
    000004db: 	cmpw	%dx, %ax
    000004de: 	je	.Ltmp309 # Offset: 1246
    000004e0: 	movq	0xd0(%rsp), %rdx
    000004e8: 	movq	%r13, %rsi
    000004eb: 	movl	$0x1, %edi
    000004f0: 	xorl	%eax, %eax
    000004f2: 	callq	__printf_chk@PLT # Offset: 1266
    000004f7: 	movl	iterations(%rip), %ecx
.Ltmp309:
    000004fd: 	addl	$0x1, %r12d
    00000501: 	cmpl	%ecx, %r12d
    00000504: 	jl	.Ltmp310 # Offset: 1284
.Ltmp307:
    0000050a: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000511: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000518: 	subq	$0x20, %rax
    0000051c: 	cmpq	%rax, %rdi
    0000051f: 	je	.Ltmp311 # Offset: 1311
    00000525: 	leaq	0x10(%rdi), %rax
    00000529: 	movq	0xd8(%rsp), %rdx
    00000531: 	movq	%rax, (%rdi)
    00000534: 	movq	0xd0(%rsp), %rsi
    0000053c: 	addq	%rsi, %rdx
    0000053f: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1343
    00000544: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000054b: 	addq	$0x20, %rax
    0000054f: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp487:
    00000556: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000055d: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000564: 	je	.Ltmp312 # Offset: 1380
.Ltmp486:
    0000056a: 	movq	-0x20(%rax), %r12
    0000056e: 	callq	clock@PLT # Offset: 1390
    00000573: 	pxor	%xmm0, %xmm0
    00000577: 	movq	%rax, end_time(%rip)
    0000057e: 	movq	%r12, %rdi
    00000581: 	subq	start_time(%rip), %rax
    00000588: 	cvtsi2sd	%rax, %xmm0
    0000058d: 	divsd	DATAat0x14308(%rip), %xmm0
    00000595: 	callq	_Z13record_resultdPKc # Offset: 1429
    0000059a: 	movq	0xd0(%rsp), %rdi
    000005a2: 	cmpq	%r15, %rdi
    000005a5: 	je	.Ltmp313 # Offset: 1445
    000005a7: 	movq	0xe0(%rsp), %rax
    000005af: 	leaq	0x1(%rax), %rsi
    000005b3: 	callq	_ZdlPvm@PLT # Offset: 1459
.Ltmp313:
    000005b8: 	leaq	0xb0(%rsp), %rax
    000005c0: 	movq	0x58(%rsp), %rsi
    000005c5: 	leaq	DATAat0x141f1(%rip), %rdx
    000005cc: 	movq	%rax, %rdi
    000005cf: 	movq	%rax, 0x60(%rsp)
    000005d4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1492
    000005d9: 	callq	clock@PLT # Offset: 1497
    000005de: 	movl	iterations(%rip), %r8d
    000005e5: 	movq	%rax, start_time(%rip)
    000005ec: 	testl	%r8d, %r8d
    000005ef: 	jle	.Ltmp314 # Offset: 1519
    000005f5: 	movdqa	DATAat0x14390(%rip), %xmm5
    000005fd: 	xorl	%r14d, %r14d
    00000600: 	movaps	%xmm5, (%rsp)
    00000604: 	nopl	(%rax) # Size: 4
.Ltmp322:
    00000608: 	movq	0x18(%rsp), %rax
    0000060d: 	pxor	%xmm1, %xmm1
    00000611: 	nopl	(%rax) # Size: 7
.Ltmp315:
    00000618: 	movdqa	(%rsp), %xmm0
    0000061d: 	addq	$0x10, %rax
    00000621: 	pmulhuw	-0x10(%rax), %xmm0
    00000626: 	psrlw	$0x6, %xmm0
    0000062b: 	paddw	%xmm0, %xmm1
    0000062f: 	cmpq	%rbx, %rax
    00000632: 	jne	.Ltmp315 # Offset: 1586
    00000634: 	movdqa	%xmm1, %xmm0
    00000638: 	movq	0xb0(%rsp), %r13
    00000640: 	movq	0xb8(%rsp), %r12
    00000648: 	movq	%r15, 0xd0(%rsp)
    00000650: 	psrldq	$0x8, %xmm0
    00000655: 	paddw	%xmm0, %xmm1
    00000659: 	movdqa	%xmm1, %xmm0
    0000065d: 	psrldq	$0x4, %xmm0
    00000662: 	paddw	%xmm0, %xmm1
    00000666: 	movdqa	%xmm1, %xmm0
    0000066a: 	psrldq	$0x2, %xmm0
    0000066f: 	paddw	%xmm0, %xmm1
    00000673: 	pextrw	$0x0, %xmm1, %eax
    00000678: 	movl	%eax, 0x20(%rsp)
    0000067c: 	movq	%r13, %rax
    0000067f: 	addq	%r12, %rax
    00000682: 	je	.Ltmp316 # Offset: 1666
    00000684: 	testq	%r13, %r13
    00000687: 	je	.Ltmp317 # Offset: 1671
.Ltmp316:
    0000068d: 	movq	%r12, 0x88(%rsp)
    00000695: 	cmpq	$0xf, %r12
    00000699: 	ja	.Ltmp318 # Offset: 1689
    0000069f: 	cmpq	$0x1, %r12
    000006a3: 	jne	.Ltmp319 # Offset: 1699
    000006a9: 	movzbl	(%r13), %eax
    000006ae: 	movb	%al, 0xe0(%rsp)
    000006b5: 	movq	%r15, %rax
.Ltmp459:
    000006b8: 	movq	%r12, 0xd8(%rsp)
    000006c0: 	movb	$0x0, (%rax,%r12)
    000006c5: 	cvttsd2si	init_value(%rip), %eax
    000006cd: 	movzwl	%ax, %eax
    000006d0: 	imull	$0x2d83, %eax, %eax
    000006d6: 	shrl	$0x16, %eax
    000006d9: 	imulw	$0xfa0, %ax, %ax
    000006de: 	cmpw	0x20(%rsp), %ax
    000006e3: 	je	.Ltmp320 # Offset: 1763
    000006e5: 	movq	0xd0(%rsp), %rdx
    000006ed: 	leaq	DATAat0x141e1(%rip), %rsi
    000006f4: 	movl	$0x1, %edi
    000006f9: 	xorl	%eax, %eax
    000006fb: 	callq	__printf_chk@PLT # Offset: 1787
.Ltmp320:
    00000700: 	movq	0xd0(%rsp), %rdi
    00000708: 	cmpq	%r15, %rdi
    0000070b: 	je	.Ltmp321 # Offset: 1803
    00000711: 	movq	0xe0(%rsp), %rax
    00000719: 	addl	$0x1, %r14d
    0000071d: 	leaq	0x1(%rax), %rsi
    00000721: 	callq	_ZdlPvm@PLT # Offset: 1825
    00000726: 	cmpl	iterations(%rip), %r14d
    0000072d: 	jl	.Ltmp322 # Offset: 1837
.Ltmp314:
    00000733: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000073a: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000741: 	subq	$0x20, %rax
    00000745: 	cmpq	%rax, %rdi
    00000748: 	je	.Ltmp323 # Offset: 1864
    0000074e: 	leaq	0x10(%rdi), %rax
    00000752: 	movq	0xb8(%rsp), %rdx
    0000075a: 	movq	%rax, (%rdi)
    0000075d: 	movq	0xb0(%rsp), %rsi
    00000765: 	addq	%rsi, %rdx
    00000768: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1896
    0000076d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000774: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000077b: 	addq	$0x20, %rax
    0000077f: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000786: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000078d: 	je	.Ltmp324 # Offset: 1933
.Ltmp483:
    00000793: 	movq	-0x20(%rax), %r12
    00000797: 	callq	clock@PLT # Offset: 1943
    0000079c: 	pxor	%xmm0, %xmm0
    000007a0: 	movq	%rax, end_time(%rip)
    000007a7: 	movq	%r12, %rdi
    000007aa: 	subq	start_time(%rip), %rax
    000007b1: 	cvtsi2sd	%rax, %xmm0
    000007b6: 	divsd	DATAat0x14308(%rip), %xmm0
    000007be: 	callq	_Z13record_resultdPKc # Offset: 1982
    000007c3: 	movq	0xb0(%rsp), %rdi
    000007cb: 	leaq	0xc0(%rsp), %rax
    000007d3: 	movq	%rax, 0x68(%rsp)
    000007d8: 	cmpq	%rax, %rdi
    000007db: 	je	.Ltmp325 # Offset: 2011
    000007dd: 	movq	0xc0(%rsp), %rax
    000007e5: 	leaq	0x1(%rax), %rsi
    000007e9: 	callq	_ZdlPvm@PLT # Offset: 2025
.Ltmp325:
    000007ee: 	movq	0x58(%rsp), %rsi
    000007f3: 	movq	0x60(%rsp), %rdi
    000007f8: 	leaq	DATAat0x14228(%rip), %rdx
    000007ff: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2047
    00000804: 	callq	clock@PLT # Offset: 2052
    00000809: 	movl	iterations(%rip), %edi
    0000080f: 	movq	%rax, start_time(%rip)
    00000816: 	testl	%edi, %edi
    00000818: 	jle	.Ltmp326 # Offset: 2072
    0000081e: 	movdqa	DATAat0x143a0(%rip), %xmm5
    00000826: 	xorl	%r14d, %r14d
    00000829: 	movaps	%xmm5, (%rsp)
    0000082d: 	nopl	(%rax) # Size: 3
.Ltmp334:
    00000830: 	pxor	%xmm3, %xmm3
    00000834: 	movq	0x18(%rsp), %rax
    00000839: 	movdqa	%xmm3, %xmm4
    0000083d: 	nopl	(%rax) # Size: 3
.Ltmp327:
    00000840: 	movdqa	(%rax), %xmm1
    00000844: 	movdqa	(%rsp), %xmm6
    00000849: 	addq	$0x10, %rax
    0000084d: 	psrlw	$0x3, %xmm1
    00000852: 	movdqa	%xmm1, %xmm2
    00000856: 	punpckhwd	%xmm4, %xmm1
    0000085a: 	punpcklwd	%xmm4, %xmm2
    0000085e: 	movdqa	%xmm2, %xmm0
    00000862: 	punpckldq	%xmm2, %xmm0
    00000866: 	punpckhdq	%xmm2, %xmm2
    0000086a: 	pmuludq	%xmm6, %xmm0
    0000086e: 	pmuludq	%xmm6, %xmm2
    00000872: 	psrlq	$0x20, %xmm0
    00000877: 	psrlq	$0x20, %xmm2
    0000087c: 	shufps	$0x88, %xmm2, %xmm0
    00000880: 	movdqa	%xmm1, %xmm2
    00000884: 	punpckldq	%xmm1, %xmm2
    00000888: 	punpckhdq	%xmm1, %xmm1
    0000088c: 	pmuludq	%xmm6, %xmm2
    00000890: 	pmuludq	%xmm6, %xmm1
    00000894: 	psrlq	$0x20, %xmm2
    00000899: 	psrlq	$0x20, %xmm1
    0000089e: 	shufps	$0x88, %xmm1, %xmm2
    000008a2: 	movdqa	%xmm0, %xmm1
    000008a6: 	punpcklwd	%xmm2, %xmm0
    000008aa: 	punpckhwd	%xmm2, %xmm1
    000008ae: 	movdqa	%xmm0, %xmm2
    000008b2: 	punpckhwd	%xmm1, %xmm2
    000008b6: 	punpcklwd	%xmm1, %xmm0
    000008ba: 	punpcklwd	%xmm2, %xmm0
    000008be: 	psrlw	$0x2, %xmm0
    000008c3: 	paddw	%xmm0, %xmm3
    000008c7: 	cmpq	%rbx, %rax
    000008ca: 	jne	.Ltmp327 # Offset: 2250
    000008d0: 	movdqa	%xmm3, %xmm0
    000008d4: 	movq	0xb0(%rsp), %r13
    000008dc: 	movq	0xb8(%rsp), %r12
    000008e4: 	movq	%r15, 0xd0(%rsp)
    000008ec: 	psrldq	$0x8, %xmm0
    000008f1: 	paddw	%xmm0, %xmm3
    000008f5: 	movdqa	%xmm3, %xmm0
    000008f9: 	psrldq	$0x4, %xmm0
    000008fe: 	paddw	%xmm0, %xmm3
    00000902: 	movdqa	%xmm3, %xmm0
    00000906: 	psrldq	$0x2, %xmm0
    0000090b: 	paddw	%xmm0, %xmm3
    0000090f: 	pextrw	$0x0, %xmm3, %eax
    00000914: 	movl	%eax, 0x20(%rsp)
    00000918: 	movq	%r13, %rax
    0000091b: 	addq	%r12, %rax
    0000091e: 	je	.Ltmp328 # Offset: 2334
    00000920: 	testq	%r13, %r13
    00000923: 	je	.Ltmp329 # Offset: 2339
.Ltmp328:
    00000929: 	movq	%r12, 0x88(%rsp)
    00000931: 	cmpq	$0xf, %r12
    00000935: 	ja	.Ltmp330 # Offset: 2357
    0000093b: 	cmpq	$0x1, %r12
    0000093f: 	jne	.Ltmp331 # Offset: 2367
    00000945: 	movzbl	(%r13), %eax
    0000094a: 	movb	%al, 0xe0(%rsp)
    00000951: 	movq	%r15, %rax
.Ltmp461:
    00000954: 	movq	%r12, 0xd8(%rsp)
    0000095c: 	movb	$0x0, (%rax,%r12)
    00000961: 	cvttsd2si	init_value(%rip), %eax
    00000969: 	shlq	$0x30, %rax
    0000096d: 	shrq	$0x33, %rax
    00000971: 	imulq	$0x16c16c17, %rax, %rax
    00000978: 	shrq	$0x22, %rax
    0000097c: 	imulw	$0xfa0, %ax, %ax
    00000981: 	cmpw	0x20(%rsp), %ax
    00000986: 	je	.Ltmp332 # Offset: 2438
    00000988: 	movq	0xd0(%rsp), %rdx
    00000990: 	leaq	DATAat0x141e1(%rip), %rsi
    00000997: 	movl	$0x1, %edi
    0000099c: 	xorl	%eax, %eax
    0000099e: 	callq	__printf_chk@PLT # Offset: 2462
.Ltmp332:
    000009a3: 	movq	0xd0(%rsp), %rdi
    000009ab: 	cmpq	%r15, %rdi
    000009ae: 	je	.Ltmp333 # Offset: 2478
    000009b4: 	movq	0xe0(%rsp), %rax
    000009bc: 	addl	$0x1, %r14d
    000009c0: 	leaq	0x1(%rax), %rsi
    000009c4: 	callq	_ZdlPvm@PLT # Offset: 2500
    000009c9: 	cmpl	%r14d, iterations(%rip)
    000009d0: 	jg	.Ltmp334 # Offset: 2512
.Ltmp326:
    000009d6: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000009dd: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000009e4: 	subq	$0x20, %rax
    000009e8: 	cmpq	%rax, %rdi
    000009eb: 	je	.Ltmp335 # Offset: 2539
    000009f1: 	leaq	0x10(%rdi), %rax
    000009f5: 	movq	0xb8(%rsp), %rdx
    000009fd: 	movq	%rax, (%rdi)
    00000a00: 	movq	0xb0(%rsp), %rsi
    00000a08: 	addq	%rsi, %rdx
    00000a0b: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 2571
    00000a10: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000a17: 	addq	$0x20, %rax
    00000a1b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp482:
    00000a22: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000a29: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000a30: 	je	.Ltmp336 # Offset: 2608
.Ltmp481:
    00000a36: 	movq	-0x20(%rax), %r12
    00000a3a: 	callq	clock@PLT # Offset: 2618
    00000a3f: 	pxor	%xmm0, %xmm0
    00000a43: 	movq	%rax, end_time(%rip)
    00000a4a: 	movq	%r12, %rdi
    00000a4d: 	subq	start_time(%rip), %rax
    00000a54: 	cvtsi2sd	%rax, %xmm0
    00000a59: 	divsd	DATAat0x14308(%rip), %xmm0
    00000a61: 	callq	_Z13record_resultdPKc # Offset: 2657
    00000a66: 	movq	0xb0(%rsp), %rdi
    00000a6e: 	cmpq	0x68(%rsp), %rdi
    00000a73: 	je	.Ltmp337 # Offset: 2675
    00000a75: 	movq	0xc0(%rsp), %rax
    00000a7d: 	leaq	0x1(%rax), %rsi
    00000a81: 	callq	_ZdlPvm@PLT # Offset: 2689
.Ltmp337:
    00000a86: 	movq	0x58(%rsp), %rsi
    00000a8b: 	movq	0x30(%rsp), %rdi
    00000a90: 	leaq	DATAat0x14244(%rip), %rdx
    00000a97: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2711
    00000a9c: 	callq	clock@PLT # Offset: 2716
    00000aa1: 	movl	iterations(%rip), %edi
    00000aa7: 	xorl	%r12d, %r12d
    00000aaa: 	leaq	DATAat0x141e1(%rip), %r13
    00000ab1: 	movq	%rax, start_time(%rip)
    00000ab8: 	testl	%edi, %edi
    00000aba: 	jle	.Ltmp338 # Offset: 2746
    00000abc: 	nopl	(%rax) # Size: 4
.Ltmp341:
    00000ac0: 	movq	0x18(%rsp), %rcx
    00000ac5: 	xorl	%esi, %esi
    00000ac7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp339:
    00000ad0: 	movzwl	(%rcx), %eax
    00000ad3: 	xorl	%edx, %edx
    00000ad5: 	addq	$0x2, %rcx
    00000ad9: 	divw	%bp
    00000adc: 	addl	%edx, %esi
    00000ade: 	cmpq	%rcx, %rbx
    00000ae1: 	jne	.Ltmp339 # Offset: 2785
    00000ae3: 	cvttsd2si	init_value(%rip), %eax
    00000aeb: 	xorl	%edx, %edx
    00000aed: 	divw	%bp
    00000af0: 	imulw	$0xfa0, %dx, %dx
    00000af5: 	cmpw	%dx, %si
    00000af8: 	je	.Ltmp340 # Offset: 2808
    00000afa: 	movq	0xd0(%rsp), %rdx
    00000b02: 	movq	%r13, %rsi
    00000b05: 	movl	$0x1, %edi
    00000b0a: 	xorl	%eax, %eax
    00000b0c: 	callq	__printf_chk@PLT # Offset: 2828
    00000b11: 	movl	iterations(%rip), %edi
.Ltmp340:
    00000b17: 	addl	$0x1, %r12d
    00000b1b: 	cmpl	%edi, %r12d
    00000b1e: 	jl	.Ltmp341 # Offset: 2846
.Ltmp338:
    00000b20: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000b27: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000b2e: 	subq	$0x20, %rax
    00000b32: 	cmpq	%rax, %rdi
    00000b35: 	je	.Ltmp342 # Offset: 2869
    00000b3b: 	leaq	0x10(%rdi), %rax
    00000b3f: 	movq	0xd8(%rsp), %rdx
    00000b47: 	movq	%rax, (%rdi)
    00000b4a: 	movq	0xd0(%rsp), %rsi
    00000b52: 	addq	%rsi, %rdx
    00000b55: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 2901
    00000b5a: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000b61: 	addq	$0x20, %rax
    00000b65: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp480:
    00000b6c: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000b73: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000b7a: 	je	.Ltmp343 # Offset: 2938
.Ltmp479:
    00000b80: 	movq	-0x20(%rax), %r12
    00000b84: 	callq	clock@PLT # Offset: 2948
    00000b89: 	pxor	%xmm0, %xmm0
    00000b8d: 	movq	%rax, end_time(%rip)
    00000b94: 	movq	%r12, %rdi
    00000b97: 	subq	start_time(%rip), %rax
    00000b9e: 	cvtsi2sd	%rax, %xmm0
    00000ba3: 	divsd	DATAat0x14308(%rip), %xmm0
    00000bab: 	callq	_Z13record_resultdPKc # Offset: 2987
    00000bb0: 	movq	0xd0(%rsp), %rdi
    00000bb8: 	cmpq	%r15, %rdi
    00000bbb: 	je	.Ltmp344 # Offset: 3003
    00000bbd: 	movq	0xe0(%rsp), %rax
    00000bc5: 	leaq	0x1(%rax), %rsi
    00000bc9: 	callq	_ZdlPvm@PLT # Offset: 3017
.Ltmp344:
    00000bce: 	movq	0x58(%rsp), %rsi
    00000bd3: 	movq	0x30(%rsp), %rdi
    00000bd8: 	leaq	DATAat0x14255(%rip), %rdx
    00000bdf: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3039
    00000be4: 	callq	clock@PLT # Offset: 3044
    00000be9: 	movl	0x50(%rsp), %ecx
    00000bed: 	movq	%rax, start_time(%rip)
    00000bf4: 	testl	%ecx, %ecx
    00000bf6: 	je	.Ltmp345 # Offset: 3062
    00000bfc: 	js	.Ltmp346 # Offset: 3068
    00000c02: 	movl	$0x80000000, %eax
    00000c07: 	xorl	%edx, %edx
    00000c09: 	nopl	(%rax) # Size: 7
.Ltmp347:
    00000c10: 	shrl	%eax
    00000c12: 	addl	$0x1, %edx
    00000c15: 	testl	%eax, %ecx
    00000c17: 	je	.Ltmp347 # Offset: 3095
    00000c19: 	movl	$0x20, %esi
    00000c1e: 	movl	$0x1, %eax
    00000c23: 	subl	%edx, %esi
    00000c25: 	movl	%esi, %ecx
    00000c27: 	shll	%cl, %eax
.Ltmp505:
    00000c29: 	cmpl	%eax, 0x40(%rsp)
    00000c2d: 	je	.Ltmp348 # Offset: 3117
    00000c33: 	testl	%esi, %esi
    00000c35: 	movl	$0x1, %edi
    00000c3a: 	movl	$0x0, %eax
    00000c3f: 	movl	$0x40, %ecx
    00000c44: 	cmovlel	%esi, %edi
    00000c47: 	movl	$0x1f, %esi
    00000c4c: 	subl	%edx, %esi
    00000c4e: 	cmovsl	%eax, %esi
    00000c51: 	subl	%edx, %ecx
    00000c53: 	movl	$0x1, %eax
    00000c58: 	shlq	%cl, %rax
    00000c5b: 	movzwl	0x74(%rsp), %ecx
    00000c60: 	cqto
    00000c62: 	idivq	%rcx
    00000c65: 	addl	$0x1, %eax
    00000c68: 	movl	%eax, 0x50(%rsp)
    00000c6c: 	movd	%eax, %xmm5
.Ltmp504:
    00000c70: 	movl	iterations(%rip), %ecx
    00000c76: 	pshufd	$0x0, %xmm5, %xmm5
    00000c7b: 	movl	%edi, %eax
    00000c7d: 	xorl	%r12d, %r12d
    00000c80: 	movq	%rax, 0x50(%rsp)
    00000c85: 	movl	%esi, %r14d
    00000c88: 	movaps	%xmm5, 0x40(%rsp)
    00000c8d: 	testl	%ecx, %ecx
    00000c8f: 	jle	.Ltmp349 # Offset: 3215
    00000c95: 	movd	%ebp, %xmm0
    00000c99: 	leaq	DATAat0x141e1(%rip), %r13
    00000ca0: 	punpcklwd	%xmm0, %xmm0
    00000ca4: 	pshufd	$0x0, %xmm0, %xmm4
    00000ca9: 	movaps	%xmm4, (%rsp)
    00000cad: 	movdqa	%xmm5, %xmm4
    00000cb1: 	punpckldq	%xmm5, %xmm4
    00000cb5: 	movaps	%xmm4, 0x20(%rsp)
    00000cba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp352:
    00000cc0: 	movdqa	0x40(%rsp), %xmm5
    00000cc6: 	pxor	%xmm4, %xmm4
    00000cca: 	movq	0x18(%rsp), %rax
    00000ccf: 	movq	%r14, %xmm10
    00000cd4: 	movq	0x50(%rsp), %xmm9
    00000cdb: 	movdqa	%xmm5, %xmm6
    00000cdf: 	punpckhdq	%xmm5, %xmm6
    00000ce3: 	movdqa	%xmm4, %xmm5
    00000ce7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp350:
    00000cf0: 	movdqa	(%rax), %xmm3
    00000cf4: 	movdqa	0x20(%rsp), %xmm11
    00000cfb: 	addq	$0x10, %rax
    00000cff: 	movdqa	%xmm3, %xmm1
    00000d03: 	movdqa	%xmm3, %xmm2
    00000d07: 	punpcklwd	%xmm5, %xmm1
    00000d0b: 	punpckhwd	%xmm5, %xmm2
    00000d0f: 	movdqa	%xmm1, %xmm8
    00000d14: 	movdqa	%xmm1, %xmm0
    00000d18: 	movdqa	%xmm2, %xmm7
    00000d1c: 	punpckldq	%xmm1, %xmm8
    00000d21: 	punpckhdq	%xmm1, %xmm0
    00000d25: 	punpckldq	%xmm2, %xmm7
    00000d29: 	pmuludq	%xmm11, %xmm8
    00000d2e: 	pmuludq	%xmm6, %xmm0
    00000d32: 	pmuludq	%xmm11, %xmm7
    00000d37: 	psrlq	$0x20, %xmm0
    00000d3c: 	psrlq	$0x20, %xmm8
    00000d42: 	shufps	$0x88, %xmm0, %xmm8
    00000d47: 	movdqa	%xmm2, %xmm0
    00000d4b: 	psrlq	$0x20, %xmm7
    00000d50: 	punpckhdq	%xmm2, %xmm0
    00000d54: 	pmuludq	%xmm6, %xmm0
    00000d58: 	psrlq	$0x20, %xmm0
    00000d5d: 	shufps	$0x88, %xmm0, %xmm7
    00000d61: 	movdqa	%xmm1, %xmm0
    00000d65: 	psubd	%xmm7, %xmm2
    00000d69: 	psubd	%xmm8, %xmm0
    00000d6e: 	psrld	%xmm9, %xmm2
    00000d73: 	psrld	%xmm9, %xmm0
    00000d78: 	paddd	%xmm7, %xmm2
    00000d7c: 	paddd	%xmm8, %xmm0
    00000d81: 	psrld	%xmm10, %xmm2
    00000d86: 	psrld	%xmm10, %xmm0
    00000d8b: 	movdqa	%xmm0, %xmm1
    00000d8f: 	punpcklwd	%xmm2, %xmm0
    00000d93: 	punpckhwd	%xmm2, %xmm1
    00000d97: 	movdqa	%xmm0, %xmm2
    00000d9b: 	punpckhwd	%xmm1, %xmm2
    00000d9f: 	punpcklwd	%xmm1, %xmm0
    00000da3: 	punpcklwd	%xmm2, %xmm0
    00000da7: 	pmullw	(%rsp), %xmm0
    00000dac: 	psubw	%xmm0, %xmm3
    00000db0: 	paddw	%xmm3, %xmm4
    00000db4: 	cmpq	%rbx, %rax
    00000db7: 	jne	.Ltmp350 # Offset: 3511
    00000dbd: 	cvttsd2si	init_value(%rip), %eax
    00000dc5: 	movdqa	%xmm4, %xmm0
    00000dc9: 	movq	%xmm10, %r14
    00000dce: 	xorl	%edx, %edx
    00000dd0: 	psrldq	$0x8, %xmm0
    00000dd5: 	paddw	%xmm0, %xmm4
    00000dd9: 	movdqa	%xmm4, %xmm0
    00000ddd: 	divw	%bp
    00000de0: 	psrldq	$0x4, %xmm0
    00000de5: 	paddw	%xmm0, %xmm4
    00000de9: 	movdqa	%xmm4, %xmm0
    00000ded: 	psrldq	$0x2, %xmm0
    00000df2: 	paddw	%xmm0, %xmm4
    00000df6: 	pextrw	$0x0, %xmm4, %eax
    00000dfb: 	imulw	$0xfa0, %dx, %dx
    00000e00: 	cmpw	%ax, %dx
    00000e03: 	je	.Ltmp351 # Offset: 3587
    00000e05: 	movq	0xd0(%rsp), %rdx
    00000e0d: 	movq	%r13, %rsi
    00000e10: 	movl	$0x1, %edi
    00000e15: 	xorl	%eax, %eax
    00000e17: 	callq	__printf_chk@PLT # Offset: 3607
    00000e1c: 	movl	iterations(%rip), %ecx
.Ltmp351:
    00000e22: 	addl	$0x1, %r12d
    00000e26: 	cmpl	%ecx, %r12d
    00000e29: 	jl	.Ltmp352 # Offset: 3625
.Ltmp349:
    00000e2f: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000e36: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000e3d: 	subq	$0x20, %rax
    00000e41: 	cmpq	%rax, %rdi
    00000e44: 	je	.Ltmp353 # Offset: 3652
    00000e4a: 	leaq	0x10(%rdi), %rax
    00000e4e: 	movq	0xd8(%rsp), %rdx
    00000e56: 	movq	%rax, (%rdi)
    00000e59: 	movq	0xd0(%rsp), %rsi
    00000e61: 	addq	%rsi, %rdx
    00000e64: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 3684
    00000e69: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000e70: 	addq	$0x20, %rax
    00000e74: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp477:
    00000e7b: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000e82: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000e89: 	je	.Ltmp354 # Offset: 3721
.Ltmp476:
    00000e8f: 	movq	-0x20(%rax), %r12
    00000e93: 	callq	clock@PLT # Offset: 3731
    00000e98: 	pxor	%xmm0, %xmm0
    00000e9c: 	movq	%rax, end_time(%rip)
    00000ea3: 	movq	%r12, %rdi
    00000ea6: 	subq	start_time(%rip), %rax
    00000ead: 	cvtsi2sd	%rax, %xmm0
    00000eb2: 	divsd	DATAat0x14308(%rip), %xmm0
    00000eba: 	callq	_Z13record_resultdPKc # Offset: 3770
    00000ebf: 	movq	0xd0(%rsp), %rdi
    00000ec7: 	cmpq	%r15, %rdi
    00000eca: 	je	.Ltmp355 # Offset: 3786
    00000ecc: 	movq	0xe0(%rsp), %rax
    00000ed4: 	leaq	0x1(%rax), %rsi
    00000ed8: 	callq	_ZdlPvm@PLT # Offset: 3800
.Ltmp355:
    00000edd: 	movq	0x68(%rsp), %rax
    00000ee2: 	movq	0x90(%rsp), %r13
    00000eea: 	movq	0x98(%rsp), %r12
    00000ef2: 	movq	%rax, 0xb0(%rsp)
    00000efa: 	movq	%r13, %rax
    00000efd: 	addq	%r12, %rax
    00000f00: 	je	.Ltmp356 # Offset: 3840
    00000f02: 	testq	%r13, %r13
    00000f05: 	je	.Ltmp357 # Offset: 3845
.Ltmp356:
    00000f0b: 	movq	%r12, 0x88(%rsp)
    00000f13: 	cmpq	$0xf, %r12
    00000f17: 	ja	.Ltmp358 # Offset: 3863
    00000f1d: 	cmpq	$0x1, %r12
    00000f21: 	jne	.Ltmp359 # Offset: 3873
    00000f27: 	movzbl	(%r13), %eax
    00000f2c: 	movb	%al, 0xc0(%rsp)
    00000f33: 	movq	0x68(%rsp), %rax
.Ltmp475:
    00000f38: 	movq	%r12, 0xb8(%rsp)
    00000f40: 	movb	$0x0, (%rax,%r12)
    00000f45: 	movabsq	$0x3fffffffffffffff, %rax
    00000f4f: 	subq	0xb8(%rsp), %rax
    00000f57: 	cmpq	$0xf, %rax
    00000f5b: 	jbe	.Ltmp360 # Offset: 3931
    00000f61: 	movq	0x60(%rsp), %rdi
    00000f66: 	movl	$0x10, %edx
    00000f6b: 	leaq	DATAat0x14271(%rip), %rsi
    00000f72: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3954
    00000f77: 	callq	clock@PLT # Offset: 3959
    00000f7c: 	movl	iterations(%rip), %esi
    00000f82: 	movq	%rax, start_time(%rip)
    00000f89: 	testl	%esi, %esi
    00000f8b: 	jle	.Ltmp361 # Offset: 3979
    00000f91: 	movdqa	DATAat0x14390(%rip), %xmm5
    00000f99: 	xorl	%r14d, %r14d
    00000f9c: 	movaps	%xmm5, (%rsp)
.Ltmp369:
    00000fa0: 	movq	0x18(%rsp), %rax
    00000fa5: 	pxor	%xmm2, %xmm2
    00000fa9: 	nopl	(%rax) # Size: 7
.Ltmp362:
    00000fb0: 	movdqa	(%rsp), %xmm0
    00000fb5: 	pmulhuw	(%rax), %xmm0
    00000fb9: 	psrlw	$0x6, %xmm0
    00000fbe: 	addq	$0x10, %rax
    00000fc2: 	movdqa	%xmm0, %xmm1
    00000fc6: 	psllw	$0x1, %xmm1
    00000fcb: 	paddw	%xmm0, %xmm1
    00000fcf: 	movdqa	%xmm1, %xmm0
    00000fd3: 	psllw	$0x4, %xmm0
    00000fd8: 	psubw	%xmm1, %xmm0
    00000fdc: 	movdqa	-0x10(%rax), %xmm1
    00000fe1: 	psllw	$0x3, %xmm0
    00000fe6: 	psubw	%xmm0, %xmm1
    00000fea: 	paddw	%xmm1, %xmm2
    00000fee: 	cmpq	%rbx, %rax
    00000ff1: 	jne	.Ltmp362 # Offset: 4081
    00000ff3: 	movdqa	%xmm2, %xmm0
    00000ff7: 	movq	0xb0(%rsp), %r13
    00000fff: 	movq	0xb8(%rsp), %r12
    00001007: 	movq	%r15, 0xd0(%rsp)
    0000100f: 	psrldq	$0x8, %xmm0
    00001014: 	paddw	%xmm0, %xmm2
    00001018: 	movdqa	%xmm2, %xmm0
    0000101c: 	psrldq	$0x4, %xmm0
    00001021: 	paddw	%xmm0, %xmm2
    00001025: 	movdqa	%xmm2, %xmm0
    00001029: 	psrldq	$0x2, %xmm0
    0000102e: 	paddw	%xmm0, %xmm2
    00001032: 	pextrw	$0x0, %xmm2, %eax
    00001037: 	movl	%eax, 0x20(%rsp)
    0000103b: 	movq	%r13, %rax
    0000103e: 	addq	%r12, %rax
    00001041: 	je	.Ltmp363 # Offset: 4161
    00001043: 	testq	%r13, %r13
    00001046: 	je	.Ltmp364 # Offset: 4166
.Ltmp363:
    0000104c: 	movq	%r12, 0x88(%rsp)
    00001054: 	cmpq	$0xf, %r12
    00001058: 	ja	.Ltmp365 # Offset: 4184
    0000105e: 	cmpq	$0x1, %r12
    00001062: 	jne	.Ltmp366 # Offset: 4194
    00001068: 	movzbl	(%r13), %eax
    0000106d: 	movb	%al, 0xe0(%rsp)
    00001074: 	movq	%r15, %rax
.Ltmp463:
    00001077: 	movq	%r12, 0xd8(%rsp)
    0000107f: 	movb	$0x0, (%rax,%r12)
    00001084: 	cvttsd2si	init_value(%rip), %edx
    0000108c: 	movzwl	%dx, %eax
    0000108f: 	imull	$0x2d83, %eax, %eax
    00001095: 	shrl	$0x16, %eax
    00001098: 	imulw	$0x168, %ax, %ax
    0000109d: 	subl	%eax, %edx
    0000109f: 	imulw	$0xfa0, %dx, %dx
    000010a4: 	cmpw	0x20(%rsp), %dx
    000010a9: 	je	.Ltmp367 # Offset: 4265
    000010ab: 	movq	0xd0(%rsp), %rdx
    000010b3: 	leaq	DATAat0x141e1(%rip), %rsi
    000010ba: 	movl	$0x1, %edi
    000010bf: 	xorl	%eax, %eax
    000010c1: 	callq	__printf_chk@PLT # Offset: 4289
.Ltmp367:
    000010c6: 	movq	0xd0(%rsp), %rdi
    000010ce: 	cmpq	%r15, %rdi
    000010d1: 	je	.Ltmp368 # Offset: 4305
    000010d7: 	movq	0xe0(%rsp), %rax
    000010df: 	addl	$0x1, %r14d
    000010e3: 	leaq	0x1(%rax), %rsi
    000010e7: 	callq	_ZdlPvm@PLT # Offset: 4327
    000010ec: 	cmpl	iterations(%rip), %r14d
    000010f3: 	jl	.Ltmp369 # Offset: 4339
.Ltmp361:
    000010f9: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001100: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    00001107: 	subq	$0x20, %rax
    0000110b: 	cmpq	%rax, %r13
    0000110e: 	je	.Ltmp370 # Offset: 4366
    00001114: 	leaq	0x10(%r13), %rdi
    00001118: 	movq	0xb8(%rsp), %r12
    00001120: 	movq	%rdi, (%r13)
    00001124: 	movq	0xb0(%rsp), %r14
    0000112c: 	movq	%r14, %rax
    0000112f: 	addq	%r12, %rax
    00001132: 	je	.Ltmp371 # Offset: 4402
    00001134: 	testq	%r14, %r14
    00001137: 	je	.Ltmp372 # Offset: 4407
.Ltmp371:
    0000113d: 	movq	%r12, 0x88(%rsp)
    00001145: 	cmpq	$0xf, %r12
    00001149: 	ja	.Ltmp373 # Offset: 4425
    0000114f: 	cmpq	$0x1, %r12
    00001153: 	jne	.Ltmp374 # Offset: 4435
    00001159: 	movzbl	(%r14), %eax
    0000115d: 	movb	%al, 0x10(%r13)
.Ltmp497:
    00001161: 	movq	%r12, 0x8(%r13)
    00001165: 	movb	$0x0, (%rdi,%r12)
    0000116a: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001171: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001178: 	addq	$0x20, %rax
    0000117c: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001183: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000118a: 	je	.Ltmp375 # Offset: 4490
.Ltmp488:
    00001190: 	movq	-0x20(%rax), %r12
    00001194: 	callq	clock@PLT # Offset: 4500
    00001199: 	pxor	%xmm0, %xmm0
    0000119d: 	movq	%rax, end_time(%rip)
    000011a4: 	movq	%r12, %rdi
    000011a7: 	subq	start_time(%rip), %rax
    000011ae: 	cvtsi2sd	%rax, %xmm0
    000011b3: 	divsd	DATAat0x14308(%rip), %xmm0
    000011bb: 	callq	_Z13record_resultdPKc # Offset: 4539
    000011c0: 	movq	0xb0(%rsp), %rdi
    000011c8: 	cmpq	0x68(%rsp), %rdi
    000011cd: 	je	.Ltmp376 # Offset: 4557
    000011cf: 	movq	0xc0(%rsp), %rax
    000011d7: 	leaq	0x1(%rax), %rsi
    000011db: 	callq	_ZdlPvm@PLT # Offset: 4571
.Ltmp376:
    000011e0: 	movq	0x58(%rsp), %rsi
    000011e5: 	movq	0x60(%rsp), %rdi
    000011ea: 	leaq	DATAat0x14282(%rip), %rdx
    000011f1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4593
    000011f6: 	callq	clock@PLT # Offset: 4598
    000011fb: 	movl	iterations(%rip), %ecx
    00001201: 	movq	%rax, start_time(%rip)
    00001208: 	testl	%ecx, %ecx
    0000120a: 	jle	.Ltmp377 # Offset: 4618
    00001210: 	movdqa	DATAat0x143a0(%rip), %xmm5
    00001218: 	xorl	%r14d, %r14d
    0000121b: 	movaps	%xmm5, (%rsp)
    0000121f: 	nop # Size: 1
.Ltmp385:
    00001220: 	pxor	%xmm4, %xmm4
    00001224: 	movq	0x18(%rsp), %rax
    00001229: 	movdqa	%xmm4, %xmm5
    0000122d: 	nopl	(%rax) # Size: 3
.Ltmp378:
    00001230: 	movdqa	(%rax), %xmm3
    00001234: 	movdqa	(%rsp), %xmm7
    00001239: 	addq	$0x10, %rax
    0000123d: 	movdqa	%xmm3, %xmm2
    00001241: 	movdqa	%xmm3, %xmm1
    00001245: 	punpcklwd	%xmm5, %xmm2
    00001249: 	punpckhwd	%xmm5, %xmm1
    0000124d: 	psrld	$0x3, %xmm2
    00001252: 	psrld	$0x3, %xmm1
    00001257: 	movdqa	%xmm2, %xmm0
    0000125b: 	punpckldq	%xmm2, %xmm0
    0000125f: 	punpckhdq	%xmm2, %xmm2
    00001263: 	pmuludq	%xmm7, %xmm0
    00001267: 	pmuludq	%xmm7, %xmm2
    0000126b: 	psrlq	$0x20, %xmm0
    00001270: 	psrlq	$0x20, %xmm2
    00001275: 	shufps	$0x88, %xmm2, %xmm0
    00001279: 	movdqa	%xmm1, %xmm2
    0000127d: 	punpckldq	%xmm1, %xmm2
    00001281: 	punpckhdq	%xmm1, %xmm1
    00001285: 	pmuludq	%xmm7, %xmm2
    00001289: 	pmuludq	%xmm7, %xmm1
    0000128d: 	psrlq	$0x20, %xmm2
    00001292: 	psrlq	$0x20, %xmm1
    00001297: 	shufps	$0x88, %xmm1, %xmm2
    0000129b: 	movdqa	%xmm0, %xmm1
    0000129f: 	punpcklwd	%xmm2, %xmm0
    000012a3: 	punpckhwd	%xmm2, %xmm1
    000012a7: 	movdqa	%xmm0, %xmm2
    000012ab: 	punpckhwd	%xmm1, %xmm2
    000012af: 	punpcklwd	%xmm1, %xmm0
    000012b3: 	punpcklwd	%xmm2, %xmm0
    000012b7: 	psrlw	$0x2, %xmm0
    000012bc: 	movdqa	%xmm0, %xmm1
    000012c0: 	psllw	$0x1, %xmm1
    000012c5: 	paddw	%xmm0, %xmm1
    000012c9: 	movdqa	%xmm1, %xmm0
    000012cd: 	psllw	$0x4, %xmm0
    000012d2: 	psubw	%xmm1, %xmm0
    000012d6: 	psllw	$0x3, %xmm0
    000012db: 	psubw	%xmm0, %xmm3
    000012df: 	paddw	%xmm3, %xmm4
    000012e3: 	cmpq	%rbx, %rax
    000012e6: 	jne	.Ltmp378 # Offset: 4838
    000012ec: 	movdqa	%xmm4, %xmm0
    000012f0: 	movq	0xb0(%rsp), %r13
    000012f8: 	movq	0xb8(%rsp), %r12
    00001300: 	movq	%r15, 0xd0(%rsp)
    00001308: 	psrldq	$0x8, %xmm0
    0000130d: 	paddw	%xmm0, %xmm4
    00001311: 	movdqa	%xmm4, %xmm0
    00001315: 	psrldq	$0x4, %xmm0
    0000131a: 	paddw	%xmm0, %xmm4
    0000131e: 	movdqa	%xmm4, %xmm0
    00001322: 	psrldq	$0x2, %xmm0
    00001327: 	paddw	%xmm0, %xmm4
    0000132b: 	pextrw	$0x0, %xmm4, %eax
    00001330: 	movl	%eax, 0x20(%rsp)
    00001334: 	movq	%r13, %rax
    00001337: 	addq	%r12, %rax
    0000133a: 	je	.Ltmp379 # Offset: 4922
    0000133c: 	testq	%r13, %r13
    0000133f: 	je	.Ltmp380 # Offset: 4927
.Ltmp379:
    00001345: 	movq	%r12, 0x88(%rsp)
    0000134d: 	cmpq	$0xf, %r12
    00001351: 	ja	.Ltmp381 # Offset: 4945
    00001357: 	cmpq	$0x1, %r12
    0000135b: 	jne	.Ltmp382 # Offset: 4955
    00001361: 	movzbl	(%r13), %eax
    00001366: 	movb	%al, 0xe0(%rsp)
    0000136d: 	movq	%r15, %rax
.Ltmp465:
    00001370: 	movq	%r12, 0xd8(%rsp)
    00001378: 	movb	$0x0, (%rax,%r12)
    0000137d: 	cvttsd2si	init_value(%rip), %edx
    00001385: 	movzwl	%dx, %edx
    00001388: 	movl	%edx, %eax
    0000138a: 	shrl	$0x3, %eax
    0000138d: 	imulq	$0x16c16c17, %rax, %rax
    00001394: 	shrq	$0x22, %rax
    00001398: 	imull	$0x168, %eax, %eax
    0000139e: 	subl	%eax, %edx
    000013a0: 	imulw	$0xfa0, %dx, %dx
    000013a5: 	cmpw	0x20(%rsp), %dx
    000013aa: 	je	.Ltmp383 # Offset: 5034
    000013ac: 	movq	0xd0(%rsp), %rdx
    000013b4: 	leaq	DATAat0x141e1(%rip), %rsi
    000013bb: 	movl	$0x1, %edi
    000013c0: 	xorl	%eax, %eax
    000013c2: 	callq	__printf_chk@PLT # Offset: 5058
.Ltmp383:
    000013c7: 	movq	0xd0(%rsp), %rdi
    000013cf: 	cmpq	%r15, %rdi
    000013d2: 	je	.Ltmp384 # Offset: 5074
    000013d8: 	movq	0xe0(%rsp), %rax
    000013e0: 	addl	$0x1, %r14d
    000013e4: 	leaq	0x1(%rax), %rsi
    000013e8: 	callq	_ZdlPvm@PLT # Offset: 5096
    000013ed: 	cmpl	iterations(%rip), %r14d
    000013f4: 	jl	.Ltmp385 # Offset: 5108
.Ltmp377:
    000013fa: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001401: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    00001408: 	subq	$0x20, %rax
    0000140c: 	cmpq	%rax, %r13
    0000140f: 	je	.Ltmp386 # Offset: 5135
    00001415: 	leaq	0x10(%r13), %rdi
    00001419: 	movq	0xb8(%rsp), %r12
    00001421: 	movq	%rdi, (%r13)
    00001425: 	movq	0xb0(%rsp), %r14
    0000142d: 	movq	%r14, %rax
    00001430: 	addq	%r12, %rax
    00001433: 	je	.Ltmp387 # Offset: 5171
    00001435: 	testq	%r14, %r14
    00001438: 	je	.Ltmp388 # Offset: 5176
.Ltmp387:
    0000143e: 	movq	%r12, 0x88(%rsp)
    00001446: 	cmpq	$0xf, %r12
    0000144a: 	ja	.Ltmp389 # Offset: 5194
    00001450: 	cmpq	$0x1, %r12
    00001454: 	jne	.Ltmp390 # Offset: 5204
    0000145a: 	movzbl	(%r14), %eax
    0000145e: 	movb	%al, 0x10(%r13)
.Ltmp494:
    00001462: 	movq	%r12, 0x8(%r13)
    00001466: 	movb	$0x0, (%rdi,%r12)
    0000146b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001472: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001479: 	addq	$0x20, %rax
    0000147d: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001484: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000148b: 	je	.Ltmp391 # Offset: 5259
.Ltmp489:
    00001491: 	movq	-0x20(%rax), %r12
    00001495: 	callq	clock@PLT # Offset: 5269
    0000149a: 	pxor	%xmm0, %xmm0
    0000149e: 	movq	%rax, end_time(%rip)
    000014a5: 	movq	%r12, %rdi
    000014a8: 	subq	start_time(%rip), %rax
    000014af: 	cvtsi2sd	%rax, %xmm0
    000014b4: 	divsd	DATAat0x14308(%rip), %xmm0
    000014bc: 	callq	_Z13record_resultdPKc # Offset: 5308
    000014c1: 	movq	0xb0(%rsp), %rdi
    000014c9: 	cmpq	0x68(%rsp), %rdi
    000014ce: 	je	.Ltmp392 # Offset: 5326
    000014d0: 	movq	0xc0(%rsp), %rax
    000014d8: 	leaq	0x1(%rax), %rsi
    000014dc: 	callq	_ZdlPvm@PLT # Offset: 5340
.Ltmp392:
    000014e1: 	movq	0x58(%rsp), %rsi
    000014e6: 	movq	0x30(%rsp), %rdi
    000014eb: 	leaq	DATAat0x1429e(%rip), %rdx
    000014f2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5362
    000014f7: 	callq	clock@PLT # Offset: 5367
    000014fc: 	movl	iterations(%rip), %edi
    00001502: 	xorl	%r12d, %r12d
    00001505: 	leaq	DATAat0x141e1(%rip), %r13
    0000150c: 	movq	%rax, start_time(%rip)
    00001513: 	testl	%edi, %edi
    00001515: 	jle	.Ltmp393 # Offset: 5397
    00001517: 	nopw	(%rax,%rax) # Size: 9
.Ltmp396:
    00001520: 	movq	0x18(%rsp), %rcx
    00001525: 	xorl	%esi, %esi
    00001527: 	nopw	(%rax,%rax) # Size: 9
.Ltmp394:
    00001530: 	movzwl	(%rcx), %eax
    00001533: 	xorl	%edx, %edx
    00001535: 	addq	$0x2, %rcx
    00001539: 	divw	%bp
    0000153c: 	addl	%edx, %eax
    0000153e: 	addl	%eax, %esi
    00001540: 	cmpq	%rbx, %rcx
    00001543: 	jne	.Ltmp394 # Offset: 5443
    00001545: 	cvttsd2si	init_value(%rip), %eax
    0000154d: 	xorl	%edx, %edx
    0000154f: 	divw	%bp
    00001552: 	addl	%edx, %eax
    00001554: 	imulw	$0xfa0, %ax, %ax
    00001559: 	cmpw	%ax, %si
    0000155c: 	je	.Ltmp395 # Offset: 5468
    0000155e: 	movq	0xd0(%rsp), %rdx
    00001566: 	movq	%r13, %rsi
    00001569: 	movl	$0x1, %edi
    0000156e: 	xorl	%eax, %eax
    00001570: 	callq	__printf_chk@PLT # Offset: 5488
    00001575: 	movl	iterations(%rip), %edi
.Ltmp395:
    0000157b: 	addl	$0x1, %r12d
    0000157f: 	cmpl	%edi, %r12d
    00001582: 	jl	.Ltmp396 # Offset: 5506
.Ltmp393:
    00001584: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000158b: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00001592: 	subq	$0x20, %rax
    00001596: 	cmpq	%rax, %rdi
    00001599: 	je	.Ltmp397 # Offset: 5529
    0000159f: 	leaq	0x10(%rdi), %rax
    000015a3: 	movq	0xd8(%rsp), %rdx
    000015ab: 	movq	%rax, (%rdi)
    000015ae: 	movq	0xd0(%rsp), %rsi
    000015b6: 	addq	%rsi, %rdx
    000015b9: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 5561
    000015be: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000015c5: 	addq	$0x20, %rax
    000015c9: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp491:
    000015d0: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000015d7: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000015de: 	je	.Ltmp398 # Offset: 5598
.Ltmp490:
    000015e4: 	movq	-0x20(%rax), %rbp
    000015e8: 	callq	clock@PLT # Offset: 5608
    000015ed: 	pxor	%xmm0, %xmm0
    000015f1: 	movq	%rax, end_time(%rip)
    000015f8: 	movq	%rbp, %rdi
    000015fb: 	subq	start_time(%rip), %rax
    00001602: 	cvtsi2sd	%rax, %xmm0
    00001607: 	divsd	DATAat0x14308(%rip), %xmm0
    0000160f: 	callq	_Z13record_resultdPKc # Offset: 5647
    00001614: 	movq	0xd0(%rsp), %rdi
    0000161c: 	cmpq	%r15, %rdi
    0000161f: 	je	.Ltmp399 # Offset: 5663
    00001621: 	movq	0xe0(%rsp), %rax
    00001629: 	leaq	0x1(%rax), %rsi
    0000162d: 	callq	_ZdlPvm@PLT # Offset: 5677
.Ltmp399:
    00001632: 	movq	0x58(%rsp), %rsi
    00001637: 	movq	0x60(%rsp), %rdi
    0000163c: 	leaq	DATAat0x142d0(%rip), %rdx
    00001643: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5699
    00001648: 	callq	clock@PLT # Offset: 5704
    0000164d: 	movl	iterations(%rip), %edx
    00001653: 	movq	%rax, start_time(%rip)
    0000165a: 	testl	%edx, %edx
    0000165c: 	jle	.Ltmp400 # Offset: 5724
    00001662: 	movdqa	DATAat0x143a0(%rip), %xmm5
    0000166a: 	xorl	%r13d, %r13d
    0000166d: 	movaps	%xmm5, (%rsp)
    00001671: 	nopl	(%rax) # Size: 7
.Ltmp408:
    00001678: 	pxor	%xmm4, %xmm4
    0000167c: 	movq	0x18(%rsp), %rax
    00001681: 	movdqa	%xmm4, %xmm5
    00001685: 	nopl	(%rax) # Size: 3
.Ltmp401:
    00001688: 	movdqa	(%rax), %xmm3
    0000168c: 	movdqa	(%rsp), %xmm6
    00001691: 	addq	$0x10, %rax
    00001695: 	movdqa	%xmm3, %xmm2
    00001699: 	movdqa	%xmm3, %xmm1
    0000169d: 	punpcklwd	%xmm5, %xmm2
    000016a1: 	punpckhwd	%xmm5, %xmm1
    000016a5: 	psrld	$0x3, %xmm2
    000016aa: 	psrld	$0x3, %xmm1
    000016af: 	movdqa	%xmm2, %xmm0
    000016b3: 	punpckldq	%xmm2, %xmm0
    000016b7: 	punpckhdq	%xmm2, %xmm2
    000016bb: 	pmuludq	%xmm6, %xmm0
    000016bf: 	pmuludq	%xmm6, %xmm2
    000016c3: 	psrlq	$0x20, %xmm0
    000016c8: 	psrlq	$0x20, %xmm2
    000016cd: 	shufps	$0x88, %xmm2, %xmm0
    000016d1: 	movdqa	%xmm1, %xmm2
    000016d5: 	punpckldq	%xmm1, %xmm2
    000016d9: 	punpckhdq	%xmm1, %xmm1
    000016dd: 	pmuludq	%xmm6, %xmm2
    000016e1: 	pmuludq	%xmm6, %xmm1
    000016e5: 	psrlq	$0x20, %xmm2
    000016ea: 	psrlq	$0x20, %xmm1
    000016ef: 	shufps	$0x88, %xmm1, %xmm2
    000016f3: 	movdqa	%xmm0, %xmm1
    000016f7: 	punpcklwd	%xmm2, %xmm0
    000016fb: 	punpckhwd	%xmm2, %xmm1
    000016ff: 	movdqa	%xmm0, %xmm2
    00001703: 	punpckhwd	%xmm1, %xmm2
    00001707: 	punpcklwd	%xmm1, %xmm0
    0000170b: 	punpcklwd	%xmm2, %xmm0
    0000170f: 	psrlw	$0x2, %xmm0
    00001714: 	movdqa	%xmm0, %xmm2
    00001718: 	psllw	$0x1, %xmm2
    0000171d: 	paddw	%xmm0, %xmm2
    00001721: 	movdqa	%xmm2, %xmm1
    00001725: 	psllw	$0x4, %xmm1
    0000172a: 	psubw	%xmm2, %xmm1
    0000172e: 	psllw	$0x3, %xmm1
    00001733: 	psubw	%xmm1, %xmm3
    00001737: 	paddw	%xmm0, %xmm3
    0000173b: 	paddw	%xmm3, %xmm4
    0000173f: 	cmpq	%rbx, %rax
    00001742: 	jne	.Ltmp401 # Offset: 5954
    00001748: 	movdqa	%xmm4, %xmm0
    0000174c: 	movq	0xb0(%rsp), %rbp
    00001754: 	movq	0xb8(%rsp), %r12
    0000175c: 	movq	%r15, 0xd0(%rsp)
    00001764: 	psrldq	$0x8, %xmm0
    00001769: 	paddw	%xmm0, %xmm4
    0000176d: 	movq	%rbp, %rax
    00001770: 	movdqa	%xmm4, %xmm0
    00001774: 	addq	%r12, %rax
    00001777: 	psrldq	$0x4, %xmm0
    0000177c: 	paddw	%xmm0, %xmm4
    00001780: 	movdqa	%xmm4, %xmm0
    00001784: 	psrldq	$0x2, %xmm0
    00001789: 	paddw	%xmm0, %xmm4
    0000178d: 	pextrw	$0x0, %xmm4, %r14d
    00001793: 	je	.Ltmp402 # Offset: 6035
    00001795: 	testq	%rbp, %rbp
    00001798: 	je	.Ltmp403 # Offset: 6040
.Ltmp402:
    0000179e: 	movq	%r12, 0x88(%rsp)
    000017a6: 	cmpq	$0xf, %r12
    000017aa: 	ja	.Ltmp404 # Offset: 6058
    000017b0: 	cmpq	$0x1, %r12
    000017b4: 	jne	.Ltmp405 # Offset: 6068
    000017ba: 	movzbl	(%rbp), %eax
    000017be: 	movb	%al, 0xe0(%rsp)
    000017c5: 	movq	%r15, %rax
.Ltmp467:
    000017c8: 	movq	%r12, 0xd8(%rsp)
    000017d0: 	movb	$0x0, (%rax,%r12)
    000017d5: 	cvttsd2si	init_value(%rip), %edx
    000017dd: 	movzwl	%dx, %edx
    000017e0: 	movl	%edx, %eax
    000017e2: 	shrl	$0x3, %eax
    000017e5: 	imulq	$0x16c16c17, %rax, %rax
    000017ec: 	shrq	$0x22, %rax
    000017f0: 	imulw	$0xfe99, %ax, %ax
    000017f5: 	addl	%edx, %eax
    000017f7: 	imulw	$0xfa0, %ax, %ax
    000017fc: 	cmpw	%r14w, %ax
    00001800: 	je	.Ltmp406 # Offset: 6144
    00001802: 	movq	0xd0(%rsp), %rdx
    0000180a: 	leaq	DATAat0x141e1(%rip), %rsi
    00001811: 	movl	$0x1, %edi
    00001816: 	xorl	%eax, %eax
    00001818: 	callq	__printf_chk@PLT # Offset: 6168
.Ltmp406:
    0000181d: 	movq	0xd0(%rsp), %rdi
    00001825: 	cmpq	%r15, %rdi
    00001828: 	je	.Ltmp407 # Offset: 6184
    0000182e: 	movq	0xe0(%rsp), %rax
    00001836: 	addl	$0x1, %r13d
    0000183a: 	leaq	0x1(%rax), %rsi
    0000183e: 	callq	_ZdlPvm@PLT # Offset: 6206
    00001843: 	cmpl	iterations(%rip), %r13d
    0000184a: 	jl	.Ltmp408 # Offset: 6218
.Ltmp400:
    00001850: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001857: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    0000185e: 	subq	$0x20, %rax
    00001862: 	cmpq	%rax, %rbp
    00001865: 	je	.Ltmp409 # Offset: 6245
    0000186b: 	leaq	0x10(%rbp), %rdi
    0000186f: 	movq	0xb8(%rsp), %r12
    00001877: 	movq	%rdi, (%rbp)
    0000187b: 	movq	0xb0(%rsp), %r13
    00001883: 	movq	%r13, %rax
    00001886: 	addq	%r12, %rax
    00001889: 	je	.Ltmp410 # Offset: 6281
    0000188b: 	testq	%r13, %r13
    0000188e: 	je	.Ltmp411 # Offset: 6286
.Ltmp410:
    00001894: 	movq	%r12, 0x88(%rsp)
    0000189c: 	cmpq	$0xf, %r12
    000018a0: 	ja	.Ltmp412 # Offset: 6304
    000018a6: 	cmpq	$0x1, %r12
    000018aa: 	jne	.Ltmp413 # Offset: 6314
    000018b0: 	movzbl	(%r13), %eax
    000018b5: 	movb	%al, 0x10(%rbp)
.Ltmp499:
    000018b8: 	movq	%r12, 0x8(%rbp)
    000018bc: 	movb	$0x0, (%rdi,%r12)
    000018c1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000018c8: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000018cf: 	addq	$0x20, %rax
    000018d3: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000018da: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000018e1: 	je	.Ltmp414 # Offset: 6369
.Ltmp478:
    000018e7: 	movq	-0x20(%rax), %rbp
    000018eb: 	callq	clock@PLT # Offset: 6379
    000018f0: 	pxor	%xmm0, %xmm0
    000018f4: 	movq	%rax, end_time(%rip)
    000018fb: 	movq	%rbp, %rdi
    000018fe: 	subq	start_time(%rip), %rax
    00001905: 	cvtsi2sd	%rax, %xmm0
    0000190a: 	divsd	DATAat0x14308(%rip), %xmm0
    00001912: 	callq	_Z13record_resultdPKc # Offset: 6418
    00001917: 	movq	0xb0(%rsp), %rdi
    0000191f: 	cmpq	0x68(%rsp), %rdi
    00001924: 	je	.Ltmp415 # Offset: 6436
    00001926: 	movq	0xc0(%rsp), %rax
    0000192e: 	leaq	0x1(%rax), %rsi
    00001932: 	callq	_ZdlPvm@PLT # Offset: 6450
.Ltmp415:
    00001937: 	movq	0x58(%rsp), %rsi
    0000193c: 	movq	0x60(%rsp), %rdi
    00001941: 	leaq	DATAat0x142b5(%rip), %rdx
    00001948: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6472
    0000194d: 	callq	clock@PLT # Offset: 6477
    00001952: 	movq	%rax, start_time(%rip)
    00001959: 	movl	iterations(%rip), %eax
    0000195f: 	testl	%eax, %eax
    00001961: 	jle	.Ltmp416 # Offset: 6497
    00001967: 	movdqa	DATAat0x14390(%rip), %xmm5
    0000196f: 	xorl	%r13d, %r13d
    00001972: 	movaps	%xmm5, (%rsp)
    00001976: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp424:
    00001980: 	movq	0x18(%rsp), %rax
    00001985: 	pxor	%xmm2, %xmm2
    00001989: 	nopl	(%rax) # Size: 7
.Ltmp417:
    00001990: 	movdqa	(%rsp), %xmm0
    00001995: 	pmulhuw	(%rax), %xmm0
    00001999: 	psrlw	$0x6, %xmm0
    0000199e: 	addq	$0x10, %rax
    000019a2: 	movdqa	%xmm0, %xmm3
    000019a6: 	psllw	$0x1, %xmm3
    000019ab: 	paddw	%xmm0, %xmm3
    000019af: 	paddw	-0x10(%rax), %xmm0
    000019b4: 	movdqa	%xmm3, %xmm1
    000019b8: 	psllw	$0x4, %xmm1
    000019bd: 	psubw	%xmm3, %xmm1
    000019c1: 	psllw	$0x3, %xmm1
    000019c6: 	psubw	%xmm1, %xmm2
    000019ca: 	paddw	%xmm0, %xmm2
    000019ce: 	cmpq	%rbx, %rax
    000019d1: 	jne	.Ltmp417 # Offset: 6609
    000019d3: 	movdqa	%xmm2, %xmm0
    000019d7: 	movq	0xb0(%rsp), %rbp
    000019df: 	movq	0xb8(%rsp), %r12
    000019e7: 	movq	%r15, 0xd0(%rsp)
    000019ef: 	psrldq	$0x8, %xmm0
    000019f4: 	paddw	%xmm0, %xmm2
    000019f8: 	movq	%rbp, %rax
    000019fb: 	movdqa	%xmm2, %xmm0
    000019ff: 	addq	%r12, %rax
    00001a02: 	psrldq	$0x4, %xmm0
    00001a07: 	paddw	%xmm0, %xmm2
    00001a0b: 	movdqa	%xmm2, %xmm0
    00001a0f: 	psrldq	$0x2, %xmm0
    00001a14: 	paddw	%xmm0, %xmm2
    00001a18: 	pextrw	$0x0, %xmm2, %r14d
    00001a1e: 	je	.Ltmp418 # Offset: 6686
    00001a20: 	testq	%rbp, %rbp
    00001a23: 	je	.Ltmp419 # Offset: 6691
.Ltmp418:
    00001a29: 	movq	%r12, 0x88(%rsp)
    00001a31: 	cmpq	$0xf, %r12
    00001a35: 	ja	.Ltmp420 # Offset: 6709
    00001a3b: 	cmpq	$0x1, %r12
    00001a3f: 	jne	.Ltmp421 # Offset: 6719
    00001a45: 	movzbl	(%rbp), %eax
    00001a49: 	movb	%al, 0xe0(%rsp)
    00001a50: 	movq	%r15, %rax
.Ltmp469:
    00001a53: 	movq	%r12, 0xd8(%rsp)
    00001a5b: 	movb	$0x0, (%rax,%r12)
    00001a60: 	cvttsd2si	init_value(%rip), %edx
    00001a68: 	movzwl	%dx, %eax
    00001a6b: 	imull	$0x2d83, %eax, %eax
    00001a71: 	shrl	$0x16, %eax
    00001a74: 	imulw	$0xfe99, %ax, %ax
    00001a79: 	addl	%edx, %eax
    00001a7b: 	imulw	$0xfa0, %ax, %ax
    00001a80: 	cmpw	%r14w, %ax
    00001a84: 	je	.Ltmp422 # Offset: 6788
    00001a86: 	movq	0xd0(%rsp), %rdx
    00001a8e: 	leaq	DATAat0x141e1(%rip), %rsi
    00001a95: 	movl	$0x1, %edi
    00001a9a: 	xorl	%eax, %eax
    00001a9c: 	callq	__printf_chk@PLT # Offset: 6812
.Ltmp422:
    00001aa1: 	movq	0xd0(%rsp), %rdi
    00001aa9: 	cmpq	%r15, %rdi
    00001aac: 	je	.Ltmp423 # Offset: 6828
    00001ab2: 	movq	0xe0(%rsp), %rax
    00001aba: 	addl	$0x1, %r13d
    00001abe: 	leaq	0x1(%rax), %rsi
    00001ac2: 	callq	_ZdlPvm@PLT # Offset: 6850
    00001ac7: 	cmpl	iterations(%rip), %r13d
    00001ace: 	jl	.Ltmp424 # Offset: 6862
.Ltmp416:
    00001ad4: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001adb: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00001ae2: 	subq	$0x20, %rax
    00001ae6: 	cmpq	%rax, %rbx
    00001ae9: 	je	.Ltmp425 # Offset: 6889
    00001aef: 	leaq	0x10(%rbx), %rdi
    00001af3: 	movq	0xb8(%rsp), %r12
    00001afb: 	movq	%rdi, (%rbx)
    00001afe: 	movq	0xb0(%rsp), %rbp
    00001b06: 	movq	%rbp, %rax
    00001b09: 	addq	%r12, %rax
    00001b0c: 	je	.Ltmp426 # Offset: 6924
    00001b0e: 	testq	%rbp, %rbp
    00001b11: 	je	.Ltmp427 # Offset: 6929
.Ltmp426:
    00001b17: 	movq	%r12, 0x88(%rsp)
    00001b1f: 	cmpq	$0xf, %r12
    00001b23: 	ja	.Ltmp428 # Offset: 6947
    00001b29: 	cmpq	$0x1, %r12
    00001b2d: 	jne	.Ltmp429 # Offset: 6957
    00001b33: 	movzbl	(%rbp), %eax
    00001b37: 	movb	%al, 0x10(%rbx)
.Ltmp495:
    00001b3a: 	movq	%r12, 0x8(%rbx)
    00001b3e: 	movb	$0x0, (%rdi,%r12)
    00001b43: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001b4a: 	addq	$0x20, %rax
    00001b4e: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp493:
    00001b55: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001b5c: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001b63: 	je	.Ltmp430 # Offset: 7011
.Ltmp492:
    00001b69: 	movq	-0x20(%rax), %rbp
    00001b6d: 	callq	clock@PLT # Offset: 7021
    00001b72: 	pxor	%xmm0, %xmm0
    00001b76: 	movq	%rax, end_time(%rip)
    00001b7d: 	movq	%rbp, %rdi
    00001b80: 	subq	start_time(%rip), %rax
    00001b87: 	cvtsi2sd	%rax, %xmm0
    00001b8c: 	divsd	DATAat0x14308(%rip), %xmm0
    00001b94: 	callq	_Z13record_resultdPKc # Offset: 7060
    00001b99: 	movq	0xb0(%rsp), %rdi
    00001ba1: 	cmpq	0x68(%rsp), %rdi
    00001ba6: 	je	.Ltmp431 # Offset: 7078
    00001ba8: 	movq	0xc0(%rsp), %rax
    00001bb0: 	leaq	0x1(%rax), %rsi
    00001bb4: 	callq	_ZdlPvm@PLT # Offset: 7092
.Ltmp431:
    00001bb9: 	movq	0x90(%rsp), %rbp
    00001bc1: 	movq	0x98(%rsp), %r12
    00001bc9: 	movq	%r15, 0xd0(%rsp)
    00001bd1: 	movq	%rbp, %rax
    00001bd4: 	addq	%r12, %rax
    00001bd7: 	je	.Ltmp432 # Offset: 7127
    00001bd9: 	testq	%rbp, %rbp
    00001bdc: 	je	.Ltmp433 # Offset: 7132
.Ltmp432:
    00001be2: 	movq	%r12, 0x88(%rsp)
    00001bea: 	cmpq	$0xf, %r12
    00001bee: 	ja	.Ltmp434 # Offset: 7150
    00001bf4: 	cmpq	$0x1, %r12
    00001bf8: 	jne	.Ltmp435 # Offset: 7160
    00001bfe: 	movzbl	(%rbp), %eax
    00001c02: 	movb	%al, 0xe0(%rsp)
    00001c09: 	movq	%r15, %rax
.Ltmp471:
    00001c0c: 	movq	%r12, 0xd8(%rsp)
    00001c14: 	movb	$0x0, (%rax,%r12)
    00001c19: 	movabsq	$0x3fffffffffffffff, %rax
    00001c23: 	subq	0xd8(%rsp), %rax
    00001c2b: 	cmpq	$0x8, %rax
    00001c2f: 	jbe	.Ltmp436 # Offset: 7215
    00001c35: 	movq	0x30(%rsp), %rdi
    00001c3a: 	movl	$0x9, %edx
    00001c3f: 	leaq	DATAat0x14202(%rip), %rsi
    00001c46: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 7238
    00001c4b: 	movl	iterations(%rip), %edx
    00001c51: 	xorl	%r8d, %r8d
    00001c54: 	xorl	%ecx, %ecx
    00001c56: 	movl	$0xfa0, %esi
    00001c5b: 	movq	0xd0(%rsp), %rdi
    00001c63: 	callq	_Z9summarizePKciiii # Offset: 7267
    00001c68: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm5
    00001c70: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001c77: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    00001c7e: 	movaps	%xmm5, 0x40(%rsp)
    00001c83: 	movq	%xmm5, %rbp
    00001c88: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm5
    00001c90: 	movq	%rax, (%rsp)
    00001c94: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    00001c9b: 	movhlps	%xmm5, %xmm4
    00001c9e: 	movaps	%xmm5, 0x30(%rsp)
    00001ca3: 	movq	%xmm4, %rsi
    00001ca8: 	movq	%rax, 0x20(%rsp)
    00001cad: 	leaq	0x8(%rsi), %r12
    00001cb1: 	movq	%xmm4, 0x50(%rsp)
    00001cb7: 	movq	%xmm5, 0x18(%rsp)
    00001cbd: 	cmpq	%r12, %rax
    00001cc0: 	jbe	.Ltmp437 # Offset: 7360
    00001cc2: 	movq	%r12, 0x58(%rsp)
    00001cc7: 	movq	%r12, %r13
    00001cca: 	movq	%rbp, 0x60(%rsp)
    00001ccf: 	movq	0x20(%rsp), %rbp
    00001cd4: 	nopl	(%rax) # Size: 4
.Ltmp440:
    00001cd8: 	movq	(%r13), %r12
    00001cdc: 	leaq	0x200(%r12), %rbx
    00001ce4: 	nopl	(%rax) # Size: 4
.Ltmp439:
    00001ce8: 	movq	(%r12), %rdi
    00001cec: 	leaq	0x10(%r12), %rdx
    00001cf1: 	cmpq	%rdx, %rdi
    00001cf4: 	je	.Ltmp438 # Offset: 7412
    00001cfa: 	movq	0x10(%r12), %rax
    00001cff: 	addq	$0x20, %r12
    00001d03: 	leaq	0x1(%rax), %rsi
    00001d07: 	callq	_ZdlPvm@PLT # Offset: 7431
    00001d0c: 	cmpq	%r12, %rbx
    00001d0f: 	jne	.Ltmp439 # Offset: 7439
    00001d11: 	addq	$0x8, %r13
    00001d15: 	cmpq	%r13, %rbp
    00001d18: 	ja	.Ltmp440 # Offset: 7448
.Ltmp457:
    00001d1a: 	movq	0x58(%rsp), %r12
    00001d1f: 	movq	0x60(%rsp), %rbp
.Ltmp437:
    00001d24: 	movq	0x20(%rsp), %rsi
    00001d29: 	cmpq	%rsi, 0x50(%rsp)
    00001d2e: 	jne	.Ltmp441 # Offset: 7470
    00001d30: 	jmp	.Ltmp442 # Offset: 7472
    00001d35: 	nopl	(%rax) # Size: 3
.Ltmp444:
    00001d38: 	movq	0x10(%rbp), %rax
    00001d3c: 	addq	$0x20, %rbp
    00001d40: 	leaq	0x1(%rax), %rsi
    00001d44: 	callq	_ZdlPvm@PLT # Offset: 7492
.Ltmp441:
    00001d49: 	cmpq	%rbp, 0x18(%rsp)
    00001d4e: 	je	.Ltmp443 # Offset: 7502
.Ltmp445:
    00001d50: 	movq	(%rbp), %rdi
    00001d54: 	leaq	0x10(%rbp), %rax
    00001d58: 	cmpq	%rax, %rdi
    00001d5b: 	jne	.Ltmp444 # Offset: 7515
    00001d5d: 	addq	$0x20, %rbp
    00001d61: 	cmpq	0x18(%rsp), %rbp
    00001d66: 	jne	.Ltmp445 # Offset: 7526
    00001d68: 	cmpq	%r14, (%rsp)
    00001d6c: 	je	.Ltmp446 # Offset: 7532
    00001d6e: 	nop # Size: 2
.Ltmp448:
    00001d70: 	movq	(%r14), %rdi
    00001d73: 	leaq	0x10(%r14), %rax
    00001d77: 	cmpq	%rax, %rdi
    00001d7a: 	je	.Ltmp447 # Offset: 7546
    00001d7c: 	movq	0x10(%r14), %rax
    00001d80: 	leaq	0x1(%rax), %rsi
    00001d84: 	callq	_ZdlPvm@PLT # Offset: 7556
.Ltmp447:
    00001d89: 	addq	$0x20, %r14
.Ltmp443:
    00001d8d: 	cmpq	%r14, (%rsp)
    00001d91: 	jne	.Ltmp448 # Offset: 7569
.Ltmp446:
    00001d93: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    00001d9a: 	leaq	0x8(%rax), %rbx
    00001d9e: 	cmpq	%r12, %rbx
    00001da1: 	jbe	.Ltmp449 # Offset: 7585
    00001da3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp450:
    00001da8: 	movq	(%r12), %rdi
    00001dac: 	movl	$0x200, %esi
    00001db1: 	addq	$0x8, %r12
    00001db5: 	callq	_ZdlPvm@PLT # Offset: 7605
    00001dba: 	cmpq	%r12, %rbx
    00001dbd: 	ja	.Ltmp450 # Offset: 7613
.Ltmp449:
    00001dbf: 	movdqa	0x40(%rsp), %xmm5
    00001dc5: 	movq	0xd0(%rsp), %rdi
    00001dcd: 	movaps	%xmm5, "_ZL7gLabels/1"+48(%rip)
    00001dd4: 	movdqa	0x30(%rsp), %xmm5
    00001dda: 	movaps	%xmm5, "_ZL7gLabels/1"+64(%rip)
    00001de1: 	cmpq	%r15, %rdi
    00001de4: 	je	.Ltmp451 # Offset: 7652
    00001de6: 	movq	0xe0(%rsp), %rax
    00001dee: 	leaq	0x1(%rax), %rsi
    00001df2: 	callq	_ZdlPvm@PLT # Offset: 7666
.Ltmp451:
    00001df7: 	movq	0x90(%rsp), %rdi
    00001dff: 	cmpq	0x78(%rsp), %rdi
    00001e04: 	je	.Ltmp452 # Offset: 7684
    00001e06: 	movq	0xa0(%rsp), %rax
    00001e0e: 	leaq	0x1(%rax), %rsi
    00001e12: 	callq	_ZdlPvm@PLT # Offset: 7698
.Ltmp452:
    00001e17: 	movq	0x2038(%rsp), %rax
    00001e1f: 	subq	%fs:0x28, %rax
    00001e28: 	jne	.Ltmp453 # Offset: 7720
    00001e2e: 	addq	$0x2048, %rsp
    00001e35: 	popq	%rbx
    00001e36: 	popq	%rbp
    00001e37: 	popq	%r12
    00001e39: 	popq	%r13
    00001e3b: 	popq	%r14
    00001e3d: 	popq	%r15
    00001e3f: 	retq # Offset: 7743
.Ltmp454:
    00001e40: 	addq	$0x20, %rbp
.Ltmp442:
    00001e44: 	cmpq	%rbp, (%rsp)
    00001e48: 	je	.Ltmp446 # Offset: 7752
.Ltmp455:
    00001e4e: 	movq	(%rbp), %rdi
    00001e52: 	leaq	0x10(%rbp), %rax
    00001e56: 	cmpq	%rax, %rdi
    00001e59: 	je	.Ltmp454 # Offset: 7769
    00001e5b: 	movq	0x10(%rbp), %rax
    00001e5f: 	addq	$0x20, %rbp
    00001e63: 	leaq	0x1(%rax), %rsi
    00001e67: 	callq	_ZdlPvm@PLT # Offset: 7783
    00001e6c: 	cmpq	%rbp, (%rsp)
    00001e70: 	jne	.Ltmp455 # Offset: 7792
    00001e72: 	jmp	.Ltmp446 # Offset: 7794
.Ltmp294:
    00001e77: 	leaq	0x88(%rsp), %rsi
    00001e7f: 	xorl	%edx, %edx
    00001e81: 	movq	%r13, %rdi
    00001e84: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7812
    00001e89: 	movq	%rax, (%r13)
    00001e8d: 	movq	%rax, %rdi
    00001e90: 	movq	0x88(%rsp), %rax
    00001e98: 	movq	%rax, 0x10(%r13)
.Ltmp498:
    00001e9c: 	movq	%r12, %rdx
    00001e9f: 	movq	%r14, %rsi
    00001ea2: 	callq	memcpy@PLT # Offset: 7842
    00001ea7: 	movq	0x88(%rsp), %r12
    00001eaf: 	movq	(%r13), %rdi
    00001eb3: 	jmp	.Ltmp456 # Offset: 7859
    00001eb8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp438:
    00001ec0: 	addq	$0x20, %r12
    00001ec4: 	cmpq	%r12, %rbx
    00001ec7: 	jne	.Ltmp439 # Offset: 7879
    00001ecd: 	addq	$0x8, %r13
    00001ed1: 	cmpq	%r13, %rbp
    00001ed4: 	ja	.Ltmp440 # Offset: 7892
    00001eda: 	jmp	.Ltmp457 # Offset: 7898
    00001edf: 	nop # Size: 1
.Ltmp321:
    00001ee0: 	addl	$0x1, %r14d
    00001ee4: 	cmpl	iterations(%rip), %r14d
    00001eeb: 	jl	.Ltmp322 # Offset: 7915
    00001ef1: 	jmp	.Ltmp314 # Offset: 7921
    00001ef6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp333:
    00001f00: 	addl	$0x1, %r14d
    00001f04: 	cmpl	iterations(%rip), %r14d
    00001f0b: 	jl	.Ltmp334 # Offset: 7947
    00001f11: 	jmp	.Ltmp326 # Offset: 7953
    00001f16: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp368:
    00001f20: 	addl	$0x1, %r14d
    00001f24: 	cmpl	iterations(%rip), %r14d
    00001f2b: 	jl	.Ltmp369 # Offset: 7979
    00001f31: 	jmp	.Ltmp361 # Offset: 7985
    00001f36: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp384:
    00001f40: 	addl	$0x1, %r14d
    00001f44: 	cmpl	iterations(%rip), %r14d
    00001f4b: 	jl	.Ltmp385 # Offset: 8011
    00001f51: 	jmp	.Ltmp377 # Offset: 8017
    00001f56: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp407:
    00001f60: 	addl	$0x1, %r13d
    00001f64: 	cmpl	iterations(%rip), %r13d
    00001f6b: 	jl	.Ltmp408 # Offset: 8043
    00001f71: 	jmp	.Ltmp400 # Offset: 8049
    00001f76: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp423:
    00001f80: 	addl	$0x1, %r13d
    00001f84: 	cmpl	iterations(%rip), %r13d
    00001f8b: 	jl	.Ltmp424 # Offset: 8075
    00001f91: 	jmp	.Ltmp416 # Offset: 8081
    00001f96: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp319:
    00001fa0: 	testq	%r12, %r12
    00001fa3: 	jne	.Ltmp458 # Offset: 8099
    00001fa9: 	movq	%r15, %rax
    00001fac: 	jmp	.Ltmp459 # Offset: 8108
    00001fb1: 	nopl	(%rax) # Size: 7
.Ltmp331:
    00001fb8: 	testq	%r12, %r12
    00001fbb: 	jne	.Ltmp460 # Offset: 8123
    00001fc1: 	movq	%r15, %rax
    00001fc4: 	jmp	.Ltmp461 # Offset: 8132
    00001fc9: 	nopl	(%rax) # Size: 7
.Ltmp366:
    00001fd0: 	testq	%r12, %r12
    00001fd3: 	jne	.Ltmp462 # Offset: 8147
    00001fd9: 	movq	%r15, %rax
    00001fdc: 	jmp	.Ltmp463 # Offset: 8156
    00001fe1: 	nopl	(%rax) # Size: 7
.Ltmp382:
    00001fe8: 	testq	%r12, %r12
    00001feb: 	jne	.Ltmp464 # Offset: 8171
    00001ff1: 	movq	%r15, %rax
    00001ff4: 	jmp	.Ltmp465 # Offset: 8180
    00001ff9: 	nopl	(%rax) # Size: 7
.Ltmp405:
    00002000: 	testq	%r12, %r12
    00002003: 	jne	.Ltmp466 # Offset: 8195
    00002009: 	movq	%r15, %rax
    0000200c: 	jmp	.Ltmp467 # Offset: 8204
    00002011: 	nopl	(%rax) # Size: 7
.Ltmp421:
    00002018: 	testq	%r12, %r12
    0000201b: 	jne	.Ltmp468 # Offset: 8219
    00002021: 	movq	%r15, %rax
    00002024: 	jmp	.Ltmp469 # Offset: 8228
    00002029: 	nopl	(%rax) # Size: 7
.Ltmp330:
    00002030: 	movq	0x30(%rsp), %rdi
    00002035: 	leaq	0x88(%rsp), %rsi
    0000203d: 	xorl	%edx, %edx
    0000203f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8255
    00002044: 	movq	%rax, 0xd0(%rsp)
    0000204c: 	movq	%rax, %rdi
    0000204f: 	movq	0x88(%rsp), %rax
    00002057: 	movq	%rax, 0xe0(%rsp)
.Ltmp509:
    0000205f: 	movq	%r12, %rdx
    00002062: 	movq	%r13, %rsi
    00002065: 	callq	memcpy@PLT # Offset: 8293
    0000206a: 	movq	0x88(%rsp), %r12
    00002072: 	movq	0xd0(%rsp), %rax
    0000207a: 	jmp	.Ltmp461 # Offset: 8314
    0000207f: 	nop # Size: 1
.Ltmp318:
    00002080: 	movq	0x30(%rsp), %rdi
    00002085: 	leaq	0x88(%rsp), %rsi
    0000208d: 	xorl	%edx, %edx
    0000208f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8335
    00002094: 	movq	%rax, 0xd0(%rsp)
    0000209c: 	movq	%rax, %rdi
    0000209f: 	movq	0x88(%rsp), %rax
    000020a7: 	movq	%rax, 0xe0(%rsp)
.Ltmp508:
    000020af: 	movq	%r12, %rdx
    000020b2: 	movq	%r13, %rsi
    000020b5: 	callq	memcpy@PLT # Offset: 8373
    000020ba: 	movq	0x88(%rsp), %r12
    000020c2: 	movq	0xd0(%rsp), %rax
    000020ca: 	jmp	.Ltmp459 # Offset: 8394
    000020cf: 	nop # Size: 1
.Ltmp365:
    000020d0: 	movq	0x30(%rsp), %rdi
    000020d5: 	leaq	0x88(%rsp), %rsi
    000020dd: 	xorl	%edx, %edx
    000020df: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8415
    000020e4: 	movq	%rax, 0xd0(%rsp)
    000020ec: 	movq	%rax, %rdi
    000020ef: 	movq	0x88(%rsp), %rax
    000020f7: 	movq	%rax, 0xe0(%rsp)
.Ltmp510:
    000020ff: 	movq	%r12, %rdx
    00002102: 	movq	%r13, %rsi
    00002105: 	callq	memcpy@PLT # Offset: 8453
    0000210a: 	movq	0x88(%rsp), %r12
    00002112: 	movq	0xd0(%rsp), %rax
    0000211a: 	jmp	.Ltmp463 # Offset: 8474
    0000211f: 	nop # Size: 1
.Ltmp404:
    00002120: 	movq	0x30(%rsp), %rdi
    00002125: 	leaq	0x88(%rsp), %rsi
    0000212d: 	xorl	%edx, %edx
    0000212f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8495
    00002134: 	movq	%rax, 0xd0(%rsp)
    0000213c: 	movq	%rax, %rdi
    0000213f: 	movq	0x88(%rsp), %rax
    00002147: 	movq	%rax, 0xe0(%rsp)
.Ltmp512:
    0000214f: 	movq	%r12, %rdx
    00002152: 	movq	%rbp, %rsi
    00002155: 	callq	memcpy@PLT # Offset: 8533
    0000215a: 	movq	0x88(%rsp), %r12
    00002162: 	movq	0xd0(%rsp), %rax
    0000216a: 	jmp	.Ltmp467 # Offset: 8554
    0000216f: 	nop # Size: 1
.Ltmp381:
    00002170: 	movq	0x30(%rsp), %rdi
    00002175: 	leaq	0x88(%rsp), %rsi
    0000217d: 	xorl	%edx, %edx
    0000217f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8575
    00002184: 	movq	%rax, 0xd0(%rsp)
    0000218c: 	movq	%rax, %rdi
    0000218f: 	movq	0x88(%rsp), %rax
    00002197: 	movq	%rax, 0xe0(%rsp)
.Ltmp511:
    0000219f: 	movq	%r12, %rdx
    000021a2: 	movq	%r13, %rsi
    000021a5: 	callq	memcpy@PLT # Offset: 8613
    000021aa: 	movq	0x88(%rsp), %r12
    000021b2: 	movq	0xd0(%rsp), %rax
    000021ba: 	jmp	.Ltmp465 # Offset: 8634
    000021bf: 	nop # Size: 1
.Ltmp420:
    000021c0: 	movq	0x30(%rsp), %rdi
    000021c5: 	leaq	0x88(%rsp), %rsi
    000021cd: 	xorl	%edx, %edx
    000021cf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8655
    000021d4: 	movq	%rax, 0xd0(%rsp)
    000021dc: 	movq	%rax, %rdi
    000021df: 	movq	0x88(%rsp), %rax
    000021e7: 	movq	%rax, 0xe0(%rsp)
.Ltmp513:
    000021ef: 	movq	%r12, %rdx
    000021f2: 	movq	%rbp, %rsi
    000021f5: 	callq	memcpy@PLT # Offset: 8693
    000021fa: 	movq	0x88(%rsp), %r12
    00002202: 	movq	0xd0(%rsp), %rax
    0000220a: 	jmp	.Ltmp469 # Offset: 8714
.Ltmp435:
    0000220f: 	testq	%r12, %r12
    00002212: 	jne	.Ltmp470 # Offset: 8722
    00002218: 	movq	%r15, %rax
    0000221b: 	jmp	.Ltmp471 # Offset: 8731
.Ltmp301:
    00002220: 	testq	%r12, %r12
    00002223: 	jne	.Ltmp472 # Offset: 8739
    00002229: 	movq	%r15, %rax
    0000222c: 	jmp	.Ltmp473 # Offset: 8748
.Ltmp359:
    00002231: 	testq	%r12, %r12
    00002234: 	jne	.Ltmp474 # Offset: 8756
    0000223a: 	movq	0x68(%rsp), %rax
    0000223f: 	jmp	.Ltmp475 # Offset: 8767
.Ltmp434:
    00002244: 	movq	0x30(%rsp), %rdi
    00002249: 	leaq	0x88(%rsp), %rsi
    00002251: 	xorl	%edx, %edx
    00002253: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8787
    00002258: 	movq	%rax, 0xd0(%rsp)
    00002260: 	movq	%rax, %rdi
    00002263: 	movq	0x88(%rsp), %rax
    0000226b: 	movq	%rax, 0xe0(%rsp)
.Ltmp514:
    00002273: 	movq	%r12, %rdx
    00002276: 	movq	%rbp, %rsi
    00002279: 	callq	memcpy@PLT # Offset: 8825
    0000227e: 	movq	0x88(%rsp), %r12
    00002286: 	movq	0xd0(%rsp), %rax
    0000228e: 	jmp	.Ltmp471 # Offset: 8846
.Ltmp300:
    00002293: 	movq	0x30(%rsp), %rdi
    00002298: 	leaq	0x88(%rsp), %rsi
    000022a0: 	xorl	%edx, %edx
    000022a2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8866
    000022a7: 	movq	%rax, 0xd0(%rsp)
    000022af: 	movq	%rax, %rdi
    000022b2: 	movq	0x88(%rsp), %rax
    000022ba: 	movq	%rax, 0xe0(%rsp)
.Ltmp515:
    000022c2: 	movq	%r12, %rdx
    000022c5: 	movq	%r13, %rsi
    000022c8: 	callq	memcpy@PLT # Offset: 8904
    000022cd: 	movq	0x88(%rsp), %r12
    000022d5: 	movq	0xd0(%rsp), %rax
    000022dd: 	jmp	.Ltmp473 # Offset: 8925
.Ltmp358:
    000022e2: 	movq	0x60(%rsp), %rdi
    000022e7: 	leaq	0x88(%rsp), %rsi
    000022ef: 	xorl	%edx, %edx
    000022f1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8945
    000022f6: 	movq	%rax, 0xb0(%rsp)
    000022fe: 	movq	%rax, %rdi
    00002301: 	movq	0x88(%rsp), %rax
    00002309: 	movq	%rax, 0xc0(%rsp)
.Ltmp507:
    00002311: 	movq	%r12, %rdx
    00002314: 	movq	%r13, %rsi
    00002317: 	callq	memcpy@PLT # Offset: 8983
    0000231c: 	movq	0x88(%rsp), %r12
    00002324: 	movq	0xb0(%rsp), %rax
    0000232c: 	jmp	.Ltmp475 # Offset: 9004
.Ltmp354:
    00002331: 	movq	-0x8(%rdx), %rax
    00002335: 	addq	$0x200, %rax
    0000233b: 	jmp	.Ltmp476 # Offset: 9019
.Ltmp353:
    00002340: 	movq	0x30(%rsp), %rsi
    00002345: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000234c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9036
    00002351: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002358: 	jmp	.Ltmp477 # Offset: 9048
.Ltmp409:
    0000235d: 	movq	0x60(%rsp), %rsi
    00002362: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002369: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9065
    0000236e: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002375: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000237c: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002383: 	jne	.Ltmp478 # Offset: 9091
.Ltmp414:
    00002389: 	movq	-0x8(%rdx), %rax
    0000238d: 	addq	$0x200, %rax
    00002393: 	jmp	.Ltmp478 # Offset: 9107
.Ltmp343:
    00002398: 	movq	-0x8(%rdx), %rax
    0000239c: 	addq	$0x200, %rax
    000023a2: 	jmp	.Ltmp479 # Offset: 9122
.Ltmp342:
    000023a7: 	movq	0x30(%rsp), %rsi
    000023ac: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000023b3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9139
    000023b8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000023bf: 	jmp	.Ltmp480 # Offset: 9151
.Ltmp336:
    000023c4: 	movq	-0x8(%rdx), %rax
    000023c8: 	addq	$0x200, %rax
    000023ce: 	jmp	.Ltmp481 # Offset: 9166
.Ltmp335:
    000023d3: 	movq	0x60(%rsp), %rsi
    000023d8: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000023df: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9183
    000023e4: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000023eb: 	jmp	.Ltmp482 # Offset: 9195
.Ltmp323:
    000023f0: 	movq	0x60(%rsp), %rsi
    000023f5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000023fc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9212
    00002401: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002408: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000240f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002416: 	jne	.Ltmp483 # Offset: 9238
.Ltmp324:
    0000241c: 	movq	-0x8(%rdx), %rax
    00002420: 	addq	$0x200, %rax
    00002426: 	jmp	.Ltmp483 # Offset: 9254
.Ltmp296:
    0000242b: 	movq	-0x8(%rdx), %rax
    0000242f: 	addq	$0x200, %rax
    00002435: 	jmp	.Ltmp484 # Offset: 9269
.Ltmp291:
    0000243a: 	movq	0x30(%rsp), %rsi
    0000243f: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002446: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9286
    0000244b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002452: 	jmp	.Ltmp485 # Offset: 9298
.Ltmp312:
    00002457: 	movq	-0x8(%rdx), %rax
    0000245b: 	addq	$0x200, %rax
    00002461: 	jmp	.Ltmp486 # Offset: 9313
.Ltmp311:
    00002466: 	movq	0x30(%rsp), %rsi
    0000246b: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002472: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9330
    00002477: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000247e: 	jmp	.Ltmp487 # Offset: 9342
.Ltmp370:
    00002483: 	movq	0x60(%rsp), %rsi
    00002488: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000248f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9359
    00002494: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000249b: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000024a2: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000024a9: 	jne	.Ltmp488 # Offset: 9385
.Ltmp375:
    000024af: 	movq	-0x8(%rdx), %rax
    000024b3: 	addq	$0x200, %rax
    000024b9: 	jmp	.Ltmp488 # Offset: 9401
.Ltmp386:
    000024be: 	movq	0x60(%rsp), %rsi
    000024c3: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000024ca: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9418
    000024cf: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000024d6: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000024dd: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000024e4: 	jne	.Ltmp489 # Offset: 9444
.Ltmp391:
    000024ea: 	movq	-0x8(%rdx), %rax
    000024ee: 	addq	$0x200, %rax
    000024f4: 	jmp	.Ltmp489 # Offset: 9460
.Ltmp398:
    000024f9: 	movq	-0x8(%rdx), %rax
    000024fd: 	addq	$0x200, %rax
    00002503: 	jmp	.Ltmp490 # Offset: 9475
.Ltmp397:
    00002508: 	movq	0x30(%rsp), %rsi
    0000250d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002514: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9492
    00002519: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002520: 	jmp	.Ltmp491 # Offset: 9504
.Ltmp430:
    00002525: 	movq	-0x8(%rdx), %rax
    00002529: 	addq	$0x200, %rax
    0000252f: 	jmp	.Ltmp492 # Offset: 9519
.Ltmp425:
    00002534: 	movq	0x60(%rsp), %rsi
    00002539: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002540: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9536
    00002545: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000254c: 	jmp	.Ltmp493 # Offset: 9548
.Ltmp390:
    00002551: 	testq	%r12, %r12
    00002554: 	je	.Ltmp494 # Offset: 9556
.Ltmp502:
    0000255a: 	movq	%r12, %rdx
    0000255d: 	movq	%r14, %rsi
    00002560: 	callq	memcpy@PLT # Offset: 9568
    00002565: 	movq	0x88(%rsp), %r12
    0000256d: 	movq	(%r13), %rdi
    00002571: 	jmp	.Ltmp494 # Offset: 9585
.Ltmp429:
    00002576: 	testq	%r12, %r12
    00002579: 	je	.Ltmp495 # Offset: 9593
    0000257f: 	jmp	.Ltmp496 # Offset: 9599
    00002584: 	nopl	(%rax) # Size: 4
.Ltmp374:
    00002588: 	testq	%r12, %r12
    0000258b: 	je	.Ltmp497 # Offset: 9611
.Ltmp501:
    00002591: 	movq	%r12, %rdx
    00002594: 	movq	%r14, %rsi
    00002597: 	callq	memcpy@PLT # Offset: 9623
    0000259c: 	movq	0x88(%rsp), %r12
    000025a4: 	movq	(%r13), %rdi
    000025a8: 	jmp	.Ltmp497 # Offset: 9640
.Ltmp295:
    000025ad: 	testq	%r12, %r12
    000025b0: 	je	.Ltmp456 # Offset: 9648
    000025b6: 	jmp	.Ltmp498 # Offset: 9654
    000025bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp413:
    000025c0: 	testq	%r12, %r12
    000025c3: 	je	.Ltmp499 # Offset: 9667
    000025c9: 	jmp	.Ltmp500 # Offset: 9673
    000025cb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp412:
    000025d0: 	leaq	0x88(%rsp), %rsi
    000025d8: 	xorl	%edx, %edx
    000025da: 	movq	%rbp, %rdi
    000025dd: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9693
    000025e2: 	movq	%rax, (%rbp)
    000025e6: 	movq	%rax, %rdi
    000025e9: 	movq	0x88(%rsp), %rax
    000025f1: 	movq	%rax, 0x10(%rbp)
.Ltmp500:
    000025f5: 	movq	%r12, %rdx
    000025f8: 	movq	%r13, %rsi
    000025fb: 	callq	memcpy@PLT # Offset: 9723
    00002600: 	movq	0x88(%rsp), %r12
    00002608: 	movq	(%rbp), %rdi
    0000260c: 	jmp	.Ltmp499 # Offset: 9740
.Ltmp428:
    00002611: 	leaq	0x88(%rsp), %rsi
    00002619: 	xorl	%edx, %edx
    0000261b: 	movq	%rbx, %rdi
    0000261e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9758
    00002623: 	movq	%rax, (%rbx)
    00002626: 	movq	%rax, %rdi
    00002629: 	movq	0x88(%rsp), %rax
    00002631: 	movq	%rax, 0x10(%rbx)
.Ltmp496:
    00002635: 	movq	%r12, %rdx
    00002638: 	movq	%rbp, %rsi
    0000263b: 	callq	memcpy@PLT # Offset: 9787
    00002640: 	movq	0x88(%rsp), %r12
    00002648: 	movq	(%rbx), %rdi
    0000264b: 	jmp	.Ltmp495 # Offset: 9803
.Ltmp373:
    00002650: 	leaq	0x88(%rsp), %rsi
    00002658: 	xorl	%edx, %edx
    0000265a: 	movq	%r13, %rdi
    0000265d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9821
    00002662: 	movq	%rax, (%r13)
    00002666: 	movq	%rax, %rdi
    00002669: 	movq	0x88(%rsp), %rax
    00002671: 	movq	%rax, 0x10(%r13)
    00002675: 	jmp	.Ltmp501 # Offset: 9845
.Ltmp389:
    0000267a: 	leaq	0x88(%rsp), %rsi
    00002682: 	xorl	%edx, %edx
    00002684: 	movq	%r13, %rdi
    00002687: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9863
    0000268c: 	movq	%rax, (%r13)
    00002690: 	movq	%rax, %rdi
    00002693: 	movq	0x88(%rsp), %rax
    0000269b: 	movq	%rax, 0x10(%r13)
    0000269f: 	jmp	.Ltmp502 # Offset: 9887
.Ltmp303:
    000026a4: 	xorl	%esi, %esi
    000026a6: 	xorl	%edi, %edi
    000026a8: 	xorl	%eax, %eax
    000026aa: 	jmp	.Ltmp503 # Offset: 9898
.Ltmp345:
    000026af: 	xorl	%esi, %esi
    000026b1: 	xorl	%edi, %edi
    000026b3: 	movd	%ecx, %xmm5
    000026b7: 	jmp	.Ltmp504 # Offset: 9911
.Ltmp306:
    000026bc: 	xorl	%edi, %edi
    000026be: 	xorl	%eax, %eax
    000026c0: 	jmp	.Ltmp503 # Offset: 9920
.Ltmp348:
    000026c5: 	movl	$0x0, 0x50(%rsp)
    000026cd: 	xorl	%edi, %edi
    000026cf: 	movd	0x50(%rsp), %xmm5
    000026d5: 	jmp	.Ltmp504 # Offset: 9941
.Ltmp346:
    000026da: 	xorl	%eax, %eax
    000026dc: 	movl	$0x20, %esi
    000026e1: 	xorl	%edx, %edx
    000026e3: 	jmp	.Ltmp505 # Offset: 9955
.Ltmp304:
    000026e8: 	xorl	%eax, %eax
    000026ea: 	movl	$0x20, %esi
    000026ef: 	xorl	%edx, %edx
    000026f1: 	jmp	.Ltmp506 # Offset: 9969
.Ltmp474:
    000026f6: 	movq	0x68(%rsp), %rdi
    000026fb: 	jmp	.Ltmp507 # Offset: 9979
.Ltmp372:
    00002700: 	leaq	DATAat0x14008(%rip), %rdi
    00002707: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9991
.Ltmp380:
    0000270c: 	leaq	DATAat0x14008(%rip), %rdi
    00002713: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10003
.Ltmp388:
    00002718: 	leaq	DATAat0x14008(%rip), %rdi
    0000271f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10015
.Ltmp403:
    00002724: 	leaq	DATAat0x14008(%rip), %rdi
    0000272b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10027
.Ltmp411:
    00002730: 	leaq	DATAat0x14008(%rip), %rdi
    00002737: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10039
.Ltmp419:
    0000273c: 	leaq	DATAat0x14008(%rip), %rdi
    00002743: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10051
.Ltmp427:
    00002748: 	leaq	DATAat0x14008(%rip), %rdi
    0000274f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10063
.Ltmp433:
    00002754: 	leaq	DATAat0x14008(%rip), %rdi
    0000275b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10075
.Ltmp317:
    00002760: 	leaq	DATAat0x14008(%rip), %rdi
    00002767: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10087
.Ltmp329:
    0000276c: 	leaq	DATAat0x14008(%rip), %rdi
    00002773: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10099
.Ltmp360:
    00002778: 	leaq	DATAat0x14184(%rip), %rdi
    0000277f: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10111
.Ltmp364:
    00002784: 	leaq	DATAat0x14008(%rip), %rdi
    0000278b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10123
.Ltmp299:
    00002790: 	leaq	DATAat0x14008(%rip), %rdi
    00002797: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10135
.Ltmp302:
    0000279c: 	leaq	DATAat0x14184(%rip), %rdi
    000027a3: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10147
.Ltmp357:
    000027a8: 	leaq	DATAat0x14008(%rip), %rdi
    000027af: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10159
.Ltmp436:
    000027b4: 	leaq	DATAat0x14184(%rip), %rdi
    000027bb: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10171
.Ltmp453:
    000027c0: 	callq	__stack_chk_fail@PLT # Offset: 10176
.Ltmp293:
    000027c5: 	leaq	DATAat0x14008(%rip), %rdi
    000027cc: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10188
.Ltmp458:
    000027d1: 	movq	%r15, %rdi
    000027d4: 	jmp	.Ltmp508 # Offset: 10196
.Ltmp460:
    000027d9: 	movq	%r15, %rdi
    000027dc: 	jmp	.Ltmp509 # Offset: 10204
.Ltmp462:
    000027e1: 	movq	%r15, %rdi
    000027e4: 	jmp	.Ltmp510 # Offset: 10212
.Ltmp464:
    000027e9: 	movq	%r15, %rdi
    000027ec: 	jmp	.Ltmp511 # Offset: 10220
.Ltmp466:
    000027f1: 	movq	%r15, %rdi
    000027f4: 	jmp	.Ltmp512 # Offset: 10228
.Ltmp468:
    000027f9: 	movq	%r15, %rdi
    000027fc: 	jmp	.Ltmp513 # Offset: 10236
.Ltmp470:
    00002801: 	movq	%r15, %rdi
    00002804: 	jmp	.Ltmp514 # Offset: 10244
.Ltmp472:
    00002809: 	movq	%r15, %rdi
    0000280c: 	jmp	.Ltmp515 # Offset: 10252
    00002811: 	endbr64
.Ltmp520:
    00002815: 	movq	%rax, %rbp
    00002818: 	jmp	.Ltmp516 # Offset: 10264
    0000281a: 	endbr64
.Ltmp519:
    0000281e: 	movq	%rax, %rbp
    00002821: 	movq	0xd0(%rsp), %rdi
    00002829: 	cmpq	%r15, %rdi
    0000282c: 	je	.Ltmp516 # Offset: 10284
    0000282e: 	movq	0xe0(%rsp), %rax
    00002836: 	leaq	0x1(%rax), %rsi
    0000283a: 	callq	_ZdlPvm@PLT # Offset: 10298
.Ltmp516:
    0000283f: 	movq	0xb0(%rsp), %rdi
    00002847: 	cmpq	0x68(%rsp), %rdi
    0000284c: 	je	.Ltmp517 # Offset: 10316
.Ltmp526:
    0000284e: 	movq	0xc0(%rsp), %rax
    00002856: 	leaq	0x1(%rax), %rsi
    0000285a: 	callq	_ZdlPvm@PLT # Offset: 10330
.Ltmp517:
    0000285f: 	movq	0x90(%rsp), %rdi
    00002867: 	cmpq	0x78(%rsp), %rdi
    0000286c: 	je	.Ltmp518 # Offset: 10348
    0000286e: 	movq	0xa0(%rsp), %rax
    00002876: 	leaq	0x1(%rax), %rsi
    0000287a: 	callq	_ZdlPvm@PLT # Offset: 10362
.Ltmp518:
    0000287f: 	movq	%rbp, %rdi
    00002882: 	callq	_Unwind_Resume@PLT # Offset: 10370
    00002887: 	endbr64
    0000288b: 	jmp	.Ltmp519 # Offset: 10379
    0000288d: 	endbr64
    00002891: 	jmp	.Ltmp520 # Offset: 10385
    00002893: 	endbr64
    00002897: 	jmp	.Ltmp520 # Offset: 10391
    0000289c: 	endbr64
.Ltmp522:
    000028a0: 	movq	%rax, %rbp
    000028a3: 	jmp	.Ltmp521 # Offset: 10403
    000028a8: 	endbr64
    000028ac: 	jmp	.Ltmp520 # Offset: 10412
    000028b1: 	endbr64
    000028b5: 	jmp	.Ltmp522 # Offset: 10421
    000028b7: 	endbr64
    000028bb: 	jmp	.Ltmp522 # Offset: 10427
    000028bd: 	endbr64
    000028c1: 	movq	%rax, %rbp
    000028c4: 	jmp	.Ltmp523 # Offset: 10436
    000028c6: 	endbr64
    000028ca: 	movq	%rax, %rbp
    000028cd: 	jmp	.Ltmp517 # Offset: 10445
.Ltmp523:
    000028cf: 	movq	0xd0(%rsp), %rdi
    000028d7: 	leaq	0xe0(%rsp), %rax
    000028df: 	cmpq	%rax, %rdi
    000028e2: 	je	.Ltmp517 # Offset: 10466
.Ltmp527:
    000028e8: 	movq	0xe0(%rsp), %rax
    000028f0: 	leaq	0x1(%rax), %rsi
    000028f4: 	callq	_ZdlPvm@PLT # Offset: 10484
    000028f9: 	jmp	.Ltmp517 # Offset: 10489
    000028fe: 	endbr64
    00002902: 	jmp	.Ltmp522 # Offset: 10498
    00002904: 	endbr64
    00002908: 	jmp	.Ltmp520 # Offset: 10504
    0000290d: 	endbr64
    00002911: 	jmp	.Ltmp519 # Offset: 10513
    00002916: 	endbr64
    0000291a: 	jmp	.Ltmp522 # Offset: 10522
    0000291c: 	endbr64
    00002920: 	movq	%rax, %rbp
    00002923: 	jmp	.Ltmp524 # Offset: 10531
    00002925: 	endbr64
    00002929: 	movq	%rax, %rbp
    0000292c: 	jmp	.Ltmp525 # Offset: 10540
.Ltmp524:
    0000292e: 	movq	0xd0(%rsp), %rdi
    00002936: 	cmpq	%r15, %rdi
    00002939: 	je	.Ltmp525 # Offset: 10553
    0000293b: 	movq	0xe0(%rsp), %rax
    00002943: 	leaq	0x1(%rax), %rsi
    00002947: 	callq	_ZdlPvm@PLT # Offset: 10567
.Ltmp525:
    0000294c: 	movq	0xb0(%rsp), %rdi
    00002954: 	leaq	0xc0(%rsp), %rax
    0000295c: 	cmpq	%rax, %rdi
    0000295f: 	jne	.Ltmp526 # Offset: 10591
    00002965: 	jmp	.Ltmp517 # Offset: 10597
    0000296a: 	endbr64
    0000296e: 	jmp	.Ltmp522 # Offset: 10606
    00002973: 	endbr64
    00002977: 	jmp	.Ltmp519 # Offset: 10615
    0000297c: 	endbr64
    00002980: 	jmp	.Ltmp519 # Offset: 10624
    00002985: 	endbr64
    00002989: 	jmp	.Ltmp520 # Offset: 10633
    0000298e: 	endbr64
    00002992: 	jmp	.Ltmp522 # Offset: 10642
.Ltmp521:
    00002997: 	movq	0xd0(%rsp), %rdi
    0000299f: 	cmpq	%r15, %rdi
    000029a2: 	jne	.Ltmp527 # Offset: 10658
    000029a8: 	jmp	.Ltmp517 # Offset: 10664
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeItEvd"

Binary Function "_Z11TestOneTypeIjEvd" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x7290
  Size        : 0x2782
  MaxSize     : 0x2790
  Offset      : 0x7290
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIjEvd
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x1000, %rsp
    00000015: 	orq	$0x0, (%rsp)
    0000001a: 	subq	$0x1000, %rsp
    00000021: 	orq	$0x0, (%rsp)
    00000026: 	subq	$0x1000, %rsp
    0000002d: 	orq	$0x0, (%rsp)
    00000032: 	subq	$0xf78, %rsp
    00000039: 	movq	%fs:0x28, %rax
    00000042: 	movq	%rax, 0x3f68(%rsp)
    0000004a: 	xorl	%eax, %eax
    0000004c: 	leaq	0x90(%rsp), %rax
    00000054: 	movq	$0x8, 0x88(%rsp)
    00000060: 	leaq	0x3f60(%rsp), %rbx
    00000068: 	movq	%rax, 0x68(%rsp)
    0000006d: 	movq	%rax, 0x80(%rsp)
    00000075: 	movabsq	$0x745f3233746e6975, %rax
    0000007f: 	movq	%rax, 0x90(%rsp)
    00000087: 	cvttsd2si	init_value(%rip), %rax
    00000090: 	movb	$0x0, 0x98(%rsp)
    00000098: 	movq	%rax, %xmm1
    0000009d: 	leaq	0xe0(%rsp), %rax
    000000a5: 	movq	%rax, 0x10(%rsp)
    000000aa: 	pshufd	$0x0, %xmm1, %xmm1
    000000af: 	nop # Size: 1
.Ltmp528:
    000000b0: 	movaps	%xmm1, (%rax)
    000000b3: 	addq	$0x10, %rax
    000000b7: 	cmpq	%rax, %rbx
    000000ba: 	jne	.Ltmp528 # Offset: 186
    000000bc: 	cvttsd2si	%xmm0, %rax
    000000c1: 	leaq	0xc0(%rsp), %rdi
    000000c9: 	movl	$0x10, %edx
    000000ce: 	movq	$0x8, 0xc8(%rsp)
    000000da: 	leaq	0xd0(%rsp), %r15
    000000e2: 	leaq	DATAat0x141d0(%rip), %rsi
    000000e9: 	movq	%rdi, 0x18(%rsp)
    000000ee: 	movq	%r15, 0xc0(%rsp)
    000000f6: 	movb	$0x0, 0xd8(%rsp)
    000000fe: 	movq	%rax, 0x60(%rsp)
    00000103: 	movl	%eax, %ebp
    00000105: 	movabsq	$0x745f3233746e6975, %rax
    0000010f: 	movq	%rax, 0xd0(%rsp)
    00000117: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 279
    0000011c: 	callq	clock@PLT # Offset: 284
    00000121: 	movl	iterations(%rip), %edi
    00000127: 	xorl	%r12d, %r12d
    0000012a: 	leaq	DATAat0x141e1(%rip), %r13
    00000131: 	movq	%rax, start_time(%rip)
    00000138: 	testl	%edi, %edi
    0000013a: 	jle	.Ltmp529 # Offset: 314
    0000013c: 	nopl	(%rax) # Size: 4
.Ltmp532:
    00000140: 	movq	0x10(%rsp), %rcx
    00000145: 	xorl	%esi, %esi
    00000147: 	nopw	(%rax,%rax) # Size: 9
.Ltmp530:
    00000150: 	movl	(%rcx), %eax
    00000152: 	xorl	%edx, %edx
    00000154: 	addq	$0x4, %rcx
    00000158: 	divl	%ebp
    0000015a: 	addl	%eax, %esi
    0000015c: 	cmpq	%rbx, %rcx
    0000015f: 	jne	.Ltmp530 # Offset: 351
    00000161: 	cvttsd2si	init_value(%rip), %rax
    0000016a: 	xorl	%edx, %edx
    0000016c: 	divl	%ebp
    0000016e: 	imull	$0xfa0, %eax, %eax
    00000174: 	cmpl	%eax, %esi
    00000176: 	je	.Ltmp531 # Offset: 374
    00000178: 	movq	0xc0(%rsp), %rdx
    00000180: 	movq	%r13, %rsi
    00000183: 	movl	$0x1, %edi
    00000188: 	xorl	%eax, %eax
    0000018a: 	callq	__printf_chk@PLT # Offset: 394
    0000018f: 	movl	iterations(%rip), %edi
.Ltmp531:
    00000195: 	addl	$0x1, %r12d
    00000199: 	cmpl	%edi, %r12d
    0000019c: 	jl	.Ltmp532 # Offset: 412
.Ltmp529:
    0000019e: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000001a5: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    000001ac: 	subq	$0x20, %rax
    000001b0: 	cmpq	%rax, %r13
    000001b3: 	je	.Ltmp533 # Offset: 435
    000001b9: 	leaq	0x10(%r13), %rdi
    000001bd: 	movq	0xc8(%rsp), %r12
    000001c5: 	movq	%rdi, (%r13)
    000001c9: 	movq	0xc0(%rsp), %r14
    000001d1: 	movq	%r14, %rax
    000001d4: 	addq	%r12, %rax
    000001d7: 	je	.Ltmp534 # Offset: 471
    000001d9: 	testq	%r14, %r14
    000001dc: 	je	.Ltmp535 # Offset: 476
.Ltmp534:
    000001e2: 	movq	%r12, 0x78(%rsp)
    000001e7: 	cmpq	$0xf, %r12
    000001eb: 	ja	.Ltmp536 # Offset: 491
    000001f1: 	cmpq	$0x1, %r12
    000001f5: 	jne	.Ltmp537 # Offset: 501
    000001fb: 	movzbl	(%r14), %eax
    000001ff: 	movb	%al, 0x10(%r13)
.Ltmp696:
    00000203: 	movq	%r12, 0x8(%r13)
    00000207: 	movb	$0x0, (%rdi,%r12)
    0000020c: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000213: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000021a: 	addq	$0x20, %rax
    0000021e: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000225: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000022c: 	je	.Ltmp538 # Offset: 556
.Ltmp716:
    00000232: 	movq	-0x20(%rax), %r12
    00000236: 	callq	clock@PLT # Offset: 566
    0000023b: 	pxor	%xmm0, %xmm0
    0000023f: 	movq	%rax, end_time(%rip)
    00000246: 	movq	%r12, %rdi
    00000249: 	subq	start_time(%rip), %rax
    00000250: 	cvtsi2sd	%rax, %xmm0
    00000255: 	divsd	DATAat0x14308(%rip), %xmm0
    0000025d: 	callq	_Z13record_resultdPKc # Offset: 605
    00000262: 	movq	0xc0(%rsp), %rdi
    0000026a: 	cmpq	%r15, %rdi
    0000026d: 	je	.Ltmp539 # Offset: 621
    0000026f: 	movq	0xd0(%rsp), %rax
    00000277: 	leaq	0x1(%rax), %rsi
    0000027b: 	callq	_ZdlPvm@PLT # Offset: 635
.Ltmp539:
    00000280: 	movq	0x80(%rsp), %r13
    00000288: 	movq	0x88(%rsp), %r12
    00000290: 	movq	%r15, 0xc0(%rsp)
    00000298: 	movq	%r13, %rax
    0000029b: 	addq	%r12, %rax
    0000029e: 	je	.Ltmp540 # Offset: 670
    000002a0: 	testq	%r13, %r13
    000002a3: 	je	.Ltmp541 # Offset: 675
.Ltmp540:
    000002a9: 	movq	%r12, 0x78(%rsp)
    000002ae: 	cmpq	$0xf, %r12
    000002b2: 	ja	.Ltmp542 # Offset: 690
    000002b8: 	cmpq	$0x1, %r12
    000002bc: 	jne	.Ltmp543 # Offset: 700
    000002c2: 	movzbl	(%r13), %eax
    000002c7: 	movb	%al, 0xd0(%rsp)
    000002ce: 	movq	%r15, %rax
.Ltmp713:
    000002d1: 	movq	%r12, 0xc8(%rsp)
    000002d9: 	movb	$0x0, (%rax,%r12)
    000002de: 	movabsq	$0x3fffffffffffffff, %rax
    000002e8: 	subq	0xc8(%rsp), %rax
    000002f0: 	cmpq	$0x1a, %rax
    000002f4: 	jbe	.Ltmp544 # Offset: 756
    000002fa: 	movq	0x18(%rsp), %rdi
    000002ff: 	movl	$0x1b, %edx
    00000304: 	leaq	DATAat0x1420c(%rip), %rsi
    0000030b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 779
    00000310: 	callq	clock@PLT # Offset: 784
    00000315: 	movl	0x60(%rsp), %ecx
    00000319: 	movq	%rax, start_time(%rip)
    00000320: 	subl	$0x1, %ecx
    00000323: 	movl	%ecx, 0x30(%rsp)
    00000327: 	je	.Ltmp545 # Offset: 807
    0000032d: 	js	.Ltmp546 # Offset: 813
    00000333: 	movl	$0x80000000, %eax
    00000338: 	xorl	%edx, %edx
    0000033a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp547:
    00000340: 	shrl	%eax
    00000342: 	addl	$0x1, %edx
    00000345: 	testl	%eax, %ecx
    00000347: 	je	.Ltmp547 # Offset: 839
    00000349: 	movl	$0x20, %esi
    0000034e: 	movl	$0x1, %eax
    00000353: 	subl	%edx, %esi
    00000355: 	movl	%esi, %ecx
    00000357: 	shll	%cl, %eax
.Ltmp748:
    00000359: 	movq	0x60(%rsp), %r9
    0000035e: 	cmpl	%r9d, %eax
    00000361: 	je	.Ltmp548 # Offset: 865
    00000367: 	testl	%esi, %esi
    00000369: 	movl	$0x1, %edi
    0000036e: 	movl	$0x0, %eax
    00000373: 	movl	$0x40, %ecx
    00000378: 	cmovlel	%esi, %edi
    0000037b: 	movl	$0x1f, %esi
    00000380: 	subl	%edx, %esi
    00000382: 	cmovsl	%eax, %esi
    00000385: 	subl	%edx, %ecx
    00000387: 	movl	$0x1, %eax
    0000038c: 	shlq	%cl, %rax
    0000038f: 	movl	%r9d, %ecx
    00000392: 	cqto
    00000394: 	idivq	%rcx
    00000397: 	addl	$0x1, %eax
.Ltmp746:
    0000039a: 	movd	%eax, %xmm7
    0000039e: 	movl	iterations(%rip), %ecx
    000003a4: 	movl	%edi, %eax
    000003a6: 	xorl	%r12d, %r12d
    000003a9: 	pshufd	$0x0, %xmm7, %xmm7
    000003ae: 	movq	%rax, (%rsp)
    000003b2: 	movl	%esi, %r14d
    000003b5: 	leaq	DATAat0x141e1(%rip), %r13
    000003bc: 	movaps	%xmm7, 0x20(%rsp)
    000003c1: 	testl	%ecx, %ecx
    000003c3: 	jle	.Ltmp549 # Offset: 963
    000003c9: 	nopl	(%rax) # Size: 7
.Ltmp552:
    000003d0: 	movdqa	0x20(%rsp), %xmm7
    000003d6: 	movq	0x10(%rsp), %rax
    000003db: 	pxor	%xmm3, %xmm3
    000003df: 	movq	(%rsp), %xmm6
    000003e4: 	movdqa	%xmm7, %xmm5
    000003e8: 	movdqa	%xmm7, %xmm4
    000003ec: 	punpckldq	%xmm7, %xmm5
    000003f0: 	punpckhdq	%xmm7, %xmm4
    000003f4: 	movq	%r14, %xmm7
    000003f9: 	nopl	(%rax) # Size: 7
.Ltmp550:
    00000400: 	movdqa	(%rax), %xmm0
    00000404: 	addq	$0x10, %rax
    00000408: 	movdqa	%xmm0, %xmm1
    0000040c: 	movdqa	%xmm0, %xmm2
    00000410: 	punpckldq	%xmm0, %xmm1
    00000414: 	punpckhdq	%xmm0, %xmm2
    00000418: 	pmuludq	%xmm5, %xmm1
    0000041c: 	pmuludq	%xmm4, %xmm2
    00000420: 	psrlq	$0x20, %xmm1
    00000425: 	psrlq	$0x20, %xmm2
    0000042a: 	shufps	$0x88, %xmm2, %xmm1
    0000042e: 	psubd	%xmm1, %xmm0
    00000432: 	psrld	%xmm6, %xmm0
    00000436: 	paddd	%xmm1, %xmm0
    0000043a: 	psrld	%xmm7, %xmm0
    0000043e: 	paddd	%xmm0, %xmm3
    00000442: 	cmpq	%rax, %rbx
    00000445: 	jne	.Ltmp550 # Offset: 1093
    00000447: 	cvttsd2si	init_value(%rip), %rax
    00000450: 	movdqa	%xmm3, %xmm0
    00000454: 	movq	%xmm7, %r14
    00000459: 	xorl	%edx, %edx
    0000045b: 	psrldq	$0x8, %xmm0
    00000460: 	paddd	%xmm0, %xmm3
    00000464: 	movdqa	%xmm3, %xmm0
    00000468: 	divl	%ebp
    0000046a: 	psrldq	$0x4, %xmm0
    0000046f: 	paddd	%xmm0, %xmm3
    00000473: 	movd	%xmm3, %edx
    00000477: 	imull	$0xfa0, %eax, %eax
    0000047d: 	cmpl	%edx, %eax
    0000047f: 	je	.Ltmp551 # Offset: 1151
    00000481: 	movq	0xc0(%rsp), %rdx
    00000489: 	movq	%r13, %rsi
    0000048c: 	movl	$0x1, %edi
    00000491: 	xorl	%eax, %eax
    00000493: 	callq	__printf_chk@PLT # Offset: 1171
    00000498: 	movl	iterations(%rip), %ecx
.Ltmp551:
    0000049e: 	addl	$0x1, %r12d
    000004a2: 	cmpl	%ecx, %r12d
    000004a5: 	jl	.Ltmp552 # Offset: 1189
.Ltmp549:
    000004ab: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000004b2: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    000004b9: 	subq	$0x20, %rax
    000004bd: 	cmpq	%rax, %r13
    000004c0: 	je	.Ltmp553 # Offset: 1216
    000004c6: 	leaq	0x10(%r13), %rdi
    000004ca: 	movq	0xc8(%rsp), %r12
    000004d2: 	movq	%rdi, (%r13)
    000004d6: 	movq	0xc0(%rsp), %r14
    000004de: 	movq	%r14, %rax
    000004e1: 	addq	%r12, %rax
    000004e4: 	je	.Ltmp554 # Offset: 1252
    000004e6: 	testq	%r14, %r14
    000004e9: 	je	.Ltmp555 # Offset: 1257
.Ltmp554:
    000004ef: 	movq	%r12, 0x78(%rsp)
    000004f4: 	cmpq	$0xf, %r12
    000004f8: 	ja	.Ltmp556 # Offset: 1272
    000004fe: 	cmpq	$0x1, %r12
    00000502: 	jne	.Ltmp557 # Offset: 1282
    00000508: 	movzbl	(%r14), %eax
    0000050c: 	movb	%al, 0x10(%r13)
.Ltmp741:
    00000510: 	movq	%r12, 0x8(%r13)
    00000514: 	movb	$0x0, (%rdi,%r12)
    00000519: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000520: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000527: 	addq	$0x20, %rax
    0000052b: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000532: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000539: 	je	.Ltmp558 # Offset: 1337
.Ltmp719:
    0000053f: 	movq	-0x20(%rax), %r12
    00000543: 	callq	clock@PLT # Offset: 1347
    00000548: 	pxor	%xmm0, %xmm0
    0000054c: 	movq	%rax, end_time(%rip)
    00000553: 	movq	%r12, %rdi
    00000556: 	subq	start_time(%rip), %rax
    0000055d: 	cvtsi2sd	%rax, %xmm0
    00000562: 	divsd	DATAat0x14308(%rip), %xmm0
    0000056a: 	callq	_Z13record_resultdPKc # Offset: 1386
    0000056f: 	movq	0xc0(%rsp), %rdi
    00000577: 	cmpq	%r15, %rdi
    0000057a: 	je	.Ltmp559 # Offset: 1402
    0000057c: 	movq	0xd0(%rsp), %rax
    00000584: 	leaq	0x1(%rax), %rsi
    00000588: 	callq	_ZdlPvm@PLT # Offset: 1416
.Ltmp559:
    0000058d: 	leaq	0x80(%rsp), %rax
    00000595: 	leaq	0xa0(%rsp), %rdi
    0000059d: 	leaq	DATAat0x141f1(%rip), %rdx
    000005a4: 	movq	%rax, %rsi
    000005a7: 	movq	%rdi, 0x50(%rsp)
    000005ac: 	movq	%rax, 0x40(%rsp)
    000005b1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1457
    000005b6: 	callq	clock@PLT # Offset: 1462
    000005bb: 	movl	iterations(%rip), %r8d
    000005c2: 	movq	%rax, start_time(%rip)
    000005c9: 	testl	%r8d, %r8d
    000005cc: 	jle	.Ltmp560 # Offset: 1484
    000005d2: 	movdqa	DATAat0x143a0(%rip), %xmm7
    000005da: 	xorl	%r14d, %r14d
    000005dd: 	movaps	%xmm7, (%rsp)
    000005e1: 	nopl	(%rax) # Size: 7
.Ltmp568:
    000005e8: 	movq	0x10(%rsp), %rax
    000005ed: 	pxor	%xmm2, %xmm2
    000005f1: 	nopl	(%rax) # Size: 7
.Ltmp561:
    000005f8: 	movdqa	(%rax), %xmm0
    000005fc: 	movdqa	(%rsp), %xmm4
    00000601: 	addq	$0x10, %rax
    00000605: 	psrld	$0x3, %xmm0
    0000060a: 	movdqa	%xmm0, %xmm1
    0000060e: 	punpckldq	%xmm0, %xmm1
    00000612: 	punpckhdq	%xmm0, %xmm0
    00000616: 	pmuludq	%xmm4, %xmm1
    0000061a: 	pmuludq	%xmm4, %xmm0
    0000061e: 	shufps	$0xdd, %xmm0, %xmm1
    00000622: 	psrld	$0x2, %xmm1
    00000627: 	paddd	%xmm1, %xmm2
    0000062b: 	cmpq	%rbx, %rax
    0000062e: 	jne	.Ltmp561 # Offset: 1582
    00000630: 	movdqa	%xmm2, %xmm0
    00000634: 	movq	0xa0(%rsp), %r13
    0000063c: 	movq	0xa8(%rsp), %r12
    00000644: 	movq	%r15, 0xc0(%rsp)
    0000064c: 	psrldq	$0x8, %xmm0
    00000651: 	paddd	%xmm0, %xmm2
    00000655: 	movq	%r13, %rax
    00000658: 	movdqa	%xmm2, %xmm0
    0000065c: 	addq	%r12, %rax
    0000065f: 	psrldq	$0x4, %xmm0
    00000664: 	paddd	%xmm0, %xmm2
    00000668: 	movd	%xmm2, 0x20(%rsp)
    0000066e: 	je	.Ltmp562 # Offset: 1646
    00000670: 	testq	%r13, %r13
    00000673: 	je	.Ltmp563 # Offset: 1651
.Ltmp562:
    00000679: 	movq	%r12, 0x78(%rsp)
    0000067e: 	cmpq	$0xf, %r12
    00000682: 	ja	.Ltmp564 # Offset: 1666
    00000688: 	cmpq	$0x1, %r12
    0000068c: 	jne	.Ltmp565 # Offset: 1676
    00000692: 	movzbl	(%r13), %eax
    00000697: 	movb	%al, 0xd0(%rsp)
    0000069e: 	movq	%r15, %rax
.Ltmp699:
    000006a1: 	movq	%r12, 0xc8(%rsp)
    000006a9: 	movb	$0x0, (%rax,%r12)
    000006ae: 	cvttsd2si	init_value(%rip), %rax
    000006b7: 	shrl	$0x3, %eax
    000006ba: 	imulq	$0x16c16c17, %rax, %rax
    000006c1: 	shrq	$0x22, %rax
    000006c5: 	imull	$0xfa0, %eax, %eax
    000006cb: 	cmpl	0x20(%rsp), %eax
    000006cf: 	je	.Ltmp566 # Offset: 1743
    000006d1: 	movq	0xc0(%rsp), %rdx
    000006d9: 	leaq	DATAat0x141e1(%rip), %rsi
    000006e0: 	movl	$0x1, %edi
    000006e5: 	xorl	%eax, %eax
    000006e7: 	callq	__printf_chk@PLT # Offset: 1767
.Ltmp566:
    000006ec: 	movq	0xc0(%rsp), %rdi
    000006f4: 	cmpq	%r15, %rdi
    000006f7: 	je	.Ltmp567 # Offset: 1783
    000006fd: 	movq	0xd0(%rsp), %rax
    00000705: 	addl	$0x1, %r14d
    00000709: 	leaq	0x1(%rax), %rsi
    0000070d: 	callq	_ZdlPvm@PLT # Offset: 1805
    00000712: 	cmpl	iterations(%rip), %r14d
    00000719: 	jl	.Ltmp568 # Offset: 1817
.Ltmp560:
    0000071f: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000726: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    0000072d: 	subq	$0x20, %rax
    00000731: 	cmpq	%rax, %rdi
    00000734: 	je	.Ltmp569 # Offset: 1844
    0000073a: 	leaq	0x10(%rdi), %rax
    0000073e: 	movq	0xa8(%rsp), %rdx
    00000746: 	movq	%rax, (%rdi)
    00000749: 	movq	0xa0(%rsp), %rsi
    00000751: 	addq	%rsi, %rdx
    00000754: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1876
    00000759: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000760: 	addq	$0x20, %rax
    00000764: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp721:
    0000076b: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000772: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000779: 	je	.Ltmp570 # Offset: 1913
.Ltmp720:
    0000077f: 	movq	-0x20(%rax), %r12
    00000783: 	callq	clock@PLT # Offset: 1923
    00000788: 	pxor	%xmm0, %xmm0
    0000078c: 	movq	%rax, end_time(%rip)
    00000793: 	movq	%r12, %rdi
    00000796: 	subq	start_time(%rip), %rax
    0000079d: 	cvtsi2sd	%rax, %xmm0
    000007a2: 	divsd	DATAat0x14308(%rip), %xmm0
    000007aa: 	callq	_Z13record_resultdPKc # Offset: 1962
    000007af: 	movq	0xa0(%rsp), %rdi
    000007b7: 	leaq	0xb0(%rsp), %rax
    000007bf: 	movq	%rax, 0x58(%rsp)
    000007c4: 	cmpq	%rax, %rdi
    000007c7: 	je	.Ltmp571 # Offset: 1991
    000007c9: 	movq	0xb0(%rsp), %rax
    000007d1: 	leaq	0x1(%rax), %rsi
    000007d5: 	callq	_ZdlPvm@PLT # Offset: 2005
.Ltmp571:
    000007da: 	movq	0x40(%rsp), %rsi
    000007df: 	movq	0x50(%rsp), %rdi
    000007e4: 	leaq	DATAat0x14228(%rip), %rdx
    000007eb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2027
    000007f0: 	callq	clock@PLT # Offset: 2032
    000007f5: 	movl	iterations(%rip), %edi
    000007fb: 	movq	%rax, start_time(%rip)
    00000802: 	testl	%edi, %edi
    00000804: 	jle	.Ltmp572 # Offset: 2052
    0000080a: 	movdqa	DATAat0x143a0(%rip), %xmm5
    00000812: 	xorl	%r14d, %r14d
    00000815: 	movaps	%xmm5, (%rsp)
    00000819: 	nopl	(%rax) # Size: 7
.Ltmp580:
    00000820: 	movq	0x10(%rsp), %rax
    00000825: 	pxor	%xmm2, %xmm2
    00000829: 	nopl	(%rax) # Size: 7
.Ltmp573:
    00000830: 	movdqa	(%rax), %xmm0
    00000834: 	movdqa	(%rsp), %xmm5
    00000839: 	addq	$0x10, %rax
    0000083d: 	psrld	$0x3, %xmm0
    00000842: 	movdqa	%xmm0, %xmm1
    00000846: 	punpckldq	%xmm0, %xmm1
    0000084a: 	punpckhdq	%xmm0, %xmm0
    0000084e: 	pmuludq	%xmm5, %xmm1
    00000852: 	pmuludq	%xmm5, %xmm0
    00000856: 	psrlq	$0x20, %xmm1
    0000085b: 	psrlq	$0x20, %xmm0
    00000860: 	shufps	$0x88, %xmm0, %xmm1
    00000864: 	psrld	$0x2, %xmm1
    00000869: 	paddd	%xmm1, %xmm2
    0000086d: 	cmpq	%rbx, %rax
    00000870: 	jne	.Ltmp573 # Offset: 2160
    00000872: 	movdqa	%xmm2, %xmm0
    00000876: 	movq	0xa0(%rsp), %r13
    0000087e: 	movq	0xa8(%rsp), %r12
    00000886: 	movq	%r15, 0xc0(%rsp)
    0000088e: 	psrldq	$0x8, %xmm0
    00000893: 	paddd	%xmm0, %xmm2
    00000897: 	movq	%r13, %rax
    0000089a: 	movdqa	%xmm2, %xmm0
    0000089e: 	addq	%r12, %rax
    000008a1: 	psrldq	$0x4, %xmm0
    000008a6: 	paddd	%xmm0, %xmm2
    000008aa: 	movd	%xmm2, 0x20(%rsp)
    000008b0: 	je	.Ltmp574 # Offset: 2224
    000008b2: 	testq	%r13, %r13
    000008b5: 	je	.Ltmp575 # Offset: 2229
.Ltmp574:
    000008bb: 	movq	%r12, 0x78(%rsp)
    000008c0: 	cmpq	$0xf, %r12
    000008c4: 	ja	.Ltmp576 # Offset: 2244
    000008ca: 	cmpq	$0x1, %r12
    000008ce: 	jne	.Ltmp577 # Offset: 2254
    000008d4: 	movzbl	(%r13), %eax
    000008d9: 	movb	%al, 0xd0(%rsp)
    000008e0: 	movq	%r15, %rax
.Ltmp701:
    000008e3: 	movq	%r12, 0xc8(%rsp)
    000008eb: 	movb	$0x0, (%rax,%r12)
    000008f0: 	cvttsd2si	init_value(%rip), %rax
    000008f9: 	shrl	$0x3, %eax
    000008fc: 	imulq	$0x16c16c17, %rax, %rax
    00000903: 	shrq	$0x22, %rax
    00000907: 	imull	$0xfa0, %eax, %eax
    0000090d: 	cmpl	0x20(%rsp), %eax
    00000911: 	je	.Ltmp578 # Offset: 2321
    00000913: 	movq	0xc0(%rsp), %rdx
    0000091b: 	leaq	DATAat0x141e1(%rip), %rsi
    00000922: 	movl	$0x1, %edi
    00000927: 	xorl	%eax, %eax
    00000929: 	callq	__printf_chk@PLT # Offset: 2345
.Ltmp578:
    0000092e: 	movq	0xc0(%rsp), %rdi
    00000936: 	cmpq	%r15, %rdi
    00000939: 	je	.Ltmp579 # Offset: 2361
    0000093f: 	movq	0xd0(%rsp), %rax
    00000947: 	addl	$0x1, %r14d
    0000094b: 	leaq	0x1(%rax), %rsi
    0000094f: 	callq	_ZdlPvm@PLT # Offset: 2383
    00000954: 	cmpl	iterations(%rip), %r14d
    0000095b: 	jl	.Ltmp580 # Offset: 2395
.Ltmp572:
    00000961: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000968: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    0000096f: 	subq	$0x20, %rax
    00000973: 	cmpq	%rax, %r13
    00000976: 	je	.Ltmp581 # Offset: 2422
    0000097c: 	leaq	0x10(%r13), %rdi
    00000980: 	movq	0xa8(%rsp), %r12
    00000988: 	movq	%rdi, (%r13)
    0000098c: 	movq	0xa0(%rsp), %r14
    00000994: 	movq	%r14, %rax
    00000997: 	addq	%r12, %rax
    0000099a: 	je	.Ltmp582 # Offset: 2458
    0000099c: 	testq	%r14, %r14
    0000099f: 	je	.Ltmp583 # Offset: 2463
.Ltmp582:
    000009a5: 	movq	%r12, 0x78(%rsp)
    000009aa: 	cmpq	$0xf, %r12
    000009ae: 	ja	.Ltmp584 # Offset: 2478
    000009b4: 	cmpq	$0x1, %r12
    000009b8: 	jne	.Ltmp585 # Offset: 2488
    000009be: 	movzbl	(%r14), %eax
    000009c2: 	movb	%al, 0x10(%r13)
.Ltmp739:
    000009c6: 	movq	%r12, 0x8(%r13)
    000009ca: 	movb	$0x0, (%rdi,%r12)
    000009cf: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000009d6: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000009dd: 	addq	$0x20, %rax
    000009e1: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000009e8: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000009ef: 	je	.Ltmp586 # Offset: 2543
.Ltmp718:
    000009f5: 	movq	-0x20(%rax), %r12
    000009f9: 	callq	clock@PLT # Offset: 2553
    000009fe: 	pxor	%xmm0, %xmm0
    00000a02: 	movq	%rax, end_time(%rip)
    00000a09: 	movq	%r12, %rdi
    00000a0c: 	subq	start_time(%rip), %rax
    00000a13: 	cvtsi2sd	%rax, %xmm0
    00000a18: 	divsd	DATAat0x14308(%rip), %xmm0
    00000a20: 	callq	_Z13record_resultdPKc # Offset: 2592
    00000a25: 	movq	0xa0(%rsp), %rdi
    00000a2d: 	cmpq	0x58(%rsp), %rdi
    00000a32: 	je	.Ltmp587 # Offset: 2610
    00000a34: 	movq	0xb0(%rsp), %rax
    00000a3c: 	leaq	0x1(%rax), %rsi
    00000a40: 	callq	_ZdlPvm@PLT # Offset: 2624
.Ltmp587:
    00000a45: 	movq	0x40(%rsp), %rsi
    00000a4a: 	movq	0x18(%rsp), %rdi
    00000a4f: 	leaq	DATAat0x14244(%rip), %rdx
    00000a56: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2646
    00000a5b: 	callq	clock@PLT # Offset: 2651
    00000a60: 	movl	iterations(%rip), %edi
    00000a66: 	xorl	%r12d, %r12d
    00000a69: 	leaq	DATAat0x141e1(%rip), %r13
    00000a70: 	movq	%rax, start_time(%rip)
    00000a77: 	testl	%edi, %edi
    00000a79: 	jle	.Ltmp588 # Offset: 2681
    00000a7b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp591:
    00000a80: 	movq	0x10(%rsp), %rcx
    00000a85: 	xorl	%esi, %esi
    00000a87: 	nopw	(%rax,%rax) # Size: 9
.Ltmp589:
    00000a90: 	movl	(%rcx), %eax
    00000a92: 	xorl	%edx, %edx
    00000a94: 	addq	$0x4, %rcx
    00000a98: 	divl	%ebp
    00000a9a: 	addl	%edx, %esi
    00000a9c: 	cmpq	%rbx, %rcx
    00000a9f: 	jne	.Ltmp589 # Offset: 2719
    00000aa1: 	cvttsd2si	init_value(%rip), %rax
    00000aaa: 	xorl	%edx, %edx
    00000aac: 	divl	%ebp
    00000aae: 	imull	$0xfa0, %edx, %edx
    00000ab4: 	cmpl	%edx, %esi
    00000ab6: 	je	.Ltmp590 # Offset: 2742
    00000ab8: 	movq	0xc0(%rsp), %rdx
    00000ac0: 	movq	%r13, %rsi
    00000ac3: 	movl	$0x1, %edi
    00000ac8: 	xorl	%eax, %eax
    00000aca: 	callq	__printf_chk@PLT # Offset: 2762
    00000acf: 	movl	iterations(%rip), %edi
.Ltmp590:
    00000ad5: 	addl	$0x1, %r12d
    00000ad9: 	cmpl	%edi, %r12d
    00000adc: 	jl	.Ltmp591 # Offset: 2780
.Ltmp588:
    00000ade: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000ae5: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000aec: 	subq	$0x20, %rax
    00000af0: 	cmpq	%rax, %rdi
    00000af3: 	je	.Ltmp592 # Offset: 2803
    00000af9: 	leaq	0x10(%rdi), %rax
    00000afd: 	movq	0xc8(%rsp), %rdx
    00000b05: 	movq	%rax, (%rdi)
    00000b08: 	movq	0xc0(%rsp), %rsi
    00000b10: 	addq	%rsi, %rdx
    00000b13: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 2835
    00000b18: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000b1f: 	addq	$0x20, %rax
    00000b23: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp726:
    00000b2a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000b31: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000b38: 	je	.Ltmp593 # Offset: 2872
.Ltmp717:
    00000b3e: 	movq	-0x20(%rax), %r12
    00000b42: 	callq	clock@PLT # Offset: 2882
    00000b47: 	pxor	%xmm0, %xmm0
    00000b4b: 	movq	%rax, end_time(%rip)
    00000b52: 	movq	%r12, %rdi
    00000b55: 	subq	start_time(%rip), %rax
    00000b5c: 	cvtsi2sd	%rax, %xmm0
    00000b61: 	divsd	DATAat0x14308(%rip), %xmm0
    00000b69: 	callq	_Z13record_resultdPKc # Offset: 2921
    00000b6e: 	movq	0xc0(%rsp), %rdi
    00000b76: 	cmpq	%r15, %rdi
    00000b79: 	je	.Ltmp594 # Offset: 2937
    00000b7b: 	movq	0xd0(%rsp), %rax
    00000b83: 	leaq	0x1(%rax), %rsi
    00000b87: 	callq	_ZdlPvm@PLT # Offset: 2951
.Ltmp594:
    00000b8c: 	movq	0x80(%rsp), %r13
    00000b94: 	movq	0x88(%rsp), %r12
    00000b9c: 	movq	%r15, 0xc0(%rsp)
    00000ba4: 	movq	%r13, %rax
    00000ba7: 	addq	%r12, %rax
    00000baa: 	je	.Ltmp595 # Offset: 2986
    00000bac: 	testq	%r13, %r13
    00000baf: 	je	.Ltmp596 # Offset: 2991
.Ltmp595:
    00000bb5: 	movq	%r12, 0x78(%rsp)
    00000bba: 	cmpq	$0xf, %r12
    00000bbe: 	ja	.Ltmp597 # Offset: 3006
    00000bc4: 	cmpq	$0x1, %r12
    00000bc8: 	jne	.Ltmp598 # Offset: 3016
    00000bce: 	movzbl	(%r13), %eax
    00000bd3: 	movb	%al, 0xd0(%rsp)
    00000bda: 	movq	%r15, %rax
.Ltmp711:
    00000bdd: 	movq	%r12, 0xc8(%rsp)
    00000be5: 	movb	$0x0, (%rax,%r12)
    00000bea: 	movabsq	$0x3fffffffffffffff, %rax
    00000bf4: 	subq	0xc8(%rsp), %rax
    00000bfc: 	cmpq	$0x1a, %rax
    00000c00: 	jbe	.Ltmp599 # Offset: 3072
    00000c06: 	movq	0x18(%rsp), %rdi
    00000c0b: 	movl	$0x1b, %edx
    00000c10: 	leaq	DATAat0x14255(%rip), %rsi
    00000c17: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 3095
    00000c1c: 	callq	clock@PLT # Offset: 3100
    00000c21: 	movl	0x30(%rsp), %ecx
    00000c25: 	movq	%rax, start_time(%rip)
    00000c2c: 	testl	%ecx, %ecx
    00000c2e: 	je	.Ltmp600 # Offset: 3118
    00000c34: 	js	.Ltmp601 # Offset: 3124
    00000c3a: 	movl	$0x80000000, %eax
    00000c3f: 	xorl	%edx, %edx
    00000c41: 	nopl	(%rax) # Size: 7
.Ltmp602:
    00000c48: 	shrl	%eax
    00000c4a: 	addl	$0x1, %edx
    00000c4d: 	testl	%eax, %ecx
    00000c4f: 	je	.Ltmp602 # Offset: 3151
    00000c51: 	movl	$0x20, %esi
    00000c56: 	movl	$0x1, %eax
    00000c5b: 	subl	%edx, %esi
    00000c5d: 	movl	%esi, %ecx
    00000c5f: 	shll	%cl, %eax
.Ltmp749:
    00000c61: 	movq	0x60(%rsp), %r10
    00000c66: 	cmpl	%r10d, %eax
    00000c69: 	je	.Ltmp603 # Offset: 3177
    00000c6f: 	testl	%esi, %esi
    00000c71: 	movl	$0x1, %edi
    00000c76: 	movl	$0x0, %eax
    00000c7b: 	movl	$0x40, %ecx
    00000c80: 	cmovlel	%esi, %edi
    00000c83: 	movl	$0x1f, %esi
    00000c88: 	subl	%edx, %esi
    00000c8a: 	cmovsl	%eax, %esi
    00000c8d: 	subl	%edx, %ecx
    00000c8f: 	movl	$0x1, %eax
    00000c94: 	shlq	%cl, %rax
    00000c97: 	movl	%r10d, %ecx
    00000c9a: 	cqto
    00000c9c: 	idivq	%rcx
    00000c9f: 	addl	$0x1, %eax
    00000ca2: 	movl	%eax, 0x30(%rsp)
.Ltmp747:
    00000ca6: 	movl	iterations(%rip), %ecx
    00000cac: 	testl	%ecx, %ecx
    00000cae: 	jle	.Ltmp604 # Offset: 3246
    00000cb4: 	movd	0x30(%rsp), %xmm5
    00000cba: 	movl	%edi, %eax
    00000cbc: 	xorl	%r12d, %r12d
    00000cbf: 	movl	%esi, %r14d
    00000cc2: 	movq	%rax, 0x20(%rsp)
    00000cc7: 	leaq	DATAat0x141e1(%rip), %r13
    00000cce: 	pshufd	$0x0, %xmm5, %xmm7
    00000cd3: 	movd	%ebp, %xmm5
    00000cd7: 	movaps	%xmm7, 0x30(%rsp)
    00000cdc: 	pshufd	$0x0, %xmm5, %xmm7
    00000ce1: 	movaps	%xmm7, (%rsp)
    00000ce5: 	nopl	(%rax) # Size: 3
.Ltmp607:
    00000ce8: 	movdqa	0x30(%rsp), %xmm7
    00000cee: 	movdqa	(%rsp), %xmm4
    00000cf3: 	pxor	%xmm3, %xmm3
    00000cf7: 	movq	%r14, %xmm8
    00000cfc: 	movq	0x10(%rsp), %rax
    00000d01: 	movdqa	%xmm7, %xmm6
    00000d05: 	psrlq	$0x20, %xmm4
    00000d0a: 	movdqa	%xmm7, %xmm5
    00000d0e: 	punpckldq	%xmm7, %xmm6
    00000d12: 	punpckhdq	%xmm7, %xmm5
    00000d16: 	movq	0x20(%rsp), %xmm7
    00000d1c: 	nopl	(%rax) # Size: 4
.Ltmp605:
    00000d20: 	movdqa	(%rax), %xmm1
    00000d24: 	addq	$0x10, %rax
    00000d28: 	movdqa	%xmm1, %xmm2
    00000d2c: 	movdqa	%xmm1, %xmm0
    00000d30: 	punpckldq	%xmm1, %xmm2
    00000d34: 	punpckhdq	%xmm1, %xmm0
    00000d38: 	pmuludq	%xmm6, %xmm2
    00000d3c: 	pmuludq	%xmm5, %xmm0
    00000d40: 	psrlq	$0x20, %xmm2
    00000d45: 	psrlq	$0x20, %xmm0
    00000d4a: 	shufps	$0x88, %xmm0, %xmm2
    00000d4e: 	movdqa	%xmm1, %xmm0
    00000d52: 	psubd	%xmm2, %xmm0
    00000d56: 	psrld	%xmm7, %xmm0
    00000d5a: 	paddd	%xmm2, %xmm0
    00000d5e: 	movdqa	(%rsp), %xmm2
    00000d63: 	psrld	%xmm8, %xmm0
    00000d68: 	pmuludq	%xmm0, %xmm2
    00000d6c: 	psrlq	$0x20, %xmm0
    00000d71: 	pmuludq	%xmm4, %xmm0
    00000d75: 	pshufd	$0x8, %xmm2, %xmm2
    00000d7a: 	pshufd	$0x8, %xmm0, %xmm0
    00000d7f: 	punpckldq	%xmm0, %xmm2
    00000d83: 	psubd	%xmm2, %xmm1
    00000d87: 	paddd	%xmm1, %xmm3
    00000d8b: 	cmpq	%rax, %rbx
    00000d8e: 	jne	.Ltmp605 # Offset: 3470
    00000d90: 	cvttsd2si	init_value(%rip), %rax
    00000d99: 	movdqa	%xmm3, %xmm0
    00000d9d: 	movq	%xmm8, %r14
    00000da2: 	xorl	%edx, %edx
    00000da4: 	psrldq	$0x8, %xmm0
    00000da9: 	paddd	%xmm0, %xmm3
    00000dad: 	movdqa	%xmm3, %xmm0
    00000db1: 	divl	%ebp
    00000db3: 	psrldq	$0x4, %xmm0
    00000db8: 	paddd	%xmm0, %xmm3
    00000dbc: 	movd	%xmm3, %eax
    00000dc0: 	imull	$0xfa0, %edx, %edx
    00000dc6: 	cmpl	%eax, %edx
    00000dc8: 	je	.Ltmp606 # Offset: 3528
    00000dca: 	movq	0xc0(%rsp), %rdx
    00000dd2: 	movq	%r13, %rsi
    00000dd5: 	movl	$0x1, %edi
    00000dda: 	xorl	%eax, %eax
    00000ddc: 	callq	__printf_chk@PLT # Offset: 3548
    00000de1: 	movl	iterations(%rip), %ecx
.Ltmp606:
    00000de7: 	addl	$0x1, %r12d
    00000deb: 	cmpl	%ecx, %r12d
    00000dee: 	jl	.Ltmp607 # Offset: 3566
.Ltmp604:
    00000df4: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000dfb: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000e02: 	subq	$0x20, %rax
    00000e06: 	cmpq	%rax, %rdi
    00000e09: 	je	.Ltmp608 # Offset: 3593
    00000e0f: 	leaq	0x10(%rdi), %rax
    00000e13: 	movq	0xc8(%rsp), %rdx
    00000e1b: 	movq	%rax, (%rdi)
    00000e1e: 	movq	0xc0(%rsp), %rsi
    00000e26: 	addq	%rsi, %rdx
    00000e29: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 3625
    00000e2e: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000e35: 	addq	$0x20, %rax
    00000e39: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp730:
    00000e40: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000e47: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000e4e: 	je	.Ltmp609 # Offset: 3662
.Ltmp729:
    00000e54: 	movq	-0x20(%rax), %r12
    00000e58: 	callq	clock@PLT # Offset: 3672
    00000e5d: 	pxor	%xmm0, %xmm0
    00000e61: 	movq	%rax, end_time(%rip)
    00000e68: 	movq	%r12, %rdi
    00000e6b: 	subq	start_time(%rip), %rax
    00000e72: 	cvtsi2sd	%rax, %xmm0
    00000e77: 	divsd	DATAat0x14308(%rip), %xmm0
    00000e7f: 	callq	_Z13record_resultdPKc # Offset: 3711
    00000e84: 	movq	0xc0(%rsp), %rdi
    00000e8c: 	cmpq	%r15, %rdi
    00000e8f: 	je	.Ltmp610 # Offset: 3727
    00000e91: 	movq	0xd0(%rsp), %rax
    00000e99: 	leaq	0x1(%rax), %rsi
    00000e9d: 	callq	_ZdlPvm@PLT # Offset: 3741
.Ltmp610:
    00000ea2: 	movq	0x40(%rsp), %rsi
    00000ea7: 	movq	0x50(%rsp), %rdi
    00000eac: 	leaq	DATAat0x14271(%rip), %rdx
    00000eb3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3763
    00000eb8: 	callq	clock@PLT # Offset: 3768
    00000ebd: 	movl	iterations(%rip), %esi
    00000ec3: 	movq	%rax, start_time(%rip)
    00000eca: 	testl	%esi, %esi
    00000ecc: 	jle	.Ltmp611 # Offset: 3788
    00000ed2: 	movdqa	DATAat0x143a0(%rip), %xmm7
    00000eda: 	xorl	%r12d, %r12d
    00000edd: 	movaps	%xmm7, (%rsp)
    00000ee1: 	nopl	(%rax) # Size: 7
.Ltmp619:
    00000ee8: 	movq	0x10(%rsp), %rax
    00000eed: 	pxor	%xmm3, %xmm3
    00000ef1: 	nopl	(%rax) # Size: 7
.Ltmp612:
    00000ef8: 	movdqa	(%rax), %xmm2
    00000efc: 	movdqa	(%rsp), %xmm6
    00000f01: 	addq	$0x10, %rax
    00000f05: 	movdqa	%xmm2, %xmm1
    00000f09: 	psrld	$0x3, %xmm1
    00000f0e: 	movdqa	%xmm1, %xmm0
    00000f12: 	punpckldq	%xmm1, %xmm0
    00000f16: 	punpckhdq	%xmm1, %xmm1
    00000f1a: 	pmuludq	%xmm6, %xmm1
    00000f1e: 	pmuludq	%xmm6, %xmm0
    00000f22: 	shufps	$0xdd, %xmm1, %xmm0
    00000f26: 	psrld	$0x2, %xmm0
    00000f2b: 	movdqa	%xmm0, %xmm1
    00000f2f: 	pslld	$0x1, %xmm1
    00000f34: 	paddd	%xmm0, %xmm1
    00000f38: 	movdqa	%xmm1, %xmm0
    00000f3c: 	pslld	$0x4, %xmm0
    00000f41: 	psubd	%xmm1, %xmm0
    00000f45: 	pslld	$0x3, %xmm0
    00000f4a: 	psubd	%xmm0, %xmm2
    00000f4e: 	paddd	%xmm2, %xmm3
    00000f52: 	cmpq	%rbx, %rax
    00000f55: 	jne	.Ltmp612 # Offset: 3925
    00000f57: 	movdqa	%xmm3, %xmm0
    00000f5b: 	movq	0xa0(%rsp), %r14
    00000f63: 	movq	0xa8(%rsp), %r13
    00000f6b: 	movq	%r15, 0xc0(%rsp)
    00000f73: 	psrldq	$0x8, %xmm0
    00000f78: 	paddd	%xmm0, %xmm3
    00000f7c: 	movq	%r14, %rax
    00000f7f: 	movdqa	%xmm3, %xmm0
    00000f83: 	addq	%r13, %rax
    00000f86: 	psrldq	$0x4, %xmm0
    00000f8b: 	paddd	%xmm0, %xmm3
    00000f8f: 	movd	%xmm3, 0x20(%rsp)
    00000f95: 	je	.Ltmp613 # Offset: 3989
    00000f97: 	testq	%r14, %r14
    00000f9a: 	je	.Ltmp614 # Offset: 3994
.Ltmp613:
    00000fa0: 	movq	%r13, 0x78(%rsp)
    00000fa5: 	cmpq	$0xf, %r13
    00000fa9: 	ja	.Ltmp615 # Offset: 4009
    00000faf: 	cmpq	$0x1, %r13
    00000fb3: 	jne	.Ltmp616 # Offset: 4019
    00000fb9: 	movzbl	(%r14), %eax
    00000fbd: 	movb	%al, 0xd0(%rsp)
    00000fc4: 	movq	%r15, %rax
.Ltmp703:
    00000fc7: 	movq	%r13, 0xc8(%rsp)
    00000fcf: 	movb	$0x0, (%rax,%r13)
    00000fd4: 	cvttsd2si	init_value(%rip), %rdx
    00000fdd: 	movl	%edx, %eax
    00000fdf: 	shrl	$0x3, %eax
    00000fe2: 	imulq	$0x16c16c17, %rax, %rax
    00000fe9: 	shrq	$0x22, %rax
    00000fed: 	imull	$0x168, %eax, %eax
    00000ff3: 	subl	%eax, %edx
    00000ff5: 	imull	$0xfa0, %edx, %edx
    00000ffb: 	cmpl	0x20(%rsp), %edx
    00000fff: 	je	.Ltmp617 # Offset: 4095
    00001001: 	movq	0xc0(%rsp), %rdx
    00001009: 	leaq	DATAat0x141e1(%rip), %rsi
    00001010: 	movl	$0x1, %edi
    00001015: 	xorl	%eax, %eax
    00001017: 	callq	__printf_chk@PLT # Offset: 4119
.Ltmp617:
    0000101c: 	movq	0xc0(%rsp), %rdi
    00001024: 	cmpq	%r15, %rdi
    00001027: 	je	.Ltmp618 # Offset: 4135
    0000102d: 	movq	0xd0(%rsp), %rax
    00001035: 	addl	$0x1, %r12d
    00001039: 	leaq	0x1(%rax), %rsi
    0000103d: 	callq	_ZdlPvm@PLT # Offset: 4157
    00001042: 	cmpl	iterations(%rip), %r12d
    00001049: 	jl	.Ltmp619 # Offset: 4169
.Ltmp611:
    0000104f: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001056: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    0000105d: 	subq	$0x20, %rax
    00001061: 	cmpq	%rax, %rdi
    00001064: 	je	.Ltmp620 # Offset: 4196
    0000106a: 	leaq	0x10(%rdi), %rax
    0000106e: 	movq	0xa8(%rsp), %rdx
    00001076: 	movq	%rax, (%rdi)
    00001079: 	movq	0xa0(%rsp), %rsi
    00001081: 	addq	%rsi, %rdx
    00001084: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 4228
    00001089: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001090: 	addq	$0x20, %rax
    00001094: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp728:
    0000109b: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000010a2: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000010a9: 	je	.Ltmp621 # Offset: 4265
.Ltmp727:
    000010af: 	movq	-0x20(%rax), %r12
    000010b3: 	callq	clock@PLT # Offset: 4275
    000010b8: 	pxor	%xmm0, %xmm0
    000010bc: 	movq	%rax, end_time(%rip)
    000010c3: 	movq	%r12, %rdi
    000010c6: 	subq	start_time(%rip), %rax
    000010cd: 	cvtsi2sd	%rax, %xmm0
    000010d2: 	divsd	DATAat0x14308(%rip), %xmm0
    000010da: 	callq	_Z13record_resultdPKc # Offset: 4314
    000010df: 	movq	0xa0(%rsp), %rdi
    000010e7: 	cmpq	0x58(%rsp), %rdi
    000010ec: 	je	.Ltmp622 # Offset: 4332
    000010ee: 	movq	0xb0(%rsp), %rax
    000010f6: 	leaq	0x1(%rax), %rsi
    000010fa: 	callq	_ZdlPvm@PLT # Offset: 4346
.Ltmp622:
    000010ff: 	movq	0x40(%rsp), %rsi
    00001104: 	movq	0x50(%rsp), %rdi
    00001109: 	leaq	DATAat0x14282(%rip), %rdx
    00001110: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4368
    00001115: 	callq	clock@PLT # Offset: 4373
    0000111a: 	movl	iterations(%rip), %ecx
    00001120: 	movq	%rax, start_time(%rip)
    00001127: 	testl	%ecx, %ecx
    00001129: 	jle	.Ltmp623 # Offset: 4393
    0000112f: 	movdqa	DATAat0x143a0(%rip), %xmm5
    00001137: 	xorl	%r12d, %r12d
    0000113a: 	movaps	%xmm5, (%rsp)
    0000113e: 	nop # Size: 2
.Ltmp631:
    00001140: 	movq	0x10(%rsp), %rax
    00001145: 	pxor	%xmm3, %xmm3
    00001149: 	nopl	(%rax) # Size: 7
.Ltmp624:
    00001150: 	movdqa	(%rax), %xmm2
    00001154: 	movdqa	(%rsp), %xmm7
    00001159: 	addq	$0x10, %rax
    0000115d: 	movdqa	%xmm2, %xmm1
    00001161: 	psrld	$0x3, %xmm1
    00001166: 	movdqa	%xmm1, %xmm0
    0000116a: 	punpckldq	%xmm1, %xmm0
    0000116e: 	punpckhdq	%xmm1, %xmm1
    00001172: 	pmuludq	%xmm7, %xmm0
    00001176: 	pmuludq	%xmm7, %xmm1
    0000117a: 	psrlq	$0x20, %xmm0
    0000117f: 	psrlq	$0x20, %xmm1
    00001184: 	shufps	$0x88, %xmm1, %xmm0
    00001188: 	psrld	$0x2, %xmm0
    0000118d: 	movdqa	%xmm0, %xmm1
    00001191: 	pslld	$0x1, %xmm1
    00001196: 	paddd	%xmm0, %xmm1
    0000119a: 	movdqa	%xmm1, %xmm0
    0000119e: 	pslld	$0x4, %xmm0
    000011a3: 	psubd	%xmm1, %xmm0
    000011a7: 	pslld	$0x3, %xmm0
    000011ac: 	psubd	%xmm0, %xmm2
    000011b0: 	paddd	%xmm2, %xmm3
    000011b4: 	cmpq	%rbx, %rax
    000011b7: 	jne	.Ltmp624 # Offset: 4535
    000011b9: 	movdqa	%xmm3, %xmm0
    000011bd: 	movq	0xa0(%rsp), %r14
    000011c5: 	movq	0xa8(%rsp), %r13
    000011cd: 	movq	%r15, 0xc0(%rsp)
    000011d5: 	psrldq	$0x8, %xmm0
    000011da: 	paddd	%xmm0, %xmm3
    000011de: 	movq	%r14, %rax
    000011e1: 	movdqa	%xmm3, %xmm0
    000011e5: 	addq	%r13, %rax
    000011e8: 	psrldq	$0x4, %xmm0
    000011ed: 	paddd	%xmm0, %xmm3
    000011f1: 	movd	%xmm3, 0x20(%rsp)
    000011f7: 	je	.Ltmp625 # Offset: 4599
    000011f9: 	testq	%r14, %r14
    000011fc: 	je	.Ltmp626 # Offset: 4604
.Ltmp625:
    00001202: 	movq	%r13, 0x78(%rsp)
    00001207: 	cmpq	$0xf, %r13
    0000120b: 	ja	.Ltmp627 # Offset: 4619
    00001211: 	cmpq	$0x1, %r13
    00001215: 	jne	.Ltmp628 # Offset: 4629
    0000121b: 	movzbl	(%r14), %eax
    0000121f: 	movb	%al, 0xd0(%rsp)
    00001226: 	movq	%r15, %rax
.Ltmp705:
    00001229: 	movq	%r13, 0xc8(%rsp)
    00001231: 	movb	$0x0, (%rax,%r13)
    00001236: 	cvttsd2si	init_value(%rip), %rdx
    0000123f: 	movl	%edx, %eax
    00001241: 	shrl	$0x3, %eax
    00001244: 	imulq	$0x16c16c17, %rax, %rax
    0000124b: 	shrq	$0x22, %rax
    0000124f: 	imull	$0x168, %eax, %eax
    00001255: 	subl	%eax, %edx
    00001257: 	imull	$0xfa0, %edx, %edx
    0000125d: 	cmpl	0x20(%rsp), %edx
    00001261: 	je	.Ltmp629 # Offset: 4705
    00001263: 	movq	0xc0(%rsp), %rdx
    0000126b: 	leaq	DATAat0x141e1(%rip), %rsi
    00001272: 	movl	$0x1, %edi
    00001277: 	xorl	%eax, %eax
    00001279: 	callq	__printf_chk@PLT # Offset: 4729
.Ltmp629:
    0000127e: 	movq	0xc0(%rsp), %rdi
    00001286: 	cmpq	%r15, %rdi
    00001289: 	je	.Ltmp630 # Offset: 4745
    0000128f: 	movq	0xd0(%rsp), %rax
    00001297: 	addl	$0x1, %r12d
    0000129b: 	leaq	0x1(%rax), %rsi
    0000129f: 	callq	_ZdlPvm@PLT # Offset: 4767
    000012a4: 	cmpl	iterations(%rip), %r12d
    000012ab: 	jl	.Ltmp631 # Offset: 4779
.Ltmp623:
    000012b1: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000012b8: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000012bf: 	subq	$0x20, %rax
    000012c3: 	cmpq	%rax, %rdi
    000012c6: 	je	.Ltmp632 # Offset: 4806
    000012cc: 	leaq	0x10(%rdi), %rax
    000012d0: 	movq	0xa8(%rsp), %rdx
    000012d8: 	movq	%rax, (%rdi)
    000012db: 	movq	0xa0(%rsp), %rsi
    000012e3: 	addq	%rsi, %rdx
    000012e6: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 4838
    000012eb: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000012f2: 	addq	$0x20, %rax
    000012f6: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp723:
    000012fd: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001304: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000130b: 	je	.Ltmp633 # Offset: 4875
.Ltmp722:
    00001311: 	movq	-0x20(%rax), %r12
    00001315: 	callq	clock@PLT # Offset: 4885
    0000131a: 	pxor	%xmm0, %xmm0
    0000131e: 	movq	%rax, end_time(%rip)
    00001325: 	movq	%r12, %rdi
    00001328: 	subq	start_time(%rip), %rax
    0000132f: 	cvtsi2sd	%rax, %xmm0
    00001334: 	divsd	DATAat0x14308(%rip), %xmm0
    0000133c: 	callq	_Z13record_resultdPKc # Offset: 4924
    00001341: 	movq	0xa0(%rsp), %rdi
    00001349: 	cmpq	0x58(%rsp), %rdi
    0000134e: 	je	.Ltmp634 # Offset: 4942
    00001350: 	movq	0xb0(%rsp), %rax
    00001358: 	leaq	0x1(%rax), %rsi
    0000135c: 	callq	_ZdlPvm@PLT # Offset: 4956
.Ltmp634:
    00001361: 	movq	0x40(%rsp), %rsi
    00001366: 	movq	0x18(%rsp), %rdi
    0000136b: 	leaq	DATAat0x1429e(%rip), %rdx
    00001372: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4978
    00001377: 	callq	clock@PLT # Offset: 4983
    0000137c: 	movl	iterations(%rip), %edi
    00001382: 	xorl	%r12d, %r12d
    00001385: 	leaq	DATAat0x141e1(%rip), %r13
    0000138c: 	movq	%rax, start_time(%rip)
    00001393: 	testl	%edi, %edi
    00001395: 	jle	.Ltmp635 # Offset: 5013
    00001397: 	nopw	(%rax,%rax) # Size: 9
.Ltmp638:
    000013a0: 	movq	0x10(%rsp), %rcx
    000013a5: 	xorl	%esi, %esi
    000013a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp636:
    000013b0: 	movl	(%rcx), %eax
    000013b2: 	xorl	%edx, %edx
    000013b4: 	addq	$0x4, %rcx
    000013b8: 	divl	%ebp
    000013ba: 	addl	%edx, %eax
    000013bc: 	addl	%eax, %esi
    000013be: 	cmpq	%rcx, %rbx
    000013c1: 	jne	.Ltmp636 # Offset: 5057
    000013c3: 	cvttsd2si	init_value(%rip), %rax
    000013cc: 	xorl	%edx, %edx
    000013ce: 	divl	%ebp
    000013d0: 	addl	%edx, %eax
    000013d2: 	imull	$0xfa0, %eax, %eax
    000013d8: 	cmpl	%eax, %esi
    000013da: 	je	.Ltmp637 # Offset: 5082
    000013dc: 	movq	0xc0(%rsp), %rdx
    000013e4: 	movq	%r13, %rsi
    000013e7: 	movl	$0x1, %edi
    000013ec: 	xorl	%eax, %eax
    000013ee: 	callq	__printf_chk@PLT # Offset: 5102
    000013f3: 	movl	iterations(%rip), %edi
.Ltmp637:
    000013f9: 	addl	$0x1, %r12d
    000013fd: 	cmpl	%edi, %r12d
    00001400: 	jl	.Ltmp638 # Offset: 5120
.Ltmp635:
    00001402: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001409: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00001410: 	subq	$0x20, %rax
    00001414: 	cmpq	%rax, %rdi
    00001417: 	je	.Ltmp639 # Offset: 5143
    0000141d: 	leaq	0x10(%rdi), %rax
    00001421: 	movq	0xc8(%rsp), %rdx
    00001429: 	movq	%rax, (%rdi)
    0000142c: 	movq	0xc0(%rsp), %rsi
    00001434: 	addq	%rsi, %rdx
    00001437: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 5175
    0000143c: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001443: 	addq	$0x20, %rax
    00001447: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp725:
    0000144e: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001455: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000145c: 	je	.Ltmp640 # Offset: 5212
.Ltmp724:
    00001462: 	movq	-0x20(%rax), %rbp
    00001466: 	callq	clock@PLT # Offset: 5222
    0000146b: 	pxor	%xmm0, %xmm0
    0000146f: 	movq	%rax, end_time(%rip)
    00001476: 	movq	%rbp, %rdi
    00001479: 	subq	start_time(%rip), %rax
    00001480: 	cvtsi2sd	%rax, %xmm0
    00001485: 	divsd	DATAat0x14308(%rip), %xmm0
    0000148d: 	callq	_Z13record_resultdPKc # Offset: 5261
    00001492: 	movq	0xc0(%rsp), %rdi
    0000149a: 	cmpq	%r15, %rdi
    0000149d: 	je	.Ltmp641 # Offset: 5277
    0000149f: 	movq	0xd0(%rsp), %rax
    000014a7: 	leaq	0x1(%rax), %rsi
    000014ab: 	callq	_ZdlPvm@PLT # Offset: 5291
.Ltmp641:
    000014b0: 	movq	0x40(%rsp), %rsi
    000014b5: 	movq	0x50(%rsp), %rdi
    000014ba: 	leaq	DATAat0x142d0(%rip), %rdx
    000014c1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5313
    000014c6: 	callq	clock@PLT # Offset: 5318
    000014cb: 	movl	iterations(%rip), %edx
    000014d1: 	movq	%rax, start_time(%rip)
    000014d8: 	testl	%edx, %edx
    000014da: 	jle	.Ltmp642 # Offset: 5338
    000014e0: 	movdqa	DATAat0x143a0(%rip), %xmm7
    000014e8: 	xorl	%r14d, %r14d
    000014eb: 	movaps	%xmm7, (%rsp)
    000014ef: 	nop # Size: 1
.Ltmp650:
    000014f0: 	movq	0x10(%rsp), %rax
    000014f5: 	pxor	%xmm2, %xmm2
    000014f9: 	nopl	(%rax) # Size: 7
.Ltmp643:
    00001500: 	movdqa	(%rax), %xmm1
    00001504: 	movdqa	(%rsp), %xmm6
    00001509: 	addq	$0x10, %rax
    0000150d: 	psrld	$0x3, %xmm1
    00001512: 	movdqa	%xmm1, %xmm0
    00001516: 	punpckldq	%xmm1, %xmm0
    0000151a: 	punpckhdq	%xmm1, %xmm1
    0000151e: 	pmuludq	%xmm6, %xmm0
    00001522: 	pmuludq	%xmm6, %xmm1
    00001526: 	psrlq	$0x20, %xmm0
    0000152b: 	psrlq	$0x20, %xmm1
    00001530: 	shufps	$0x88, %xmm1, %xmm0
    00001534: 	psrld	$0x2, %xmm0
    00001539: 	movdqa	%xmm0, %xmm3
    0000153d: 	pslld	$0x1, %xmm3
    00001542: 	paddd	%xmm0, %xmm3
    00001546: 	paddd	-0x10(%rax), %xmm0
    0000154b: 	movdqa	%xmm3, %xmm1
    0000154f: 	pslld	$0x4, %xmm1
    00001554: 	psubd	%xmm3, %xmm1
    00001558: 	pslld	$0x3, %xmm1
    0000155d: 	psubd	%xmm1, %xmm2
    00001561: 	paddd	%xmm0, %xmm2
    00001565: 	cmpq	%rbx, %rax
    00001568: 	jne	.Ltmp643 # Offset: 5480
    0000156a: 	movdqa	%xmm2, %xmm0
    0000156e: 	movq	0xa0(%rsp), %r13
    00001576: 	movq	0xa8(%rsp), %r12
    0000157e: 	movq	%r15, 0xc0(%rsp)
    00001586: 	psrldq	$0x8, %xmm0
    0000158b: 	paddd	%xmm0, %xmm2
    0000158f: 	movq	%r13, %rax
    00001592: 	movdqa	%xmm2, %xmm0
    00001596: 	addq	%r12, %rax
    00001599: 	psrldq	$0x4, %xmm0
    0000159e: 	paddd	%xmm0, %xmm2
    000015a2: 	movd	%xmm2, %ebp
    000015a6: 	je	.Ltmp644 # Offset: 5542
    000015a8: 	testq	%r13, %r13
    000015ab: 	je	.Ltmp645 # Offset: 5547
.Ltmp644:
    000015b1: 	movq	%r12, 0x78(%rsp)
    000015b6: 	cmpq	$0xf, %r12
    000015ba: 	ja	.Ltmp646 # Offset: 5562
    000015c0: 	cmpq	$0x1, %r12
    000015c4: 	jne	.Ltmp647 # Offset: 5572
    000015ca: 	movzbl	(%r13), %eax
    000015cf: 	movb	%al, 0xd0(%rsp)
    000015d6: 	movq	%r15, %rax
.Ltmp707:
    000015d9: 	movq	%r12, 0xc8(%rsp)
    000015e1: 	movb	$0x0, (%rax,%r12)
    000015e6: 	cvttsd2si	init_value(%rip), %rdx
    000015ef: 	movl	%edx, %eax
    000015f1: 	shrl	$0x3, %eax
    000015f4: 	imulq	$0x16c16c17, %rax, %rax
    000015fb: 	shrq	$0x22, %rax
    000015ff: 	imull	$0xfffffe99, %eax, %eax
    00001605: 	addl	%edx, %eax
    00001607: 	imull	$0xfa0, %eax, %eax
    0000160d: 	cmpl	%ebp, %eax
    0000160f: 	je	.Ltmp648 # Offset: 5647
    00001611: 	movq	0xc0(%rsp), %rdx
    00001619: 	leaq	DATAat0x141e1(%rip), %rsi
    00001620: 	movl	$0x1, %edi
    00001625: 	xorl	%eax, %eax
    00001627: 	callq	__printf_chk@PLT # Offset: 5671
.Ltmp648:
    0000162c: 	movq	0xc0(%rsp), %rdi
    00001634: 	cmpq	%r15, %rdi
    00001637: 	je	.Ltmp649 # Offset: 5687
    0000163d: 	movq	0xd0(%rsp), %rax
    00001645: 	addl	$0x1, %r14d
    00001649: 	leaq	0x1(%rax), %rsi
    0000164d: 	callq	_ZdlPvm@PLT # Offset: 5709
    00001652: 	cmpl	iterations(%rip), %r14d
    00001659: 	jl	.Ltmp650 # Offset: 5721
.Ltmp642:
    0000165f: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001666: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    0000166d: 	subq	$0x20, %rax
    00001671: 	cmpq	%rax, %rbp
    00001674: 	je	.Ltmp651 # Offset: 5748
    0000167a: 	leaq	0x10(%rbp), %rdi
    0000167e: 	movq	0xa8(%rsp), %r12
    00001686: 	movq	%rdi, (%rbp)
    0000168a: 	movq	0xa0(%rsp), %r13
    00001692: 	movq	%r13, %rax
    00001695: 	addq	%r12, %rax
    00001698: 	je	.Ltmp652 # Offset: 5784
    0000169a: 	testq	%r13, %r13
    0000169d: 	je	.Ltmp653 # Offset: 5789
.Ltmp652:
    000016a3: 	movq	%r12, 0x78(%rsp)
    000016a8: 	cmpq	$0xf, %r12
    000016ac: 	ja	.Ltmp654 # Offset: 5804
    000016b2: 	cmpq	$0x1, %r12
    000016b6: 	jne	.Ltmp655 # Offset: 5814
    000016bc: 	movzbl	(%r13), %eax
    000016c1: 	movb	%al, 0x10(%rbp)
.Ltmp737:
    000016c4: 	movq	%r12, 0x8(%rbp)
    000016c8: 	movb	$0x0, (%rdi,%r12)
    000016cd: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000016d4: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000016db: 	addq	$0x20, %rax
    000016df: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000016e6: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000016ed: 	je	.Ltmp656 # Offset: 5869
.Ltmp731:
    000016f3: 	movq	-0x20(%rax), %rbp
    000016f7: 	callq	clock@PLT # Offset: 5879
    000016fc: 	pxor	%xmm0, %xmm0
    00001700: 	movq	%rax, end_time(%rip)
    00001707: 	movq	%rbp, %rdi
    0000170a: 	subq	start_time(%rip), %rax
    00001711: 	cvtsi2sd	%rax, %xmm0
    00001716: 	divsd	DATAat0x14308(%rip), %xmm0
    0000171e: 	callq	_Z13record_resultdPKc # Offset: 5918
    00001723: 	movq	0xa0(%rsp), %rdi
    0000172b: 	cmpq	0x58(%rsp), %rdi
    00001730: 	je	.Ltmp657 # Offset: 5936
    00001732: 	movq	0xb0(%rsp), %rax
    0000173a: 	leaq	0x1(%rax), %rsi
    0000173e: 	callq	_ZdlPvm@PLT # Offset: 5950
.Ltmp657:
    00001743: 	movq	0x40(%rsp), %rsi
    00001748: 	movq	0x50(%rsp), %rdi
    0000174d: 	leaq	DATAat0x142b5(%rip), %rdx
    00001754: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5972
    00001759: 	callq	clock@PLT # Offset: 5977
    0000175e: 	movq	%rax, start_time(%rip)
    00001765: 	movl	iterations(%rip), %eax
    0000176b: 	testl	%eax, %eax
    0000176d: 	jle	.Ltmp658 # Offset: 5997
    00001773: 	movdqa	DATAat0x143a0(%rip), %xmm5
    0000177b: 	xorl	%r14d, %r14d
    0000177e: 	movaps	%xmm5, (%rsp)
    00001782: 	nopw	(%rax,%rax) # Size: 6
.Ltmp666:
    00001788: 	movq	0x10(%rsp), %rax
    0000178d: 	pxor	%xmm2, %xmm2
    00001791: 	nopl	(%rax) # Size: 7
.Ltmp659:
    00001798: 	movdqa	(%rax), %xmm1
    0000179c: 	movdqa	(%rsp), %xmm4
    000017a1: 	addq	$0x10, %rax
    000017a5: 	psrld	$0x3, %xmm1
    000017aa: 	movdqa	%xmm1, %xmm0
    000017ae: 	punpckldq	%xmm1, %xmm0
    000017b2: 	punpckhdq	%xmm1, %xmm1
    000017b6: 	pmuludq	%xmm4, %xmm1
    000017ba: 	pmuludq	%xmm4, %xmm0
    000017be: 	shufps	$0xdd, %xmm1, %xmm0
    000017c2: 	psrld	$0x2, %xmm0
    000017c7: 	movdqa	%xmm0, %xmm3
    000017cb: 	pslld	$0x1, %xmm3
    000017d0: 	paddd	%xmm0, %xmm3
    000017d4: 	paddd	-0x10(%rax), %xmm0
    000017d9: 	movdqa	%xmm3, %xmm1
    000017dd: 	pslld	$0x4, %xmm1
    000017e2: 	psubd	%xmm3, %xmm1
    000017e6: 	pslld	$0x3, %xmm1
    000017eb: 	psubd	%xmm1, %xmm2
    000017ef: 	paddd	%xmm0, %xmm2
    000017f3: 	cmpq	%rbx, %rax
    000017f6: 	jne	.Ltmp659 # Offset: 6134
    000017f8: 	movdqa	%xmm2, %xmm0
    000017fc: 	movq	0xa0(%rsp), %r13
    00001804: 	movq	0xa8(%rsp), %r12
    0000180c: 	movq	%r15, 0xc0(%rsp)
    00001814: 	psrldq	$0x8, %xmm0
    00001819: 	paddd	%xmm0, %xmm2
    0000181d: 	movq	%r13, %rax
    00001820: 	movdqa	%xmm2, %xmm0
    00001824: 	addq	%r12, %rax
    00001827: 	psrldq	$0x4, %xmm0
    0000182c: 	paddd	%xmm0, %xmm2
    00001830: 	movd	%xmm2, %ebp
    00001834: 	je	.Ltmp660 # Offset: 6196
    00001836: 	testq	%r13, %r13
    00001839: 	je	.Ltmp661 # Offset: 6201
.Ltmp660:
    0000183f: 	movq	%r12, 0x78(%rsp)
    00001844: 	cmpq	$0xf, %r12
    00001848: 	ja	.Ltmp662 # Offset: 6216
    0000184e: 	cmpq	$0x1, %r12
    00001852: 	jne	.Ltmp663 # Offset: 6226
    00001858: 	movzbl	(%r13), %eax
    0000185d: 	movb	%al, 0xd0(%rsp)
    00001864: 	movq	%r15, %rax
.Ltmp709:
    00001867: 	movq	%r12, 0xc8(%rsp)
    0000186f: 	movb	$0x0, (%rax,%r12)
    00001874: 	cvttsd2si	init_value(%rip), %rdx
    0000187d: 	movl	%edx, %eax
    0000187f: 	shrl	$0x3, %eax
    00001882: 	imulq	$0x16c16c17, %rax, %rax
    00001889: 	shrq	$0x22, %rax
    0000188d: 	imull	$0xfffffe99, %eax, %eax
    00001893: 	addl	%edx, %eax
    00001895: 	imull	$0xfa0, %eax, %eax
    0000189b: 	cmpl	%ebp, %eax
    0000189d: 	je	.Ltmp664 # Offset: 6301
    0000189f: 	movq	0xc0(%rsp), %rdx
    000018a7: 	leaq	DATAat0x141e1(%rip), %rsi
    000018ae: 	movl	$0x1, %edi
    000018b3: 	xorl	%eax, %eax
    000018b5: 	callq	__printf_chk@PLT # Offset: 6325
.Ltmp664:
    000018ba: 	movq	0xc0(%rsp), %rdi
    000018c2: 	cmpq	%r15, %rdi
    000018c5: 	je	.Ltmp665 # Offset: 6341
    000018cb: 	movq	0xd0(%rsp), %rax
    000018d3: 	addl	$0x1, %r14d
    000018d7: 	leaq	0x1(%rax), %rsi
    000018db: 	callq	_ZdlPvm@PLT # Offset: 6363
    000018e0: 	cmpl	iterations(%rip), %r14d
    000018e7: 	jl	.Ltmp666 # Offset: 6375
.Ltmp658:
    000018ed: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000018f4: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    000018fb: 	subq	$0x20, %rax
    000018ff: 	cmpq	%rax, %rbx
    00001902: 	je	.Ltmp667 # Offset: 6402
    00001908: 	leaq	0x10(%rbx), %rdi
    0000190c: 	movq	0xa8(%rsp), %r12
    00001914: 	movq	%rdi, (%rbx)
    00001917: 	movq	0xa0(%rsp), %rbp
    0000191f: 	movq	%rbp, %rax
    00001922: 	addq	%r12, %rax
    00001925: 	je	.Ltmp668 # Offset: 6437
    00001927: 	testq	%rbp, %rbp
    0000192a: 	je	.Ltmp669 # Offset: 6442
.Ltmp668:
    00001930: 	movq	%r12, 0x78(%rsp)
    00001935: 	cmpq	$0xf, %r12
    00001939: 	ja	.Ltmp670 # Offset: 6457
    0000193f: 	cmpq	$0x1, %r12
    00001943: 	jne	.Ltmp671 # Offset: 6467
    00001949: 	movzbl	(%rbp), %eax
    0000194d: 	movb	%al, 0x10(%rbx)
.Ltmp743:
    00001950: 	movq	%r12, 0x8(%rbx)
    00001954: 	movb	$0x0, (%rdi,%r12)
    00001959: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001960: 	addq	$0x20, %rax
    00001964: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp736:
    0000196b: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001972: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001979: 	je	.Ltmp672 # Offset: 6521
.Ltmp732:
    0000197f: 	movq	-0x20(%rax), %rbp
    00001983: 	callq	clock@PLT # Offset: 6531
    00001988: 	pxor	%xmm0, %xmm0
    0000198c: 	movq	%rax, end_time(%rip)
    00001993: 	movq	%rbp, %rdi
    00001996: 	subq	start_time(%rip), %rax
    0000199d: 	cvtsi2sd	%rax, %xmm0
    000019a2: 	divsd	DATAat0x14308(%rip), %xmm0
    000019aa: 	callq	_Z13record_resultdPKc # Offset: 6570
    000019af: 	movq	0xa0(%rsp), %rdi
    000019b7: 	cmpq	0x58(%rsp), %rdi
    000019bc: 	je	.Ltmp673 # Offset: 6588
    000019be: 	movq	0xb0(%rsp), %rax
    000019c6: 	leaq	0x1(%rax), %rsi
    000019ca: 	callq	_ZdlPvm@PLT # Offset: 6602
.Ltmp673:
    000019cf: 	movq	0x80(%rsp), %rbp
    000019d7: 	movq	0x88(%rsp), %r12
    000019df: 	movq	%r15, 0xc0(%rsp)
    000019e7: 	movq	%rbp, %rax
    000019ea: 	addq	%r12, %rax
    000019ed: 	je	.Ltmp674 # Offset: 6637
    000019ef: 	testq	%rbp, %rbp
    000019f2: 	je	.Ltmp675 # Offset: 6642
.Ltmp674:
    000019f8: 	movq	%r12, 0x78(%rsp)
    000019fd: 	cmpq	$0xf, %r12
    00001a01: 	ja	.Ltmp676 # Offset: 6657
    00001a07: 	cmpq	$0x1, %r12
    00001a0b: 	jne	.Ltmp677 # Offset: 6667
    00001a11: 	movzbl	(%rbp), %eax
    00001a15: 	movb	%al, 0xd0(%rsp)
    00001a1c: 	movq	%r15, %rax
.Ltmp715:
    00001a1f: 	movq	%r12, 0xc8(%rsp)
    00001a27: 	movb	$0x0, (%rax,%r12)
    00001a2c: 	movabsq	$0x3fffffffffffffff, %rax
    00001a36: 	subq	0xc8(%rsp), %rax
    00001a3e: 	cmpq	$0x8, %rax
    00001a42: 	jbe	.Ltmp678 # Offset: 6722
    00001a48: 	movq	0x18(%rsp), %rdi
    00001a4d: 	movl	$0x9, %edx
    00001a52: 	leaq	DATAat0x14202(%rip), %rsi
    00001a59: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 6745
    00001a5e: 	movl	iterations(%rip), %edx
    00001a64: 	xorl	%r8d, %r8d
    00001a67: 	xorl	%ecx, %ecx
    00001a69: 	movl	$0xfa0, %esi
    00001a6e: 	movq	0xc0(%rsp), %rdi
    00001a76: 	callq	_Z9summarizePKciiii # Offset: 6774
    00001a7b: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm7
    00001a83: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001a8a: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    00001a91: 	movaps	%xmm7, 0x40(%rsp)
    00001a96: 	movq	%xmm7, %rbp
    00001a9b: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm7
    00001aa3: 	movq	%rax, (%rsp)
    00001aa7: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    00001aae: 	movhlps	%xmm7, %xmm5
    00001ab1: 	movaps	%xmm7, 0x20(%rsp)
    00001ab6: 	movq	%xmm5, %rsi
    00001abb: 	movq	%rax, 0x18(%rsp)
    00001ac0: 	leaq	0x8(%rsi), %r12
    00001ac4: 	movq	%xmm5, 0x30(%rsp)
    00001aca: 	movq	%xmm7, 0x10(%rsp)
    00001ad0: 	cmpq	%r12, %rax
    00001ad3: 	jbe	.Ltmp679 # Offset: 6867
    00001ad5: 	movq	%r12, 0x50(%rsp)
    00001ada: 	movq	%r12, %r13
    00001add: 	movq	%rbp, 0x58(%rsp)
    00001ae2: 	movq	0x18(%rsp), %rbp
    00001ae7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp682:
    00001af0: 	movq	(%r13), %r12
    00001af4: 	leaq	0x200(%r12), %rbx
    00001afc: 	nopl	(%rax) # Size: 4
.Ltmp681:
    00001b00: 	movq	(%r12), %rdi
    00001b04: 	leaq	0x10(%r12), %rdx
    00001b09: 	cmpq	%rdx, %rdi
    00001b0c: 	je	.Ltmp680 # Offset: 6924
    00001b12: 	movq	0x10(%r12), %rax
    00001b17: 	addq	$0x20, %r12
    00001b1b: 	leaq	0x1(%rax), %rsi
    00001b1f: 	callq	_ZdlPvm@PLT # Offset: 6943
    00001b24: 	cmpq	%r12, %rbx
    00001b27: 	jne	.Ltmp681 # Offset: 6951
    00001b29: 	addq	$0x8, %r13
    00001b2d: 	cmpq	%r13, %rbp
    00001b30: 	ja	.Ltmp682 # Offset: 6960
.Ltmp697:
    00001b32: 	movq	0x50(%rsp), %r12
    00001b37: 	movq	0x58(%rsp), %rbp
.Ltmp679:
    00001b3c: 	movq	0x18(%rsp), %rsi
    00001b41: 	cmpq	%rsi, 0x30(%rsp)
    00001b46: 	je	.Ltmp683 # Offset: 6982
    00001b4c: 	cmpq	0x10(%rsp), %rbp
    00001b51: 	je	.Ltmp684 # Offset: 6993
.Ltmp687:
    00001b53: 	movq	(%rbp), %rdi
    00001b57: 	leaq	0x10(%rbp), %rax
    00001b5b: 	cmpq	%rax, %rdi
    00001b5e: 	je	.Ltmp685 # Offset: 7006
.Ltmp686:
    00001b60: 	movq	0x10(%rbp), %rax
    00001b64: 	addq	$0x20, %rbp
    00001b68: 	leaq	0x1(%rax), %rsi
    00001b6c: 	callq	_ZdlPvm@PLT # Offset: 7020
    00001b71: 	cmpq	%rbp, 0x10(%rsp)
    00001b76: 	je	.Ltmp684 # Offset: 7030
    00001b78: 	movq	(%rbp), %rdi
    00001b7c: 	leaq	0x10(%rbp), %rax
    00001b80: 	cmpq	%rax, %rdi
    00001b83: 	jne	.Ltmp686 # Offset: 7043
.Ltmp685:
    00001b85: 	addq	$0x20, %rbp
    00001b89: 	cmpq	%rbp, 0x10(%rsp)
    00001b8e: 	jne	.Ltmp687 # Offset: 7054
    00001b90: 	cmpq	%r14, (%rsp)
    00001b94: 	je	.Ltmp688 # Offset: 7060
    00001b96: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp690:
    00001ba0: 	movq	(%r14), %rdi
    00001ba3: 	leaq	0x10(%r14), %rax
    00001ba7: 	cmpq	%rax, %rdi
    00001baa: 	je	.Ltmp689 # Offset: 7082
    00001bac: 	movq	0x10(%r14), %rax
    00001bb0: 	leaq	0x1(%rax), %rsi
    00001bb4: 	callq	_ZdlPvm@PLT # Offset: 7092
.Ltmp689:
    00001bb9: 	addq	$0x20, %r14
.Ltmp684:
    00001bbd: 	cmpq	%r14, (%rsp)
    00001bc1: 	jne	.Ltmp690 # Offset: 7105
.Ltmp688:
    00001bc3: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    00001bca: 	leaq	0x8(%rax), %rbx
    00001bce: 	cmpq	%r12, %rbx
    00001bd1: 	jbe	.Ltmp691 # Offset: 7121
    00001bd3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp692:
    00001bd8: 	movq	(%r12), %rdi
    00001bdc: 	movl	$0x200, %esi
    00001be1: 	addq	$0x8, %r12
    00001be5: 	callq	_ZdlPvm@PLT # Offset: 7141
    00001bea: 	cmpq	%r12, %rbx
    00001bed: 	ja	.Ltmp692 # Offset: 7149
.Ltmp691:
    00001bef: 	movdqa	0x40(%rsp), %xmm7
    00001bf5: 	movq	0xc0(%rsp), %rdi
    00001bfd: 	movaps	%xmm7, "_ZL7gLabels/1"+48(%rip)
    00001c04: 	movdqa	0x20(%rsp), %xmm7
    00001c0a: 	movaps	%xmm7, "_ZL7gLabels/1"+64(%rip)
    00001c11: 	cmpq	%r15, %rdi
    00001c14: 	je	.Ltmp693 # Offset: 7188
    00001c16: 	movq	0xd0(%rsp), %rax
    00001c1e: 	leaq	0x1(%rax), %rsi
    00001c22: 	callq	_ZdlPvm@PLT # Offset: 7202
.Ltmp693:
    00001c27: 	movq	0x80(%rsp), %rdi
    00001c2f: 	cmpq	0x68(%rsp), %rdi
    00001c34: 	je	.Ltmp694 # Offset: 7220
    00001c36: 	movq	0x90(%rsp), %rax
    00001c3e: 	leaq	0x1(%rax), %rsi
    00001c42: 	callq	_ZdlPvm@PLT # Offset: 7234
.Ltmp694:
    00001c47: 	movq	0x3f68(%rsp), %rax
    00001c4f: 	subq	%fs:0x28, %rax
    00001c58: 	jne	.Ltmp695 # Offset: 7256
    00001c5e: 	addq	$0x3f78, %rsp
    00001c65: 	popq	%rbx
    00001c66: 	popq	%rbp
    00001c67: 	popq	%r12
    00001c69: 	popq	%r13
    00001c6b: 	popq	%r14
    00001c6d: 	popq	%r15
    00001c6f: 	retq # Offset: 7279
.Ltmp536:
    00001c70: 	leaq	0x78(%rsp), %rsi
    00001c75: 	xorl	%edx, %edx
    00001c77: 	movq	%r13, %rdi
    00001c7a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7290
    00001c7f: 	movq	%rax, (%r13)
    00001c83: 	movq	%rax, %rdi
    00001c86: 	movq	0x78(%rsp), %rax
    00001c8b: 	movq	%rax, 0x10(%r13)
.Ltmp745:
    00001c8f: 	movq	%r12, %rdx
    00001c92: 	movq	%r14, %rsi
    00001c95: 	callq	memcpy@PLT # Offset: 7317
    00001c9a: 	movq	0x78(%rsp), %r12
    00001c9f: 	movq	(%r13), %rdi
    00001ca3: 	jmp	.Ltmp696 # Offset: 7331
    00001ca8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp680:
    00001cb0: 	addq	$0x20, %r12
    00001cb4: 	cmpq	%r12, %rbx
    00001cb7: 	jne	.Ltmp681 # Offset: 7351
    00001cbd: 	addq	$0x8, %r13
    00001cc1: 	cmpq	%r13, %rbp
    00001cc4: 	ja	.Ltmp682 # Offset: 7364
    00001cca: 	jmp	.Ltmp697 # Offset: 7370
    00001ccf: 	nop # Size: 1
.Ltmp567:
    00001cd0: 	addl	$0x1, %r14d
    00001cd4: 	cmpl	iterations(%rip), %r14d
    00001cdb: 	jl	.Ltmp568 # Offset: 7387
    00001ce1: 	jmp	.Ltmp560 # Offset: 7393
    00001ce6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp579:
    00001cf0: 	addl	$0x1, %r14d
    00001cf4: 	cmpl	iterations(%rip), %r14d
    00001cfb: 	jl	.Ltmp580 # Offset: 7419
    00001d01: 	jmp	.Ltmp572 # Offset: 7425
    00001d06: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp618:
    00001d10: 	addl	$0x1, %r12d
    00001d14: 	cmpl	iterations(%rip), %r12d
    00001d1b: 	jl	.Ltmp619 # Offset: 7451
    00001d21: 	jmp	.Ltmp611 # Offset: 7457
    00001d26: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp630:
    00001d30: 	addl	$0x1, %r12d
    00001d34: 	cmpl	iterations(%rip), %r12d
    00001d3b: 	jl	.Ltmp631 # Offset: 7483
    00001d41: 	jmp	.Ltmp623 # Offset: 7489
    00001d46: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp649:
    00001d50: 	addl	$0x1, %r14d
    00001d54: 	cmpl	iterations(%rip), %r14d
    00001d5b: 	jl	.Ltmp650 # Offset: 7515
    00001d61: 	jmp	.Ltmp642 # Offset: 7521
    00001d66: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp665:
    00001d70: 	addl	$0x1, %r14d
    00001d74: 	cmpl	iterations(%rip), %r14d
    00001d7b: 	jl	.Ltmp666 # Offset: 7547
    00001d81: 	jmp	.Ltmp658 # Offset: 7553
    00001d86: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp565:
    00001d90: 	testq	%r12, %r12
    00001d93: 	jne	.Ltmp698 # Offset: 7571
    00001d99: 	movq	%r15, %rax
    00001d9c: 	jmp	.Ltmp699 # Offset: 7580
    00001da1: 	nopl	(%rax) # Size: 7
.Ltmp577:
    00001da8: 	testq	%r12, %r12
    00001dab: 	jne	.Ltmp700 # Offset: 7595
    00001db1: 	movq	%r15, %rax
    00001db4: 	jmp	.Ltmp701 # Offset: 7604
    00001db9: 	nopl	(%rax) # Size: 7
.Ltmp616:
    00001dc0: 	testq	%r13, %r13
    00001dc3: 	jne	.Ltmp702 # Offset: 7619
    00001dc9: 	movq	%r15, %rax
    00001dcc: 	jmp	.Ltmp703 # Offset: 7628
    00001dd1: 	nopl	(%rax) # Size: 7
.Ltmp628:
    00001dd8: 	testq	%r13, %r13
    00001ddb: 	jne	.Ltmp704 # Offset: 7643
    00001de1: 	movq	%r15, %rax
    00001de4: 	jmp	.Ltmp705 # Offset: 7652
    00001de9: 	nopl	(%rax) # Size: 7
.Ltmp647:
    00001df0: 	testq	%r12, %r12
    00001df3: 	jne	.Ltmp706 # Offset: 7667
    00001df9: 	movq	%r15, %rax
    00001dfc: 	jmp	.Ltmp707 # Offset: 7676
    00001e01: 	nopl	(%rax) # Size: 7
.Ltmp663:
    00001e08: 	testq	%r12, %r12
    00001e0b: 	jne	.Ltmp708 # Offset: 7691
    00001e11: 	movq	%r15, %rax
    00001e14: 	jmp	.Ltmp709 # Offset: 7700
    00001e19: 	nopl	(%rax) # Size: 7
.Ltmp576:
    00001e20: 	movq	0x18(%rsp), %rdi
    00001e25: 	leaq	0x78(%rsp), %rsi
    00001e2a: 	xorl	%edx, %edx
    00001e2c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7724
    00001e31: 	movq	%rax, 0xc0(%rsp)
    00001e39: 	movq	%rax, %rdi
    00001e3c: 	movq	0x78(%rsp), %rax
    00001e41: 	movq	%rax, 0xd0(%rsp)
.Ltmp751:
    00001e49: 	movq	%r12, %rdx
    00001e4c: 	movq	%r13, %rsi
    00001e4f: 	callq	memcpy@PLT # Offset: 7759
    00001e54: 	movq	0x78(%rsp), %r12
    00001e59: 	movq	0xc0(%rsp), %rax
    00001e61: 	jmp	.Ltmp701 # Offset: 7777
    00001e66: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp564:
    00001e70: 	movq	0x18(%rsp), %rdi
    00001e75: 	leaq	0x78(%rsp), %rsi
    00001e7a: 	xorl	%edx, %edx
    00001e7c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7804
    00001e81: 	movq	%rax, 0xc0(%rsp)
    00001e89: 	movq	%rax, %rdi
    00001e8c: 	movq	0x78(%rsp), %rax
    00001e91: 	movq	%rax, 0xd0(%rsp)
.Ltmp750:
    00001e99: 	movq	%r12, %rdx
    00001e9c: 	movq	%r13, %rsi
    00001e9f: 	callq	memcpy@PLT # Offset: 7839
    00001ea4: 	movq	0x78(%rsp), %r12
    00001ea9: 	movq	0xc0(%rsp), %rax
    00001eb1: 	jmp	.Ltmp699 # Offset: 7857
    00001eb6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp627:
    00001ec0: 	movq	0x18(%rsp), %rdi
    00001ec5: 	leaq	0x78(%rsp), %rsi
    00001eca: 	xorl	%edx, %edx
    00001ecc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7884
    00001ed1: 	movq	%rax, 0xc0(%rsp)
    00001ed9: 	movq	%rax, %rdi
    00001edc: 	movq	0x78(%rsp), %rax
    00001ee1: 	movq	%rax, 0xd0(%rsp)
.Ltmp753:
    00001ee9: 	movq	%r13, %rdx
    00001eec: 	movq	%r14, %rsi
    00001eef: 	callq	memcpy@PLT # Offset: 7919
    00001ef4: 	movq	0x78(%rsp), %r13
    00001ef9: 	movq	0xc0(%rsp), %rax
    00001f01: 	jmp	.Ltmp705 # Offset: 7937
    00001f06: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp646:
    00001f10: 	movq	0x18(%rsp), %rdi
    00001f15: 	leaq	0x78(%rsp), %rsi
    00001f1a: 	xorl	%edx, %edx
    00001f1c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7964
    00001f21: 	movq	%rax, 0xc0(%rsp)
    00001f29: 	movq	%rax, %rdi
    00001f2c: 	movq	0x78(%rsp), %rax
    00001f31: 	movq	%rax, 0xd0(%rsp)
.Ltmp754:
    00001f39: 	movq	%r12, %rdx
    00001f3c: 	movq	%r13, %rsi
    00001f3f: 	callq	memcpy@PLT # Offset: 7999
    00001f44: 	movq	0x78(%rsp), %r12
    00001f49: 	movq	0xc0(%rsp), %rax
    00001f51: 	jmp	.Ltmp707 # Offset: 8017
    00001f56: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp615:
    00001f60: 	movq	0x18(%rsp), %rdi
    00001f65: 	leaq	0x78(%rsp), %rsi
    00001f6a: 	xorl	%edx, %edx
    00001f6c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8044
    00001f71: 	movq	%rax, 0xc0(%rsp)
    00001f79: 	movq	%rax, %rdi
    00001f7c: 	movq	0x78(%rsp), %rax
    00001f81: 	movq	%rax, 0xd0(%rsp)
.Ltmp752:
    00001f89: 	movq	%r13, %rdx
    00001f8c: 	movq	%r14, %rsi
    00001f8f: 	callq	memcpy@PLT # Offset: 8079
    00001f94: 	movq	0x78(%rsp), %r13
    00001f99: 	movq	0xc0(%rsp), %rax
    00001fa1: 	jmp	.Ltmp703 # Offset: 8097
    00001fa6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp662:
    00001fb0: 	movq	0x18(%rsp), %rdi
    00001fb5: 	leaq	0x78(%rsp), %rsi
    00001fba: 	xorl	%edx, %edx
    00001fbc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8124
    00001fc1: 	movq	%rax, 0xc0(%rsp)
    00001fc9: 	movq	%rax, %rdi
    00001fcc: 	movq	0x78(%rsp), %rax
    00001fd1: 	movq	%rax, 0xd0(%rsp)
.Ltmp755:
    00001fd9: 	movq	%r12, %rdx
    00001fdc: 	movq	%r13, %rsi
    00001fdf: 	callq	memcpy@PLT # Offset: 8159
    00001fe4: 	movq	0x78(%rsp), %r12
    00001fe9: 	movq	0xc0(%rsp), %rax
    00001ff1: 	jmp	.Ltmp709 # Offset: 8177
.Ltmp598:
    00001ff6: 	testq	%r12, %r12
    00001ff9: 	jne	.Ltmp710 # Offset: 8185
    00001fff: 	movq	%r15, %rax
    00002002: 	jmp	.Ltmp711 # Offset: 8194
.Ltmp543:
    00002007: 	testq	%r12, %r12
    0000200a: 	jne	.Ltmp712 # Offset: 8202
    00002010: 	movq	%r15, %rax
    00002013: 	jmp	.Ltmp713 # Offset: 8211
.Ltmp677:
    00002018: 	testq	%r12, %r12
    0000201b: 	jne	.Ltmp714 # Offset: 8219
    00002021: 	movq	%r15, %rax
    00002024: 	jmp	.Ltmp715 # Offset: 8228
.Ltmp676:
    00002029: 	movq	0x18(%rsp), %rdi
    0000202e: 	leaq	0x78(%rsp), %rsi
    00002033: 	xorl	%edx, %edx
    00002035: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8245
    0000203a: 	movq	%rax, 0xc0(%rsp)
    00002042: 	movq	%rax, %rdi
    00002045: 	movq	0x78(%rsp), %rax
    0000204a: 	movq	%rax, 0xd0(%rsp)
.Ltmp758:
    00002052: 	movq	%r12, %rdx
    00002055: 	movq	%rbp, %rsi
    00002058: 	callq	memcpy@PLT # Offset: 8280
    0000205d: 	movq	0x78(%rsp), %r12
    00002062: 	movq	0xc0(%rsp), %rax
    0000206a: 	jmp	.Ltmp715 # Offset: 8298
.Ltmp597:
    0000206f: 	movq	0x18(%rsp), %rdi
    00002074: 	leaq	0x78(%rsp), %rsi
    00002079: 	xorl	%edx, %edx
    0000207b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8315
    00002080: 	movq	%rax, 0xc0(%rsp)
    00002088: 	movq	%rax, %rdi
    0000208b: 	movq	0x78(%rsp), %rax
    00002090: 	movq	%rax, 0xd0(%rsp)
.Ltmp756:
    00002098: 	movq	%r12, %rdx
    0000209b: 	movq	%r13, %rsi
    0000209e: 	callq	memcpy@PLT # Offset: 8350
    000020a3: 	movq	0x78(%rsp), %r12
    000020a8: 	movq	0xc0(%rsp), %rax
    000020b0: 	jmp	.Ltmp711 # Offset: 8368
.Ltmp542:
    000020b5: 	movq	0x18(%rsp), %rdi
    000020ba: 	leaq	0x78(%rsp), %rsi
    000020bf: 	xorl	%edx, %edx
    000020c1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8385
    000020c6: 	movq	%rax, 0xc0(%rsp)
    000020ce: 	movq	%rax, %rdi
    000020d1: 	movq	0x78(%rsp), %rax
    000020d6: 	movq	%rax, 0xd0(%rsp)
.Ltmp757:
    000020de: 	movq	%r12, %rdx
    000020e1: 	movq	%r13, %rsi
    000020e4: 	callq	memcpy@PLT # Offset: 8420
    000020e9: 	movq	0x78(%rsp), %r12
    000020ee: 	movq	0xc0(%rsp), %rax
    000020f6: 	jmp	.Ltmp713 # Offset: 8438
.Ltmp533:
    000020fb: 	movq	0x18(%rsp), %rsi
    00002100: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002107: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8455
    0000210c: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002113: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000211a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002121: 	jne	.Ltmp716 # Offset: 8481
.Ltmp538:
    00002127: 	movq	-0x8(%rdx), %rax
    0000212b: 	addq	$0x200, %rax
    00002131: 	jmp	.Ltmp716 # Offset: 8497
.Ltmp593:
    00002136: 	movq	-0x8(%rdx), %rax
    0000213a: 	addq	$0x200, %rax
    00002140: 	jmp	.Ltmp717 # Offset: 8512
.Ltmp581:
    00002145: 	movq	0x50(%rsp), %rsi
    0000214a: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002151: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8529
    00002156: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000215d: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00002164: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000216b: 	jne	.Ltmp718 # Offset: 8555
.Ltmp586:
    00002171: 	movq	-0x8(%rdx), %rax
    00002175: 	addq	$0x200, %rax
    0000217b: 	jmp	.Ltmp718 # Offset: 8571
.Ltmp553:
    00002180: 	movq	0x18(%rsp), %rsi
    00002185: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000218c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8588
    00002191: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002198: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000219f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000021a6: 	jne	.Ltmp719 # Offset: 8614
.Ltmp558:
    000021ac: 	movq	-0x8(%rdx), %rax
    000021b0: 	addq	$0x200, %rax
    000021b6: 	jmp	.Ltmp719 # Offset: 8630
.Ltmp570:
    000021bb: 	movq	-0x8(%rdx), %rax
    000021bf: 	addq	$0x200, %rax
    000021c5: 	jmp	.Ltmp720 # Offset: 8645
.Ltmp569:
    000021ca: 	movq	0x50(%rsp), %rsi
    000021cf: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000021d6: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8662
    000021db: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000021e2: 	jmp	.Ltmp721 # Offset: 8674
.Ltmp633:
    000021e7: 	movq	-0x8(%rdx), %rax
    000021eb: 	addq	$0x200, %rax
    000021f1: 	jmp	.Ltmp722 # Offset: 8689
.Ltmp632:
    000021f6: 	movq	0x50(%rsp), %rsi
    000021fb: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002202: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8706
    00002207: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000220e: 	jmp	.Ltmp723 # Offset: 8718
.Ltmp640:
    00002213: 	movq	-0x8(%rdx), %rax
    00002217: 	addq	$0x200, %rax
    0000221d: 	jmp	.Ltmp724 # Offset: 8733
.Ltmp639:
    00002222: 	movq	0x18(%rsp), %rsi
    00002227: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000222e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8750
    00002233: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000223a: 	jmp	.Ltmp725 # Offset: 8762
.Ltmp592:
    0000223f: 	movq	0x18(%rsp), %rsi
    00002244: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000224b: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8779
    00002250: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002257: 	jmp	.Ltmp726 # Offset: 8791
.Ltmp621:
    0000225c: 	movq	-0x8(%rdx), %rax
    00002260: 	addq	$0x200, %rax
    00002266: 	jmp	.Ltmp727 # Offset: 8806
.Ltmp620:
    0000226b: 	movq	0x50(%rsp), %rsi
    00002270: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002277: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8823
    0000227c: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002283: 	jmp	.Ltmp728 # Offset: 8835
.Ltmp609:
    00002288: 	movq	-0x8(%rdx), %rax
    0000228c: 	addq	$0x200, %rax
    00002292: 	jmp	.Ltmp729 # Offset: 8850
.Ltmp608:
    00002297: 	movq	0x18(%rsp), %rsi
    0000229c: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000022a3: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8867
    000022a8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000022af: 	jmp	.Ltmp730 # Offset: 8879
.Ltmp651:
    000022b4: 	movq	0x50(%rsp), %rsi
    000022b9: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000022c0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8896
    000022c5: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000022cc: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000022d3: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000022da: 	jne	.Ltmp731 # Offset: 8922
.Ltmp656:
    000022e0: 	movq	-0x8(%rdx), %rax
    000022e4: 	addq	$0x200, %rax
    000022ea: 	jmp	.Ltmp731 # Offset: 8938
.Ltmp672:
    000022ef: 	movq	-0x8(%rdx), %rax
    000022f3: 	addq	$0x200, %rax
    000022f9: 	jmp	.Ltmp732 # Offset: 8953
.Ltmp683:
    000022fe: 	cmpq	(%rsp), %rbp
    00002302: 	je	.Ltmp688 # Offset: 8962
.Ltmp735:
    00002308: 	movq	(%rbp), %rdi
    0000230c: 	leaq	0x10(%rbp), %rax
    00002310: 	cmpq	%rax, %rdi
    00002313: 	je	.Ltmp733 # Offset: 8979
.Ltmp734:
    00002315: 	movq	0x10(%rbp), %rax
    00002319: 	addq	$0x20, %rbp
    0000231d: 	leaq	0x1(%rax), %rsi
    00002321: 	callq	_ZdlPvm@PLT # Offset: 8993
    00002326: 	cmpq	%rbp, (%rsp)
    0000232a: 	je	.Ltmp688 # Offset: 9002
    00002330: 	movq	(%rbp), %rdi
    00002334: 	leaq	0x10(%rbp), %rax
    00002338: 	cmpq	%rax, %rdi
    0000233b: 	jne	.Ltmp734 # Offset: 9019
.Ltmp733:
    0000233d: 	addq	$0x20, %rbp
    00002341: 	cmpq	%rbp, (%rsp)
    00002345: 	jne	.Ltmp735 # Offset: 9029
    00002347: 	jmp	.Ltmp688 # Offset: 9031
.Ltmp667:
    0000234c: 	movq	0x50(%rsp), %rsi
    00002351: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002358: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9048
    0000235d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002364: 	jmp	.Ltmp736 # Offset: 9060
.Ltmp655:
    00002369: 	testq	%r12, %r12
    0000236c: 	je	.Ltmp737 # Offset: 9068
    00002372: 	jmp	.Ltmp738 # Offset: 9074
    00002377: 	nopw	(%rax,%rax) # Size: 9
.Ltmp585:
    00002380: 	testq	%r12, %r12
    00002383: 	je	.Ltmp739 # Offset: 9091
    00002389: 	jmp	.Ltmp740 # Offset: 9097
    0000238e: 	nop # Size: 2
.Ltmp557:
    00002390: 	testq	%r12, %r12
    00002393: 	je	.Ltmp741 # Offset: 9107
    00002399: 	jmp	.Ltmp742 # Offset: 9113
    0000239e: 	nop # Size: 2
.Ltmp671:
    000023a0: 	testq	%r12, %r12
    000023a3: 	je	.Ltmp743 # Offset: 9123
    000023a9: 	jmp	.Ltmp744 # Offset: 9129
    000023ab: 	nopl	(%rax,%rax) # Size: 5
.Ltmp537:
    000023b0: 	testq	%r12, %r12
    000023b3: 	je	.Ltmp696 # Offset: 9139
    000023b9: 	jmp	.Ltmp745 # Offset: 9145
    000023be: 	nop # Size: 2
.Ltmp670:
    000023c0: 	leaq	0x78(%rsp), %rsi
    000023c5: 	xorl	%edx, %edx
    000023c7: 	movq	%rbx, %rdi
    000023ca: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9162
    000023cf: 	movq	%rax, (%rbx)
    000023d2: 	movq	%rax, %rdi
    000023d5: 	movq	0x78(%rsp), %rax
    000023da: 	movq	%rax, 0x10(%rbx)
.Ltmp744:
    000023de: 	movq	%r12, %rdx
    000023e1: 	movq	%rbp, %rsi
    000023e4: 	callq	memcpy@PLT # Offset: 9188
    000023e9: 	movq	0x78(%rsp), %r12
    000023ee: 	movq	(%rbx), %rdi
    000023f1: 	jmp	.Ltmp743 # Offset: 9201
.Ltmp654:
    000023f6: 	leaq	0x78(%rsp), %rsi
    000023fb: 	xorl	%edx, %edx
    000023fd: 	movq	%rbp, %rdi
    00002400: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9216
    00002405: 	movq	%rax, (%rbp)
    00002409: 	movq	%rax, %rdi
    0000240c: 	movq	0x78(%rsp), %rax
    00002411: 	movq	%rax, 0x10(%rbp)
.Ltmp738:
    00002415: 	movq	%r12, %rdx
    00002418: 	movq	%r13, %rsi
    0000241b: 	callq	memcpy@PLT # Offset: 9243
    00002420: 	movq	0x78(%rsp), %r12
    00002425: 	movq	(%rbp), %rdi
    00002429: 	jmp	.Ltmp737 # Offset: 9257
.Ltmp584:
    0000242e: 	leaq	0x78(%rsp), %rsi
    00002433: 	xorl	%edx, %edx
    00002435: 	movq	%r13, %rdi
    00002438: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9272
    0000243d: 	movq	%rax, (%r13)
    00002441: 	movq	%rax, %rdi
    00002444: 	movq	0x78(%rsp), %rax
    00002449: 	movq	%rax, 0x10(%r13)
.Ltmp740:
    0000244d: 	movq	%r12, %rdx
    00002450: 	movq	%r14, %rsi
    00002453: 	callq	memcpy@PLT # Offset: 9299
    00002458: 	movq	0x78(%rsp), %r12
    0000245d: 	movq	(%r13), %rdi
    00002461: 	jmp	.Ltmp739 # Offset: 9313
.Ltmp556:
    00002466: 	leaq	0x78(%rsp), %rsi
    0000246b: 	xorl	%edx, %edx
    0000246d: 	movq	%r13, %rdi
    00002470: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9328
    00002475: 	movq	%rax, (%r13)
    00002479: 	movq	%rax, %rdi
    0000247c: 	movq	0x78(%rsp), %rax
    00002481: 	movq	%rax, 0x10(%r13)
.Ltmp742:
    00002485: 	movq	%r12, %rdx
    00002488: 	movq	%r14, %rsi
    0000248b: 	callq	memcpy@PLT # Offset: 9355
    00002490: 	movq	0x78(%rsp), %r12
    00002495: 	movq	(%r13), %rdi
    00002499: 	jmp	.Ltmp741 # Offset: 9369
.Ltmp545:
    0000249e: 	xorl	%esi, %esi
    000024a0: 	xorl	%edi, %edi
    000024a2: 	xorl	%eax, %eax
    000024a4: 	jmp	.Ltmp746 # Offset: 9380
.Ltmp600:
    000024a9: 	xorl	%esi, %esi
    000024ab: 	xorl	%edi, %edi
    000024ad: 	jmp	.Ltmp747 # Offset: 9389
.Ltmp548:
    000024b2: 	xorl	%edi, %edi
    000024b4: 	xorl	%eax, %eax
    000024b6: 	jmp	.Ltmp746 # Offset: 9398
.Ltmp603:
    000024bb: 	movl	$0x0, 0x30(%rsp)
    000024c3: 	xorl	%edi, %edi
    000024c5: 	jmp	.Ltmp747 # Offset: 9413
.Ltmp546:
    000024ca: 	xorl	%eax, %eax
    000024cc: 	movl	$0x20, %esi
    000024d1: 	xorl	%edx, %edx
    000024d3: 	jmp	.Ltmp748 # Offset: 9427
.Ltmp601:
    000024d8: 	xorl	%eax, %eax
    000024da: 	movl	$0x20, %esi
    000024df: 	xorl	%edx, %edx
    000024e1: 	jmp	.Ltmp749 # Offset: 9441
.Ltmp599:
    000024e6: 	leaq	DATAat0x14184(%rip), %rdi
    000024ed: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9453
.Ltmp614:
    000024f2: 	leaq	DATAat0x14008(%rip), %rdi
    000024f9: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9465
.Ltmp626:
    000024fe: 	leaq	DATAat0x14008(%rip), %rdi
    00002505: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9477
.Ltmp645:
    0000250a: 	leaq	DATAat0x14008(%rip), %rdi
    00002511: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9489
.Ltmp653:
    00002516: 	leaq	DATAat0x14008(%rip), %rdi
    0000251d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9501
.Ltmp661:
    00002522: 	leaq	DATAat0x14008(%rip), %rdi
    00002529: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9513
.Ltmp669:
    0000252e: 	leaq	DATAat0x14008(%rip), %rdi
    00002535: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9525
.Ltmp555:
    0000253a: 	leaq	DATAat0x14008(%rip), %rdi
    00002541: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9537
.Ltmp563:
    00002546: 	leaq	DATAat0x14008(%rip), %rdi
    0000254d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9549
.Ltmp575:
    00002552: 	leaq	DATAat0x14008(%rip), %rdi
    00002559: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9561
.Ltmp583:
    0000255e: 	leaq	DATAat0x14008(%rip), %rdi
    00002565: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9573
.Ltmp596:
    0000256a: 	leaq	DATAat0x14008(%rip), %rdi
    00002571: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9585
.Ltmp541:
    00002576: 	leaq	DATAat0x14008(%rip), %rdi
    0000257d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9597
.Ltmp544:
    00002582: 	leaq	DATAat0x14184(%rip), %rdi
    00002589: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9609
.Ltmp675:
    0000258e: 	leaq	DATAat0x14008(%rip), %rdi
    00002595: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9621
.Ltmp678:
    0000259a: 	leaq	DATAat0x14184(%rip), %rdi
    000025a1: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9633
.Ltmp695:
    000025a6: 	callq	__stack_chk_fail@PLT # Offset: 9638
.Ltmp535:
    000025ab: 	leaq	DATAat0x14008(%rip), %rdi
    000025b2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9650
.Ltmp698:
    000025b7: 	movq	%r15, %rdi
    000025ba: 	jmp	.Ltmp750 # Offset: 9658
.Ltmp700:
    000025bf: 	movq	%r15, %rdi
    000025c2: 	jmp	.Ltmp751 # Offset: 9666
.Ltmp702:
    000025c7: 	movq	%r15, %rdi
    000025ca: 	jmp	.Ltmp752 # Offset: 9674
.Ltmp704:
    000025cf: 	movq	%r15, %rdi
    000025d2: 	jmp	.Ltmp753 # Offset: 9682
.Ltmp706:
    000025d7: 	movq	%r15, %rdi
    000025da: 	jmp	.Ltmp754 # Offset: 9690
.Ltmp708:
    000025df: 	movq	%r15, %rdi
    000025e2: 	jmp	.Ltmp755 # Offset: 9698
.Ltmp710:
    000025e7: 	movq	%r15, %rdi
    000025ea: 	jmp	.Ltmp756 # Offset: 9706
.Ltmp712:
    000025ef: 	movq	%r15, %rdi
    000025f2: 	jmp	.Ltmp757 # Offset: 9714
.Ltmp714:
    000025f7: 	movq	%r15, %rdi
    000025fa: 	jmp	.Ltmp758 # Offset: 9722
    000025ff: 	endbr64
    00002603: 	movq	%rax, %rbp
    00002606: 	jmp	.Ltmp759 # Offset: 9734
    00002608: 	endbr64
.Ltmp765:
    0000260c: 	movq	%rax, %rbp
    0000260f: 	jmp	.Ltmp760 # Offset: 9743
    00002611: 	endbr64
.Ltmp762:
    00002615: 	movq	%rax, %rbp
    00002618: 	movq	0xc0(%rsp), %rdi
    00002620: 	cmpq	%r15, %rdi
    00002623: 	je	.Ltmp759 # Offset: 9763
    00002625: 	movq	0xd0(%rsp), %rax
    0000262d: 	leaq	0x1(%rax), %rsi
    00002631: 	callq	_ZdlPvm@PLT # Offset: 9777
.Ltmp759:
    00002636: 	movq	0x80(%rsp), %rdi
    0000263e: 	cmpq	0x68(%rsp), %rdi
    00002643: 	je	.Ltmp761 # Offset: 9795
    00002645: 	movq	0x90(%rsp), %rax
    0000264d: 	leaq	0x1(%rax), %rsi
    00002651: 	callq	_ZdlPvm@PLT # Offset: 9809
.Ltmp761:
    00002656: 	movq	%rbp, %rdi
    00002659: 	callq	_Unwind_Resume@PLT # Offset: 9817
.Ltmp763:
    0000265e: 	movq	0xc0(%rsp), %rdi
    00002666: 	cmpq	%r15, %rdi
    00002669: 	je	.Ltmp760 # Offset: 9833
    0000266b: 	movq	0xd0(%rsp), %rax
    00002673: 	leaq	0x1(%rax), %rsi
    00002677: 	callq	_ZdlPvm@PLT # Offset: 9847
.Ltmp760:
    0000267c: 	movq	0xa0(%rsp), %rdi
    00002684: 	cmpq	0x58(%rsp), %rdi
    00002689: 	je	.Ltmp759 # Offset: 9865
.Ltmp767:
    0000268b: 	movq	0xb0(%rsp), %rax
    00002693: 	leaq	0x1(%rax), %rsi
    00002697: 	callq	_ZdlPvm@PLT # Offset: 9879
    0000269c: 	jmp	.Ltmp759 # Offset: 9884
    0000269e: 	endbr64
    000026a2: 	jmp	.Ltmp762 # Offset: 9890
    000026a7: 	endbr64
.Ltmp764:
    000026ab: 	movq	%rax, %rbp
    000026ae: 	jmp	.Ltmp763 # Offset: 9902
    000026b0: 	endbr64
    000026b4: 	jmp	.Ltmp764 # Offset: 9908
    000026b6: 	endbr64
    000026ba: 	jmp	.Ltmp764 # Offset: 9914
    000026bc: 	endbr64
    000026c0: 	jmp	.Ltmp764 # Offset: 9920
    000026c2: 	endbr64
    000026c6: 	jmp	.Ltmp762 # Offset: 9926
    000026cb: 	endbr64
    000026cf: 	jmp	.Ltmp762 # Offset: 9935
    000026d4: 	endbr64
    000026d8: 	jmp	.Ltmp762 # Offset: 9944
    000026dd: 	endbr64
    000026e1: 	jmp	.Ltmp762 # Offset: 9953
    000026e6: 	endbr64
    000026ea: 	jmp	.Ltmp762 # Offset: 9962
    000026ef: 	endbr64
    000026f3: 	jmp	.Ltmp765 # Offset: 9971
    000026f8: 	endbr64
    000026fc: 	jmp	.Ltmp762 # Offset: 9980
    00002701: 	endbr64
    00002705: 	jmp	.Ltmp765 # Offset: 9989
    0000270a: 	endbr64
    0000270e: 	jmp	.Ltmp764 # Offset: 9998
    00002710: 	endbr64
    00002714: 	jmp	.Ltmp765 # Offset: 10004
    00002719: 	endbr64
    0000271d: 	jmp	.Ltmp762 # Offset: 10013
    00002722: 	endbr64
    00002726: 	jmp	.Ltmp762 # Offset: 10022
    0000272b: 	endbr64
    0000272f: 	movq	%rax, %rbp
    00002732: 	jmp	.Ltmp766 # Offset: 10034
    00002734: 	endbr64
    00002738: 	jmp	.Ltmp765 # Offset: 10040
.Ltmp768:
    0000273d: 	movq	0xc0(%rsp), %rdi
    00002745: 	cmpq	%r15, %rdi
    00002748: 	je	.Ltmp766 # Offset: 10056
    0000274a: 	movq	0xd0(%rsp), %rax
    00002752: 	leaq	0x1(%rax), %rsi
    00002756: 	callq	_ZdlPvm@PLT # Offset: 10070
.Ltmp766:
    0000275b: 	movq	0xa0(%rsp), %rdi
    00002763: 	leaq	0xb0(%rsp), %rax
    0000276b: 	cmpq	%rax, %rdi
    0000276e: 	jne	.Ltmp767 # Offset: 10094
    00002774: 	jmp	.Ltmp759 # Offset: 10100
    00002779: 	endbr64
    0000277d: 	movq	%rax, %rbp
    00002780: 	jmp	.Ltmp768 # Offset: 10112
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIjEvd"

Binary Function "_Z11TestOneTypeImEvd" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x9a20
  Size        : 0x2b32
  MaxSize     : 0x2b40
  Offset      : 0x9a20
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeImEvd
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x7000(%rsp), %r11
.Ltmp769:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp769 # Offset: 37
    00000027: 	subq	$0xe28, %rsp
    0000002e: 	movsd	init_value(%rip), %xmm1
    00000036: 	movq	%fs:0x28, %rax
    0000003f: 	movq	%rax, 0x7e18(%rsp)
    00000047: 	xorl	%eax, %eax
    00000049: 	comisd	DATAat0x14338(%rip), %xmm1
    00000051: 	leaq	0xc0(%rsp), %rax
    00000059: 	movq	$0x8, 0xb8(%rsp)
    00000065: 	movq	%rax, 0x90(%rsp)
    0000006d: 	movq	%rax, 0xb0(%rsp)
    00000075: 	movabsq	$0x745f3436746e6975, %rax
    0000007f: 	movq	%rax, 0xc0(%rsp)
    00000087: 	movb	$0x0, 0xc8(%rsp)
    0000008f: 	jae	.Ltmp770 # Offset: 143
    00000095: 	cvttsd2si	%xmm1, %rax
.Ltmp953:
    0000009a: 	movq	%rax, %xmm1
    0000009f: 	leaq	0x110(%rsp), %rax
    000000a7: 	leaq	0x7e10(%rsp), %rbx
    000000af: 	movq	%rax, 0x60(%rsp)
    000000b4: 	punpcklqdq	%xmm1, %xmm1
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp771:
    000000c0: 	movaps	%xmm1, (%rax)
    000000c3: 	addq	$0x10, %rax
    000000c7: 	cmpq	%rbx, %rax
    000000ca: 	jne	.Ltmp771 # Offset: 202
    000000cc: 	comisd	DATAat0x14338(%rip), %xmm0
    000000d4: 	jae	.Ltmp772 # Offset: 212
    000000da: 	cvttsd2si	%xmm0, %rbp
.Ltmp952:
    000000df: 	leaq	0xb0(%rsp), %rax
    000000e7: 	leaq	0xf0(%rsp), %rdi
    000000ef: 	leaq	DATAat0x141d0(%rip), %rdx
    000000f6: 	movq	%rax, %rsi
    000000f9: 	movq	%rdi, 0x68(%rsp)
    000000fe: 	movq	%rax, 0x80(%rsp)
    00000106: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 262
    0000010b: 	callq	clock@PLT # Offset: 267
    00000110: 	movl	iterations(%rip), %edi
    00000116: 	xorl	%r12d, %r12d
    00000119: 	movabsq	$-0x8000000000000000, %r13
    00000123: 	movq	%rax, start_time(%rip)
    0000012a: 	leaq	DATAat0x141e1(%rip), %r14
    00000131: 	testl	%edi, %edi
    00000133: 	jle	.Ltmp773 # Offset: 307
    00000135: 	nopl	(%rax) # Size: 3
.Ltmp777:
    00000138: 	movq	0x60(%rsp), %rcx
    0000013d: 	xorl	%esi, %esi
    0000013f: 	nop # Size: 1
.Ltmp774:
    00000140: 	movq	(%rcx), %rax
    00000143: 	xorl	%edx, %edx
    00000145: 	addq	$0x8, %rcx
    00000149: 	divq	%rbp
    0000014c: 	addq	%rax, %rsi
    0000014f: 	cmpq	%rcx, %rbx
    00000152: 	jne	.Ltmp774 # Offset: 338
    00000154: 	movsd	init_value(%rip), %xmm0
    0000015c: 	comisd	DATAat0x14338(%rip), %xmm0
    00000164: 	jae	.Ltmp775 # Offset: 356
    0000016a: 	cvttsd2si	%xmm0, %rax
.Ltmp951:
    0000016f: 	xorl	%edx, %edx
    00000171: 	divq	%rbp
    00000174: 	imulq	$0xfa0, %rax, %rax
    0000017b: 	cmpq	%rax, %rsi
    0000017e: 	je	.Ltmp776 # Offset: 382
    00000180: 	movq	0xf0(%rsp), %rdx
    00000188: 	movq	%r14, %rsi
    0000018b: 	movl	$0x1, %edi
    00000190: 	xorl	%eax, %eax
    00000192: 	callq	__printf_chk@PLT # Offset: 402
    00000197: 	movl	iterations(%rip), %edi
.Ltmp776:
    0000019d: 	addl	$0x1, %r12d
    000001a1: 	cmpl	%edi, %r12d
    000001a4: 	jl	.Ltmp777 # Offset: 420
.Ltmp773:
    000001a6: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000001ad: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000001b4: 	subq	$0x20, %rax
    000001b8: 	cmpq	%rax, %rdi
    000001bb: 	je	.Ltmp778 # Offset: 443
    000001c1: 	leaq	0x10(%rdi), %rax
    000001c5: 	movq	0xf8(%rsp), %rdx
    000001cd: 	movq	%rax, (%rdi)
    000001d0: 	movq	0xf0(%rsp), %rsi
    000001d8: 	addq	%rsi, %rdx
    000001db: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 475
    000001e0: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001e7: 	addq	$0x20, %rax
    000001eb: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp990:
    000001f2: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001f9: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000200: 	je	.Ltmp779 # Offset: 512
.Ltmp986:
    00000206: 	movq	-0x20(%rax), %r12
    0000020a: 	callq	clock@PLT # Offset: 522
    0000020f: 	pxor	%xmm0, %xmm0
    00000213: 	movq	%rax, end_time(%rip)
    0000021a: 	movq	%r12, %rdi
    0000021d: 	subq	start_time(%rip), %rax
    00000224: 	cvtsi2sd	%rax, %xmm0
    00000229: 	divsd	DATAat0x14308(%rip), %xmm0
    00000231: 	callq	_Z13record_resultdPKc # Offset: 561
    00000236: 	movq	0xf0(%rsp), %rdi
    0000023e: 	leaq	0x100(%rsp), %rax
    00000246: 	movq	%rax, 0x18(%rsp)
    0000024b: 	cmpq	%rax, %rdi
    0000024e: 	je	.Ltmp780 # Offset: 590
    00000250: 	movq	0x100(%rsp), %rax
    00000258: 	leaq	0x1(%rax), %rsi
    0000025c: 	callq	_ZdlPvm@PLT # Offset: 604
.Ltmp780:
    00000261: 	movq	0x80(%rsp), %rsi
    00000269: 	movq	0x68(%rsp), %rdi
    0000026e: 	leaq	DATAat0x1420c(%rip), %rdx
    00000275: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 629
    0000027a: 	callq	clock@PLT # Offset: 634
    0000027f: 	movl	%ebp, %ecx
    00000281: 	movl	%ebp, 0x9c(%rsp)
    00000288: 	subl	$0x1, %ecx
    0000028b: 	movq	%rax, start_time(%rip)
    00000292: 	movl	%ecx, 0x78(%rsp)
    00000296: 	je	.Ltmp781 # Offset: 662
    0000029c: 	js	.Ltmp782 # Offset: 668
    000002a2: 	movl	$0x80000000, %eax
    000002a7: 	xorl	%edx, %edx
    000002a9: 	nopl	(%rax) # Size: 7
.Ltmp783:
    000002b0: 	shrl	%eax
    000002b2: 	addl	$0x1, %edx
    000002b5: 	testl	%eax, %ecx
    000002b7: 	je	.Ltmp783 # Offset: 695
    000002b9: 	movl	$0x20, %esi
    000002be: 	movl	$0x1, %eax
    000002c3: 	subl	%edx, %esi
    000002c5: 	movl	%esi, %ecx
    000002c7: 	shll	%cl, %eax
.Ltmp1014:
    000002c9: 	movl	%ebp, 0x50(%rsp)
    000002cd: 	cmpl	%eax, %ebp
    000002cf: 	je	.Ltmp784 # Offset: 719
    000002d5: 	testl	%esi, %esi
    000002d7: 	movl	$0x1, %edi
    000002dc: 	movl	$0x0, %eax
    000002e1: 	movl	$0x40, %ecx
    000002e6: 	cmovlel	%esi, %edi
    000002e9: 	movl	$0x1f, %esi
    000002ee: 	subl	%edx, %esi
    000002f0: 	cmovsl	%eax, %esi
    000002f3: 	subl	%edx, %ecx
    000002f5: 	movl	$0x1, %eax
    000002fa: 	shlq	%cl, %rax
    000002fd: 	movl	%ebp, %ecx
    000002ff: 	cqto
    00000301: 	idivq	%rcx
    00000304: 	addl	$0x1, %eax
.Ltmp980:
    00000307: 	movl	iterations(%rip), %ecx
    0000030d: 	testl	%ecx, %ecx
    0000030f: 	jle	.Ltmp785 # Offset: 783
    00000315: 	movd	%eax, %xmm0
    00000319: 	movl	%edi, %eax
    0000031b: 	movdqa	DATAat0x143b0(%rip), %xmm5
    00000323: 	xorl	%r12d, %r12d
    00000326: 	movdqa	%xmm0, %xmm3
    0000032a: 	movq	%rax, 0x40(%rsp)
    0000032f: 	movl	%esi, %r15d
    00000332: 	movabsq	$-0x8000000000000000, %r14
    0000033c: 	punpcklqdq	%xmm3, %xmm3
    00000340: 	movaps	%xmm5, (%rsp)
    00000344: 	leaq	DATAat0x141e1(%rip), %r13
    0000034b: 	movaps	%xmm3, 0x30(%rsp)
    00000350: 	psrlq	$0x20, %xmm3
    00000355: 	movaps	%xmm3, 0x20(%rsp)
    0000035a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp789:
    00000360: 	movq	0x60(%rsp), %rax
    00000365: 	movq	0x40(%rsp), %xmm5
    0000036b: 	pxor	%xmm2, %xmm2
    0000036f: 	movq	%r15, %xmm6
    00000374: 	nopl	(%rax) # Size: 4
.Ltmp786:
    00000378: 	movdqa	(%rsp), %xmm4
    0000037d: 	movdqa	(%rax), %xmm3
    00000381: 	addq	$0x20, %rax
    00000385: 	movdqa	0x30(%rsp), %xmm7
    0000038b: 	movdqa	0x20(%rsp), %xmm10
    00000392: 	pand	%xmm4, %xmm3
    00000396: 	pand	-0x10(%rax), %xmm4
    0000039b: 	movdqa	%xmm3, %xmm0
    0000039f: 	movdqa	%xmm7, %xmm1
    000003a3: 	psrlq	$0x20, %xmm0
    000003a8: 	pmuludq	%xmm3, %xmm1
    000003ac: 	pmuludq	%xmm7, %xmm0
    000003b0: 	pmuludq	%xmm10, %xmm3
    000003b5: 	paddq	%xmm3, %xmm0
    000003b9: 	movdqa	%xmm7, %xmm3
    000003bd: 	psllq	$0x20, %xmm0
    000003c2: 	pmuludq	%xmm4, %xmm3
    000003c6: 	paddq	%xmm0, %xmm1
    000003ca: 	movdqa	%xmm4, %xmm0
    000003ce: 	psrlq	$0x20, %xmm0
    000003d3: 	pmuludq	%xmm10, %xmm4
    000003d8: 	pmuludq	%xmm7, %xmm0
    000003dc: 	psrlq	$0x20, %xmm1
    000003e1: 	pxor	%xmm7, %xmm7
    000003e5: 	paddq	%xmm4, %xmm0
    000003e9: 	psllq	$0x20, %xmm0
    000003ee: 	paddq	%xmm3, %xmm0
    000003f2: 	psrlq	$0x20, %xmm0
    000003f7: 	shufps	$0x88, %xmm0, %xmm1
    000003fb: 	movdqa	-0x20(%rax), %xmm0
    00000400: 	shufps	$0x88, -0x10(%rax), %xmm0
    00000405: 	psubd	%xmm1, %xmm0
    00000409: 	psrld	%xmm5, %xmm0
    0000040d: 	paddd	%xmm1, %xmm0
    00000411: 	psrld	%xmm6, %xmm0
    00000415: 	movdqa	%xmm0, %xmm1
    00000419: 	punpckldq	%xmm7, %xmm0
    0000041d: 	punpckhdq	%xmm7, %xmm1
    00000421: 	paddq	%xmm1, %xmm0
    00000425: 	paddq	%xmm0, %xmm2
    00000429: 	cmpq	%rbx, %rax
    0000042c: 	jne	.Ltmp786 # Offset: 1068
    00000432: 	movsd	init_value(%rip), %xmm0
    0000043a: 	comisd	DATAat0x14338(%rip), %xmm0
    00000442: 	movq	%xmm6, %r15
    00000447: 	jae	.Ltmp787 # Offset: 1095
    0000044d: 	cvttsd2si	%xmm0, %rax
.Ltmp950:
    00000452: 	xorl	%edx, %edx
    00000454: 	movdqa	%xmm2, %xmm0
    00000458: 	divq	%rbp
    0000045b: 	psrldq	$0x8, %xmm0
    00000460: 	paddq	%xmm0, %xmm2
    00000464: 	movq	%xmm2, %rdx
    00000469: 	imulq	$0xfa0, %rax, %rax
    00000470: 	cmpq	%rdx, %rax
    00000473: 	je	.Ltmp788 # Offset: 1139
    00000475: 	movq	0xf0(%rsp), %rdx
    0000047d: 	movq	%r13, %rsi
    00000480: 	movl	$0x1, %edi
    00000485: 	xorl	%eax, %eax
    00000487: 	callq	__printf_chk@PLT # Offset: 1159
    0000048c: 	movl	iterations(%rip), %ecx
.Ltmp788:
    00000492: 	addl	$0x1, %r12d
    00000496: 	cmpl	%ecx, %r12d
    00000499: 	jl	.Ltmp789 # Offset: 1177
.Ltmp785:
    0000049f: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000004a6: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000004ad: 	subq	$0x20, %rax
    000004b1: 	cmpq	%rax, %rdi
    000004b4: 	je	.Ltmp790 # Offset: 1204
    000004ba: 	leaq	0x10(%rdi), %rax
    000004be: 	movq	0xf8(%rsp), %rdx
    000004c6: 	movq	%rax, (%rdi)
    000004c9: 	movq	0xf0(%rsp), %rsi
    000004d1: 	addq	%rsi, %rdx
    000004d4: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1236
    000004d9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000004e0: 	addq	$0x20, %rax
    000004e4: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp988:
    000004eb: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000004f2: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000004f9: 	je	.Ltmp791 # Offset: 1273
.Ltmp987:
    000004ff: 	movq	-0x20(%rax), %r12
    00000503: 	callq	clock@PLT # Offset: 1283
    00000508: 	pxor	%xmm0, %xmm0
    0000050c: 	movq	%rax, end_time(%rip)
    00000513: 	movq	%r12, %rdi
    00000516: 	subq	start_time(%rip), %rax
    0000051d: 	cvtsi2sd	%rax, %xmm0
    00000522: 	divsd	DATAat0x14308(%rip), %xmm0
    0000052a: 	callq	_Z13record_resultdPKc # Offset: 1322
    0000052f: 	movq	0xf0(%rsp), %rdi
    00000537: 	cmpq	0x18(%rsp), %rdi
    0000053c: 	je	.Ltmp792 # Offset: 1340
    0000053e: 	movq	0x100(%rsp), %rax
    00000546: 	leaq	0x1(%rax), %rsi
    0000054a: 	callq	_ZdlPvm@PLT # Offset: 1354
.Ltmp792:
    0000054f: 	movq	0xb0(%rsp), %r13
    00000557: 	leaq	0xe0(%rsp), %rax
    0000055f: 	movq	0xb8(%rsp), %r12
    00000567: 	movq	%rax, 0x70(%rsp)
    0000056c: 	movq	%rax, 0xd0(%rsp)
    00000574: 	movq	%r13, %rax
    00000577: 	addq	%r12, %rax
    0000057a: 	je	.Ltmp793 # Offset: 1402
    0000057c: 	testq	%r13, %r13
    0000057f: 	je	.Ltmp794 # Offset: 1407
.Ltmp793:
    00000585: 	movq	%r12, 0xa8(%rsp)
    0000058d: 	cmpq	$0xf, %r12
    00000591: 	ja	.Ltmp795 # Offset: 1425
    00000597: 	cmpq	$0x1, %r12
    0000059b: 	jne	.Ltmp796 # Offset: 1435
    000005a1: 	movzbl	(%r13), %eax
    000005a6: 	movb	%al, 0xe0(%rsp)
    000005ad: 	movq	0x70(%rsp), %rax
.Ltmp957:
    000005b2: 	movq	%r12, 0xd8(%rsp)
    000005ba: 	movb	$0x0, (%rax,%r12)
    000005bf: 	movabsq	$0x3fffffffffffffff, %rax
    000005c9: 	subq	0xd8(%rsp), %rax
    000005d1: 	cmpq	$0xf, %rax
    000005d5: 	jbe	.Ltmp797 # Offset: 1493
    000005db: 	leaq	0xd0(%rsp), %rax
    000005e3: 	movl	$0x10, %edx
    000005e8: 	leaq	DATAat0x141f1(%rip), %rsi
    000005ef: 	movq	%rax, %rdi
    000005f2: 	movq	%rax, 0x88(%rsp)
    000005fa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1530
    000005ff: 	callq	clock@PLT # Offset: 1535
    00000604: 	movl	iterations(%rip), %r8d
    0000060b: 	movl	$0x0, (%rsp)
    00000612: 	movabsq	$0x2d82d82d82d82d83, %r13
    0000061c: 	movq	%rax, start_time(%rip)
    00000623: 	leaq	0xa8(%rsp), %rax
    0000062b: 	movq	%rax, 0x20(%rsp)
    00000630: 	testl	%r8d, %r8d
    00000633: 	jle	.Ltmp798 # Offset: 1587
    00000639: 	nopl	(%rax) # Size: 7
.Ltmp807:
    00000640: 	movq	0x60(%rsp), %rcx
    00000645: 	xorl	%r12d, %r12d
    00000648: 	nopl	(%rax,%rax) # Size: 8
.Ltmp799:
    00000650: 	movq	%r13, %rax
    00000653: 	mulq	(%rcx)
    00000656: 	addq	$0x8, %rcx
    0000065a: 	shrq	$0x6, %rdx
    0000065e: 	addq	%rdx, %r12
    00000661: 	cmpq	%rbx, %rcx
    00000664: 	jne	.Ltmp799 # Offset: 1636
    00000666: 	movq	0x18(%rsp), %rax
    0000066b: 	movq	0xd0(%rsp), %r15
    00000673: 	movq	0xd8(%rsp), %r14
    0000067b: 	movq	%rax, 0xf0(%rsp)
    00000683: 	movq	%r15, %rax
    00000686: 	addq	%r14, %rax
    00000689: 	je	.Ltmp800 # Offset: 1673
    0000068b: 	testq	%r15, %r15
    0000068e: 	je	.Ltmp801 # Offset: 1678
.Ltmp800:
    00000694: 	movq	%r14, 0xa8(%rsp)
    0000069c: 	cmpq	$0xf, %r14
    000006a0: 	ja	.Ltmp802 # Offset: 1696
    000006a6: 	cmpq	$0x1, %r14
    000006aa: 	jne	.Ltmp803 # Offset: 1706
    000006b0: 	movzbl	(%r15), %eax
    000006b4: 	movb	%al, 0x100(%rsp)
    000006bb: 	movq	0x18(%rsp), %rax
.Ltmp969:
    000006c0: 	movq	%r14, 0xf8(%rsp)
    000006c8: 	movb	$0x0, (%rax,%r14)
    000006cd: 	movsd	init_value(%rip), %xmm0
    000006d5: 	comisd	DATAat0x14338(%rip), %xmm0
    000006dd: 	jae	.Ltmp804 # Offset: 1757
    000006e3: 	cvttsd2si	%xmm0, %rdx
.Ltmp959:
    000006e8: 	movq	%rdx, %rax
    000006eb: 	mulq	%r13
    000006ee: 	shrq	$0x6, %rdx
    000006f2: 	imulq	$0xfa0, %rdx, %rdx
    000006f9: 	cmpq	%rdx, %r12
    000006fc: 	je	.Ltmp805 # Offset: 1788
    000006fe: 	movq	0xf0(%rsp), %rdx
    00000706: 	leaq	DATAat0x141e1(%rip), %rsi
    0000070d: 	movl	$0x1, %edi
    00000712: 	xorl	%eax, %eax
    00000714: 	callq	__printf_chk@PLT # Offset: 1812
.Ltmp805:
    00000719: 	movq	0xf0(%rsp), %rdi
    00000721: 	cmpq	0x18(%rsp), %rdi
    00000726: 	je	.Ltmp806 # Offset: 1830
    0000072c: 	movq	0x100(%rsp), %rax
    00000734: 	leaq	0x1(%rax), %rsi
    00000738: 	callq	_ZdlPvm@PLT # Offset: 1848
    0000073d: 	addl	$0x1, (%rsp)
    00000741: 	movl	(%rsp), %eax
    00000744: 	cmpl	iterations(%rip), %eax
    0000074a: 	jl	.Ltmp807 # Offset: 1866
.Ltmp798:
    00000750: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000757: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    0000075e: 	subq	$0x20, %rax
    00000762: 	cmpq	%rax, %r13
    00000765: 	je	.Ltmp808 # Offset: 1893
    0000076b: 	leaq	0x10(%r13), %rdi
    0000076f: 	movq	0xd8(%rsp), %r12
    00000777: 	movq	%rdi, (%r13)
    0000077b: 	movq	0xd0(%rsp), %r14
    00000783: 	movq	%r14, %rax
    00000786: 	addq	%r12, %rax
    00000789: 	je	.Ltmp809 # Offset: 1929
    0000078b: 	testq	%r14, %r14
    0000078e: 	je	.Ltmp810 # Offset: 1934
.Ltmp809:
    00000794: 	movq	%r12, 0xa8(%rsp)
    0000079c: 	cmpq	$0xf, %r12
    000007a0: 	ja	.Ltmp811 # Offset: 1952
    000007a6: 	cmpq	$0x1, %r12
    000007aa: 	jne	.Ltmp812 # Offset: 1962
    000007b0: 	movzbl	(%r14), %eax
    000007b4: 	movb	%al, 0x10(%r13)
.Ltmp1010:
    000007b8: 	movq	%r12, 0x8(%r13)
    000007bc: 	movb	$0x0, (%rdi,%r12)
    000007c1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000007c8: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000007cf: 	addq	$0x20, %rax
    000007d3: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000007da: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000007e1: 	je	.Ltmp813 # Offset: 2017
.Ltmp991:
    000007e7: 	movq	-0x20(%rax), %r12
    000007eb: 	callq	clock@PLT # Offset: 2027
    000007f0: 	pxor	%xmm0, %xmm0
    000007f4: 	movq	%rax, end_time(%rip)
    000007fb: 	movq	%r12, %rdi
    000007fe: 	subq	start_time(%rip), %rax
    00000805: 	cvtsi2sd	%rax, %xmm0
    0000080a: 	divsd	DATAat0x14308(%rip), %xmm0
    00000812: 	callq	_Z13record_resultdPKc # Offset: 2066
    00000817: 	movq	0xd0(%rsp), %rdi
    0000081f: 	cmpq	0x70(%rsp), %rdi
    00000824: 	je	.Ltmp814 # Offset: 2084
    00000826: 	movq	0xe0(%rsp), %rax
    0000082e: 	leaq	0x1(%rax), %rsi
    00000832: 	callq	_ZdlPvm@PLT # Offset: 2098
.Ltmp814:
    00000837: 	movq	0x70(%rsp), %rax
    0000083c: 	movq	0xb0(%rsp), %r13
    00000844: 	movq	0xb8(%rsp), %r12
    0000084c: 	movq	%rax, 0xd0(%rsp)
    00000854: 	movq	%r13, %rax
    00000857: 	addq	%r12, %rax
    0000085a: 	je	.Ltmp815 # Offset: 2138
    0000085c: 	testq	%r13, %r13
    0000085f: 	je	.Ltmp816 # Offset: 2143
.Ltmp815:
    00000865: 	movq	%r12, 0xa8(%rsp)
    0000086d: 	cmpq	$0xf, %r12
    00000871: 	ja	.Ltmp817 # Offset: 2161
    00000877: 	cmpq	$0x1, %r12
    0000087b: 	jne	.Ltmp818 # Offset: 2171
    00000881: 	movzbl	(%r13), %eax
    00000886: 	movb	%al, 0xe0(%rsp)
    0000088d: 	movq	0x70(%rsp), %rax
.Ltmp982:
    00000892: 	movq	%r12, 0xd8(%rsp)
    0000089a: 	movb	$0x0, (%rax,%r12)
    0000089f: 	movabsq	$0x3fffffffffffffff, %rax
    000008a9: 	subq	0xd8(%rsp), %rax
    000008b1: 	cmpq	$0x1a, %rax
    000008b5: 	jbe	.Ltmp819 # Offset: 2229
    000008bb: 	movq	0x88(%rsp), %rdi
    000008c3: 	movl	$0x1b, %edx
    000008c8: 	leaq	DATAat0x14228(%rip), %rsi
    000008cf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2255
    000008d4: 	callq	clock@PLT # Offset: 2260
    000008d9: 	movl	iterations(%rip), %edi
    000008df: 	movq	%rax, start_time(%rip)
    000008e6: 	testl	%edi, %edi
    000008e8: 	jle	.Ltmp820 # Offset: 2280
    000008ee: 	leaq	0xa8(%rsp), %rax
    000008f6: 	movdqa	DATAat0x143a0(%rip), %xmm3
    000008fe: 	xorl	%r15d, %r15d
    00000901: 	movq	%rax, 0x20(%rsp)
    00000906: 	movaps	%xmm3, (%rsp)
    0000090a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp829:
    00000910: 	movq	0x60(%rsp), %rax
    00000915: 	pxor	%xmm2, %xmm2
    00000919: 	nopl	(%rax) # Size: 7
.Ltmp821:
    00000920: 	movdqa	(%rax), %xmm1
    00000924: 	shufps	$0x88, 0x10(%rax), %xmm1
    00000929: 	pxor	%xmm4, %xmm4
    0000092d: 	addq	$0x20, %rax
    00000931: 	psrld	$0x3, %xmm1
    00000936: 	movdqa	(%rsp), %xmm5
    0000093b: 	movdqa	%xmm1, %xmm0
    0000093f: 	punpckldq	%xmm1, %xmm0
    00000943: 	punpckhdq	%xmm1, %xmm1
    00000947: 	pmuludq	%xmm5, %xmm0
    0000094b: 	pmuludq	%xmm5, %xmm1
    0000094f: 	psrlq	$0x20, %xmm0
    00000954: 	psrlq	$0x20, %xmm1
    00000959: 	shufps	$0x88, %xmm1, %xmm0
    0000095d: 	psrld	$0x2, %xmm0
    00000962: 	movdqa	%xmm0, %xmm1
    00000966: 	punpckldq	%xmm4, %xmm0
    0000096a: 	punpckhdq	%xmm4, %xmm1
    0000096e: 	paddq	%xmm1, %xmm0
    00000972: 	paddq	%xmm0, %xmm2
    00000976: 	cmpq	%rax, %rbx
    00000979: 	jne	.Ltmp821 # Offset: 2425
    0000097b: 	movq	0x18(%rsp), %rax
    00000980: 	movq	0xd0(%rsp), %r14
    00000988: 	movdqa	%xmm2, %xmm0
    0000098c: 	movq	0xd8(%rsp), %r13
    00000994: 	psrldq	$0x8, %xmm0
    00000999: 	movq	%rax, 0xf0(%rsp)
    000009a1: 	movq	%r14, %rax
    000009a4: 	paddq	%xmm0, %xmm2
    000009a8: 	addq	%r13, %rax
    000009ab: 	movq	%xmm2, %r12
    000009b0: 	je	.Ltmp822 # Offset: 2480
    000009b2: 	testq	%r14, %r14
    000009b5: 	je	.Ltmp823 # Offset: 2485
.Ltmp822:
    000009bb: 	movq	%r13, 0xa8(%rsp)
    000009c3: 	cmpq	$0xf, %r13
    000009c7: 	ja	.Ltmp824 # Offset: 2503
    000009cd: 	cmpq	$0x1, %r13
    000009d1: 	jne	.Ltmp825 # Offset: 2513
    000009d7: 	movzbl	(%r14), %eax
    000009db: 	movb	%al, 0x100(%rsp)
    000009e2: 	movq	0x18(%rsp), %rax
.Ltmp971:
    000009e7: 	movq	%r13, 0xf8(%rsp)
    000009ef: 	movb	$0x0, (%rax,%r13)
    000009f4: 	movsd	init_value(%rip), %xmm0
    000009fc: 	comisd	DATAat0x14338(%rip), %xmm0
    00000a04: 	jae	.Ltmp826 # Offset: 2564
    00000a0a: 	cvttsd2si	%xmm0, %rax
.Ltmp960:
    00000a0f: 	shrl	$0x3, %eax
    00000a12: 	imulq	$0x16c16c17, %rax, %rax
    00000a19: 	shrq	$0x22, %rax
    00000a1d: 	imulq	$0xfa0, %rax, %rax
    00000a24: 	cmpq	%r12, %rax
    00000a27: 	je	.Ltmp827 # Offset: 2599
    00000a29: 	movq	0xf0(%rsp), %rdx
    00000a31: 	leaq	DATAat0x141e1(%rip), %rsi
    00000a38: 	movl	$0x1, %edi
    00000a3d: 	xorl	%eax, %eax
    00000a3f: 	callq	__printf_chk@PLT # Offset: 2623
.Ltmp827:
    00000a44: 	movq	0xf0(%rsp), %rdi
    00000a4c: 	cmpq	0x18(%rsp), %rdi
    00000a51: 	je	.Ltmp828 # Offset: 2641
    00000a57: 	movq	0x100(%rsp), %rax
    00000a5f: 	addl	$0x1, %r15d
    00000a63: 	leaq	0x1(%rax), %rsi
    00000a67: 	callq	_ZdlPvm@PLT # Offset: 2663
    00000a6c: 	cmpl	iterations(%rip), %r15d
    00000a73: 	jl	.Ltmp829 # Offset: 2675
.Ltmp820:
    00000a79: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000a80: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000a87: 	subq	$0x20, %rax
    00000a8b: 	cmpq	%rax, %rdi
    00000a8e: 	je	.Ltmp830 # Offset: 2702
    00000a94: 	leaq	0x10(%rdi), %rax
    00000a98: 	movq	0xd8(%rsp), %rdx
    00000aa0: 	movq	%rax, (%rdi)
    00000aa3: 	movq	0xd0(%rsp), %rsi
    00000aab: 	addq	%rsi, %rdx
    00000aae: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 2734
    00000ab3: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000aba: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000ac1: 	addq	$0x20, %rax
    00000ac5: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000acc: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000ad3: 	je	.Ltmp831 # Offset: 2771
.Ltmp992:
    00000ad9: 	movq	-0x20(%rax), %r12
    00000add: 	callq	clock@PLT # Offset: 2781
    00000ae2: 	pxor	%xmm0, %xmm0
    00000ae6: 	movq	%rax, end_time(%rip)
    00000aed: 	movq	%r12, %rdi
    00000af0: 	subq	start_time(%rip), %rax
    00000af7: 	cvtsi2sd	%rax, %xmm0
    00000afc: 	divsd	DATAat0x14308(%rip), %xmm0
    00000b04: 	callq	_Z13record_resultdPKc # Offset: 2820
    00000b09: 	movq	0xd0(%rsp), %rdi
    00000b11: 	cmpq	0x70(%rsp), %rdi
    00000b16: 	je	.Ltmp832 # Offset: 2838
    00000b18: 	movq	0xe0(%rsp), %rax
    00000b20: 	leaq	0x1(%rax), %rsi
    00000b24: 	callq	_ZdlPvm@PLT # Offset: 2852
.Ltmp832:
    00000b29: 	movq	0x80(%rsp), %rsi
    00000b31: 	movq	0x68(%rsp), %rdi
    00000b36: 	leaq	DATAat0x14244(%rip), %rdx
    00000b3d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2877
    00000b42: 	callq	clock@PLT # Offset: 2882
    00000b47: 	movl	iterations(%rip), %edi
    00000b4d: 	xorl	%r12d, %r12d
    00000b50: 	movabsq	$-0x8000000000000000, %r13
    00000b5a: 	movq	%rax, start_time(%rip)
    00000b61: 	leaq	DATAat0x141e1(%rip), %r14
    00000b68: 	testl	%edi, %edi
    00000b6a: 	jle	.Ltmp833 # Offset: 2922
    00000b6c: 	nopl	(%rax) # Size: 4
.Ltmp837:
    00000b70: 	movq	0x60(%rsp), %rcx
    00000b75: 	xorl	%esi, %esi
    00000b77: 	nopw	(%rax,%rax) # Size: 9
.Ltmp834:
    00000b80: 	movq	(%rcx), %rax
    00000b83: 	xorl	%edx, %edx
    00000b85: 	addq	$0x8, %rcx
    00000b89: 	divq	%rbp
    00000b8c: 	addq	%rdx, %rsi
    00000b8f: 	cmpq	%rbx, %rcx
    00000b92: 	jne	.Ltmp834 # Offset: 2962
    00000b94: 	movsd	init_value(%rip), %xmm0
    00000b9c: 	comisd	DATAat0x14338(%rip), %xmm0
    00000ba4: 	jae	.Ltmp835 # Offset: 2980
    00000baa: 	cvttsd2si	%xmm0, %rax
.Ltmp963:
    00000baf: 	xorl	%edx, %edx
    00000bb1: 	divq	%rbp
    00000bb4: 	imulq	$0xfa0, %rdx, %rdx
    00000bbb: 	cmpq	%rdx, %rsi
    00000bbe: 	je	.Ltmp836 # Offset: 3006
    00000bc0: 	movq	0xf0(%rsp), %rdx
    00000bc8: 	movq	%r14, %rsi
    00000bcb: 	movl	$0x1, %edi
    00000bd0: 	xorl	%eax, %eax
    00000bd2: 	callq	__printf_chk@PLT # Offset: 3026
    00000bd7: 	movl	iterations(%rip), %edi
.Ltmp836:
    00000bdd: 	addl	$0x1, %r12d
    00000be1: 	cmpl	%edi, %r12d
    00000be4: 	jl	.Ltmp837 # Offset: 3044
.Ltmp833:
    00000be6: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000bed: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000bf4: 	subq	$0x20, %rax
    00000bf8: 	cmpq	%rax, %rdi
    00000bfb: 	je	.Ltmp838 # Offset: 3067
    00000c01: 	leaq	0x10(%rdi), %rax
    00000c05: 	movq	0xf8(%rsp), %rdx
    00000c0d: 	movq	%rax, (%rdi)
    00000c10: 	movq	0xf0(%rsp), %rsi
    00000c18: 	addq	%rsi, %rdx
    00000c1b: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 3099
    00000c20: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000c27: 	addq	$0x20, %rax
    00000c2b: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp995:
    00000c32: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000c39: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000c40: 	je	.Ltmp839 # Offset: 3136
.Ltmp994:
    00000c46: 	movq	-0x20(%rax), %r12
    00000c4a: 	callq	clock@PLT # Offset: 3146
    00000c4f: 	pxor	%xmm0, %xmm0
    00000c53: 	movq	%rax, end_time(%rip)
    00000c5a: 	movq	%r12, %rdi
    00000c5d: 	subq	start_time(%rip), %rax
    00000c64: 	cvtsi2sd	%rax, %xmm0
    00000c69: 	divsd	DATAat0x14308(%rip), %xmm0
    00000c71: 	callq	_Z13record_resultdPKc # Offset: 3185
    00000c76: 	movq	0xf0(%rsp), %rdi
    00000c7e: 	cmpq	0x18(%rsp), %rdi
    00000c83: 	je	.Ltmp840 # Offset: 3203
    00000c85: 	movq	0x100(%rsp), %rax
    00000c8d: 	leaq	0x1(%rax), %rsi
    00000c91: 	callq	_ZdlPvm@PLT # Offset: 3217
.Ltmp840:
    00000c96: 	movq	0x80(%rsp), %rsi
    00000c9e: 	movq	0x68(%rsp), %rdi
    00000ca3: 	leaq	DATAat0x14255(%rip), %rdx
    00000caa: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3242
    00000caf: 	callq	clock@PLT # Offset: 3247
    00000cb4: 	movl	0x78(%rsp), %ecx
    00000cb8: 	movq	%rax, start_time(%rip)
    00000cbf: 	testl	%ecx, %ecx
    00000cc1: 	je	.Ltmp841 # Offset: 3265
    00000cc7: 	js	.Ltmp842 # Offset: 3271
    00000ccd: 	movl	$0x80000000, %eax
    00000cd2: 	xorl	%edx, %edx
    00000cd4: 	nopl	(%rax) # Size: 4
.Ltmp843:
    00000cd8: 	shrl	%eax
    00000cda: 	addl	$0x1, %edx
    00000cdd: 	testl	%eax, %ecx
    00000cdf: 	je	.Ltmp843 # Offset: 3295
    00000ce1: 	movl	$0x20, %eax
    00000ce6: 	subl	%edx, %eax
    00000ce8: 	movl	%eax, %edi
    00000cea: 	movl	%eax, 0x78(%rsp)
    00000cee: 	movl	$0x1, %eax
    00000cf3: 	movl	%edi, %ecx
    00000cf5: 	shll	%cl, %eax
.Ltmp1015:
    00000cf7: 	cmpl	%eax, 0x50(%rsp)
    00000cfb: 	je	.Ltmp844 # Offset: 3323
    00000d01: 	movl	0x78(%rsp), %eax
    00000d05: 	movl	$0x1, %esi
    00000d0a: 	movl	$0x40, %ecx
    00000d0f: 	testl	%eax, %eax
    00000d11: 	cmovlel	%eax, %esi
    00000d14: 	movl	$0x1f, %eax
    00000d19: 	subl	%edx, %eax
    00000d1b: 	movl	%eax, %edi
    00000d1d: 	movl	$0x0, %eax
    00000d22: 	cmovnsl	%edi, %eax
    00000d25: 	subl	%edx, %ecx
    00000d27: 	movl	%eax, 0x78(%rsp)
    00000d2b: 	movl	$0x1, %eax
    00000d30: 	shlq	%cl, %rax
    00000d33: 	movl	%ebp, %ecx
    00000d35: 	cqto
    00000d37: 	idivq	%rcx
    00000d3a: 	addl	$0x1, %eax
.Ltmp985:
    00000d3d: 	movl	iterations(%rip), %ecx
    00000d43: 	testl	%ecx, %ecx
    00000d45: 	jle	.Ltmp845 # Offset: 3397
    00000d4b: 	movdqa	DATAat0x143b0(%rip), %xmm3
    00000d53: 	movd	%eax, %xmm0
    00000d57: 	movl	0x78(%rsp), %eax
    00000d5b: 	xorl	%r12d, %r12d
    00000d5e: 	movd	0x9c(%rsp), %xmm5
    00000d67: 	movl	%esi, %r15d
    00000d6a: 	movabsq	$-0x8000000000000000, %r14
    00000d74: 	leaq	DATAat0x141e1(%rip), %r13
    00000d7b: 	movaps	%xmm3, (%rsp)
    00000d7f: 	movdqa	%xmm0, %xmm3
    00000d83: 	punpcklqdq	%xmm3, %xmm3
    00000d87: 	pshufd	$0x0, %xmm5, %xmm5
    00000d8c: 	movq	%rax, 0x78(%rsp)
    00000d91: 	movaps	%xmm3, 0x30(%rsp)
    00000d96: 	psrlq	$0x20, %xmm3
    00000d9b: 	movaps	%xmm3, 0x20(%rsp)
    00000da0: 	movdqa	%xmm5, %xmm3
    00000da4: 	psrlq	$0x20, %xmm3
    00000da9: 	movaps	%xmm5, 0x50(%rsp)
    00000dae: 	movaps	%xmm3, 0x40(%rsp)
    00000db3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp849:
    00000db8: 	movq	0x60(%rsp), %rax
    00000dbd: 	movq	0x78(%rsp), %xmm7
    00000dc3: 	pxor	%xmm3, %xmm3
    00000dc7: 	pxor	%xmm4, %xmm4
    00000dcb: 	movq	%r15, %xmm8
.Ltmp846:
    00000dd0: 	movdqa	(%rax), %xmm0
    00000dd4: 	movdqa	(%rsp), %xmm6
    00000dd9: 	addq	$0x20, %rax
    00000ddd: 	movdqa	0x30(%rsp), %xmm9
    00000de4: 	movdqa	0x20(%rsp), %xmm11
    00000deb: 	movdqa	%xmm0, %xmm1
    00000def: 	pand	%xmm6, %xmm0
    00000df3: 	pand	-0x10(%rax), %xmm6
    00000df8: 	shufps	$0x88, -0x10(%rax), %xmm1
    00000dfd: 	movdqa	%xmm0, %xmm5
    00000e01: 	movdqa	%xmm9, %xmm2
    00000e06: 	psrlq	$0x20, %xmm5
    00000e0b: 	pmuludq	%xmm0, %xmm2
    00000e0f: 	pmuludq	%xmm9, %xmm5
    00000e14: 	pmuludq	%xmm11, %xmm0
    00000e19: 	paddq	%xmm0, %xmm5
    00000e1d: 	movdqa	%xmm6, %xmm0
    00000e21: 	movdqa	%xmm9, %xmm6
    00000e26: 	psllq	$0x20, %xmm5
    00000e2b: 	pmuludq	%xmm0, %xmm6
    00000e2f: 	paddq	%xmm5, %xmm2
    00000e33: 	movdqa	%xmm0, %xmm5
    00000e37: 	psrlq	$0x20, %xmm5
    00000e3c: 	pmuludq	%xmm11, %xmm0
    00000e41: 	pmuludq	%xmm9, %xmm5
    00000e46: 	psrlq	$0x20, %xmm2
    00000e4b: 	paddq	%xmm0, %xmm5
    00000e4f: 	psllq	$0x20, %xmm5
    00000e54: 	paddq	%xmm5, %xmm6
    00000e58: 	movdqa	%xmm6, %xmm0
    00000e5c: 	psrlq	$0x20, %xmm0
    00000e61: 	shufps	$0x88, %xmm0, %xmm2
    00000e65: 	movdqa	%xmm1, %xmm0
    00000e69: 	psubd	%xmm2, %xmm0
    00000e6d: 	psrld	%xmm8, %xmm0
    00000e72: 	paddd	%xmm2, %xmm0
    00000e76: 	movdqa	0x50(%rsp), %xmm2
    00000e7c: 	psrld	%xmm7, %xmm0
    00000e80: 	pmuludq	%xmm0, %xmm2
    00000e84: 	psrlq	$0x20, %xmm0
    00000e89: 	pmuludq	0x40(%rsp), %xmm0
    00000e8f: 	pshufd	$0x8, %xmm0, %xmm0
    00000e94: 	pshufd	$0x8, %xmm2, %xmm2
    00000e99: 	punpckldq	%xmm0, %xmm2
    00000e9d: 	psubd	%xmm2, %xmm1
    00000ea1: 	movdqa	%xmm1, %xmm0
    00000ea5: 	punpckhdq	%xmm4, %xmm1
    00000ea9: 	punpckldq	%xmm4, %xmm0
    00000ead: 	paddq	%xmm1, %xmm0
    00000eb1: 	paddq	%xmm0, %xmm3
    00000eb5: 	cmpq	%rbx, %rax
    00000eb8: 	jne	.Ltmp846 # Offset: 3768
    00000ebe: 	movsd	init_value(%rip), %xmm0
    00000ec6: 	comisd	DATAat0x14338(%rip), %xmm0
    00000ece: 	movq	%xmm8, %r15
    00000ed3: 	jae	.Ltmp847 # Offset: 3795
    00000ed9: 	cvttsd2si	%xmm0, %rax
.Ltmp962:
    00000ede: 	xorl	%edx, %edx
    00000ee0: 	movdqa	%xmm3, %xmm0
    00000ee4: 	divq	%rbp
    00000ee7: 	psrldq	$0x8, %xmm0
    00000eec: 	paddq	%xmm0, %xmm3
    00000ef0: 	movq	%xmm3, %rax
    00000ef5: 	imulq	$0xfa0, %rdx, %rdx
    00000efc: 	cmpq	%rax, %rdx
    00000eff: 	je	.Ltmp848 # Offset: 3839
    00000f01: 	movq	0xf0(%rsp), %rdx
    00000f09: 	movq	%r13, %rsi
    00000f0c: 	movl	$0x1, %edi
    00000f11: 	xorl	%eax, %eax
    00000f13: 	callq	__printf_chk@PLT # Offset: 3859
    00000f18: 	movl	iterations(%rip), %ecx
.Ltmp848:
    00000f1e: 	addl	$0x1, %r12d
    00000f22: 	cmpl	%ecx, %r12d
    00000f25: 	jl	.Ltmp849 # Offset: 3877
.Ltmp845:
    00000f2b: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000f32: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    00000f39: 	subq	$0x20, %rax
    00000f3d: 	cmpq	%rax, %r13
    00000f40: 	je	.Ltmp850 # Offset: 3904
    00000f46: 	leaq	0x10(%r13), %rdi
    00000f4a: 	movq	0xf8(%rsp), %r12
    00000f52: 	movq	%rdi, (%r13)
    00000f56: 	movq	0xf0(%rsp), %r14
    00000f5e: 	movq	%r14, %rax
    00000f61: 	addq	%r12, %rax
    00000f64: 	je	.Ltmp851 # Offset: 3940
    00000f66: 	testq	%r14, %r14
    00000f69: 	je	.Ltmp852 # Offset: 3945
.Ltmp851:
    00000f6f: 	movq	%r12, 0xa8(%rsp)
    00000f77: 	cmpq	$0xf, %r12
    00000f7b: 	ja	.Ltmp853 # Offset: 3963
    00000f81: 	cmpq	$0x1, %r12
    00000f85: 	jne	.Ltmp854 # Offset: 3973
    00000f8b: 	movzbl	(%r14), %eax
    00000f8f: 	movb	%al, 0x10(%r13)
.Ltmp1008:
    00000f93: 	movq	%r12, 0x8(%r13)
    00000f97: 	movb	$0x0, (%rdi,%r12)
    00000f9c: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000fa3: 	addq	$0x20, %rax
    00000fa7: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp997:
    00000fae: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000fb5: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000fbc: 	je	.Ltmp855 # Offset: 4028
.Ltmp996:
    00000fc2: 	movq	-0x20(%rax), %r12
    00000fc6: 	callq	clock@PLT # Offset: 4038
    00000fcb: 	pxor	%xmm0, %xmm0
    00000fcf: 	movq	%rax, end_time(%rip)
    00000fd6: 	movq	%r12, %rdi
    00000fd9: 	subq	start_time(%rip), %rax
    00000fe0: 	cvtsi2sd	%rax, %xmm0
    00000fe5: 	divsd	DATAat0x14308(%rip), %xmm0
    00000fed: 	callq	_Z13record_resultdPKc # Offset: 4077
    00000ff2: 	movq	0xf0(%rsp), %rdi
    00000ffa: 	cmpq	0x18(%rsp), %rdi
    00000fff: 	je	.Ltmp856 # Offset: 4095
    00001001: 	movq	0x100(%rsp), %rax
    00001009: 	leaq	0x1(%rax), %rsi
    0000100d: 	callq	_ZdlPvm@PLT # Offset: 4109
.Ltmp856:
    00001012: 	movq	0x80(%rsp), %rsi
    0000101a: 	movq	0x88(%rsp), %rdi
    00001022: 	leaq	DATAat0x14271(%rip), %rdx
    00001029: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4137
    0000102e: 	callq	clock@PLT # Offset: 4142
    00001033: 	movl	iterations(%rip), %esi
    00001039: 	movl	$0x0, (%rsp)
    00001040: 	movabsq	$0x2d82d82d82d82d83, %r13
    0000104a: 	movq	%rax, start_time(%rip)
    00001051: 	leaq	0xa8(%rsp), %rax
    00001059: 	movq	%rax, 0x20(%rsp)
    0000105e: 	testl	%esi, %esi
    00001060: 	jle	.Ltmp857 # Offset: 4192
    00001066: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp866:
    00001070: 	movq	0x60(%rsp), %rsi
    00001075: 	xorl	%r12d, %r12d
    00001078: 	nopl	(%rax,%rax) # Size: 8
.Ltmp858:
    00001080: 	movq	(%rsi), %rcx
    00001083: 	addq	$0x8, %rsi
    00001087: 	movq	%rcx, %rax
    0000108a: 	mulq	%r13
    0000108d: 	shrq	$0x6, %rdx
    00001091: 	imulq	$0x168, %rdx, %rdx
    00001098: 	subq	%rdx, %rcx
    0000109b: 	addq	%rcx, %r12
    0000109e: 	cmpq	%rbx, %rsi
    000010a1: 	jne	.Ltmp858 # Offset: 4257
    000010a3: 	movq	0x18(%rsp), %rax
    000010a8: 	movq	0xd0(%rsp), %r15
    000010b0: 	movq	0xd8(%rsp), %r14
    000010b8: 	movq	%rax, 0xf0(%rsp)
    000010c0: 	movq	%r15, %rax
    000010c3: 	addq	%r14, %rax
    000010c6: 	je	.Ltmp859 # Offset: 4294
    000010c8: 	testq	%r15, %r15
    000010cb: 	je	.Ltmp860 # Offset: 4299
.Ltmp859:
    000010d1: 	movq	%r14, 0xa8(%rsp)
    000010d9: 	cmpq	$0xf, %r14
    000010dd: 	ja	.Ltmp861 # Offset: 4317
    000010e3: 	cmpq	$0x1, %r14
    000010e7: 	jne	.Ltmp862 # Offset: 4327
    000010ed: 	movzbl	(%r15), %eax
    000010f1: 	movb	%al, 0x100(%rsp)
    000010f8: 	movq	0x18(%rsp), %rax
.Ltmp973:
    000010fd: 	movq	%r14, 0xf8(%rsp)
    00001105: 	movb	$0x0, (%rax,%r14)
    0000110a: 	movsd	init_value(%rip), %xmm0
    00001112: 	comisd	DATAat0x14338(%rip), %xmm0
    0000111a: 	jae	.Ltmp863 # Offset: 4378
    00001120: 	cvttsd2si	%xmm0, %rcx
.Ltmp961:
    00001125: 	movq	%rcx, %rax
    00001128: 	mulq	%r13
    0000112b: 	shrq	$0x6, %rdx
    0000112f: 	imulq	$0x168, %rdx, %rdx
    00001136: 	subq	%rdx, %rcx
    00001139: 	imulq	$0xfa0, %rcx, %rcx
    00001140: 	cmpq	%rcx, %r12
    00001143: 	je	.Ltmp864 # Offset: 4419
    00001145: 	movq	0xf0(%rsp), %rdx
    0000114d: 	leaq	DATAat0x141e1(%rip), %rsi
    00001154: 	movl	$0x1, %edi
    00001159: 	xorl	%eax, %eax
    0000115b: 	callq	__printf_chk@PLT # Offset: 4443
.Ltmp864:
    00001160: 	movq	0xf0(%rsp), %rdi
    00001168: 	cmpq	0x18(%rsp), %rdi
    0000116d: 	je	.Ltmp865 # Offset: 4461
    00001173: 	movq	0x100(%rsp), %rax
    0000117b: 	leaq	0x1(%rax), %rsi
    0000117f: 	callq	_ZdlPvm@PLT # Offset: 4479
    00001184: 	addl	$0x1, (%rsp)
    00001188: 	movl	(%rsp), %eax
    0000118b: 	cmpl	iterations(%rip), %eax
    00001191: 	jl	.Ltmp866 # Offset: 4497
.Ltmp857:
    00001197: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000119e: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    000011a5: 	subq	$0x20, %rax
    000011a9: 	cmpq	%rax, %r13
    000011ac: 	je	.Ltmp867 # Offset: 4524
    000011b2: 	leaq	0x10(%r13), %rdi
    000011b6: 	movq	0xd8(%rsp), %r12
    000011be: 	movq	%rdi, (%r13)
    000011c2: 	movq	0xd0(%rsp), %r14
    000011ca: 	movq	%r14, %rax
    000011cd: 	addq	%r12, %rax
    000011d0: 	je	.Ltmp868 # Offset: 4560
    000011d2: 	testq	%r14, %r14
    000011d5: 	je	.Ltmp869 # Offset: 4565
.Ltmp868:
    000011db: 	movq	%r12, 0xa8(%rsp)
    000011e3: 	cmpq	$0xf, %r12
    000011e7: 	ja	.Ltmp870 # Offset: 4583
    000011ed: 	cmpq	$0x1, %r12
    000011f1: 	jne	.Ltmp871 # Offset: 4593
    000011f7: 	movzbl	(%r14), %eax
    000011fb: 	movb	%al, 0x10(%r13)
.Ltmp1012:
    000011ff: 	movq	%r12, 0x8(%r13)
    00001203: 	movb	$0x0, (%rdi,%r12)
    00001208: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000120f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001216: 	addq	$0x20, %rax
    0000121a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001221: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00001228: 	je	.Ltmp872 # Offset: 4648
.Ltmp999:
    0000122e: 	movq	-0x20(%rax), %r12
    00001232: 	callq	clock@PLT # Offset: 4658
    00001237: 	pxor	%xmm0, %xmm0
    0000123b: 	movq	%rax, end_time(%rip)
    00001242: 	movq	%r12, %rdi
    00001245: 	subq	start_time(%rip), %rax
    0000124c: 	cvtsi2sd	%rax, %xmm0
    00001251: 	divsd	DATAat0x14308(%rip), %xmm0
    00001259: 	callq	_Z13record_resultdPKc # Offset: 4697
    0000125e: 	movq	0xd0(%rsp), %rdi
    00001266: 	cmpq	0x70(%rsp), %rdi
    0000126b: 	je	.Ltmp873 # Offset: 4715
    0000126d: 	movq	0xe0(%rsp), %rax
    00001275: 	leaq	0x1(%rax), %rsi
    00001279: 	callq	_ZdlPvm@PLT # Offset: 4729
.Ltmp873:
    0000127e: 	movq	0x80(%rsp), %rsi
    00001286: 	movq	0x88(%rsp), %rdi
    0000128e: 	leaq	DATAat0x14282(%rip), %rdx
    00001295: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4757
    0000129a: 	callq	clock@PLT # Offset: 4762
    0000129f: 	movl	iterations(%rip), %ecx
    000012a5: 	movq	%rax, start_time(%rip)
    000012ac: 	testl	%ecx, %ecx
    000012ae: 	jle	.Ltmp874 # Offset: 4782
    000012b4: 	leaq	0xa8(%rsp), %rax
    000012bc: 	movdqa	DATAat0x143a0(%rip), %xmm3
    000012c4: 	xorl	%r15d, %r15d
    000012c7: 	movq	%rax, 0x20(%rsp)
    000012cc: 	movaps	%xmm3, (%rsp)
.Ltmp883:
    000012d0: 	movq	0x60(%rsp), %rax
    000012d5: 	pxor	%xmm3, %xmm3
    000012d9: 	nopl	(%rax) # Size: 7
.Ltmp875:
    000012e0: 	movdqa	(%rax), %xmm0
    000012e4: 	shufps	$0x88, 0x10(%rax), %xmm0
    000012e9: 	movdqa	%xmm0, %xmm2
    000012ed: 	pxor	%xmm6, %xmm6
    000012f1: 	psrld	$0x3, %xmm2
    000012f6: 	movdqa	(%rsp), %xmm7
    000012fb: 	addq	$0x20, %rax
    000012ff: 	movdqa	%xmm2, %xmm1
    00001303: 	punpckldq	%xmm2, %xmm1
    00001307: 	punpckhdq	%xmm2, %xmm2
    0000130b: 	pmuludq	%xmm7, %xmm1
    0000130f: 	pmuludq	%xmm7, %xmm2
    00001313: 	psrlq	$0x20, %xmm1
    00001318: 	psrlq	$0x20, %xmm2
    0000131d: 	shufps	$0x88, %xmm2, %xmm1
    00001321: 	psrld	$0x2, %xmm1
    00001326: 	movdqa	%xmm1, %xmm2
    0000132a: 	pslld	$0x1, %xmm2
    0000132f: 	paddd	%xmm1, %xmm2
    00001333: 	movdqa	%xmm2, %xmm1
    00001337: 	pslld	$0x4, %xmm1
    0000133c: 	psubd	%xmm2, %xmm1
    00001340: 	pslld	$0x3, %xmm1
    00001345: 	psubd	%xmm1, %xmm0
    00001349: 	movdqa	%xmm0, %xmm1
    0000134d: 	punpckldq	%xmm6, %xmm0
    00001351: 	punpckhdq	%xmm6, %xmm1
    00001355: 	paddq	%xmm1, %xmm0
    00001359: 	paddq	%xmm0, %xmm3
    0000135d: 	cmpq	%rax, %rbx
    00001360: 	jne	.Ltmp875 # Offset: 4960
    00001366: 	movq	0x18(%rsp), %rax
    0000136b: 	movq	0xd0(%rsp), %r14
    00001373: 	movdqa	%xmm3, %xmm0
    00001377: 	movq	0xd8(%rsp), %r13
    0000137f: 	psrldq	$0x8, %xmm0
    00001384: 	movq	%rax, 0xf0(%rsp)
    0000138c: 	movq	%r14, %rax
    0000138f: 	paddq	%xmm0, %xmm3
    00001393: 	addq	%r13, %rax
    00001396: 	movq	%xmm3, %r12
    0000139b: 	je	.Ltmp876 # Offset: 5019
    0000139d: 	testq	%r14, %r14
    000013a0: 	je	.Ltmp877 # Offset: 5024
.Ltmp876:
    000013a6: 	movq	%r13, 0xa8(%rsp)
    000013ae: 	cmpq	$0xf, %r13
    000013b2: 	ja	.Ltmp878 # Offset: 5042
    000013b8: 	cmpq	$0x1, %r13
    000013bc: 	jne	.Ltmp879 # Offset: 5052
    000013c2: 	movzbl	(%r14), %eax
    000013c6: 	movb	%al, 0x100(%rsp)
    000013cd: 	movq	0x18(%rsp), %rax
.Ltmp977:
    000013d2: 	movq	%r13, 0xf8(%rsp)
    000013da: 	movb	$0x0, (%rax,%r13)
    000013df: 	movsd	init_value(%rip), %xmm0
    000013e7: 	comisd	DATAat0x14338(%rip), %xmm0
    000013ef: 	jae	.Ltmp880 # Offset: 5103
    000013f5: 	cvttsd2si	%xmm0, %rdx
.Ltmp965:
    000013fa: 	movl	%edx, %eax
    000013fc: 	shrl	$0x3, %eax
    000013ff: 	imulq	$0x16c16c17, %rax, %rax
    00001406: 	shrq	$0x22, %rax
    0000140a: 	imull	$0x168, %eax, %eax
    00001410: 	subl	%eax, %edx
    00001412: 	imulq	$0xfa0, %rdx, %rdx
    00001419: 	cmpq	%r12, %rdx
    0000141c: 	je	.Ltmp881 # Offset: 5148
    0000141e: 	movq	0xf0(%rsp), %rdx
    00001426: 	leaq	DATAat0x141e1(%rip), %rsi
    0000142d: 	movl	$0x1, %edi
    00001432: 	xorl	%eax, %eax
    00001434: 	callq	__printf_chk@PLT # Offset: 5172
.Ltmp881:
    00001439: 	movq	0xf0(%rsp), %rdi
    00001441: 	cmpq	0x18(%rsp), %rdi
    00001446: 	je	.Ltmp882 # Offset: 5190
    0000144c: 	movq	0x100(%rsp), %rax
    00001454: 	addl	$0x1, %r15d
    00001458: 	leaq	0x1(%rax), %rsi
    0000145c: 	callq	_ZdlPvm@PLT # Offset: 5212
    00001461: 	cmpl	iterations(%rip), %r15d
    00001468: 	jl	.Ltmp883 # Offset: 5224
.Ltmp874:
    0000146e: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001475: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    0000147c: 	subq	$0x20, %rax
    00001480: 	cmpq	%rax, %rdi
    00001483: 	je	.Ltmp884 # Offset: 5251
    00001489: 	leaq	0x10(%rdi), %rax
    0000148d: 	movq	0xd8(%rsp), %rdx
    00001495: 	movq	%rax, (%rdi)
    00001498: 	movq	0xd0(%rsp), %rsi
    000014a0: 	addq	%rsi, %rdx
    000014a3: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 5283
    000014a8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000014af: 	addq	$0x20, %rax
    000014b3: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1000:
    000014ba: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000014c1: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000014c8: 	je	.Ltmp885 # Offset: 5320
.Ltmp998:
    000014ce: 	movq	-0x20(%rax), %r12
    000014d2: 	callq	clock@PLT # Offset: 5330
    000014d7: 	pxor	%xmm0, %xmm0
    000014db: 	movq	%rax, end_time(%rip)
    000014e2: 	movq	%r12, %rdi
    000014e5: 	subq	start_time(%rip), %rax
    000014ec: 	cvtsi2sd	%rax, %xmm0
    000014f1: 	divsd	DATAat0x14308(%rip), %xmm0
    000014f9: 	callq	_Z13record_resultdPKc # Offset: 5369
    000014fe: 	movq	0xd0(%rsp), %rdi
    00001506: 	cmpq	0x70(%rsp), %rdi
    0000150b: 	je	.Ltmp886 # Offset: 5387
    0000150d: 	movq	0xe0(%rsp), %rax
    00001515: 	leaq	0x1(%rax), %rsi
    00001519: 	callq	_ZdlPvm@PLT # Offset: 5401
.Ltmp886:
    0000151e: 	movq	0x18(%rsp), %rax
    00001523: 	movq	0xb0(%rsp), %r13
    0000152b: 	movq	0xb8(%rsp), %r12
    00001533: 	movq	%rax, 0xf0(%rsp)
    0000153b: 	movq	%r13, %rax
    0000153e: 	addq	%r12, %rax
    00001541: 	je	.Ltmp887 # Offset: 5441
    00001543: 	testq	%r13, %r13
    00001546: 	je	.Ltmp888 # Offset: 5446
.Ltmp887:
    0000154c: 	movq	%r12, 0xa8(%rsp)
    00001554: 	cmpq	$0xf, %r12
    00001558: 	ja	.Ltmp889 # Offset: 5464
    0000155e: 	cmpq	$0x1, %r12
    00001562: 	jne	.Ltmp890 # Offset: 5474
    00001568: 	movzbl	(%r13), %eax
    0000156d: 	movb	%al, 0x100(%rsp)
    00001574: 	movq	0x18(%rsp), %rax
.Ltmp984:
    00001579: 	movq	%r12, 0xf8(%rsp)
    00001581: 	movb	$0x0, (%rax,%r12)
    00001586: 	movabsq	$0x3fffffffffffffff, %rax
    00001590: 	subq	0xf8(%rsp), %rax
    00001598: 	cmpq	$0x15, %rax
    0000159c: 	jbe	.Ltmp891 # Offset: 5532
    000015a2: 	movq	0x68(%rsp), %rdi
    000015a7: 	movl	$0x16, %edx
    000015ac: 	leaq	DATAat0x1429e(%rip), %rsi
    000015b3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 5555
    000015b8: 	callq	clock@PLT # Offset: 5560
    000015bd: 	movl	iterations(%rip), %edi
    000015c3: 	xorl	%r12d, %r12d
    000015c6: 	movabsq	$-0x8000000000000000, %r13
    000015d0: 	movq	%rax, start_time(%rip)
    000015d7: 	leaq	DATAat0x141e1(%rip), %r14
    000015de: 	testl	%edi, %edi
    000015e0: 	jle	.Ltmp892 # Offset: 5600
    000015e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp896:
    000015e8: 	movq	0x60(%rsp), %rcx
    000015ed: 	xorl	%esi, %esi
    000015ef: 	nop # Size: 1
.Ltmp893:
    000015f0: 	movq	(%rcx), %rax
    000015f3: 	xorl	%edx, %edx
    000015f5: 	addq	$0x8, %rcx
    000015f9: 	divq	%rbp
    000015fc: 	addq	%rdx, %rax
    000015ff: 	addq	%rax, %rsi
    00001602: 	cmpq	%rbx, %rcx
    00001605: 	jne	.Ltmp893 # Offset: 5637
    00001607: 	movsd	init_value(%rip), %xmm0
    0000160f: 	comisd	DATAat0x14338(%rip), %xmm0
    00001617: 	jae	.Ltmp894 # Offset: 5655
    0000161d: 	cvttsd2si	%xmm0, %rax
.Ltmp964:
    00001622: 	xorl	%edx, %edx
    00001624: 	divq	%rbp
    00001627: 	addq	%rdx, %rax
    0000162a: 	imulq	$0xfa0, %rax, %rax
    00001631: 	cmpq	%rax, %rsi
    00001634: 	je	.Ltmp895 # Offset: 5684
    00001636: 	movq	0xf0(%rsp), %rdx
    0000163e: 	movq	%r14, %rsi
    00001641: 	movl	$0x1, %edi
    00001646: 	xorl	%eax, %eax
    00001648: 	callq	__printf_chk@PLT # Offset: 5704
    0000164d: 	movl	iterations(%rip), %edi
.Ltmp895:
    00001653: 	addl	$0x1, %r12d
    00001657: 	cmpl	%edi, %r12d
    0000165a: 	jl	.Ltmp896 # Offset: 5722
.Ltmp892:
    0000165c: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001663: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    0000166a: 	subq	$0x20, %rax
    0000166e: 	cmpq	%rax, %rbp
    00001671: 	je	.Ltmp897 # Offset: 5745
    00001677: 	leaq	0x10(%rbp), %rdi
    0000167b: 	movq	0xf8(%rsp), %r12
    00001683: 	movq	%rdi, (%rbp)
    00001687: 	movq	0xf0(%rsp), %r13
    0000168f: 	movq	%r13, %rax
    00001692: 	addq	%r12, %rax
    00001695: 	je	.Ltmp898 # Offset: 5781
    00001697: 	testq	%r13, %r13
    0000169a: 	je	.Ltmp899 # Offset: 5786
.Ltmp898:
    000016a0: 	movq	%r12, 0xa8(%rsp)
    000016a8: 	cmpq	$0xf, %r12
    000016ac: 	ja	.Ltmp900 # Offset: 5804
    000016b2: 	cmpq	$0x1, %r12
    000016b6: 	jne	.Ltmp901 # Offset: 5814
    000016bc: 	movzbl	(%r13), %eax
    000016c1: 	movb	%al, 0x10(%rbp)
.Ltmp1004:
    000016c4: 	movq	%r12, 0x8(%rbp)
    000016c8: 	movb	$0x0, (%rdi,%r12)
    000016cd: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000016d4: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000016db: 	addq	$0x20, %rax
    000016df: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000016e6: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000016ed: 	je	.Ltmp902 # Offset: 5869
.Ltmp1001:
    000016f3: 	movq	-0x20(%rax), %rbp
    000016f7: 	callq	clock@PLT # Offset: 5879
    000016fc: 	pxor	%xmm0, %xmm0
    00001700: 	movq	%rax, end_time(%rip)
    00001707: 	movq	%rbp, %rdi
    0000170a: 	subq	start_time(%rip), %rax
    00001711: 	cvtsi2sd	%rax, %xmm0
    00001716: 	divsd	DATAat0x14308(%rip), %xmm0
    0000171e: 	callq	_Z13record_resultdPKc # Offset: 5918
    00001723: 	movq	0xf0(%rsp), %rdi
    0000172b: 	cmpq	0x18(%rsp), %rdi
    00001730: 	je	.Ltmp903 # Offset: 5936
    00001732: 	movq	0x100(%rsp), %rax
    0000173a: 	leaq	0x1(%rax), %rsi
    0000173e: 	callq	_ZdlPvm@PLT # Offset: 5950
.Ltmp903:
    00001743: 	movq	0x80(%rsp), %rsi
    0000174b: 	movq	0x88(%rsp), %rdi
    00001753: 	leaq	DATAat0x142d0(%rip), %rdx
    0000175a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5978
    0000175f: 	callq	clock@PLT # Offset: 5983
    00001764: 	movl	iterations(%rip), %edx
    0000176a: 	movq	%rax, start_time(%rip)
    00001771: 	testl	%edx, %edx
    00001773: 	jle	.Ltmp904 # Offset: 6003
    00001779: 	leaq	0xa8(%rsp), %rax
    00001781: 	movdqa	DATAat0x143a0(%rip), %xmm3
    00001789: 	xorl	%r14d, %r14d
    0000178c: 	leaq	DATAat0x141e1(%rip), %r15
    00001793: 	movq	%rax, 0x20(%rsp)
    00001798: 	movaps	%xmm3, (%rsp)
    0000179c: 	nopl	(%rax) # Size: 4
.Ltmp913:
    000017a0: 	movq	0x60(%rsp), %rax
    000017a5: 	pxor	%xmm3, %xmm3
    000017a9: 	nopl	(%rax) # Size: 7
.Ltmp905:
    000017b0: 	movdqa	(%rax), %xmm0
    000017b4: 	shufps	$0x88, 0x10(%rax), %xmm0
    000017b9: 	movdqa	%xmm0, %xmm2
    000017bd: 	pxor	%xmm7, %xmm7
    000017c1: 	psrld	$0x3, %xmm2
    000017c6: 	movdqa	(%rsp), %xmm4
    000017cb: 	addq	$0x20, %rax
    000017cf: 	movdqa	%xmm2, %xmm1
    000017d3: 	punpckldq	%xmm2, %xmm1
    000017d7: 	punpckhdq	%xmm2, %xmm2
    000017db: 	pmuludq	%xmm4, %xmm1
    000017df: 	pmuludq	%xmm4, %xmm2
    000017e3: 	psrlq	$0x20, %xmm1
    000017e8: 	psrlq	$0x20, %xmm2
    000017ed: 	shufps	$0x88, %xmm2, %xmm1
    000017f1: 	psrld	$0x2, %xmm1
    000017f6: 	movdqa	%xmm1, %xmm2
    000017fa: 	paddd	%xmm1, %xmm0
    000017fe: 	pslld	$0x1, %xmm2
    00001803: 	paddd	%xmm1, %xmm2
    00001807: 	movdqa	%xmm2, %xmm1
    0000180b: 	pslld	$0x4, %xmm1
    00001810: 	psubd	%xmm2, %xmm1
    00001814: 	pslld	$0x3, %xmm1
    00001819: 	psubd	%xmm1, %xmm0
    0000181d: 	movdqa	%xmm0, %xmm1
    00001821: 	punpckldq	%xmm7, %xmm0
    00001825: 	punpckhdq	%xmm7, %xmm1
    00001829: 	paddq	%xmm1, %xmm0
    0000182d: 	paddq	%xmm0, %xmm3
    00001831: 	cmpq	%rbx, %rax
    00001834: 	jne	.Ltmp905 # Offset: 6196
    0000183a: 	movq	0x18(%rsp), %rax
    0000183f: 	movq	0xd0(%rsp), %r13
    00001847: 	movdqa	%xmm3, %xmm0
    0000184b: 	movq	0xd8(%rsp), %r12
    00001853: 	psrldq	$0x8, %xmm0
    00001858: 	movq	%rax, 0xf0(%rsp)
    00001860: 	movq	%r13, %rax
    00001863: 	paddq	%xmm0, %xmm3
    00001867: 	addq	%r12, %rax
    0000186a: 	movq	%xmm3, %rbp
    0000186f: 	je	.Ltmp906 # Offset: 6255
    00001871: 	testq	%r13, %r13
    00001874: 	je	.Ltmp907 # Offset: 6260
.Ltmp906:
    0000187a: 	movq	%r12, 0xa8(%rsp)
    00001882: 	cmpq	$0xf, %r12
    00001886: 	ja	.Ltmp908 # Offset: 6278
    0000188c: 	cmpq	$0x1, %r12
    00001890: 	jne	.Ltmp909 # Offset: 6288
    00001896: 	movzbl	(%r13), %eax
    0000189b: 	movb	%al, 0x100(%rsp)
    000018a2: 	movq	0x18(%rsp), %rax
.Ltmp975:
    000018a7: 	movq	%r12, 0xf8(%rsp)
    000018af: 	movb	$0x0, (%rax,%r12)
    000018b4: 	movsd	init_value(%rip), %xmm0
    000018bc: 	comisd	DATAat0x14338(%rip), %xmm0
    000018c4: 	jae	.Ltmp910 # Offset: 6340
    000018ca: 	cvttsd2si	%xmm0, %rdx
.Ltmp967:
    000018cf: 	movl	%edx, %eax
    000018d1: 	shrl	$0x3, %eax
    000018d4: 	imulq	$0x16c16c17, %rax, %rax
    000018db: 	shrq	$0x22, %rax
    000018df: 	imull	$0xfffffe99, %eax, %eax
    000018e5: 	addl	%edx, %eax
    000018e7: 	movl	%eax, %eax
    000018e9: 	imulq	$0xfa0, %rax, %rax
    000018f0: 	cmpq	%rbp, %rax
    000018f3: 	je	.Ltmp911 # Offset: 6387
    000018f5: 	movq	0xf0(%rsp), %rdx
    000018fd: 	movq	%r15, %rsi
    00001900: 	movl	$0x1, %edi
    00001905: 	xorl	%eax, %eax
    00001907: 	callq	__printf_chk@PLT # Offset: 6407
.Ltmp911:
    0000190c: 	movq	0xf0(%rsp), %rdi
    00001914: 	cmpq	0x18(%rsp), %rdi
    00001919: 	je	.Ltmp912 # Offset: 6425
    0000191f: 	movq	0x100(%rsp), %rax
    00001927: 	addl	$0x1, %r14d
    0000192b: 	leaq	0x1(%rax), %rsi
    0000192f: 	callq	_ZdlPvm@PLT # Offset: 6447
    00001934: 	cmpl	iterations(%rip), %r14d
    0000193b: 	jl	.Ltmp913 # Offset: 6459
.Ltmp904:
    00001941: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001948: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    0000194f: 	subq	$0x20, %rax
    00001953: 	cmpq	%rax, %rdi
    00001956: 	je	.Ltmp914 # Offset: 6486
    0000195c: 	leaq	0x10(%rdi), %rax
    00001960: 	movq	0xd8(%rsp), %rdx
    00001968: 	movq	%rax, (%rdi)
    0000196b: 	movq	0xd0(%rsp), %rsi
    00001973: 	addq	%rsi, %rdx
    00001976: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 6518
    0000197b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001982: 	addq	$0x20, %rax
    00001986: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp993:
    0000198d: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001994: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000199b: 	je	.Ltmp915 # Offset: 6555
.Ltmp989:
    000019a1: 	movq	-0x20(%rax), %rbp
    000019a5: 	callq	clock@PLT # Offset: 6565
    000019aa: 	pxor	%xmm0, %xmm0
    000019ae: 	movq	%rax, end_time(%rip)
    000019b5: 	movq	%rbp, %rdi
    000019b8: 	subq	start_time(%rip), %rax
    000019bf: 	cvtsi2sd	%rax, %xmm0
    000019c4: 	divsd	DATAat0x14308(%rip), %xmm0
    000019cc: 	callq	_Z13record_resultdPKc # Offset: 6604
    000019d1: 	movq	0xd0(%rsp), %rdi
    000019d9: 	cmpq	0x70(%rsp), %rdi
    000019de: 	je	.Ltmp916 # Offset: 6622
    000019e0: 	movq	0xe0(%rsp), %rax
    000019e8: 	leaq	0x1(%rax), %rsi
    000019ec: 	callq	_ZdlPvm@PLT # Offset: 6636
.Ltmp916:
    000019f1: 	movq	0x80(%rsp), %rsi
    000019f9: 	movq	0x88(%rsp), %rdi
    00001a01: 	leaq	DATAat0x142b5(%rip), %rdx
    00001a08: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6664
    00001a0d: 	callq	clock@PLT # Offset: 6669
    00001a12: 	xorl	%r15d, %r15d
    00001a15: 	movabsq	$0x2d82d82d82d82d83, %r12
    00001a1f: 	movq	%rax, start_time(%rip)
    00001a26: 	leaq	0xa8(%rsp), %rax
    00001a2e: 	movq	%rax, (%rsp)
    00001a32: 	movl	iterations(%rip), %eax
    00001a38: 	testl	%eax, %eax
    00001a3a: 	jle	.Ltmp917 # Offset: 6714
.Ltmp926:
    00001a40: 	movq	0x60(%rsp), %rcx
    00001a45: 	xorl	%ebp, %ebp
    00001a47: 	nopw	(%rax,%rax) # Size: 9
.Ltmp918:
    00001a50: 	movq	(%rcx), %rsi
    00001a53: 	addq	$0x8, %rcx
    00001a57: 	movq	%rsi, %rax
    00001a5a: 	mulq	%r12
    00001a5d: 	shrq	$0x6, %rdx
    00001a61: 	imulq	$-0x167, %rdx, %rdx
    00001a68: 	leaq	(%rdx,%rsi), %rax
    00001a6c: 	addq	%rax, %rbp
    00001a6f: 	cmpq	%rcx, %rbx
    00001a72: 	jne	.Ltmp918 # Offset: 6770
    00001a74: 	movq	0x18(%rsp), %rax
    00001a79: 	movq	0xd0(%rsp), %r14
    00001a81: 	movq	0xd8(%rsp), %r13
    00001a89: 	movq	%rax, 0xf0(%rsp)
    00001a91: 	movq	%r14, %rax
    00001a94: 	addq	%r13, %rax
    00001a97: 	je	.Ltmp919 # Offset: 6807
    00001a99: 	testq	%r14, %r14
    00001a9c: 	je	.Ltmp920 # Offset: 6812
.Ltmp919:
    00001aa2: 	movq	%r13, 0xa8(%rsp)
    00001aaa: 	cmpq	$0xf, %r13
    00001aae: 	ja	.Ltmp921 # Offset: 6830
    00001ab4: 	cmpq	$0x1, %r13
    00001ab8: 	jne	.Ltmp922 # Offset: 6840
    00001abe: 	movzbl	(%r14), %eax
    00001ac2: 	movb	%al, 0x100(%rsp)
    00001ac9: 	movq	0x18(%rsp), %rax
.Ltmp979:
    00001ace: 	movq	%r13, 0xf8(%rsp)
    00001ad6: 	movb	$0x0, (%rax,%r13)
    00001adb: 	movsd	init_value(%rip), %xmm0
    00001ae3: 	comisd	DATAat0x14338(%rip), %xmm0
    00001aeb: 	jae	.Ltmp923 # Offset: 6891
    00001af1: 	cvttsd2si	%xmm0, %rcx
.Ltmp966:
    00001af6: 	movq	%rcx, %rax
    00001af9: 	mulq	%r12
    00001afc: 	shrq	$0x6, %rdx
    00001b00: 	imulq	$-0x167, %rdx, %rdx
    00001b07: 	leaq	(%rdx,%rcx), %rax
    00001b0b: 	imulq	$0xfa0, %rax, %rax
    00001b12: 	cmpq	%rax, %rbp
    00001b15: 	je	.Ltmp924 # Offset: 6933
    00001b17: 	movq	0xf0(%rsp), %rdx
    00001b1f: 	leaq	DATAat0x141e1(%rip), %rsi
    00001b26: 	movl	$0x1, %edi
    00001b2b: 	xorl	%eax, %eax
    00001b2d: 	callq	__printf_chk@PLT # Offset: 6957
.Ltmp924:
    00001b32: 	movq	0xf0(%rsp), %rdi
    00001b3a: 	cmpq	0x18(%rsp), %rdi
    00001b3f: 	je	.Ltmp925 # Offset: 6975
    00001b45: 	movq	0x100(%rsp), %rax
    00001b4d: 	addl	$0x1, %r15d
    00001b51: 	leaq	0x1(%rax), %rsi
    00001b55: 	callq	_ZdlPvm@PLT # Offset: 6997
    00001b5a: 	cmpl	iterations(%rip), %r15d
    00001b61: 	jl	.Ltmp926 # Offset: 7009
.Ltmp917:
    00001b67: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001b6e: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00001b75: 	subq	$0x20, %rax
    00001b79: 	cmpq	%rax, %rbx
    00001b7c: 	je	.Ltmp927 # Offset: 7036
    00001b82: 	leaq	0x10(%rbx), %rdi
    00001b86: 	movq	0xd8(%rsp), %r12
    00001b8e: 	movq	%rdi, (%rbx)
    00001b91: 	movq	0xd0(%rsp), %rbp
    00001b99: 	movq	%rbp, %rax
    00001b9c: 	addq	%r12, %rax
    00001b9f: 	je	.Ltmp928 # Offset: 7071
    00001ba1: 	testq	%rbp, %rbp
    00001ba4: 	je	.Ltmp929 # Offset: 7076
.Ltmp928:
    00001baa: 	movq	%r12, 0xa8(%rsp)
    00001bb2: 	cmpq	$0xf, %r12
    00001bb6: 	ja	.Ltmp930 # Offset: 7094
    00001bbc: 	cmpq	$0x1, %r12
    00001bc0: 	jne	.Ltmp931 # Offset: 7104
    00001bc6: 	movzbl	(%rbp), %eax
    00001bca: 	movb	%al, 0x10(%rbx)
.Ltmp1006:
    00001bcd: 	movq	%r12, 0x8(%rbx)
    00001bd1: 	movb	$0x0, (%rdi,%r12)
    00001bd6: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001bdd: 	addq	$0x20, %rax
    00001be1: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1003:
    00001be8: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001bef: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001bf6: 	je	.Ltmp932 # Offset: 7158
.Ltmp1002:
    00001bfc: 	movq	-0x20(%rax), %rbp
    00001c00: 	callq	clock@PLT # Offset: 7168
    00001c05: 	pxor	%xmm0, %xmm0
    00001c09: 	movq	%rax, end_time(%rip)
    00001c10: 	movq	%rbp, %rdi
    00001c13: 	subq	start_time(%rip), %rax
    00001c1a: 	cvtsi2sd	%rax, %xmm0
    00001c1f: 	divsd	DATAat0x14308(%rip), %xmm0
    00001c27: 	callq	_Z13record_resultdPKc # Offset: 7207
    00001c2c: 	movq	0xd0(%rsp), %rdi
    00001c34: 	cmpq	0x70(%rsp), %rdi
    00001c39: 	je	.Ltmp933 # Offset: 7225
    00001c3b: 	movq	0xe0(%rsp), %rax
    00001c43: 	leaq	0x1(%rax), %rsi
    00001c47: 	callq	_ZdlPvm@PLT # Offset: 7239
.Ltmp933:
    00001c4c: 	movq	0x80(%rsp), %rsi
    00001c54: 	movq	0x68(%rsp), %rdi
    00001c59: 	leaq	DATAat0x14202(%rip), %rdx
    00001c60: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 7264
    00001c65: 	movl	iterations(%rip), %edx
    00001c6b: 	xorl	%r8d, %r8d
    00001c6e: 	xorl	%ecx, %ecx
    00001c70: 	movl	$0xfa0, %esi
    00001c75: 	movq	0xf0(%rsp), %rdi
    00001c7d: 	callq	_Z9summarizePKciiii # Offset: 7293
    00001c82: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm3
    00001c8a: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001c91: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    00001c98: 	movaps	%xmm3, 0x50(%rsp)
    00001c9d: 	movq	%xmm3, %rbp
    00001ca2: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm3
    00001caa: 	movq	%rax, (%rsp)
    00001cae: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    00001cb5: 	movhlps	%xmm3, %xmm6
    00001cb8: 	movaps	%xmm3, 0x30(%rsp)
    00001cbd: 	movq	%xmm6, %rdi
    00001cc2: 	movq	%rax, 0x20(%rsp)
    00001cc7: 	leaq	0x8(%rdi), %r12
    00001ccb: 	movq	%xmm6, 0x40(%rsp)
    00001cd1: 	movq	%xmm3, 0x60(%rsp)
    00001cd7: 	movq	%r12, %r13
    00001cda: 	cmpq	%r12, %rax
    00001cdd: 	jbe	.Ltmp934 # Offset: 7389
    00001cdf: 	movq	%rbp, 0x68(%rsp)
    00001ce4: 	movq	%rax, %r15
    00001ce7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp937:
    00001cf0: 	movq	(%r13), %rbp
    00001cf4: 	leaq	0x200(%rbp), %rbx
    00001cfb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp936:
    00001d00: 	movq	(%rbp), %rdi
    00001d04: 	leaq	0x10(%rbp), %rdx
    00001d08: 	cmpq	%rdx, %rdi
    00001d0b: 	je	.Ltmp935 # Offset: 7435
    00001d11: 	movq	0x10(%rbp), %rax
    00001d15: 	addq	$0x20, %rbp
    00001d19: 	leaq	0x1(%rax), %rsi
    00001d1d: 	callq	_ZdlPvm@PLT # Offset: 7453
    00001d22: 	cmpq	%rbp, %rbx
    00001d25: 	jne	.Ltmp936 # Offset: 7461
    00001d27: 	addq	$0x8, %r13
    00001d2b: 	cmpq	%r13, %r15
    00001d2e: 	ja	.Ltmp937 # Offset: 7470
.Ltmp958:
    00001d30: 	movq	0x68(%rsp), %rbp
.Ltmp934:
    00001d35: 	movq	0x20(%rsp), %rdi
    00001d3a: 	cmpq	%rdi, 0x40(%rsp)
    00001d3f: 	jne	.Ltmp938 # Offset: 7487
    00001d41: 	jmp	.Ltmp939 # Offset: 7489
    00001d46: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp941:
    00001d50: 	movq	(%rbp), %rdi
    00001d54: 	leaq	0x10(%rbp), %rax
    00001d58: 	cmpq	%rax, %rdi
    00001d5b: 	je	.Ltmp940 # Offset: 7515
    00001d5d: 	movq	0x10(%rbp), %rax
    00001d61: 	leaq	0x1(%rax), %rsi
    00001d65: 	callq	_ZdlPvm@PLT # Offset: 7525
.Ltmp940:
    00001d6a: 	addq	$0x20, %rbp
.Ltmp938:
    00001d6e: 	cmpq	%rbp, 0x60(%rsp)
    00001d73: 	jne	.Ltmp941 # Offset: 7539
    00001d75: 	cmpq	%r14, (%rsp)
    00001d79: 	je	.Ltmp942 # Offset: 7545
    00001d7b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp944:
    00001d80: 	movq	(%r14), %rdi
    00001d83: 	leaq	0x10(%r14), %rax
    00001d87: 	cmpq	%rax, %rdi
    00001d8a: 	je	.Ltmp943 # Offset: 7562
    00001d8c: 	movq	0x10(%r14), %rax
    00001d90: 	leaq	0x1(%rax), %rsi
    00001d94: 	callq	_ZdlPvm@PLT # Offset: 7572
.Ltmp943:
    00001d99: 	addq	$0x20, %r14
    00001d9d: 	cmpq	%r14, (%rsp)
    00001da1: 	jne	.Ltmp944 # Offset: 7585
.Ltmp942:
    00001da3: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    00001daa: 	leaq	0x8(%rax), %rbx
    00001dae: 	cmpq	%r12, %rbx
    00001db1: 	jbe	.Ltmp945 # Offset: 7601
    00001db3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp946:
    00001db8: 	movq	(%r12), %rdi
    00001dbc: 	movl	$0x200, %esi
    00001dc1: 	addq	$0x8, %r12
    00001dc5: 	callq	_ZdlPvm@PLT # Offset: 7621
    00001dca: 	cmpq	%r12, %rbx
    00001dcd: 	ja	.Ltmp946 # Offset: 7629
.Ltmp945:
    00001dcf: 	movdqa	0x50(%rsp), %xmm3
    00001dd5: 	movq	0xf0(%rsp), %rdi
    00001ddd: 	movaps	%xmm3, "_ZL7gLabels/1"+48(%rip)
    00001de4: 	movdqa	0x30(%rsp), %xmm3
    00001dea: 	movaps	%xmm3, "_ZL7gLabels/1"+64(%rip)
    00001df1: 	cmpq	0x18(%rsp), %rdi
    00001df6: 	je	.Ltmp947 # Offset: 7670
    00001df8: 	movq	0x100(%rsp), %rax
    00001e00: 	leaq	0x1(%rax), %rsi
    00001e04: 	callq	_ZdlPvm@PLT # Offset: 7684
.Ltmp947:
    00001e09: 	movq	0xb0(%rsp), %rdi
    00001e11: 	cmpq	0x90(%rsp), %rdi
    00001e19: 	je	.Ltmp948 # Offset: 7705
    00001e1b: 	movq	0xc0(%rsp), %rax
    00001e23: 	leaq	0x1(%rax), %rsi
    00001e27: 	callq	_ZdlPvm@PLT # Offset: 7719
.Ltmp948:
    00001e2c: 	movq	0x7e18(%rsp), %rax
    00001e34: 	subq	%fs:0x28, %rax
    00001e3d: 	jne	.Ltmp949 # Offset: 7741
    00001e43: 	addq	$0x7e28, %rsp
    00001e4a: 	popq	%rbx
    00001e4b: 	popq	%rbp
    00001e4c: 	popq	%r12
    00001e4e: 	popq	%r13
    00001e50: 	popq	%r14
    00001e52: 	popq	%r15
    00001e54: 	retq # Offset: 7764
    00001e55: 	nopl	(%rax) # Size: 3
.Ltmp787:
    00001e58: 	subsd	DATAat0x14338(%rip), %xmm0
    00001e60: 	cvttsd2si	%xmm0, %rax
    00001e65: 	xorq	%r14, %rax
    00001e68: 	jmp	.Ltmp950 # Offset: 7784
    00001e6d: 	nopl	(%rax) # Size: 3
.Ltmp775:
    00001e70: 	subsd	DATAat0x14338(%rip), %xmm0
    00001e78: 	cvttsd2si	%xmm0, %rax
    00001e7d: 	xorq	%r13, %rax
    00001e80: 	jmp	.Ltmp951 # Offset: 7808
.Ltmp772:
    00001e85: 	subsd	DATAat0x14338(%rip), %xmm0
    00001e8d: 	cvttsd2si	%xmm0, %rbp
    00001e92: 	btcq	$0x3f, %rbp
    00001e97: 	jmp	.Ltmp952 # Offset: 7831
.Ltmp770:
    00001e9c: 	subsd	DATAat0x14338(%rip), %xmm1
    00001ea4: 	cvttsd2si	%xmm1, %rax
    00001ea9: 	btcq	$0x3f, %rax
    00001eae: 	jmp	.Ltmp953 # Offset: 7854
    00001eb3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp954:
    00001eb8: 	addq	$0x20, %rbp
.Ltmp939:
    00001ebc: 	cmpq	%rbp, (%rsp)
    00001ec0: 	je	.Ltmp942 # Offset: 7872
.Ltmp955:
    00001ec6: 	movq	(%rbp), %rdi
    00001eca: 	leaq	0x10(%rbp), %rax
    00001ece: 	cmpq	%rax, %rdi
    00001ed1: 	je	.Ltmp954 # Offset: 7889
    00001ed3: 	movq	0x10(%rbp), %rax
    00001ed7: 	addq	$0x20, %rbp
    00001edb: 	leaq	0x1(%rax), %rsi
    00001edf: 	callq	_ZdlPvm@PLT # Offset: 7903
    00001ee4: 	cmpq	%rbp, (%rsp)
    00001ee8: 	jne	.Ltmp955 # Offset: 7912
    00001eea: 	jmp	.Ltmp942 # Offset: 7914
.Ltmp796:
    00001eef: 	testq	%r12, %r12
    00001ef2: 	jne	.Ltmp956 # Offset: 7922
    00001ef8: 	movq	0x70(%rsp), %rax
    00001efd: 	jmp	.Ltmp957 # Offset: 7933
    00001f02: 	nopw	(%rax,%rax) # Size: 6
.Ltmp935:
    00001f08: 	addq	$0x20, %rbp
    00001f0c: 	cmpq	%rbp, %rbx
    00001f0f: 	jne	.Ltmp936 # Offset: 7951
    00001f15: 	addq	$0x8, %r13
    00001f19: 	cmpq	%r13, %r15
    00001f1c: 	ja	.Ltmp937 # Offset: 7964
    00001f22: 	jmp	.Ltmp958 # Offset: 7970
    00001f27: 	nopw	(%rax,%rax) # Size: 9
.Ltmp804:
    00001f30: 	subsd	DATAat0x14338(%rip), %xmm0
    00001f38: 	movabsq	$-0x8000000000000000, %rax
    00001f42: 	cvttsd2si	%xmm0, %rdx
    00001f47: 	xorq	%rax, %rdx
    00001f4a: 	jmp	.Ltmp959 # Offset: 8010
    00001f4f: 	nop # Size: 1
.Ltmp826:
    00001f50: 	subsd	DATAat0x14338(%rip), %xmm0
    00001f58: 	movabsq	$-0x8000000000000000, %rdi
    00001f62: 	cvttsd2si	%xmm0, %rax
    00001f67: 	xorq	%rdi, %rax
    00001f6a: 	jmp	.Ltmp960 # Offset: 8042
    00001f6f: 	nop # Size: 1
.Ltmp863:
    00001f70: 	subsd	DATAat0x14338(%rip), %xmm0
    00001f78: 	movabsq	$-0x8000000000000000, %rax
    00001f82: 	cvttsd2si	%xmm0, %rcx
    00001f87: 	xorq	%rax, %rcx
    00001f8a: 	jmp	.Ltmp961 # Offset: 8074
    00001f8f: 	nop # Size: 1
.Ltmp847:
    00001f90: 	subsd	DATAat0x14338(%rip), %xmm0
    00001f98: 	cvttsd2si	%xmm0, %rax
    00001f9d: 	xorq	%r14, %rax
    00001fa0: 	jmp	.Ltmp962 # Offset: 8096
    00001fa5: 	nopl	(%rax) # Size: 3
.Ltmp835:
    00001fa8: 	subsd	DATAat0x14338(%rip), %xmm0
    00001fb0: 	cvttsd2si	%xmm0, %rax
    00001fb5: 	xorq	%r13, %rax
    00001fb8: 	jmp	.Ltmp963 # Offset: 8120
    00001fbd: 	nopl	(%rax) # Size: 3
.Ltmp894:
    00001fc0: 	subsd	DATAat0x14338(%rip), %xmm0
    00001fc8: 	cvttsd2si	%xmm0, %rax
    00001fcd: 	xorq	%r13, %rax
    00001fd0: 	jmp	.Ltmp964 # Offset: 8144
    00001fd5: 	nopl	(%rax) # Size: 3
.Ltmp880:
    00001fd8: 	subsd	DATAat0x14338(%rip), %xmm0
    00001fe0: 	movabsq	$-0x8000000000000000, %rax
    00001fea: 	cvttsd2si	%xmm0, %rdx
    00001fef: 	xorq	%rax, %rdx
    00001ff2: 	jmp	.Ltmp965 # Offset: 8178
    00001ff7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp923:
    00002000: 	subsd	DATAat0x14338(%rip), %xmm0
    00002008: 	movabsq	$-0x8000000000000000, %rax
    00002012: 	cvttsd2si	%xmm0, %rcx
    00002017: 	xorq	%rax, %rcx
    0000201a: 	jmp	.Ltmp966 # Offset: 8218
    0000201f: 	nop # Size: 1
.Ltmp910:
    00002020: 	subsd	DATAat0x14338(%rip), %xmm0
    00002028: 	movabsq	$-0x8000000000000000, %rax
    00002032: 	cvttsd2si	%xmm0, %rdx
    00002037: 	xorq	%rax, %rdx
    0000203a: 	jmp	.Ltmp967 # Offset: 8250
    0000203f: 	nop # Size: 1
.Ltmp806:
    00002040: 	addl	$0x1, (%rsp)
    00002044: 	movl	(%rsp), %eax
    00002047: 	cmpl	iterations(%rip), %eax
    0000204d: 	jl	.Ltmp807 # Offset: 8269
    00002053: 	jmp	.Ltmp798 # Offset: 8275
    00002058: 	nopl	(%rax,%rax) # Size: 8
.Ltmp828:
    00002060: 	addl	$0x1, %r15d
    00002064: 	cmpl	iterations(%rip), %r15d
    0000206b: 	jl	.Ltmp829 # Offset: 8299
    00002071: 	jmp	.Ltmp820 # Offset: 8305
    00002076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp865:
    00002080: 	addl	$0x1, (%rsp)
    00002084: 	movl	(%rsp), %eax
    00002087: 	cmpl	iterations(%rip), %eax
    0000208d: 	jl	.Ltmp866 # Offset: 8333
    00002093: 	jmp	.Ltmp857 # Offset: 8339
    00002098: 	nopl	(%rax,%rax) # Size: 8
.Ltmp882:
    000020a0: 	addl	$0x1, %r15d
    000020a4: 	cmpl	iterations(%rip), %r15d
    000020ab: 	jl	.Ltmp883 # Offset: 8363
    000020b1: 	jmp	.Ltmp874 # Offset: 8369
    000020b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp925:
    000020c0: 	addl	$0x1, %r15d
    000020c4: 	cmpl	iterations(%rip), %r15d
    000020cb: 	jl	.Ltmp926 # Offset: 8395
    000020d1: 	jmp	.Ltmp917 # Offset: 8401
    000020d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp912:
    000020e0: 	addl	$0x1, %r14d
    000020e4: 	cmpl	iterations(%rip), %r14d
    000020eb: 	jl	.Ltmp913 # Offset: 8427
    000020f1: 	jmp	.Ltmp904 # Offset: 8433
    000020f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp803:
    00002100: 	testq	%r14, %r14
    00002103: 	jne	.Ltmp968 # Offset: 8451
    00002109: 	movq	0x18(%rsp), %rax
    0000210e: 	jmp	.Ltmp969 # Offset: 8462
    00002113: 	nopl	(%rax,%rax) # Size: 5
.Ltmp825:
    00002118: 	testq	%r13, %r13
    0000211b: 	jne	.Ltmp970 # Offset: 8475
    00002121: 	movq	0x18(%rsp), %rax
    00002126: 	jmp	.Ltmp971 # Offset: 8486
    0000212b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp862:
    00002130: 	testq	%r14, %r14
    00002133: 	jne	.Ltmp972 # Offset: 8499
    00002139: 	movq	0x18(%rsp), %rax
    0000213e: 	jmp	.Ltmp973 # Offset: 8510
    00002143: 	nopl	(%rax,%rax) # Size: 5
.Ltmp909:
    00002148: 	testq	%r12, %r12
    0000214b: 	jne	.Ltmp974 # Offset: 8523
    00002151: 	movq	0x18(%rsp), %rax
    00002156: 	jmp	.Ltmp975 # Offset: 8534
    0000215b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp879:
    00002160: 	testq	%r13, %r13
    00002163: 	jne	.Ltmp976 # Offset: 8547
    00002169: 	movq	0x18(%rsp), %rax
    0000216e: 	jmp	.Ltmp977 # Offset: 8558
    00002173: 	nopl	(%rax,%rax) # Size: 5
.Ltmp922:
    00002178: 	testq	%r13, %r13
    0000217b: 	jne	.Ltmp978 # Offset: 8571
    00002181: 	movq	0x18(%rsp), %rax
    00002186: 	jmp	.Ltmp979 # Offset: 8582
    0000218b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp802:
    00002190: 	movq	0x20(%rsp), %rsi
    00002195: 	movq	0x68(%rsp), %rdi
    0000219a: 	xorl	%edx, %edx
    0000219c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8604
    000021a1: 	movq	%rax, 0xf0(%rsp)
    000021a9: 	movq	%rax, %rdi
    000021ac: 	movq	0xa8(%rsp), %rax
    000021b4: 	movq	%rax, 0x100(%rsp)
.Ltmp1017:
    000021bc: 	movq	%r14, %rdx
    000021bf: 	movq	%r15, %rsi
    000021c2: 	callq	memcpy@PLT # Offset: 8642
    000021c7: 	movq	0xa8(%rsp), %r14
    000021cf: 	movq	0xf0(%rsp), %rax
    000021d7: 	jmp	.Ltmp969 # Offset: 8663
    000021dc: 	nopl	(%rax) # Size: 4
.Ltmp824:
    000021e0: 	movq	0x20(%rsp), %rsi
    000021e5: 	movq	0x68(%rsp), %rdi
    000021ea: 	xorl	%edx, %edx
    000021ec: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8684
    000021f1: 	movq	%rax, 0xf0(%rsp)
    000021f9: 	movq	%rax, %rdi
    000021fc: 	movq	0xa8(%rsp), %rax
    00002204: 	movq	%rax, 0x100(%rsp)
.Ltmp1018:
    0000220c: 	movq	%r13, %rdx
    0000220f: 	movq	%r14, %rsi
    00002212: 	callq	memcpy@PLT # Offset: 8722
    00002217: 	movq	0xa8(%rsp), %r13
    0000221f: 	movq	0xf0(%rsp), %rax
    00002227: 	jmp	.Ltmp971 # Offset: 8743
    0000222c: 	nopl	(%rax) # Size: 4
.Ltmp878:
    00002230: 	movq	0x20(%rsp), %rsi
    00002235: 	movq	0x68(%rsp), %rdi
    0000223a: 	xorl	%edx, %edx
    0000223c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8764
    00002241: 	movq	%rax, 0xf0(%rsp)
    00002249: 	movq	%rax, %rdi
    0000224c: 	movq	0xa8(%rsp), %rax
    00002254: 	movq	%rax, 0x100(%rsp)
.Ltmp1021:
    0000225c: 	movq	%r13, %rdx
    0000225f: 	movq	%r14, %rsi
    00002262: 	callq	memcpy@PLT # Offset: 8802
    00002267: 	movq	0xa8(%rsp), %r13
    0000226f: 	movq	0xf0(%rsp), %rax
    00002277: 	jmp	.Ltmp977 # Offset: 8823
    0000227c: 	nopl	(%rax) # Size: 4
.Ltmp861:
    00002280: 	movq	0x20(%rsp), %rsi
    00002285: 	movq	0x68(%rsp), %rdi
    0000228a: 	xorl	%edx, %edx
    0000228c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8844
    00002291: 	movq	%rax, 0xf0(%rsp)
    00002299: 	movq	%rax, %rdi
    0000229c: 	movq	0xa8(%rsp), %rax
    000022a4: 	movq	%rax, 0x100(%rsp)
.Ltmp1019:
    000022ac: 	movq	%r14, %rdx
    000022af: 	movq	%r15, %rsi
    000022b2: 	callq	memcpy@PLT # Offset: 8882
    000022b7: 	movq	0xa8(%rsp), %r14
    000022bf: 	movq	0xf0(%rsp), %rax
    000022c7: 	jmp	.Ltmp973 # Offset: 8903
    000022cc: 	nopl	(%rax) # Size: 4
.Ltmp908:
    000022d0: 	movq	0x20(%rsp), %rsi
    000022d5: 	movq	0x68(%rsp), %rdi
    000022da: 	xorl	%edx, %edx
    000022dc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8924
    000022e1: 	movq	%rax, 0xf0(%rsp)
    000022e9: 	movq	%rax, %rdi
    000022ec: 	movq	0xa8(%rsp), %rax
    000022f4: 	movq	%rax, 0x100(%rsp)
.Ltmp1020:
    000022fc: 	movq	%r12, %rdx
    000022ff: 	movq	%r13, %rsi
    00002302: 	callq	memcpy@PLT # Offset: 8962
    00002307: 	movq	0xa8(%rsp), %r12
    0000230f: 	movq	0xf0(%rsp), %rax
    00002317: 	jmp	.Ltmp975 # Offset: 8983
    0000231c: 	nopl	(%rax) # Size: 4
.Ltmp921:
    00002320: 	movq	(%rsp), %rsi
    00002324: 	movq	0x68(%rsp), %rdi
    00002329: 	xorl	%edx, %edx
    0000232b: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9003
    00002330: 	movq	%rax, 0xf0(%rsp)
    00002338: 	movq	%rax, %rdi
    0000233b: 	movq	0xa8(%rsp), %rax
    00002343: 	movq	%rax, 0x100(%rsp)
.Ltmp1022:
    0000234b: 	movq	%r13, %rdx
    0000234e: 	movq	%r14, %rsi
    00002351: 	callq	memcpy@PLT # Offset: 9041
    00002356: 	movq	0xa8(%rsp), %r13
    0000235e: 	movq	0xf0(%rsp), %rax
    00002366: 	jmp	.Ltmp979 # Offset: 9062
.Ltmp784:
    0000236b: 	xorl	%edi, %edi
    0000236d: 	xorl	%eax, %eax
    0000236f: 	jmp	.Ltmp980 # Offset: 9071
.Ltmp818:
    00002374: 	testq	%r12, %r12
    00002377: 	jne	.Ltmp981 # Offset: 9079
    0000237d: 	movq	0x70(%rsp), %rax
    00002382: 	jmp	.Ltmp982 # Offset: 9090
.Ltmp890:
    00002387: 	testq	%r12, %r12
    0000238a: 	jne	.Ltmp983 # Offset: 9098
    00002390: 	movq	0x18(%rsp), %rax
    00002395: 	jmp	.Ltmp984 # Offset: 9109
.Ltmp844:
    0000239a: 	xorl	%esi, %esi
    0000239c: 	xorl	%eax, %eax
    0000239e: 	jmp	.Ltmp985 # Offset: 9118
.Ltmp817:
    000023a3: 	movq	0x88(%rsp), %rdi
    000023ab: 	leaq	0xa8(%rsp), %rsi
    000023b3: 	xorl	%edx, %edx
    000023b5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9141
    000023ba: 	movq	%rax, 0xd0(%rsp)
    000023c2: 	movq	%rax, %rdi
    000023c5: 	movq	0xa8(%rsp), %rax
    000023cd: 	movq	%rax, 0xe0(%rsp)
.Ltmp1023:
    000023d5: 	movq	%r12, %rdx
    000023d8: 	movq	%r13, %rsi
    000023db: 	callq	memcpy@PLT # Offset: 9179
    000023e0: 	movq	0xa8(%rsp), %r12
    000023e8: 	movq	0xd0(%rsp), %rax
    000023f0: 	jmp	.Ltmp982 # Offset: 9200
.Ltmp889:
    000023f5: 	movq	0x68(%rsp), %rdi
    000023fa: 	leaq	0xa8(%rsp), %rsi
    00002402: 	xorl	%edx, %edx
    00002404: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9220
    00002409: 	movq	%rax, 0xf0(%rsp)
    00002411: 	movq	%rax, %rdi
    00002414: 	movq	0xa8(%rsp), %rax
    0000241c: 	movq	%rax, 0x100(%rsp)
.Ltmp1024:
    00002424: 	movq	%r12, %rdx
    00002427: 	movq	%r13, %rsi
    0000242a: 	callq	memcpy@PLT # Offset: 9258
    0000242f: 	movq	0xa8(%rsp), %r12
    00002437: 	movq	0xf0(%rsp), %rax
    0000243f: 	jmp	.Ltmp984 # Offset: 9279
.Ltmp795:
    00002444: 	leaq	0xa8(%rsp), %rsi
    0000244c: 	leaq	0xd0(%rsp), %rdi
    00002454: 	xorl	%edx, %edx
    00002456: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9302
    0000245b: 	movq	%rax, 0xd0(%rsp)
    00002463: 	movq	%rax, %rdi
    00002466: 	movq	0xa8(%rsp), %rax
    0000246e: 	movq	%rax, 0xe0(%rsp)
.Ltmp1016:
    00002476: 	movq	%r12, %rdx
    00002479: 	movq	%r13, %rsi
    0000247c: 	callq	memcpy@PLT # Offset: 9340
    00002481: 	movq	0xa8(%rsp), %r12
    00002489: 	movq	0xd0(%rsp), %rax
    00002491: 	jmp	.Ltmp957 # Offset: 9361
.Ltmp779:
    00002496: 	movq	-0x8(%rdx), %rax
    0000249a: 	addq	$0x200, %rax
    000024a0: 	jmp	.Ltmp986 # Offset: 9376
.Ltmp791:
    000024a5: 	movq	-0x8(%rdx), %rax
    000024a9: 	addq	$0x200, %rax
    000024af: 	jmp	.Ltmp987 # Offset: 9391
.Ltmp790:
    000024b4: 	movq	0x68(%rsp), %rsi
    000024b9: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000024c0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9408
    000024c5: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000024cc: 	jmp	.Ltmp988 # Offset: 9420
.Ltmp915:
    000024d1: 	movq	-0x8(%rdx), %rax
    000024d5: 	addq	$0x200, %rax
    000024db: 	jmp	.Ltmp989 # Offset: 9435
.Ltmp778:
    000024e0: 	movq	0x68(%rsp), %rsi
    000024e5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000024ec: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9452
    000024f1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000024f8: 	jmp	.Ltmp990 # Offset: 9464
.Ltmp808:
    000024fd: 	movq	0x88(%rsp), %rsi
    00002505: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000250c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9484
    00002511: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002518: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000251f: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002526: 	jne	.Ltmp991 # Offset: 9510
.Ltmp813:
    0000252c: 	movq	-0x8(%rdx), %rax
    00002530: 	addq	$0x200, %rax
    00002536: 	jmp	.Ltmp991 # Offset: 9526
.Ltmp830:
    0000253b: 	movq	0x88(%rsp), %rsi
    00002543: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000254a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9546
    0000254f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002556: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000255d: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002564: 	jne	.Ltmp992 # Offset: 9572
.Ltmp831:
    0000256a: 	movq	-0x8(%rdx), %rax
    0000256e: 	addq	$0x200, %rax
    00002574: 	jmp	.Ltmp992 # Offset: 9588
.Ltmp914:
    00002579: 	movq	0x88(%rsp), %rsi
    00002581: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002588: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9608
    0000258d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002594: 	jmp	.Ltmp993 # Offset: 9620
.Ltmp839:
    00002599: 	movq	-0x8(%rdx), %rax
    0000259d: 	addq	$0x200, %rax
    000025a3: 	jmp	.Ltmp994 # Offset: 9635
.Ltmp838:
    000025a8: 	movq	0x68(%rsp), %rsi
    000025ad: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000025b4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9652
    000025b9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000025c0: 	jmp	.Ltmp995 # Offset: 9664
.Ltmp855:
    000025c5: 	movq	-0x8(%rdx), %rax
    000025c9: 	addq	$0x200, %rax
    000025cf: 	jmp	.Ltmp996 # Offset: 9679
.Ltmp850:
    000025d4: 	movq	0x68(%rsp), %rsi
    000025d9: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000025e0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9696
    000025e5: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000025ec: 	jmp	.Ltmp997 # Offset: 9708
.Ltmp885:
    000025f1: 	movq	-0x8(%rdx), %rax
    000025f5: 	addq	$0x200, %rax
    000025fb: 	jmp	.Ltmp998 # Offset: 9723
.Ltmp867:
    00002600: 	movq	0x88(%rsp), %rsi
    00002608: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000260f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9743
    00002614: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000261b: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00002622: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002629: 	jne	.Ltmp999 # Offset: 9769
.Ltmp872:
    0000262f: 	movq	-0x8(%rdx), %rax
    00002633: 	addq	$0x200, %rax
    00002639: 	jmp	.Ltmp999 # Offset: 9785
.Ltmp884:
    0000263e: 	movq	0x88(%rsp), %rsi
    00002646: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000264d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9805
    00002652: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002659: 	jmp	.Ltmp1000 # Offset: 9817
.Ltmp897:
    0000265e: 	movq	0x68(%rsp), %rsi
    00002663: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000266a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9834
    0000266f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002676: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000267d: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002684: 	jne	.Ltmp1001 # Offset: 9860
.Ltmp902:
    0000268a: 	movq	-0x8(%rdx), %rax
    0000268e: 	addq	$0x200, %rax
    00002694: 	jmp	.Ltmp1001 # Offset: 9876
.Ltmp932:
    00002699: 	movq	-0x8(%rdx), %rax
    0000269d: 	addq	$0x200, %rax
    000026a3: 	jmp	.Ltmp1002 # Offset: 9891
.Ltmp927:
    000026a8: 	movq	0x88(%rsp), %rsi
    000026b0: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000026b7: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 9911
    000026bc: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000026c3: 	jmp	.Ltmp1003 # Offset: 9923
.Ltmp901:
    000026c8: 	testq	%r12, %r12
    000026cb: 	je	.Ltmp1004 # Offset: 9931
    000026d1: 	jmp	.Ltmp1005 # Offset: 9937
    000026d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp931:
    000026d8: 	testq	%r12, %r12
    000026db: 	je	.Ltmp1006 # Offset: 9947
    000026e1: 	jmp	.Ltmp1007 # Offset: 9953
    000026e6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp854:
    000026f0: 	testq	%r12, %r12
    000026f3: 	je	.Ltmp1008 # Offset: 9971
    000026f9: 	jmp	.Ltmp1009 # Offset: 9977
    000026fe: 	nop # Size: 2
.Ltmp812:
    00002700: 	testq	%r12, %r12
    00002703: 	je	.Ltmp1010 # Offset: 9987
    00002709: 	jmp	.Ltmp1011 # Offset: 9993
    0000270e: 	nop # Size: 2
.Ltmp871:
    00002710: 	testq	%r12, %r12
    00002713: 	je	.Ltmp1012 # Offset: 10003
    00002719: 	jmp	.Ltmp1013 # Offset: 10009
    0000271e: 	nop # Size: 2
.Ltmp900:
    00002720: 	leaq	0xa8(%rsp), %rsi
    00002728: 	xorl	%edx, %edx
    0000272a: 	movq	%rbp, %rdi
    0000272d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 10029
    00002732: 	movq	%rax, (%rbp)
    00002736: 	movq	%rax, %rdi
    00002739: 	movq	0xa8(%rsp), %rax
    00002741: 	movq	%rax, 0x10(%rbp)
.Ltmp1005:
    00002745: 	movq	%r12, %rdx
    00002748: 	movq	%r13, %rsi
    0000274b: 	callq	memcpy@PLT # Offset: 10059
    00002750: 	movq	0xa8(%rsp), %r12
    00002758: 	movq	(%rbp), %rdi
    0000275c: 	jmp	.Ltmp1004 # Offset: 10076
.Ltmp930:
    00002761: 	leaq	0xa8(%rsp), %rsi
    00002769: 	xorl	%edx, %edx
    0000276b: 	movq	%rbx, %rdi
    0000276e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 10094
    00002773: 	movq	%rax, (%rbx)
    00002776: 	movq	%rax, %rdi
    00002779: 	movq	0xa8(%rsp), %rax
    00002781: 	movq	%rax, 0x10(%rbx)
.Ltmp1007:
    00002785: 	movq	%r12, %rdx
    00002788: 	movq	%rbp, %rsi
    0000278b: 	callq	memcpy@PLT # Offset: 10123
    00002790: 	movq	0xa8(%rsp), %r12
    00002798: 	movq	(%rbx), %rdi
    0000279b: 	jmp	.Ltmp1006 # Offset: 10139
.Ltmp853:
    000027a0: 	leaq	0xa8(%rsp), %rsi
    000027a8: 	xorl	%edx, %edx
    000027aa: 	movq	%r13, %rdi
    000027ad: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 10157
    000027b2: 	movq	%rax, (%r13)
    000027b6: 	movq	%rax, %rdi
    000027b9: 	movq	0xa8(%rsp), %rax
    000027c1: 	movq	%rax, 0x10(%r13)
.Ltmp1009:
    000027c5: 	movq	%r12, %rdx
    000027c8: 	movq	%r14, %rsi
    000027cb: 	callq	memcpy@PLT # Offset: 10187
    000027d0: 	movq	0xa8(%rsp), %r12
    000027d8: 	movq	(%r13), %rdi
    000027dc: 	jmp	.Ltmp1008 # Offset: 10204
.Ltmp811:
    000027e1: 	leaq	0xa8(%rsp), %rsi
    000027e9: 	xorl	%edx, %edx
    000027eb: 	movq	%r13, %rdi
    000027ee: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 10222
    000027f3: 	movq	%rax, (%r13)
    000027f7: 	movq	%rax, %rdi
    000027fa: 	movq	0xa8(%rsp), %rax
    00002802: 	movq	%rax, 0x10(%r13)
.Ltmp1011:
    00002806: 	movq	%r12, %rdx
    00002809: 	movq	%r14, %rsi
    0000280c: 	callq	memcpy@PLT # Offset: 10252
    00002811: 	movq	0xa8(%rsp), %r12
    00002819: 	movq	(%r13), %rdi
    0000281d: 	jmp	.Ltmp1010 # Offset: 10269
.Ltmp870:
    00002822: 	leaq	0xa8(%rsp), %rsi
    0000282a: 	xorl	%edx, %edx
    0000282c: 	movq	%r13, %rdi
    0000282f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 10287
    00002834: 	movq	%rax, (%r13)
    00002838: 	movq	%rax, %rdi
    0000283b: 	movq	0xa8(%rsp), %rax
    00002843: 	movq	%rax, 0x10(%r13)
.Ltmp1013:
    00002847: 	movq	%r12, %rdx
    0000284a: 	movq	%r14, %rsi
    0000284d: 	callq	memcpy@PLT # Offset: 10317
    00002852: 	movq	0xa8(%rsp), %r12
    0000285a: 	movq	(%r13), %rdi
    0000285e: 	jmp	.Ltmp1012 # Offset: 10334
.Ltmp781:
    00002863: 	xorl	%esi, %esi
    00002865: 	movl	$0x1, %eax
    0000286a: 	movl	$0x20, %edx
    0000286f: 	jmp	.Ltmp1014 # Offset: 10351
.Ltmp841:
    00002874: 	movl	$0x1, %eax
    00002879: 	movl	$0x20, %edx
    0000287e: 	jmp	.Ltmp1015 # Offset: 10366
.Ltmp842:
    00002883: 	movl	$0x20, 0x78(%rsp)
    0000288b: 	xorl	%eax, %eax
    0000288d: 	xorl	%edx, %edx
    0000288f: 	jmp	.Ltmp1015 # Offset: 10383
.Ltmp782:
    00002894: 	xorl	%eax, %eax
    00002896: 	movl	$0x20, %esi
    0000289b: 	xorl	%edx, %edx
    0000289d: 	jmp	.Ltmp1014 # Offset: 10397
.Ltmp794:
    000028a2: 	leaq	DATAat0x14008(%rip), %rdi
    000028a9: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10409
.Ltmp852:
    000028ae: 	leaq	DATAat0x14008(%rip), %rdi
    000028b5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10421
.Ltmp860:
    000028ba: 	leaq	DATAat0x14008(%rip), %rdi
    000028c1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10433
.Ltmp869:
    000028c6: 	leaq	DATAat0x14008(%rip), %rdi
    000028cd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10445
.Ltmp877:
    000028d2: 	leaq	DATAat0x14008(%rip), %rdi
    000028d9: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10457
.Ltmp888:
    000028de: 	leaq	DATAat0x14008(%rip), %rdi
    000028e5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10469
.Ltmp891:
    000028ea: 	leaq	DATAat0x14184(%rip), %rdi
    000028f1: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10481
.Ltmp899:
    000028f6: 	leaq	DATAat0x14008(%rip), %rdi
    000028fd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10493
.Ltmp907:
    00002902: 	leaq	DATAat0x14008(%rip), %rdi
    00002909: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10505
.Ltmp920:
    0000290e: 	leaq	DATAat0x14008(%rip), %rdi
    00002915: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10517
.Ltmp929:
    0000291a: 	leaq	DATAat0x14008(%rip), %rdi
    00002921: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10529
.Ltmp949:
    00002926: 	callq	__stack_chk_fail@PLT # Offset: 10534
.Ltmp956:
    0000292b: 	movq	0x70(%rsp), %rdi
    00002930: 	jmp	.Ltmp1016 # Offset: 10544
.Ltmp968:
    00002935: 	movq	0x18(%rsp), %rdi
    0000293a: 	jmp	.Ltmp1017 # Offset: 10554
.Ltmp970:
    0000293f: 	movq	0x18(%rsp), %rdi
    00002944: 	jmp	.Ltmp1018 # Offset: 10564
.Ltmp972:
    00002949: 	movq	0x18(%rsp), %rdi
    0000294e: 	jmp	.Ltmp1019 # Offset: 10574
.Ltmp974:
    00002953: 	movq	0x18(%rsp), %rdi
    00002958: 	jmp	.Ltmp1020 # Offset: 10584
.Ltmp976:
    0000295d: 	movq	0x18(%rsp), %rdi
    00002962: 	jmp	.Ltmp1021 # Offset: 10594
.Ltmp978:
    00002967: 	movq	0x18(%rsp), %rdi
    0000296c: 	jmp	.Ltmp1022 # Offset: 10604
.Ltmp981:
    00002971: 	movq	0x70(%rsp), %rdi
    00002976: 	jmp	.Ltmp1023 # Offset: 10614
.Ltmp983:
    0000297b: 	movq	0x18(%rsp), %rdi
    00002980: 	jmp	.Ltmp1024 # Offset: 10624
.Ltmp810:
    00002985: 	leaq	DATAat0x14008(%rip), %rdi
    0000298c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10636
.Ltmp816:
    00002991: 	leaq	DATAat0x14008(%rip), %rdi
    00002998: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10648
.Ltmp819:
    0000299d: 	leaq	DATAat0x14184(%rip), %rdi
    000029a4: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10660
.Ltmp823:
    000029a9: 	leaq	DATAat0x14008(%rip), %rdi
    000029b0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10672
.Ltmp797:
    000029b5: 	leaq	DATAat0x14184(%rip), %rdi
    000029bc: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 10684
.Ltmp801:
    000029c1: 	leaq	DATAat0x14008(%rip), %rdi
    000029c8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 10696
    000029cd: 	endbr64
.Ltmp1030:
    000029d1: 	movq	%rax, %rbp
    000029d4: 	jmp	.Ltmp1025 # Offset: 10708
    000029d6: 	endbr64
.Ltmp1032:
    000029da: 	movq	%rax, %rbp
    000029dd: 	jmp	.Ltmp1026 # Offset: 10717
.Ltmp1025:
    000029df: 	movq	0xf0(%rsp), %rdi
    000029e7: 	cmpq	0x18(%rsp), %rdi
    000029ec: 	je	.Ltmp1027 # Offset: 10732
.Ltmp1034:
    000029ee: 	movq	0x100(%rsp), %rax
    000029f6: 	leaq	0x1(%rax), %rsi
    000029fa: 	callq	_ZdlPvm@PLT # Offset: 10746
.Ltmp1027:
    000029ff: 	movq	0xb0(%rsp), %rdi
    00002a07: 	cmpq	0x90(%rsp), %rdi
    00002a0f: 	je	.Ltmp1028 # Offset: 10767
    00002a11: 	movq	0xc0(%rsp), %rax
    00002a19: 	leaq	0x1(%rax), %rsi
    00002a1d: 	callq	_ZdlPvm@PLT # Offset: 10781
.Ltmp1028:
    00002a22: 	movq	%rbp, %rdi
    00002a25: 	callq	_Unwind_Resume@PLT # Offset: 10789
.Ltmp1026:
    00002a2a: 	movq	0xf0(%rsp), %rdi
    00002a32: 	cmpq	0x18(%rsp), %rdi
    00002a37: 	je	.Ltmp1029 # Offset: 10807
    00002a39: 	movq	0x100(%rsp), %rax
    00002a41: 	leaq	0x1(%rax), %rsi
    00002a45: 	callq	_ZdlPvm@PLT # Offset: 10821
.Ltmp1029:
    00002a4a: 	movq	0xd0(%rsp), %rdi
    00002a52: 	cmpq	0x70(%rsp), %rdi
    00002a57: 	je	.Ltmp1027 # Offset: 10839
    00002a59: 	movq	0xe0(%rsp), %rax
    00002a61: 	leaq	0x1(%rax), %rsi
    00002a65: 	callq	_ZdlPvm@PLT # Offset: 10853
    00002a6a: 	jmp	.Ltmp1027 # Offset: 10858
    00002a6c: 	endbr64
.Ltmp1031:
    00002a70: 	movq	%rax, %rbp
    00002a73: 	jmp	.Ltmp1029 # Offset: 10867
    00002a75: 	endbr64
    00002a79: 	jmp	.Ltmp1030 # Offset: 10873
    00002a7e: 	endbr64
    00002a82: 	jmp	.Ltmp1031 # Offset: 10882
    00002a84: 	endbr64
    00002a88: 	jmp	.Ltmp1032 # Offset: 10888
    00002a8d: 	endbr64
    00002a91: 	jmp	.Ltmp1031 # Offset: 10897
    00002a93: 	endbr64
    00002a97: 	jmp	.Ltmp1032 # Offset: 10903
    00002a9c: 	endbr64
    00002aa0: 	jmp	.Ltmp1030 # Offset: 10912
    00002aa5: 	endbr64
    00002aa9: 	jmp	.Ltmp1032 # Offset: 10921
    00002aae: 	endbr64
    00002ab2: 	jmp	.Ltmp1031 # Offset: 10930
    00002ab4: 	endbr64
    00002ab8: 	jmp	.Ltmp1030 # Offset: 10936
    00002abd: 	endbr64
    00002ac1: 	jmp	.Ltmp1032 # Offset: 10945
    00002ac6: 	endbr64
    00002aca: 	jmp	.Ltmp1031 # Offset: 10954
    00002acc: 	endbr64
    00002ad0: 	movq	%rax, %rbp
    00002ad3: 	jmp	.Ltmp1033 # Offset: 10963
    00002ad5: 	endbr64
    00002ad9: 	jmp	.Ltmp1031 # Offset: 10969
.Ltmp1033:
    00002adb: 	movq	0xf0(%rsp), %rdi
    00002ae3: 	leaq	0x100(%rsp), %rax
    00002aeb: 	cmpq	%rax, %rdi
    00002aee: 	jne	.Ltmp1034 # Offset: 10990
    00002af4: 	jmp	.Ltmp1027 # Offset: 10996
    00002af9: 	endbr64
    00002afd: 	jmp	.Ltmp1031 # Offset: 11005
    00002b02: 	endbr64
    00002b06: 	jmp	.Ltmp1032 # Offset: 11014
    00002b0b: 	endbr64
    00002b0f: 	jmp	.Ltmp1030 # Offset: 11023
    00002b14: 	endbr64
    00002b18: 	movq	%rax, %rbp
    00002b1b: 	jmp	.Ltmp1027 # Offset: 11035
    00002b20: 	endbr64
    00002b24: 	jmp	.Ltmp1031 # Offset: 11044
    00002b29: 	endbr64
    00002b2d: 	jmp	.Ltmp1030 # Offset: 11053
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeImEvd"

Binary Function "_Z11TestOneTypeIsEvd" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0xc560
  Size        : 0x2592
  MaxSize     : 0x25a0
  Offset      : 0xc560
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIsEvd
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x1000, %rsp
    00000015: 	orq	$0x0, (%rsp)
    0000001a: 	subq	$0x1000, %rsp
    00000021: 	orq	$0x0, (%rsp)
    00000026: 	subq	$0x38, %rsp
    0000002a: 	movl	$0x5f36, %r9d
    00000030: 	movq	%fs:0x28, %rax
    00000039: 	movq	%rax, 0x2028(%rsp)
    00000041: 	xorl	%eax, %eax
    00000043: 	leaq	0x90(%rsp), %rax
    0000004b: 	movl	$0x31746e69, 0x90(%rsp)
    00000056: 	leaq	0x2020(%rsp), %rbx
    0000005e: 	movq	%rax, 0x60(%rsp)
    00000063: 	movq	%rax, 0x80(%rsp)
    0000006b: 	cvttsd2si	init_value(%rip), %eax
    00000073: 	movw	%r9w, 0x94(%rsp)
    0000007c: 	movb	$0x74, 0x96(%rsp)
    00000084: 	movq	$0x7, 0x88(%rsp)
    00000090: 	movd	%eax, %xmm1
    00000094: 	leaq	0xe0(%rsp), %rax
    0000009c: 	movb	$0x0, 0x97(%rsp)
    000000a4: 	movq	%rax, 0x20(%rsp)
    000000a9: 	punpcklwd	%xmm1, %xmm1
    000000ad: 	pshufd	$0x0, %xmm1, %xmm1
    000000b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1035:
    000000b8: 	movaps	%xmm1, (%rax)
    000000bb: 	addq	$0x10, %rax
    000000bf: 	cmpq	%rbx, %rax
    000000c2: 	jne	.Ltmp1035 # Offset: 194
    000000c4: 	leaq	0x80(%rsp), %rax
    000000cc: 	leaq	0xc0(%rsp), %rdi
    000000d4: 	leaq	DATAat0x141d0(%rip), %rdx
    000000db: 	movq	%rax, %rsi
    000000de: 	movq	%rdi, 0x28(%rsp)
    000000e3: 	cvttsd2si	%xmm0, %r13d
    000000e8: 	movq	%rax, 0x40(%rsp)
    000000ed: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 237
    000000f2: 	callq	clock@PLT # Offset: 242
    000000f7: 	movl	iterations(%rip), %edi
    000000fd: 	movswl	%r13w, %ebp
    00000101: 	xorl	%r12d, %r12d
    00000104: 	movq	%rax, start_time(%rip)
    0000010b: 	leaq	DATAat0x141e1(%rip), %r14
    00000112: 	testl	%edi, %edi
    00000114: 	jle	.Ltmp1036 # Offset: 276
    00000116: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1039:
    00000120: 	movq	0x20(%rsp), %rcx
    00000125: 	xorl	%esi, %esi
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1037:
    00000130: 	movswl	(%rcx), %eax
    00000133: 	addq	$0x2, %rcx
    00000137: 	cltd
    00000138: 	idivl	%ebp
    0000013a: 	addl	%eax, %esi
    0000013c: 	cmpq	%rcx, %rbx
    0000013f: 	jne	.Ltmp1037 # Offset: 319
    00000141: 	cvttsd2si	init_value(%rip), %eax
    00000149: 	cwtl
    0000014a: 	cltd
    0000014b: 	idivl	%ebp
    0000014d: 	imulw	$0xfa0, %ax, %ax
    00000152: 	cmpw	%ax, %si
    00000155: 	je	.Ltmp1038 # Offset: 341
    00000157: 	movq	0xc0(%rsp), %rdx
    0000015f: 	movq	%r14, %rsi
    00000162: 	movl	$0x1, %edi
    00000167: 	xorl	%eax, %eax
    00000169: 	callq	__printf_chk@PLT # Offset: 361
    0000016e: 	movl	iterations(%rip), %edi
.Ltmp1038:
    00000174: 	addl	$0x1, %r12d
    00000178: 	cmpl	%edi, %r12d
    0000017b: 	jl	.Ltmp1039 # Offset: 379
.Ltmp1036:
    0000017d: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000184: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    0000018b: 	subq	$0x20, %rax
    0000018f: 	cmpq	%rax, %rdi
    00000192: 	je	.Ltmp1040 # Offset: 402
    00000198: 	leaq	0x10(%rdi), %rax
    0000019c: 	movq	0xc8(%rsp), %rdx
    000001a4: 	movq	%rax, (%rdi)
    000001a7: 	movq	0xc0(%rsp), %rsi
    000001af: 	addq	%rsi, %rdx
    000001b2: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 434
    000001b7: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001be: 	addq	$0x20, %rax
    000001c2: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1240:
    000001c9: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001d0: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001d7: 	je	.Ltmp1041 # Offset: 471
.Ltmp1239:
    000001dd: 	movq	-0x20(%rax), %r12
    000001e1: 	callq	clock@PLT # Offset: 481
    000001e6: 	pxor	%xmm0, %xmm0
    000001ea: 	movq	%rax, end_time(%rip)
    000001f1: 	movq	%r12, %rdi
    000001f4: 	subq	start_time(%rip), %rax
    000001fb: 	cvtsi2sd	%rax, %xmm0
    00000200: 	divsd	DATAat0x14308(%rip), %xmm0
    00000208: 	callq	_Z13record_resultdPKc # Offset: 520
    0000020d: 	movq	0xc0(%rsp), %rdi
    00000215: 	leaq	0xd0(%rsp), %rax
    0000021d: 	movq	%rax, 0x18(%rsp)
    00000222: 	cmpq	%rax, %rdi
    00000225: 	je	.Ltmp1042 # Offset: 549
    00000227: 	movq	0xd0(%rsp), %rax
    0000022f: 	leaq	0x1(%rax), %rsi
    00000233: 	callq	_ZdlPvm@PLT # Offset: 563
.Ltmp1042:
    00000238: 	movq	0x40(%rsp), %rsi
    0000023d: 	movq	0x28(%rsp), %rdi
    00000242: 	leaq	DATAat0x1420c(%rip), %rdx
    00000249: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 585
    0000024e: 	callq	clock@PLT # Offset: 590
    00000253: 	movl	%r13d, %esi
    00000256: 	negw	%si
    00000259: 	movq	%rax, start_time(%rip)
    00000260: 	cmovsl	%r13d, %esi
    00000264: 	movl	%ebp, %r13d
    00000267: 	sarl	$0x1f, %r13d
    0000026b: 	movzwl	%si, %eax
    0000026e: 	subl	$0x1, %eax
    00000271: 	movl	%eax, 0x50(%rsp)
    00000275: 	movl	%eax, %ecx
    00000277: 	je	.Ltmp1043 # Offset: 631
    0000027d: 	js	.Ltmp1044 # Offset: 637
    00000283: 	movl	$0x80000000, %eax
    00000288: 	xorl	%edx, %edx
    0000028a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1045:
    00000290: 	shrl	%eax
    00000292: 	addl	$0x1, %edx
    00000295: 	testl	%eax, %ecx
    00000297: 	je	.Ltmp1045 # Offset: 663
    00000299: 	movl	$0x20, %eax
    0000029e: 	subl	%edx, %eax
    000002a0: 	movl	$0x1, %edx
    000002a5: 	testl	%eax, %eax
    000002a7: 	cmovlel	%edx, %eax
    000002aa: 	leal	0x1f(%rax), %ecx
    000002ad: 	leal	-0x1(%rax), %r14d
    000002b1: 	movl	$0x1, %eax
    000002b6: 	shlq	%cl, %rax
.Ltmp1255:
    000002b9: 	movzwl	%si, %edi
    000002bc: 	cqto
    000002be: 	xorl	%r15d, %r15d
    000002c1: 	idivq	%rdi
    000002c4: 	movq	%rdi, 0x68(%rsp)
    000002c9: 	movl	iterations(%rip), %edi
    000002cf: 	leal	0x1(%rax), %r12d
    000002d3: 	movslq	%r12d, %r12
    000002d6: 	testl	%edi, %edi
    000002d8: 	jle	.Ltmp1046 # Offset: 728
    000002de: 	nop # Size: 2
.Ltmp1049:
    000002e0: 	movq	0x20(%rsp), %rdx
    000002e5: 	xorl	%esi, %esi
    000002e7: 	movl	%r14d, %ecx
    000002ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1047:
    000002f0: 	movswq	(%rdx), %r8
    000002f4: 	addq	$0x2, %rdx
    000002f8: 	movq	%r8, %rax
    000002fb: 	imulq	%r12, %r8
    000002ff: 	sarq	$0x20, %r8
    00000303: 	addl	%eax, %r8d
    00000306: 	shrl	$0x1f, %eax
    00000309: 	sarl	%cl, %r8d
    0000030c: 	addl	%r8d, %eax
    0000030f: 	xorl	%r13d, %eax
    00000312: 	subl	%r13d, %eax
    00000315: 	addl	%eax, %esi
    00000317: 	cmpq	%rdx, %rbx
    0000031a: 	jne	.Ltmp1047 # Offset: 794
    0000031c: 	cvttsd2si	init_value(%rip), %eax
    00000324: 	movl	%ecx, %r14d
    00000327: 	cwtl
    00000328: 	cltd
    00000329: 	idivl	%ebp
    0000032b: 	imulw	$0xfa0, %ax, %ax
    00000330: 	cmpw	%ax, %si
    00000333: 	je	.Ltmp1048 # Offset: 819
    00000335: 	movq	0xc0(%rsp), %rdx
    0000033d: 	leaq	DATAat0x141e1(%rip), %rsi
    00000344: 	movl	$0x1, %edi
    00000349: 	xorl	%eax, %eax
    0000034b: 	callq	__printf_chk@PLT # Offset: 843
    00000350: 	movl	iterations(%rip), %edi
.Ltmp1048:
    00000356: 	addl	$0x1, %r15d
    0000035a: 	cmpl	%edi, %r15d
    0000035d: 	jl	.Ltmp1049 # Offset: 861
.Ltmp1046:
    0000035f: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000366: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    0000036d: 	subq	$0x20, %rax
    00000371: 	cmpq	%rax, %r14
    00000374: 	je	.Ltmp1050 # Offset: 884
    0000037a: 	leaq	0x10(%r14), %rdi
    0000037e: 	movq	0xc8(%rsp), %r12
    00000386: 	movq	%rdi, (%r14)
    00000389: 	movq	0xc0(%rsp), %r15
    00000391: 	movq	%r15, %rax
    00000394: 	addq	%r12, %rax
    00000397: 	je	.Ltmp1051 # Offset: 919
    00000399: 	testq	%r15, %r15
    0000039c: 	je	.Ltmp1052 # Offset: 924
.Ltmp1051:
    000003a2: 	movq	%r12, 0x78(%rsp)
    000003a7: 	cmpq	$0xf, %r12
    000003ab: 	ja	.Ltmp1053 # Offset: 939
    000003b1: 	cmpq	$0x1, %r12
    000003b5: 	jne	.Ltmp1054 # Offset: 949
    000003bb: 	movzbl	(%r15), %eax
    000003bf: 	movb	%al, 0x10(%r14)
.Ltmp1206:
    000003c3: 	movq	%r12, 0x8(%r14)
    000003c7: 	movb	$0x0, (%rdi,%r12)
    000003cc: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000003d3: 	addq	$0x20, %rax
    000003d7: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1238:
    000003de: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000003e5: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000003ec: 	je	.Ltmp1055 # Offset: 1004
.Ltmp1231:
    000003f2: 	movq	-0x20(%rax), %r12
    000003f6: 	callq	clock@PLT # Offset: 1014
    000003fb: 	pxor	%xmm0, %xmm0
    000003ff: 	movq	%rax, end_time(%rip)
    00000406: 	movq	%r12, %rdi
    00000409: 	subq	start_time(%rip), %rax
    00000410: 	cvtsi2sd	%rax, %xmm0
    00000415: 	divsd	DATAat0x14308(%rip), %xmm0
    0000041d: 	callq	_Z13record_resultdPKc # Offset: 1053
    00000422: 	movq	0xc0(%rsp), %rdi
    0000042a: 	cmpq	0x18(%rsp), %rdi
    0000042f: 	je	.Ltmp1056 # Offset: 1071
    00000431: 	movq	0xd0(%rsp), %rax
    00000439: 	leaq	0x1(%rax), %rsi
    0000043d: 	callq	_ZdlPvm@PLT # Offset: 1085
.Ltmp1056:
    00000442: 	leaq	0xa0(%rsp), %rax
    0000044a: 	movq	0x40(%rsp), %rsi
    0000044f: 	leaq	DATAat0x141f1(%rip), %rdx
    00000456: 	movq	%rax, %rdi
    00000459: 	movq	%rax, 0x58(%rsp)
    0000045e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1118
    00000463: 	callq	clock@PLT # Offset: 1123
    00000468: 	movl	iterations(%rip), %r8d
    0000046f: 	movq	%rax, start_time(%rip)
    00000476: 	testl	%r8d, %r8d
    00000479: 	jle	.Ltmp1057 # Offset: 1145
    0000047f: 	movdqa	DATAat0x14390(%rip), %xmm7
    00000487: 	xorl	%r15d, %r15d
    0000048a: 	movaps	%xmm7, (%rsp)
    0000048e: 	nop # Size: 2
.Ltmp1065:
    00000490: 	movq	0x20(%rsp), %rax
    00000495: 	pxor	%xmm2, %xmm2
    00000499: 	nopl	(%rax) # Size: 7
.Ltmp1058:
    000004a0: 	movdqa	(%rax), %xmm1
    000004a4: 	movdqa	(%rsp), %xmm0
    000004a9: 	pmulhw	(%rax), %xmm0
    000004ad: 	psraw	$0x6, %xmm0
    000004b2: 	addq	$0x10, %rax
    000004b6: 	psraw	$0xf, %xmm1
    000004bb: 	psubw	%xmm1, %xmm0
    000004bf: 	paddw	%xmm0, %xmm2
    000004c3: 	cmpq	%rax, %rbx
    000004c6: 	jne	.Ltmp1058 # Offset: 1222
    000004c8: 	movdqa	%xmm2, %xmm0
    000004cc: 	movq	0xa0(%rsp), %r14
    000004d4: 	movq	0xa8(%rsp), %r12
    000004dc: 	psrldq	$0x8, %xmm0
    000004e1: 	paddw	%xmm0, %xmm2
    000004e5: 	movdqa	%xmm2, %xmm0
    000004e9: 	psrldq	$0x4, %xmm0
    000004ee: 	paddw	%xmm0, %xmm2
    000004f2: 	movdqa	%xmm2, %xmm0
    000004f6: 	psrldq	$0x2, %xmm0
    000004fb: 	paddw	%xmm0, %xmm2
    000004ff: 	pextrw	$0x0, %xmm2, %eax
    00000504: 	movl	%eax, 0x30(%rsp)
    00000508: 	movq	0x18(%rsp), %rax
    0000050d: 	movq	%rax, 0xc0(%rsp)
    00000515: 	movq	%r14, %rax
    00000518: 	addq	%r12, %rax
    0000051b: 	je	.Ltmp1059 # Offset: 1307
    0000051d: 	testq	%r14, %r14
    00000520: 	je	.Ltmp1060 # Offset: 1312
.Ltmp1059:
    00000526: 	movq	%r12, 0x78(%rsp)
    0000052b: 	cmpq	$0xf, %r12
    0000052f: 	ja	.Ltmp1061 # Offset: 1327
    00000535: 	cmpq	$0x1, %r12
    00000539: 	jne	.Ltmp1062 # Offset: 1337
    0000053f: 	movzbl	(%r14), %eax
    00000543: 	movb	%al, 0xd0(%rsp)
    0000054a: 	movq	0x18(%rsp), %rax
.Ltmp1209:
    0000054f: 	movq	%r12, 0xc8(%rsp)
    00000557: 	movb	$0x0, (%rax,%r12)
    0000055c: 	cvttsd2si	init_value(%rip), %edx
    00000564: 	movswl	%dx, %eax
    00000567: 	sarw	$0xf, %dx
    0000056b: 	imull	$0x2d83, %eax, %eax
    00000571: 	sarl	$0x16, %eax
    00000574: 	subl	%edx, %eax
    00000576: 	imulw	$0xfa0, %ax, %ax
    0000057b: 	cmpw	0x30(%rsp), %ax
    00000580: 	je	.Ltmp1063 # Offset: 1408
    00000582: 	movq	0xc0(%rsp), %rdx
    0000058a: 	leaq	DATAat0x141e1(%rip), %rsi
    00000591: 	movl	$0x1, %edi
    00000596: 	xorl	%eax, %eax
    00000598: 	callq	__printf_chk@PLT # Offset: 1432
.Ltmp1063:
    0000059d: 	movq	0xc0(%rsp), %rdi
    000005a5: 	cmpq	0x18(%rsp), %rdi
    000005aa: 	je	.Ltmp1064 # Offset: 1450
    000005b0: 	movq	0xd0(%rsp), %rax
    000005b8: 	addl	$0x1, %r15d
    000005bc: 	leaq	0x1(%rax), %rsi
    000005c0: 	callq	_ZdlPvm@PLT # Offset: 1472
    000005c5: 	cmpl	iterations(%rip), %r15d
    000005cc: 	jl	.Ltmp1065 # Offset: 1484
.Ltmp1057:
    000005d2: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000005d9: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000005e0: 	subq	$0x20, %rax
    000005e4: 	cmpq	%rax, %r14
    000005e7: 	je	.Ltmp1066 # Offset: 1511
    000005ed: 	leaq	0x10(%r14), %rdi
    000005f1: 	movq	0xa8(%rsp), %r12
    000005f9: 	movq	%rdi, (%r14)
    000005fc: 	movq	0xa0(%rsp), %r15
    00000604: 	movq	%r15, %rax
    00000607: 	addq	%r12, %rax
    0000060a: 	je	.Ltmp1067 # Offset: 1546
    0000060c: 	testq	%r15, %r15
    0000060f: 	je	.Ltmp1068 # Offset: 1551
.Ltmp1067:
    00000615: 	movq	%r12, 0x78(%rsp)
    0000061a: 	cmpq	$0xf, %r12
    0000061e: 	ja	.Ltmp1069 # Offset: 1566
    00000624: 	cmpq	$0x1, %r12
    00000628: 	jne	.Ltmp1070 # Offset: 1576
    0000062e: 	movzbl	(%r15), %eax
    00000632: 	movb	%al, 0x10(%r14)
.Ltmp1242:
    00000636: 	movq	%r12, 0x8(%r14)
    0000063a: 	movb	$0x0, (%rdi,%r12)
    0000063f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000646: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000064d: 	addq	$0x20, %rax
    00000651: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000658: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000065f: 	je	.Ltmp1071 # Offset: 1631
.Ltmp1234:
    00000665: 	movq	-0x20(%rax), %r12
    00000669: 	callq	clock@PLT # Offset: 1641
    0000066e: 	pxor	%xmm0, %xmm0
    00000672: 	movq	%rax, end_time(%rip)
    00000679: 	movq	%r12, %rdi
    0000067c: 	subq	start_time(%rip), %rax
    00000683: 	cvtsi2sd	%rax, %xmm0
    00000688: 	divsd	DATAat0x14308(%rip), %xmm0
    00000690: 	callq	_Z13record_resultdPKc # Offset: 1680
    00000695: 	movq	0xa0(%rsp), %rdi
    0000069d: 	leaq	0xb0(%rsp), %rax
    000006a5: 	movq	%rax, 0x30(%rsp)
    000006aa: 	cmpq	%rax, %rdi
    000006ad: 	je	.Ltmp1072 # Offset: 1709
    000006af: 	movq	0xb0(%rsp), %rax
    000006b7: 	leaq	0x1(%rax), %rsi
    000006bb: 	callq	_ZdlPvm@PLT # Offset: 1723
.Ltmp1072:
    000006c0: 	movq	0x40(%rsp), %rsi
    000006c5: 	movq	0x58(%rsp), %rdi
    000006ca: 	leaq	DATAat0x14228(%rip), %rdx
    000006d1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1745
    000006d6: 	callq	clock@PLT # Offset: 1750
    000006db: 	movl	iterations(%rip), %edi
    000006e1: 	movl	$0x0, (%rsp)
    000006e8: 	movq	%rax, start_time(%rip)
    000006ef: 	testl	%edi, %edi
    000006f1: 	jle	.Ltmp1073 # Offset: 1777
    000006f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1081:
    00000700: 	movq	0x20(%rsp), %rdx
    00000705: 	xorl	%ecx, %ecx
    00000707: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1074:
    00000710: 	movswq	(%rdx), %r12
    00000714: 	addq	$0x2, %rdx
    00000718: 	movq	%r12, %rax
    0000071b: 	imulq	$-0x49f49f49, %r12, %r12
    00000722: 	sarq	$0x20, %r12
    00000726: 	addl	%eax, %r12d
    00000729: 	shrl	$0x1f, %eax
    0000072c: 	sarl	$0x8, %r12d
    00000730: 	addl	%eax, %r12d
    00000733: 	addl	%ecx, %r12d
    00000736: 	movl	%r12d, %ecx
    00000739: 	cmpq	%rdx, %rbx
    0000073c: 	jne	.Ltmp1074 # Offset: 1852
    0000073e: 	movq	0x18(%rsp), %rax
    00000743: 	movq	0xa0(%rsp), %r15
    0000074b: 	movq	0xa8(%rsp), %r14
    00000753: 	movq	%rax, 0xc0(%rsp)
    0000075b: 	movq	%r15, %rax
    0000075e: 	addq	%r14, %rax
    00000761: 	je	.Ltmp1075 # Offset: 1889
    00000763: 	testq	%r15, %r15
    00000766: 	je	.Ltmp1076 # Offset: 1894
.Ltmp1075:
    0000076c: 	movq	%r14, 0x78(%rsp)
    00000771: 	cmpq	$0xf, %r14
    00000775: 	ja	.Ltmp1077 # Offset: 1909
    0000077b: 	cmpq	$0x1, %r14
    0000077f: 	jne	.Ltmp1078 # Offset: 1919
    00000785: 	movzbl	(%r15), %eax
    00000789: 	movb	%al, 0xd0(%rsp)
    00000790: 	movq	0x18(%rsp), %rax
.Ltmp1213:
    00000795: 	movq	%r14, 0xc8(%rsp)
    0000079d: 	movb	$0x0, (%rax,%r14)
    000007a2: 	cvttsd2si	init_value(%rip), %edx
    000007aa: 	movswq	%dx, %rax
    000007ae: 	movswl	%dx, %edx
    000007b1: 	imulq	$-0x49f49f49, %rax, %rax
    000007b8: 	sarq	$0x20, %rax
    000007bc: 	addl	%edx, %eax
    000007be: 	shrl	$0x1f, %edx
    000007c1: 	sarl	$0x8, %eax
    000007c4: 	addl	%edx, %eax
    000007c6: 	imulw	$0xfa0, %ax, %ax
    000007cb: 	cmpw	%ax, %r12w
    000007cf: 	je	.Ltmp1079 # Offset: 1999
    000007d1: 	movq	0xc0(%rsp), %rdx
    000007d9: 	leaq	DATAat0x141e1(%rip), %rsi
    000007e0: 	movl	$0x1, %edi
    000007e5: 	xorl	%eax, %eax
    000007e7: 	callq	__printf_chk@PLT # Offset: 2023
.Ltmp1079:
    000007ec: 	movq	0xc0(%rsp), %rdi
    000007f4: 	cmpq	0x18(%rsp), %rdi
    000007f9: 	je	.Ltmp1080 # Offset: 2041
    000007ff: 	movq	0xd0(%rsp), %rax
    00000807: 	leaq	0x1(%rax), %rsi
    0000080b: 	callq	_ZdlPvm@PLT # Offset: 2059
    00000810: 	addl	$0x1, (%rsp)
    00000814: 	movl	(%rsp), %eax
    00000817: 	cmpl	iterations(%rip), %eax
    0000081d: 	jl	.Ltmp1081 # Offset: 2077
.Ltmp1073:
    00000823: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000082a: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000831: 	subq	$0x20, %rax
    00000835: 	cmpq	%rax, %rdi
    00000838: 	je	.Ltmp1082 # Offset: 2104
    0000083e: 	leaq	0x10(%rdi), %rax
    00000842: 	movq	0xa8(%rsp), %rdx
    0000084a: 	movq	%rax, (%rdi)
    0000084d: 	movq	0xa0(%rsp), %rsi
    00000855: 	addq	%rsi, %rdx
    00000858: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 2136
    0000085d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000864: 	addq	$0x20, %rax
    00000868: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1233:
    0000086f: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000876: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000087d: 	je	.Ltmp1083 # Offset: 2173
.Ltmp1232:
    00000883: 	movq	-0x20(%rax), %r12
    00000887: 	callq	clock@PLT # Offset: 2183
    0000088c: 	pxor	%xmm0, %xmm0
    00000890: 	movq	%rax, end_time(%rip)
    00000897: 	movq	%r12, %rdi
    0000089a: 	subq	start_time(%rip), %rax
    000008a1: 	cvtsi2sd	%rax, %xmm0
    000008a6: 	divsd	DATAat0x14308(%rip), %xmm0
    000008ae: 	callq	_Z13record_resultdPKc # Offset: 2222
    000008b3: 	movq	0xa0(%rsp), %rdi
    000008bb: 	cmpq	0x30(%rsp), %rdi
    000008c0: 	je	.Ltmp1084 # Offset: 2240
    000008c2: 	movq	0xb0(%rsp), %rax
    000008ca: 	leaq	0x1(%rax), %rsi
    000008ce: 	callq	_ZdlPvm@PLT # Offset: 2254
.Ltmp1084:
    000008d3: 	movq	0x18(%rsp), %rax
    000008d8: 	movq	0x80(%rsp), %r14
    000008e0: 	movq	0x88(%rsp), %r12
    000008e8: 	movq	%rax, 0xc0(%rsp)
    000008f0: 	movq	%r14, %rax
    000008f3: 	addq	%r12, %rax
    000008f6: 	je	.Ltmp1085 # Offset: 2294
    000008f8: 	testq	%r14, %r14
    000008fb: 	je	.Ltmp1086 # Offset: 2299
.Ltmp1085:
    00000901: 	movq	%r12, 0x78(%rsp)
    00000906: 	cmpq	$0xf, %r12
    0000090a: 	ja	.Ltmp1087 # Offset: 2314
    00000910: 	cmpq	$0x1, %r12
    00000914: 	jne	.Ltmp1088 # Offset: 2324
    0000091a: 	movzbl	(%r14), %eax
    0000091e: 	movb	%al, 0xd0(%rsp)
    00000925: 	movq	0x18(%rsp), %rax
.Ltmp1223:
    0000092a: 	movq	%r12, 0xc8(%rsp)
    00000932: 	movb	$0x0, (%rax,%r12)
    00000937: 	movabsq	$0x3fffffffffffffff, %rax
    00000941: 	subq	0xc8(%rsp), %rax
    00000949: 	cmpq	$0xf, %rax
    0000094d: 	jbe	.Ltmp1089 # Offset: 2381
    00000953: 	movq	0x28(%rsp), %rdi
    00000958: 	movl	$0x10, %edx
    0000095d: 	leaq	DATAat0x14244(%rip), %rsi
    00000964: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2404
    00000969: 	callq	clock@PLT # Offset: 2409
    0000096e: 	movl	iterations(%rip), %edi
    00000974: 	xorl	%r12d, %r12d
    00000977: 	leaq	DATAat0x141e1(%rip), %r14
    0000097e: 	movq	%rax, start_time(%rip)
    00000985: 	testl	%edi, %edi
    00000987: 	jle	.Ltmp1090 # Offset: 2439
    00000989: 	nopl	(%rax) # Size: 7
.Ltmp1093:
    00000990: 	movq	0x20(%rsp), %rcx
    00000995: 	xorl	%esi, %esi
    00000997: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1091:
    000009a0: 	movswl	(%rcx), %eax
    000009a3: 	addq	$0x2, %rcx
    000009a7: 	cltd
    000009a8: 	idivl	%ebp
    000009aa: 	addl	%edx, %esi
    000009ac: 	cmpq	%rbx, %rcx
    000009af: 	jne	.Ltmp1091 # Offset: 2479
    000009b1: 	cvttsd2si	init_value(%rip), %eax
    000009b9: 	cwtl
    000009ba: 	cltd
    000009bb: 	idivl	%ebp
    000009bd: 	imulw	$0xfa0, %dx, %dx
    000009c2: 	cmpw	%dx, %si
    000009c5: 	je	.Ltmp1092 # Offset: 2501
    000009c7: 	movq	0xc0(%rsp), %rdx
    000009cf: 	movq	%r14, %rsi
    000009d2: 	movl	$0x1, %edi
    000009d7: 	xorl	%eax, %eax
    000009d9: 	callq	__printf_chk@PLT # Offset: 2521
    000009de: 	movl	iterations(%rip), %edi
.Ltmp1092:
    000009e4: 	addl	$0x1, %r12d
    000009e8: 	cmpl	%edi, %r12d
    000009eb: 	jl	.Ltmp1093 # Offset: 2539
.Ltmp1090:
    000009ed: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000009f4: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000009fb: 	subq	$0x20, %rax
    000009ff: 	cmpq	%rax, %r14
    00000a02: 	je	.Ltmp1094 # Offset: 2562
    00000a08: 	leaq	0x10(%r14), %rdi
    00000a0c: 	movq	0xc8(%rsp), %r12
    00000a14: 	movq	%rdi, (%r14)
    00000a17: 	movq	0xc0(%rsp), %r15
    00000a1f: 	movq	%r15, %rax
    00000a22: 	addq	%r12, %rax
    00000a25: 	je	.Ltmp1095 # Offset: 2597
    00000a27: 	testq	%r15, %r15
    00000a2a: 	je	.Ltmp1096 # Offset: 2602
.Ltmp1095:
    00000a30: 	movq	%r12, 0x78(%rsp)
    00000a35: 	cmpq	$0xf, %r12
    00000a39: 	ja	.Ltmp1097 # Offset: 2617
    00000a3f: 	cmpq	$0x1, %r12
    00000a43: 	jne	.Ltmp1098 # Offset: 2627
    00000a49: 	movzbl	(%r15), %eax
    00000a4d: 	movb	%al, 0x10(%r14)
.Ltmp1244:
    00000a51: 	movq	%r12, 0x8(%r14)
    00000a55: 	movb	$0x0, (%rdi,%r12)
    00000a5a: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000a61: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000a68: 	addq	$0x20, %rax
    00000a6c: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000a73: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000a7a: 	je	.Ltmp1099 # Offset: 2682
.Ltmp1229:
    00000a80: 	movq	-0x20(%rax), %r12
    00000a84: 	callq	clock@PLT # Offset: 2692
    00000a89: 	pxor	%xmm0, %xmm0
    00000a8d: 	movq	%rax, end_time(%rip)
    00000a94: 	movq	%r12, %rdi
    00000a97: 	subq	start_time(%rip), %rax
    00000a9e: 	cvtsi2sd	%rax, %xmm0
    00000aa3: 	divsd	DATAat0x14308(%rip), %xmm0
    00000aab: 	callq	_Z13record_resultdPKc # Offset: 2731
    00000ab0: 	movq	0xc0(%rsp), %rdi
    00000ab8: 	cmpq	0x18(%rsp), %rdi
    00000abd: 	je	.Ltmp1100 # Offset: 2749
    00000abf: 	movq	0xd0(%rsp), %rax
    00000ac7: 	leaq	0x1(%rax), %rsi
    00000acb: 	callq	_ZdlPvm@PLT # Offset: 2763
.Ltmp1100:
    00000ad0: 	movq	0x40(%rsp), %rsi
    00000ad5: 	movq	0x28(%rsp), %rdi
    00000ada: 	leaq	DATAat0x14255(%rip), %rdx
    00000ae1: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2785
    00000ae6: 	callq	clock@PLT # Offset: 2790
    00000aeb: 	movl	0x50(%rsp), %ecx
    00000aef: 	movq	%rax, start_time(%rip)
    00000af6: 	movabsq	$0x100000000, %rax
    00000b00: 	testl	%ecx, %ecx
    00000b02: 	je	.Ltmp1101 # Offset: 2818
    00000b04: 	js	.Ltmp1102 # Offset: 2820
    00000b0a: 	movl	$0x80000000, %eax
    00000b0f: 	xorl	%edx, %edx
    00000b11: 	nopl	(%rax) # Size: 7
.Ltmp1103:
    00000b18: 	shrl	%eax
    00000b1a: 	addl	$0x1, %edx
    00000b1d: 	testl	%eax, %ecx
    00000b1f: 	je	.Ltmp1103 # Offset: 2847
    00000b21: 	movl	$0x20, %eax
    00000b26: 	subl	%edx, %eax
    00000b28: 	movl	$0x1, %edx
    00000b2d: 	testl	%eax, %eax
    00000b2f: 	cmovlel	%edx, %eax
    00000b32: 	leal	-0x1(%rax), %edi
    00000b35: 	leal	0x1f(%rax), %ecx
    00000b38: 	movl	$0x1, %eax
    00000b3d: 	movl	%edi, 0x50(%rsp)
    00000b41: 	shlq	%cl, %rax
.Ltmp1101:
    00000b44: 	cqto
    00000b46: 	movl	iterations(%rip), %edi
    00000b4c: 	xorl	%r14d, %r14d
    00000b4f: 	leaq	DATAat0x141e1(%rip), %r15
    00000b56: 	idivq	0x68(%rsp)
    00000b5b: 	leal	0x1(%rax), %r12d
    00000b5f: 	movslq	%r12d, %r12
    00000b62: 	testl	%edi, %edi
    00000b64: 	jle	.Ltmp1104 # Offset: 2916
    00000b6a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1107:
    00000b70: 	movq	0x20(%rsp), %r8
    00000b75: 	movl	0x50(%rsp), %ecx
    00000b79: 	xorl	%esi, %esi
    00000b7b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1105:
    00000b80: 	movswq	(%r8), %rdx
    00000b84: 	addq	$0x2, %r8
    00000b88: 	movq	%rdx, %rax
    00000b8b: 	movl	%edx, %r9d
    00000b8e: 	imulq	%r12, %rax
    00000b92: 	shrl	$0x1f, %r9d
    00000b96: 	sarq	$0x20, %rax
    00000b9a: 	addl	%edx, %eax
    00000b9c: 	sarl	%cl, %eax
    00000b9e: 	addl	%r9d, %eax
    00000ba1: 	xorl	%r13d, %eax
    00000ba4: 	subl	%r13d, %eax
    00000ba7: 	imull	%ebp, %eax
    00000baa: 	subl	%eax, %edx
    00000bac: 	addl	%edx, %esi
    00000bae: 	cmpq	%rbx, %r8
    00000bb1: 	jne	.Ltmp1105 # Offset: 2993
    00000bb3: 	cvttsd2si	init_value(%rip), %eax
    00000bbb: 	cwtl
    00000bbc: 	cltd
    00000bbd: 	idivl	%ebp
    00000bbf: 	imulw	$0xfa0, %dx, %dx
    00000bc4: 	cmpw	%dx, %si
    00000bc7: 	je	.Ltmp1106 # Offset: 3015
    00000bc9: 	movq	0xc0(%rsp), %rdx
    00000bd1: 	movq	%r15, %rsi
    00000bd4: 	movl	$0x1, %edi
    00000bd9: 	xorl	%eax, %eax
    00000bdb: 	callq	__printf_chk@PLT # Offset: 3035
    00000be0: 	movl	iterations(%rip), %edi
.Ltmp1106:
    00000be6: 	addl	$0x1, %r14d
    00000bea: 	cmpl	%edi, %r14d
    00000bed: 	jl	.Ltmp1107 # Offset: 3053
.Ltmp1104:
    00000bef: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000bf6: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    00000bfd: 	subq	$0x20, %rax
    00000c01: 	cmpq	%rax, %r13
    00000c04: 	je	.Ltmp1108 # Offset: 3076
    00000c0a: 	leaq	0x10(%r13), %rdi
    00000c0e: 	movq	0xc8(%rsp), %r12
    00000c16: 	movq	%rdi, (%r13)
    00000c1a: 	movq	0xc0(%rsp), %r14
    00000c22: 	movq	%r14, %rax
    00000c25: 	addq	%r12, %rax
    00000c28: 	je	.Ltmp1109 # Offset: 3112
    00000c2a: 	testq	%r14, %r14
    00000c2d: 	je	.Ltmp1110 # Offset: 3117
.Ltmp1109:
    00000c33: 	movq	%r12, 0x78(%rsp)
    00000c38: 	cmpq	$0xf, %r12
    00000c3c: 	ja	.Ltmp1111 # Offset: 3132
    00000c42: 	cmpq	$0x1, %r12
    00000c46: 	jne	.Ltmp1112 # Offset: 3142
    00000c4c: 	movzbl	(%r14), %eax
    00000c50: 	movb	%al, 0x10(%r13)
.Ltmp1246:
    00000c54: 	movq	%r12, 0x8(%r13)
    00000c58: 	movb	$0x0, (%rdi,%r12)
    00000c5d: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000c64: 	addq	$0x20, %rax
    00000c68: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1230:
    00000c6f: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000c76: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000c7d: 	je	.Ltmp1113 # Offset: 3197
.Ltmp1226:
    00000c83: 	movq	-0x20(%rax), %r12
    00000c87: 	callq	clock@PLT # Offset: 3207
    00000c8c: 	pxor	%xmm0, %xmm0
    00000c90: 	movq	%rax, end_time(%rip)
    00000c97: 	movq	%r12, %rdi
    00000c9a: 	subq	start_time(%rip), %rax
    00000ca1: 	cvtsi2sd	%rax, %xmm0
    00000ca6: 	divsd	DATAat0x14308(%rip), %xmm0
    00000cae: 	callq	_Z13record_resultdPKc # Offset: 3246
    00000cb3: 	movq	0xc0(%rsp), %rdi
    00000cbb: 	cmpq	0x18(%rsp), %rdi
    00000cc0: 	je	.Ltmp1114 # Offset: 3264
    00000cc2: 	movq	0xd0(%rsp), %rax
    00000cca: 	leaq	0x1(%rax), %rsi
    00000cce: 	callq	_ZdlPvm@PLT # Offset: 3278
.Ltmp1114:
    00000cd3: 	movq	0x40(%rsp), %rsi
    00000cd8: 	movq	0x58(%rsp), %rdi
    00000cdd: 	leaq	DATAat0x14271(%rip), %rdx
    00000ce4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3300
    00000ce9: 	callq	clock@PLT # Offset: 3305
    00000cee: 	movl	iterations(%rip), %esi
    00000cf4: 	movq	%rax, start_time(%rip)
    00000cfb: 	testl	%esi, %esi
    00000cfd: 	jle	.Ltmp1115 # Offset: 3325
    00000d03: 	movdqa	DATAat0x14390(%rip), %xmm6
    00000d0b: 	xorl	%r14d, %r14d
    00000d0e: 	movaps	%xmm6, (%rsp)
    00000d12: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1123:
    00000d18: 	movq	0x20(%rsp), %rax
    00000d1d: 	pxor	%xmm3, %xmm3
    00000d21: 	nopl	(%rax) # Size: 7
.Ltmp1116:
    00000d28: 	movdqa	(%rax), %xmm1
    00000d2c: 	movdqa	(%rsp), %xmm0
    00000d31: 	addq	$0x10, %rax
    00000d35: 	pmulhw	%xmm1, %xmm0
    00000d39: 	movdqa	%xmm1, %xmm2
    00000d3d: 	psraw	$0xf, %xmm2
    00000d42: 	psraw	$0x6, %xmm0
    00000d47: 	psubw	%xmm2, %xmm0
    00000d4b: 	movdqa	%xmm0, %xmm2
    00000d4f: 	psllw	$0x1, %xmm2
    00000d54: 	paddw	%xmm0, %xmm2
    00000d58: 	movdqa	%xmm2, %xmm0
    00000d5c: 	psllw	$0x4, %xmm0
    00000d61: 	psubw	%xmm2, %xmm0
    00000d65: 	psllw	$0x3, %xmm0
    00000d6a: 	psubw	%xmm0, %xmm1
    00000d6e: 	paddw	%xmm1, %xmm3
    00000d72: 	cmpq	%rbx, %rax
    00000d75: 	jne	.Ltmp1116 # Offset: 3445
    00000d77: 	movdqa	%xmm3, %xmm0
    00000d7b: 	movq	0x18(%rsp), %rax
    00000d80: 	movq	0xa0(%rsp), %r13
    00000d88: 	psrldq	$0x8, %xmm0
    00000d8d: 	movq	0xa8(%rsp), %r12
    00000d95: 	paddw	%xmm0, %xmm3
    00000d99: 	movq	%rax, 0xc0(%rsp)
    00000da1: 	movq	%r13, %rax
    00000da4: 	movdqa	%xmm3, %xmm0
    00000da8: 	addq	%r12, %rax
    00000dab: 	psrldq	$0x4, %xmm0
    00000db0: 	paddw	%xmm0, %xmm3
    00000db4: 	movdqa	%xmm3, %xmm0
    00000db8: 	psrldq	$0x2, %xmm0
    00000dbd: 	paddw	%xmm0, %xmm3
    00000dc1: 	pextrw	$0x0, %xmm3, %r15d
    00000dc7: 	je	.Ltmp1117 # Offset: 3527
    00000dc9: 	testq	%r13, %r13
    00000dcc: 	je	.Ltmp1118 # Offset: 3532
.Ltmp1117:
    00000dd2: 	movq	%r12, 0x78(%rsp)
    00000dd7: 	cmpq	$0xf, %r12
    00000ddb: 	ja	.Ltmp1119 # Offset: 3547
    00000de1: 	cmpq	$0x1, %r12
    00000de5: 	jne	.Ltmp1120 # Offset: 3557
    00000deb: 	movzbl	(%r13), %eax
    00000df0: 	movb	%al, 0xd0(%rsp)
    00000df7: 	movq	0x18(%rsp), %rax
.Ltmp1211:
    00000dfc: 	movq	%r12, 0xc8(%rsp)
    00000e04: 	movb	$0x0, (%rax,%r12)
    00000e09: 	cvttsd2si	init_value(%rip), %edx
    00000e11: 	movswl	%dx, %eax
    00000e14: 	movl	%edx, %ecx
    00000e16: 	imull	$0x2d83, %eax, %eax
    00000e1c: 	sarw	$0xf, %cx
    00000e20: 	sarl	$0x16, %eax
    00000e23: 	subl	%ecx, %eax
    00000e25: 	imulw	$0x168, %ax, %ax
    00000e2a: 	subl	%eax, %edx
    00000e2c: 	imulw	$0xfa0, %dx, %dx
    00000e31: 	cmpw	%r15w, %dx
    00000e35: 	je	.Ltmp1121 # Offset: 3637
    00000e37: 	movq	0xc0(%rsp), %rdx
    00000e3f: 	leaq	DATAat0x141e1(%rip), %rsi
    00000e46: 	movl	$0x1, %edi
    00000e4b: 	xorl	%eax, %eax
    00000e4d: 	callq	__printf_chk@PLT # Offset: 3661
.Ltmp1121:
    00000e52: 	movq	0xc0(%rsp), %rdi
    00000e5a: 	cmpq	0x18(%rsp), %rdi
    00000e5f: 	je	.Ltmp1122 # Offset: 3679
    00000e65: 	movq	0xd0(%rsp), %rax
    00000e6d: 	addl	$0x1, %r14d
    00000e71: 	leaq	0x1(%rax), %rsi
    00000e75: 	callq	_ZdlPvm@PLT # Offset: 3701
    00000e7a: 	cmpl	iterations(%rip), %r14d
    00000e81: 	jl	.Ltmp1123 # Offset: 3713
.Ltmp1115:
    00000e87: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000e8e: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000e95: 	subq	$0x20, %rax
    00000e99: 	cmpq	%rax, %rdi
    00000e9c: 	je	.Ltmp1124 # Offset: 3740
    00000ea2: 	leaq	0x10(%rdi), %rax
    00000ea6: 	movq	0xa8(%rsp), %rdx
    00000eae: 	movq	%rax, (%rdi)
    00000eb1: 	movq	0xa0(%rsp), %rsi
    00000eb9: 	addq	%rsi, %rdx
    00000ebc: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 3772
    00000ec1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000ec8: 	addq	$0x20, %rax
    00000ecc: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1228:
    00000ed3: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000eda: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000ee1: 	je	.Ltmp1125 # Offset: 3809
.Ltmp1227:
    00000ee7: 	movq	-0x20(%rax), %r12
    00000eeb: 	callq	clock@PLT # Offset: 3819
    00000ef0: 	pxor	%xmm0, %xmm0
    00000ef4: 	movq	%rax, end_time(%rip)
    00000efb: 	movq	%r12, %rdi
    00000efe: 	subq	start_time(%rip), %rax
    00000f05: 	cvtsi2sd	%rax, %xmm0
    00000f0a: 	divsd	DATAat0x14308(%rip), %xmm0
    00000f12: 	callq	_Z13record_resultdPKc # Offset: 3858
    00000f17: 	movq	0xa0(%rsp), %rdi
    00000f1f: 	cmpq	0x30(%rsp), %rdi
    00000f24: 	je	.Ltmp1126 # Offset: 3876
    00000f26: 	movq	0xb0(%rsp), %rax
    00000f2e: 	leaq	0x1(%rax), %rsi
    00000f32: 	callq	_ZdlPvm@PLT # Offset: 3890
.Ltmp1126:
    00000f37: 	movq	0x30(%rsp), %rax
    00000f3c: 	movq	0x80(%rsp), %r13
    00000f44: 	movq	0x88(%rsp), %r12
    00000f4c: 	movq	%rax, 0xa0(%rsp)
    00000f54: 	movq	%r13, %rax
    00000f57: 	addq	%r12, %rax
    00000f5a: 	je	.Ltmp1127 # Offset: 3930
    00000f5c: 	testq	%r13, %r13
    00000f5f: 	je	.Ltmp1128 # Offset: 3935
.Ltmp1127:
    00000f65: 	movq	%r12, 0x78(%rsp)
    00000f6a: 	cmpq	$0xf, %r12
    00000f6e: 	ja	.Ltmp1129 # Offset: 3950
    00000f74: 	cmpq	$0x1, %r12
    00000f78: 	jne	.Ltmp1130 # Offset: 3960
    00000f7e: 	movzbl	(%r13), %eax
    00000f83: 	movb	%al, 0xb0(%rsp)
    00000f8a: 	movq	0x30(%rsp), %rax
.Ltmp1221:
    00000f8f: 	movq	%r12, 0xa8(%rsp)
    00000f97: 	movb	$0x0, (%rax,%r12)
    00000f9c: 	movabsq	$0x3fffffffffffffff, %rax
    00000fa6: 	subq	0xa8(%rsp), %rax
    00000fae: 	cmpq	$0x1a, %rax
    00000fb2: 	jbe	.Ltmp1131 # Offset: 4018
    00000fb8: 	movq	0x58(%rsp), %rdi
    00000fbd: 	movl	$0x1b, %edx
    00000fc2: 	leaq	DATAat0x14282(%rip), %rsi
    00000fc9: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 4041
    00000fce: 	callq	clock@PLT # Offset: 4046
    00000fd3: 	movl	iterations(%rip), %ecx
    00000fd9: 	xorl	%r15d, %r15d
    00000fdc: 	movq	%rax, start_time(%rip)
    00000fe3: 	testl	%ecx, %ecx
    00000fe5: 	jle	.Ltmp1132 # Offset: 4069
    00000feb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1140:
    00000ff0: 	movq	0x20(%rsp), %rdx
    00000ff5: 	xorl	%ecx, %ecx
    00000ff7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1133:
    00001000: 	movswl	(%rdx), %esi
    00001003: 	addq	$0x2, %rdx
    00001007: 	movswq	%si, %r12
    0000100b: 	movl	%esi, %eax
    0000100d: 	imulq	$-0x49f49f49, %r12, %r12
    00001014: 	shrl	$0x1f, %eax
    00001017: 	sarq	$0x20, %r12
    0000101b: 	addl	%esi, %r12d
    0000101e: 	sarl	$0x8, %r12d
    00001022: 	addl	%eax, %r12d
    00001025: 	imull	$0xfffffe98, %r12d, %r12d
    0000102c: 	addl	%esi, %r12d
    0000102f: 	addl	%ecx, %r12d
    00001032: 	movl	%r12d, %ecx
    00001035: 	cmpq	%rbx, %rdx
    00001038: 	jne	.Ltmp1133 # Offset: 4152
    0000103a: 	movq	0x18(%rsp), %rax
    0000103f: 	movq	0xa0(%rsp), %r14
    00001047: 	movq	0xa8(%rsp), %r13
    0000104f: 	movq	%rax, 0xc0(%rsp)
    00001057: 	movq	%r14, %rax
    0000105a: 	addq	%r13, %rax
    0000105d: 	je	.Ltmp1134 # Offset: 4189
    0000105f: 	testq	%r14, %r14
    00001062: 	je	.Ltmp1135 # Offset: 4194
.Ltmp1134:
    00001068: 	movq	%r13, 0x78(%rsp)
    0000106d: 	cmpq	$0xf, %r13
    00001071: 	ja	.Ltmp1136 # Offset: 4209
    00001077: 	cmpq	$0x1, %r13
    0000107b: 	jne	.Ltmp1137 # Offset: 4219
    00001081: 	movzbl	(%r14), %eax
    00001085: 	movb	%al, 0xd0(%rsp)
    0000108c: 	movq	0x18(%rsp), %rax
.Ltmp1217:
    00001091: 	movq	%r13, 0xc8(%rsp)
    00001099: 	movb	$0x0, (%rax,%r13)
    0000109e: 	cvttsd2si	init_value(%rip), %eax
    000010a6: 	movswl	%ax, %edx
    000010a9: 	movswq	%ax, %rax
    000010ad: 	imulq	$-0x49f49f49, %rax, %rax
    000010b4: 	movl	%edx, %ecx
    000010b6: 	shrl	$0x1f, %ecx
    000010b9: 	sarq	$0x20, %rax
    000010bd: 	addl	%edx, %eax
    000010bf: 	sarl	$0x8, %eax
    000010c2: 	addl	%ecx, %eax
    000010c4: 	imull	$0xfffffe98, %eax, %eax
    000010ca: 	addl	%edx, %eax
    000010cc: 	imulw	$0xfa0, %ax, %ax
    000010d1: 	cmpw	%ax, %r12w
    000010d5: 	je	.Ltmp1138 # Offset: 4309
    000010d7: 	movq	0xc0(%rsp), %rdx
    000010df: 	leaq	DATAat0x141e1(%rip), %rsi
    000010e6: 	movl	$0x1, %edi
    000010eb: 	xorl	%eax, %eax
    000010ed: 	callq	__printf_chk@PLT # Offset: 4333
.Ltmp1138:
    000010f2: 	movq	0xc0(%rsp), %rdi
    000010fa: 	cmpq	0x18(%rsp), %rdi
    000010ff: 	je	.Ltmp1139 # Offset: 4351
    00001105: 	movq	0xd0(%rsp), %rax
    0000110d: 	addl	$0x1, %r15d
    00001111: 	leaq	0x1(%rax), %rsi
    00001115: 	callq	_ZdlPvm@PLT # Offset: 4373
    0000111a: 	cmpl	iterations(%rip), %r15d
    00001121: 	jl	.Ltmp1140 # Offset: 4385
.Ltmp1132:
    00001127: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000112e: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    00001135: 	subq	$0x20, %rax
    00001139: 	cmpq	%rax, %r13
    0000113c: 	je	.Ltmp1141 # Offset: 4412
    00001142: 	leaq	0x10(%r13), %rdi
    00001146: 	movq	0xa8(%rsp), %r12
    0000114e: 	movq	%rdi, (%r13)
    00001152: 	movq	0xa0(%rsp), %r14
    0000115a: 	movq	%r14, %rax
    0000115d: 	addq	%r12, %rax
    00001160: 	je	.Ltmp1142 # Offset: 4448
    00001162: 	testq	%r14, %r14
    00001165: 	je	.Ltmp1143 # Offset: 4453
.Ltmp1142:
    0000116b: 	movq	%r12, 0x78(%rsp)
    00001170: 	cmpq	$0xf, %r12
    00001174: 	ja	.Ltmp1144 # Offset: 4468
    0000117a: 	cmpq	$0x1, %r12
    0000117e: 	jne	.Ltmp1145 # Offset: 4478
    00001184: 	movzbl	(%r14), %eax
    00001188: 	movb	%al, 0x10(%r13)
.Ltmp1250:
    0000118c: 	movq	%r12, 0x8(%r13)
    00001190: 	movb	$0x0, (%rdi,%r12)
    00001195: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000119c: 	addq	$0x20, %rax
    000011a0: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1237:
    000011a7: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000011ae: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000011b5: 	je	.Ltmp1146 # Offset: 4533
.Ltmp1225:
    000011bb: 	movq	-0x20(%rax), %r12
    000011bf: 	callq	clock@PLT # Offset: 4543
    000011c4: 	pxor	%xmm0, %xmm0
    000011c8: 	movq	%rax, end_time(%rip)
    000011cf: 	movq	%r12, %rdi
    000011d2: 	subq	start_time(%rip), %rax
    000011d9: 	cvtsi2sd	%rax, %xmm0
    000011de: 	divsd	DATAat0x14308(%rip), %xmm0
    000011e6: 	callq	_Z13record_resultdPKc # Offset: 4582
    000011eb: 	movq	0xa0(%rsp), %rdi
    000011f3: 	cmpq	0x30(%rsp), %rdi
    000011f8: 	je	.Ltmp1147 # Offset: 4600
    000011fa: 	movq	0xb0(%rsp), %rax
    00001202: 	leaq	0x1(%rax), %rsi
    00001206: 	callq	_ZdlPvm@PLT # Offset: 4614
.Ltmp1147:
    0000120b: 	movq	0x40(%rsp), %rsi
    00001210: 	movq	0x28(%rsp), %rdi
    00001215: 	leaq	DATAat0x1429e(%rip), %rdx
    0000121c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4636
    00001221: 	callq	clock@PLT # Offset: 4641
    00001226: 	movl	iterations(%rip), %edi
    0000122c: 	xorl	%r12d, %r12d
    0000122f: 	leaq	DATAat0x141e1(%rip), %r13
    00001236: 	movq	%rax, start_time(%rip)
    0000123d: 	testl	%edi, %edi
    0000123f: 	jle	.Ltmp1148 # Offset: 4671
    00001241: 	nopl	(%rax) # Size: 7
.Ltmp1151:
    00001248: 	movq	0x20(%rsp), %rcx
    0000124d: 	xorl	%esi, %esi
    0000124f: 	nop # Size: 1
.Ltmp1149:
    00001250: 	movswl	(%rcx), %eax
    00001253: 	addq	$0x2, %rcx
    00001257: 	cltd
    00001258: 	idivl	%ebp
    0000125a: 	addl	%edx, %eax
    0000125c: 	addl	%eax, %esi
    0000125e: 	cmpq	%rbx, %rcx
    00001261: 	jne	.Ltmp1149 # Offset: 4705
    00001263: 	cvttsd2si	init_value(%rip), %eax
    0000126b: 	cwtl
    0000126c: 	cltd
    0000126d: 	idivl	%ebp
    0000126f: 	addl	%edx, %eax
    00001271: 	imulw	$0xfa0, %ax, %ax
    00001276: 	cmpw	%ax, %si
    00001279: 	je	.Ltmp1150 # Offset: 4729
    0000127b: 	movq	0xc0(%rsp), %rdx
    00001283: 	movq	%r13, %rsi
    00001286: 	movl	$0x1, %edi
    0000128b: 	xorl	%eax, %eax
    0000128d: 	callq	__printf_chk@PLT # Offset: 4749
    00001292: 	movl	iterations(%rip), %edi
.Ltmp1150:
    00001298: 	addl	$0x1, %r12d
    0000129c: 	cmpl	%edi, %r12d
    0000129f: 	jl	.Ltmp1151 # Offset: 4767
.Ltmp1148:
    000012a1: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000012a8: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    000012af: 	subq	$0x20, %rax
    000012b3: 	cmpq	%rax, %rbp
    000012b6: 	je	.Ltmp1152 # Offset: 4790
    000012bc: 	leaq	0x10(%rbp), %rdi
    000012c0: 	movq	0xc8(%rsp), %r12
    000012c8: 	movq	%rdi, (%rbp)
    000012cc: 	movq	0xc0(%rsp), %r13
    000012d4: 	movq	%r13, %rax
    000012d7: 	addq	%r12, %rax
    000012da: 	je	.Ltmp1153 # Offset: 4826
    000012dc: 	testq	%r13, %r13
    000012df: 	je	.Ltmp1154 # Offset: 4831
.Ltmp1153:
    000012e5: 	movq	%r12, 0x78(%rsp)
    000012ea: 	cmpq	$0xf, %r12
    000012ee: 	ja	.Ltmp1155 # Offset: 4846
    000012f4: 	cmpq	$0x1, %r12
    000012f8: 	jne	.Ltmp1156 # Offset: 4856
    000012fe: 	movzbl	(%r13), %eax
    00001303: 	movb	%al, 0x10(%rbp)
.Ltmp1252:
    00001306: 	movq	%r12, 0x8(%rbp)
    0000130a: 	movb	$0x0, (%rdi,%r12)
    0000130f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001316: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000131d: 	addq	$0x20, %rax
    00001321: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001328: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000132f: 	je	.Ltmp1157 # Offset: 4911
.Ltmp1224:
    00001335: 	movq	-0x20(%rax), %rbp
    00001339: 	callq	clock@PLT # Offset: 4921
    0000133e: 	pxor	%xmm0, %xmm0
    00001342: 	movq	%rax, end_time(%rip)
    00001349: 	movq	%rbp, %rdi
    0000134c: 	subq	start_time(%rip), %rax
    00001353: 	cvtsi2sd	%rax, %xmm0
    00001358: 	divsd	DATAat0x14308(%rip), %xmm0
    00001360: 	callq	_Z13record_resultdPKc # Offset: 4960
    00001365: 	movq	0xc0(%rsp), %rdi
    0000136d: 	cmpq	0x18(%rsp), %rdi
    00001372: 	je	.Ltmp1158 # Offset: 4978
    00001374: 	movq	0xd0(%rsp), %rax
    0000137c: 	leaq	0x1(%rax), %rsi
    00001380: 	callq	_ZdlPvm@PLT # Offset: 4992
.Ltmp1158:
    00001385: 	movq	0x40(%rsp), %rsi
    0000138a: 	movq	0x58(%rsp), %rdi
    0000138f: 	leaq	DATAat0x142d0(%rip), %rdx
    00001396: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5014
    0000139b: 	callq	clock@PLT # Offset: 5019
    000013a0: 	movl	iterations(%rip), %edx
    000013a6: 	xorl	%r14d, %r14d
    000013a9: 	leaq	DATAat0x141e1(%rip), %r15
    000013b0: 	movq	%rax, start_time(%rip)
    000013b7: 	testl	%edx, %edx
    000013b9: 	jle	.Ltmp1159 # Offset: 5049
    000013bf: 	nop # Size: 1
.Ltmp1167:
    000013c0: 	movq	0x20(%rsp), %rsi
    000013c5: 	xorl	%ecx, %ecx
    000013c7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1160:
    000013d0: 	movswl	(%rsi), %edi
    000013d3: 	addq	$0x2, %rsi
    000013d7: 	movswq	%di, %rax
    000013db: 	movl	%edi, %edx
    000013dd: 	imulq	$-0x49f49f49, %rax, %rax
    000013e4: 	shrl	$0x1f, %edx
    000013e7: 	sarq	$0x20, %rax
    000013eb: 	addl	%edi, %eax
    000013ed: 	sarl	$0x8, %eax
    000013f0: 	addl	%edx, %eax
    000013f2: 	imull	$0xfffffe98, %eax, %edx
    000013f8: 	addl	%ecx, %eax
    000013fa: 	addl	%edi, %edx
    000013fc: 	leal	(%rax,%rdx), %ebp
    000013ff: 	movl	%ebp, %ecx
    00001401: 	cmpq	%rbx, %rsi
    00001404: 	jne	.Ltmp1160 # Offset: 5124
    00001406: 	movq	0x18(%rsp), %rax
    0000140b: 	movq	0xa0(%rsp), %r13
    00001413: 	movq	0xa8(%rsp), %r12
    0000141b: 	movq	%rax, 0xc0(%rsp)
    00001423: 	movq	%r13, %rax
    00001426: 	addq	%r12, %rax
    00001429: 	je	.Ltmp1161 # Offset: 5161
    0000142b: 	testq	%r13, %r13
    0000142e: 	je	.Ltmp1162 # Offset: 5166
.Ltmp1161:
    00001434: 	movq	%r12, 0x78(%rsp)
    00001439: 	cmpq	$0xf, %r12
    0000143d: 	ja	.Ltmp1163 # Offset: 5181
    00001443: 	cmpq	$0x1, %r12
    00001447: 	jne	.Ltmp1164 # Offset: 5191
    0000144d: 	movzbl	(%r13), %eax
    00001452: 	movb	%al, 0xd0(%rsp)
    00001459: 	movq	0x18(%rsp), %rax
.Ltmp1215:
    0000145e: 	movq	%r12, 0xc8(%rsp)
    00001466: 	movb	$0x0, (%rax,%r12)
    0000146b: 	cvttsd2si	init_value(%rip), %eax
    00001473: 	movswl	%ax, %edx
    00001476: 	movswq	%ax, %rax
    0000147a: 	imulq	$-0x49f49f49, %rax, %rax
    00001481: 	movl	%edx, %ecx
    00001483: 	shrl	$0x1f, %ecx
    00001486: 	sarq	$0x20, %rax
    0000148a: 	addl	%edx, %eax
    0000148c: 	sarl	$0x8, %eax
    0000148f: 	addl	%ecx, %eax
    00001491: 	imulw	$0xfe99, %ax, %ax
    00001496: 	addl	%edx, %eax
    00001498: 	imulw	$0xfa0, %ax, %ax
    0000149d: 	cmpw	%ax, %bp
    000014a0: 	je	.Ltmp1165 # Offset: 5280
    000014a2: 	movq	0xc0(%rsp), %rdx
    000014aa: 	movq	%r15, %rsi
    000014ad: 	movl	$0x1, %edi
    000014b2: 	xorl	%eax, %eax
    000014b4: 	callq	__printf_chk@PLT # Offset: 5300
.Ltmp1165:
    000014b9: 	movq	0xc0(%rsp), %rdi
    000014c1: 	cmpq	0x18(%rsp), %rdi
    000014c6: 	je	.Ltmp1166 # Offset: 5318
    000014cc: 	movq	0xd0(%rsp), %rax
    000014d4: 	addl	$0x1, %r14d
    000014d8: 	leaq	0x1(%rax), %rsi
    000014dc: 	callq	_ZdlPvm@PLT # Offset: 5340
    000014e1: 	cmpl	iterations(%rip), %r14d
    000014e8: 	jl	.Ltmp1167 # Offset: 5352
.Ltmp1159:
    000014ee: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000014f5: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000014fc: 	subq	$0x20, %rax
    00001500: 	cmpq	%rax, %rdi
    00001503: 	je	.Ltmp1168 # Offset: 5379
    00001509: 	leaq	0x10(%rdi), %rax
    0000150d: 	movq	0xa8(%rsp), %rdx
    00001515: 	movq	%rax, (%rdi)
    00001518: 	movq	0xa0(%rsp), %rsi
    00001520: 	addq	%rsi, %rdx
    00001523: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 5411
    00001528: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000152f: 	addq	$0x20, %rax
    00001533: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1236:
    0000153a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001541: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001548: 	je	.Ltmp1169 # Offset: 5448
.Ltmp1235:
    0000154e: 	movq	-0x20(%rax), %rbp
    00001552: 	callq	clock@PLT # Offset: 5458
    00001557: 	pxor	%xmm0, %xmm0
    0000155b: 	movq	%rax, end_time(%rip)
    00001562: 	movq	%rbp, %rdi
    00001565: 	subq	start_time(%rip), %rax
    0000156c: 	cvtsi2sd	%rax, %xmm0
    00001571: 	divsd	DATAat0x14308(%rip), %xmm0
    00001579: 	callq	_Z13record_resultdPKc # Offset: 5497
    0000157e: 	movq	0xa0(%rsp), %rdi
    00001586: 	cmpq	0x30(%rsp), %rdi
    0000158b: 	je	.Ltmp1170 # Offset: 5515
    0000158d: 	movq	0xb0(%rsp), %rax
    00001595: 	leaq	0x1(%rax), %rsi
    00001599: 	callq	_ZdlPvm@PLT # Offset: 5529
.Ltmp1170:
    0000159e: 	movq	0x40(%rsp), %rsi
    000015a3: 	movq	0x58(%rsp), %rdi
    000015a8: 	leaq	DATAat0x142b5(%rip), %rdx
    000015af: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5551
    000015b4: 	callq	clock@PLT # Offset: 5556
    000015b9: 	movq	%rax, start_time(%rip)
    000015c0: 	movl	iterations(%rip), %eax
    000015c6: 	testl	%eax, %eax
    000015c8: 	jle	.Ltmp1171 # Offset: 5576
    000015ce: 	movdqa	DATAat0x14390(%rip), %xmm7
    000015d6: 	xorl	%r13d, %r13d
    000015d9: 	leaq	DATAat0x141e1(%rip), %r15
    000015e0: 	movaps	%xmm7, (%rsp)
    000015e4: 	nopl	(%rax) # Size: 4
.Ltmp1179:
    000015e8: 	movq	0x20(%rsp), %rax
    000015ed: 	pxor	%xmm1, %xmm1
    000015f1: 	nopl	(%rax) # Size: 7
.Ltmp1172:
    000015f8: 	movdqa	(%rax), %xmm2
    000015fc: 	movdqa	(%rsp), %xmm0
    00001601: 	addq	$0x10, %rax
    00001605: 	pmulhw	%xmm2, %xmm0
    00001609: 	movdqa	%xmm2, %xmm3
    0000160d: 	psraw	$0xf, %xmm3
    00001612: 	psraw	$0x6, %xmm0
    00001617: 	psubw	%xmm3, %xmm0
    0000161b: 	movdqa	%xmm0, %xmm4
    0000161f: 	paddw	%xmm0, %xmm1
    00001623: 	psllw	$0x1, %xmm4
    00001628: 	paddw	%xmm0, %xmm4
    0000162c: 	movdqa	%xmm4, %xmm3
    00001630: 	psllw	$0x4, %xmm3
    00001635: 	psubw	%xmm4, %xmm3
    00001639: 	psllw	$0x3, %xmm3
    0000163e: 	psubw	%xmm3, %xmm2
    00001642: 	paddw	%xmm2, %xmm1
    00001646: 	cmpq	%rax, %rbx
    00001649: 	jne	.Ltmp1172 # Offset: 5705
    0000164b: 	movdqa	%xmm1, %xmm0
    0000164f: 	movq	0x18(%rsp), %rax
    00001654: 	movq	0xa0(%rsp), %rbp
    0000165c: 	psrldq	$0x8, %xmm0
    00001661: 	movq	0xa8(%rsp), %r12
    00001669: 	paddw	%xmm0, %xmm1
    0000166d: 	movq	%rax, 0xc0(%rsp)
    00001675: 	movq	%rbp, %rax
    00001678: 	movdqa	%xmm1, %xmm0
    0000167c: 	addq	%r12, %rax
    0000167f: 	psrldq	$0x4, %xmm0
    00001684: 	paddw	%xmm0, %xmm1
    00001688: 	movdqa	%xmm1, %xmm0
    0000168c: 	psrldq	$0x2, %xmm0
    00001691: 	paddw	%xmm0, %xmm1
    00001695: 	pextrw	$0x0, %xmm1, %r14d
    0000169b: 	je	.Ltmp1173 # Offset: 5787
    0000169d: 	testq	%rbp, %rbp
    000016a0: 	je	.Ltmp1174 # Offset: 5792
.Ltmp1173:
    000016a6: 	movq	%r12, 0x78(%rsp)
    000016ab: 	cmpq	$0xf, %r12
    000016af: 	ja	.Ltmp1175 # Offset: 5807
    000016b5: 	cmpq	$0x1, %r12
    000016b9: 	jne	.Ltmp1176 # Offset: 5817
    000016bf: 	movzbl	(%rbp), %eax
    000016c3: 	movb	%al, 0xd0(%rsp)
    000016ca: 	movq	0x18(%rsp), %rax
.Ltmp1219:
    000016cf: 	movq	%r12, 0xc8(%rsp)
    000016d7: 	movb	$0x0, (%rax,%r12)
    000016dc: 	cvttsd2si	init_value(%rip), %edx
    000016e4: 	movswl	%dx, %eax
    000016e7: 	movl	%edx, %ecx
    000016e9: 	imull	$0x2d83, %eax, %eax
    000016ef: 	sarw	$0xf, %cx
    000016f3: 	sarl	$0x16, %eax
    000016f6: 	subl	%ecx, %eax
    000016f8: 	imulw	$0xfe99, %ax, %ax
    000016fd: 	addl	%edx, %eax
    000016ff: 	imulw	$0xfa0, %ax, %ax
    00001704: 	cmpw	%r14w, %ax
    00001708: 	je	.Ltmp1177 # Offset: 5896
    0000170a: 	movq	0xc0(%rsp), %rdx
    00001712: 	movq	%r15, %rsi
    00001715: 	movl	$0x1, %edi
    0000171a: 	xorl	%eax, %eax
    0000171c: 	callq	__printf_chk@PLT # Offset: 5916
.Ltmp1177:
    00001721: 	movq	0xc0(%rsp), %rdi
    00001729: 	cmpq	0x18(%rsp), %rdi
    0000172e: 	je	.Ltmp1178 # Offset: 5934
    00001734: 	movq	0xd0(%rsp), %rax
    0000173c: 	addl	$0x1, %r13d
    00001740: 	leaq	0x1(%rax), %rsi
    00001744: 	callq	_ZdlPvm@PLT # Offset: 5956
    00001749: 	cmpl	iterations(%rip), %r13d
    00001750: 	jl	.Ltmp1179 # Offset: 5968
.Ltmp1171:
    00001756: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000175d: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    00001764: 	subq	$0x20, %rax
    00001768: 	cmpq	%rax, %rbx
    0000176b: 	je	.Ltmp1180 # Offset: 5995
    00001771: 	leaq	0x10(%rbx), %rdi
    00001775: 	movq	0xa8(%rsp), %r12
    0000177d: 	movq	%rdi, (%rbx)
    00001780: 	movq	0xa0(%rsp), %rbp
    00001788: 	movq	%rbp, %rax
    0000178b: 	addq	%r12, %rax
    0000178e: 	je	.Ltmp1181 # Offset: 6030
    00001790: 	testq	%rbp, %rbp
    00001793: 	je	.Ltmp1182 # Offset: 6035
.Ltmp1181:
    00001799: 	movq	%r12, 0x78(%rsp)
    0000179e: 	cmpq	$0xf, %r12
    000017a2: 	ja	.Ltmp1183 # Offset: 6050
    000017a8: 	cmpq	$0x1, %r12
    000017ac: 	jne	.Ltmp1184 # Offset: 6060
    000017b2: 	movzbl	(%rbp), %eax
    000017b6: 	movb	%al, 0x10(%rbx)
.Ltmp1248:
    000017b9: 	movq	%r12, 0x8(%rbx)
    000017bd: 	movb	$0x0, (%rdi,%r12)
    000017c2: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000017c9: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000017d0: 	addq	$0x20, %rax
    000017d4: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000017db: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    000017e2: 	je	.Ltmp1185 # Offset: 6114
.Ltmp1241:
    000017e8: 	movq	-0x20(%rax), %rbp
    000017ec: 	callq	clock@PLT # Offset: 6124
    000017f1: 	pxor	%xmm0, %xmm0
    000017f5: 	movq	%rax, end_time(%rip)
    000017fc: 	movq	%rbp, %rdi
    000017ff: 	subq	start_time(%rip), %rax
    00001806: 	cvtsi2sd	%rax, %xmm0
    0000180b: 	divsd	DATAat0x14308(%rip), %xmm0
    00001813: 	callq	_Z13record_resultdPKc # Offset: 6163
    00001818: 	movq	0xa0(%rsp), %rdi
    00001820: 	cmpq	0x30(%rsp), %rdi
    00001825: 	je	.Ltmp1186 # Offset: 6181
    00001827: 	movq	0xb0(%rsp), %rax
    0000182f: 	leaq	0x1(%rax), %rsi
    00001833: 	callq	_ZdlPvm@PLT # Offset: 6195
.Ltmp1186:
    00001838: 	movq	0x40(%rsp), %rsi
    0000183d: 	movq	0x28(%rsp), %rdi
    00001842: 	leaq	DATAat0x14202(%rip), %rdx
    00001849: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6217
    0000184e: 	movl	iterations(%rip), %edx
    00001854: 	xorl	%r8d, %r8d
    00001857: 	xorl	%ecx, %ecx
    00001859: 	movl	$0xfa0, %esi
    0000185e: 	movq	0xc0(%rsp), %rdi
    00001866: 	callq	_Z9summarizePKciiii # Offset: 6246
    0000186b: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm6
    00001873: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm5
    0000187b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001882: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    00001889: 	movaps	%xmm6, 0x40(%rsp)
    0000188e: 	movq	%xmm6, %rbp
    00001893: 	movhlps	%xmm5, %xmm6
    00001896: 	movq	%rax, (%rsp)
    0000189a: 	movq	%xmm6, %rbx
    0000189f: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    000018a6: 	leaq	0x8(%rbx), %r12
    000018aa: 	movaps	%xmm5, 0x30(%rsp)
    000018af: 	movq	%rax, 0x28(%rsp)
    000018b4: 	movq	%r12, %r13
    000018b7: 	movq	%xmm6, 0x50(%rsp)
    000018bd: 	movq	%xmm5, 0x20(%rsp)
    000018c3: 	cmpq	%r12, %rax
    000018c6: 	jbe	.Ltmp1187 # Offset: 6342
    000018c8: 	movq	%rbp, 0x58(%rsp)
    000018cd: 	movq	%rax, %r15
.Ltmp1190:
    000018d0: 	movq	(%r13), %rbp
    000018d4: 	leaq	0x200(%rbp), %rbx
    000018db: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1189:
    000018e0: 	movq	(%rbp), %rdi
    000018e4: 	leaq	0x10(%rbp), %rdx
    000018e8: 	cmpq	%rdx, %rdi
    000018eb: 	je	.Ltmp1188 # Offset: 6379
    000018f1: 	movq	0x10(%rbp), %rax
    000018f5: 	addq	$0x20, %rbp
    000018f9: 	leaq	0x1(%rax), %rsi
    000018fd: 	callq	_ZdlPvm@PLT # Offset: 6397
    00001902: 	cmpq	%rbx, %rbp
    00001905: 	jne	.Ltmp1189 # Offset: 6405
    00001907: 	addq	$0x8, %r13
    0000190b: 	cmpq	%r13, %r15
    0000190e: 	ja	.Ltmp1190 # Offset: 6414
.Ltmp1207:
    00001910: 	movq	0x58(%rsp), %rbp
.Ltmp1187:
    00001915: 	movq	0x50(%rsp), %rbx
    0000191a: 	cmpq	%rbx, 0x28(%rsp)
    0000191f: 	jne	.Ltmp1191 # Offset: 6431
    00001921: 	jmp	.Ltmp1192 # Offset: 6433
    00001926: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1194:
    00001930: 	movq	0x10(%rbp), %rax
    00001934: 	addq	$0x20, %rbp
    00001938: 	leaq	0x1(%rax), %rsi
    0000193c: 	callq	_ZdlPvm@PLT # Offset: 6460
.Ltmp1191:
    00001941: 	cmpq	%rbp, 0x20(%rsp)
    00001946: 	je	.Ltmp1193 # Offset: 6470
.Ltmp1195:
    00001948: 	movq	(%rbp), %rdi
    0000194c: 	leaq	0x10(%rbp), %rax
    00001950: 	cmpq	%rax, %rdi
    00001953: 	jne	.Ltmp1194 # Offset: 6483
    00001955: 	addq	$0x20, %rbp
    00001959: 	cmpq	0x20(%rsp), %rbp
    0000195e: 	jne	.Ltmp1195 # Offset: 6494
    00001960: 	cmpq	%r14, (%rsp)
    00001964: 	je	.Ltmp1196 # Offset: 6500
    00001966: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1198:
    00001970: 	movq	(%r14), %rdi
    00001973: 	leaq	0x10(%r14), %rax
    00001977: 	cmpq	%rax, %rdi
    0000197a: 	je	.Ltmp1197 # Offset: 6522
    0000197c: 	movq	0x10(%r14), %rax
    00001980: 	leaq	0x1(%rax), %rsi
    00001984: 	callq	_ZdlPvm@PLT # Offset: 6532
.Ltmp1197:
    00001989: 	addq	$0x20, %r14
.Ltmp1193:
    0000198d: 	cmpq	%r14, (%rsp)
    00001991: 	jne	.Ltmp1198 # Offset: 6545
.Ltmp1196:
    00001993: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000199a: 	leaq	0x8(%rax), %rbx
    0000199e: 	cmpq	%r12, %rbx
    000019a1: 	jbe	.Ltmp1199 # Offset: 6561
    000019a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1200:
    000019a8: 	movq	(%r12), %rdi
    000019ac: 	movl	$0x200, %esi
    000019b1: 	addq	$0x8, %r12
    000019b5: 	callq	_ZdlPvm@PLT # Offset: 6581
    000019ba: 	cmpq	%r12, %rbx
    000019bd: 	ja	.Ltmp1200 # Offset: 6589
.Ltmp1199:
    000019bf: 	movdqa	0x40(%rsp), %xmm7
    000019c5: 	movq	0xc0(%rsp), %rdi
    000019cd: 	movaps	%xmm7, "_ZL7gLabels/1"+48(%rip)
    000019d4: 	movdqa	0x30(%rsp), %xmm7
    000019da: 	movaps	%xmm7, "_ZL7gLabels/1"+64(%rip)
    000019e1: 	cmpq	0x18(%rsp), %rdi
    000019e6: 	je	.Ltmp1201 # Offset: 6630
    000019e8: 	movq	0xd0(%rsp), %rax
    000019f0: 	leaq	0x1(%rax), %rsi
    000019f4: 	callq	_ZdlPvm@PLT # Offset: 6644
.Ltmp1201:
    000019f9: 	movq	0x80(%rsp), %rdi
    00001a01: 	cmpq	0x60(%rsp), %rdi
    00001a06: 	je	.Ltmp1202 # Offset: 6662
    00001a08: 	movq	0x90(%rsp), %rax
    00001a10: 	leaq	0x1(%rax), %rsi
    00001a14: 	callq	_ZdlPvm@PLT # Offset: 6676
.Ltmp1202:
    00001a19: 	movq	0x2028(%rsp), %rax
    00001a21: 	subq	%fs:0x28, %rax
    00001a2a: 	jne	.Ltmp1203 # Offset: 6698
    00001a30: 	addq	$0x2038, %rsp
    00001a37: 	popq	%rbx
    00001a38: 	popq	%rbp
    00001a39: 	popq	%r12
    00001a3b: 	popq	%r13
    00001a3d: 	popq	%r14
    00001a3f: 	popq	%r15
    00001a41: 	retq # Offset: 6721
    00001a42: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1204:
    00001a48: 	addq	$0x20, %rbp
.Ltmp1192:
    00001a4c: 	cmpq	%rbp, (%rsp)
    00001a50: 	je	.Ltmp1196 # Offset: 6736
.Ltmp1205:
    00001a56: 	movq	(%rbp), %rdi
    00001a5a: 	leaq	0x10(%rbp), %rax
    00001a5e: 	cmpq	%rax, %rdi
    00001a61: 	je	.Ltmp1204 # Offset: 6753
    00001a63: 	movq	0x10(%rbp), %rax
    00001a67: 	addq	$0x20, %rbp
    00001a6b: 	leaq	0x1(%rax), %rsi
    00001a6f: 	callq	_ZdlPvm@PLT # Offset: 6767
    00001a74: 	cmpq	%rbp, (%rsp)
    00001a78: 	jne	.Ltmp1205 # Offset: 6776
    00001a7a: 	jmp	.Ltmp1196 # Offset: 6778
.Ltmp1053:
    00001a7f: 	leaq	0x78(%rsp), %rsi
    00001a84: 	xorl	%edx, %edx
    00001a86: 	movq	%r14, %rdi
    00001a89: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6793
    00001a8e: 	movq	%rax, (%r14)
    00001a91: 	movq	%rax, %rdi
    00001a94: 	movq	0x78(%rsp), %rax
    00001a99: 	movq	%rax, 0x10(%r14)
.Ltmp1243:
    00001a9d: 	movq	%r12, %rdx
    00001aa0: 	movq	%r15, %rsi
    00001aa3: 	callq	memcpy@PLT # Offset: 6819
    00001aa8: 	movq	0x78(%rsp), %r12
    00001aad: 	movq	(%r14), %rdi
    00001ab0: 	jmp	.Ltmp1206 # Offset: 6832
    00001ab5: 	nopl	(%rax) # Size: 3
.Ltmp1188:
    00001ab8: 	addq	$0x20, %rbp
    00001abc: 	cmpq	%rbx, %rbp
    00001abf: 	jne	.Ltmp1189 # Offset: 6847
    00001ac5: 	addq	$0x8, %r13
    00001ac9: 	cmpq	%r13, %r15
    00001acc: 	ja	.Ltmp1190 # Offset: 6860
    00001ad2: 	jmp	.Ltmp1207 # Offset: 6866
    00001ad7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1064:
    00001ae0: 	addl	$0x1, %r15d
    00001ae4: 	cmpl	iterations(%rip), %r15d
    00001aeb: 	jl	.Ltmp1065 # Offset: 6891
    00001af1: 	jmp	.Ltmp1057 # Offset: 6897
    00001af6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1080:
    00001b00: 	addl	$0x1, (%rsp)
    00001b04: 	movl	(%rsp), %eax
    00001b07: 	cmpl	iterations(%rip), %eax
    00001b0d: 	jl	.Ltmp1081 # Offset: 6925
    00001b13: 	jmp	.Ltmp1073 # Offset: 6931
    00001b18: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1122:
    00001b20: 	addl	$0x1, %r14d
    00001b24: 	cmpl	iterations(%rip), %r14d
    00001b2b: 	jl	.Ltmp1123 # Offset: 6955
    00001b31: 	jmp	.Ltmp1115 # Offset: 6961
    00001b36: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1139:
    00001b40: 	addl	$0x1, %r15d
    00001b44: 	cmpl	iterations(%rip), %r15d
    00001b4b: 	jl	.Ltmp1140 # Offset: 6987
    00001b51: 	jmp	.Ltmp1132 # Offset: 6993
    00001b56: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1166:
    00001b60: 	addl	$0x1, %r14d
    00001b64: 	cmpl	iterations(%rip), %r14d
    00001b6b: 	jl	.Ltmp1167 # Offset: 7019
    00001b71: 	jmp	.Ltmp1159 # Offset: 7025
    00001b76: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1178:
    00001b80: 	addl	$0x1, %r13d
    00001b84: 	cmpl	iterations(%rip), %r13d
    00001b8b: 	jl	.Ltmp1179 # Offset: 7051
    00001b91: 	jmp	.Ltmp1171 # Offset: 7057
    00001b96: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1062:
    00001ba0: 	testq	%r12, %r12
    00001ba3: 	jne	.Ltmp1208 # Offset: 7075
    00001ba9: 	movq	0x18(%rsp), %rax
    00001bae: 	jmp	.Ltmp1209 # Offset: 7086
    00001bb3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1120:
    00001bb8: 	testq	%r12, %r12
    00001bbb: 	jne	.Ltmp1210 # Offset: 7099
    00001bc1: 	movq	0x18(%rsp), %rax
    00001bc6: 	jmp	.Ltmp1211 # Offset: 7110
    00001bcb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1078:
    00001bd0: 	testq	%r14, %r14
    00001bd3: 	jne	.Ltmp1212 # Offset: 7123
    00001bd9: 	movq	0x18(%rsp), %rax
    00001bde: 	jmp	.Ltmp1213 # Offset: 7134
    00001be3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1164:
    00001be8: 	testq	%r12, %r12
    00001beb: 	jne	.Ltmp1214 # Offset: 7147
    00001bf1: 	movq	0x18(%rsp), %rax
    00001bf6: 	jmp	.Ltmp1215 # Offset: 7158
    00001bfb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1137:
    00001c00: 	testq	%r13, %r13
    00001c03: 	jne	.Ltmp1216 # Offset: 7171
    00001c09: 	movq	0x18(%rsp), %rax
    00001c0e: 	jmp	.Ltmp1217 # Offset: 7182
    00001c13: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1176:
    00001c18: 	testq	%r12, %r12
    00001c1b: 	jne	.Ltmp1218 # Offset: 7195
    00001c21: 	movq	0x18(%rsp), %rax
    00001c26: 	jmp	.Ltmp1219 # Offset: 7206
    00001c2b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1061:
    00001c30: 	movq	0x28(%rsp), %rdi
    00001c35: 	leaq	0x78(%rsp), %rsi
    00001c3a: 	xorl	%edx, %edx
    00001c3c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7228
    00001c41: 	movq	%rax, 0xc0(%rsp)
    00001c49: 	movq	%rax, %rdi
    00001c4c: 	movq	0x78(%rsp), %rax
    00001c51: 	movq	%rax, 0xd0(%rsp)
.Ltmp1256:
    00001c59: 	movq	%r12, %rdx
    00001c5c: 	movq	%r14, %rsi
    00001c5f: 	callq	memcpy@PLT # Offset: 7263
    00001c64: 	movq	0x78(%rsp), %r12
    00001c69: 	movq	0xc0(%rsp), %rax
    00001c71: 	jmp	.Ltmp1209 # Offset: 7281
    00001c76: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1077:
    00001c80: 	movq	0x28(%rsp), %rdi
    00001c85: 	leaq	0x78(%rsp), %rsi
    00001c8a: 	xorl	%edx, %edx
    00001c8c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7308
    00001c91: 	movq	%rax, 0xc0(%rsp)
    00001c99: 	movq	%rax, %rdi
    00001c9c: 	movq	0x78(%rsp), %rax
    00001ca1: 	movq	%rax, 0xd0(%rsp)
.Ltmp1258:
    00001ca9: 	movq	%r14, %rdx
    00001cac: 	movq	%r15, %rsi
    00001caf: 	callq	memcpy@PLT # Offset: 7343
    00001cb4: 	movq	0x78(%rsp), %r14
    00001cb9: 	movq	0xc0(%rsp), %rax
    00001cc1: 	jmp	.Ltmp1213 # Offset: 7361
    00001cc6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1119:
    00001cd0: 	movq	0x28(%rsp), %rdi
    00001cd5: 	leaq	0x78(%rsp), %rsi
    00001cda: 	xorl	%edx, %edx
    00001cdc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7388
    00001ce1: 	movq	%rax, 0xc0(%rsp)
    00001ce9: 	movq	%rax, %rdi
    00001cec: 	movq	0x78(%rsp), %rax
    00001cf1: 	movq	%rax, 0xd0(%rsp)
.Ltmp1257:
    00001cf9: 	movq	%r12, %rdx
    00001cfc: 	movq	%r13, %rsi
    00001cff: 	callq	memcpy@PLT # Offset: 7423
    00001d04: 	movq	0x78(%rsp), %r12
    00001d09: 	movq	0xc0(%rsp), %rax
    00001d11: 	jmp	.Ltmp1211 # Offset: 7441
    00001d16: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1163:
    00001d20: 	movq	0x28(%rsp), %rdi
    00001d25: 	leaq	0x78(%rsp), %rsi
    00001d2a: 	xorl	%edx, %edx
    00001d2c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7468
    00001d31: 	movq	%rax, 0xc0(%rsp)
    00001d39: 	movq	%rax, %rdi
    00001d3c: 	movq	0x78(%rsp), %rax
    00001d41: 	movq	%rax, 0xd0(%rsp)
.Ltmp1259:
    00001d49: 	movq	%r12, %rdx
    00001d4c: 	movq	%r13, %rsi
    00001d4f: 	callq	memcpy@PLT # Offset: 7503
    00001d54: 	movq	0x78(%rsp), %r12
    00001d59: 	movq	0xc0(%rsp), %rax
    00001d61: 	jmp	.Ltmp1215 # Offset: 7521
    00001d66: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1136:
    00001d70: 	movq	0x28(%rsp), %rdi
    00001d75: 	leaq	0x78(%rsp), %rsi
    00001d7a: 	xorl	%edx, %edx
    00001d7c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7548
    00001d81: 	movq	%rax, 0xc0(%rsp)
    00001d89: 	movq	%rax, %rdi
    00001d8c: 	movq	0x78(%rsp), %rax
    00001d91: 	movq	%rax, 0xd0(%rsp)
.Ltmp1260:
    00001d99: 	movq	%r13, %rdx
    00001d9c: 	movq	%r14, %rsi
    00001d9f: 	callq	memcpy@PLT # Offset: 7583
    00001da4: 	movq	0x78(%rsp), %r13
    00001da9: 	movq	0xc0(%rsp), %rax
    00001db1: 	jmp	.Ltmp1217 # Offset: 7601
    00001db6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1175:
    00001dc0: 	movq	0x28(%rsp), %rdi
    00001dc5: 	leaq	0x78(%rsp), %rsi
    00001dca: 	xorl	%edx, %edx
    00001dcc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7628
    00001dd1: 	movq	%rax, 0xc0(%rsp)
    00001dd9: 	movq	%rax, %rdi
    00001ddc: 	movq	0x78(%rsp), %rax
    00001de1: 	movq	%rax, 0xd0(%rsp)
.Ltmp1261:
    00001de9: 	movq	%r12, %rdx
    00001dec: 	movq	%rbp, %rsi
    00001def: 	callq	memcpy@PLT # Offset: 7663
    00001df4: 	movq	0x78(%rsp), %r12
    00001df9: 	movq	0xc0(%rsp), %rax
    00001e01: 	jmp	.Ltmp1219 # Offset: 7681
.Ltmp1130:
    00001e06: 	testq	%r12, %r12
    00001e09: 	jne	.Ltmp1220 # Offset: 7689
    00001e0f: 	movq	0x30(%rsp), %rax
    00001e14: 	jmp	.Ltmp1221 # Offset: 7700
.Ltmp1088:
    00001e19: 	testq	%r12, %r12
    00001e1c: 	jne	.Ltmp1222 # Offset: 7708
    00001e22: 	movq	0x18(%rsp), %rax
    00001e27: 	jmp	.Ltmp1223 # Offset: 7719
.Ltmp1129:
    00001e2c: 	movq	0x58(%rsp), %rdi
    00001e31: 	leaq	0x78(%rsp), %rsi
    00001e36: 	xorl	%edx, %edx
    00001e38: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7736
    00001e3d: 	movq	%rax, 0xa0(%rsp)
    00001e45: 	movq	%rax, %rdi
    00001e48: 	movq	0x78(%rsp), %rax
    00001e4d: 	movq	%rax, 0xb0(%rsp)
.Ltmp1262:
    00001e55: 	movq	%r12, %rdx
    00001e58: 	movq	%r13, %rsi
    00001e5b: 	callq	memcpy@PLT # Offset: 7771
    00001e60: 	movq	0x78(%rsp), %r12
    00001e65: 	movq	0xa0(%rsp), %rax
    00001e6d: 	jmp	.Ltmp1221 # Offset: 7789
.Ltmp1087:
    00001e72: 	movq	0x28(%rsp), %rdi
    00001e77: 	leaq	0x78(%rsp), %rsi
    00001e7c: 	xorl	%edx, %edx
    00001e7e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7806
    00001e83: 	movq	%rax, 0xc0(%rsp)
    00001e8b: 	movq	%rax, %rdi
    00001e8e: 	movq	0x78(%rsp), %rax
    00001e93: 	movq	%rax, 0xd0(%rsp)
.Ltmp1263:
    00001e9b: 	movq	%r12, %rdx
    00001e9e: 	movq	%r14, %rsi
    00001ea1: 	callq	memcpy@PLT # Offset: 7841
    00001ea6: 	movq	0x78(%rsp), %r12
    00001eab: 	movq	0xc0(%rsp), %rax
    00001eb3: 	jmp	.Ltmp1223 # Offset: 7859
.Ltmp1152:
    00001eb8: 	movq	0x28(%rsp), %rsi
    00001ebd: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001ec4: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7876
    00001ec9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001ed0: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001ed7: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001ede: 	jne	.Ltmp1224 # Offset: 7902
.Ltmp1157:
    00001ee4: 	movq	-0x8(%rdx), %rax
    00001ee8: 	addq	$0x200, %rax
    00001eee: 	jmp	.Ltmp1224 # Offset: 7918
.Ltmp1146:
    00001ef3: 	movq	-0x8(%rdx), %rax
    00001ef7: 	addq	$0x200, %rax
    00001efd: 	jmp	.Ltmp1225 # Offset: 7933
.Ltmp1113:
    00001f02: 	movq	-0x8(%rdx), %rax
    00001f06: 	addq	$0x200, %rax
    00001f0c: 	jmp	.Ltmp1226 # Offset: 7948
.Ltmp1125:
    00001f11: 	movq	-0x8(%rdx), %rax
    00001f15: 	addq	$0x200, %rax
    00001f1b: 	jmp	.Ltmp1227 # Offset: 7963
.Ltmp1124:
    00001f20: 	movq	0x58(%rsp), %rsi
    00001f25: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001f2c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7980
    00001f31: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001f38: 	jmp	.Ltmp1228 # Offset: 7992
.Ltmp1094:
    00001f3d: 	movq	0x28(%rsp), %rsi
    00001f42: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001f49: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8009
    00001f4e: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001f55: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001f5c: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001f63: 	jne	.Ltmp1229 # Offset: 8035
.Ltmp1099:
    00001f69: 	movq	-0x8(%rdx), %rax
    00001f6d: 	addq	$0x200, %rax
    00001f73: 	jmp	.Ltmp1229 # Offset: 8051
.Ltmp1108:
    00001f78: 	movq	0x28(%rsp), %rsi
    00001f7d: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001f84: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8068
    00001f89: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001f90: 	jmp	.Ltmp1230 # Offset: 8080
.Ltmp1055:
    00001f95: 	movq	-0x8(%rdx), %rax
    00001f99: 	addq	$0x200, %rax
    00001f9f: 	jmp	.Ltmp1231 # Offset: 8095
.Ltmp1083:
    00001fa4: 	movq	-0x8(%rdx), %rax
    00001fa8: 	addq	$0x200, %rax
    00001fae: 	jmp	.Ltmp1232 # Offset: 8110
.Ltmp1082:
    00001fb3: 	movq	0x58(%rsp), %rsi
    00001fb8: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001fbf: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8127
    00001fc4: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001fcb: 	jmp	.Ltmp1233 # Offset: 8139
.Ltmp1066:
    00001fd0: 	movq	0x58(%rsp), %rsi
    00001fd5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001fdc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8156
    00001fe1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001fe8: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001fef: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001ff6: 	jne	.Ltmp1234 # Offset: 8182
.Ltmp1071:
    00001ffc: 	movq	-0x8(%rdx), %rax
    00002000: 	addq	$0x200, %rax
    00002006: 	jmp	.Ltmp1234 # Offset: 8198
.Ltmp1169:
    0000200b: 	movq	-0x8(%rdx), %rax
    0000200f: 	addq	$0x200, %rax
    00002015: 	jmp	.Ltmp1235 # Offset: 8213
.Ltmp1168:
    0000201a: 	movq	0x58(%rsp), %rsi
    0000201f: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002026: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8230
    0000202b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002032: 	jmp	.Ltmp1236 # Offset: 8242
.Ltmp1141:
    00002037: 	movq	0x58(%rsp), %rsi
    0000203c: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002043: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8259
    00002048: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000204f: 	jmp	.Ltmp1237 # Offset: 8271
.Ltmp1050:
    00002054: 	movq	0x28(%rsp), %rsi
    00002059: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002060: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8288
    00002065: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000206c: 	jmp	.Ltmp1238 # Offset: 8300
.Ltmp1041:
    00002071: 	movq	-0x8(%rdx), %rax
    00002075: 	addq	$0x200, %rax
    0000207b: 	jmp	.Ltmp1239 # Offset: 8315
.Ltmp1040:
    00002080: 	movq	0x28(%rsp), %rsi
    00002085: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000208c: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8332
    00002091: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002098: 	jmp	.Ltmp1240 # Offset: 8344
.Ltmp1180:
    0000209d: 	movq	0x58(%rsp), %rsi
    000020a2: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000020a9: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8361
    000020ae: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000020b5: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000020bc: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000020c3: 	jne	.Ltmp1241 # Offset: 8387
.Ltmp1185:
    000020c9: 	movq	-0x8(%rdx), %rax
    000020cd: 	addq	$0x200, %rax
    000020d3: 	jmp	.Ltmp1241 # Offset: 8403
.Ltmp1070:
    000020d8: 	testq	%r12, %r12
    000020db: 	je	.Ltmp1242 # Offset: 8411
.Ltmp1254:
    000020e1: 	movq	%r12, %rdx
    000020e4: 	movq	%r15, %rsi
    000020e7: 	callq	memcpy@PLT # Offset: 8423
    000020ec: 	movq	0x78(%rsp), %r12
    000020f1: 	movq	(%r14), %rdi
    000020f4: 	jmp	.Ltmp1242 # Offset: 8436
.Ltmp1054:
    000020f9: 	testq	%r12, %r12
    000020fc: 	je	.Ltmp1206 # Offset: 8444
    00002102: 	jmp	.Ltmp1243 # Offset: 8450
    00002107: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1098:
    00002110: 	testq	%r12, %r12
    00002113: 	je	.Ltmp1244 # Offset: 8467
    00002119: 	jmp	.Ltmp1245 # Offset: 8473
    0000211e: 	nop # Size: 2
.Ltmp1112:
    00002120: 	testq	%r12, %r12
    00002123: 	je	.Ltmp1246 # Offset: 8483
    00002129: 	jmp	.Ltmp1247 # Offset: 8489
    0000212b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1184:
    00002130: 	testq	%r12, %r12
    00002133: 	je	.Ltmp1248 # Offset: 8499
    00002139: 	jmp	.Ltmp1249 # Offset: 8505
    0000213e: 	nop # Size: 2
.Ltmp1145:
    00002140: 	testq	%r12, %r12
    00002143: 	je	.Ltmp1250 # Offset: 8515
    00002149: 	jmp	.Ltmp1251 # Offset: 8521
    0000214e: 	nop # Size: 2
.Ltmp1156:
    00002150: 	testq	%r12, %r12
    00002153: 	je	.Ltmp1252 # Offset: 8531
    00002159: 	jmp	.Ltmp1253 # Offset: 8537
    0000215e: 	nop # Size: 2
.Ltmp1069:
    00002160: 	leaq	0x78(%rsp), %rsi
    00002165: 	xorl	%edx, %edx
    00002167: 	movq	%r14, %rdi
    0000216a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8554
    0000216f: 	movq	%rax, (%r14)
    00002172: 	movq	%rax, %rdi
    00002175: 	movq	0x78(%rsp), %rax
    0000217a: 	movq	%rax, 0x10(%r14)
    0000217e: 	jmp	.Ltmp1254 # Offset: 8574
.Ltmp1111:
    00002183: 	leaq	0x78(%rsp), %rsi
    00002188: 	xorl	%edx, %edx
    0000218a: 	movq	%r13, %rdi
    0000218d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8589
    00002192: 	movq	%rax, (%r13)
    00002196: 	movq	%rax, %rdi
    00002199: 	movq	0x78(%rsp), %rax
    0000219e: 	movq	%rax, 0x10(%r13)
.Ltmp1247:
    000021a2: 	movq	%r12, %rdx
    000021a5: 	movq	%r14, %rsi
    000021a8: 	callq	memcpy@PLT # Offset: 8616
    000021ad: 	movq	0x78(%rsp), %r12
    000021b2: 	movq	(%r13), %rdi
    000021b6: 	jmp	.Ltmp1246 # Offset: 8630
.Ltmp1097:
    000021bb: 	leaq	0x78(%rsp), %rsi
    000021c0: 	xorl	%edx, %edx
    000021c2: 	movq	%r14, %rdi
    000021c5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8645
    000021ca: 	movq	%rax, (%r14)
    000021cd: 	movq	%rax, %rdi
    000021d0: 	movq	0x78(%rsp), %rax
    000021d5: 	movq	%rax, 0x10(%r14)
.Ltmp1245:
    000021d9: 	movq	%r12, %rdx
    000021dc: 	movq	%r15, %rsi
    000021df: 	callq	memcpy@PLT # Offset: 8671
    000021e4: 	movq	0x78(%rsp), %r12
    000021e9: 	movq	(%r14), %rdi
    000021ec: 	jmp	.Ltmp1244 # Offset: 8684
.Ltmp1183:
    000021f1: 	leaq	0x78(%rsp), %rsi
    000021f6: 	xorl	%edx, %edx
    000021f8: 	movq	%rbx, %rdi
    000021fb: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8699
    00002200: 	movq	%rax, (%rbx)
    00002203: 	movq	%rax, %rdi
    00002206: 	movq	0x78(%rsp), %rax
    0000220b: 	movq	%rax, 0x10(%rbx)
.Ltmp1249:
    0000220f: 	movq	%r12, %rdx
    00002212: 	movq	%rbp, %rsi
    00002215: 	callq	memcpy@PLT # Offset: 8725
    0000221a: 	movq	0x78(%rsp), %r12
    0000221f: 	movq	(%rbx), %rdi
    00002222: 	jmp	.Ltmp1248 # Offset: 8738
.Ltmp1144:
    00002227: 	leaq	0x78(%rsp), %rsi
    0000222c: 	xorl	%edx, %edx
    0000222e: 	movq	%r13, %rdi
    00002231: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8753
    00002236: 	movq	%rax, (%r13)
    0000223a: 	movq	%rax, %rdi
    0000223d: 	movq	0x78(%rsp), %rax
    00002242: 	movq	%rax, 0x10(%r13)
.Ltmp1251:
    00002246: 	movq	%r12, %rdx
    00002249: 	movq	%r14, %rsi
    0000224c: 	callq	memcpy@PLT # Offset: 8780
    00002251: 	movq	0x78(%rsp), %r12
    00002256: 	movq	(%r13), %rdi
    0000225a: 	jmp	.Ltmp1250 # Offset: 8794
.Ltmp1155:
    0000225f: 	leaq	0x78(%rsp), %rsi
    00002264: 	xorl	%edx, %edx
    00002266: 	movq	%rbp, %rdi
    00002269: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8809
    0000226e: 	movq	%rax, (%rbp)
    00002272: 	movq	%rax, %rdi
    00002275: 	movq	0x78(%rsp), %rax
    0000227a: 	movq	%rax, 0x10(%rbp)
.Ltmp1253:
    0000227e: 	movq	%r12, %rdx
    00002281: 	movq	%r13, %rsi
    00002284: 	callq	memcpy@PLT # Offset: 8836
    00002289: 	movq	0x78(%rsp), %r12
    0000228e: 	movq	(%rbp), %rdi
    00002292: 	jmp	.Ltmp1252 # Offset: 8850
.Ltmp1043:
    00002297: 	movabsq	$0x100000000, %rax
    000022a1: 	xorl	%r14d, %r14d
    000022a4: 	jmp	.Ltmp1255 # Offset: 8868
.Ltmp1102:
    000022a9: 	movl	$0x1f, 0x50(%rsp)
    000022b1: 	movabsq	$-0x8000000000000000, %rax
    000022bb: 	jmp	.Ltmp1101 # Offset: 8891
.Ltmp1044:
    000022c0: 	movabsq	$-0x8000000000000000, %rax
    000022ca: 	movl	$0x1f, %r14d
    000022d0: 	jmp	.Ltmp1255 # Offset: 8912
.Ltmp1068:
    000022d5: 	leaq	DATAat0x14008(%rip), %rdi
    000022dc: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8924
.Ltmp1110:
    000022e1: 	leaq	DATAat0x14008(%rip), %rdi
    000022e8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8936
.Ltmp1118:
    000022ed: 	leaq	DATAat0x14008(%rip), %rdi
    000022f4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8948
.Ltmp1128:
    000022f9: 	leaq	DATAat0x14008(%rip), %rdi
    00002300: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8960
.Ltmp1131:
    00002305: 	leaq	DATAat0x14184(%rip), %rdi
    0000230c: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 8972
.Ltmp1135:
    00002311: 	leaq	DATAat0x14008(%rip), %rdi
    00002318: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8984
.Ltmp1143:
    0000231d: 	leaq	DATAat0x14008(%rip), %rdi
    00002324: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8996
.Ltmp1154:
    00002329: 	leaq	DATAat0x14008(%rip), %rdi
    00002330: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9008
.Ltmp1162:
    00002335: 	leaq	DATAat0x14008(%rip), %rdi
    0000233c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9020
.Ltmp1174:
    00002341: 	leaq	DATAat0x14008(%rip), %rdi
    00002348: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9032
.Ltmp1182:
    0000234d: 	leaq	DATAat0x14008(%rip), %rdi
    00002354: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9044
.Ltmp1203:
    00002359: 	callq	__stack_chk_fail@PLT # Offset: 9049
.Ltmp1052:
    0000235e: 	leaq	DATAat0x14008(%rip), %rdi
    00002365: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9061
.Ltmp1208:
    0000236a: 	movq	0x18(%rsp), %rdi
    0000236f: 	jmp	.Ltmp1256 # Offset: 9071
.Ltmp1210:
    00002374: 	movq	0x18(%rsp), %rdi
    00002379: 	jmp	.Ltmp1257 # Offset: 9081
.Ltmp1212:
    0000237e: 	movq	0x18(%rsp), %rdi
    00002383: 	jmp	.Ltmp1258 # Offset: 9091
.Ltmp1214:
    00002388: 	movq	0x18(%rsp), %rdi
    0000238d: 	jmp	.Ltmp1259 # Offset: 9101
.Ltmp1216:
    00002392: 	movq	0x18(%rsp), %rdi
    00002397: 	jmp	.Ltmp1260 # Offset: 9111
.Ltmp1218:
    0000239c: 	movq	0x18(%rsp), %rdi
    000023a1: 	jmp	.Ltmp1261 # Offset: 9121
.Ltmp1220:
    000023a6: 	movq	0x30(%rsp), %rdi
    000023ab: 	jmp	.Ltmp1262 # Offset: 9131
.Ltmp1222:
    000023b0: 	movq	0x18(%rsp), %rdi
    000023b5: 	jmp	.Ltmp1263 # Offset: 9141
.Ltmp1076:
    000023ba: 	leaq	DATAat0x14008(%rip), %rdi
    000023c1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9153
.Ltmp1086:
    000023c6: 	leaq	DATAat0x14008(%rip), %rdi
    000023cd: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9165
.Ltmp1089:
    000023d2: 	leaq	DATAat0x14184(%rip), %rdi
    000023d9: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9177
.Ltmp1096:
    000023de: 	leaq	DATAat0x14008(%rip), %rdi
    000023e5: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9189
.Ltmp1060:
    000023ea: 	leaq	DATAat0x14008(%rip), %rdi
    000023f1: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9201
    000023f6: 	endbr64
.Ltmp1267:
    000023fa: 	movq	%rax, %rbp
    000023fd: 	jmp	.Ltmp1264 # Offset: 9213
    000023ff: 	endbr64
.Ltmp1266:
    00002403: 	movq	%rax, %rbp
    00002406: 	jmp	.Ltmp1265 # Offset: 9222
    00002408: 	endbr64
    0000240c: 	jmp	.Ltmp1266 # Offset: 9228
    0000240e: 	endbr64
    00002412: 	jmp	.Ltmp1267 # Offset: 9234
    00002414: 	endbr64
    00002418: 	jmp	.Ltmp1267 # Offset: 9240
.Ltmp1264:
    0000241a: 	movq	0xc0(%rsp), %rdi
    00002422: 	cmpq	0x18(%rsp), %rdi
    00002427: 	je	.Ltmp1268 # Offset: 9255
.Ltmp1274:
    00002429: 	movq	0xd0(%rsp), %rax
    00002431: 	leaq	0x1(%rax), %rsi
    00002435: 	callq	_ZdlPvm@PLT # Offset: 9269
.Ltmp1268:
    0000243a: 	movq	0x80(%rsp), %rdi
    00002442: 	cmpq	0x60(%rsp), %rdi
    00002447: 	je	.Ltmp1269 # Offset: 9287
    00002449: 	movq	0x90(%rsp), %rax
    00002451: 	leaq	0x1(%rax), %rsi
    00002455: 	callq	_ZdlPvm@PLT # Offset: 9301
.Ltmp1269:
    0000245a: 	movq	%rbp, %rdi
    0000245d: 	callq	_Unwind_Resume@PLT # Offset: 9309
.Ltmp1270:
    00002462: 	movq	0xc0(%rsp), %rdi
    0000246a: 	cmpq	0x18(%rsp), %rdi
    0000246f: 	je	.Ltmp1265 # Offset: 9327
    00002471: 	movq	0xd0(%rsp), %rax
    00002479: 	leaq	0x1(%rax), %rsi
    0000247d: 	callq	_ZdlPvm@PLT # Offset: 9341
.Ltmp1265:
    00002482: 	movq	0xa0(%rsp), %rdi
    0000248a: 	cmpq	0x30(%rsp), %rdi
    0000248f: 	je	.Ltmp1268 # Offset: 9359
.Ltmp1272:
    00002491: 	movq	0xb0(%rsp), %rax
    00002499: 	leaq	0x1(%rax), %rsi
    0000249d: 	callq	_ZdlPvm@PLT # Offset: 9373
    000024a2: 	jmp	.Ltmp1268 # Offset: 9378
    000024a4: 	endbr64
.Ltmp1275:
    000024a8: 	movq	%rax, %rbp
    000024ab: 	jmp	.Ltmp1270 # Offset: 9387
    000024ad: 	endbr64
    000024b1: 	jmp	.Ltmp1266 # Offset: 9393
    000024b6: 	endbr64
    000024ba: 	movq	%rax, %rbp
    000024bd: 	jmp	.Ltmp1271 # Offset: 9405
    000024bf: 	endbr64
    000024c3: 	jmp	.Ltmp1267 # Offset: 9411
.Ltmp1276:
    000024c8: 	movq	0xc0(%rsp), %rdi
    000024d0: 	cmpq	0x18(%rsp), %rdi
    000024d5: 	je	.Ltmp1271 # Offset: 9429
    000024d7: 	movq	0xd0(%rsp), %rax
    000024df: 	leaq	0x1(%rax), %rsi
    000024e3: 	callq	_ZdlPvm@PLT # Offset: 9443
.Ltmp1271:
    000024e8: 	movq	0xa0(%rsp), %rdi
    000024f0: 	leaq	0xb0(%rsp), %rax
    000024f8: 	cmpq	%rax, %rdi
    000024fb: 	jne	.Ltmp1272 # Offset: 9467
    000024fd: 	jmp	.Ltmp1268 # Offset: 9469
    00002502: 	endbr64
    00002506: 	movq	%rax, %rbp
    00002509: 	jmp	.Ltmp1273 # Offset: 9481
    0000250b: 	endbr64
    0000250f: 	movq	%rax, %rbp
    00002512: 	jmp	.Ltmp1268 # Offset: 9490
.Ltmp1273:
    00002517: 	movq	0xc0(%rsp), %rdi
    0000251f: 	leaq	0xd0(%rsp), %rax
    00002527: 	cmpq	%rax, %rdi
    0000252a: 	jne	.Ltmp1274 # Offset: 9514
    00002530: 	jmp	.Ltmp1268 # Offset: 9520
    00002535: 	endbr64
    00002539: 	jmp	.Ltmp1266 # Offset: 9529
    0000253e: 	endbr64
    00002542: 	jmp	.Ltmp1267 # Offset: 9538
    00002547: 	endbr64
    0000254b: 	jmp	.Ltmp1275 # Offset: 9547
    00002550: 	endbr64
    00002554: 	jmp	.Ltmp1275 # Offset: 9556
    00002559: 	endbr64
    0000255d: 	jmp	.Ltmp1266 # Offset: 9565
    00002562: 	endbr64
    00002566: 	jmp	.Ltmp1275 # Offset: 9574
    0000256b: 	endbr64
    0000256f: 	jmp	.Ltmp1267 # Offset: 9583
    00002574: 	endbr64
    00002578: 	movq	%rax, %rbp
    0000257b: 	jmp	.Ltmp1276 # Offset: 9595
    00002580: 	endbr64
    00002584: 	jmp	.Ltmp1275 # Offset: 9604
    00002589: 	endbr64
    0000258d: 	jmp	.Ltmp1266 # Offset: 9613
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIsEvd"

Binary Function "_Z11TestOneTypeIiEvd" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0xeb00
  Size        : 0x26f9
  MaxSize     : 0x2700
  Offset      : 0xeb00
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIiEvd
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x1000, %rsp
    00000015: 	orq	$0x0, (%rsp)
    0000001a: 	subq	$0x1000, %rsp
    00000021: 	orq	$0x0, (%rsp)
    00000026: 	subq	$0x1000, %rsp
    0000002d: 	orq	$0x0, (%rsp)
    00000032: 	subq	$0xf98, %rsp
    00000039: 	movl	$0x5f32, %r9d
    0000003f: 	movq	%fs:0x28, %rax
    00000048: 	movq	%rax, 0x3f88(%rsp)
    00000050: 	xorl	%eax, %eax
    00000052: 	leaq	0xb0(%rsp), %rax
    0000005a: 	movl	$0x33746e69, 0xb0(%rsp)
    00000065: 	leaq	0x3f80(%rsp), %rbx
    0000006d: 	movq	%rax, 0x80(%rsp)
    00000075: 	movq	%rax, 0xa0(%rsp)
    0000007d: 	cvttsd2si	init_value(%rip), %eax
    00000085: 	movw	%r9w, 0xb4(%rsp)
    0000008e: 	movb	$0x74, 0xb6(%rsp)
    00000096: 	movq	$0x7, 0xa8(%rsp)
    000000a2: 	movd	%eax, %xmm1
    000000a6: 	leaq	0x100(%rsp), %rax
    000000ae: 	movb	$0x0, 0xb7(%rsp)
    000000b6: 	movq	%rax, 0x40(%rsp)
    000000bb: 	pshufd	$0x0, %xmm1, %xmm1
.Ltmp1277:
    000000c0: 	movaps	%xmm1, (%rax)
    000000c3: 	addq	$0x10, %rax
    000000c7: 	cmpq	%rbx, %rax
    000000ca: 	jne	.Ltmp1277 # Offset: 202
    000000cc: 	leaq	0xa0(%rsp), %rax
    000000d4: 	leaq	0xe0(%rsp), %rdi
    000000dc: 	leaq	DATAat0x141d0(%rip), %rdx
    000000e3: 	movq	%rax, %rsi
    000000e6: 	movq	%rdi, 0x30(%rsp)
    000000eb: 	cvttsd2si	%xmm0, %ebp
    000000ef: 	movq	%rax, 0x60(%rsp)
    000000f4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 244
    000000f9: 	callq	clock@PLT # Offset: 249
    000000fe: 	movl	iterations(%rip), %edi
    00000104: 	xorl	%r12d, %r12d
    00000107: 	leaq	DATAat0x141e1(%rip), %r13
    0000010e: 	movq	%rax, start_time(%rip)
    00000115: 	testl	%edi, %edi
    00000117: 	jle	.Ltmp1278 # Offset: 279
    00000119: 	nopl	(%rax) # Size: 7
.Ltmp1281:
    00000120: 	movq	0x40(%rsp), %rcx
    00000125: 	xorl	%esi, %esi
    00000127: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1279:
    00000130: 	movl	(%rcx), %eax
    00000132: 	addq	$0x4, %rcx
    00000136: 	cltd
    00000137: 	idivl	%ebp
    00000139: 	addl	%eax, %esi
    0000013b: 	cmpq	%rbx, %rcx
    0000013e: 	jne	.Ltmp1279 # Offset: 318
    00000140: 	cvttsd2si	init_value(%rip), %eax
    00000148: 	cltd
    00000149: 	idivl	%ebp
    0000014b: 	imull	$0xfa0, %eax, %eax
    00000151: 	cmpl	%eax, %esi
    00000153: 	je	.Ltmp1280 # Offset: 339
    00000155: 	movq	0xe0(%rsp), %rdx
    0000015d: 	movq	%r13, %rsi
    00000160: 	movl	$0x1, %edi
    00000165: 	xorl	%eax, %eax
    00000167: 	callq	__printf_chk@PLT # Offset: 359
    0000016c: 	movl	iterations(%rip), %edi
.Ltmp1280:
    00000172: 	addl	$0x1, %r12d
    00000176: 	cmpl	%edi, %r12d
    00000179: 	jl	.Ltmp1281 # Offset: 377
.Ltmp1278:
    0000017b: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000182: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    00000189: 	subq	$0x20, %rax
    0000018d: 	cmpq	%rax, %r13
    00000190: 	je	.Ltmp1282 # Offset: 400
    00000196: 	leaq	0x10(%r13), %rdi
    0000019a: 	movq	0xe8(%rsp), %r12
    000001a2: 	movq	%rdi, (%r13)
    000001a6: 	movq	0xe0(%rsp), %r14
    000001ae: 	movq	%r14, %rax
    000001b1: 	addq	%r12, %rax
    000001b4: 	je	.Ltmp1283 # Offset: 436
    000001b6: 	testq	%r14, %r14
    000001b9: 	je	.Ltmp1284 # Offset: 441
.Ltmp1283:
    000001bf: 	movq	%r12, 0x98(%rsp)
    000001c7: 	cmpq	$0xf, %r12
    000001cb: 	ja	.Ltmp1285 # Offset: 459
    000001d1: 	cmpq	$0x1, %r12
    000001d5: 	jne	.Ltmp1286 # Offset: 469
    000001db: 	movzbl	(%r14), %eax
    000001df: 	movb	%al, 0x10(%r13)
.Ltmp1447:
    000001e3: 	movq	%r12, 0x8(%r13)
    000001e7: 	movb	$0x0, (%rdi,%r12)
    000001ec: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001f3: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001fa: 	addq	$0x20, %rax
    000001fe: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000205: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000020c: 	je	.Ltmp1287 # Offset: 524
.Ltmp1470:
    00000212: 	movq	-0x20(%rax), %r12
    00000216: 	callq	clock@PLT # Offset: 534
    0000021b: 	pxor	%xmm0, %xmm0
    0000021f: 	movq	%rax, end_time(%rip)
    00000226: 	movq	%r12, %rdi
    00000229: 	subq	start_time(%rip), %rax
    00000230: 	cvtsi2sd	%rax, %xmm0
    00000235: 	divsd	DATAat0x14308(%rip), %xmm0
    0000023d: 	callq	_Z13record_resultdPKc # Offset: 573
    00000242: 	movq	0xe0(%rsp), %rdi
    0000024a: 	leaq	0xf0(%rsp), %rax
    00000252: 	movq	%rax, 0x18(%rsp)
    00000257: 	cmpq	%rax, %rdi
    0000025a: 	je	.Ltmp1288 # Offset: 602
    0000025c: 	movq	0xf0(%rsp), %rax
    00000264: 	leaq	0x1(%rax), %rsi
    00000268: 	callq	_ZdlPvm@PLT # Offset: 616
.Ltmp1288:
    0000026d: 	movq	0x60(%rsp), %rsi
    00000272: 	movq	0x30(%rsp), %rdi
    00000277: 	leaq	DATAat0x1420c(%rip), %rdx
    0000027e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 638
    00000283: 	callq	clock@PLT # Offset: 643
    00000288: 	movl	%ebp, %esi
    0000028a: 	movl	%ebp, %r12d
    0000028d: 	negl	%esi
    0000028f: 	movq	%rax, start_time(%rip)
    00000296: 	cmovsl	%ebp, %esi
    00000299: 	sarl	$0x1f, %r12d
    0000029d: 	movl	%esi, %ecx
    0000029f: 	subl	$0x1, %ecx
    000002a2: 	movl	%ecx, 0x50(%rsp)
    000002a6: 	je	.Ltmp1289 # Offset: 678
    000002ac: 	js	.Ltmp1290 # Offset: 684
    000002b2: 	movl	$0x80000000, %eax
    000002b7: 	xorl	%edx, %edx
    000002b9: 	nopl	(%rax) # Size: 7
.Ltmp1291:
    000002c0: 	shrl	%eax
    000002c2: 	addl	$0x1, %edx
    000002c5: 	testl	%eax, %ecx
    000002c7: 	je	.Ltmp1291 # Offset: 711
    000002c9: 	movl	$0x20, %eax
    000002ce: 	subl	%edx, %eax
    000002d0: 	movl	$0x1, %edx
    000002d5: 	testl	%eax, %eax
    000002d7: 	cmovlel	%edx, %eax
    000002da: 	leal	0x1f(%rax), %ecx
    000002dd: 	leal	-0x1(%rax), %r14d
    000002e1: 	movl	$0x1, %eax
    000002e6: 	shlq	%cl, %rax
.Ltmp1495:
    000002e9: 	movslq	%esi, %rdi
    000002ec: 	cqto
    000002ee: 	xorl	%r15d, %r15d
    000002f1: 	idivq	%rdi
    000002f4: 	movq	%rdi, 0x88(%rsp)
    000002fc: 	movl	iterations(%rip), %edi
    00000302: 	leal	0x1(%rax), %r13d
    00000306: 	movslq	%r13d, %r13
    00000309: 	testl	%edi, %edi
    0000030b: 	jle	.Ltmp1292 # Offset: 779
    00000311: 	nopl	(%rax) # Size: 7
.Ltmp1295:
    00000318: 	movq	0x40(%rsp), %rdx
    0000031d: 	xorl	%esi, %esi
    0000031f: 	movl	%r14d, %ecx
    00000322: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1293:
    00000328: 	movslq	(%rdx), %r8
    0000032b: 	addq	$0x4, %rdx
    0000032f: 	movq	%r8, %rax
    00000332: 	imulq	%r13, %r8
    00000336: 	sarq	$0x20, %r8
    0000033a: 	addl	%eax, %r8d
    0000033d: 	shrl	$0x1f, %eax
    00000340: 	sarl	%cl, %r8d
    00000343: 	addl	%r8d, %eax
    00000346: 	xorl	%r12d, %eax
    00000349: 	subl	%r12d, %eax
    0000034c: 	addl	%eax, %esi
    0000034e: 	cmpq	%rbx, %rdx
    00000351: 	jne	.Ltmp1293 # Offset: 849
    00000353: 	cvttsd2si	init_value(%rip), %eax
    0000035b: 	movl	%ecx, %r14d
    0000035e: 	cltd
    0000035f: 	idivl	%ebp
    00000361: 	imull	$0xfa0, %eax, %eax
    00000367: 	cmpl	%eax, %esi
    00000369: 	je	.Ltmp1294 # Offset: 873
    0000036b: 	movq	0xe0(%rsp), %rdx
    00000373: 	leaq	DATAat0x141e1(%rip), %rsi
    0000037a: 	movl	$0x1, %edi
    0000037f: 	xorl	%eax, %eax
    00000381: 	callq	__printf_chk@PLT # Offset: 897
    00000386: 	movl	iterations(%rip), %edi
.Ltmp1294:
    0000038c: 	addl	$0x1, %r15d
    00000390: 	cmpl	%edi, %r15d
    00000393: 	jl	.Ltmp1295 # Offset: 915
.Ltmp1292:
    00000395: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000039c: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000003a3: 	subq	$0x20, %rax
    000003a7: 	cmpq	%rax, %rdi
    000003aa: 	je	.Ltmp1296 # Offset: 938
    000003b0: 	leaq	0x10(%rdi), %rax
    000003b4: 	movq	0xe8(%rsp), %rdx
    000003bc: 	movq	%rax, (%rdi)
    000003bf: 	movq	0xe0(%rsp), %rsi
    000003c7: 	addq	%rsi, %rdx
    000003ca: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 970
    000003cf: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000003d6: 	addq	$0x20, %rax
    000003da: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1466:
    000003e1: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000003e8: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000003ef: 	je	.Ltmp1297 # Offset: 1007
.Ltmp1465:
    000003f5: 	movq	-0x20(%rax), %r13
    000003f9: 	callq	clock@PLT # Offset: 1017
    000003fe: 	pxor	%xmm0, %xmm0
    00000402: 	movq	%rax, end_time(%rip)
    00000409: 	movq	%r13, %rdi
    0000040c: 	subq	start_time(%rip), %rax
    00000413: 	cvtsi2sd	%rax, %xmm0
    00000418: 	divsd	DATAat0x14308(%rip), %xmm0
    00000420: 	callq	_Z13record_resultdPKc # Offset: 1056
    00000425: 	movq	0xe0(%rsp), %rdi
    0000042d: 	cmpq	0x18(%rsp), %rdi
    00000432: 	je	.Ltmp1298 # Offset: 1074
    00000434: 	movq	0xf0(%rsp), %rax
    0000043c: 	leaq	0x1(%rax), %rsi
    00000440: 	callq	_ZdlPvm@PLT # Offset: 1088
.Ltmp1298:
    00000445: 	movq	0xa0(%rsp), %r14
    0000044d: 	leaq	0xd0(%rsp), %rax
    00000455: 	movq	0xa8(%rsp), %r13
    0000045d: 	movq	%rax, 0x68(%rsp)
    00000462: 	movq	%rax, 0xc0(%rsp)
    0000046a: 	movq	%r14, %rax
    0000046d: 	addq	%r13, %rax
    00000470: 	je	.Ltmp1299 # Offset: 1136
    00000472: 	testq	%r14, %r14
    00000475: 	je	.Ltmp1300 # Offset: 1141
.Ltmp1299:
    0000047b: 	movq	%r13, 0x98(%rsp)
    00000483: 	cmpq	$0xf, %r13
    00000487: 	ja	.Ltmp1301 # Offset: 1159
    0000048d: 	cmpq	$0x1, %r13
    00000491: 	jne	.Ltmp1302 # Offset: 1169
    00000497: 	movzbl	(%r14), %eax
    0000049b: 	movb	%al, 0xd0(%rsp)
    000004a2: 	movq	0x68(%rsp), %rax
.Ltmp1464:
    000004a7: 	movq	%r13, 0xc8(%rsp)
    000004af: 	movb	$0x0, (%rax,%r13)
    000004b4: 	movabsq	$0x3fffffffffffffff, %rax
    000004be: 	subq	0xc8(%rsp), %rax
    000004c6: 	cmpq	$0xf, %rax
    000004ca: 	jbe	.Ltmp1303 # Offset: 1226
    000004d0: 	leaq	0xc0(%rsp), %rax
    000004d8: 	movl	$0x10, %edx
    000004dd: 	leaq	DATAat0x141f1(%rip), %rsi
    000004e4: 	movq	%rax, %rdi
    000004e7: 	movq	%rax, 0x70(%rsp)
    000004ec: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1260
    000004f1: 	callq	clock@PLT # Offset: 1265
    000004f6: 	movl	iterations(%rip), %r8d
    000004fd: 	movq	%rax, start_time(%rip)
    00000504: 	testl	%r8d, %r8d
    00000507: 	jle	.Ltmp1304 # Offset: 1287
    0000050d: 	movdqa	DATAat0x143c0(%rip), %xmm4
    00000515: 	pxor	%xmm6, %xmm6
    00000519: 	leaq	0x98(%rsp), %rax
    00000521: 	xorl	%r13d, %r13d
    00000524: 	movq	%rax, 0x78(%rsp)
    00000529: 	pcmpgtd	%xmm4, %xmm6
    0000052d: 	movaps	%xmm4, (%rsp)
    00000531: 	movaps	%xmm6, 0x20(%rsp)
    00000536: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1312:
    00000540: 	movq	0x40(%rsp), %rax
    00000545: 	pxor	%xmm4, %xmm4
    00000549: 	nopl	(%rax) # Size: 7
.Ltmp1305:
    00000550: 	movdqa	(%rax), %xmm1
    00000554: 	pxor	%xmm2, %xmm2
    00000558: 	movdqa	0x20(%rsp), %xmm7
    0000055e: 	addq	$0x10, %rax
    00000562: 	movdqa	(%rsp), %xmm6
    00000567: 	movdqa	%xmm1, %xmm0
    0000056b: 	movdqa	%xmm7, %xmm3
    0000056f: 	movdqa	%xmm7, %xmm5
    00000573: 	punpckldq	%xmm1, %xmm0
    00000577: 	pcmpgtd	%xmm0, %xmm2
    0000057b: 	pmuludq	%xmm0, %xmm3
    0000057f: 	pmuludq	%xmm6, %xmm0
    00000583: 	pmuludq	%xmm6, %xmm2
    00000587: 	paddq	%xmm3, %xmm2
    0000058b: 	pxor	%xmm3, %xmm3
    0000058f: 	psllq	$0x20, %xmm2
    00000594: 	paddq	%xmm2, %xmm0
    00000598: 	movdqa	%xmm1, %xmm2
    0000059c: 	punpckhdq	%xmm1, %xmm2
    000005a0: 	pcmpgtd	%xmm2, %xmm3
    000005a4: 	pmuludq	%xmm2, %xmm5
    000005a8: 	pmuludq	%xmm6, %xmm2
    000005ac: 	pmuludq	%xmm6, %xmm3
    000005b0: 	paddq	%xmm5, %xmm3
    000005b4: 	psllq	$0x20, %xmm3
    000005b9: 	paddq	%xmm3, %xmm2
    000005bd: 	shufps	$0xdd, %xmm2, %xmm0
    000005c1: 	paddd	%xmm1, %xmm0
    000005c5: 	psrad	$0x1f, %xmm1
    000005ca: 	psrad	$0x8, %xmm0
    000005cf: 	psubd	%xmm1, %xmm0
    000005d3: 	paddd	%xmm0, %xmm4
    000005d7: 	cmpq	%rbx, %rax
    000005da: 	jne	.Ltmp1305 # Offset: 1498
    000005e0: 	movdqa	%xmm4, %xmm0
    000005e4: 	movq	0x18(%rsp), %rax
    000005e9: 	movq	0xc0(%rsp), %r15
    000005f1: 	psrldq	$0x8, %xmm0
    000005f6: 	movq	0xc8(%rsp), %r14
    000005fe: 	paddd	%xmm0, %xmm4
    00000602: 	movq	%rax, 0xe0(%rsp)
    0000060a: 	movq	%r15, %rax
    0000060d: 	movdqa	%xmm4, %xmm0
    00000611: 	addq	%r14, %rax
    00000614: 	psrldq	$0x4, %xmm0
    00000619: 	paddd	%xmm0, %xmm4
    0000061d: 	movd	%xmm4, 0x48(%rsp)
    00000623: 	je	.Ltmp1306 # Offset: 1571
    00000625: 	testq	%r15, %r15
    00000628: 	je	.Ltmp1307 # Offset: 1576
.Ltmp1306:
    0000062e: 	movq	%r14, 0x98(%rsp)
    00000636: 	cmpq	$0xf, %r14
    0000063a: 	ja	.Ltmp1308 # Offset: 1594
    00000640: 	cmpq	$0x1, %r14
    00000644: 	jne	.Ltmp1309 # Offset: 1604
    0000064a: 	movzbl	(%r15), %eax
    0000064e: 	movb	%al, 0xf0(%rsp)
    00000655: 	movq	0x18(%rsp), %rax
.Ltmp1450:
    0000065a: 	movq	%r14, 0xe8(%rsp)
    00000662: 	movb	$0x0, (%rax,%r14)
    00000667: 	cvttsd2si	init_value(%rip), %edx
    0000066f: 	movslq	%edx, %rax
    00000672: 	imulq	$-0x49f49f49, %rax, %rax
    00000679: 	shrq	$0x20, %rax
    0000067d: 	addl	%edx, %eax
    0000067f: 	sarl	$0x1f, %edx
    00000682: 	sarl	$0x8, %eax
    00000685: 	subl	%edx, %eax
    00000687: 	imull	$0xfa0, %eax, %eax
    0000068d: 	cmpl	0x48(%rsp), %eax
    00000691: 	je	.Ltmp1310 # Offset: 1681
    00000693: 	movq	0xe0(%rsp), %rdx
    0000069b: 	leaq	DATAat0x141e1(%rip), %rsi
    000006a2: 	movl	$0x1, %edi
    000006a7: 	xorl	%eax, %eax
    000006a9: 	callq	__printf_chk@PLT # Offset: 1705
.Ltmp1310:
    000006ae: 	movq	0xe0(%rsp), %rdi
    000006b6: 	cmpq	0x18(%rsp), %rdi
    000006bb: 	je	.Ltmp1311 # Offset: 1723
    000006c1: 	movq	0xf0(%rsp), %rax
    000006c9: 	addl	$0x1, %r13d
    000006cd: 	leaq	0x1(%rax), %rsi
    000006d1: 	callq	_ZdlPvm@PLT # Offset: 1745
    000006d6: 	cmpl	iterations(%rip), %r13d
    000006dd: 	jl	.Ltmp1312 # Offset: 1757
.Ltmp1304:
    000006e3: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000006ea: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    000006f1: 	subq	$0x20, %rax
    000006f5: 	cmpq	%rax, %r14
    000006f8: 	je	.Ltmp1313 # Offset: 1784
    000006fe: 	leaq	0x10(%r14), %rdi
    00000702: 	movq	0xc8(%rsp), %r13
    0000070a: 	movq	%rdi, (%r14)
    0000070d: 	movq	0xc0(%rsp), %r15
    00000715: 	movq	%r15, %rax
    00000718: 	addq	%r13, %rax
    0000071b: 	je	.Ltmp1314 # Offset: 1819
    0000071d: 	testq	%r15, %r15
    00000720: 	je	.Ltmp1315 # Offset: 1824
.Ltmp1314:
    00000726: 	movq	%r13, 0x98(%rsp)
    0000072e: 	cmpq	$0xf, %r13
    00000732: 	ja	.Ltmp1316 # Offset: 1842
    00000738: 	cmpq	$0x1, %r13
    0000073c: 	jne	.Ltmp1317 # Offset: 1852
    00000742: 	movzbl	(%r15), %eax
    00000746: 	movb	%al, 0x10(%r14)
.Ltmp1488:
    0000074a: 	movq	%r13, 0x8(%r14)
    0000074e: 	movb	$0x0, (%rdi,%r13)
    00000753: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000075a: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000761: 	addq	$0x20, %rax
    00000765: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000076c: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000773: 	je	.Ltmp1318 # Offset: 1907
.Ltmp1469:
    00000779: 	movq	-0x20(%rax), %r13
    0000077d: 	callq	clock@PLT # Offset: 1917
    00000782: 	pxor	%xmm0, %xmm0
    00000786: 	movq	%rax, end_time(%rip)
    0000078d: 	movq	%r13, %rdi
    00000790: 	subq	start_time(%rip), %rax
    00000797: 	cvtsi2sd	%rax, %xmm0
    0000079c: 	divsd	DATAat0x14308(%rip), %xmm0
    000007a4: 	callq	_Z13record_resultdPKc # Offset: 1956
    000007a9: 	movq	0xc0(%rsp), %rdi
    000007b1: 	cmpq	0x68(%rsp), %rdi
    000007b6: 	je	.Ltmp1319 # Offset: 1974
    000007b8: 	movq	0xd0(%rsp), %rax
    000007c0: 	leaq	0x1(%rax), %rsi
    000007c4: 	callq	_ZdlPvm@PLT # Offset: 1988
.Ltmp1319:
    000007c9: 	movq	0x68(%rsp), %rax
    000007ce: 	movq	0xa0(%rsp), %r14
    000007d6: 	movq	0xa8(%rsp), %r13
    000007de: 	movq	%rax, 0xc0(%rsp)
    000007e6: 	movq	%r14, %rax
    000007e9: 	addq	%r13, %rax
    000007ec: 	je	.Ltmp1320 # Offset: 2028
    000007ee: 	testq	%r14, %r14
    000007f1: 	je	.Ltmp1321 # Offset: 2033
.Ltmp1320:
    000007f7: 	movq	%r13, 0x98(%rsp)
    000007ff: 	cmpq	$0xf, %r13
    00000803: 	ja	.Ltmp1322 # Offset: 2051
    00000809: 	cmpq	$0x1, %r13
    0000080d: 	jne	.Ltmp1323 # Offset: 2061
    00000813: 	movzbl	(%r14), %eax
    00000817: 	movb	%al, 0xd0(%rsp)
    0000081e: 	movq	0x68(%rsp), %rax
.Ltmp1462:
    00000823: 	movq	%r13, 0xc8(%rsp)
    0000082b: 	movb	$0x0, (%rax,%r13)
    00000830: 	movabsq	$0x3fffffffffffffff, %rax
    0000083a: 	subq	0xc8(%rsp), %rax
    00000842: 	cmpq	$0x1a, %rax
    00000846: 	jbe	.Ltmp1324 # Offset: 2118
    0000084c: 	movq	0x70(%rsp), %rdi
    00000851: 	movl	$0x1b, %edx
    00000856: 	leaq	DATAat0x14228(%rip), %rsi
    0000085d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2141
    00000862: 	callq	clock@PLT # Offset: 2146
    00000867: 	movl	iterations(%rip), %edi
    0000086d: 	movl	$0x0, (%rsp)
    00000874: 	movq	%rax, start_time(%rip)
    0000087b: 	testl	%edi, %edi
    0000087d: 	jle	.Ltmp1325 # Offset: 2173
    00000883: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1333:
    00000888: 	movq	0x40(%rsp), %rcx
    0000088d: 	xorl	%r13d, %r13d
.Ltmp1326:
    00000890: 	movslq	(%rcx), %rax
    00000893: 	addq	$0x4, %rcx
    00000897: 	movq	%rax, %rdx
    0000089a: 	imulq	$-0x49f49f49, %rax, %rax
    000008a1: 	sarq	$0x20, %rax
    000008a5: 	addl	%edx, %eax
    000008a7: 	shrl	$0x1f, %edx
    000008aa: 	sarl	$0x8, %eax
    000008ad: 	addl	%edx, %eax
    000008af: 	addl	%eax, %r13d
    000008b2: 	cmpq	%rbx, %rcx
    000008b5: 	jne	.Ltmp1326 # Offset: 2229
    000008b7: 	movq	0x18(%rsp), %rax
    000008bc: 	movq	0xc0(%rsp), %r15
    000008c4: 	movq	0xc8(%rsp), %r14
    000008cc: 	movq	%rax, 0xe0(%rsp)
    000008d4: 	movq	%r15, %rax
    000008d7: 	addq	%r14, %rax
    000008da: 	je	.Ltmp1327 # Offset: 2266
    000008dc: 	testq	%r15, %r15
    000008df: 	je	.Ltmp1328 # Offset: 2271
.Ltmp1327:
    000008e5: 	movq	%r14, 0x98(%rsp)
    000008ed: 	cmpq	$0xf, %r14
    000008f1: 	ja	.Ltmp1329 # Offset: 2289
    000008f7: 	cmpq	$0x1, %r14
    000008fb: 	jne	.Ltmp1330 # Offset: 2299
    00000901: 	movzbl	(%r15), %eax
    00000905: 	movb	%al, 0xf0(%rsp)
    0000090c: 	movq	0x18(%rsp), %rax
.Ltmp1452:
    00000911: 	movq	%r14, 0xe8(%rsp)
    00000919: 	movb	$0x0, (%rax,%r14)
    0000091e: 	cvttsd2si	init_value(%rip), %edx
    00000926: 	movslq	%edx, %rax
    00000929: 	imulq	$-0x49f49f49, %rax, %rax
    00000930: 	sarq	$0x20, %rax
    00000934: 	addl	%edx, %eax
    00000936: 	shrl	$0x1f, %edx
    00000939: 	sarl	$0x8, %eax
    0000093c: 	addl	%edx, %eax
    0000093e: 	imull	$0xfa0, %eax, %eax
    00000944: 	cmpl	%eax, %r13d
    00000947: 	je	.Ltmp1331 # Offset: 2375
    00000949: 	movq	0xe0(%rsp), %rdx
    00000951: 	leaq	DATAat0x141e1(%rip), %rsi
    00000958: 	movl	$0x1, %edi
    0000095d: 	xorl	%eax, %eax
    0000095f: 	callq	__printf_chk@PLT # Offset: 2399
.Ltmp1331:
    00000964: 	movq	0xe0(%rsp), %rdi
    0000096c: 	cmpq	0x18(%rsp), %rdi
    00000971: 	je	.Ltmp1332 # Offset: 2417
    00000977: 	movq	0xf0(%rsp), %rax
    0000097f: 	leaq	0x1(%rax), %rsi
    00000983: 	callq	_ZdlPvm@PLT # Offset: 2435
    00000988: 	addl	$0x1, (%rsp)
    0000098c: 	movl	(%rsp), %eax
    0000098f: 	cmpl	iterations(%rip), %eax
    00000995: 	jl	.Ltmp1333 # Offset: 2453
.Ltmp1325:
    0000099b: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000009a2: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    000009a9: 	subq	$0x20, %rax
    000009ad: 	cmpq	%rax, %rdi
    000009b0: 	je	.Ltmp1334 # Offset: 2480
    000009b6: 	leaq	0x10(%rdi), %rax
    000009ba: 	movq	0xc8(%rsp), %rdx
    000009c2: 	movq	%rax, (%rdi)
    000009c5: 	movq	0xc0(%rsp), %rsi
    000009cd: 	addq	%rsi, %rdx
    000009d0: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 2512
    000009d5: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000009dc: 	addq	$0x20, %rax
    000009e0: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1480:
    000009e7: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000009ee: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000009f5: 	je	.Ltmp1335 # Offset: 2549
.Ltmp1479:
    000009fb: 	movq	-0x20(%rax), %r13
    000009ff: 	callq	clock@PLT # Offset: 2559
    00000a04: 	pxor	%xmm0, %xmm0
    00000a08: 	movq	%rax, end_time(%rip)
    00000a0f: 	movq	%r13, %rdi
    00000a12: 	subq	start_time(%rip), %rax
    00000a19: 	cvtsi2sd	%rax, %xmm0
    00000a1e: 	divsd	DATAat0x14308(%rip), %xmm0
    00000a26: 	callq	_Z13record_resultdPKc # Offset: 2598
    00000a2b: 	movq	0xc0(%rsp), %rdi
    00000a33: 	cmpq	0x68(%rsp), %rdi
    00000a38: 	je	.Ltmp1336 # Offset: 2616
    00000a3a: 	movq	0xd0(%rsp), %rax
    00000a42: 	leaq	0x1(%rax), %rsi
    00000a46: 	callq	_ZdlPvm@PLT # Offset: 2630
.Ltmp1336:
    00000a4b: 	movq	0x60(%rsp), %rsi
    00000a50: 	movq	0x30(%rsp), %rdi
    00000a55: 	leaq	DATAat0x14244(%rip), %rdx
    00000a5c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2652
    00000a61: 	callq	clock@PLT # Offset: 2657
    00000a66: 	movl	iterations(%rip), %edi
    00000a6c: 	xorl	%r13d, %r13d
    00000a6f: 	leaq	DATAat0x141e1(%rip), %r14
    00000a76: 	movq	%rax, start_time(%rip)
    00000a7d: 	testl	%edi, %edi
    00000a7f: 	jle	.Ltmp1337 # Offset: 2687
    00000a81: 	nopl	(%rax) # Size: 7
.Ltmp1340:
    00000a88: 	movq	0x40(%rsp), %rcx
    00000a8d: 	xorl	%esi, %esi
    00000a8f: 	nop # Size: 1
.Ltmp1338:
    00000a90: 	movl	(%rcx), %eax
    00000a92: 	addq	$0x4, %rcx
    00000a96: 	cltd
    00000a97: 	idivl	%ebp
    00000a99: 	addl	%edx, %esi
    00000a9b: 	cmpq	%rbx, %rcx
    00000a9e: 	jne	.Ltmp1338 # Offset: 2718
    00000aa0: 	cvttsd2si	init_value(%rip), %eax
    00000aa8: 	cltd
    00000aa9: 	idivl	%ebp
    00000aab: 	imull	$0xfa0, %edx, %edx
    00000ab1: 	cmpl	%edx, %esi
    00000ab3: 	je	.Ltmp1339 # Offset: 2739
    00000ab5: 	movq	0xe0(%rsp), %rdx
    00000abd: 	movq	%r14, %rsi
    00000ac0: 	movl	$0x1, %edi
    00000ac5: 	xorl	%eax, %eax
    00000ac7: 	callq	__printf_chk@PLT # Offset: 2759
    00000acc: 	movl	iterations(%rip), %edi
.Ltmp1339:
    00000ad2: 	addl	$0x1, %r13d
    00000ad6: 	cmpl	%edi, %r13d
    00000ad9: 	jl	.Ltmp1340 # Offset: 2777
.Ltmp1337:
    00000adb: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000ae2: 	movq	"_ZL7gLabels/1"+48(%rip), %r14
    00000ae9: 	subq	$0x20, %rax
    00000aed: 	cmpq	%rax, %r14
    00000af0: 	je	.Ltmp1341 # Offset: 2800
    00000af6: 	leaq	0x10(%r14), %rdi
    00000afa: 	movq	0xe8(%rsp), %r13
    00000b02: 	movq	%rdi, (%r14)
    00000b05: 	movq	0xe0(%rsp), %r15
    00000b0d: 	movq	%r15, %rax
    00000b10: 	addq	%r13, %rax
    00000b13: 	je	.Ltmp1342 # Offset: 2835
    00000b15: 	testq	%r15, %r15
    00000b18: 	je	.Ltmp1343 # Offset: 2840
.Ltmp1342:
    00000b1e: 	movq	%r13, 0x98(%rsp)
    00000b26: 	cmpq	$0xf, %r13
    00000b2a: 	ja	.Ltmp1344 # Offset: 2858
    00000b30: 	cmpq	$0x1, %r13
    00000b34: 	jne	.Ltmp1345 # Offset: 2868
    00000b3a: 	movzbl	(%r15), %eax
    00000b3e: 	movb	%al, 0x10(%r14)
.Ltmp1492:
    00000b42: 	movq	%r13, 0x8(%r14)
    00000b46: 	movb	$0x0, (%rdi,%r13)
    00000b4b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000b52: 	addq	$0x20, %rax
    00000b56: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1472:
    00000b5d: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000b64: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000b6b: 	je	.Ltmp1346 # Offset: 2923
.Ltmp1471:
    00000b71: 	movq	-0x20(%rax), %r13
    00000b75: 	callq	clock@PLT # Offset: 2933
    00000b7a: 	pxor	%xmm0, %xmm0
    00000b7e: 	movq	%rax, end_time(%rip)
    00000b85: 	movq	%r13, %rdi
    00000b88: 	subq	start_time(%rip), %rax
    00000b8f: 	cvtsi2sd	%rax, %xmm0
    00000b94: 	divsd	DATAat0x14308(%rip), %xmm0
    00000b9c: 	callq	_Z13record_resultdPKc # Offset: 2972
    00000ba1: 	movq	0xe0(%rsp), %rdi
    00000ba9: 	cmpq	0x18(%rsp), %rdi
    00000bae: 	je	.Ltmp1347 # Offset: 2990
    00000bb0: 	movq	0xf0(%rsp), %rax
    00000bb8: 	leaq	0x1(%rax), %rsi
    00000bbc: 	callq	_ZdlPvm@PLT # Offset: 3004
.Ltmp1347:
    00000bc1: 	movq	0x60(%rsp), %rsi
    00000bc6: 	movq	0x30(%rsp), %rdi
    00000bcb: 	leaq	DATAat0x14255(%rip), %rdx
    00000bd2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3026
    00000bd7: 	callq	clock@PLT # Offset: 3031
    00000bdc: 	movl	0x50(%rsp), %ecx
    00000be0: 	movq	%rax, start_time(%rip)
    00000be7: 	movabsq	$0x100000000, %rax
    00000bf1: 	testl	%ecx, %ecx
    00000bf3: 	je	.Ltmp1348 # Offset: 3059
    00000bf5: 	js	.Ltmp1349 # Offset: 3061
    00000bfb: 	movl	$0x80000000, %eax
    00000c00: 	xorl	%edx, %edx
    00000c02: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1350:
    00000c08: 	shrl	%eax
    00000c0a: 	addl	$0x1, %edx
    00000c0d: 	testl	%eax, %ecx
    00000c0f: 	je	.Ltmp1350 # Offset: 3087
    00000c11: 	movl	$0x20, %eax
    00000c16: 	subl	%edx, %eax
    00000c18: 	movl	$0x1, %edx
    00000c1d: 	testl	%eax, %eax
    00000c1f: 	cmovlel	%edx, %eax
    00000c22: 	leal	-0x1(%rax), %edi
    00000c25: 	leal	0x1f(%rax), %ecx
    00000c28: 	movl	$0x1, %eax
    00000c2d: 	movl	%edi, 0x50(%rsp)
    00000c31: 	shlq	%cl, %rax
.Ltmp1348:
    00000c34: 	cqto
    00000c36: 	movl	iterations(%rip), %edi
    00000c3c: 	xorl	%r14d, %r14d
    00000c3f: 	leaq	DATAat0x141e1(%rip), %r15
    00000c46: 	idivq	0x88(%rsp)
    00000c4e: 	leal	0x1(%rax), %r13d
    00000c52: 	movslq	%r13d, %r13
    00000c55: 	testl	%edi, %edi
    00000c57: 	jle	.Ltmp1351 # Offset: 3159
    00000c5d: 	nopl	(%rax) # Size: 3
.Ltmp1354:
    00000c60: 	movq	0x40(%rsp), %r8
    00000c65: 	movl	0x50(%rsp), %ecx
    00000c69: 	xorl	%esi, %esi
    00000c6b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1352:
    00000c70: 	movslq	(%r8), %rax
    00000c73: 	addq	$0x4, %r8
    00000c77: 	movq	%rax, %rdx
    00000c7a: 	imulq	%r13, %rax
    00000c7e: 	sarq	$0x20, %rax
    00000c82: 	addl	%edx, %eax
    00000c84: 	sarl	%cl, %eax
    00000c86: 	movl	%eax, %r9d
    00000c89: 	movl	%edx, %eax
    00000c8b: 	shrl	$0x1f, %eax
    00000c8e: 	addl	%r9d, %eax
    00000c91: 	xorl	%r12d, %eax
    00000c94: 	subl	%r12d, %eax
    00000c97: 	imull	%ebp, %eax
    00000c9a: 	subl	%eax, %edx
    00000c9c: 	addl	%edx, %esi
    00000c9e: 	cmpq	%r8, %rbx
    00000ca1: 	jne	.Ltmp1352 # Offset: 3233
    00000ca3: 	cvttsd2si	init_value(%rip), %eax
    00000cab: 	cltd
    00000cac: 	idivl	%ebp
    00000cae: 	imull	$0xfa0, %edx, %edx
    00000cb4: 	cmpl	%edx, %esi
    00000cb6: 	je	.Ltmp1353 # Offset: 3254
    00000cb8: 	movq	0xe0(%rsp), %rdx
    00000cc0: 	movq	%r15, %rsi
    00000cc3: 	movl	$0x1, %edi
    00000cc8: 	xorl	%eax, %eax
    00000cca: 	callq	__printf_chk@PLT # Offset: 3274
    00000ccf: 	movl	iterations(%rip), %edi
.Ltmp1353:
    00000cd5: 	addl	$0x1, %r14d
    00000cd9: 	cmpl	%edi, %r14d
    00000cdc: 	jl	.Ltmp1354 # Offset: 3292
.Ltmp1351:
    00000cde: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000ce5: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000cec: 	subq	$0x20, %rax
    00000cf0: 	cmpq	%rax, %rdi
    00000cf3: 	je	.Ltmp1355 # Offset: 3315
    00000cf9: 	leaq	0x10(%rdi), %rax
    00000cfd: 	movq	0xe8(%rsp), %rdx
    00000d05: 	movq	%rax, (%rdi)
    00000d08: 	movq	0xe0(%rsp), %rsi
    00000d10: 	addq	%rsi, %rdx
    00000d13: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 3347
    00000d18: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000d1f: 	addq	$0x20, %rax
    00000d23: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1477:
    00000d2a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000d31: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000d38: 	je	.Ltmp1356 # Offset: 3384
.Ltmp1476:
    00000d3e: 	movq	-0x20(%rax), %r12
    00000d42: 	callq	clock@PLT # Offset: 3394
    00000d47: 	pxor	%xmm0, %xmm0
    00000d4b: 	movq	%rax, end_time(%rip)
    00000d52: 	movq	%r12, %rdi
    00000d55: 	subq	start_time(%rip), %rax
    00000d5c: 	cvtsi2sd	%rax, %xmm0
    00000d61: 	divsd	DATAat0x14308(%rip), %xmm0
    00000d69: 	callq	_Z13record_resultdPKc # Offset: 3433
    00000d6e: 	movq	0xe0(%rsp), %rdi
    00000d76: 	cmpq	0x18(%rsp), %rdi
    00000d7b: 	je	.Ltmp1357 # Offset: 3451
    00000d7d: 	movq	0xf0(%rsp), %rax
    00000d85: 	leaq	0x1(%rax), %rsi
    00000d89: 	callq	_ZdlPvm@PLT # Offset: 3465
.Ltmp1357:
    00000d8e: 	movq	0x60(%rsp), %rsi
    00000d93: 	movq	0x70(%rsp), %rdi
    00000d98: 	leaq	DATAat0x14271(%rip), %rdx
    00000d9f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3487
    00000da4: 	callq	clock@PLT # Offset: 3492
    00000da9: 	movl	iterations(%rip), %esi
    00000daf: 	movq	%rax, start_time(%rip)
    00000db6: 	testl	%esi, %esi
    00000db8: 	jle	.Ltmp1358 # Offset: 3512
    00000dbe: 	movdqa	DATAat0x143c0(%rip), %xmm4
    00000dc6: 	pxor	%xmm6, %xmm6
    00000dca: 	leaq	0x98(%rsp), %rax
    00000dd2: 	xorl	%r15d, %r15d
    00000dd5: 	movq	%rax, 0x48(%rsp)
    00000dda: 	pcmpgtd	%xmm4, %xmm6
    00000dde: 	movaps	%xmm4, (%rsp)
    00000de2: 	movaps	%xmm6, 0x20(%rsp)
    00000de7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1366:
    00000df0: 	movq	0x40(%rsp), %rax
    00000df5: 	pxor	%xmm4, %xmm4
    00000df9: 	nopl	(%rax) # Size: 7
.Ltmp1359:
    00000e00: 	movdqa	(%rax), %xmm1
    00000e04: 	pxor	%xmm2, %xmm2
    00000e08: 	movdqa	0x20(%rsp), %xmm6
    00000e0e: 	addq	$0x10, %rax
    00000e12: 	movdqa	(%rsp), %xmm7
    00000e17: 	movdqa	%xmm1, %xmm0
    00000e1b: 	movdqa	%xmm6, %xmm3
    00000e1f: 	movdqa	%xmm6, %xmm5
    00000e23: 	punpckldq	%xmm1, %xmm0
    00000e27: 	pcmpgtd	%xmm0, %xmm2
    00000e2b: 	pmuludq	%xmm0, %xmm3
    00000e2f: 	pmuludq	%xmm7, %xmm0
    00000e33: 	pmuludq	%xmm7, %xmm2
    00000e37: 	paddq	%xmm3, %xmm2
    00000e3b: 	pxor	%xmm3, %xmm3
    00000e3f: 	psllq	$0x20, %xmm2
    00000e44: 	paddq	%xmm2, %xmm0
    00000e48: 	movdqa	%xmm1, %xmm2
    00000e4c: 	punpckhdq	%xmm1, %xmm2
    00000e50: 	pcmpgtd	%xmm2, %xmm3
    00000e54: 	pmuludq	%xmm2, %xmm5
    00000e58: 	pmuludq	%xmm7, %xmm2
    00000e5c: 	pmuludq	%xmm7, %xmm3
    00000e60: 	paddq	%xmm5, %xmm3
    00000e64: 	psllq	$0x20, %xmm3
    00000e69: 	paddq	%xmm3, %xmm2
    00000e6d: 	shufps	$0xdd, %xmm2, %xmm0
    00000e71: 	movdqa	%xmm1, %xmm2
    00000e75: 	paddd	%xmm1, %xmm0
    00000e79: 	psrad	$0x1f, %xmm2
    00000e7e: 	psrad	$0x8, %xmm0
    00000e83: 	psubd	%xmm2, %xmm0
    00000e87: 	movdqa	%xmm0, %xmm2
    00000e8b: 	pslld	$0x1, %xmm2
    00000e90: 	paddd	%xmm0, %xmm2
    00000e94: 	movdqa	%xmm2, %xmm0
    00000e98: 	pslld	$0x4, %xmm0
    00000e9d: 	psubd	%xmm2, %xmm0
    00000ea1: 	pslld	$0x3, %xmm0
    00000ea6: 	psubd	%xmm0, %xmm1
    00000eaa: 	paddd	%xmm1, %xmm4
    00000eae: 	cmpq	%rax, %rbx
    00000eb1: 	jne	.Ltmp1359 # Offset: 3761
    00000eb7: 	movdqa	%xmm4, %xmm0
    00000ebb: 	movq	0x18(%rsp), %rax
    00000ec0: 	movq	0xc0(%rsp), %r14
    00000ec8: 	psrldq	$0x8, %xmm0
    00000ecd: 	movq	0xc8(%rsp), %r13
    00000ed5: 	paddd	%xmm0, %xmm4
    00000ed9: 	movq	%rax, 0xe0(%rsp)
    00000ee1: 	movq	%r14, %rax
    00000ee4: 	movdqa	%xmm4, %xmm0
    00000ee8: 	addq	%r13, %rax
    00000eeb: 	psrldq	$0x4, %xmm0
    00000ef0: 	paddd	%xmm0, %xmm4
    00000ef4: 	movd	%xmm4, %r12d
    00000ef9: 	je	.Ltmp1360 # Offset: 3833
    00000efb: 	testq	%r14, %r14
    00000efe: 	je	.Ltmp1361 # Offset: 3838
.Ltmp1360:
    00000f04: 	movq	%r13, 0x98(%rsp)
    00000f0c: 	cmpq	$0xf, %r13
    00000f10: 	ja	.Ltmp1362 # Offset: 3856
    00000f16: 	cmpq	$0x1, %r13
    00000f1a: 	jne	.Ltmp1363 # Offset: 3866
    00000f20: 	movzbl	(%r14), %eax
    00000f24: 	movb	%al, 0xf0(%rsp)
    00000f2b: 	movq	0x18(%rsp), %rax
.Ltmp1454:
    00000f30: 	movq	%r13, 0xe8(%rsp)
    00000f38: 	movb	$0x0, (%rax,%r13)
    00000f3d: 	cvttsd2si	init_value(%rip), %edx
    00000f45: 	movslq	%edx, %rax
    00000f48: 	movl	%edx, %ecx
    00000f4a: 	imulq	$-0x49f49f49, %rax, %rax
    00000f51: 	sarl	$0x1f, %ecx
    00000f54: 	shrq	$0x20, %rax
    00000f58: 	addl	%edx, %eax
    00000f5a: 	sarl	$0x8, %eax
    00000f5d: 	subl	%ecx, %eax
    00000f5f: 	imull	$0x168, %eax, %eax
    00000f65: 	subl	%eax, %edx
    00000f67: 	imull	$0xfa0, %edx, %edx
    00000f6d: 	cmpl	%r12d, %edx
    00000f70: 	je	.Ltmp1364 # Offset: 3952
    00000f72: 	movq	0xe0(%rsp), %rdx
    00000f7a: 	leaq	DATAat0x141e1(%rip), %rsi
    00000f81: 	movl	$0x1, %edi
    00000f86: 	xorl	%eax, %eax
    00000f88: 	callq	__printf_chk@PLT # Offset: 3976
.Ltmp1364:
    00000f8d: 	movq	0xe0(%rsp), %rdi
    00000f95: 	cmpq	0x18(%rsp), %rdi
    00000f9a: 	je	.Ltmp1365 # Offset: 3994
    00000fa0: 	movq	0xf0(%rsp), %rax
    00000fa8: 	addl	$0x1, %r15d
    00000fac: 	leaq	0x1(%rax), %rsi
    00000fb0: 	callq	_ZdlPvm@PLT # Offset: 4016
    00000fb5: 	cmpl	iterations(%rip), %r15d
    00000fbc: 	jl	.Ltmp1366 # Offset: 4028
.Ltmp1358:
    00000fc2: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000fc9: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000fd0: 	subq	$0x20, %rax
    00000fd4: 	cmpq	%rax, %rdi
    00000fd7: 	je	.Ltmp1367 # Offset: 4055
    00000fdd: 	leaq	0x10(%rdi), %rax
    00000fe1: 	movq	0xc8(%rsp), %rdx
    00000fe9: 	movq	%rax, (%rdi)
    00000fec: 	movq	0xc0(%rsp), %rsi
    00000ff4: 	addq	%rsi, %rdx
    00000ff7: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 4087
    00000ffc: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001003: 	addq	$0x20, %rax
    00001007: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1474:
    0000100e: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001015: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000101c: 	je	.Ltmp1368 # Offset: 4124
.Ltmp1473:
    00001022: 	movq	-0x20(%rax), %r12
    00001026: 	callq	clock@PLT # Offset: 4134
    0000102b: 	pxor	%xmm0, %xmm0
    0000102f: 	movq	%rax, end_time(%rip)
    00001036: 	movq	%r12, %rdi
    00001039: 	subq	start_time(%rip), %rax
    00001040: 	cvtsi2sd	%rax, %xmm0
    00001045: 	divsd	DATAat0x14308(%rip), %xmm0
    0000104d: 	callq	_Z13record_resultdPKc # Offset: 4173
    00001052: 	movq	0xc0(%rsp), %rdi
    0000105a: 	cmpq	0x68(%rsp), %rdi
    0000105f: 	je	.Ltmp1369 # Offset: 4191
    00001061: 	movq	0xd0(%rsp), %rax
    00001069: 	leaq	0x1(%rax), %rsi
    0000106d: 	callq	_ZdlPvm@PLT # Offset: 4205
.Ltmp1369:
    00001072: 	movq	0x60(%rsp), %rsi
    00001077: 	movq	0x70(%rsp), %rdi
    0000107c: 	leaq	DATAat0x14282(%rip), %rdx
    00001083: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4227
    00001088: 	callq	clock@PLT # Offset: 4232
    0000108d: 	movl	iterations(%rip), %ecx
    00001093: 	xorl	%r15d, %r15d
    00001096: 	movq	%rax, start_time(%rip)
    0000109d: 	testl	%ecx, %ecx
    0000109f: 	jle	.Ltmp1370 # Offset: 4255
    000010a5: 	nopl	(%rax) # Size: 3
.Ltmp1378:
    000010a8: 	movq	0x40(%rsp), %rdx
    000010ad: 	xorl	%r12d, %r12d
.Ltmp1371:
    000010b0: 	movslq	(%rdx), %rax
    000010b3: 	addq	$0x4, %rdx
    000010b7: 	movq	%rax, %rcx
    000010ba: 	imulq	$-0x49f49f49, %rax, %rax
    000010c1: 	movl	%ecx, %esi
    000010c3: 	shrl	$0x1f, %esi
    000010c6: 	sarq	$0x20, %rax
    000010ca: 	addl	%ecx, %eax
    000010cc: 	sarl	$0x8, %eax
    000010cf: 	addl	%esi, %eax
    000010d1: 	imull	$0xfffffe98, %eax, %eax
    000010d7: 	addl	%ecx, %eax
    000010d9: 	addl	%eax, %r12d
    000010dc: 	cmpq	%rbx, %rdx
    000010df: 	jne	.Ltmp1371 # Offset: 4319
    000010e1: 	movq	0x18(%rsp), %rax
    000010e6: 	movq	0xc0(%rsp), %r14
    000010ee: 	movq	0xc8(%rsp), %r13
    000010f6: 	movq	%rax, 0xe0(%rsp)
    000010fe: 	movq	%r14, %rax
    00001101: 	addq	%r13, %rax
    00001104: 	je	.Ltmp1372 # Offset: 4356
    00001106: 	testq	%r14, %r14
    00001109: 	je	.Ltmp1373 # Offset: 4361
.Ltmp1372:
    0000110f: 	movq	%r13, 0x98(%rsp)
    00001117: 	cmpq	$0xf, %r13
    0000111b: 	ja	.Ltmp1374 # Offset: 4379
    00001121: 	cmpq	$0x1, %r13
    00001125: 	jne	.Ltmp1375 # Offset: 4389
    0000112b: 	movzbl	(%r14), %eax
    0000112f: 	movb	%al, 0xf0(%rsp)
    00001136: 	movq	0x18(%rsp), %rax
.Ltmp1456:
    0000113b: 	movq	%r13, 0xe8(%rsp)
    00001143: 	movb	$0x0, (%rax,%r13)
    00001148: 	cvttsd2si	init_value(%rip), %edx
    00001150: 	movslq	%edx, %rax
    00001153: 	movl	%edx, %ecx
    00001155: 	imulq	$-0x49f49f49, %rax, %rax
    0000115c: 	shrl	$0x1f, %ecx
    0000115f: 	sarq	$0x20, %rax
    00001163: 	addl	%edx, %eax
    00001165: 	sarl	$0x8, %eax
    00001168: 	addl	%ecx, %eax
    0000116a: 	imull	$0xfffffe98, %eax, %eax
    00001170: 	addl	%edx, %eax
    00001172: 	imull	$0xfa0, %eax, %eax
    00001178: 	cmpl	%eax, %r12d
    0000117b: 	je	.Ltmp1376 # Offset: 4475
    0000117d: 	movq	0xe0(%rsp), %rdx
    00001185: 	leaq	DATAat0x141e1(%rip), %rsi
    0000118c: 	movl	$0x1, %edi
    00001191: 	xorl	%eax, %eax
    00001193: 	callq	__printf_chk@PLT # Offset: 4499
.Ltmp1376:
    00001198: 	movq	0xe0(%rsp), %rdi
    000011a0: 	cmpq	0x18(%rsp), %rdi
    000011a5: 	je	.Ltmp1377 # Offset: 4517
    000011ab: 	movq	0xf0(%rsp), %rax
    000011b3: 	addl	$0x1, %r15d
    000011b7: 	leaq	0x1(%rax), %rsi
    000011bb: 	callq	_ZdlPvm@PLT # Offset: 4539
    000011c0: 	cmpl	iterations(%rip), %r15d
    000011c7: 	jl	.Ltmp1378 # Offset: 4551
.Ltmp1370:
    000011cd: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000011d4: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    000011db: 	subq	$0x20, %rax
    000011df: 	cmpq	%rax, %r13
    000011e2: 	je	.Ltmp1379 # Offset: 4578
    000011e8: 	leaq	0x10(%r13), %rdi
    000011ec: 	movq	0xc8(%rsp), %r12
    000011f4: 	movq	%rdi, (%r13)
    000011f8: 	movq	0xc0(%rsp), %r14
    00001200: 	movq	%r14, %rax
    00001203: 	addq	%r12, %rax
    00001206: 	je	.Ltmp1380 # Offset: 4614
    00001208: 	testq	%r14, %r14
    0000120b: 	je	.Ltmp1381 # Offset: 4619
.Ltmp1380:
    00001211: 	movq	%r12, 0x98(%rsp)
    00001219: 	cmpq	$0xf, %r12
    0000121d: 	ja	.Ltmp1382 # Offset: 4637
    00001223: 	cmpq	$0x1, %r12
    00001227: 	jne	.Ltmp1383 # Offset: 4647
    0000122d: 	movzbl	(%r14), %eax
    00001231: 	movb	%al, 0x10(%r13)
.Ltmp1490:
    00001235: 	movq	%r12, 0x8(%r13)
    00001239: 	movb	$0x0, (%rdi,%r12)
    0000123e: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001245: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000124c: 	addq	$0x20, %rax
    00001250: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001257: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    0000125e: 	je	.Ltmp1384 # Offset: 4702
.Ltmp1468:
    00001264: 	movq	-0x20(%rax), %r12
    00001268: 	callq	clock@PLT # Offset: 4712
    0000126d: 	pxor	%xmm0, %xmm0
    00001271: 	movq	%rax, end_time(%rip)
    00001278: 	movq	%r12, %rdi
    0000127b: 	subq	start_time(%rip), %rax
    00001282: 	cvtsi2sd	%rax, %xmm0
    00001287: 	divsd	DATAat0x14308(%rip), %xmm0
    0000128f: 	callq	_Z13record_resultdPKc # Offset: 4751
    00001294: 	movq	0xc0(%rsp), %rdi
    0000129c: 	cmpq	0x68(%rsp), %rdi
    000012a1: 	je	.Ltmp1385 # Offset: 4769
    000012a3: 	movq	0xd0(%rsp), %rax
    000012ab: 	leaq	0x1(%rax), %rsi
    000012af: 	callq	_ZdlPvm@PLT # Offset: 4783
.Ltmp1385:
    000012b4: 	movq	0x60(%rsp), %rsi
    000012b9: 	movq	0x30(%rsp), %rdi
    000012be: 	leaq	DATAat0x1429e(%rip), %rdx
    000012c5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4805
    000012ca: 	callq	clock@PLT # Offset: 4810
    000012cf: 	movl	iterations(%rip), %edi
    000012d5: 	xorl	%r12d, %r12d
    000012d8: 	leaq	DATAat0x141e1(%rip), %r13
    000012df: 	movq	%rax, start_time(%rip)
    000012e6: 	testl	%edi, %edi
    000012e8: 	jle	.Ltmp1386 # Offset: 4840
    000012ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1389:
    000012f0: 	movq	0x40(%rsp), %rcx
    000012f5: 	xorl	%esi, %esi
    000012f7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1387:
    00001300: 	movl	(%rcx), %eax
    00001302: 	addq	$0x4, %rcx
    00001306: 	cltd
    00001307: 	idivl	%ebp
    00001309: 	addl	%edx, %eax
    0000130b: 	addl	%eax, %esi
    0000130d: 	cmpq	%rbx, %rcx
    00001310: 	jne	.Ltmp1387 # Offset: 4880
    00001312: 	cvttsd2si	init_value(%rip), %eax
    0000131a: 	cltd
    0000131b: 	idivl	%ebp
    0000131d: 	addl	%edx, %eax
    0000131f: 	imull	$0xfa0, %eax, %eax
    00001325: 	cmpl	%eax, %esi
    00001327: 	je	.Ltmp1388 # Offset: 4903
    00001329: 	movq	0xe0(%rsp), %rdx
    00001331: 	movq	%r13, %rsi
    00001334: 	movl	$0x1, %edi
    00001339: 	xorl	%eax, %eax
    0000133b: 	callq	__printf_chk@PLT # Offset: 4923
    00001340: 	movl	iterations(%rip), %edi
.Ltmp1388:
    00001346: 	addl	$0x1, %r12d
    0000134a: 	cmpl	%edi, %r12d
    0000134d: 	jl	.Ltmp1389 # Offset: 4941
.Ltmp1386:
    0000134f: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001356: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    0000135d: 	subq	$0x20, %rax
    00001361: 	cmpq	%rax, %rbp
    00001364: 	je	.Ltmp1390 # Offset: 4964
    0000136a: 	leaq	0x10(%rbp), %rdi
    0000136e: 	movq	0xe8(%rsp), %r12
    00001376: 	movq	%rdi, (%rbp)
    0000137a: 	movq	0xe0(%rsp), %r13
    00001382: 	movq	%r13, %rax
    00001385: 	addq	%r12, %rax
    00001388: 	je	.Ltmp1391 # Offset: 5000
    0000138a: 	testq	%r13, %r13
    0000138d: 	je	.Ltmp1392 # Offset: 5005
.Ltmp1391:
    00001393: 	movq	%r12, 0x98(%rsp)
    0000139b: 	cmpq	$0xf, %r12
    0000139f: 	ja	.Ltmp1393 # Offset: 5023
    000013a5: 	cmpq	$0x1, %r12
    000013a9: 	jne	.Ltmp1394 # Offset: 5033
    000013af: 	movzbl	(%r13), %eax
    000013b4: 	movb	%al, 0x10(%rbp)
.Ltmp1486:
    000013b7: 	movq	%r12, 0x8(%rbp)
    000013bb: 	movb	$0x0, (%rdi,%r12)
    000013c0: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000013c7: 	addq	$0x20, %rax
    000013cb: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1475:
    000013d2: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000013d9: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000013e0: 	je	.Ltmp1395 # Offset: 5088
.Ltmp1467:
    000013e6: 	movq	-0x20(%rax), %rbp
    000013ea: 	callq	clock@PLT # Offset: 5098
    000013ef: 	pxor	%xmm0, %xmm0
    000013f3: 	movq	%rax, end_time(%rip)
    000013fa: 	movq	%rbp, %rdi
    000013fd: 	subq	start_time(%rip), %rax
    00001404: 	cvtsi2sd	%rax, %xmm0
    00001409: 	divsd	DATAat0x14308(%rip), %xmm0
    00001411: 	callq	_Z13record_resultdPKc # Offset: 5137
    00001416: 	movq	0xe0(%rsp), %rdi
    0000141e: 	cmpq	0x18(%rsp), %rdi
    00001423: 	je	.Ltmp1396 # Offset: 5155
    00001425: 	movq	0xf0(%rsp), %rax
    0000142d: 	leaq	0x1(%rax), %rsi
    00001431: 	callq	_ZdlPvm@PLT # Offset: 5169
.Ltmp1396:
    00001436: 	movq	0x60(%rsp), %rsi
    0000143b: 	movq	0x70(%rsp), %rdi
    00001440: 	leaq	DATAat0x142d0(%rip), %rdx
    00001447: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5191
    0000144c: 	callq	clock@PLT # Offset: 5196
    00001451: 	movl	iterations(%rip), %edx
    00001457: 	xorl	%r14d, %r14d
    0000145a: 	leaq	DATAat0x141e1(%rip), %r15
    00001461: 	movq	%rax, start_time(%rip)
    00001468: 	testl	%edx, %edx
    0000146a: 	jle	.Ltmp1397 # Offset: 5226
.Ltmp1405:
    00001470: 	movq	0x40(%rsp), %rcx
    00001475: 	xorl	%ebp, %ebp
    00001477: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1398:
    00001480: 	movslq	(%rcx), %rax
    00001483: 	addq	$0x4, %rcx
    00001487: 	movq	%rax, %rdx
    0000148a: 	imulq	$-0x49f49f49, %rax, %rax
    00001491: 	movl	%edx, %esi
    00001493: 	shrl	$0x1f, %esi
    00001496: 	sarq	$0x20, %rax
    0000149a: 	addl	%edx, %eax
    0000149c: 	sarl	$0x8, %eax
    0000149f: 	addl	%esi, %eax
    000014a1: 	imull	$0xfffffe99, %eax, %eax
    000014a7: 	addl	%edx, %eax
    000014a9: 	addl	%eax, %ebp
    000014ab: 	cmpq	%rbx, %rcx
    000014ae: 	jne	.Ltmp1398 # Offset: 5294
    000014b0: 	movq	0x18(%rsp), %rax
    000014b5: 	movq	0xc0(%rsp), %r13
    000014bd: 	movq	0xc8(%rsp), %r12
    000014c5: 	movq	%rax, 0xe0(%rsp)
    000014cd: 	movq	%r13, %rax
    000014d0: 	addq	%r12, %rax
    000014d3: 	je	.Ltmp1399 # Offset: 5331
    000014d5: 	testq	%r13, %r13
    000014d8: 	je	.Ltmp1400 # Offset: 5336
.Ltmp1399:
    000014de: 	movq	%r12, 0x98(%rsp)
    000014e6: 	cmpq	$0xf, %r12
    000014ea: 	ja	.Ltmp1401 # Offset: 5354
    000014f0: 	cmpq	$0x1, %r12
    000014f4: 	jne	.Ltmp1402 # Offset: 5364
    000014fa: 	movzbl	(%r13), %eax
    000014ff: 	movb	%al, 0xf0(%rsp)
    00001506: 	movq	0x18(%rsp), %rax
.Ltmp1458:
    0000150b: 	movq	%r12, 0xe8(%rsp)
    00001513: 	movb	$0x0, (%rax,%r12)
    00001518: 	cvttsd2si	init_value(%rip), %edx
    00001520: 	movslq	%edx, %rax
    00001523: 	movl	%edx, %ecx
    00001525: 	imulq	$-0x49f49f49, %rax, %rax
    0000152c: 	shrl	$0x1f, %ecx
    0000152f: 	sarq	$0x20, %rax
    00001533: 	addl	%edx, %eax
    00001535: 	sarl	$0x8, %eax
    00001538: 	addl	%ecx, %eax
    0000153a: 	imull	$0xfffffe99, %eax, %eax
    00001540: 	addl	%edx, %eax
    00001542: 	imull	$0xfa0, %eax, %eax
    00001548: 	cmpl	%eax, %ebp
    0000154a: 	je	.Ltmp1403 # Offset: 5450
    0000154c: 	movq	0xe0(%rsp), %rdx
    00001554: 	movq	%r15, %rsi
    00001557: 	movl	$0x1, %edi
    0000155c: 	xorl	%eax, %eax
    0000155e: 	callq	__printf_chk@PLT # Offset: 5470
.Ltmp1403:
    00001563: 	movq	0xe0(%rsp), %rdi
    0000156b: 	cmpq	0x18(%rsp), %rdi
    00001570: 	je	.Ltmp1404 # Offset: 5488
    00001576: 	movq	0xf0(%rsp), %rax
    0000157e: 	addl	$0x1, %r14d
    00001582: 	leaq	0x1(%rax), %rsi
    00001586: 	callq	_ZdlPvm@PLT # Offset: 5510
    0000158b: 	cmpl	iterations(%rip), %r14d
    00001592: 	jl	.Ltmp1405 # Offset: 5522
.Ltmp1397:
    00001598: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000159f: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    000015a6: 	subq	$0x20, %rax
    000015aa: 	cmpq	%rax, %rbp
    000015ad: 	je	.Ltmp1406 # Offset: 5549
    000015b3: 	leaq	0x10(%rbp), %rdi
    000015b7: 	movq	0xc8(%rsp), %r12
    000015bf: 	movq	%rdi, (%rbp)
    000015c3: 	movq	0xc0(%rsp), %r13
    000015cb: 	movq	%r13, %rax
    000015ce: 	addq	%r12, %rax
    000015d1: 	je	.Ltmp1407 # Offset: 5585
    000015d3: 	testq	%r13, %r13
    000015d6: 	je	.Ltmp1408 # Offset: 5590
.Ltmp1407:
    000015dc: 	movq	%r12, 0x98(%rsp)
    000015e4: 	cmpq	$0xf, %r12
    000015e8: 	ja	.Ltmp1409 # Offset: 5608
    000015ee: 	cmpq	$0x1, %r12
    000015f2: 	jne	.Ltmp1410 # Offset: 5618
    000015f8: 	movzbl	(%r13), %eax
    000015fd: 	movb	%al, 0x10(%rbp)
.Ltmp1484:
    00001600: 	movq	%r12, 0x8(%rbp)
    00001604: 	movb	$0x0, (%rdi,%r12)
    00001609: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001610: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001617: 	addq	$0x20, %rax
    0000161b: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001622: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00001629: 	je	.Ltmp1411 # Offset: 5673
.Ltmp1478:
    0000162f: 	movq	-0x20(%rax), %rbp
    00001633: 	callq	clock@PLT # Offset: 5683
    00001638: 	pxor	%xmm0, %xmm0
    0000163c: 	movq	%rax, end_time(%rip)
    00001643: 	movq	%rbp, %rdi
    00001646: 	subq	start_time(%rip), %rax
    0000164d: 	cvtsi2sd	%rax, %xmm0
    00001652: 	divsd	DATAat0x14308(%rip), %xmm0
    0000165a: 	callq	_Z13record_resultdPKc # Offset: 5722
    0000165f: 	movq	0xc0(%rsp), %rdi
    00001667: 	cmpq	0x68(%rsp), %rdi
    0000166c: 	je	.Ltmp1412 # Offset: 5740
    0000166e: 	movq	0xd0(%rsp), %rax
    00001676: 	leaq	0x1(%rax), %rsi
    0000167a: 	callq	_ZdlPvm@PLT # Offset: 5754
.Ltmp1412:
    0000167f: 	movq	0x60(%rsp), %rsi
    00001684: 	movq	0x70(%rsp), %rdi
    00001689: 	leaq	DATAat0x142b5(%rip), %rdx
    00001690: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5776
    00001695: 	callq	clock@PLT # Offset: 5781
    0000169a: 	movq	%rax, start_time(%rip)
    000016a1: 	movl	iterations(%rip), %eax
    000016a7: 	testl	%eax, %eax
    000016a9: 	jle	.Ltmp1413 # Offset: 5801
    000016af: 	movdqa	DATAat0x143c0(%rip), %xmm4
    000016b7: 	pxor	%xmm6, %xmm6
    000016bb: 	xorl	%r14d, %r14d
    000016be: 	leaq	0x98(%rsp), %rax
    000016c6: 	movq	%rax, 0x48(%rsp)
    000016cb: 	leaq	DATAat0x141e1(%rip), %r15
    000016d2: 	pcmpgtd	%xmm4, %xmm6
    000016d6: 	movaps	%xmm4, (%rsp)
    000016da: 	movaps	%xmm6, 0x20(%rsp)
    000016df: 	nop # Size: 1
.Ltmp1421:
    000016e0: 	movq	0x40(%rsp), %rax
    000016e5: 	pxor	%xmm4, %xmm4
    000016e9: 	nopl	(%rax) # Size: 7
.Ltmp1414:
    000016f0: 	movdqa	(%rax), %xmm2
    000016f4: 	pxor	%xmm3, %xmm3
    000016f8: 	movdqa	0x20(%rsp), %xmm6
    000016fe: 	addq	$0x10, %rax
    00001702: 	movdqa	(%rsp), %xmm7
    00001707: 	movdqa	%xmm2, %xmm1
    0000170b: 	movdqa	%xmm6, %xmm5
    0000170f: 	punpckldq	%xmm2, %xmm1
    00001713: 	pcmpgtd	%xmm1, %xmm3
    00001717: 	pmuludq	%xmm1, %xmm5
    0000171b: 	movdqa	%xmm1, %xmm0
    0000171f: 	pmuludq	%xmm7, %xmm0
    00001723: 	movdqa	%xmm2, %xmm1
    00001727: 	punpckhdq	%xmm2, %xmm1
    0000172b: 	pmuludq	%xmm7, %xmm3
    0000172f: 	paddq	%xmm5, %xmm3
    00001733: 	movdqa	%xmm6, %xmm5
    00001737: 	psllq	$0x20, %xmm3
    0000173c: 	pmuludq	%xmm1, %xmm5
    00001740: 	paddq	%xmm3, %xmm0
    00001744: 	pxor	%xmm3, %xmm3
    00001748: 	pcmpgtd	%xmm1, %xmm3
    0000174c: 	pmuludq	%xmm7, %xmm1
    00001750: 	pmuludq	%xmm7, %xmm3
    00001754: 	paddq	%xmm5, %xmm3
    00001758: 	psllq	$0x20, %xmm3
    0000175d: 	paddq	%xmm3, %xmm1
    00001761: 	shufps	$0xdd, %xmm1, %xmm0
    00001765: 	movdqa	%xmm2, %xmm1
    00001769: 	paddd	%xmm2, %xmm0
    0000176d: 	psrad	$0x1f, %xmm1
    00001772: 	psrad	$0x8, %xmm0
    00001777: 	psubd	%xmm1, %xmm0
    0000177b: 	movdqa	%xmm0, %xmm3
    0000177f: 	pslld	$0x1, %xmm3
    00001784: 	paddd	%xmm0, %xmm3
    00001788: 	movdqa	%xmm3, %xmm1
    0000178c: 	pslld	$0x4, %xmm1
    00001791: 	psubd	%xmm3, %xmm1
    00001795: 	pslld	$0x3, %xmm1
    0000179a: 	psubd	%xmm1, %xmm2
    0000179e: 	paddd	%xmm0, %xmm2
    000017a2: 	paddd	%xmm2, %xmm4
    000017a6: 	cmpq	%rbx, %rax
    000017a9: 	jne	.Ltmp1414 # Offset: 6057
    000017af: 	movdqa	%xmm4, %xmm0
    000017b3: 	movq	0x18(%rsp), %rax
    000017b8: 	movq	0xc0(%rsp), %r13
    000017c0: 	psrldq	$0x8, %xmm0
    000017c5: 	movq	0xc8(%rsp), %r12
    000017cd: 	paddd	%xmm0, %xmm4
    000017d1: 	movq	%rax, 0xe0(%rsp)
    000017d9: 	movq	%r13, %rax
    000017dc: 	movdqa	%xmm4, %xmm0
    000017e0: 	addq	%r12, %rax
    000017e3: 	psrldq	$0x4, %xmm0
    000017e8: 	paddd	%xmm0, %xmm4
    000017ec: 	movd	%xmm4, %ebp
    000017f0: 	je	.Ltmp1415 # Offset: 6128
    000017f2: 	testq	%r13, %r13
    000017f5: 	je	.Ltmp1416 # Offset: 6133
.Ltmp1415:
    000017fb: 	movq	%r12, 0x98(%rsp)
    00001803: 	cmpq	$0xf, %r12
    00001807: 	ja	.Ltmp1417 # Offset: 6151
    0000180d: 	cmpq	$0x1, %r12
    00001811: 	jne	.Ltmp1418 # Offset: 6161
    00001817: 	movzbl	(%r13), %eax
    0000181c: 	movb	%al, 0xf0(%rsp)
    00001823: 	movq	0x18(%rsp), %rax
.Ltmp1460:
    00001828: 	movq	%r12, 0xe8(%rsp)
    00001830: 	movb	$0x0, (%rax,%r12)
    00001835: 	cvttsd2si	init_value(%rip), %edx
    0000183d: 	movslq	%edx, %rax
    00001840: 	movl	%edx, %ecx
    00001842: 	imulq	$-0x49f49f49, %rax, %rax
    00001849: 	sarl	$0x1f, %ecx
    0000184c: 	shrq	$0x20, %rax
    00001850: 	addl	%edx, %eax
    00001852: 	sarl	$0x8, %eax
    00001855: 	subl	%ecx, %eax
    00001857: 	imull	$0xfffffe99, %eax, %eax
    0000185d: 	addl	%edx, %eax
    0000185f: 	imull	$0xfa0, %eax, %eax
    00001865: 	cmpl	%ebp, %eax
    00001867: 	je	.Ltmp1419 # Offset: 6247
    00001869: 	movq	0xe0(%rsp), %rdx
    00001871: 	movq	%r15, %rsi
    00001874: 	movl	$0x1, %edi
    00001879: 	xorl	%eax, %eax
    0000187b: 	callq	__printf_chk@PLT # Offset: 6267
.Ltmp1419:
    00001880: 	movq	0xe0(%rsp), %rdi
    00001888: 	cmpq	0x18(%rsp), %rdi
    0000188d: 	je	.Ltmp1420 # Offset: 6285
    00001893: 	movq	0xf0(%rsp), %rax
    0000189b: 	addl	$0x1, %r14d
    0000189f: 	leaq	0x1(%rax), %rsi
    000018a3: 	callq	_ZdlPvm@PLT # Offset: 6307
    000018a8: 	cmpl	iterations(%rip), %r14d
    000018af: 	jl	.Ltmp1421 # Offset: 6319
.Ltmp1413:
    000018b5: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000018bc: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    000018c3: 	subq	$0x20, %rax
    000018c7: 	cmpq	%rax, %rbx
    000018ca: 	je	.Ltmp1422 # Offset: 6346
    000018d0: 	leaq	0x10(%rbx), %rdi
    000018d4: 	movq	0xc8(%rsp), %r12
    000018dc: 	movq	%rdi, (%rbx)
    000018df: 	movq	0xc0(%rsp), %rbp
    000018e7: 	movq	%rbp, %rax
    000018ea: 	addq	%r12, %rax
    000018ed: 	je	.Ltmp1423 # Offset: 6381
    000018ef: 	testq	%rbp, %rbp
    000018f2: 	je	.Ltmp1424 # Offset: 6386
.Ltmp1423:
    000018f8: 	movq	%r12, 0x98(%rsp)
    00001900: 	cmpq	$0xf, %r12
    00001904: 	ja	.Ltmp1425 # Offset: 6404
    0000190a: 	cmpq	$0x1, %r12
    0000190e: 	jne	.Ltmp1426 # Offset: 6414
    00001914: 	movzbl	(%rbp), %eax
    00001918: 	movb	%al, 0x10(%rbx)
.Ltmp1482:
    0000191b: 	movq	%r12, 0x8(%rbx)
    0000191f: 	movb	$0x0, (%rdi,%r12)
    00001924: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000192b: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001932: 	addq	$0x20, %rax
    00001936: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000193d: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00001944: 	je	.Ltmp1427 # Offset: 6468
.Ltmp1481:
    0000194a: 	movq	-0x20(%rax), %rbp
    0000194e: 	callq	clock@PLT # Offset: 6478
    00001953: 	pxor	%xmm0, %xmm0
    00001957: 	movq	%rax, end_time(%rip)
    0000195e: 	movq	%rbp, %rdi
    00001961: 	subq	start_time(%rip), %rax
    00001968: 	cvtsi2sd	%rax, %xmm0
    0000196d: 	divsd	DATAat0x14308(%rip), %xmm0
    00001975: 	callq	_Z13record_resultdPKc # Offset: 6517
    0000197a: 	movq	0xc0(%rsp), %rdi
    00001982: 	cmpq	0x68(%rsp), %rdi
    00001987: 	je	.Ltmp1428 # Offset: 6535
    00001989: 	movq	0xd0(%rsp), %rax
    00001991: 	leaq	0x1(%rax), %rsi
    00001995: 	callq	_ZdlPvm@PLT # Offset: 6549
.Ltmp1428:
    0000199a: 	movq	0x60(%rsp), %rsi
    0000199f: 	movq	0x30(%rsp), %rdi
    000019a4: 	leaq	DATAat0x14202(%rip), %rdx
    000019ab: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6571
    000019b0: 	movl	iterations(%rip), %edx
    000019b6: 	xorl	%r8d, %r8d
    000019b9: 	xorl	%ecx, %ecx
    000019bb: 	movl	$0xfa0, %esi
    000019c0: 	movq	0xe0(%rsp), %rdi
    000019c8: 	callq	_Z9summarizePKciiii # Offset: 6600
    000019cd: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm4
    000019d5: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000019dc: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    000019e3: 	movaps	%xmm4, 0x50(%rsp)
    000019e8: 	movq	%xmm4, %rbp
    000019ed: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm4
    000019f5: 	movq	%rax, (%rsp)
    000019f9: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    00001a00: 	movhlps	%xmm4, %xmm6
    00001a03: 	movaps	%xmm4, 0x30(%rsp)
    00001a08: 	movq	%xmm6, %rdi
    00001a0d: 	movq	%rax, 0x20(%rsp)
    00001a12: 	leaq	0x8(%rdi), %r12
    00001a16: 	movq	%xmm6, 0x48(%rsp)
    00001a1c: 	movq	%xmm4, 0x40(%rsp)
    00001a22: 	movq	%r12, %r13
    00001a25: 	cmpq	%r12, %rax
    00001a28: 	jbe	.Ltmp1429 # Offset: 6696
    00001a2a: 	movq	%rbp, 0x60(%rsp)
    00001a2f: 	movq	%rax, %r15
    00001a32: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1432:
    00001a38: 	movq	(%r13), %rbp
    00001a3c: 	leaq	0x200(%rbp), %rbx
    00001a43: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1431:
    00001a48: 	movq	(%rbp), %rdi
    00001a4c: 	leaq	0x10(%rbp), %rdx
    00001a50: 	cmpq	%rdx, %rdi
    00001a53: 	je	.Ltmp1430 # Offset: 6739
    00001a59: 	movq	0x10(%rbp), %rax
    00001a5d: 	addq	$0x20, %rbp
    00001a61: 	leaq	0x1(%rax), %rsi
    00001a65: 	callq	_ZdlPvm@PLT # Offset: 6757
    00001a6a: 	cmpq	%rbp, %rbx
    00001a6d: 	jne	.Ltmp1431 # Offset: 6765
    00001a6f: 	addq	$0x8, %r13
    00001a73: 	cmpq	%r13, %r15
    00001a76: 	ja	.Ltmp1432 # Offset: 6774
.Ltmp1448:
    00001a78: 	movq	0x60(%rsp), %rbp
.Ltmp1429:
    00001a7d: 	movq	0x20(%rsp), %rdi
    00001a82: 	cmpq	%rdi, 0x48(%rsp)
    00001a87: 	jne	.Ltmp1433 # Offset: 6791
    00001a89: 	jmp	.Ltmp1434 # Offset: 6793
    00001a8e: 	nop # Size: 2
.Ltmp1436:
    00001a90: 	movq	(%rbp), %rdi
    00001a94: 	leaq	0x10(%rbp), %rax
    00001a98: 	cmpq	%rax, %rdi
    00001a9b: 	je	.Ltmp1435 # Offset: 6811
    00001a9d: 	movq	0x10(%rbp), %rax
    00001aa1: 	leaq	0x1(%rax), %rsi
    00001aa5: 	callq	_ZdlPvm@PLT # Offset: 6821
.Ltmp1435:
    00001aaa: 	addq	$0x20, %rbp
.Ltmp1433:
    00001aae: 	cmpq	%rbp, 0x40(%rsp)
    00001ab3: 	jne	.Ltmp1436 # Offset: 6835
    00001ab5: 	cmpq	%r14, (%rsp)
    00001ab9: 	je	.Ltmp1437 # Offset: 6841
    00001abb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1439:
    00001ac0: 	movq	(%r14), %rdi
    00001ac3: 	leaq	0x10(%r14), %rax
    00001ac7: 	cmpq	%rax, %rdi
    00001aca: 	je	.Ltmp1438 # Offset: 6858
    00001acc: 	movq	0x10(%r14), %rax
    00001ad0: 	leaq	0x1(%rax), %rsi
    00001ad4: 	callq	_ZdlPvm@PLT # Offset: 6868
.Ltmp1438:
    00001ad9: 	addq	$0x20, %r14
    00001add: 	cmpq	%r14, (%rsp)
    00001ae1: 	jne	.Ltmp1439 # Offset: 6881
.Ltmp1437:
    00001ae3: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    00001aea: 	leaq	0x8(%rax), %rbx
    00001aee: 	cmpq	%r12, %rbx
    00001af1: 	jbe	.Ltmp1440 # Offset: 6897
    00001af3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1441:
    00001af8: 	movq	(%r12), %rdi
    00001afc: 	movl	$0x200, %esi
    00001b01: 	addq	$0x8, %r12
    00001b05: 	callq	_ZdlPvm@PLT # Offset: 6917
    00001b0a: 	cmpq	%r12, %rbx
    00001b0d: 	ja	.Ltmp1441 # Offset: 6925
.Ltmp1440:
    00001b0f: 	movdqa	0x50(%rsp), %xmm4
    00001b15: 	movq	0xe0(%rsp), %rdi
    00001b1d: 	movaps	%xmm4, "_ZL7gLabels/1"+48(%rip)
    00001b24: 	movdqa	0x30(%rsp), %xmm4
    00001b2a: 	movaps	%xmm4, "_ZL7gLabels/1"+64(%rip)
    00001b31: 	cmpq	0x18(%rsp), %rdi
    00001b36: 	je	.Ltmp1442 # Offset: 6966
    00001b38: 	movq	0xf0(%rsp), %rax
    00001b40: 	leaq	0x1(%rax), %rsi
    00001b44: 	callq	_ZdlPvm@PLT # Offset: 6980
.Ltmp1442:
    00001b49: 	movq	0xa0(%rsp), %rdi
    00001b51: 	cmpq	0x80(%rsp), %rdi
    00001b59: 	je	.Ltmp1443 # Offset: 7001
    00001b5b: 	movq	0xb0(%rsp), %rax
    00001b63: 	leaq	0x1(%rax), %rsi
    00001b67: 	callq	_ZdlPvm@PLT # Offset: 7015
.Ltmp1443:
    00001b6c: 	movq	0x3f88(%rsp), %rax
    00001b74: 	subq	%fs:0x28, %rax
    00001b7d: 	jne	.Ltmp1444 # Offset: 7037
    00001b83: 	addq	$0x3f98, %rsp
    00001b8a: 	popq	%rbx
    00001b8b: 	popq	%rbp
    00001b8c: 	popq	%r12
    00001b8e: 	popq	%r13
    00001b90: 	popq	%r14
    00001b92: 	popq	%r15
    00001b94: 	retq # Offset: 7060
    00001b95: 	nopl	(%rax) # Size: 3
.Ltmp1445:
    00001b98: 	addq	$0x20, %rbp
.Ltmp1434:
    00001b9c: 	cmpq	%rbp, (%rsp)
    00001ba0: 	je	.Ltmp1437 # Offset: 7072
.Ltmp1446:
    00001ba6: 	movq	(%rbp), %rdi
    00001baa: 	leaq	0x10(%rbp), %rax
    00001bae: 	cmpq	%rax, %rdi
    00001bb1: 	je	.Ltmp1445 # Offset: 7089
    00001bb3: 	movq	0x10(%rbp), %rax
    00001bb7: 	addq	$0x20, %rbp
    00001bbb: 	leaq	0x1(%rax), %rsi
    00001bbf: 	callq	_ZdlPvm@PLT # Offset: 7103
    00001bc4: 	cmpq	%rbp, (%rsp)
    00001bc8: 	jne	.Ltmp1446 # Offset: 7112
    00001bca: 	jmp	.Ltmp1437 # Offset: 7114
.Ltmp1285:
    00001bcf: 	leaq	0x98(%rsp), %rsi
    00001bd7: 	xorl	%edx, %edx
    00001bd9: 	movq	%r13, %rdi
    00001bdc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7132
    00001be1: 	movq	%rax, (%r13)
    00001be5: 	movq	%rax, %rdi
    00001be8: 	movq	0x98(%rsp), %rax
    00001bf0: 	movq	%rax, 0x10(%r13)
.Ltmp1491:
    00001bf4: 	movq	%r12, %rdx
    00001bf7: 	movq	%r14, %rsi
    00001bfa: 	callq	memcpy@PLT # Offset: 7162
    00001bff: 	movq	0x98(%rsp), %r12
    00001c07: 	movq	(%r13), %rdi
    00001c0b: 	jmp	.Ltmp1447 # Offset: 7179
.Ltmp1430:
    00001c10: 	addq	$0x20, %rbp
    00001c14: 	cmpq	%rbp, %rbx
    00001c17: 	jne	.Ltmp1431 # Offset: 7191
    00001c1d: 	addq	$0x8, %r13
    00001c21: 	cmpq	%r13, %r15
    00001c24: 	ja	.Ltmp1432 # Offset: 7204
    00001c2a: 	jmp	.Ltmp1448 # Offset: 7210
    00001c2f: 	nop # Size: 1
.Ltmp1311:
    00001c30: 	addl	$0x1, %r13d
    00001c34: 	cmpl	iterations(%rip), %r13d
    00001c3b: 	jl	.Ltmp1312 # Offset: 7227
    00001c41: 	jmp	.Ltmp1304 # Offset: 7233
    00001c46: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1332:
    00001c50: 	addl	$0x1, (%rsp)
    00001c54: 	movl	(%rsp), %eax
    00001c57: 	cmpl	iterations(%rip), %eax
    00001c5d: 	jl	.Ltmp1333 # Offset: 7261
    00001c63: 	jmp	.Ltmp1325 # Offset: 7267
    00001c68: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1365:
    00001c70: 	addl	$0x1, %r15d
    00001c74: 	cmpl	iterations(%rip), %r15d
    00001c7b: 	jl	.Ltmp1366 # Offset: 7291
    00001c81: 	jmp	.Ltmp1358 # Offset: 7297
    00001c86: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1404:
    00001c90: 	addl	$0x1, %r14d
    00001c94: 	cmpl	iterations(%rip), %r14d
    00001c9b: 	jl	.Ltmp1405 # Offset: 7323
    00001ca1: 	jmp	.Ltmp1397 # Offset: 7329
    00001ca6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1377:
    00001cb0: 	addl	$0x1, %r15d
    00001cb4: 	cmpl	iterations(%rip), %r15d
    00001cbb: 	jl	.Ltmp1378 # Offset: 7355
    00001cc1: 	jmp	.Ltmp1370 # Offset: 7361
    00001cc6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1420:
    00001cd0: 	addl	$0x1, %r14d
    00001cd4: 	cmpl	iterations(%rip), %r14d
    00001cdb: 	jl	.Ltmp1421 # Offset: 7387
    00001ce1: 	jmp	.Ltmp1413 # Offset: 7393
    00001ce6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1309:
    00001cf0: 	testq	%r14, %r14
    00001cf3: 	jne	.Ltmp1449 # Offset: 7411
    00001cf9: 	movq	0x18(%rsp), %rax
    00001cfe: 	jmp	.Ltmp1450 # Offset: 7422
    00001d03: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1330:
    00001d08: 	testq	%r14, %r14
    00001d0b: 	jne	.Ltmp1451 # Offset: 7435
    00001d11: 	movq	0x18(%rsp), %rax
    00001d16: 	jmp	.Ltmp1452 # Offset: 7446
    00001d1b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1363:
    00001d20: 	testq	%r13, %r13
    00001d23: 	jne	.Ltmp1453 # Offset: 7459
    00001d29: 	movq	0x18(%rsp), %rax
    00001d2e: 	jmp	.Ltmp1454 # Offset: 7470
    00001d33: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1375:
    00001d38: 	testq	%r13, %r13
    00001d3b: 	jne	.Ltmp1455 # Offset: 7483
    00001d41: 	movq	0x18(%rsp), %rax
    00001d46: 	jmp	.Ltmp1456 # Offset: 7494
    00001d4b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1402:
    00001d50: 	testq	%r12, %r12
    00001d53: 	jne	.Ltmp1457 # Offset: 7507
    00001d59: 	movq	0x18(%rsp), %rax
    00001d5e: 	jmp	.Ltmp1458 # Offset: 7518
    00001d63: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1418:
    00001d68: 	testq	%r12, %r12
    00001d6b: 	jne	.Ltmp1459 # Offset: 7531
    00001d71: 	movq	0x18(%rsp), %rax
    00001d76: 	jmp	.Ltmp1460 # Offset: 7542
    00001d7b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1308:
    00001d80: 	movq	0x78(%rsp), %rsi
    00001d85: 	movq	0x30(%rsp), %rdi
    00001d8a: 	xorl	%edx, %edx
    00001d8c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7564
    00001d91: 	movq	%rax, 0xe0(%rsp)
    00001d99: 	movq	%rax, %rdi
    00001d9c: 	movq	0x98(%rsp), %rax
    00001da4: 	movq	%rax, 0xf0(%rsp)
.Ltmp1496:
    00001dac: 	movq	%r14, %rdx
    00001daf: 	movq	%r15, %rsi
    00001db2: 	callq	memcpy@PLT # Offset: 7602
    00001db7: 	movq	0x98(%rsp), %r14
    00001dbf: 	movq	0xe0(%rsp), %rax
    00001dc7: 	jmp	.Ltmp1450 # Offset: 7623
    00001dcc: 	nopl	(%rax) # Size: 4
.Ltmp1329:
    00001dd0: 	movq	0x30(%rsp), %rdi
    00001dd5: 	leaq	0x98(%rsp), %rsi
    00001ddd: 	xorl	%edx, %edx
    00001ddf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7647
    00001de4: 	movq	%rax, 0xe0(%rsp)
    00001dec: 	movq	%rax, %rdi
    00001def: 	movq	0x98(%rsp), %rax
    00001df7: 	movq	%rax, 0xf0(%rsp)
.Ltmp1497:
    00001dff: 	movq	%r14, %rdx
    00001e02: 	movq	%r15, %rsi
    00001e05: 	callq	memcpy@PLT # Offset: 7685
    00001e0a: 	movq	0x98(%rsp), %r14
    00001e12: 	movq	0xe0(%rsp), %rax
    00001e1a: 	jmp	.Ltmp1452 # Offset: 7706
    00001e1f: 	nop # Size: 1
.Ltmp1374:
    00001e20: 	movq	0x30(%rsp), %rdi
    00001e25: 	leaq	0x98(%rsp), %rsi
    00001e2d: 	xorl	%edx, %edx
    00001e2f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7727
    00001e34: 	movq	%rax, 0xe0(%rsp)
    00001e3c: 	movq	%rax, %rdi
    00001e3f: 	movq	0x98(%rsp), %rax
    00001e47: 	movq	%rax, 0xf0(%rsp)
.Ltmp1499:
    00001e4f: 	movq	%r13, %rdx
    00001e52: 	movq	%r14, %rsi
    00001e55: 	callq	memcpy@PLT # Offset: 7765
    00001e5a: 	movq	0x98(%rsp), %r13
    00001e62: 	movq	0xe0(%rsp), %rax
    00001e6a: 	jmp	.Ltmp1456 # Offset: 7786
    00001e6f: 	nop # Size: 1
.Ltmp1401:
    00001e70: 	movq	0x30(%rsp), %rdi
    00001e75: 	leaq	0x98(%rsp), %rsi
    00001e7d: 	xorl	%edx, %edx
    00001e7f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7807
    00001e84: 	movq	%rax, 0xe0(%rsp)
    00001e8c: 	movq	%rax, %rdi
    00001e8f: 	movq	0x98(%rsp), %rax
    00001e97: 	movq	%rax, 0xf0(%rsp)
.Ltmp1500:
    00001e9f: 	movq	%r12, %rdx
    00001ea2: 	movq	%r13, %rsi
    00001ea5: 	callq	memcpy@PLT # Offset: 7845
    00001eaa: 	movq	0x98(%rsp), %r12
    00001eb2: 	movq	0xe0(%rsp), %rax
    00001eba: 	jmp	.Ltmp1458 # Offset: 7866
    00001ebf: 	nop # Size: 1
.Ltmp1362:
    00001ec0: 	movq	0x48(%rsp), %rsi
    00001ec5: 	movq	0x30(%rsp), %rdi
    00001eca: 	xorl	%edx, %edx
    00001ecc: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7884
    00001ed1: 	movq	%rax, 0xe0(%rsp)
    00001ed9: 	movq	%rax, %rdi
    00001edc: 	movq	0x98(%rsp), %rax
    00001ee4: 	movq	%rax, 0xf0(%rsp)
.Ltmp1498:
    00001eec: 	movq	%r13, %rdx
    00001eef: 	movq	%r14, %rsi
    00001ef2: 	callq	memcpy@PLT # Offset: 7922
    00001ef7: 	movq	0x98(%rsp), %r13
    00001eff: 	movq	0xe0(%rsp), %rax
    00001f07: 	jmp	.Ltmp1454 # Offset: 7943
    00001f0c: 	nopl	(%rax) # Size: 4
.Ltmp1417:
    00001f10: 	movq	0x48(%rsp), %rsi
    00001f15: 	movq	0x30(%rsp), %rdi
    00001f1a: 	xorl	%edx, %edx
    00001f1c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7964
    00001f21: 	movq	%rax, 0xe0(%rsp)
    00001f29: 	movq	%rax, %rdi
    00001f2c: 	movq	0x98(%rsp), %rax
    00001f34: 	movq	%rax, 0xf0(%rsp)
.Ltmp1501:
    00001f3c: 	movq	%r12, %rdx
    00001f3f: 	movq	%r13, %rsi
    00001f42: 	callq	memcpy@PLT # Offset: 8002
    00001f47: 	movq	0x98(%rsp), %r12
    00001f4f: 	movq	0xe0(%rsp), %rax
    00001f57: 	jmp	.Ltmp1460 # Offset: 8023
.Ltmp1323:
    00001f5c: 	testq	%r13, %r13
    00001f5f: 	jne	.Ltmp1461 # Offset: 8031
    00001f65: 	movq	0x68(%rsp), %rax
    00001f6a: 	jmp	.Ltmp1462 # Offset: 8042
.Ltmp1302:
    00001f6f: 	testq	%r13, %r13
    00001f72: 	jne	.Ltmp1463 # Offset: 8050
    00001f78: 	movq	0x68(%rsp), %rax
    00001f7d: 	jmp	.Ltmp1464 # Offset: 8061
.Ltmp1301:
    00001f82: 	leaq	0x98(%rsp), %rsi
    00001f8a: 	leaq	0xc0(%rsp), %rdi
    00001f92: 	xorl	%edx, %edx
    00001f94: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8084
    00001f99: 	movq	%rax, 0xc0(%rsp)
    00001fa1: 	movq	%rax, %rdi
    00001fa4: 	movq	0x98(%rsp), %rax
    00001fac: 	movq	%rax, 0xd0(%rsp)
.Ltmp1503:
    00001fb4: 	movq	%r13, %rdx
    00001fb7: 	movq	%r14, %rsi
    00001fba: 	callq	memcpy@PLT # Offset: 8122
    00001fbf: 	movq	0x98(%rsp), %r13
    00001fc7: 	movq	0xc0(%rsp), %rax
    00001fcf: 	jmp	.Ltmp1464 # Offset: 8143
.Ltmp1322:
    00001fd4: 	movq	0x70(%rsp), %rdi
    00001fd9: 	leaq	0x98(%rsp), %rsi
    00001fe1: 	xorl	%edx, %edx
    00001fe3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8163
    00001fe8: 	movq	%rax, 0xc0(%rsp)
    00001ff0: 	movq	%rax, %rdi
    00001ff3: 	movq	0x98(%rsp), %rax
    00001ffb: 	movq	%rax, 0xd0(%rsp)
.Ltmp1502:
    00002003: 	movq	%r13, %rdx
    00002006: 	movq	%r14, %rsi
    00002009: 	callq	memcpy@PLT # Offset: 8201
    0000200e: 	movq	0x98(%rsp), %r13
    00002016: 	movq	0xc0(%rsp), %rax
    0000201e: 	jmp	.Ltmp1462 # Offset: 8222
.Ltmp1297:
    00002023: 	movq	-0x8(%rdx), %rax
    00002027: 	addq	$0x200, %rax
    0000202d: 	jmp	.Ltmp1465 # Offset: 8237
.Ltmp1296:
    00002032: 	movq	0x30(%rsp), %rsi
    00002037: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000203e: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8254
    00002043: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000204a: 	jmp	.Ltmp1466 # Offset: 8266
.Ltmp1395:
    0000204f: 	movq	-0x8(%rdx), %rax
    00002053: 	addq	$0x200, %rax
    00002059: 	jmp	.Ltmp1467 # Offset: 8281
.Ltmp1379:
    0000205e: 	movq	0x70(%rsp), %rsi
    00002063: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000206a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8298
    0000206f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002076: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000207d: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00002084: 	jne	.Ltmp1468 # Offset: 8324
.Ltmp1384:
    0000208a: 	movq	-0x8(%rdx), %rax
    0000208e: 	addq	$0x200, %rax
    00002094: 	jmp	.Ltmp1468 # Offset: 8340
.Ltmp1313:
    00002099: 	movq	0x70(%rsp), %rsi
    0000209e: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000020a5: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8357
    000020aa: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000020b1: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000020b8: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000020bf: 	jne	.Ltmp1469 # Offset: 8383
.Ltmp1318:
    000020c5: 	movq	-0x8(%rdx), %rax
    000020c9: 	addq	$0x200, %rax
    000020cf: 	jmp	.Ltmp1469 # Offset: 8399
.Ltmp1282:
    000020d4: 	movq	0x30(%rsp), %rsi
    000020d9: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000020e0: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8416
    000020e5: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000020ec: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000020f3: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000020fa: 	jne	.Ltmp1470 # Offset: 8442
.Ltmp1287:
    00002100: 	movq	-0x8(%rdx), %rax
    00002104: 	addq	$0x200, %rax
    0000210a: 	jmp	.Ltmp1470 # Offset: 8458
.Ltmp1346:
    0000210f: 	movq	-0x8(%rdx), %rax
    00002113: 	addq	$0x200, %rax
    00002119: 	jmp	.Ltmp1471 # Offset: 8473
.Ltmp1341:
    0000211e: 	movq	0x30(%rsp), %rsi
    00002123: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000212a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8490
    0000212f: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002136: 	jmp	.Ltmp1472 # Offset: 8502
.Ltmp1368:
    0000213b: 	movq	-0x8(%rdx), %rax
    0000213f: 	addq	$0x200, %rax
    00002145: 	jmp	.Ltmp1473 # Offset: 8517
.Ltmp1367:
    0000214a: 	movq	0x70(%rsp), %rsi
    0000214f: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002156: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8534
    0000215b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002162: 	jmp	.Ltmp1474 # Offset: 8546
.Ltmp1390:
    00002167: 	movq	0x30(%rsp), %rsi
    0000216c: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002173: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8563
    00002178: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000217f: 	jmp	.Ltmp1475 # Offset: 8575
.Ltmp1356:
    00002184: 	movq	-0x8(%rdx), %rax
    00002188: 	addq	$0x200, %rax
    0000218e: 	jmp	.Ltmp1476 # Offset: 8590
.Ltmp1355:
    00002193: 	movq	0x30(%rsp), %rsi
    00002198: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    0000219f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8607
    000021a4: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000021ab: 	jmp	.Ltmp1477 # Offset: 8619
.Ltmp1406:
    000021b0: 	movq	0x70(%rsp), %rsi
    000021b5: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    000021bc: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8636
    000021c1: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000021c8: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000021cf: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000021d6: 	jne	.Ltmp1478 # Offset: 8662
.Ltmp1411:
    000021dc: 	movq	-0x8(%rdx), %rax
    000021e0: 	addq	$0x200, %rax
    000021e6: 	jmp	.Ltmp1478 # Offset: 8678
.Ltmp1335:
    000021eb: 	movq	-0x8(%rdx), %rax
    000021ef: 	addq	$0x200, %rax
    000021f5: 	jmp	.Ltmp1479 # Offset: 8693
.Ltmp1334:
    000021fa: 	movq	0x70(%rsp), %rsi
    000021ff: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002206: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8710
    0000220b: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002212: 	jmp	.Ltmp1480 # Offset: 8722
.Ltmp1422:
    00002217: 	movq	0x70(%rsp), %rsi
    0000221c: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002223: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8739
    00002228: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000222f: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00002236: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000223d: 	jne	.Ltmp1481 # Offset: 8765
.Ltmp1427:
    00002243: 	movq	-0x8(%rdx), %rax
    00002247: 	addq	$0x200, %rax
    0000224d: 	jmp	.Ltmp1481 # Offset: 8781
.Ltmp1426:
    00002252: 	testq	%r12, %r12
    00002255: 	je	.Ltmp1482 # Offset: 8789
    0000225b: 	jmp	.Ltmp1483 # Offset: 8795
.Ltmp1410:
    00002260: 	testq	%r12, %r12
    00002263: 	je	.Ltmp1484 # Offset: 8803
    00002269: 	jmp	.Ltmp1485 # Offset: 8809
    0000226e: 	nop # Size: 2
.Ltmp1394:
    00002270: 	testq	%r12, %r12
    00002273: 	je	.Ltmp1486 # Offset: 8819
    00002279: 	jmp	.Ltmp1487 # Offset: 8825
    0000227e: 	nop # Size: 2
.Ltmp1317:
    00002280: 	testq	%r13, %r13
    00002283: 	je	.Ltmp1488 # Offset: 8835
    00002289: 	jmp	.Ltmp1489 # Offset: 8841
    0000228e: 	nop # Size: 2
.Ltmp1383:
    00002290: 	testq	%r12, %r12
    00002293: 	je	.Ltmp1490 # Offset: 8851
.Ltmp1494:
    00002299: 	movq	%r12, %rdx
    0000229c: 	movq	%r14, %rsi
    0000229f: 	callq	memcpy@PLT # Offset: 8863
    000022a4: 	movq	0x98(%rsp), %r12
    000022ac: 	movq	(%r13), %rdi
    000022b0: 	jmp	.Ltmp1490 # Offset: 8880
.Ltmp1286:
    000022b5: 	testq	%r12, %r12
    000022b8: 	je	.Ltmp1447 # Offset: 8888
    000022be: 	jmp	.Ltmp1491 # Offset: 8894
    000022c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1345:
    000022c8: 	testq	%r13, %r13
    000022cb: 	je	.Ltmp1492 # Offset: 8907
    000022d1: 	jmp	.Ltmp1493 # Offset: 8913
    000022d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1344:
    000022d8: 	leaq	0x98(%rsp), %rsi
    000022e0: 	xorl	%edx, %edx
    000022e2: 	movq	%r14, %rdi
    000022e5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8933
    000022ea: 	movq	%rax, (%r14)
    000022ed: 	movq	%rax, %rdi
    000022f0: 	movq	0x98(%rsp), %rax
    000022f8: 	movq	%rax, 0x10(%r14)
.Ltmp1493:
    000022fc: 	movq	%r13, %rdx
    000022ff: 	movq	%r15, %rsi
    00002302: 	callq	memcpy@PLT # Offset: 8962
    00002307: 	movq	0x98(%rsp), %r13
    0000230f: 	movq	(%r14), %rdi
    00002312: 	jmp	.Ltmp1492 # Offset: 8978
.Ltmp1409:
    00002317: 	leaq	0x98(%rsp), %rsi
    0000231f: 	xorl	%edx, %edx
    00002321: 	movq	%rbp, %rdi
    00002324: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8996
    00002329: 	movq	%rax, (%rbp)
    0000232d: 	movq	%rax, %rdi
    00002330: 	movq	0x98(%rsp), %rax
    00002338: 	movq	%rax, 0x10(%rbp)
.Ltmp1485:
    0000233c: 	movq	%r12, %rdx
    0000233f: 	movq	%r13, %rsi
    00002342: 	callq	memcpy@PLT # Offset: 9026
    00002347: 	movq	0x98(%rsp), %r12
    0000234f: 	movq	(%rbp), %rdi
    00002353: 	jmp	.Ltmp1484 # Offset: 9043
.Ltmp1425:
    00002358: 	leaq	0x98(%rsp), %rsi
    00002360: 	xorl	%edx, %edx
    00002362: 	movq	%rbx, %rdi
    00002365: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9061
    0000236a: 	movq	%rax, (%rbx)
    0000236d: 	movq	%rax, %rdi
    00002370: 	movq	0x98(%rsp), %rax
    00002378: 	movq	%rax, 0x10(%rbx)
.Ltmp1483:
    0000237c: 	movq	%r12, %rdx
    0000237f: 	movq	%rbp, %rsi
    00002382: 	callq	memcpy@PLT # Offset: 9090
    00002387: 	movq	0x98(%rsp), %r12
    0000238f: 	movq	(%rbx), %rdi
    00002392: 	jmp	.Ltmp1482 # Offset: 9106
.Ltmp1393:
    00002397: 	leaq	0x98(%rsp), %rsi
    0000239f: 	xorl	%edx, %edx
    000023a1: 	movq	%rbp, %rdi
    000023a4: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9124
    000023a9: 	movq	%rax, (%rbp)
    000023ad: 	movq	%rax, %rdi
    000023b0: 	movq	0x98(%rsp), %rax
    000023b8: 	movq	%rax, 0x10(%rbp)
.Ltmp1487:
    000023bc: 	movq	%r12, %rdx
    000023bf: 	movq	%r13, %rsi
    000023c2: 	callq	memcpy@PLT # Offset: 9154
    000023c7: 	movq	0x98(%rsp), %r12
    000023cf: 	movq	(%rbp), %rdi
    000023d3: 	jmp	.Ltmp1486 # Offset: 9171
.Ltmp1316:
    000023d8: 	leaq	0x98(%rsp), %rsi
    000023e0: 	xorl	%edx, %edx
    000023e2: 	movq	%r14, %rdi
    000023e5: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9189
    000023ea: 	movq	%rax, (%r14)
    000023ed: 	movq	%rax, %rdi
    000023f0: 	movq	0x98(%rsp), %rax
    000023f8: 	movq	%rax, 0x10(%r14)
.Ltmp1489:
    000023fc: 	movq	%r13, %rdx
    000023ff: 	movq	%r15, %rsi
    00002402: 	callq	memcpy@PLT # Offset: 9218
    00002407: 	movq	0x98(%rsp), %r13
    0000240f: 	movq	(%r14), %rdi
    00002412: 	jmp	.Ltmp1488 # Offset: 9234
.Ltmp1382:
    00002417: 	leaq	0x98(%rsp), %rsi
    0000241f: 	xorl	%edx, %edx
    00002421: 	movq	%r13, %rdi
    00002424: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 9252
    00002429: 	movq	%rax, (%r13)
    0000242d: 	movq	%rax, %rdi
    00002430: 	movq	0x98(%rsp), %rax
    00002438: 	movq	%rax, 0x10(%r13)
    0000243c: 	jmp	.Ltmp1494 # Offset: 9276
.Ltmp1289:
    00002441: 	movabsq	$0x100000000, %rax
    0000244b: 	xorl	%r14d, %r14d
    0000244e: 	jmp	.Ltmp1495 # Offset: 9294
.Ltmp1290:
    00002453: 	movabsq	$-0x8000000000000000, %rax
    0000245d: 	movl	$0x1f, %r14d
    00002463: 	jmp	.Ltmp1495 # Offset: 9315
.Ltmp1349:
    00002468: 	movl	$0x1f, 0x50(%rsp)
    00002470: 	movabsq	$-0x8000000000000000, %rax
    0000247a: 	jmp	.Ltmp1348 # Offset: 9338
.Ltmp1361:
    0000247f: 	leaq	DATAat0x14008(%rip), %rdi
    00002486: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9350
.Ltmp1300:
    0000248b: 	leaq	DATAat0x14008(%rip), %rdi
    00002492: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9362
.Ltmp1303:
    00002497: 	leaq	DATAat0x14184(%rip), %rdi
    0000249e: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9374
.Ltmp1307:
    000024a3: 	leaq	DATAat0x14008(%rip), %rdi
    000024aa: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9386
.Ltmp1315:
    000024af: 	leaq	DATAat0x14008(%rip), %rdi
    000024b6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9398
.Ltmp1321:
    000024bb: 	leaq	DATAat0x14008(%rip), %rdi
    000024c2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9410
.Ltmp1324:
    000024c7: 	leaq	DATAat0x14184(%rip), %rdi
    000024ce: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9422
.Ltmp1328:
    000024d3: 	leaq	DATAat0x14008(%rip), %rdi
    000024da: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9434
.Ltmp1343:
    000024df: 	leaq	DATAat0x14008(%rip), %rdi
    000024e6: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9446
.Ltmp1424:
    000024eb: 	leaq	DATAat0x14008(%rip), %rdi
    000024f2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9458
.Ltmp1444:
    000024f7: 	callq	__stack_chk_fail@PLT # Offset: 9463
.Ltmp1284:
    000024fc: 	leaq	DATAat0x14008(%rip), %rdi
    00002503: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9475
.Ltmp1449:
    00002508: 	movq	0x18(%rsp), %rdi
    0000250d: 	jmp	.Ltmp1496 # Offset: 9485
.Ltmp1451:
    00002512: 	movq	0x18(%rsp), %rdi
    00002517: 	jmp	.Ltmp1497 # Offset: 9495
.Ltmp1453:
    0000251c: 	movq	0x18(%rsp), %rdi
    00002521: 	jmp	.Ltmp1498 # Offset: 9505
.Ltmp1455:
    00002526: 	movq	0x18(%rsp), %rdi
    0000252b: 	jmp	.Ltmp1499 # Offset: 9515
.Ltmp1457:
    00002530: 	movq	0x18(%rsp), %rdi
    00002535: 	jmp	.Ltmp1500 # Offset: 9525
.Ltmp1459:
    0000253a: 	movq	0x18(%rsp), %rdi
    0000253f: 	jmp	.Ltmp1501 # Offset: 9535
.Ltmp1461:
    00002544: 	movq	0x68(%rsp), %rdi
    00002549: 	jmp	.Ltmp1502 # Offset: 9545
.Ltmp1463:
    0000254e: 	movq	0x68(%rsp), %rdi
    00002553: 	jmp	.Ltmp1503 # Offset: 9555
.Ltmp1392:
    00002558: 	leaq	DATAat0x14008(%rip), %rdi
    0000255f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9567
.Ltmp1400:
    00002564: 	leaq	DATAat0x14008(%rip), %rdi
    0000256b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9579
.Ltmp1408:
    00002570: 	leaq	DATAat0x14008(%rip), %rdi
    00002577: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9591
.Ltmp1416:
    0000257c: 	leaq	DATAat0x14008(%rip), %rdi
    00002583: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9603
.Ltmp1373:
    00002588: 	leaq	DATAat0x14008(%rip), %rdi
    0000258f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9615
.Ltmp1381:
    00002594: 	leaq	DATAat0x14008(%rip), %rdi
    0000259b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9627
    000025a0: 	endbr64
.Ltmp1505:
    000025a4: 	movq	%rax, %rbp
    000025a7: 	jmp	.Ltmp1504 # Offset: 9639
    000025a9: 	endbr64
    000025ad: 	jmp	.Ltmp1505 # Offset: 9645
    000025af: 	endbr64
.Ltmp1512:
    000025b3: 	movq	%rax, %rbp
    000025b6: 	jmp	.Ltmp1506 # Offset: 9654
    000025b8: 	endbr64
    000025bc: 	jmp	.Ltmp1505 # Offset: 9660
    000025be: 	endbr64
.Ltmp1511:
    000025c2: 	movq	%rax, %rbp
    000025c5: 	movq	0xe0(%rsp), %rdi
    000025cd: 	cmpq	0x18(%rsp), %rdi
    000025d2: 	je	.Ltmp1506 # Offset: 9682
    000025d4: 	movq	0xf0(%rsp), %rax
    000025dc: 	leaq	0x1(%rax), %rsi
    000025e0: 	callq	_ZdlPvm@PLT # Offset: 9696
.Ltmp1506:
    000025e5: 	movq	0xc0(%rsp), %rdi
    000025ed: 	cmpq	0x68(%rsp), %rdi
    000025f2: 	je	.Ltmp1507 # Offset: 9714
    000025f4: 	movq	0xd0(%rsp), %rax
    000025fc: 	leaq	0x1(%rax), %rsi
    00002600: 	callq	_ZdlPvm@PLT # Offset: 9728
    00002605: 	jmp	.Ltmp1507 # Offset: 9733
.Ltmp1504:
    00002607: 	movq	0xe0(%rsp), %rdi
    0000260f: 	cmpq	0x18(%rsp), %rdi
    00002614: 	je	.Ltmp1507 # Offset: 9748
.Ltmp1510:
    00002616: 	movq	0xf0(%rsp), %rax
    0000261e: 	leaq	0x1(%rax), %rsi
    00002622: 	callq	_ZdlPvm@PLT # Offset: 9762
.Ltmp1507:
    00002627: 	movq	0xa0(%rsp), %rdi
    0000262f: 	cmpq	0x80(%rsp), %rdi
    00002637: 	je	.Ltmp1508 # Offset: 9783
    00002639: 	movq	0xb0(%rsp), %rax
    00002641: 	leaq	0x1(%rax), %rsi
    00002645: 	callq	_ZdlPvm@PLT # Offset: 9797
.Ltmp1508:
    0000264a: 	movq	%rbp, %rdi
    0000264d: 	callq	_Unwind_Resume@PLT # Offset: 9805
    00002652: 	endbr64
    00002656: 	movq	%rax, %rbp
    00002659: 	jmp	.Ltmp1509 # Offset: 9817
    0000265b: 	endbr64
    0000265f: 	movq	%rax, %rbp
    00002662: 	jmp	.Ltmp1507 # Offset: 9826
.Ltmp1509:
    00002664: 	movq	0xe0(%rsp), %rdi
    0000266c: 	leaq	0xf0(%rsp), %rax
    00002674: 	cmpq	%rax, %rdi
    00002677: 	jne	.Ltmp1510 # Offset: 9847
    00002679: 	jmp	.Ltmp1507 # Offset: 9849
    0000267b: 	endbr64
    0000267f: 	jmp	.Ltmp1511 # Offset: 9855
    00002684: 	endbr64
    00002688: 	jmp	.Ltmp1505 # Offset: 9864
    0000268d: 	endbr64
    00002691: 	jmp	.Ltmp1512 # Offset: 9873
    00002696: 	endbr64
    0000269a: 	jmp	.Ltmp1511 # Offset: 9882
    0000269f: 	endbr64
    000026a3: 	jmp	.Ltmp1512 # Offset: 9891
    000026a8: 	endbr64
    000026ac: 	jmp	.Ltmp1505 # Offset: 9900
    000026b1: 	endbr64
    000026b5: 	jmp	.Ltmp1511 # Offset: 9909
    000026ba: 	endbr64
    000026be: 	jmp	.Ltmp1512 # Offset: 9918
    000026c3: 	endbr64
    000026c7: 	jmp	.Ltmp1512 # Offset: 9927
    000026cc: 	endbr64
    000026d0: 	jmp	.Ltmp1512 # Offset: 9936
    000026d5: 	endbr64
    000026d9: 	jmp	.Ltmp1511 # Offset: 9945
    000026de: 	endbr64
    000026e2: 	jmp	.Ltmp1512 # Offset: 9954
    000026e7: 	endbr64
    000026eb: 	jmp	.Ltmp1512 # Offset: 9963
    000026f0: 	endbr64
    000026f4: 	jmp	.Ltmp1511 # Offset: 9972
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIiEvd"

Binary Function "_Z11TestOneTypeIlEvd" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x11200
  Size        : 0x2556
  MaxSize     : 0x2556
  Offset      : 0x11200
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIlEvd
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	leaq	-0x7000(%rsp), %r11
.Ltmp1513:
    00000016: 	subq	$0x1000, %rsp
    0000001d: 	orq	$0x0, (%rsp)
    00000022: 	cmpq	%r11, %rsp
    00000025: 	jne	.Ltmp1513 # Offset: 37
    00000027: 	subq	$0xe08, %rsp
    0000002e: 	movl	$0x5f34, %r9d
    00000034: 	movq	%fs:0x28, %rax
    0000003d: 	movq	%rax, 0x7df8(%rsp)
    00000045: 	xorl	%eax, %eax
    00000047: 	leaq	0xa0(%rsp), %rax
    0000004f: 	movl	$0x36746e69, 0xa0(%rsp)
    0000005a: 	leaq	0x7df0(%rsp), %rbx
    00000062: 	movq	%rax, 0x70(%rsp)
    00000067: 	movq	%rax, 0x90(%rsp)
    0000006f: 	cvttsd2si	init_value(%rip), %rax
    00000078: 	movw	%r9w, 0xa4(%rsp)
    00000081: 	movb	$0x74, 0xa6(%rsp)
    00000089: 	movq	$0x7, 0x98(%rsp)
    00000095: 	movq	%rax, %xmm1
    0000009a: 	leaq	0xf0(%rsp), %rax
    000000a2: 	movb	$0x0, 0xa7(%rsp)
    000000aa: 	movq	%rax, 0x10(%rsp)
    000000af: 	punpcklqdq	%xmm1, %xmm1
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1514:
    000000b8: 	movaps	%xmm1, (%rax)
    000000bb: 	addq	$0x10, %rax
    000000bf: 	cmpq	%rax, %rbx
    000000c2: 	jne	.Ltmp1514 # Offset: 194
    000000c4: 	leaq	0x90(%rsp), %rax
    000000cc: 	leaq	0xd0(%rsp), %rdi
    000000d4: 	leaq	DATAat0x141d0(%rip), %rdx
    000000db: 	movq	%rax, %rsi
    000000de: 	movq	%rdi, 0x30(%rsp)
    000000e3: 	cvttsd2si	%xmm0, %r15
    000000e8: 	movq	%rax, 0x40(%rsp)
    000000ed: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 237
    000000f2: 	callq	clock@PLT # Offset: 242
    000000f7: 	movl	iterations(%rip), %edi
    000000fd: 	xorl	%ebp, %ebp
    000000ff: 	leaq	DATAat0x141e1(%rip), %r12
    00000106: 	movq	%rax, start_time(%rip)
    0000010d: 	testl	%edi, %edi
    0000010f: 	jle	.Ltmp1515 # Offset: 271
    00000111: 	nopl	(%rax) # Size: 7
.Ltmp1518:
    00000118: 	movq	0x10(%rsp), %rcx
    0000011d: 	xorl	%esi, %esi
    0000011f: 	nop # Size: 1
.Ltmp1516:
    00000120: 	movq	(%rcx), %rax
    00000123: 	addq	$0x8, %rcx
    00000127: 	cqto
    00000129: 	idivq	%r15
    0000012c: 	addq	%rax, %rsi
    0000012f: 	cmpq	%rcx, %rbx
    00000132: 	jne	.Ltmp1516 # Offset: 306
    00000134: 	cvttsd2si	init_value(%rip), %rax
    0000013d: 	cqto
    0000013f: 	idivq	%r15
    00000142: 	imulq	$0xfa0, %rax, %rax
    00000149: 	cmpq	%rax, %rsi
    0000014c: 	je	.Ltmp1517 # Offset: 332
    0000014e: 	movq	0xd0(%rsp), %rdx
    00000156: 	movq	%r12, %rsi
    00000159: 	movl	$0x1, %edi
    0000015e: 	xorl	%eax, %eax
    00000160: 	callq	__printf_chk@PLT # Offset: 352
    00000165: 	movl	iterations(%rip), %edi
.Ltmp1517:
    0000016b: 	addl	$0x1, %ebp
    0000016e: 	cmpl	%edi, %ebp
    00000170: 	jl	.Ltmp1518 # Offset: 368
.Ltmp1515:
    00000172: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000179: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000180: 	subq	$0x20, %rax
    00000184: 	cmpq	%rax, %rdi
    00000187: 	je	.Ltmp1519 # Offset: 391
    0000018d: 	leaq	0x10(%rdi), %rax
    00000191: 	movq	0xd8(%rsp), %rdx
    00000199: 	movq	%rax, (%rdi)
    0000019c: 	movq	0xd0(%rsp), %rsi
    000001a4: 	addq	%rsi, %rdx
    000001a7: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 423
    000001ac: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000001b3: 	addq	$0x20, %rax
    000001b7: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1708:
    000001be: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000001c5: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000001cc: 	je	.Ltmp1520 # Offset: 460
.Ltmp1707:
    000001d2: 	movq	-0x20(%rax), %rbp
    000001d6: 	callq	clock@PLT # Offset: 470
    000001db: 	pxor	%xmm0, %xmm0
    000001df: 	movq	%rax, end_time(%rip)
    000001e6: 	movq	%rbp, %rdi
    000001e9: 	subq	start_time(%rip), %rax
    000001f0: 	cvtsi2sd	%rax, %xmm0
    000001f5: 	divsd	DATAat0x14308(%rip), %xmm0
    000001fd: 	callq	_Z13record_resultdPKc # Offset: 509
    00000202: 	movq	0xd0(%rsp), %rdi
    0000020a: 	leaq	0xe0(%rsp), %rax
    00000212: 	movq	%rax, 0x8(%rsp)
    00000217: 	cmpq	%rax, %rdi
    0000021a: 	je	.Ltmp1521 # Offset: 538
    0000021c: 	movq	0xe0(%rsp), %rax
    00000224: 	leaq	0x1(%rax), %rsi
    00000228: 	callq	_ZdlPvm@PLT # Offset: 552
.Ltmp1521:
    0000022d: 	movq	0x40(%rsp), %rsi
    00000232: 	movq	0x30(%rsp), %rdi
    00000237: 	leaq	DATAat0x1420c(%rip), %rdx
    0000023e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 574
    00000243: 	callq	clock@PLT # Offset: 579
    00000248: 	movl	%r15d, %esi
    0000024b: 	movl	%r15d, %ebp
    0000024e: 	movl	%r15d, 0x50(%rsp)
    00000253: 	negl	%esi
    00000255: 	movq	%rax, start_time(%rip)
    0000025c: 	cmovsl	%r15d, %esi
    00000260: 	sarl	$0x1f, %ebp
    00000263: 	movl	%esi, %ecx
    00000265: 	subl	$0x1, %ecx
    00000268: 	movl	%ecx, 0x38(%rsp)
    0000026c: 	je	.Ltmp1522 # Offset: 620
    00000272: 	js	.Ltmp1523 # Offset: 626
    00000278: 	movl	$0x80000000, %eax
    0000027d: 	xorl	%edx, %edx
    0000027f: 	nop # Size: 1
.Ltmp1524:
    00000280: 	shrl	%eax
    00000282: 	addl	$0x1, %edx
    00000285: 	testl	%eax, %ecx
    00000287: 	je	.Ltmp1524 # Offset: 647
    00000289: 	movl	$0x20, %eax
    0000028e: 	subl	%edx, %eax
    00000290: 	movl	$0x1, %edx
    00000295: 	testl	%eax, %eax
    00000297: 	cmovlel	%edx, %eax
    0000029a: 	leal	0x1f(%rax), %ecx
    0000029d: 	leal	-0x1(%rax), %r13d
    000002a1: 	movl	$0x1, %eax
    000002a6: 	shlq	%cl, %rax
.Ltmp1735:
    000002a9: 	movslq	%esi, %rdi
    000002ac: 	cqto
    000002ae: 	xorl	%r14d, %r14d
    000002b1: 	idivq	%rdi
    000002b4: 	movq	%rdi, 0x78(%rsp)
    000002b9: 	movl	iterations(%rip), %edi
    000002bf: 	leal	0x1(%rax), %r12d
    000002c3: 	movslq	%r12d, %r12
    000002c6: 	testl	%edi, %edi
    000002c8: 	jle	.Ltmp1525 # Offset: 712
    000002ce: 	nop # Size: 2
.Ltmp1528:
    000002d0: 	movq	0x10(%rsp), %rdx
    000002d5: 	xorl	%esi, %esi
    000002d7: 	movl	%r13d, %ecx
    000002da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1526:
    000002e0: 	movq	(%rdx), %rax
    000002e3: 	addq	$0x8, %rdx
    000002e7: 	movslq	%eax, %r8
    000002ea: 	imulq	%r12, %r8
    000002ee: 	sarq	$0x20, %r8
    000002f2: 	addl	%eax, %r8d
    000002f5: 	shrl	$0x1f, %eax
    000002f8: 	sarl	%cl, %r8d
    000002fb: 	addl	%r8d, %eax
    000002fe: 	xorl	%ebp, %eax
    00000300: 	subl	%ebp, %eax
    00000302: 	cltq
    00000304: 	addq	%rax, %rsi
    00000307: 	cmpq	%rdx, %rbx
    0000030a: 	jne	.Ltmp1526 # Offset: 778
    0000030c: 	cvttsd2si	init_value(%rip), %rax
    00000315: 	movl	%ecx, %r13d
    00000318: 	cqto
    0000031a: 	idivq	%r15
    0000031d: 	imulq	$0xfa0, %rax, %rax
    00000324: 	cmpq	%rax, %rsi
    00000327: 	je	.Ltmp1527 # Offset: 807
    00000329: 	movq	0xd0(%rsp), %rdx
    00000331: 	leaq	DATAat0x141e1(%rip), %rsi
    00000338: 	movl	$0x1, %edi
    0000033d: 	xorl	%eax, %eax
    0000033f: 	callq	__printf_chk@PLT # Offset: 831
    00000344: 	movl	iterations(%rip), %edi
.Ltmp1527:
    0000034a: 	addl	$0x1, %r14d
    0000034e: 	cmpl	%edi, %r14d
    00000351: 	jl	.Ltmp1528 # Offset: 849
.Ltmp1525:
    00000357: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000035e: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    00000365: 	subq	$0x20, %rax
    00000369: 	cmpq	%rax, %r13
    0000036c: 	je	.Ltmp1529 # Offset: 876
    00000372: 	leaq	0x10(%r13), %rdi
    00000376: 	movq	0xd8(%rsp), %r12
    0000037e: 	movq	%rdi, (%r13)
    00000382: 	movq	0xd0(%rsp), %r14
    0000038a: 	movq	%r14, %rax
    0000038d: 	addq	%r12, %rax
    00000390: 	je	.Ltmp1530 # Offset: 912
    00000392: 	testq	%r14, %r14
    00000395: 	je	.Ltmp1531 # Offset: 917
.Ltmp1530:
    0000039b: 	movq	%r12, 0x88(%rsp)
    000003a3: 	cmpq	$0xf, %r12
    000003a7: 	ja	.Ltmp1532 # Offset: 935
    000003ad: 	cmpq	$0x1, %r12
    000003b1: 	jne	.Ltmp1533 # Offset: 945
    000003b7: 	movzbl	(%r14), %eax
    000003bb: 	movb	%al, 0x10(%r13)
.Ltmp1682:
    000003bf: 	movq	%r12, 0x8(%r13)
    000003c3: 	movb	$0x0, (%rdi,%r12)
    000003c8: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000003cf: 	addq	$0x20, %rax
    000003d3: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1706:
    000003da: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000003e1: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000003e8: 	je	.Ltmp1534 # Offset: 1000
.Ltmp1705:
    000003ee: 	movq	-0x20(%rax), %r12
    000003f2: 	callq	clock@PLT # Offset: 1010
    000003f7: 	pxor	%xmm0, %xmm0
    000003fb: 	movq	%rax, end_time(%rip)
    00000402: 	movq	%r12, %rdi
    00000405: 	subq	start_time(%rip), %rax
    0000040c: 	cvtsi2sd	%rax, %xmm0
    00000411: 	divsd	DATAat0x14308(%rip), %xmm0
    00000419: 	callq	_Z13record_resultdPKc # Offset: 1049
    0000041e: 	movq	0xd0(%rsp), %rdi
    00000426: 	cmpq	0x8(%rsp), %rdi
    0000042b: 	je	.Ltmp1535 # Offset: 1067
    0000042d: 	movq	0xe0(%rsp), %rax
    00000435: 	leaq	0x1(%rax), %rsi
    00000439: 	callq	_ZdlPvm@PLT # Offset: 1081
.Ltmp1535:
    0000043e: 	movq	0x90(%rsp), %r13
    00000446: 	leaq	0xc0(%rsp), %rax
    0000044e: 	movq	0x98(%rsp), %r12
    00000456: 	movq	%rax, 0x58(%rsp)
    0000045b: 	movq	%rax, 0xb0(%rsp)
    00000463: 	movq	%r13, %rax
    00000466: 	addq	%r12, %rax
    00000469: 	je	.Ltmp1536 # Offset: 1129
    0000046b: 	testq	%r13, %r13
    0000046e: 	je	.Ltmp1537 # Offset: 1134
.Ltmp1536:
    00000474: 	movq	%r12, 0x88(%rsp)
    0000047c: 	cmpq	$0xf, %r12
    00000480: 	ja	.Ltmp1538 # Offset: 1152
    00000486: 	cmpq	$0x1, %r12
    0000048a: 	jne	.Ltmp1539 # Offset: 1162
    00000490: 	movzbl	(%r13), %eax
    00000495: 	movb	%al, 0xc0(%rsp)
    0000049c: 	movq	0x58(%rsp), %rax
.Ltmp1697:
    000004a1: 	movq	%r12, 0xb8(%rsp)
    000004a9: 	movb	$0x0, (%rax,%r12)
    000004ae: 	movabsq	$0x3fffffffffffffff, %rax
    000004b8: 	subq	0xb8(%rsp), %rax
    000004c0: 	cmpq	$0xf, %rax
    000004c4: 	jbe	.Ltmp1540 # Offset: 1220
    000004ca: 	leaq	0xb0(%rsp), %rax
    000004d2: 	movl	$0x10, %edx
    000004d7: 	leaq	DATAat0x141f1(%rip), %rsi
    000004de: 	movq	%rax, %rdi
    000004e1: 	movq	%rax, 0x60(%rsp)
    000004e6: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 1254
    000004eb: 	callq	clock@PLT # Offset: 1259
    000004f0: 	movl	iterations(%rip), %r8d
    000004f7: 	movl	$0x0, 0x18(%rsp)
    000004ff: 	movabsq	$0x2d82d82d82d82d83, %r13
    00000509: 	movq	%rax, start_time(%rip)
    00000510: 	leaq	0x88(%rsp), %rax
    00000518: 	movq	%rax, 0x68(%rsp)
    0000051d: 	testl	%r8d, %r8d
    00000520: 	jle	.Ltmp1541 # Offset: 1312
    00000526: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1549:
    00000530: 	movq	0x10(%rsp), %rsi
    00000535: 	xorl	%r12d, %r12d
    00000538: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1542:
    00000540: 	movq	(%rsi), %rcx
    00000543: 	addq	$0x8, %rsi
    00000547: 	movq	%rcx, %rax
    0000054a: 	sarq	$0x3f, %rcx
    0000054e: 	imulq	%r13
    00000551: 	sarq	$0x6, %rdx
    00000555: 	subq	%rcx, %rdx
    00000558: 	addq	%rdx, %r12
    0000055b: 	cmpq	%rsi, %rbx
    0000055e: 	jne	.Ltmp1542 # Offset: 1374
    00000560: 	movq	0x8(%rsp), %rax
    00000565: 	movq	0xb8(%rsp), %r14
    0000056d: 	movq	%rax, 0xd0(%rsp)
    00000575: 	movq	0xb0(%rsp), %rax
    0000057d: 	movq	%rax, %rdi
    00000580: 	movq	%rax, 0x20(%rsp)
    00000585: 	addq	%r14, %rdi
    00000588: 	je	.Ltmp1543 # Offset: 1416
    0000058a: 	testq	%rax, %rax
    0000058d: 	je	.Ltmp1544 # Offset: 1421
.Ltmp1543:
    00000593: 	movq	%r14, 0x88(%rsp)
    0000059b: 	cmpq	$0xf, %r14
    0000059f: 	ja	.Ltmp1545 # Offset: 1439
    000005a5: 	cmpq	$0x1, %r14
    000005a9: 	jne	.Ltmp1546 # Offset: 1449
    000005af: 	movq	0x20(%rsp), %rax
    000005b4: 	movzbl	(%rax), %eax
    000005b7: 	movb	%al, 0xe0(%rsp)
    000005be: 	movq	0x8(%rsp), %rax
.Ltmp1685:
    000005c3: 	movq	%r14, 0xd8(%rsp)
    000005cb: 	movb	$0x0, (%rax,%r14)
    000005d0: 	cvttsd2si	init_value(%rip), %rcx
    000005d9: 	movq	%rcx, %rax
    000005dc: 	sarq	$0x3f, %rcx
    000005e0: 	imulq	%r13
    000005e3: 	sarq	$0x6, %rdx
    000005e7: 	subq	%rcx, %rdx
    000005ea: 	imulq	$0xfa0, %rdx, %rdx
    000005f1: 	cmpq	%rdx, %r12
    000005f4: 	je	.Ltmp1547 # Offset: 1524
    000005f6: 	movq	0xd0(%rsp), %rdx
    000005fe: 	leaq	DATAat0x141e1(%rip), %rsi
    00000605: 	movl	$0x1, %edi
    0000060a: 	xorl	%eax, %eax
    0000060c: 	callq	__printf_chk@PLT # Offset: 1548
.Ltmp1547:
    00000611: 	movq	0xd0(%rsp), %rdi
    00000619: 	cmpq	0x8(%rsp), %rdi
    0000061e: 	je	.Ltmp1548 # Offset: 1566
    00000624: 	movq	0xe0(%rsp), %rax
    0000062c: 	leaq	0x1(%rax), %rsi
    00000630: 	callq	_ZdlPvm@PLT # Offset: 1584
    00000635: 	addl	$0x1, 0x18(%rsp)
    0000063a: 	movl	0x18(%rsp), %eax
    0000063e: 	cmpl	iterations(%rip), %eax
    00000644: 	jl	.Ltmp1549 # Offset: 1604
.Ltmp1541:
    0000064a: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000651: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000658: 	subq	$0x20, %rax
    0000065c: 	cmpq	%rax, %rdi
    0000065f: 	je	.Ltmp1550 # Offset: 1631
    00000665: 	leaq	0x10(%rdi), %rax
    00000669: 	movq	0xb8(%rsp), %rdx
    00000671: 	movq	%rax, (%rdi)
    00000674: 	movq	0xb0(%rsp), %rsi
    0000067c: 	addq	%rsi, %rdx
    0000067f: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 1663
    00000684: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000068b: 	addq	$0x20, %rax
    0000068f: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1712:
    00000696: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000069d: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000006a4: 	je	.Ltmp1551 # Offset: 1700
.Ltmp1711:
    000006aa: 	movq	-0x20(%rax), %r12
    000006ae: 	callq	clock@PLT # Offset: 1710
    000006b3: 	pxor	%xmm0, %xmm0
    000006b7: 	movq	%rax, end_time(%rip)
    000006be: 	movq	%r12, %rdi
    000006c1: 	subq	start_time(%rip), %rax
    000006c8: 	cvtsi2sd	%rax, %xmm0
    000006cd: 	divsd	DATAat0x14308(%rip), %xmm0
    000006d5: 	callq	_Z13record_resultdPKc # Offset: 1749
    000006da: 	movq	0xb0(%rsp), %rdi
    000006e2: 	cmpq	0x58(%rsp), %rdi
    000006e7: 	je	.Ltmp1552 # Offset: 1767
    000006e9: 	movq	0xc0(%rsp), %rax
    000006f1: 	leaq	0x1(%rax), %rsi
    000006f5: 	callq	_ZdlPvm@PLT # Offset: 1781
.Ltmp1552:
    000006fa: 	movq	0x40(%rsp), %rsi
    000006ff: 	movq	0x60(%rsp), %rdi
    00000704: 	leaq	DATAat0x14228(%rip), %rdx
    0000070b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1803
    00000710: 	callq	clock@PLT # Offset: 1808
    00000715: 	movl	iterations(%rip), %edi
    0000071b: 	movl	$0x0, 0x18(%rsp)
    00000723: 	movq	%rax, start_time(%rip)
    0000072a: 	testl	%edi, %edi
    0000072c: 	jle	.Ltmp1553 # Offset: 1836
    00000732: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1561:
    00000738: 	movq	0x10(%rsp), %rcx
    0000073d: 	xorl	%r12d, %r12d
.Ltmp1554:
    00000740: 	movq	(%rcx), %rdx
    00000743: 	addq	$0x8, %rcx
    00000747: 	movslq	%edx, %rax
    0000074a: 	imulq	$-0x49f49f49, %rax, %rax
    00000751: 	sarq	$0x20, %rax
    00000755: 	addl	%edx, %eax
    00000757: 	shrl	$0x1f, %edx
    0000075a: 	sarl	$0x8, %eax
    0000075d: 	addl	%edx, %eax
    0000075f: 	cltq
    00000761: 	addq	%rax, %r12
    00000764: 	cmpq	%rcx, %rbx
    00000767: 	jne	.Ltmp1554 # Offset: 1895
    00000769: 	movq	0x8(%rsp), %rax
    0000076e: 	movq	0xb0(%rsp), %r14
    00000776: 	movq	0xb8(%rsp), %r13
    0000077e: 	movq	%rax, 0xd0(%rsp)
    00000786: 	movq	%r14, %rax
    00000789: 	addq	%r13, %rax
    0000078c: 	je	.Ltmp1555 # Offset: 1932
    0000078e: 	testq	%r14, %r14
    00000791: 	je	.Ltmp1556 # Offset: 1937
.Ltmp1555:
    00000797: 	movq	%r13, 0x88(%rsp)
    0000079f: 	cmpq	$0xf, %r13
    000007a3: 	ja	.Ltmp1557 # Offset: 1955
    000007a9: 	cmpq	$0x1, %r13
    000007ad: 	jne	.Ltmp1558 # Offset: 1965
    000007b3: 	movzbl	(%r14), %eax
    000007b7: 	movb	%al, 0xe0(%rsp)
    000007be: 	movq	0x8(%rsp), %rax
.Ltmp1689:
    000007c3: 	movq	%r13, 0xd8(%rsp)
    000007cb: 	movb	$0x0, (%rax,%r13)
    000007d0: 	cvttsd2si	init_value(%rip), %rdx
    000007d9: 	movslq	%edx, %rax
    000007dc: 	imulq	$-0x49f49f49, %rax, %rax
    000007e3: 	sarq	$0x20, %rax
    000007e7: 	addl	%edx, %eax
    000007e9: 	shrl	$0x1f, %edx
    000007ec: 	sarl	$0x8, %eax
    000007ef: 	addl	%edx, %eax
    000007f1: 	cltq
    000007f3: 	imulq	$0xfa0, %rax, %rax
    000007fa: 	cmpq	%rax, %r12
    000007fd: 	je	.Ltmp1559 # Offset: 2045
    000007ff: 	movq	0xd0(%rsp), %rdx
    00000807: 	leaq	DATAat0x141e1(%rip), %rsi
    0000080e: 	movl	$0x1, %edi
    00000813: 	xorl	%eax, %eax
    00000815: 	callq	__printf_chk@PLT # Offset: 2069
.Ltmp1559:
    0000081a: 	movq	0xd0(%rsp), %rdi
    00000822: 	cmpq	0x8(%rsp), %rdi
    00000827: 	je	.Ltmp1560 # Offset: 2087
    0000082d: 	movq	0xe0(%rsp), %rax
    00000835: 	leaq	0x1(%rax), %rsi
    00000839: 	callq	_ZdlPvm@PLT # Offset: 2105
    0000083e: 	addl	$0x1, 0x18(%rsp)
    00000843: 	movl	0x18(%rsp), %eax
    00000847: 	cmpl	iterations(%rip), %eax
    0000084d: 	jl	.Ltmp1561 # Offset: 2125
.Ltmp1553:
    00000853: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000085a: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    00000861: 	subq	$0x20, %rax
    00000865: 	cmpq	%rax, %r13
    00000868: 	je	.Ltmp1562 # Offset: 2152
    0000086e: 	leaq	0x10(%r13), %rdi
    00000872: 	movq	0xb8(%rsp), %r12
    0000087a: 	movq	%rdi, (%r13)
    0000087e: 	movq	0xb0(%rsp), %r14
    00000886: 	movq	%r14, %rax
    00000889: 	addq	%r12, %rax
    0000088c: 	je	.Ltmp1563 # Offset: 2188
    0000088e: 	testq	%r14, %r14
    00000891: 	je	.Ltmp1564 # Offset: 2193
.Ltmp1563:
    00000897: 	movq	%r12, 0x88(%rsp)
    0000089f: 	cmpq	$0xf, %r12
    000008a3: 	ja	.Ltmp1565 # Offset: 2211
    000008a9: 	cmpq	$0x1, %r12
    000008ad: 	jne	.Ltmp1566 # Offset: 2221
    000008b3: 	movzbl	(%r14), %eax
    000008b7: 	movb	%al, 0x10(%r13)
.Ltmp1733:
    000008bb: 	movq	%r12, 0x8(%r13)
    000008bf: 	movb	$0x0, (%rdi,%r12)
    000008c4: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000008cb: 	addq	$0x20, %rax
    000008cf: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1704:
    000008d6: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000008dd: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000008e4: 	je	.Ltmp1567 # Offset: 2276
.Ltmp1703:
    000008ea: 	movq	-0x20(%rax), %r12
    000008ee: 	callq	clock@PLT # Offset: 2286
    000008f3: 	pxor	%xmm0, %xmm0
    000008f7: 	movq	%rax, end_time(%rip)
    000008fe: 	movq	%r12, %rdi
    00000901: 	subq	start_time(%rip), %rax
    00000908: 	cvtsi2sd	%rax, %xmm0
    0000090d: 	divsd	DATAat0x14308(%rip), %xmm0
    00000915: 	callq	_Z13record_resultdPKc # Offset: 2325
    0000091a: 	movq	0xb0(%rsp), %rdi
    00000922: 	cmpq	0x58(%rsp), %rdi
    00000927: 	je	.Ltmp1568 # Offset: 2343
    00000929: 	movq	0xc0(%rsp), %rax
    00000931: 	leaq	0x1(%rax), %rsi
    00000935: 	callq	_ZdlPvm@PLT # Offset: 2357
.Ltmp1568:
    0000093a: 	movq	0x40(%rsp), %rsi
    0000093f: 	movq	0x30(%rsp), %rdi
    00000944: 	leaq	DATAat0x14244(%rip), %rdx
    0000094b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2379
    00000950: 	callq	clock@PLT # Offset: 2384
    00000955: 	movl	iterations(%rip), %edi
    0000095b: 	xorl	%r12d, %r12d
    0000095e: 	leaq	DATAat0x141e1(%rip), %r13
    00000965: 	movq	%rax, start_time(%rip)
    0000096c: 	testl	%edi, %edi
    0000096e: 	jle	.Ltmp1569 # Offset: 2414
.Ltmp1572:
    00000970: 	movq	0x10(%rsp), %rcx
    00000975: 	xorl	%esi, %esi
    00000977: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1570:
    00000980: 	movq	(%rcx), %rax
    00000983: 	addq	$0x8, %rcx
    00000987: 	cqto
    00000989: 	idivq	%r15
    0000098c: 	addq	%rdx, %rsi
    0000098f: 	cmpq	%rcx, %rbx
    00000992: 	jne	.Ltmp1570 # Offset: 2450
    00000994: 	cvttsd2si	init_value(%rip), %rax
    0000099d: 	cqto
    0000099f: 	idivq	%r15
    000009a2: 	imulq	$0xfa0, %rdx, %rdx
    000009a9: 	cmpq	%rdx, %rsi
    000009ac: 	je	.Ltmp1571 # Offset: 2476
    000009ae: 	movq	0xd0(%rsp), %rdx
    000009b6: 	movq	%r13, %rsi
    000009b9: 	movl	$0x1, %edi
    000009be: 	xorl	%eax, %eax
    000009c0: 	callq	__printf_chk@PLT # Offset: 2496
    000009c5: 	movl	iterations(%rip), %edi
.Ltmp1571:
    000009cb: 	addl	$0x1, %r12d
    000009cf: 	cmpl	%edi, %r12d
    000009d2: 	jl	.Ltmp1572 # Offset: 2514
.Ltmp1569:
    000009d4: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000009db: 	movq	"_ZL7gLabels/1"+48(%rip), %r13
    000009e2: 	subq	$0x20, %rax
    000009e6: 	cmpq	%rax, %r13
    000009e9: 	je	.Ltmp1573 # Offset: 2537
    000009ef: 	leaq	0x10(%r13), %rdi
    000009f3: 	movq	0xd8(%rsp), %r12
    000009fb: 	movq	%rdi, (%r13)
    000009ff: 	movq	0xd0(%rsp), %r14
    00000a07: 	movq	%r14, %rax
    00000a0a: 	addq	%r12, %rax
    00000a0d: 	je	.Ltmp1574 # Offset: 2573
    00000a0f: 	testq	%r14, %r14
    00000a12: 	je	.Ltmp1575 # Offset: 2578
.Ltmp1574:
    00000a18: 	movq	%r12, 0x88(%rsp)
    00000a20: 	cmpq	$0xf, %r12
    00000a24: 	ja	.Ltmp1576 # Offset: 2596
    00000a2a: 	cmpq	$0x1, %r12
    00000a2e: 	jne	.Ltmp1577 # Offset: 2606
    00000a34: 	movzbl	(%r14), %eax
    00000a38: 	movb	%al, 0x10(%r13)
.Ltmp1731:
    00000a3c: 	movq	%r12, 0x8(%r13)
    00000a40: 	movb	$0x0, (%rdi,%r12)
    00000a45: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000a4c: 	addq	$0x20, %rax
    00000a50: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1702:
    00000a57: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000a5e: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000a65: 	je	.Ltmp1578 # Offset: 2661
.Ltmp1701:
    00000a6b: 	movq	-0x20(%rax), %r12
    00000a6f: 	callq	clock@PLT # Offset: 2671
    00000a74: 	pxor	%xmm0, %xmm0
    00000a78: 	movq	%rax, end_time(%rip)
    00000a7f: 	movq	%r12, %rdi
    00000a82: 	subq	start_time(%rip), %rax
    00000a89: 	cvtsi2sd	%rax, %xmm0
    00000a8e: 	divsd	DATAat0x14308(%rip), %xmm0
    00000a96: 	callq	_Z13record_resultdPKc # Offset: 2710
    00000a9b: 	movq	0xd0(%rsp), %rdi
    00000aa3: 	cmpq	0x8(%rsp), %rdi
    00000aa8: 	je	.Ltmp1579 # Offset: 2728
    00000aaa: 	movq	0xe0(%rsp), %rax
    00000ab2: 	leaq	0x1(%rax), %rsi
    00000ab6: 	callq	_ZdlPvm@PLT # Offset: 2742
.Ltmp1579:
    00000abb: 	movq	0x8(%rsp), %rax
    00000ac0: 	movq	0x90(%rsp), %r13
    00000ac8: 	movq	0x98(%rsp), %r12
    00000ad0: 	movq	%rax, 0xd0(%rsp)
    00000ad8: 	movq	%r13, %rax
    00000adb: 	addq	%r12, %rax
    00000ade: 	je	.Ltmp1580 # Offset: 2782
    00000ae0: 	testq	%r13, %r13
    00000ae3: 	je	.Ltmp1581 # Offset: 2787
.Ltmp1580:
    00000ae9: 	movq	%r12, 0x88(%rsp)
    00000af1: 	cmpq	$0xf, %r12
    00000af5: 	ja	.Ltmp1582 # Offset: 2805
    00000afb: 	cmpq	$0x1, %r12
    00000aff: 	jne	.Ltmp1583 # Offset: 2815
    00000b05: 	movzbl	(%r13), %eax
    00000b0a: 	movb	%al, 0xe0(%rsp)
    00000b11: 	movq	0x8(%rsp), %rax
.Ltmp1699:
    00000b16: 	movq	%r12, 0xd8(%rsp)
    00000b1e: 	movb	$0x0, (%rax,%r12)
    00000b23: 	movabsq	$0x3fffffffffffffff, %rax
    00000b2d: 	subq	0xd8(%rsp), %rax
    00000b35: 	cmpq	$0x1a, %rax
    00000b39: 	jbe	.Ltmp1584 # Offset: 2873
    00000b3f: 	movq	0x30(%rsp), %rdi
    00000b44: 	movl	$0x1b, %edx
    00000b49: 	leaq	DATAat0x14255(%rip), %rsi
    00000b50: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 2896
    00000b55: 	callq	clock@PLT # Offset: 2901
    00000b5a: 	movl	0x38(%rsp), %ecx
    00000b5e: 	movq	%rax, start_time(%rip)
    00000b65: 	movabsq	$0x100000000, %rax
    00000b6f: 	testl	%ecx, %ecx
    00000b71: 	je	.Ltmp1585 # Offset: 2929
    00000b73: 	js	.Ltmp1586 # Offset: 2931
    00000b79: 	movl	$0x80000000, %eax
    00000b7e: 	xorl	%edx, %edx
.Ltmp1587:
    00000b80: 	shrl	%eax
    00000b82: 	addl	$0x1, %edx
    00000b85: 	testl	%eax, %ecx
    00000b87: 	je	.Ltmp1587 # Offset: 2951
    00000b89: 	movl	$0x20, %eax
    00000b8e: 	subl	%edx, %eax
    00000b90: 	movl	$0x1, %edx
    00000b95: 	testl	%eax, %eax
    00000b97: 	cmovlel	%edx, %eax
    00000b9a: 	leal	-0x1(%rax), %edi
    00000b9d: 	leal	0x1f(%rax), %ecx
    00000ba0: 	movl	$0x1, %eax
    00000ba5: 	movl	%edi, 0x38(%rsp)
    00000ba9: 	shlq	%cl, %rax
.Ltmp1585:
    00000bac: 	cqto
    00000bae: 	movl	iterations(%rip), %edi
    00000bb4: 	xorl	%r13d, %r13d
    00000bb7: 	leaq	DATAat0x141e1(%rip), %r14
    00000bbe: 	idivq	0x78(%rsp)
    00000bc3: 	leal	0x1(%rax), %r12d
    00000bc7: 	movslq	%r12d, %r12
    00000bca: 	testl	%edi, %edi
    00000bcc: 	jle	.Ltmp1588 # Offset: 3020
    00000bd2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1591:
    00000bd8: 	movq	0x10(%rsp), %r8
    00000bdd: 	movl	0x50(%rsp), %r9d
    00000be2: 	xorl	%esi, %esi
    00000be4: 	movl	0x38(%rsp), %ecx
    00000be8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1589:
    00000bf0: 	movq	(%r8), %rdx
    00000bf3: 	addq	$0x8, %r8
    00000bf7: 	movslq	%edx, %rax
    00000bfa: 	imulq	%r12, %rax
    00000bfe: 	sarq	$0x20, %rax
    00000c02: 	addl	%edx, %eax
    00000c04: 	sarl	%cl, %eax
    00000c06: 	movl	%eax, %r10d
    00000c09: 	movl	%edx, %eax
    00000c0b: 	shrl	$0x1f, %eax
    00000c0e: 	addl	%r10d, %eax
    00000c11: 	xorl	%ebp, %eax
    00000c13: 	subl	%ebp, %eax
    00000c15: 	imull	%r9d, %eax
    00000c19: 	subl	%eax, %edx
    00000c1b: 	movslq	%edx, %rdx
    00000c1e: 	addq	%rdx, %rsi
    00000c21: 	cmpq	%r8, %rbx
    00000c24: 	jne	.Ltmp1589 # Offset: 3108
    00000c26: 	cvttsd2si	init_value(%rip), %rax
    00000c2f: 	cqto
    00000c31: 	idivq	%r15
    00000c34: 	imulq	$0xfa0, %rdx, %rdx
    00000c3b: 	cmpq	%rdx, %rsi
    00000c3e: 	je	.Ltmp1590 # Offset: 3134
    00000c40: 	movq	0xd0(%rsp), %rdx
    00000c48: 	movq	%r14, %rsi
    00000c4b: 	movl	$0x1, %edi
    00000c50: 	xorl	%eax, %eax
    00000c52: 	callq	__printf_chk@PLT # Offset: 3154
    00000c57: 	movl	iterations(%rip), %edi
.Ltmp1590:
    00000c5d: 	addl	$0x1, %r13d
    00000c61: 	cmpl	%edi, %r13d
    00000c64: 	jl	.Ltmp1591 # Offset: 3172
.Ltmp1588:
    00000c6a: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000c71: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000c78: 	subq	$0x20, %rax
    00000c7c: 	cmpq	%rax, %rdi
    00000c7f: 	je	.Ltmp1592 # Offset: 3199
    00000c85: 	leaq	0x10(%rdi), %rax
    00000c89: 	movq	0xd8(%rsp), %rdx
    00000c91: 	movq	%rax, (%rdi)
    00000c94: 	movq	0xd0(%rsp), %rsi
    00000c9c: 	addq	%rsi, %rdx
    00000c9f: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 3231
    00000ca4: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000cab: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000cb2: 	addq	$0x20, %rax
    00000cb6: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000cbd: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00000cc4: 	je	.Ltmp1593 # Offset: 3268
.Ltmp1700:
    00000cca: 	movq	-0x20(%rax), %rbp
    00000cce: 	callq	clock@PLT # Offset: 3278
    00000cd3: 	pxor	%xmm0, %xmm0
    00000cd7: 	movq	%rax, end_time(%rip)
    00000cde: 	movq	%rbp, %rdi
    00000ce1: 	subq	start_time(%rip), %rax
    00000ce8: 	cvtsi2sd	%rax, %xmm0
    00000ced: 	divsd	DATAat0x14308(%rip), %xmm0
    00000cf5: 	callq	_Z13record_resultdPKc # Offset: 3317
    00000cfa: 	movq	0xd0(%rsp), %rdi
    00000d02: 	cmpq	0x8(%rsp), %rdi
    00000d07: 	je	.Ltmp1594 # Offset: 3335
    00000d09: 	movq	0xe0(%rsp), %rax
    00000d11: 	leaq	0x1(%rax), %rsi
    00000d15: 	callq	_ZdlPvm@PLT # Offset: 3349
.Ltmp1594:
    00000d1a: 	movq	0x40(%rsp), %rsi
    00000d1f: 	movq	0x60(%rsp), %rdi
    00000d24: 	leaq	DATAat0x14271(%rip), %rdx
    00000d2b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3371
    00000d30: 	callq	clock@PLT # Offset: 3376
    00000d35: 	movl	iterations(%rip), %esi
    00000d3b: 	movl	$0x0, 0x18(%rsp)
    00000d43: 	movabsq	$0x2d82d82d82d82d83, %r12
    00000d4d: 	movq	%rax, start_time(%rip)
    00000d54: 	leaq	0x88(%rsp), %rax
    00000d5c: 	movq	%rax, 0x20(%rsp)
    00000d61: 	testl	%esi, %esi
    00000d63: 	jle	.Ltmp1595 # Offset: 3427
    00000d69: 	nopl	(%rax) # Size: 7
.Ltmp1603:
    00000d70: 	movq	0x10(%rsp), %rsi
    00000d75: 	xorl	%ebp, %ebp
    00000d77: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1596:
    00000d80: 	movq	(%rsi), %rcx
    00000d83: 	addq	$0x8, %rsi
    00000d87: 	movq	%rcx, %rax
    00000d8a: 	imulq	%r12
    00000d8d: 	movq	%rcx, %rax
    00000d90: 	sarq	$0x3f, %rax
    00000d94: 	sarq	$0x6, %rdx
    00000d98: 	subq	%rax, %rdx
    00000d9b: 	imulq	$0x168, %rdx, %rdx
    00000da2: 	subq	%rdx, %rcx
    00000da5: 	addq	%rcx, %rbp
    00000da8: 	cmpq	%rsi, %rbx
    00000dab: 	jne	.Ltmp1596 # Offset: 3499
    00000dad: 	movq	0x8(%rsp), %rax
    00000db2: 	movq	0xb0(%rsp), %r14
    00000dba: 	movq	0xb8(%rsp), %r13
    00000dc2: 	movq	%rax, 0xd0(%rsp)
    00000dca: 	movq	%r14, %rax
    00000dcd: 	addq	%r13, %rax
    00000dd0: 	je	.Ltmp1597 # Offset: 3536
    00000dd2: 	testq	%r14, %r14
    00000dd5: 	je	.Ltmp1598 # Offset: 3541
.Ltmp1597:
    00000ddb: 	movq	%r13, 0x88(%rsp)
    00000de3: 	cmpq	$0xf, %r13
    00000de7: 	ja	.Ltmp1599 # Offset: 3559
    00000ded: 	cmpq	$0x1, %r13
    00000df1: 	jne	.Ltmp1600 # Offset: 3569
    00000df7: 	movzbl	(%r14), %eax
    00000dfb: 	movb	%al, 0xe0(%rsp)
    00000e02: 	movq	0x8(%rsp), %rax
.Ltmp1687:
    00000e07: 	movq	%r13, 0xd8(%rsp)
    00000e0f: 	movb	$0x0, (%rax,%r13)
    00000e14: 	cvttsd2si	init_value(%rip), %rcx
    00000e1d: 	movq	%rcx, %rax
    00000e20: 	imulq	%r12
    00000e23: 	movq	%rcx, %rax
    00000e26: 	sarq	$0x3f, %rax
    00000e2a: 	sarq	$0x6, %rdx
    00000e2e: 	subq	%rax, %rdx
    00000e31: 	imulq	$0x168, %rdx, %rdx
    00000e38: 	subq	%rdx, %rcx
    00000e3b: 	imulq	$0xfa0, %rcx, %rcx
    00000e42: 	cmpq	%rcx, %rbp
    00000e45: 	je	.Ltmp1601 # Offset: 3653
    00000e47: 	movq	0xd0(%rsp), %rdx
    00000e4f: 	leaq	DATAat0x141e1(%rip), %rsi
    00000e56: 	movl	$0x1, %edi
    00000e5b: 	xorl	%eax, %eax
    00000e5d: 	callq	__printf_chk@PLT # Offset: 3677
.Ltmp1601:
    00000e62: 	movq	0xd0(%rsp), %rdi
    00000e6a: 	cmpq	0x8(%rsp), %rdi
    00000e6f: 	je	.Ltmp1602 # Offset: 3695
    00000e75: 	movq	0xe0(%rsp), %rax
    00000e7d: 	leaq	0x1(%rax), %rsi
    00000e81: 	callq	_ZdlPvm@PLT # Offset: 3713
    00000e86: 	addl	$0x1, 0x18(%rsp)
    00000e8b: 	movl	0x18(%rsp), %eax
    00000e8f: 	cmpl	iterations(%rip), %eax
    00000e95: 	jl	.Ltmp1603 # Offset: 3733
.Ltmp1595:
    00000e9b: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00000ea2: 	movq	"_ZL7gLabels/1"+48(%rip), %rdi
    00000ea9: 	subq	$0x20, %rax
    00000ead: 	cmpq	%rax, %rdi
    00000eb0: 	je	.Ltmp1604 # Offset: 3760
    00000eb6: 	leaq	0x10(%rdi), %rax
    00000eba: 	movq	0xb8(%rsp), %rdx
    00000ec2: 	movq	%rax, (%rdi)
    00000ec5: 	movq	0xb0(%rsp), %rsi
    00000ecd: 	addq	%rsi, %rdx
    00000ed0: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag.constprop.0/1" # Offset: 3792
    00000ed5: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00000edc: 	addq	$0x20, %rax
    00000ee0: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1710:
    00000ee7: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00000eee: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00000ef5: 	je	.Ltmp1605 # Offset: 3829
.Ltmp1709:
    00000efb: 	movq	-0x20(%rax), %rbp
    00000eff: 	callq	clock@PLT # Offset: 3839
    00000f04: 	pxor	%xmm0, %xmm0
    00000f08: 	movq	%rax, end_time(%rip)
    00000f0f: 	movq	%rbp, %rdi
    00000f12: 	subq	start_time(%rip), %rax
    00000f19: 	cvtsi2sd	%rax, %xmm0
    00000f1e: 	divsd	DATAat0x14308(%rip), %xmm0
    00000f26: 	callq	_Z13record_resultdPKc # Offset: 3878
    00000f2b: 	movq	0xb0(%rsp), %rdi
    00000f33: 	cmpq	0x58(%rsp), %rdi
    00000f38: 	je	.Ltmp1606 # Offset: 3896
    00000f3a: 	movq	0xc0(%rsp), %rax
    00000f42: 	leaq	0x1(%rax), %rsi
    00000f46: 	callq	_ZdlPvm@PLT # Offset: 3910
.Ltmp1606:
    00000f4b: 	movq	0x40(%rsp), %rsi
    00000f50: 	movq	0x60(%rsp), %rdi
    00000f55: 	leaq	DATAat0x14282(%rip), %rdx
    00000f5c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3932
    00000f61: 	callq	clock@PLT # Offset: 3937
    00000f66: 	movl	iterations(%rip), %ecx
    00000f6c: 	xorl	%r14d, %r14d
    00000f6f: 	movq	%rax, start_time(%rip)
    00000f76: 	testl	%ecx, %ecx
    00000f78: 	jle	.Ltmp1607 # Offset: 3960
    00000f7e: 	nop # Size: 2
.Ltmp1615:
    00000f80: 	movq	0x10(%rsp), %rdx
    00000f85: 	xorl	%ebp, %ebp
    00000f87: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1608:
    00000f90: 	movq	(%rdx), %rcx
    00000f93: 	addq	$0x8, %rdx
    00000f97: 	movslq	%ecx, %rax
    00000f9a: 	movl	%ecx, %esi
    00000f9c: 	imulq	$-0x49f49f49, %rax, %rax
    00000fa3: 	shrl	$0x1f, %esi
    00000fa6: 	sarq	$0x20, %rax
    00000faa: 	addl	%ecx, %eax
    00000fac: 	sarl	$0x8, %eax
    00000faf: 	addl	%esi, %eax
    00000fb1: 	imull	$0xfffffe98, %eax, %eax
    00000fb7: 	addl	%ecx, %eax
    00000fb9: 	cltq
    00000fbb: 	addq	%rax, %rbp
    00000fbe: 	cmpq	%rdx, %rbx
    00000fc1: 	jne	.Ltmp1608 # Offset: 4033
    00000fc3: 	movq	0x8(%rsp), %rax
    00000fc8: 	movq	0xb0(%rsp), %r13
    00000fd0: 	movq	0xb8(%rsp), %r12
    00000fd8: 	movq	%rax, 0xd0(%rsp)
    00000fe0: 	movq	%r13, %rax
    00000fe3: 	addq	%r12, %rax
    00000fe6: 	je	.Ltmp1609 # Offset: 4070
    00000fe8: 	testq	%r13, %r13
    00000feb: 	je	.Ltmp1610 # Offset: 4075
.Ltmp1609:
    00000ff1: 	movq	%r12, 0x88(%rsp)
    00000ff9: 	cmpq	$0xf, %r12
    00000ffd: 	ja	.Ltmp1611 # Offset: 4093
    00001003: 	cmpq	$0x1, %r12
    00001007: 	jne	.Ltmp1612 # Offset: 4103
    0000100d: 	movzbl	(%r13), %eax
    00001012: 	movb	%al, 0xe0(%rsp)
    00001019: 	movq	0x8(%rsp), %rax
.Ltmp1693:
    0000101e: 	movq	%r12, 0xd8(%rsp)
    00001026: 	movb	$0x0, (%rax,%r12)
    0000102b: 	cvttsd2si	init_value(%rip), %rdx
    00001034: 	movslq	%edx, %rax
    00001037: 	movl	%edx, %ecx
    00001039: 	imulq	$-0x49f49f49, %rax, %rax
    00001040: 	shrl	$0x1f, %ecx
    00001043: 	sarq	$0x20, %rax
    00001047: 	addl	%edx, %eax
    00001049: 	sarl	$0x8, %eax
    0000104c: 	addl	%ecx, %eax
    0000104e: 	imull	$0xfffffe98, %eax, %eax
    00001054: 	addl	%edx, %eax
    00001056: 	cltq
    00001058: 	imulq	$0xfa0, %rax, %rax
    0000105f: 	cmpq	%rax, %rbp
    00001062: 	je	.Ltmp1613 # Offset: 4194
    00001064: 	movq	0xd0(%rsp), %rdx
    0000106c: 	leaq	DATAat0x141e1(%rip), %rsi
    00001073: 	movl	$0x1, %edi
    00001078: 	xorl	%eax, %eax
    0000107a: 	callq	__printf_chk@PLT # Offset: 4218
.Ltmp1613:
    0000107f: 	movq	0xd0(%rsp), %rdi
    00001087: 	cmpq	0x8(%rsp), %rdi
    0000108c: 	je	.Ltmp1614 # Offset: 4236
    00001092: 	movq	0xe0(%rsp), %rax
    0000109a: 	addl	$0x1, %r14d
    0000109e: 	leaq	0x1(%rax), %rsi
    000010a2: 	callq	_ZdlPvm@PLT # Offset: 4258
    000010a7: 	cmpl	iterations(%rip), %r14d
    000010ae: 	jl	.Ltmp1615 # Offset: 4270
.Ltmp1607:
    000010b4: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000010bb: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    000010c2: 	subq	$0x20, %rax
    000010c6: 	cmpq	%rax, %rbp
    000010c9: 	je	.Ltmp1616 # Offset: 4297
    000010cf: 	leaq	0x10(%rbp), %rdi
    000010d3: 	movq	0xb8(%rsp), %r12
    000010db: 	movq	%rdi, (%rbp)
    000010df: 	movq	0xb0(%rsp), %r13
    000010e7: 	movq	%r13, %rax
    000010ea: 	addq	%r12, %rax
    000010ed: 	je	.Ltmp1617 # Offset: 4333
    000010ef: 	testq	%r13, %r13
    000010f2: 	je	.Ltmp1618 # Offset: 4338
.Ltmp1617:
    000010f8: 	movq	%r12, 0x88(%rsp)
    00001100: 	cmpq	$0xf, %r12
    00001104: 	ja	.Ltmp1619 # Offset: 4356
    0000110a: 	cmpq	$0x1, %r12
    0000110e: 	jne	.Ltmp1620 # Offset: 4366
    00001114: 	movzbl	(%r13), %eax
    00001119: 	movb	%al, 0x10(%rbp)
.Ltmp1729:
    0000111c: 	movq	%r12, 0x8(%rbp)
    00001120: 	movb	$0x0, (%rdi,%r12)
    00001125: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000112c: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001133: 	addq	$0x20, %rax
    00001137: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000113e: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00001145: 	je	.Ltmp1621 # Offset: 4421
.Ltmp1714:
    0000114b: 	movq	-0x20(%rax), %rbp
    0000114f: 	callq	clock@PLT # Offset: 4431
    00001154: 	pxor	%xmm0, %xmm0
    00001158: 	movq	%rax, end_time(%rip)
    0000115f: 	movq	%rbp, %rdi
    00001162: 	subq	start_time(%rip), %rax
    00001169: 	cvtsi2sd	%rax, %xmm0
    0000116e: 	divsd	DATAat0x14308(%rip), %xmm0
    00001176: 	callq	_Z13record_resultdPKc # Offset: 4470
    0000117b: 	movq	0xb0(%rsp), %rdi
    00001183: 	cmpq	0x58(%rsp), %rdi
    00001188: 	je	.Ltmp1622 # Offset: 4488
    0000118a: 	movq	0xc0(%rsp), %rax
    00001192: 	leaq	0x1(%rax), %rsi
    00001196: 	callq	_ZdlPvm@PLT # Offset: 4502
.Ltmp1622:
    0000119b: 	movq	0x40(%rsp), %rsi
    000011a0: 	movq	0x30(%rsp), %rdi
    000011a5: 	leaq	DATAat0x1429e(%rip), %rdx
    000011ac: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4524
    000011b1: 	callq	clock@PLT # Offset: 4529
    000011b6: 	movl	iterations(%rip), %edi
    000011bc: 	xorl	%ebp, %ebp
    000011be: 	leaq	DATAat0x141e1(%rip), %r12
    000011c5: 	movq	%rax, start_time(%rip)
    000011cc: 	testl	%edi, %edi
    000011ce: 	jle	.Ltmp1623 # Offset: 4558
.Ltmp1626:
    000011d0: 	movq	0x10(%rsp), %rcx
    000011d5: 	xorl	%esi, %esi
    000011d7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1624:
    000011e0: 	movq	(%rcx), %rax
    000011e3: 	addq	$0x8, %rcx
    000011e7: 	cqto
    000011e9: 	idivq	%r15
    000011ec: 	addq	%rdx, %rax
    000011ef: 	addq	%rax, %rsi
    000011f2: 	cmpq	%rcx, %rbx
    000011f5: 	jne	.Ltmp1624 # Offset: 4597
    000011f7: 	cvttsd2si	init_value(%rip), %rax
    00001200: 	cqto
    00001202: 	idivq	%r15
    00001205: 	addq	%rdx, %rax
    00001208: 	imulq	$0xfa0, %rax, %rax
    0000120f: 	cmpq	%rax, %rsi
    00001212: 	je	.Ltmp1625 # Offset: 4626
    00001214: 	movq	0xd0(%rsp), %rdx
    0000121c: 	movq	%r12, %rsi
    0000121f: 	movl	$0x1, %edi
    00001224: 	xorl	%eax, %eax
    00001226: 	callq	__printf_chk@PLT # Offset: 4646
    0000122b: 	movl	iterations(%rip), %edi
.Ltmp1625:
    00001231: 	addl	$0x1, %ebp
    00001234: 	cmpl	%edi, %ebp
    00001236: 	jl	.Ltmp1626 # Offset: 4662
.Ltmp1623:
    00001238: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    0000123f: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    00001246: 	subq	$0x20, %rax
    0000124a: 	cmpq	%rax, %rbp
    0000124d: 	je	.Ltmp1627 # Offset: 4685
    00001253: 	leaq	0x10(%rbp), %rdi
    00001257: 	movq	0xd8(%rsp), %r12
    0000125f: 	movq	%rdi, (%rbp)
    00001263: 	movq	0xd0(%rsp), %r13
    0000126b: 	movq	%r13, %rax
    0000126e: 	addq	%r12, %rax
    00001271: 	je	.Ltmp1628 # Offset: 4721
    00001273: 	testq	%r13, %r13
    00001276: 	je	.Ltmp1629 # Offset: 4726
.Ltmp1628:
    0000127c: 	movq	%r12, 0x88(%rsp)
    00001284: 	cmpq	$0xf, %r12
    00001288: 	ja	.Ltmp1630 # Offset: 4744
    0000128e: 	cmpq	$0x1, %r12
    00001292: 	jne	.Ltmp1631 # Offset: 4754
    00001298: 	movzbl	(%r13), %eax
    0000129d: 	movb	%al, 0x10(%rbp)
.Ltmp1727:
    000012a0: 	movq	%r12, 0x8(%rbp)
    000012a4: 	movb	$0x0, (%rdi,%r12)
    000012a9: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    000012b0: 	addq	$0x20, %rax
    000012b4: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1716:
    000012bb: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    000012c2: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    000012c9: 	je	.Ltmp1632 # Offset: 4809
.Ltmp1715:
    000012cf: 	movq	-0x20(%rax), %rbp
    000012d3: 	callq	clock@PLT # Offset: 4819
    000012d8: 	pxor	%xmm0, %xmm0
    000012dc: 	movq	%rax, end_time(%rip)
    000012e3: 	movq	%rbp, %rdi
    000012e6: 	subq	start_time(%rip), %rax
    000012ed: 	cvtsi2sd	%rax, %xmm0
    000012f2: 	divsd	DATAat0x14308(%rip), %xmm0
    000012fa: 	callq	_Z13record_resultdPKc # Offset: 4858
    000012ff: 	movq	0xd0(%rsp), %rdi
    00001307: 	cmpq	0x8(%rsp), %rdi
    0000130c: 	je	.Ltmp1633 # Offset: 4876
    0000130e: 	movq	0xe0(%rsp), %rax
    00001316: 	leaq	0x1(%rax), %rsi
    0000131a: 	callq	_ZdlPvm@PLT # Offset: 4890
.Ltmp1633:
    0000131f: 	movq	0x40(%rsp), %rsi
    00001324: 	movq	0x60(%rsp), %rdi
    00001329: 	leaq	DATAat0x142d0(%rip), %rdx
    00001330: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 4912
    00001335: 	callq	clock@PLT # Offset: 4917
    0000133a: 	movl	iterations(%rip), %edx
    00001340: 	xorl	%r14d, %r14d
    00001343: 	leaq	DATAat0x141e1(%rip), %r15
    0000134a: 	movq	%rax, start_time(%rip)
    00001351: 	testl	%edx, %edx
    00001353: 	jle	.Ltmp1634 # Offset: 4947
    00001359: 	nopl	(%rax) # Size: 7
.Ltmp1642:
    00001360: 	movq	0x10(%rsp), %rcx
    00001365: 	xorl	%ebp, %ebp
    00001367: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1635:
    00001370: 	movq	(%rcx), %rdx
    00001373: 	addq	$0x8, %rcx
    00001377: 	movslq	%edx, %rax
    0000137a: 	movl	%edx, %esi
    0000137c: 	imulq	$-0x49f49f49, %rax, %rax
    00001383: 	shrl	$0x1f, %esi
    00001386: 	sarq	$0x20, %rax
    0000138a: 	addl	%edx, %eax
    0000138c: 	sarl	$0x8, %eax
    0000138f: 	addl	%esi, %eax
    00001391: 	imull	$0xfffffe99, %eax, %eax
    00001397: 	addl	%edx, %eax
    00001399: 	cltq
    0000139b: 	addq	%rax, %rbp
    0000139e: 	cmpq	%rcx, %rbx
    000013a1: 	jne	.Ltmp1635 # Offset: 5025
    000013a3: 	movq	0x8(%rsp), %rax
    000013a8: 	movq	0xb0(%rsp), %r13
    000013b0: 	movq	0xb8(%rsp), %r12
    000013b8: 	movq	%rax, 0xd0(%rsp)
    000013c0: 	movq	%r13, %rax
    000013c3: 	addq	%r12, %rax
    000013c6: 	je	.Ltmp1636 # Offset: 5062
    000013c8: 	testq	%r13, %r13
    000013cb: 	je	.Ltmp1637 # Offset: 5067
.Ltmp1636:
    000013d1: 	movq	%r12, 0x88(%rsp)
    000013d9: 	cmpq	$0xf, %r12
    000013dd: 	ja	.Ltmp1638 # Offset: 5085
    000013e3: 	cmpq	$0x1, %r12
    000013e7: 	jne	.Ltmp1639 # Offset: 5095
    000013ed: 	movzbl	(%r13), %eax
    000013f2: 	movb	%al, 0xe0(%rsp)
    000013f9: 	movq	0x8(%rsp), %rax
.Ltmp1691:
    000013fe: 	movq	%r12, 0xd8(%rsp)
    00001406: 	movb	$0x0, (%rax,%r12)
    0000140b: 	cvttsd2si	init_value(%rip), %rdx
    00001414: 	movslq	%edx, %rax
    00001417: 	movl	%edx, %ecx
    00001419: 	imulq	$-0x49f49f49, %rax, %rax
    00001420: 	shrl	$0x1f, %ecx
    00001423: 	sarq	$0x20, %rax
    00001427: 	addl	%edx, %eax
    00001429: 	sarl	$0x8, %eax
    0000142c: 	addl	%ecx, %eax
    0000142e: 	imull	$0xfffffe99, %eax, %eax
    00001434: 	addl	%edx, %eax
    00001436: 	cltq
    00001438: 	imulq	$0xfa0, %rax, %rax
    0000143f: 	cmpq	%rax, %rbp
    00001442: 	je	.Ltmp1640 # Offset: 5186
    00001444: 	movq	0xd0(%rsp), %rdx
    0000144c: 	movq	%r15, %rsi
    0000144f: 	movl	$0x1, %edi
    00001454: 	xorl	%eax, %eax
    00001456: 	callq	__printf_chk@PLT # Offset: 5206
.Ltmp1640:
    0000145b: 	movq	0xd0(%rsp), %rdi
    00001463: 	cmpq	0x8(%rsp), %rdi
    00001468: 	je	.Ltmp1641 # Offset: 5224
    0000146e: 	movq	0xe0(%rsp), %rax
    00001476: 	addl	$0x1, %r14d
    0000147a: 	leaq	0x1(%rax), %rsi
    0000147e: 	callq	_ZdlPvm@PLT # Offset: 5246
    00001483: 	cmpl	iterations(%rip), %r14d
    0000148a: 	jl	.Ltmp1642 # Offset: 5258
.Ltmp1634:
    00001490: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    00001497: 	movq	"_ZL7gLabels/1"+48(%rip), %rbp
    0000149e: 	subq	$0x20, %rax
    000014a2: 	cmpq	%rax, %rbp
    000014a5: 	je	.Ltmp1643 # Offset: 5285
    000014ab: 	leaq	0x10(%rbp), %rdi
    000014af: 	movq	0xb8(%rsp), %r12
    000014b7: 	movq	%rdi, (%rbp)
    000014bb: 	movq	0xb0(%rsp), %r13
    000014c3: 	movq	%r13, %rax
    000014c6: 	addq	%r12, %rax
    000014c9: 	je	.Ltmp1644 # Offset: 5321
    000014cb: 	testq	%r13, %r13
    000014ce: 	je	.Ltmp1645 # Offset: 5326
.Ltmp1644:
    000014d4: 	movq	%r12, 0x88(%rsp)
    000014dc: 	cmpq	$0xf, %r12
    000014e0: 	ja	.Ltmp1646 # Offset: 5344
    000014e6: 	cmpq	$0x1, %r12
    000014ea: 	jne	.Ltmp1647 # Offset: 5354
    000014f0: 	movzbl	(%r13), %eax
    000014f5: 	movb	%al, 0x10(%rbp)
.Ltmp1722:
    000014f8: 	movq	%r12, 0x8(%rbp)
    000014fc: 	movb	$0x0, (%rdi,%r12)
    00001501: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001508: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    0000150f: 	addq	$0x20, %rax
    00001513: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    0000151a: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
    00001521: 	je	.Ltmp1648 # Offset: 5409
.Ltmp1713:
    00001527: 	movq	-0x20(%rax), %rbp
    0000152b: 	callq	clock@PLT # Offset: 5419
    00001530: 	pxor	%xmm0, %xmm0
    00001534: 	movq	%rax, end_time(%rip)
    0000153b: 	movq	%rbp, %rdi
    0000153e: 	subq	start_time(%rip), %rax
    00001545: 	cvtsi2sd	%rax, %xmm0
    0000154a: 	divsd	DATAat0x14308(%rip), %xmm0
    00001552: 	callq	_Z13record_resultdPKc # Offset: 5458
    00001557: 	movq	0xb0(%rsp), %rdi
    0000155f: 	cmpq	0x58(%rsp), %rdi
    00001564: 	je	.Ltmp1649 # Offset: 5476
    00001566: 	movq	0xc0(%rsp), %rax
    0000156e: 	leaq	0x1(%rax), %rsi
    00001572: 	callq	_ZdlPvm@PLT # Offset: 5490
.Ltmp1649:
    00001577: 	movq	0x40(%rsp), %rsi
    0000157c: 	movq	0x60(%rsp), %rdi
    00001581: 	leaq	DATAat0x142b5(%rip), %rdx
    00001588: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 5512
    0000158d: 	callq	clock@PLT # Offset: 5517
    00001592: 	xorl	%r15d, %r15d
    00001595: 	movabsq	$0x2d82d82d82d82d83, %r12
    0000159f: 	movq	%rax, start_time(%rip)
    000015a6: 	leaq	0x88(%rsp), %rax
    000015ae: 	movq	%rax, 0x18(%rsp)
    000015b3: 	movl	iterations(%rip), %eax
    000015b9: 	testl	%eax, %eax
    000015bb: 	jle	.Ltmp1650 # Offset: 5563
    000015c1: 	nopl	(%rax) # Size: 7
.Ltmp1658:
    000015c8: 	movq	0x10(%rsp), %rcx
    000015cd: 	xorl	%ebp, %ebp
    000015cf: 	nop # Size: 1
.Ltmp1651:
    000015d0: 	movq	(%rcx), %rsi
    000015d3: 	addq	$0x8, %rcx
    000015d7: 	movq	%rsi, %rax
    000015da: 	imulq	%r12
    000015dd: 	movq	%rsi, %rax
    000015e0: 	sarq	$0x3f, %rax
    000015e4: 	sarq	$0x6, %rdx
    000015e8: 	subq	%rax, %rdx
    000015eb: 	imulq	$-0x167, %rdx, %rdx
    000015f2: 	leaq	(%rdx,%rsi), %rax
    000015f6: 	addq	%rax, %rbp
    000015f9: 	cmpq	%rcx, %rbx
    000015fc: 	jne	.Ltmp1651 # Offset: 5628
    000015fe: 	movq	0x8(%rsp), %rax
    00001603: 	movq	0xb0(%rsp), %r14
    0000160b: 	movq	0xb8(%rsp), %r13
    00001613: 	movq	%rax, 0xd0(%rsp)
    0000161b: 	movq	%r14, %rax
    0000161e: 	addq	%r13, %rax
    00001621: 	je	.Ltmp1652 # Offset: 5665
    00001623: 	testq	%r14, %r14
    00001626: 	je	.Ltmp1653 # Offset: 5670
.Ltmp1652:
    0000162c: 	movq	%r13, 0x88(%rsp)
    00001634: 	cmpq	$0xf, %r13
    00001638: 	ja	.Ltmp1654 # Offset: 5688
    0000163e: 	cmpq	$0x1, %r13
    00001642: 	jne	.Ltmp1655 # Offset: 5698
    00001648: 	movzbl	(%r14), %eax
    0000164c: 	movb	%al, 0xe0(%rsp)
    00001653: 	movq	0x8(%rsp), %rax
.Ltmp1695:
    00001658: 	movq	%r13, 0xd8(%rsp)
    00001660: 	movb	$0x0, (%rax,%r13)
    00001665: 	cvttsd2si	init_value(%rip), %rcx
    0000166e: 	movq	%rcx, %rax
    00001671: 	imulq	%r12
    00001674: 	movq	%rcx, %rax
    00001677: 	sarq	$0x3f, %rax
    0000167b: 	sarq	$0x6, %rdx
    0000167f: 	subq	%rax, %rdx
    00001682: 	imulq	$-0x167, %rdx, %rdx
    00001689: 	leaq	(%rdx,%rcx), %rax
    0000168d: 	imulq	$0xfa0, %rax, %rax
    00001694: 	cmpq	%rax, %rbp
    00001697: 	je	.Ltmp1656 # Offset: 5783
    00001699: 	movq	0xd0(%rsp), %rdx
    000016a1: 	leaq	DATAat0x141e1(%rip), %rsi
    000016a8: 	movl	$0x1, %edi
    000016ad: 	xorl	%eax, %eax
    000016af: 	callq	__printf_chk@PLT # Offset: 5807
.Ltmp1656:
    000016b4: 	movq	0xd0(%rsp), %rdi
    000016bc: 	cmpq	0x8(%rsp), %rdi
    000016c1: 	je	.Ltmp1657 # Offset: 5825
    000016c7: 	movq	0xe0(%rsp), %rax
    000016cf: 	addl	$0x1, %r15d
    000016d3: 	leaq	0x1(%rax), %rsi
    000016d7: 	callq	_ZdlPvm@PLT # Offset: 5847
    000016dc: 	cmpl	iterations(%rip), %r15d
    000016e3: 	jl	.Ltmp1658 # Offset: 5859
.Ltmp1650:
    000016e9: 	movq	"_ZL7gLabels/1"+64(%rip), %rax
    000016f0: 	movq	"_ZL7gLabels/1"+48(%rip), %rbx
    000016f7: 	subq	$0x20, %rax
    000016fb: 	cmpq	%rax, %rbx
    000016fe: 	je	.Ltmp1659 # Offset: 5886
    00001704: 	leaq	0x10(%rbx), %rdi
    00001708: 	movq	0xb8(%rsp), %r12
    00001710: 	movq	%rdi, (%rbx)
    00001713: 	movq	0xb0(%rsp), %rbp
    0000171b: 	movq	%rbp, %rax
    0000171e: 	addq	%r12, %rax
    00001721: 	je	.Ltmp1660 # Offset: 5921
    00001723: 	testq	%rbp, %rbp
    00001726: 	je	.Ltmp1661 # Offset: 5926
.Ltmp1660:
    0000172c: 	movq	%r12, 0x88(%rsp)
    00001734: 	cmpq	$0xf, %r12
    00001738: 	ja	.Ltmp1662 # Offset: 5944
    0000173e: 	cmpq	$0x1, %r12
    00001742: 	jne	.Ltmp1663 # Offset: 5954
    00001748: 	movzbl	(%rbp), %eax
    0000174c: 	movb	%al, 0x10(%rbx)
.Ltmp1724:
    0000174f: 	movq	%r12, 0x8(%rbx)
    00001753: 	movb	$0x0, (%rdi,%r12)
    00001758: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000175f: 	addq	$0x20, %rax
    00001763: 	movq	%rax, "_ZL7gLabels/1"+48(%rip)
.Ltmp1718:
    0000176a: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001771: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001778: 	je	.Ltmp1664 # Offset: 6008
.Ltmp1717:
    0000177e: 	movq	-0x20(%rax), %rbp
    00001782: 	callq	clock@PLT # Offset: 6018
    00001787: 	pxor	%xmm0, %xmm0
    0000178b: 	movq	%rax, end_time(%rip)
    00001792: 	movq	%rbp, %rdi
    00001795: 	subq	start_time(%rip), %rax
    0000179c: 	cvtsi2sd	%rax, %xmm0
    000017a1: 	divsd	DATAat0x14308(%rip), %xmm0
    000017a9: 	callq	_Z13record_resultdPKc # Offset: 6057
    000017ae: 	movq	0xb0(%rsp), %rdi
    000017b6: 	cmpq	0x58(%rsp), %rdi
    000017bb: 	je	.Ltmp1665 # Offset: 6075
    000017bd: 	movq	0xc0(%rsp), %rax
    000017c5: 	leaq	0x1(%rax), %rsi
    000017c9: 	callq	_ZdlPvm@PLT # Offset: 6089
.Ltmp1665:
    000017ce: 	movq	0x40(%rsp), %rsi
    000017d3: 	movq	0x30(%rsp), %rdi
    000017d8: 	leaq	DATAat0x14202(%rip), %rdx
    000017df: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 6111
    000017e4: 	movl	iterations(%rip), %edx
    000017ea: 	xorl	%r8d, %r8d
    000017ed: 	xorl	%ecx, %ecx
    000017ef: 	movl	$0xfa0, %esi
    000017f4: 	movq	0xd0(%rsp), %rdi
    000017fc: 	callq	_Z9summarizePKciiii # Offset: 6140
    00001801: 	movdqa	"_ZL7gLabels/1"+32(%rip), %xmm2
    00001809: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001810: 	movdqa	"_ZL7gLabels/1"+16(%rip), %xmm3
    00001818: 	movq	"_ZL7gLabels/1"+56(%rip), %r14
    0000181f: 	movhlps	%xmm2, %xmm6
    00001822: 	movq	%rax, 0x10(%rsp)
    00001827: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000182e: 	movq	%xmm6, %rdi
    00001833: 	movaps	%xmm3, 0x40(%rsp)
    00001838: 	movq	%xmm3, %rbp
    0000183d: 	leaq	0x8(%rdi), %r12
    00001841: 	movq	%rax, 0x30(%rsp)
    00001846: 	movaps	%xmm2, 0x20(%rsp)
    0000184b: 	movq	%r12, %r13
    0000184e: 	movq	%xmm6, 0x38(%rsp)
    00001854: 	movq	%xmm2, 0x18(%rsp)
    0000185a: 	cmpq	%r12, %rax
    0000185d: 	jbe	.Ltmp1666 # Offset: 6237
    0000185f: 	movq	%rax, %r15
    00001862: 	movq	%xmm3, 0x50(%rsp)
    00001868: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1669:
    00001870: 	movq	(%r13), %rbp
    00001874: 	leaq	0x200(%rbp), %rbx
    0000187b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1668:
    00001880: 	movq	(%rbp), %rdi
    00001884: 	leaq	0x10(%rbp), %rdx
    00001888: 	cmpq	%rdx, %rdi
    0000188b: 	je	.Ltmp1667 # Offset: 6283
    00001891: 	movq	0x10(%rbp), %rax
    00001895: 	addq	$0x20, %rbp
    00001899: 	leaq	0x1(%rax), %rsi
    0000189d: 	callq	_ZdlPvm@PLT # Offset: 6301
    000018a2: 	cmpq	%rbx, %rbp
    000018a5: 	jne	.Ltmp1668 # Offset: 6309
    000018a7: 	addq	$0x8, %r13
    000018ab: 	cmpq	%r13, %r15
    000018ae: 	ja	.Ltmp1669 # Offset: 6318
.Ltmp1683:
    000018b0: 	movq	0x50(%rsp), %rbp
.Ltmp1666:
    000018b5: 	movq	0x38(%rsp), %rdi
    000018ba: 	cmpq	%rdi, 0x30(%rsp)
    000018bf: 	jne	.Ltmp1670 # Offset: 6335
    000018c1: 	jmp	.Ltmp1671 # Offset: 6337
    000018c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1673:
    000018d0: 	movq	(%rbp), %rdi
    000018d4: 	leaq	0x10(%rbp), %rax
    000018d8: 	cmpq	%rax, %rdi
    000018db: 	je	.Ltmp1672 # Offset: 6363
    000018dd: 	movq	0x10(%rbp), %rax
    000018e1: 	leaq	0x1(%rax), %rsi
    000018e5: 	callq	_ZdlPvm@PLT # Offset: 6373
.Ltmp1672:
    000018ea: 	addq	$0x20, %rbp
.Ltmp1670:
    000018ee: 	cmpq	0x18(%rsp), %rbp
    000018f3: 	jne	.Ltmp1673 # Offset: 6387
    000018f5: 	cmpq	%r14, 0x10(%rsp)
    000018fa: 	je	.Ltmp1674 # Offset: 6394
    000018fc: 	nopl	(%rax) # Size: 4
.Ltmp1676:
    00001900: 	movq	(%r14), %rdi
    00001903: 	leaq	0x10(%r14), %rax
    00001907: 	cmpq	%rax, %rdi
    0000190a: 	je	.Ltmp1675 # Offset: 6410
    0000190c: 	movq	0x10(%r14), %rax
    00001910: 	leaq	0x1(%rax), %rsi
    00001914: 	callq	_ZdlPvm@PLT # Offset: 6420
.Ltmp1675:
    00001919: 	addq	$0x20, %r14
    0000191d: 	cmpq	%r14, 0x10(%rsp)
    00001922: 	jne	.Ltmp1676 # Offset: 6434
.Ltmp1674:
    00001924: 	movq	"_ZL7gLabels/1"+72(%rip), %rax
    0000192b: 	leaq	0x8(%rax), %rbx
    0000192f: 	cmpq	%r12, %rbx
    00001932: 	jbe	.Ltmp1677 # Offset: 6450
    00001934: 	nopl	(%rax) # Size: 4
.Ltmp1678:
    00001938: 	movq	(%r12), %rdi
    0000193c: 	movl	$0x200, %esi
    00001941: 	addq	$0x8, %r12
    00001945: 	callq	_ZdlPvm@PLT # Offset: 6469
    0000194a: 	cmpq	%r12, %rbx
    0000194d: 	ja	.Ltmp1678 # Offset: 6477
.Ltmp1677:
    0000194f: 	movdqa	0x40(%rsp), %xmm4
    00001955: 	movdqa	0x20(%rsp), %xmm5
    0000195b: 	movq	0xd0(%rsp), %rdi
    00001963: 	movaps	%xmm4, "_ZL7gLabels/1"+48(%rip)
    0000196a: 	movaps	%xmm5, "_ZL7gLabels/1"+64(%rip)
    00001971: 	cmpq	0x8(%rsp), %rdi
    00001976: 	je	.Ltmp1679 # Offset: 6518
    00001978: 	movq	0xe0(%rsp), %rax
    00001980: 	leaq	0x1(%rax), %rsi
    00001984: 	callq	_ZdlPvm@PLT # Offset: 6532
.Ltmp1679:
    00001989: 	movq	0x90(%rsp), %rdi
    00001991: 	cmpq	0x70(%rsp), %rdi
    00001996: 	je	.Ltmp1680 # Offset: 6550
    00001998: 	movq	0xa0(%rsp), %rax
    000019a0: 	leaq	0x1(%rax), %rsi
    000019a4: 	callq	_ZdlPvm@PLT # Offset: 6564
.Ltmp1680:
    000019a9: 	movq	0x7df8(%rsp), %rax
    000019b1: 	subq	%fs:0x28, %rax
    000019ba: 	jne	.Ltmp1681 # Offset: 6586
    000019c0: 	addq	$0x7e08, %rsp
    000019c7: 	popq	%rbx
    000019c8: 	popq	%rbp
    000019c9: 	popq	%r12
    000019cb: 	popq	%r13
    000019cd: 	popq	%r14
    000019cf: 	popq	%r15
    000019d1: 	retq # Offset: 6609
.Ltmp1532:
    000019d2: 	leaq	0x88(%rsp), %rsi
    000019da: 	xorl	%edx, %edx
    000019dc: 	movq	%r13, %rdi
    000019df: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 6623
    000019e4: 	movq	%rax, (%r13)
    000019e8: 	movq	%rax, %rdi
    000019eb: 	movq	0x88(%rsp), %rax
    000019f3: 	movq	%rax, 0x10(%r13)
.Ltmp1726:
    000019f7: 	movq	%r12, %rdx
    000019fa: 	movq	%r14, %rsi
    000019fd: 	callq	memcpy@PLT # Offset: 6653
    00001a02: 	movq	0x88(%rsp), %r12
    00001a0a: 	movq	(%r13), %rdi
    00001a0e: 	jmp	.Ltmp1682 # Offset: 6670
    00001a13: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1667:
    00001a18: 	addq	$0x20, %rbp
    00001a1c: 	cmpq	%rbx, %rbp
    00001a1f: 	jne	.Ltmp1668 # Offset: 6687
    00001a25: 	addq	$0x8, %r13
    00001a29: 	cmpq	%r13, %r15
    00001a2c: 	ja	.Ltmp1669 # Offset: 6700
    00001a32: 	jmp	.Ltmp1683 # Offset: 6706
    00001a37: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1548:
    00001a40: 	addl	$0x1, 0x18(%rsp)
    00001a45: 	movl	0x18(%rsp), %eax
    00001a49: 	cmpl	iterations(%rip), %eax
    00001a4f: 	jl	.Ltmp1549 # Offset: 6735
    00001a55: 	jmp	.Ltmp1541 # Offset: 6741
    00001a5a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1560:
    00001a60: 	addl	$0x1, 0x18(%rsp)
    00001a65: 	movl	0x18(%rsp), %eax
    00001a69: 	cmpl	iterations(%rip), %eax
    00001a6f: 	jl	.Ltmp1561 # Offset: 6767
    00001a75: 	jmp	.Ltmp1553 # Offset: 6773
    00001a7a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1602:
    00001a80: 	addl	$0x1, 0x18(%rsp)
    00001a85: 	movl	0x18(%rsp), %eax
    00001a89: 	cmpl	iterations(%rip), %eax
    00001a8f: 	jl	.Ltmp1603 # Offset: 6799
    00001a95: 	jmp	.Ltmp1595 # Offset: 6805
    00001a9a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1614:
    00001aa0: 	addl	$0x1, %r14d
    00001aa4: 	cmpl	iterations(%rip), %r14d
    00001aab: 	jl	.Ltmp1615 # Offset: 6827
    00001ab1: 	jmp	.Ltmp1607 # Offset: 6833
    00001ab6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1641:
    00001ac0: 	addl	$0x1, %r14d
    00001ac4: 	cmpl	iterations(%rip), %r14d
    00001acb: 	jl	.Ltmp1642 # Offset: 6859
    00001ad1: 	jmp	.Ltmp1634 # Offset: 6865
    00001ad6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1657:
    00001ae0: 	addl	$0x1, %r15d
    00001ae4: 	cmpl	iterations(%rip), %r15d
    00001aeb: 	jl	.Ltmp1658 # Offset: 6891
    00001af1: 	jmp	.Ltmp1650 # Offset: 6897
    00001af6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1546:
    00001b00: 	testq	%r14, %r14
    00001b03: 	jne	.Ltmp1684 # Offset: 6915
    00001b09: 	movq	0x8(%rsp), %rax
    00001b0e: 	jmp	.Ltmp1685 # Offset: 6926
    00001b13: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1600:
    00001b18: 	testq	%r13, %r13
    00001b1b: 	jne	.Ltmp1686 # Offset: 6939
    00001b21: 	movq	0x8(%rsp), %rax
    00001b26: 	jmp	.Ltmp1687 # Offset: 6950
    00001b2b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1558:
    00001b30: 	testq	%r13, %r13
    00001b33: 	jne	.Ltmp1688 # Offset: 6963
    00001b39: 	movq	0x8(%rsp), %rax
    00001b3e: 	jmp	.Ltmp1689 # Offset: 6974
    00001b43: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1639:
    00001b48: 	testq	%r12, %r12
    00001b4b: 	jne	.Ltmp1690 # Offset: 6987
    00001b51: 	movq	0x8(%rsp), %rax
    00001b56: 	jmp	.Ltmp1691 # Offset: 6998
    00001b5b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1612:
    00001b60: 	testq	%r12, %r12
    00001b63: 	jne	.Ltmp1692 # Offset: 7011
    00001b69: 	movq	0x8(%rsp), %rax
    00001b6e: 	jmp	.Ltmp1693 # Offset: 7022
    00001b73: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1655:
    00001b78: 	testq	%r13, %r13
    00001b7b: 	jne	.Ltmp1694 # Offset: 7035
    00001b81: 	movq	0x8(%rsp), %rax
    00001b86: 	jmp	.Ltmp1695 # Offset: 7046
    00001b8b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1557:
    00001b90: 	movq	0x30(%rsp), %rdi
    00001b95: 	leaq	0x88(%rsp), %rsi
    00001b9d: 	xorl	%edx, %edx
    00001b9f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7071
    00001ba4: 	movq	%rax, 0xd0(%rsp)
    00001bac: 	movq	%rax, %rdi
    00001baf: 	movq	0x88(%rsp), %rax
    00001bb7: 	movq	%rax, 0xe0(%rsp)
.Ltmp1739:
    00001bbf: 	movq	%r13, %rdx
    00001bc2: 	movq	%r14, %rsi
    00001bc5: 	callq	memcpy@PLT # Offset: 7109
    00001bca: 	movq	0x88(%rsp), %r13
    00001bd2: 	movq	0xd0(%rsp), %rax
    00001bda: 	jmp	.Ltmp1689 # Offset: 7130
    00001bdf: 	nop # Size: 1
.Ltmp1545:
    00001be0: 	movq	0x68(%rsp), %rsi
    00001be5: 	movq	0x30(%rsp), %rdi
    00001bea: 	xorl	%edx, %edx
    00001bec: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7148
    00001bf1: 	movq	%rax, 0xd0(%rsp)
    00001bf9: 	movq	%rax, %rdi
    00001bfc: 	movq	0x88(%rsp), %rax
    00001c04: 	movq	%rax, 0xe0(%rsp)
.Ltmp1737:
    00001c0c: 	movq	0x20(%rsp), %rsi
    00001c11: 	movq	%r14, %rdx
    00001c14: 	callq	memcpy@PLT # Offset: 7188
    00001c19: 	movq	0x88(%rsp), %r14
    00001c21: 	movq	0xd0(%rsp), %rax
    00001c29: 	jmp	.Ltmp1685 # Offset: 7209
    00001c2e: 	nop # Size: 2
.Ltmp1599:
    00001c30: 	movq	0x20(%rsp), %rsi
    00001c35: 	movq	0x30(%rsp), %rdi
    00001c3a: 	xorl	%edx, %edx
    00001c3c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7228
    00001c41: 	movq	%rax, 0xd0(%rsp)
    00001c49: 	movq	%rax, %rdi
    00001c4c: 	movq	0x88(%rsp), %rax
    00001c54: 	movq	%rax, 0xe0(%rsp)
.Ltmp1738:
    00001c5c: 	movq	%r13, %rdx
    00001c5f: 	movq	%r14, %rsi
    00001c62: 	callq	memcpy@PLT # Offset: 7266
    00001c67: 	movq	0x88(%rsp), %r13
    00001c6f: 	movq	0xd0(%rsp), %rax
    00001c77: 	jmp	.Ltmp1687 # Offset: 7287
    00001c7c: 	nopl	(%rax) # Size: 4
.Ltmp1638:
    00001c80: 	movq	0x30(%rsp), %rdi
    00001c85: 	leaq	0x88(%rsp), %rsi
    00001c8d: 	xorl	%edx, %edx
    00001c8f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7311
    00001c94: 	movq	%rax, 0xd0(%rsp)
    00001c9c: 	movq	%rax, %rdi
    00001c9f: 	movq	0x88(%rsp), %rax
    00001ca7: 	movq	%rax, 0xe0(%rsp)
.Ltmp1740:
    00001caf: 	movq	%r12, %rdx
    00001cb2: 	movq	%r13, %rsi
    00001cb5: 	callq	memcpy@PLT # Offset: 7349
    00001cba: 	movq	0x88(%rsp), %r12
    00001cc2: 	movq	0xd0(%rsp), %rax
    00001cca: 	jmp	.Ltmp1691 # Offset: 7370
    00001ccf: 	nop # Size: 1
.Ltmp1611:
    00001cd0: 	movq	0x30(%rsp), %rdi
    00001cd5: 	leaq	0x88(%rsp), %rsi
    00001cdd: 	xorl	%edx, %edx
    00001cdf: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7391
    00001ce4: 	movq	%rax, 0xd0(%rsp)
    00001cec: 	movq	%rax, %rdi
    00001cef: 	movq	0x88(%rsp), %rax
    00001cf7: 	movq	%rax, 0xe0(%rsp)
.Ltmp1741:
    00001cff: 	movq	%r12, %rdx
    00001d02: 	movq	%r13, %rsi
    00001d05: 	callq	memcpy@PLT # Offset: 7429
    00001d0a: 	movq	0x88(%rsp), %r12
    00001d12: 	movq	0xd0(%rsp), %rax
    00001d1a: 	jmp	.Ltmp1693 # Offset: 7450
    00001d1f: 	nop # Size: 1
.Ltmp1654:
    00001d20: 	movq	0x18(%rsp), %rsi
    00001d25: 	movq	0x30(%rsp), %rdi
    00001d2a: 	xorl	%edx, %edx
    00001d2c: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7468
    00001d31: 	movq	%rax, 0xd0(%rsp)
    00001d39: 	movq	%rax, %rdi
    00001d3c: 	movq	0x88(%rsp), %rax
    00001d44: 	movq	%rax, 0xe0(%rsp)
.Ltmp1742:
    00001d4c: 	movq	%r13, %rdx
    00001d4f: 	movq	%r14, %rsi
    00001d52: 	callq	memcpy@PLT # Offset: 7506
    00001d57: 	movq	0x88(%rsp), %r13
    00001d5f: 	movq	0xd0(%rsp), %rax
    00001d67: 	jmp	.Ltmp1695 # Offset: 7527
.Ltmp1539:
    00001d6c: 	testq	%r12, %r12
    00001d6f: 	jne	.Ltmp1696 # Offset: 7535
    00001d75: 	movq	0x58(%rsp), %rax
    00001d7a: 	jmp	.Ltmp1697 # Offset: 7546
.Ltmp1583:
    00001d7f: 	testq	%r12, %r12
    00001d82: 	jne	.Ltmp1698 # Offset: 7554
    00001d88: 	movq	0x8(%rsp), %rax
    00001d8d: 	jmp	.Ltmp1699 # Offset: 7565
.Ltmp1582:
    00001d92: 	movq	0x30(%rsp), %rdi
    00001d97: 	leaq	0x88(%rsp), %rsi
    00001d9f: 	xorl	%edx, %edx
    00001da1: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7585
    00001da6: 	movq	%rax, 0xd0(%rsp)
    00001dae: 	movq	%rax, %rdi
    00001db1: 	movq	0x88(%rsp), %rax
    00001db9: 	movq	%rax, 0xe0(%rsp)
.Ltmp1736:
    00001dc1: 	movq	%r12, %rdx
    00001dc4: 	movq	%r13, %rsi
    00001dc7: 	callq	memcpy@PLT # Offset: 7623
    00001dcc: 	movq	0x88(%rsp), %r12
    00001dd4: 	movq	0xd0(%rsp), %rax
    00001ddc: 	jmp	.Ltmp1699 # Offset: 7644
.Ltmp1538:
    00001de1: 	leaq	0x88(%rsp), %rsi
    00001de9: 	leaq	0xb0(%rsp), %rdi
    00001df1: 	xorl	%edx, %edx
    00001df3: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 7667
    00001df8: 	movq	%rax, 0xb0(%rsp)
    00001e00: 	movq	%rax, %rdi
    00001e03: 	movq	0x88(%rsp), %rax
    00001e0b: 	movq	%rax, 0xc0(%rsp)
.Ltmp1743:
    00001e13: 	movq	%r12, %rdx
    00001e16: 	movq	%r13, %rsi
    00001e19: 	callq	memcpy@PLT # Offset: 7705
    00001e1e: 	movq	0x88(%rsp), %r12
    00001e26: 	movq	0xb0(%rsp), %rax
    00001e2e: 	jmp	.Ltmp1697 # Offset: 7726
.Ltmp1592:
    00001e33: 	movq	0x30(%rsp), %rsi
    00001e38: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001e3f: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7743
    00001e44: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001e4b: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001e52: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001e59: 	jne	.Ltmp1700 # Offset: 7769
.Ltmp1593:
    00001e5f: 	movq	-0x8(%rdx), %rax
    00001e63: 	addq	$0x200, %rax
    00001e69: 	jmp	.Ltmp1700 # Offset: 7785
.Ltmp1578:
    00001e6e: 	movq	-0x8(%rdx), %rax
    00001e72: 	addq	$0x200, %rax
    00001e78: 	jmp	.Ltmp1701 # Offset: 7800
.Ltmp1573:
    00001e7d: 	movq	0x30(%rsp), %rsi
    00001e82: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001e89: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7817
    00001e8e: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001e95: 	jmp	.Ltmp1702 # Offset: 7829
.Ltmp1567:
    00001e9a: 	movq	-0x8(%rdx), %rax
    00001e9e: 	addq	$0x200, %rax
    00001ea4: 	jmp	.Ltmp1703 # Offset: 7844
.Ltmp1562:
    00001ea9: 	movq	0x60(%rsp), %rsi
    00001eae: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001eb5: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7861
    00001eba: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001ec1: 	jmp	.Ltmp1704 # Offset: 7873
.Ltmp1534:
    00001ec6: 	movq	-0x8(%rdx), %rax
    00001eca: 	addq	$0x200, %rax
    00001ed0: 	jmp	.Ltmp1705 # Offset: 7888
.Ltmp1529:
    00001ed5: 	movq	0x30(%rsp), %rsi
    00001eda: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001ee1: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7905
    00001ee6: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001eed: 	jmp	.Ltmp1706 # Offset: 7917
.Ltmp1520:
    00001ef2: 	movq	-0x8(%rdx), %rax
    00001ef6: 	addq	$0x200, %rax
    00001efc: 	jmp	.Ltmp1707 # Offset: 7932
.Ltmp1519:
    00001f01: 	movq	0x30(%rsp), %rsi
    00001f06: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001f0d: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7949
    00001f12: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001f19: 	jmp	.Ltmp1708 # Offset: 7961
.Ltmp1605:
    00001f1e: 	movq	-0x8(%rdx), %rax
    00001f22: 	addq	$0x200, %rax
    00001f28: 	jmp	.Ltmp1709 # Offset: 7976
.Ltmp1604:
    00001f2d: 	movq	0x60(%rsp), %rsi
    00001f32: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001f39: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 7993
    00001f3e: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001f45: 	jmp	.Ltmp1710 # Offset: 8005
.Ltmp1551:
    00001f4a: 	movq	-0x8(%rdx), %rax
    00001f4e: 	addq	$0x200, %rax
    00001f54: 	jmp	.Ltmp1711 # Offset: 8020
.Ltmp1550:
    00001f59: 	movq	0x60(%rsp), %rsi
    00001f5e: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001f65: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8037
    00001f6a: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001f71: 	jmp	.Ltmp1712 # Offset: 8049
.Ltmp1643:
    00001f76: 	movq	0x60(%rsp), %rsi
    00001f7b: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001f82: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8066
    00001f87: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001f8e: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001f95: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001f9c: 	jne	.Ltmp1713 # Offset: 8092
.Ltmp1648:
    00001fa2: 	movq	-0x8(%rdx), %rax
    00001fa6: 	addq	$0x200, %rax
    00001fac: 	jmp	.Ltmp1713 # Offset: 8108
.Ltmp1616:
    00001fb1: 	movq	0x60(%rsp), %rsi
    00001fb6: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00001fbd: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8125
    00001fc2: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00001fc9: 	cmpq	%rax, "_ZL7gLabels/1"+56(%rip)
    00001fd0: 	movq	"_ZL7gLabels/1"+72(%rip), %rdx
    00001fd7: 	jne	.Ltmp1714 # Offset: 8151
.Ltmp1621:
    00001fdd: 	movq	-0x8(%rdx), %rax
    00001fe1: 	addq	$0x200, %rax
    00001fe7: 	jmp	.Ltmp1714 # Offset: 8167
.Ltmp1632:
    00001fec: 	movq	-0x8(%rdx), %rax
    00001ff0: 	addq	$0x200, %rax
    00001ff6: 	jmp	.Ltmp1715 # Offset: 8182
.Ltmp1627:
    00001ffb: 	movq	0x30(%rsp), %rsi
    00002000: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002007: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8199
    0000200c: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    00002013: 	jmp	.Ltmp1716 # Offset: 8211
.Ltmp1664:
    00002018: 	movq	-0x8(%rdx), %rax
    0000201c: 	addq	$0x200, %rax
    00002022: 	jmp	.Ltmp1717 # Offset: 8226
.Ltmp1659:
    00002027: 	movq	0x60(%rsp), %rsi
    0000202c: 	leaq	"_ZL7gLabels/1"(%rip), %rdi
    00002033: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 8243
    00002038: 	movq	"_ZL7gLabels/1"+48(%rip), %rax
    0000203f: 	jmp	.Ltmp1718 # Offset: 8255
.Ltmp1671:
    00002044: 	cmpq	0x10(%rsp), %rbp
    00002049: 	je	.Ltmp1674 # Offset: 8265
.Ltmp1721:
    0000204f: 	movq	(%rbp), %rdi
    00002053: 	leaq	0x10(%rbp), %rax
    00002057: 	cmpq	%rax, %rdi
    0000205a: 	je	.Ltmp1719 # Offset: 8282
.Ltmp1720:
    0000205c: 	movq	0x10(%rbp), %rax
    00002060: 	addq	$0x20, %rbp
    00002064: 	leaq	0x1(%rax), %rsi
    00002068: 	callq	_ZdlPvm@PLT # Offset: 8296
    0000206d: 	cmpq	%rbp, 0x10(%rsp)
    00002072: 	je	.Ltmp1674 # Offset: 8306
    00002078: 	movq	(%rbp), %rdi
    0000207c: 	leaq	0x10(%rbp), %rax
    00002080: 	cmpq	%rax, %rdi
    00002083: 	jne	.Ltmp1720 # Offset: 8323
.Ltmp1719:
    00002085: 	addq	$0x20, %rbp
    00002089: 	cmpq	%rbp, 0x10(%rsp)
    0000208e: 	jne	.Ltmp1721 # Offset: 8334
    00002090: 	jmp	.Ltmp1674 # Offset: 8336
.Ltmp1647:
    00002095: 	testq	%r12, %r12
    00002098: 	je	.Ltmp1722 # Offset: 8344
    0000209e: 	jmp	.Ltmp1723 # Offset: 8350
    000020a3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1663:
    000020a8: 	testq	%r12, %r12
    000020ab: 	je	.Ltmp1724 # Offset: 8363
    000020b1: 	jmp	.Ltmp1725 # Offset: 8369
    000020b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1533:
    000020c0: 	testq	%r12, %r12
    000020c3: 	je	.Ltmp1682 # Offset: 8387
    000020c9: 	jmp	.Ltmp1726 # Offset: 8393
    000020ce: 	nop # Size: 2
.Ltmp1631:
    000020d0: 	testq	%r12, %r12
    000020d3: 	je	.Ltmp1727 # Offset: 8403
    000020d9: 	jmp	.Ltmp1728 # Offset: 8409
    000020de: 	nop # Size: 2
.Ltmp1620:
    000020e0: 	testq	%r12, %r12
    000020e3: 	je	.Ltmp1729 # Offset: 8419
    000020e9: 	jmp	.Ltmp1730 # Offset: 8425
    000020ee: 	nop # Size: 2
.Ltmp1577:
    000020f0: 	testq	%r12, %r12
    000020f3: 	je	.Ltmp1731 # Offset: 8435
    000020f9: 	jmp	.Ltmp1732 # Offset: 8441
    000020fe: 	nop # Size: 2
.Ltmp1566:
    00002100: 	testq	%r12, %r12
    00002103: 	je	.Ltmp1733 # Offset: 8451
    00002109: 	jmp	.Ltmp1734 # Offset: 8457
    0000210e: 	nop # Size: 2
.Ltmp1646:
    00002110: 	leaq	0x88(%rsp), %rsi
    00002118: 	xorl	%edx, %edx
    0000211a: 	movq	%rbp, %rdi
    0000211d: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8477
    00002122: 	movq	%rax, (%rbp)
    00002126: 	movq	%rax, %rdi
    00002129: 	movq	0x88(%rsp), %rax
    00002131: 	movq	%rax, 0x10(%rbp)
.Ltmp1723:
    00002135: 	movq	%r12, %rdx
    00002138: 	movq	%r13, %rsi
    0000213b: 	callq	memcpy@PLT # Offset: 8507
    00002140: 	movq	0x88(%rsp), %r12
    00002148: 	movq	(%rbp), %rdi
    0000214c: 	jmp	.Ltmp1722 # Offset: 8524
.Ltmp1630:
    00002151: 	leaq	0x88(%rsp), %rsi
    00002159: 	xorl	%edx, %edx
    0000215b: 	movq	%rbp, %rdi
    0000215e: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8542
    00002163: 	movq	%rax, (%rbp)
    00002167: 	movq	%rax, %rdi
    0000216a: 	movq	0x88(%rsp), %rax
    00002172: 	movq	%rax, 0x10(%rbp)
.Ltmp1728:
    00002176: 	movq	%r12, %rdx
    00002179: 	movq	%r13, %rsi
    0000217c: 	callq	memcpy@PLT # Offset: 8572
    00002181: 	movq	0x88(%rsp), %r12
    00002189: 	movq	(%rbp), %rdi
    0000218d: 	jmp	.Ltmp1727 # Offset: 8589
.Ltmp1619:
    00002192: 	leaq	0x88(%rsp), %rsi
    0000219a: 	xorl	%edx, %edx
    0000219c: 	movq	%rbp, %rdi
    0000219f: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8607
    000021a4: 	movq	%rax, (%rbp)
    000021a8: 	movq	%rax, %rdi
    000021ab: 	movq	0x88(%rsp), %rax
    000021b3: 	movq	%rax, 0x10(%rbp)
.Ltmp1730:
    000021b7: 	movq	%r12, %rdx
    000021ba: 	movq	%r13, %rsi
    000021bd: 	callq	memcpy@PLT # Offset: 8637
    000021c2: 	movq	0x88(%rsp), %r12
    000021ca: 	movq	(%rbp), %rdi
    000021ce: 	jmp	.Ltmp1729 # Offset: 8654
.Ltmp1576:
    000021d3: 	leaq	0x88(%rsp), %rsi
    000021db: 	xorl	%edx, %edx
    000021dd: 	movq	%r13, %rdi
    000021e0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8672
    000021e5: 	movq	%rax, (%r13)
    000021e9: 	movq	%rax, %rdi
    000021ec: 	movq	0x88(%rsp), %rax
    000021f4: 	movq	%rax, 0x10(%r13)
.Ltmp1732:
    000021f8: 	movq	%r12, %rdx
    000021fb: 	movq	%r14, %rsi
    000021fe: 	callq	memcpy@PLT # Offset: 8702
    00002203: 	movq	0x88(%rsp), %r12
    0000220b: 	movq	(%r13), %rdi
    0000220f: 	jmp	.Ltmp1731 # Offset: 8719
.Ltmp1565:
    00002214: 	leaq	0x88(%rsp), %rsi
    0000221c: 	xorl	%edx, %edx
    0000221e: 	movq	%r13, %rdi
    00002221: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8737
    00002226: 	movq	%rax, (%r13)
    0000222a: 	movq	%rax, %rdi
    0000222d: 	movq	0x88(%rsp), %rax
    00002235: 	movq	%rax, 0x10(%r13)
.Ltmp1734:
    00002239: 	movq	%r12, %rdx
    0000223c: 	movq	%r14, %rsi
    0000223f: 	callq	memcpy@PLT # Offset: 8767
    00002244: 	movq	0x88(%rsp), %r12
    0000224c: 	movq	(%r13), %rdi
    00002250: 	jmp	.Ltmp1733 # Offset: 8784
.Ltmp1662:
    00002255: 	leaq	0x88(%rsp), %rsi
    0000225d: 	xorl	%edx, %edx
    0000225f: 	movq	%rbx, %rdi
    00002262: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 8802
    00002267: 	movq	%rax, (%rbx)
    0000226a: 	movq	%rax, %rdi
    0000226d: 	movq	0x88(%rsp), %rax
    00002275: 	movq	%rax, 0x10(%rbx)
.Ltmp1725:
    00002279: 	movq	%r12, %rdx
    0000227c: 	movq	%rbp, %rsi
    0000227f: 	callq	memcpy@PLT # Offset: 8831
    00002284: 	movq	0x88(%rsp), %r12
    0000228c: 	movq	(%rbx), %rdi
    0000228f: 	jmp	.Ltmp1724 # Offset: 8847
.Ltmp1522:
    00002294: 	movabsq	$0x100000000, %rax
    0000229e: 	xorl	%r13d, %r13d
    000022a1: 	jmp	.Ltmp1735 # Offset: 8865
.Ltmp1586:
    000022a6: 	movl	$0x1f, 0x38(%rsp)
    000022ae: 	movabsq	$-0x8000000000000000, %rax
    000022b8: 	jmp	.Ltmp1585 # Offset: 8888
.Ltmp1523:
    000022bd: 	movabsq	$-0x8000000000000000, %rax
    000022c7: 	movl	$0x1f, %r13d
    000022cd: 	jmp	.Ltmp1735 # Offset: 8909
.Ltmp1698:
    000022d2: 	movq	0x8(%rsp), %rdi
    000022d7: 	jmp	.Ltmp1736 # Offset: 8919
.Ltmp1598:
    000022dc: 	leaq	DATAat0x14008(%rip), %rdi
    000022e3: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8931
.Ltmp1610:
    000022e8: 	leaq	DATAat0x14008(%rip), %rdi
    000022ef: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8943
.Ltmp1618:
    000022f4: 	leaq	DATAat0x14008(%rip), %rdi
    000022fb: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8955
.Ltmp1629:
    00002300: 	leaq	DATAat0x14008(%rip), %rdi
    00002307: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8967
.Ltmp1637:
    0000230c: 	leaq	DATAat0x14008(%rip), %rdi
    00002313: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8979
.Ltmp1645:
    00002318: 	leaq	DATAat0x14008(%rip), %rdi
    0000231f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 8991
.Ltmp1653:
    00002324: 	leaq	DATAat0x14008(%rip), %rdi
    0000232b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9003
.Ltmp1537:
    00002330: 	leaq	DATAat0x14008(%rip), %rdi
    00002337: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9015
.Ltmp1540:
    0000233c: 	leaq	DATAat0x14184(%rip), %rdi
    00002343: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9027
.Ltmp1544:
    00002348: 	leaq	DATAat0x14008(%rip), %rdi
    0000234f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9039
.Ltmp1556:
    00002354: 	leaq	DATAat0x14008(%rip), %rdi
    0000235b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9051
.Ltmp1564:
    00002360: 	leaq	DATAat0x14008(%rip), %rdi
    00002367: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9063
.Ltmp1575:
    0000236c: 	leaq	DATAat0x14008(%rip), %rdi
    00002373: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9075
.Ltmp1581:
    00002378: 	leaq	DATAat0x14008(%rip), %rdi
    0000237f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9087
.Ltmp1584:
    00002384: 	leaq	DATAat0x14184(%rip), %rdi
    0000238b: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 9099
.Ltmp1661:
    00002390: 	leaq	DATAat0x14008(%rip), %rdi
    00002397: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9111
.Ltmp1681:
    0000239c: 	callq	__stack_chk_fail@PLT # Offset: 9116
.Ltmp1531:
    000023a1: 	leaq	DATAat0x14008(%rip), %rdi
    000023a8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 9128
.Ltmp1684:
    000023ad: 	movq	0x8(%rsp), %rdi
    000023b2: 	jmp	.Ltmp1737 # Offset: 9138
.Ltmp1686:
    000023b7: 	movq	0x8(%rsp), %rdi
    000023bc: 	jmp	.Ltmp1738 # Offset: 9148
.Ltmp1688:
    000023c1: 	movq	0x8(%rsp), %rdi
    000023c6: 	jmp	.Ltmp1739 # Offset: 9158
.Ltmp1690:
    000023cb: 	movq	0x8(%rsp), %rdi
    000023d0: 	jmp	.Ltmp1740 # Offset: 9168
.Ltmp1692:
    000023d5: 	movq	0x8(%rsp), %rdi
    000023da: 	jmp	.Ltmp1741 # Offset: 9178
.Ltmp1694:
    000023df: 	movq	0x8(%rsp), %rdi
    000023e4: 	jmp	.Ltmp1742 # Offset: 9188
.Ltmp1696:
    000023e9: 	movq	0x58(%rsp), %rdi
    000023ee: 	jmp	.Ltmp1743 # Offset: 9198
    000023f3: 	endbr64
.Ltmp1749:
    000023f7: 	movq	%rax, %rbp
    000023fa: 	jmp	.Ltmp1744 # Offset: 9210
    000023ff: 	endbr64
    00002403: 	movq	%rax, %rbp
    00002406: 	jmp	.Ltmp1745 # Offset: 9222
    00002408: 	endbr64
.Ltmp1747:
    0000240c: 	movq	%rax, %rbp
    0000240f: 	jmp	.Ltmp1746 # Offset: 9231
    00002411: 	endbr64
    00002415: 	jmp	.Ltmp1747 # Offset: 9237
    00002417: 	endbr64
.Ltmp1750:
    0000241b: 	movq	%rax, %rbp
    0000241e: 	movq	0xd0(%rsp), %rdi
    00002426: 	cmpq	0x8(%rsp), %rdi
    0000242b: 	je	.Ltmp1746 # Offset: 9259
    0000242d: 	movq	0xe0(%rsp), %rax
    00002435: 	leaq	0x1(%rax), %rsi
    00002439: 	callq	_ZdlPvm@PLT # Offset: 9273
.Ltmp1746:
    0000243e: 	movq	0xb0(%rsp), %rdi
    00002446: 	cmpq	0x58(%rsp), %rdi
    0000244b: 	je	.Ltmp1745 # Offset: 9291
    0000244d: 	movq	0xc0(%rsp), %rax
    00002455: 	leaq	0x1(%rax), %rsi
    00002459: 	callq	_ZdlPvm@PLT # Offset: 9305
.Ltmp1745:
    0000245e: 	movq	0x90(%rsp), %rdi
    00002466: 	cmpq	0x70(%rsp), %rdi
    0000246b: 	je	.Ltmp1748 # Offset: 9323
    0000246d: 	movq	0xa0(%rsp), %rax
    00002475: 	leaq	0x1(%rax), %rsi
    00002479: 	callq	_ZdlPvm@PLT # Offset: 9337
.Ltmp1748:
    0000247e: 	movq	%rbp, %rdi
    00002481: 	callq	_Unwind_Resume@PLT # Offset: 9345
.Ltmp1744:
    00002486: 	movq	0xd0(%rsp), %rdi
    0000248e: 	cmpq	0x8(%rsp), %rdi
    00002493: 	je	.Ltmp1745 # Offset: 9363
.Ltmp1752:
    00002495: 	movq	0xe0(%rsp), %rax
    0000249d: 	leaq	0x1(%rax), %rsi
    000024a1: 	callq	_ZdlPvm@PLT # Offset: 9377
    000024a6: 	jmp	.Ltmp1745 # Offset: 9382
    000024a8: 	endbr64
    000024ac: 	jmp	.Ltmp1749 # Offset: 9388
    000024b1: 	endbr64
    000024b5: 	jmp	.Ltmp1750 # Offset: 9397
    000024ba: 	endbr64
    000024be: 	jmp	.Ltmp1747 # Offset: 9406
    000024c3: 	endbr64
    000024c7: 	jmp	.Ltmp1750 # Offset: 9415
    000024cc: 	endbr64
    000024d0: 	jmp	.Ltmp1747 # Offset: 9424
    000024d5: 	endbr64
    000024d9: 	jmp	.Ltmp1750 # Offset: 9433
    000024de: 	endbr64
    000024e2: 	jmp	.Ltmp1749 # Offset: 9442
    000024e7: 	endbr64
    000024eb: 	jmp	.Ltmp1750 # Offset: 9451
    000024f0: 	endbr64
    000024f4: 	jmp	.Ltmp1747 # Offset: 9460
    000024f9: 	endbr64
    000024fd: 	jmp	.Ltmp1747 # Offset: 9469
    00002502: 	endbr64
    00002506: 	jmp	.Ltmp1749 # Offset: 9478
    0000250b: 	endbr64
    0000250f: 	jmp	.Ltmp1747 # Offset: 9487
    00002514: 	endbr64
    00002518: 	jmp	.Ltmp1749 # Offset: 9496
    0000251d: 	endbr64
    00002521: 	jmp	.Ltmp1749 # Offset: 9505
    00002526: 	endbr64
    0000252a: 	movq	%rax, %rbp
    0000252d: 	jmp	.Ltmp1751 # Offset: 9517
    0000252f: 	endbr64
    00002533: 	jmp	.Ltmp1750 # Offset: 9523
.Ltmp1751:
    00002538: 	movq	0xd0(%rsp), %rdi
    00002540: 	leaq	0xe0(%rsp), %rax
    00002548: 	cmpq	%rax, %rdi
    0000254b: 	jne	.Ltmp1752 # Offset: 9547
    00002551: 	jmp	.Ltmp1745 # Offset: 9553
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIlEvd"

Binary Function "_fini" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x13758
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x13758
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 57 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 1458 instructions were shortened
BOLT-INFO: removed 279 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 52 out of 84 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x20204c
