BOLT-INFO: shared object or position-independent executable detected
BOLT-INFO: Target architecture: x86_64
BOLT-INFO: BOLT version: <unknown>
BOLT-INFO: first alloc address is 0x0
BOLT-INFO: creating new program header table at address 0x200000, offset 0x200000
BOLT-INFO: enabling lite mode
BOLT-WARNING: split function detected on input : main.cold
Binary Function "_init" after disassembly {
  Number      : 1
  State       : disassembled
  Address     : 0x1000
  Size        : 0x1b
  MaxSize     : 0x1b
  Offset      : 0x1000
  Section     : .init
  Orc Section : .local.text._init
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB00:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	movq	DATAat0x1bff0(%rip), %rax
    0000000f: 	testq	%rax, %rax
    00000012: 	je	.Ltmp0 # Offset: 18
    00000014: 	callq	*%rax # Offset: 20
.Ltmp0:
    00000016: 	addq	$0x8, %rsp
    0000001a: 	retq # Offset: 26
DWARF CFI Instructions:
    <empty>
End of Function "_init"

Binary Function "_start" after disassembly {
  Number      : 6
  State       : disassembled
  Address     : 0x26e0
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x26e0
  Section     : .text
  Orc Section : .local.text._start
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB05:
    00000000: 	endbr64
    00000004: 	xorl	%ebp, %ebp
    00000006: 	movq	%rdx, %r9
    00000009: 	popq	%rsi
    0000000a: 	movq	%rsp, %rdx
    0000000d: 	andq	$-0x10, %rsp
    00000011: 	pushq	%rax
    00000012: 	pushq	%rsp
    00000013: 	xorl	%r8d, %r8d
    00000016: 	xorl	%ecx, %ecx
    00000018: 	leaq	main(%rip), %rdi
    0000001f: 	callq	*DATAat0x1bfe0(%rip) # Offset: 31
    00000025: 	hlt
DWARF CFI Instructions:
    <empty>
End of Function "_start"

Binary Function "deregister_tm_clones/1(*2)" after disassembly {
  All names   : deregister_tm_clones/1
                deregister_tm_clones/crtstuff.c/1
  Number      : 7
  State       : disassembled
  Address     : 0x2710
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x2710
  Section     : .text
  Orc Section : .local.text.deregister_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB06:
    00000000: 	leaq	"completed.0/1"(%rip), %rdi
    00000007: 	leaq	"completed.0/1"(%rip), %rax
    0000000e: 	cmpq	%rdi, %rax
    00000011: 	je	.Ltmp70 # Offset: 17
    00000013: 	movq	DATAat0x1bfe8(%rip), %rax
    0000001a: 	testq	%rax, %rax
    0000001d: 	je	.Ltmp70 # Offset: 29
    0000001f: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 31
    00000021: 	nopl	(%rax) # Size: 7
.Ltmp70:
    00000028: 	retq # Offset: 40
    00000029: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "deregister_tm_clones/1(*2)"

Binary Function "register_tm_clones/1(*2)" after disassembly {
  All names   : register_tm_clones/1
                register_tm_clones/crtstuff.c/1
  Number      : 8
  State       : disassembled
  Address     : 0x2740
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x2740
  Section     : .text
  Orc Section : .local.text.register_tm_clones/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB07:
    00000000: 	leaq	"completed.0/1"(%rip), %rdi
    00000007: 	leaq	"completed.0/1"(%rip), %rsi
    0000000e: 	subq	%rdi, %rsi
    00000011: 	movq	%rsi, %rax
    00000014: 	shrq	$0x3f, %rsi
    00000018: 	sarq	$0x3, %rax
    0000001c: 	addq	%rax, %rsi
    0000001f: 	sarq	%rsi
    00000022: 	je	.Ltmp71 # Offset: 34
    00000024: 	movq	DATAat0x1bff8(%rip), %rax
    0000002b: 	testq	%rax, %rax
    0000002e: 	je	.Ltmp71 # Offset: 46
    00000030: 	jmpq	*%rax # UNKNOWN CONTROL FLOW # Offset: 48
    00000032: 	nopw	(%rax,%rax) # Size: 6
.Ltmp71:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "register_tm_clones/1(*2)"

Binary Function "__do_global_dtors_aux/1(*2)" after disassembly {
  All names   : __do_global_dtors_aux/1
                __do_global_dtors_aux/crtstuff.c/1
  Number      : 9
  State       : disassembled
  Address     : 0x2780
  Size        : 0x40
  MaxSize     : 0x40
  Offset      : 0x2780
  Section     : .text
  Orc Section : .local.text.__do_global_dtors_aux/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB08:
    00000000: 	endbr64
    00000004: 	cmpb	$0x0, "completed.0/1"(%rip)
    0000000b: 	jne	.Ltmp72 # Offset: 11
    0000000d: 	pushq	%rbp
    0000000e: 	cmpq	$0x0, __cxa_finalize@GOT(%rip)
    00000016: 	movq	%rsp, %rbp
    00000019: 	je	.Ltmp73 # Offset: 25
    0000001b: 	movq	__dso_handle(%rip), %rdi
    00000022: 	callq	__cxa_finalize@PLT # Offset: 34
.Ltmp73:
    00000027: 	callq	"deregister_tm_clones/1" # Offset: 39
    0000002c: 	movb	$0x1, "completed.0/1"(%rip)
    00000033: 	popq	%rbp
    00000034: 	retq # Offset: 52
    00000035: 	nopl	(%rax) # Size: 3
.Ltmp72:
    00000038: 	retq # Offset: 56
    00000039: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "__do_global_dtors_aux/1(*2)"

Binary Function "frame_dummy/1(*2)" after disassembly {
  All names   : frame_dummy/1
                frame_dummy/crtstuff.c/1
  Number      : 10
  State       : disassembled
  Address     : 0x27c0
  Size        : 0x10
  MaxSize     : 0x10
  Offset      : 0x27c0
  Section     : .text
  Orc Section : .local.text.frame_dummy/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB09:
    00000000: 	endbr64
    00000004: 	jmp	"register_tm_clones/1" # TAILCALL  # Offset: 4
    00000009: 	nopl	(%rax) # Size: 7
DWARF CFI Instructions:
    <empty>
End of Function "frame_dummy/1(*2)"

Binary Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)" after disassembly {
  All names   : _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
                _ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/scalar_replacement_structs.cpp/1
  Number      : 11
  State       : disassembled
  Address     : 0x27d0
  Size        : 0xd3
  MaxSize     : 0xe0
  Offset      : 0x27d0
  Section     : .text
  Orc Section : .local.text._ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB010:
    00000000: 	pushq	%r13
    00000002: 	pushq	%r12
    00000004: 	leaq	0x10(%rdi), %r12
    00000008: 	pushq	%rbp
    00000009: 	pushq	%rbx
    0000000a: 	subq	$0x18, %rsp
    0000000e: 	movq	%fs:0x28, %rax
    00000017: 	movq	%rax, 0x8(%rsp)
    0000001c: 	xorl	%eax, %eax
    0000001e: 	movq	%r12, (%rdi)
    00000021: 	testq	%rsi, %rsi
    00000024: 	je	.Ltmp74 # Offset: 36
    0000002a: 	movq	%rdi, %rbx
    0000002d: 	movq	%rsi, %rdi
    00000030: 	movq	%rsi, %rbp
    00000033: 	callq	strlen@PLT # Offset: 51
    00000038: 	movq	%rax, (%rsp)
    0000003c: 	movq	%rax, %r13
    0000003f: 	cmpq	$0xf, %rax
    00000043: 	ja	.Ltmp75 # Offset: 67
    00000045: 	cmpq	$0x1, %rax
    00000049: 	jne	.Ltmp76 # Offset: 73
    0000004b: 	movzbl	(%rbp), %edx
    0000004f: 	movb	%dl, 0x10(%rbx)
.Ltmp78:
    00000052: 	movq	%rax, 0x8(%rbx)
    00000056: 	movb	$0x0, (%r12,%rax)
    0000005b: 	movq	0x8(%rsp), %rax
    00000060: 	subq	%fs:0x28, %rax
    00000069: 	jne	.Ltmp77 # Offset: 105
    0000006b: 	addq	$0x18, %rsp
    0000006f: 	popq	%rbx
    00000070: 	popq	%rbp
    00000071: 	popq	%r12
    00000073: 	popq	%r13
    00000075: 	retq # Offset: 117
    00000076: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp76:
    00000080: 	testq	%rax, %rax
    00000083: 	je	.Ltmp78 # Offset: 131
    00000085: 	jmp	.Ltmp79 # Offset: 133
    00000087: 	nopw	(%rax,%rax) # Size: 9
.Ltmp75:
    00000090: 	movq	%rsp, %rsi
    00000093: 	xorl	%edx, %edx
    00000095: 	movq	%rbx, %rdi
    00000098: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 152
    0000009d: 	movq	%rax, (%rbx)
    000000a0: 	movq	%rax, %r12
    000000a3: 	movq	(%rsp), %rax
    000000a7: 	movq	%rax, 0x10(%rbx)
.Ltmp79:
    000000ab: 	movq	%r12, %rdi
    000000ae: 	movq	%r13, %rdx
    000000b1: 	movq	%rbp, %rsi
    000000b4: 	callq	memcpy@PLT # Offset: 180
    000000b9: 	movq	(%rsp), %rax
    000000bd: 	movq	(%rbx), %r12
    000000c0: 	jmp	.Ltmp78 # Offset: 192
.Ltmp77:
    000000c2: 	callq	__stack_chk_fail@PLT # Offset: 194
.Ltmp74:
    000000c7: 	leaq	DATAat0x17018(%rip), %rdi
    000000ce: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 206
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1(*2)"

Binary Function "_Z13record_resultdPKc" after disassembly {
  Number      : 12
  State       : disassembled
  Address     : 0x28b0
  Size        : 0xa0
  MaxSize     : 0xa0
  Offset      : 0x28b0
  Section     : .text
  Orc Section : .local.text._Z13record_resultdPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB011:
    00000000: 	endbr64
    00000004: 	pushq	%rbx
    00000005: 	movq	%rdi, %rbx
    00000008: 	subq	$0x10, %rsp
    0000000c: 	movq	results(%rip), %rdi
    00000013: 	movl	allocated_results(%rip), %esi
    00000019: 	testq	%rdi, %rdi
    0000001c: 	je	.Ltmp80 # Offset: 28
    0000001e: 	movl	current_test(%rip), %eax
    00000024: 	cmpl	%esi, %eax
    00000026: 	jl	.Ltmp81 # Offset: 38
.Ltmp80:
    00000028: 	addl	$0xa, %esi
    0000002b: 	movsd	%xmm0, 0x8(%rsp)
    00000031: 	movl	%esi, allocated_results(%rip)
    00000037: 	movslq	%esi, %rsi
    0000003a: 	shlq	$0x4, %rsi
    0000003e: 	callq	realloc@PLT # Offset: 62
    00000043: 	movq	%rax, results(%rip)
    0000004a: 	movq	%rax, %rdi
    0000004d: 	testq	%rax, %rax
    00000050: 	je	.Ltmp82 # Offset: 80
    00000052: 	movl	current_test(%rip), %eax
    00000058: 	movsd	0x8(%rsp), %xmm0
.Ltmp81:
    0000005e: 	movslq	%eax, %rdx
    00000061: 	addl	$0x1, %eax
    00000064: 	shlq	$0x4, %rdx
    00000068: 	addq	%rdx, %rdi
    0000006b: 	movsd	%xmm0, (%rdi)
    0000006f: 	movq	%rbx, 0x8(%rdi)
    00000073: 	movl	%eax, current_test(%rip)
    00000079: 	addq	$0x10, %rsp
    0000007d: 	popq	%rbx
    0000007e: 	retq # Offset: 126
.Ltmp82:
    0000007f: 	movl	allocated_results(%rip), %edx
    00000085: 	movl	$0x1, %edi
    0000008a: 	leaq	DATAat0x17048(%rip), %rsi
    00000091: 	xorl	%eax, %eax
    00000093: 	callq	__printf_chk@PLT # Offset: 147
    00000098: 	orl	$-0x1, %edi
    0000009b: 	callq	exit@PLT # Offset: 155
DWARF CFI Instructions:
    <empty>
End of Function "_Z13record_resultdPKc"

Binary Function "_Z9summarizePKciiii" after disassembly {
  Number      : 13
  State       : disassembled
  Address     : 0x2950
  Size        : 0x325
  MaxSize     : 0x330
  Offset      : 0x2950
  Section     : .text
  Orc Section : .local.text._Z9summarizePKciiii
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB012:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x38, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movl	%r8d, 0x2c(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp83 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	movl	%esi, %r15d
    0000002b: 	movl	%edx, %r13d
    0000002e: 	jle	.Ltmp84 # Offset: 46
    00000034: 	movq	results(%rip), %rcx
    0000003b: 	subl	$0x1, %eax
    0000003e: 	movl	$0xc, %ebx
    00000043: 	shlq	$0x4, %rax
    00000047: 	leaq	0x8(%rcx), %r14
    0000004b: 	leaq	0x18(%rcx,%rax), %rbp
.Ltmp85:
    00000050: 	movq	(%r14), %rdi
    00000053: 	callq	strlen@PLT # Offset: 83
    00000058: 	cmpl	%eax, %ebx
    0000005a: 	cmovll	%eax, %ebx
    0000005d: 	addq	$0x10, %r14
    00000061: 	cmpq	%r14, %rbp
    00000064: 	jne	.Ltmp85 # Offset: 100
    00000066: 	leal	-0xc(%rbx), %edx
.Ltmp98:
    00000069: 	leaq	DATAat0x1791d(%rip), %rbp
    00000070: 	leaq	DATAat0x17068(%rip), %rsi
    00000077: 	movl	$0x1, %edi
    0000007c: 	xorl	%eax, %eax
    0000007e: 	movq	%rbp, %rcx
    00000081: 	callq	__printf_chk@PLT # Offset: 129
    00000086: 	movl	%ebx, %edx
    00000088: 	movq	%rbp, %rcx
    0000008b: 	movl	$0x1, %edi
    00000090: 	leaq	DATAat0x170a8(%rip), %rsi
    00000097: 	xorl	%eax, %eax
    00000099: 	callq	__printf_chk@PLT # Offset: 153
    0000009e: 	movl	current_test(%rip), %edx
    000000a4: 	testl	%edx, %edx
    000000a6: 	jle	.Ltmp86 # Offset: 166
    000000ac: 	pxor	%xmm0, %xmm0
    000000b0: 	pxor	%xmm1, %xmm1
    000000b4: 	xorl	%r14d, %r14d
    000000b7: 	movsd	DATAat0x17ca8(%rip), %xmm3
    000000bf: 	cvtsi2sd	%r15d, %xmm0
    000000c4: 	leaq	DATAat0x170d8(%rip), %rbp
    000000cb: 	cvtsi2sd	%r13d, %xmm1
    000000d0: 	mulsd	%xmm1, %xmm0
    000000d4: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000000dc: 	movsd	%xmm0, 0x20(%rsp)
    000000e2: 	jmp	.Ltmp87 # Offset: 226
    000000e7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp91:
    000000f0: 	comisd	%xmm0, %xmm3
    000000f4: 	ja	.Ltmp88 # Offset: 244
    000000fa: 	movq	DATAat0x17c90(%rip), %rdi
    00000101: 	movq	%rdi, %xmm2
.Ltmp92:
    00000106: 	comisd	%xmm0, %xmm3
    0000010a: 	movq	DATAat0x17c90(%rip), %rsi
    00000111: 	movq	%rsi, %xmm1
    00000116: 	ja	.Ltmp89 # Offset: 278
    00000118: 	movsd	0x20(%rsp), %xmm1
    0000011e: 	divsd	%xmm0, %xmm1
.Ltmp89:
    00000122: 	movq	0x8(%rax), %r15
    00000126: 	movsd	%xmm0, 0x18(%rsp)
    0000012c: 	addq	$0x1, %r14
    00000130: 	movsd	%xmm1, 0x10(%rsp)
    00000136: 	movq	%r15, %rdi
    00000139: 	movsd	%xmm2, 0x8(%rsp)
    0000013f: 	callq	strlen@PLT # Offset: 319
    00000144: 	movsd	0x8(%rsp), %xmm2
    0000014a: 	movl	%ebx, %ecx
    0000014c: 	movq	%r15, %r9
    0000014f: 	movsd	0x10(%rsp), %xmm1
    00000155: 	subl	%eax, %ecx
    00000157: 	movl	$0x1, %edi
    0000015c: 	movl	%r13d, %edx
    0000015f: 	movsd	0x18(%rsp), %xmm0
    00000165: 	leaq	DATAat0x17902(%rip), %r8
    0000016c: 	movq	%rbp, %rsi
    0000016f: 	movl	$0x3, %eax
    00000174: 	callq	__printf_chk@PLT # Offset: 372
    00000179: 	movl	current_test(%rip), %eax
    0000017f: 	movq	DATAat0x17ca8(%rip), %rdi
    00000186: 	cmpl	%r14d, %eax
    00000189: 	movq	%rdi, %xmm3
    0000018e: 	jle	.Ltmp90 # Offset: 398
.Ltmp87:
    00000190: 	movq	results(%rip), %rax
    00000197: 	movq	%r14, %rcx
    0000019a: 	movl	%r14d, %r13d
    0000019d: 	shlq	$0x4, %rcx
    000001a1: 	movsd	(%rax), %xmm1
    000001a5: 	addq	%rcx, %rax
    000001a8: 	movsd	(%rax), %xmm0
    000001ac: 	comisd	%xmm1, %xmm3
    000001b0: 	ja	.Ltmp91 # Offset: 432
    000001b6: 	movapd	%xmm0, %xmm2
    000001ba: 	divsd	%xmm1, %xmm2
    000001be: 	jmp	.Ltmp92 # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp88:
    000001c8: 	movq	DATAat0x17c98(%rip), %rsi
    000001cf: 	movq	DATAat0x17c90(%rip), %rdx
    000001d6: 	movq	%rsi, %xmm2
    000001db: 	movq	%rdx, %xmm1
    000001e0: 	jmp	.Ltmp89 # Offset: 480
    000001e5: 	nopl	(%rax) # Size: 3
.Ltmp90:
    000001e8: 	testl	%eax, %eax
    000001ea: 	jle	.Ltmp86 # Offset: 490
    000001f0: 	movq	results(%rip), %rdx
    000001f7: 	leal	-0x1(%rax), %ecx
    000001fa: 	pxor	%xmm1, %xmm1
    000001fe: 	shlq	$0x4, %rcx
    00000202: 	movapd	%xmm1, %xmm0
    00000206: 	leaq	0x10(%rdx), %rax
    0000020a: 	addq	%rax, %rcx
    0000020d: 	jmp	.Ltmp93 # Offset: 525
    0000020f: 	nop # Size: 1
.Ltmp94:
    00000210: 	addq	$0x10, %rax
.Ltmp93:
    00000214: 	addsd	(%rdx), %xmm0
    00000218: 	movq	%rax, %rdx
    0000021b: 	cmpq	%rax, %rcx
    0000021e: 	jne	.Ltmp94 # Offset: 542
.Ltmp99:
    00000220: 	movq	%r12, %rdx
    00000223: 	movl	$0x1, %edi
    00000228: 	movl	$0x1, %eax
    0000022d: 	movsd	%xmm1, 0x8(%rsp)
    00000233: 	leaq	DATAat0x17108(%rip), %rsi
    0000023a: 	callq	__printf_chk@PLT # Offset: 570
    0000023f: 	movl	0x2c(%rsp), %eax
    00000243: 	movl	current_test(%rip), %ebp
    00000249: 	testl	%eax, %eax
    0000024b: 	je	.Ltmp95 # Offset: 587
    0000024d: 	cmpl	$0x1, %ebp
    00000250: 	jg	.Ltmp96 # Offset: 592
.Ltmp95:
    00000252: 	movl	$0x0, current_test(%rip)
.Ltmp83:
    0000025c: 	addq	$0x38, %rsp
    00000260: 	popq	%rbx
    00000261: 	popq	%rbp
    00000262: 	popq	%r12
    00000264: 	popq	%r13
    00000266: 	popq	%r14
    00000268: 	popq	%r15
    0000026a: 	retq # Offset: 618
    0000026b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp96:
    00000270: 	movq	results(%rip), %rbx
    00000277: 	movsd	0x8(%rsp), %xmm1
    0000027d: 	movl	$0x1, %r13d
    00000283: 	movsd	(%rbx), %xmm5
    00000287: 	addq	$0x10, %rbx
    0000028b: 	movsd	%xmm5, 0x10(%rsp)
    00000291: 	nopl	(%rax) # Size: 7
.Ltmp97:
    00000298: 	movsd	(%rbx), %xmm0
    0000029c: 	movsd	%xmm1, 0x8(%rsp)
    000002a2: 	addl	$0x1, %r13d
    000002a6: 	addq	$0x10, %rbx
    000002aa: 	divsd	0x10(%rsp), %xmm0
    000002b0: 	callq	log@PLT # Offset: 688
    000002b5: 	movsd	0x8(%rsp), %xmm1
    000002bb: 	addsd	%xmm0, %xmm1
    000002bf: 	cmpl	%r13d, %ebp
    000002c2: 	jg	.Ltmp97 # Offset: 706
    000002c4: 	subl	$0x1, %ebp
    000002c7: 	pxor	%xmm0, %xmm0
    000002cb: 	cvtsi2sd	%ebp, %xmm0
    000002cf: 	divsd	%xmm0, %xmm1
    000002d3: 	movapd	%xmm1, %xmm0
    000002d7: 	callq	exp@PLT # Offset: 727
    000002dc: 	movq	%r12, %rdx
    000002df: 	movl	$0x1, %edi
    000002e4: 	leaq	DATAat0x178dd(%rip), %rsi
    000002eb: 	movl	$0x1, %eax
    000002f0: 	callq	__printf_chk@PLT # Offset: 752
    000002f5: 	movl	$0x0, current_test(%rip)
    000002ff: 	jmp	.Ltmp83 # Offset: 767
    00000304: 	nopl	(%rax) # Size: 4
.Ltmp84:
    00000308: 	xorl	%edx, %edx
    0000030a: 	movl	$0xc, %ebx
    0000030f: 	jmp	.Ltmp98 # Offset: 783
    00000314: 	nopl	(%rax) # Size: 4
.Ltmp86:
    00000318: 	pxor	%xmm1, %xmm1
    0000031c: 	movapd	%xmm1, %xmm0
    00000320: 	jmp	.Ltmp99 # Offset: 800
DWARF CFI Instructions:
    <empty>
End of Function "_Z9summarizePKciiii"

Binary Function "_Z17summarize_simplefP8_IO_FILEPKc" after disassembly {
  Number      : 14
  State       : disassembled
  Address     : 0x2c80
  Size        : 0x1a6
  MaxSize     : 0x1b0
  Offset      : 0x2c80
  Section     : .text
  Orc Section : .local.text._Z17summarize_simplefP8_IO_FILEPKc
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB013:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	pushq	%rbx
    0000000e: 	subq	$0x18, %rsp
    00000012: 	movl	current_test(%rip), %eax
    00000018: 	movq	%rsi, 0x8(%rsp)
    0000001d: 	testl	%eax, %eax
    0000001f: 	je	.Ltmp100 # Offset: 31
    00000025: 	movq	%rdi, %r12
    00000028: 	jle	.Ltmp101 # Offset: 40
    0000002e: 	movq	results(%rip), %rdx
    00000035: 	subl	$0x1, %eax
    00000038: 	movl	$0xc, %ebp
    0000003d: 	shlq	$0x4, %rax
    00000041: 	leaq	0x8(%rdx), %r13
    00000045: 	leaq	0x18(%rdx,%rax), %rbx
    0000004a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp102:
    00000050: 	movq	(%r13), %rdi
    00000054: 	callq	strlen@PLT # Offset: 84
    00000059: 	cmpl	%eax, %ebp
    0000005b: 	cmovll	%eax, %ebp
    0000005e: 	addq	$0x10, %r13
    00000062: 	cmpq	%r13, %rbx
    00000065: 	jne	.Ltmp102 # Offset: 101
    00000067: 	leal	-0xc(%rbp), %ecx
.Ltmp107:
    0000006a: 	leaq	DATAat0x1791d(%rip), %r8
    00000071: 	movl	$0x1, %esi
    00000076: 	xorl	%eax, %eax
    00000078: 	xorl	%ebx, %ebx
    0000007a: 	leaq	DATAat0x17130(%rip), %rdx
    00000081: 	movq	%r12, %rdi
    00000084: 	leaq	DATAat0x17903(%rip), %r14
    0000008b: 	callq	__fprintf_chk@PLT # Offset: 139
    00000090: 	movl	$0x1, %esi
    00000095: 	movl	%ebp, %ecx
    00000097: 	movq	%r12, %rdi
    0000009a: 	leaq	DATAat0x1791d(%rip), %r8
    000000a1: 	leaq	DATAat0x178f1(%rip), %rdx
    000000a8: 	xorl	%eax, %eax
    000000aa: 	callq	__fprintf_chk@PLT # Offset: 170
    000000af: 	movl	current_test(%rip), %esi
    000000b5: 	testl	%esi, %esi
    000000b7: 	jle	.Ltmp103 # Offset: 183
    000000bd: 	nopl	(%rax) # Size: 3
.Ltmp104:
    000000c0: 	movq	%rbx, %rdx
    000000c3: 	shlq	$0x4, %rdx
    000000c7: 	addq	results(%rip), %rdx
    000000ce: 	movq	0x8(%rdx), %r13
    000000d2: 	movq	%rdx, %r15
    000000d5: 	movq	%r13, %rdi
    000000d8: 	callq	strlen@PLT # Offset: 216
    000000dd: 	subq	$0x8, %rsp
    000000e1: 	movsd	(%r15), %xmm0
    000000e6: 	movl	%ebx, %ecx
    000000e8: 	pushq	%r13
    000000ea: 	movl	%ebp, %r8d
    000000ed: 	movq	%r14, %rdx
    000000f0: 	leaq	DATAat0x17902(%rip), %r9
    000000f7: 	subl	%eax, %r8d
    000000fa: 	movl	$0x1, %esi
    000000ff: 	movq	%r12, %rdi
    00000102: 	movl	$0x1, %eax
    00000107: 	addq	$0x1, %rbx
    0000010b: 	callq	__fprintf_chk@PLT # Offset: 267
    00000110: 	movl	current_test(%rip), %eax
    00000116: 	popq	%rdx
    00000117: 	popq	%rcx
    00000118: 	cmpl	%ebx, %eax
    0000011a: 	jg	.Ltmp104 # Offset: 282
    0000011c: 	testl	%eax, %eax
    0000011e: 	jle	.Ltmp103 # Offset: 286
    00000124: 	movq	results(%rip), %rdx
    0000012b: 	leal	-0x1(%rax), %ecx
    0000012e: 	pxor	%xmm0, %xmm0
    00000132: 	shlq	$0x4, %rcx
    00000136: 	leaq	0x10(%rdx), %rax
    0000013a: 	addq	%rax, %rcx
    0000013d: 	jmp	.Ltmp105 # Offset: 317
    0000013f: 	nop # Size: 1
.Ltmp106:
    00000140: 	addq	$0x10, %rax
.Ltmp105:
    00000144: 	addsd	(%rdx), %xmm0
    00000148: 	movq	%rax, %rdx
    0000014b: 	cmpq	%rax, %rcx
    0000014e: 	jne	.Ltmp106 # Offset: 334
.Ltmp108:
    00000150: 	movq	0x8(%rsp), %rcx
    00000155: 	movl	$0x1, %esi
    0000015a: 	movq	%r12, %rdi
    0000015d: 	movl	$0x1, %eax
    00000162: 	leaq	DATAat0x17108(%rip), %rdx
    00000169: 	callq	__fprintf_chk@PLT # Offset: 361
    0000016e: 	movl	$0x0, current_test(%rip)
.Ltmp100:
    00000178: 	addq	$0x18, %rsp
    0000017c: 	popq	%rbx
    0000017d: 	popq	%rbp
    0000017e: 	popq	%r12
    00000180: 	popq	%r13
    00000182: 	popq	%r14
    00000184: 	popq	%r15
    00000186: 	retq # Offset: 390
    00000187: 	nopw	(%rax,%rax) # Size: 9
.Ltmp101:
    00000190: 	xorl	%ecx, %ecx
    00000192: 	movl	$0xc, %ebp
    00000197: 	jmp	.Ltmp107 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp103:
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	jmp	.Ltmp108 # Offset: 420
DWARF CFI Instructions:
    <empty>
End of Function "_Z17summarize_simplefP8_IO_FILEPKc"

Binary Function "_Z11start_timerv" after disassembly {
  Number      : 15
  State       : disassembled
  Address     : 0x2e30
  Size        : 0x19
  MaxSize     : 0x20
  Offset      : 0x2e30
  Section     : .text
  Orc Section : .local.text._Z11start_timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB014:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	addq	$0x8, %rsp
    00000018: 	retq # Offset: 24
DWARF CFI Instructions:
    <empty>
End of Function "_Z11start_timerv"

Binary Function "_Z5timerv" after disassembly {
  Number      : 16
  State       : disassembled
  Address     : 0x2e50
  Size        : 0x31
  MaxSize     : 0x40
  Offset      : 0x2e50
  Section     : .text
  Orc Section : .local.text._Z5timerv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB015:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	pxor	%xmm0, %xmm0
    00000011: 	movq	%rax, end_time(%rip)
    00000018: 	subq	start_time(%rip), %rax
    0000001f: 	cvtsi2sd	%rax, %xmm0
    00000024: 	divsd	DATAat0x17ca0(%rip), %xmm0
    0000002c: 	addq	$0x8, %rsp
    00000030: 	retq # Offset: 48
DWARF CFI Instructions:
    <empty>
End of Function "_Z5timerv"

Binary Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 17
  State       : disassembled
  Address     : 0x2e90
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2e90
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB016:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f38, %edx
    00000017: 	movl	$0x746e6975, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 18
  State       : disassembled
  Address     : 0x2ec0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2ec0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB017:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3631746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameItEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 19
  State       : disassembled
  Address     : 0x2ef0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2ef0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB018:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3233746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 20
  State       : disassembled
  Address     : 0x2f20
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x2f20
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB019:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x745f3436746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameImEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 21
  State       : disassembled
  Address     : 0x2f50
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2f50
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB020:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 22
  State       : disassembled
  Address     : 0x2f80
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x2f80
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB021:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x38746e69, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x745f, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIcEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 23
  State       : disassembled
  Address     : 0x2fb0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2fb0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB022:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f36, %edx
    00000017: 	movl	$0x31746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 24
  State       : disassembled
  Address     : 0x2fe0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x2fe0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB023:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f32, %edx
    00000017: 	movl	$0x33746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 25
  State       : disassembled
  Address     : 0x3010
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x3010
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB024:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x5f34, %edx
    00000017: 	movl	$0x36746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 26
  State       : disassembled
  Address     : 0x3040
  Size        : 0x26
  MaxSize     : 0x30
  Offset      : 0x3040
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB025:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x74, 0x14(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x616f6c66, 0x10(%rdi)
    00000019: 	movq	$0x5, 0x8(%rdi)
    00000021: 	movb	$0x0, 0x15(%rdi)
    00000025: 	retq # Offset: 37
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 27
  State       : disassembled
  Address     : 0x3070
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x3070
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB026:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x62756f64, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x656c, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 28
  State       : disassembled
  Address     : 0x30a0
  Size        : 0x36
  MaxSize     : 0x40
  Offset      : 0x30a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB027:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x65, 0x1a(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movl	$0x6c62, %edx
    00000021: 	movq	%rcx, 0x10(%rdi)
    00000025: 	movw	%dx, 0x18(%rdi)
    00000029: 	movq	$0xb, 0x8(%rdi)
    00000031: 	movb	$0x0, 0x1b(%rdi)
    00000035: 	retq # Offset: 53
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 29
  State       : disassembled
  Address     : 0x30e0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x30e0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB028:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f38746e6975, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPhEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 30
  State       : disassembled
  Address     : 0x3110
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x3110
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB029:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3631746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPtEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 31
  State       : disassembled
  Address     : 0x3140
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x3140
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB030:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3233746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPjEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 32
  State       : disassembled
  Address     : 0x3170
  Size        : 0x2d
  MaxSize     : 0x30
  Offset      : 0x3170
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB031:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x18(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x745f3436746e6975, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movq	$0x9, 0x8(%rdi)
    00000028: 	movb	$0x0, 0x19(%rdi)
    0000002c: 	retq # Offset: 44
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPmEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 33
  State       : disassembled
  Address     : 0x31a0
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x31a0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB032:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x745f, %edx
    00000017: 	movl	$0x38746e69, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPaEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 34
  State       : disassembled
  Address     : 0x31d0
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x31d0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB033:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3631746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPsEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 35
  State       : disassembled
  Address     : 0x3200
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3200
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB034:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3233746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPiEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 36
  State       : disassembled
  Address     : 0x3230
  Size        : 0x29
  MaxSize     : 0x30
  Offset      : 0x3230
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB035:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movq	$0x8, 0x8(%rdi)
    00000010: 	movq	%rdi, %rax
    00000013: 	movabsq	$0x2a745f3436746e69, %rcx
    0000001d: 	movq	%rdx, (%rdi)
    00000020: 	movq	%rcx, 0x10(%rdi)
    00000024: 	movb	$0x0, 0x18(%rdi)
    00000028: 	retq # Offset: 40
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPlEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 37
  State       : disassembled
  Address     : 0x3260
  Size        : 0x2b
  MaxSize     : 0x30
  Offset      : 0x3260
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB036:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movl	$0x616f6c66, 0x10(%rdi)
    0000000f: 	movq	%rdi, %rax
    00000012: 	movq	%rdx, (%rdi)
    00000015: 	movl	$0x2a74, %edx
    0000001a: 	movw	%dx, 0x14(%rdi)
    0000001e: 	movq	$0x6, 0x8(%rdi)
    00000026: 	movb	$0x0, 0x16(%rdi)
    0000002a: 	retq # Offset: 42
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPfEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 38
  State       : disassembled
  Address     : 0x3290
  Size        : 0x2f
  MaxSize     : 0x30
  Offset      : 0x3290
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB037:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x2a, 0x16(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movq	%rdx, (%rdi)
    00000012: 	movl	$0x656c, %edx
    00000017: 	movl	$0x62756f64, 0x10(%rdi)
    0000001e: 	movw	%dx, 0x14(%rdi)
    00000022: 	movq	$0x7, 0x8(%rdi)
    0000002a: 	movb	$0x0, 0x17(%rdi)
    0000002e: 	retq # Offset: 46
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPdEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv" after disassembly {
  Number      : 39
  State       : disassembled
  Address     : 0x32c0
  Size        : 0x30
  MaxSize     : 0x30
  Offset      : 0x32c0
  Section     : .text
  Orc Section : .local.text._ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB038:
    00000000: 	endbr64
    00000004: 	leaq	0x10(%rdi), %rdx
    00000008: 	movb	$0x0, 0x1c(%rdi)
    0000000c: 	movq	%rdi, %rax
    0000000f: 	movabsq	$0x756f6420676e6f6c, %rcx
    00000019: 	movq	%rdx, (%rdi)
    0000001c: 	movq	%rcx, 0x10(%rdi)
    00000020: 	movl	$0x2a656c62, 0x18(%rdi)
    00000027: 	movq	$0xc, 0x8(%rdi)
    0000002f: 	retq # Offset: 47
DWARF CFI Instructions:
    <empty>
End of Function "_ZN9benchmark11getTypeNameIPeEENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEv"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/scalar_replacement_structs.cpp/1
  Number      : 40
  State       : disassembled
  Address     : 0x32f0
  Size        : 0x114
  MaxSize     : 0x120
  Offset      : 0x32f0
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB039:
    00000000: 	pushq	%r12
    00000002: 	movq	%rdi, %rsi
    00000005: 	pushq	%rbp
    00000006: 	pushq	%rbx
    00000007: 	subq	$0x10, %rsp
    0000000b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000012: 	movq	%fs:0x28, %rax
    0000001b: 	movq	%rax, 0x8(%rsp)
    00000020: 	xorl	%eax, %eax
    00000022: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000029: 	subq	$0x20, %rax
    0000002d: 	cmpq	%rax, %rbx
    00000030: 	je	.Ltmp109 # Offset: 48
    00000036: 	leaq	0x10(%rbx), %rdi
    0000003a: 	movq	0x8(%rsi), %r12
    0000003e: 	movq	%rdi, (%rbx)
    00000041: 	movq	(%rsi), %rbp
    00000044: 	movq	%rbp, %rax
    00000047: 	addq	%r12, %rax
    0000004a: 	je	.Ltmp110 # Offset: 74
    0000004c: 	testq	%rbp, %rbp
    0000004f: 	je	.Ltmp111 # Offset: 79
.Ltmp110:
    00000055: 	movq	%r12, (%rsp)
    00000059: 	cmpq	$0xf, %r12
    0000005d: 	ja	.Ltmp112 # Offset: 93
    0000005f: 	cmpq	$0x1, %r12
    00000063: 	jne	.Ltmp113 # Offset: 99
    00000069: 	movzbl	(%rbp), %eax
    0000006d: 	movb	%al, 0x10(%rbx)
.Ltmp115:
    00000070: 	movq	%r12, 0x8(%rbx)
    00000074: 	movb	$0x0, (%rdi,%r12)
    00000079: 	addq	$0x20, _Z7gLabelsB5cxx11+48(%rip)
    00000081: 	movq	0x8(%rsp), %rax
    00000086: 	subq	%fs:0x28, %rax
    0000008f: 	jne	.Ltmp114 # Offset: 143
    00000091: 	addq	$0x10, %rsp
    00000095: 	popq	%rbx
    00000096: 	popq	%rbp
    00000097: 	popq	%r12
    00000099: 	retq # Offset: 153
    0000009a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp112:
    000000a0: 	movq	%rbx, %rdi
    000000a3: 	movq	%rsp, %rsi
    000000a6: 	xorl	%edx, %edx
    000000a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 168
    000000ad: 	movq	%rax, (%rbx)
    000000b0: 	movq	%rax, %rdi
    000000b3: 	movq	(%rsp), %rax
    000000b7: 	movq	%rax, 0x10(%rbx)
.Ltmp116:
    000000bb: 	movq	%r12, %rdx
    000000be: 	movq	%rbp, %rsi
    000000c1: 	callq	memcpy@PLT # Offset: 193
    000000c6: 	movq	(%rsp), %r12
    000000ca: 	movq	(%rbx), %rdi
    000000cd: 	jmp	.Ltmp115 # Offset: 205
    000000cf: 	nop # Size: 1
.Ltmp109:
    000000d0: 	movq	0x8(%rsp), %rax
    000000d5: 	subq	%fs:0x28, %rax
    000000de: 	jne	.Ltmp114 # Offset: 222
    000000e0: 	addq	$0x10, %rsp
    000000e4: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000000eb: 	popq	%rbx
    000000ec: 	popq	%rbp
    000000ed: 	popq	%r12
    000000ef: 	jmp	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # TAILCALL  # Offset: 239
    000000f4: 	nopl	(%rax) # Size: 4
.Ltmp113:
    000000f8: 	testq	%r12, %r12
    000000fb: 	je	.Ltmp115 # Offset: 251
    00000101: 	jmp	.Ltmp116 # Offset: 257
.Ltmp111:
    00000103: 	leaq	DATAat0x17018(%rip), %rdi
    0000010a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 266
.Ltmp114:
    0000010f: 	callq	__stack_chk_fail@PLT # Offset: 271
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1(*2)"

Binary Function "_Z11check5_sumsIsEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)" after disassembly {
  All names   : _Z11check5_sumsIsEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
                _Z11check5_sumsIsEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/scalar_replacement_structs.cpp/1
  Number      : 41
  State       : disassembled
  Address     : 0x3410
  Size        : 0x7a
  MaxSize     : 0x80
  Offset      : 0x3410
  Section     : .text
  Orc Section : .local.text._Z11check5_sumsIsEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB040:
    00000000: 	movl	%edx, %r10d
    00000003: 	movl	iterations(%rip), %edx
    00000009: 	pushq	%rbx
    0000000a: 	movl	%ecx, %ebx
    0000000c: 	movl	%edi, %r11d
    0000000f: 	movl	%esi, %edi
    00000011: 	leal	(%rdx,%rdx,2), %ecx
    00000014: 	shll	$0x2, %ecx
    00000017: 	leal	(%rcx,%rdx), %eax
    0000001a: 	shll	$0x2, %eax
    0000001d: 	addw	init_value(%rip), %ax
    00000024: 	movl	%eax, %esi
    00000026: 	subl	%ecx, %esi
    00000028: 	cmpw	%r11w, %ax
    0000002c: 	jne	.Ltmp117 # Offset: 44
    0000002e: 	cmpw	%di, %si
    00000031: 	jne	.Ltmp117 # Offset: 49
    00000033: 	leal	(,%rdx,4), %eax
    0000003a: 	shll	$0x4, %edx
    0000003d: 	subl	%eax, %esi
    0000003f: 	movl	%esi, %eax
    00000041: 	subl	%edx, %eax
    00000043: 	cmpw	%bx, %ax
    00000046: 	setne	%al
    00000049: 	cmpw	%r10w, %si
    0000004d: 	setne	%dl
    00000050: 	orb	%dl, %al
    00000052: 	jne	.Ltmp117 # Offset: 82
    00000054: 	cmpw	%r8w, %si
    00000058: 	je	.Ltmp118 # Offset: 88
.Ltmp117:
    0000005a: 	movq	(%r9), %rdx
    0000005d: 	leaq	DATAat0x17004(%rip), %rsi
    00000064: 	movl	$0x1, %edi
    00000069: 	popq	%rbx
    0000006a: 	xorl	%eax, %eax
    0000006c: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 108
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp118:
    00000078: 	popq	%rbx
    00000079: 	retq # Offset: 121
DWARF CFI Instructions:
    <empty>
End of Function "_Z11check5_sumsIsEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1(*2)"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)" after disassembly {
  All names   : _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
                _ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev
  Number      : 42
  State       : disassembled
  Address     : 0x3490
  Size        : 0x1f7
  MaxSize     : 0x200
  Offset      : 0x3490
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB041:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	movq	%rdi, %r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	0x20(%rdi), %rcx
    00000019: 	movq	0x30(%rdi), %rax
    0000001d: 	movq	0x38(%rdi), %r13
    00000021: 	movq	0x10(%rdi), %rbp
    00000025: 	movq	%rcx, 0x10(%rsp)
    0000002a: 	movq	0x28(%rdi), %rcx
    0000002e: 	movq	%rax, 0x8(%rsp)
    00000033: 	movq	0x48(%rdi), %rax
    00000037: 	leaq	0x8(%rcx), %r12
    0000003b: 	movq	%rcx, 0x18(%rsp)
    00000040: 	movq	%rax, (%rsp)
    00000044: 	cmpq	%r12, %rax
    00000047: 	jbe	.Ltmp119 # Offset: 71
    00000049: 	nopl	(%rax) # Size: 7
.Ltmp122:
    00000050: 	movq	(%r12), %r15
    00000054: 	leaq	0x200(%r15), %rbx
    0000005b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp121:
    00000060: 	movq	(%r15), %rdi
    00000063: 	leaq	0x10(%r15), %rdx
    00000067: 	cmpq	%rdx, %rdi
    0000006a: 	je	.Ltmp120 # Offset: 106
    00000070: 	movq	0x10(%r15), %rax
    00000074: 	addq	$0x20, %r15
    00000078: 	leaq	0x1(%rax), %rsi
    0000007c: 	callq	_ZdlPvm@PLT # Offset: 124
    00000081: 	cmpq	%r15, %rbx
    00000084: 	jne	.Ltmp121 # Offset: 132
    00000086: 	addq	$0x8, %r12
    0000008a: 	cmpq	%r12, (%rsp)
    0000008e: 	ja	.Ltmp122 # Offset: 142
.Ltmp119:
    00000090: 	movq	(%rsp), %rcx
    00000094: 	cmpq	%rcx, 0x18(%rsp)
    00000099: 	je	.Ltmp123 # Offset: 153
    0000009f: 	cmpq	0x10(%rsp), %rbp
    000000a4: 	je	.Ltmp124 # Offset: 164
.Ltmp127:
    000000a6: 	movq	(%rbp), %rdi
    000000aa: 	leaq	0x10(%rbp), %rax
    000000ae: 	cmpq	%rax, %rdi
    000000b1: 	je	.Ltmp125 # Offset: 177
.Ltmp126:
    000000b3: 	movq	0x10(%rbp), %rax
    000000b7: 	addq	$0x20, %rbp
    000000bb: 	leaq	0x1(%rax), %rsi
    000000bf: 	callq	_ZdlPvm@PLT # Offset: 191
    000000c4: 	cmpq	%rbp, 0x10(%rsp)
    000000c9: 	je	.Ltmp124 # Offset: 201
    000000cb: 	movq	(%rbp), %rdi
    000000cf: 	leaq	0x10(%rbp), %rax
    000000d3: 	cmpq	%rax, %rdi
    000000d6: 	jne	.Ltmp126 # Offset: 214
.Ltmp125:
    000000d8: 	addq	$0x20, %rbp
    000000dc: 	cmpq	%rbp, 0x10(%rsp)
    000000e1: 	jne	.Ltmp127 # Offset: 225
    000000e3: 	cmpq	%r13, 0x8(%rsp)
    000000e8: 	je	.Ltmp128 # Offset: 232
    000000ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp130:
    000000f0: 	movq	(%r13), %rdi
    000000f4: 	leaq	0x10(%r13), %rax
    000000f8: 	cmpq	%rax, %rdi
    000000fb: 	je	.Ltmp129 # Offset: 251
    000000fd: 	movq	0x10(%r13), %rax
    00000101: 	leaq	0x1(%rax), %rsi
    00000105: 	callq	_ZdlPvm@PLT # Offset: 261
.Ltmp129:
    0000010a: 	addq	$0x20, %r13
.Ltmp124:
    0000010e: 	cmpq	%r13, 0x8(%rsp)
    00000113: 	jne	.Ltmp130 # Offset: 275
.Ltmp128:
    00000115: 	movq	(%r14), %rdi
    00000118: 	testq	%rdi, %rdi
    0000011b: 	je	.Ltmp131 # Offset: 283
.Ltmp137:
    00000121: 	movq	0x48(%r14), %rax
    00000125: 	movq	0x28(%r14), %rbx
    00000129: 	leaq	0x8(%rax), %rbp
    0000012d: 	cmpq	%rbx, %rbp
    00000130: 	jbe	.Ltmp132 # Offset: 304
    00000132: 	nopw	(%rax,%rax) # Size: 6
.Ltmp133:
    00000138: 	movq	(%rbx), %rdi
    0000013b: 	movl	$0x200, %esi
    00000140: 	addq	$0x8, %rbx
    00000144: 	callq	_ZdlPvm@PLT # Offset: 324
    00000149: 	cmpq	%rbx, %rbp
    0000014c: 	ja	.Ltmp133 # Offset: 332
    0000014e: 	movq	(%r14), %rdi
.Ltmp132:
    00000151: 	movq	0x8(%r14), %rsi
    00000155: 	addq	$0x28, %rsp
    00000159: 	popq	%rbx
    0000015a: 	popq	%rbp
    0000015b: 	shlq	$0x3, %rsi
    0000015f: 	popq	%r12
    00000161: 	popq	%r13
    00000163: 	popq	%r14
    00000165: 	popq	%r15
    00000167: 	jmp	_ZdlPvm@PLT # TAILCALL  # Offset: 359
    0000016c: 	nopl	(%rax) # Size: 4
.Ltmp120:
    00000170: 	addq	$0x20, %r15
    00000174: 	cmpq	%r15, %rbx
    00000177: 	jne	.Ltmp121 # Offset: 375
    0000017d: 	addq	$0x8, %r12
    00000181: 	cmpq	%r12, (%rsp)
    00000185: 	ja	.Ltmp122 # Offset: 389
    0000018b: 	jmp	.Ltmp119 # Offset: 395
.Ltmp123:
    00000190: 	cmpq	0x8(%rsp), %rbp
    00000195: 	je	.Ltmp128 # Offset: 405
.Ltmp136:
    0000019b: 	movq	(%rbp), %rdi
    0000019f: 	leaq	0x10(%rbp), %rax
    000001a3: 	cmpq	%rax, %rdi
    000001a6: 	je	.Ltmp134 # Offset: 422
.Ltmp135:
    000001a8: 	movq	0x10(%rbp), %rax
    000001ac: 	addq	$0x20, %rbp
    000001b0: 	leaq	0x1(%rax), %rsi
    000001b4: 	callq	_ZdlPvm@PLT # Offset: 436
    000001b9: 	cmpq	%rbp, 0x8(%rsp)
    000001be: 	je	.Ltmp128 # Offset: 446
    000001c4: 	movq	(%rbp), %rdi
    000001c8: 	leaq	0x10(%rbp), %rax
    000001cc: 	cmpq	%rax, %rdi
    000001cf: 	jne	.Ltmp135 # Offset: 463
.Ltmp134:
    000001d1: 	addq	$0x20, %rbp
    000001d5: 	cmpq	%rbp, 0x8(%rsp)
    000001da: 	jne	.Ltmp136 # Offset: 474
    000001dc: 	movq	(%r14), %rdi
    000001df: 	testq	%rdi, %rdi
    000001e2: 	jne	.Ltmp137 # Offset: 482
.Ltmp131:
    000001e8: 	addq	$0x28, %rsp
    000001ec: 	popq	%rbx
    000001ed: 	popq	%rbp
    000001ee: 	popq	%r12
    000001f0: 	popq	%r13
    000001f2: 	popq	%r14
    000001f4: 	popq	%r15
    000001f6: 	retq # Offset: 502
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED1Ev(*2)"

Binary Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_" after disassembly {
  Number      : 43
  State       : disassembled
  Address     : 0x3690
  Size        : 0x145
  MaxSize     : 0x150
  Offset      : 0x3690
  Section     : .text
  Orc Section : .local.text._ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB042:
    00000000: 	endbr64
    00000004: 	pushq	%r14
    00000006: 	pushq	%r13
    00000008: 	pushq	%r12
    0000000a: 	movq	%rdi, %r12
    0000000d: 	pushq	%rbp
    0000000e: 	movq	%rdx, %rbp
    00000011: 	pushq	%rbx
    00000012: 	leaq	0x10(%rdi), %rbx
    00000016: 	subq	$0x10, %rsp
    0000001a: 	movq	0x8(%rsi), %r13
    0000001e: 	movq	%fs:0x28, %rax
    00000027: 	movq	%rax, 0x8(%rsp)
    0000002c: 	xorl	%eax, %eax
    0000002e: 	movq	%rbx, (%rdi)
    00000031: 	movq	(%rsi), %r14
    00000034: 	movq	%r14, %rax
    00000037: 	addq	%r13, %rax
    0000003a: 	je	.Ltmp138 # Offset: 58
    0000003c: 	testq	%r14, %r14
    0000003f: 	je	.Ltmp139 # Offset: 63
.Ltmp138:
    00000045: 	movq	%r13, (%rsp)
    00000049: 	cmpq	$0xf, %r13
    0000004d: 	ja	.Ltmp140 # Offset: 77
    0000004f: 	cmpq	$0x1, %r13
    00000053: 	jne	.Ltmp141 # Offset: 83
    00000055: 	movzbl	(%r14), %eax
    00000059: 	movb	%al, 0x10(%r12)
    0000005e: 	movq	%rbx, %rax
.Ltmp145:
    00000061: 	movq	%r13, 0x8(%r12)
    00000066: 	movq	%rbp, %rdi
    00000069: 	movb	$0x0, (%rax,%r13)
    0000006e: 	callq	strlen@PLT # Offset: 110
    00000073: 	movq	%rax, %rdx
    00000076: 	movabsq	$0x3fffffffffffffff, %rax
    00000080: 	subq	0x8(%r12), %rax
    00000085: 	cmpq	%rax, %rdx
    00000088: 	ja	.Ltmp142 # Offset: 136
    0000008a: 	movq	%rbp, %rsi
    0000008d: 	movq	%r12, %rdi
    00000090: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm@PLT # Offset: 144
    00000095: 	movq	0x8(%rsp), %rax
    0000009a: 	subq	%fs:0x28, %rax
    000000a3: 	jne	.Ltmp143 # Offset: 163
    000000a5: 	addq	$0x10, %rsp
    000000a9: 	movq	%r12, %rax
    000000ac: 	popq	%rbx
    000000ad: 	popq	%rbp
    000000ae: 	popq	%r12
    000000b0: 	popq	%r13
    000000b2: 	popq	%r14
    000000b4: 	retq # Offset: 180
    000000b5: 	nopl	(%rax) # Size: 3
.Ltmp141:
    000000b8: 	testq	%r13, %r13
    000000bb: 	jne	.Ltmp144 # Offset: 187
    000000bd: 	movq	%rbx, %rax
    000000c0: 	jmp	.Ltmp145 # Offset: 192
    000000c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp140:
    000000c8: 	movq	%r12, %rdi
    000000cb: 	movq	%rsp, %rsi
    000000ce: 	xorl	%edx, %edx
    000000d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 208
    000000d5: 	movq	%rax, (%r12)
    000000d9: 	movq	%rax, %rdi
    000000dc: 	movq	(%rsp), %rax
    000000e0: 	movq	%rax, 0x10(%r12)
.Ltmp146:
    000000e5: 	movq	%r13, %rdx
    000000e8: 	movq	%r14, %rsi
    000000eb: 	callq	memcpy@PLT # Offset: 235
    000000f0: 	movq	(%rsp), %r13
    000000f4: 	movq	(%r12), %rax
    000000f8: 	jmp	.Ltmp145 # Offset: 248
.Ltmp139:
    000000fd: 	leaq	DATAat0x17018(%rip), %rdi
    00000104: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 260
.Ltmp142:
    00000109: 	leaq	DATAat0x1791f(%rip), %rdi
    00000110: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 272
.Ltmp143:
    00000115: 	callq	__stack_chk_fail@PLT # Offset: 277
.Ltmp144:
    0000011a: 	movq	%rbx, %rdi
    0000011d: 	jmp	.Ltmp146 # Offset: 285
    0000011f: 	endbr64
    00000123: 	movq	%rax, %rbp
    00000126: 	movq	(%r12), %rdi
    0000012a: 	cmpq	%rdi, %rbx
    0000012d: 	je	.Ltmp147 # Offset: 301
    0000012f: 	movq	0x10(%r12), %rsi
    00000134: 	addq	$0x1, %rsi
    00000138: 	callq	_ZdlPvm@PLT # Offset: 312
.Ltmp147:
    0000013d: 	movq	%rbp, %rdi
    00000140: 	callq	_Unwind_Resume@PLT # Offset: 320
DWARF CFI Instructions:
    <empty>
End of Function "_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"

Binary Function "_Z12check11_sumsIsEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 44
  State       : disassembled
  Address     : 0x37e0
  Size        : 0x128
  MaxSize     : 0x130
  Offset      : 0x37e0
  Section     : .text
  Orc Section : .local.text._Z12check11_sumsIsEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB043:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %rax
    00000009: 	movq	%rsi, %rdi
    0000000c: 	pushq	%r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movzwl	0x12(%rax), %ecx
    00000018: 	movzwl	0x14(%rax), %edx
    0000001c: 	movzwl	0x4(%rax), %r10d
    00000021: 	movzwl	0x6(%rax), %r11d
    00000026: 	movzwl	0x8(%rax), %ebx
    0000002a: 	movzwl	0xa(%rax), %ebp
    0000002e: 	movzwl	0xc(%rax), %r12d
    00000033: 	movw	%cx, -0xc(%rsp)
    00000038: 	movl	iterations(%rip), %ecx
    0000003e: 	movzwl	0xe(%rax), %r13d
    00000043: 	movw	%dx, -0xa(%rsp)
    00000048: 	movzwl	0x10(%rax), %r14d
    0000004d: 	leal	(%rcx,%rcx), %r9d
    00000051: 	leal	(%r9,%rcx), %r8d
    00000055: 	leal	(,%r8,4), %r15d
    0000005d: 	leal	(%r15,%rcx), %edx
    00000061: 	shll	$0x2, %edx
    00000064: 	addw	init_value(%rip), %dx
    0000006b: 	movl	%edx, %esi
    0000006d: 	subl	%r15d, %esi
    00000070: 	cmpw	%dx, (%rax)
    00000073: 	jne	.Ltmp148 # Offset: 115
    00000079: 	cmpw	%si, 0x2(%rax)
    0000007d: 	jne	.Ltmp148 # Offset: 125
    00000083: 	leal	(,%rcx,4), %edx
    0000008a: 	movl	%ecx, %r15d
    0000008d: 	subl	%edx, %esi
    0000008f: 	shll	$0x4, %r15d
    00000093: 	movl	%esi, %eax
    00000095: 	subl	%r15d, %eax
    00000098: 	cmpw	%si, %r10w
    0000009c: 	jne	.Ltmp148 # Offset: 156
    0000009e: 	cmpw	%r11w, %ax
    000000a2: 	jne	.Ltmp148 # Offset: 162
    000000a4: 	addl	%ecx, %edx
    000000a6: 	leal	(%rcx,%rdx,2), %r10d
    000000aa: 	subl	%r10d, %eax
    000000ad: 	cmpw	%si, %bx
    000000b0: 	jne	.Ltmp148 # Offset: 176
    000000b2: 	cmpw	%bp, %ax
    000000b5: 	jne	.Ltmp148 # Offset: 181
    000000b7: 	leal	(%rax,%r8,2), %eax
    000000bb: 	subl	%ecx, %r15d
    000000be: 	addl	%eax, %r15d
    000000c1: 	cmpw	%r12w, %ax
    000000c5: 	jne	.Ltmp148 # Offset: 197
    000000c7: 	cmpw	%r13w, %r15w
    000000cb: 	jne	.Ltmp148 # Offset: 203
    000000cd: 	leal	(%r8,%r8,8), %r8d
    000000d1: 	addl	%r15d, %r8d
    000000d4: 	movl	%r8d, %esi
    000000d7: 	subl	%r9d, %esi
    000000da: 	cmpw	%r14w, %r8w
    000000de: 	setne	%al
    000000e1: 	cmpw	-0xc(%rsp), %si
    000000e6: 	movl	%esi, %ecx
    000000e8: 	setne	%sil
    000000ec: 	orb	%sil, %al
    000000ef: 	jne	.Ltmp148 # Offset: 239
    000000f1: 	addl	%ecx, %edx
    000000f3: 	cmpw	-0xa(%rsp), %dx
    000000f8: 	jne	.Ltmp148 # Offset: 248
    000000fa: 	popq	%rbx
    000000fb: 	popq	%rbp
    000000fc: 	popq	%r12
    000000fe: 	popq	%r13
    00000100: 	popq	%r14
    00000102: 	popq	%r15
    00000104: 	retq # Offset: 260
    00000105: 	nopl	(%rax) # Size: 3
.Ltmp148:
    00000108: 	movq	(%rdi), %rdx
    0000010b: 	popq	%rbx
    0000010c: 	leaq	DATAat0x17004(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	popq	%rbp
    00000119: 	xorl	%eax, %eax
    0000011b: 	popq	%r12
    0000011d: 	popq	%r13
    0000011f: 	popq	%r14
    00000121: 	popq	%r15
    00000123: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 291
DWARF CFI Instructions:
    <empty>
End of Function "_Z12check11_sumsIsEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12check11_sumsIiEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 45
  State       : disassembled
  Address     : 0x3910
  Size        : 0x108
  MaxSize     : 0x110
  Offset      : 0x3910
  Section     : .text
  Orc Section : .local.text._Z12check11_sumsIiEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB044:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %rax
    00000009: 	movq	%rsi, %rdi
    0000000c: 	pushq	%r14
    0000000e: 	pushq	%r13
    00000010: 	pushq	%r12
    00000012: 	pushq	%rbp
    00000013: 	pushq	%rbx
    00000014: 	movl	0x24(%rax), %edx
    00000017: 	movl	0x28(%rax), %ecx
    0000001a: 	movl	0x8(%rax), %r10d
    0000001e: 	movl	0xc(%rax), %r11d
    00000022: 	movl	0x10(%rax), %ebx
    00000025: 	movl	0x14(%rax), %ebp
    00000028: 	movl	0x18(%rax), %r12d
    0000002c: 	movl	%edx, -0x10(%rsp)
    00000030: 	movl	iterations(%rip), %edx
    00000036: 	movl	0x1c(%rax), %r13d
    0000003a: 	movl	%ecx, -0xc(%rsp)
    0000003e: 	movl	0x20(%rax), %r14d
    00000042: 	imull	$0x34, %edx, %ecx
    00000045: 	leal	(%rdx,%rdx), %r9d
    00000049: 	addl	init_value(%rip), %ecx
    0000004f: 	leal	(%r9,%rdx), %r8d
    00000053: 	movl	%ecx, %esi
    00000055: 	leal	(,%r8,4), %r15d
    0000005d: 	subl	%r15d, %esi
    00000060: 	cmpl	%ecx, (%rax)
    00000062: 	jne	.Ltmp149 # Offset: 98
    00000068: 	cmpl	%esi, 0x4(%rax)
    0000006b: 	jne	.Ltmp149 # Offset: 107
    0000006d: 	leal	(,%rdx,4), %eax
    00000074: 	movl	%edx, %r15d
    00000077: 	subl	%eax, %esi
    00000079: 	shll	$0x4, %r15d
    0000007d: 	movl	%esi, %ecx
    0000007f: 	subl	%r15d, %ecx
    00000082: 	cmpl	%esi, %r10d
    00000085: 	jne	.Ltmp149 # Offset: 133
    00000087: 	cmpl	%ecx, %r11d
    0000008a: 	jne	.Ltmp149 # Offset: 138
    0000008c: 	addl	%edx, %eax
    0000008e: 	leal	(%rdx,%rax,2), %r10d
    00000092: 	subl	%r10d, %ecx
    00000095: 	cmpl	%esi, %ebx
    00000097: 	jne	.Ltmp149 # Offset: 151
    00000099: 	cmpl	%ecx, %ebp
    0000009b: 	jne	.Ltmp149 # Offset: 155
    0000009d: 	leal	(%rcx,%r8,2), %ecx
    000000a1: 	subl	%edx, %r15d
    000000a4: 	addl	%ecx, %r15d
    000000a7: 	cmpl	%ecx, %r12d
    000000aa: 	jne	.Ltmp149 # Offset: 170
    000000ac: 	cmpl	%r15d, %r13d
    000000af: 	jne	.Ltmp149 # Offset: 175
    000000b1: 	leal	(%r8,%r8,8), %edx
    000000b5: 	addl	%r15d, %edx
    000000b8: 	movl	%edx, %esi
    000000ba: 	subl	%r9d, %esi
    000000bd: 	cmpl	%edx, %r14d
    000000c0: 	setne	%dl
    000000c3: 	cmpl	%esi, -0x10(%rsp)
    000000c7: 	movl	%esi, %ecx
    000000c9: 	setne	%sil
    000000cd: 	orb	%sil, %dl
    000000d0: 	jne	.Ltmp149 # Offset: 208
    000000d2: 	addl	%ecx, %eax
    000000d4: 	cmpl	-0xc(%rsp), %eax
    000000d8: 	jne	.Ltmp149 # Offset: 216
    000000da: 	popq	%rbx
    000000db: 	popq	%rbp
    000000dc: 	popq	%r12
    000000de: 	popq	%r13
    000000e0: 	popq	%r14
    000000e2: 	popq	%r15
    000000e4: 	retq # Offset: 228
    000000e5: 	nopl	(%rax) # Size: 3
.Ltmp149:
    000000e8: 	movq	(%rdi), %rdx
    000000eb: 	popq	%rbx
    000000ec: 	leaq	DATAat0x17004(%rip), %rsi
    000000f3: 	movl	$0x1, %edi
    000000f8: 	popq	%rbp
    000000f9: 	xorl	%eax, %eax
    000000fb: 	popq	%r12
    000000fd: 	popq	%r13
    000000ff: 	popq	%r14
    00000101: 	popq	%r15
    00000103: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 259
DWARF CFI Instructions:
    <empty>
End of Function "_Z12check11_sumsIiEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11check5_sumsIiEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 46
  State       : disassembled
  Address     : 0x3a20
  Size        : 0x71
  MaxSize     : 0x80
  Offset      : 0x3a20
  Section     : .text
  Orc Section : .local.text._Z11check5_sumsIiEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB045:
    00000000: 	endbr64
    00000004: 	movl	iterations(%rip), %eax
    0000000a: 	movq	%rsi, %r8
    0000000d: 	movl	0x8(%rdi), %r9d
    00000011: 	movl	0xc(%rdi), %r10d
    00000015: 	movl	0x10(%rdi), %r11d
    00000019: 	imull	$0x34, %eax, %edx
    0000001c: 	leal	(%rax,%rax,2), %esi
    0000001f: 	addl	init_value(%rip), %edx
    00000025: 	shll	$0x2, %esi
    00000028: 	movl	%edx, %ecx
    0000002a: 	subl	%esi, %ecx
    0000002c: 	cmpl	%edx, (%rdi)
    0000002e: 	jne	.Ltmp150 # Offset: 46
    00000030: 	cmpl	%ecx, 0x4(%rdi)
    00000033: 	jne	.Ltmp150 # Offset: 51
    00000035: 	leal	(,%rax,4), %edx
    0000003c: 	shll	$0x4, %eax
    0000003f: 	subl	%edx, %ecx
    00000041: 	movl	%ecx, %edx
    00000043: 	subl	%eax, %edx
    00000045: 	cmpl	%r10d, %edx
    00000048: 	setne	%al
    0000004b: 	cmpl	%ecx, %r9d
    0000004e: 	setne	%dl
    00000051: 	orb	%dl, %al
    00000053: 	jne	.Ltmp150 # Offset: 83
    00000055: 	cmpl	%ecx, %r11d
    00000058: 	je	.Ltmp151 # Offset: 88
.Ltmp150:
    0000005a: 	movq	(%r8), %rdx
    0000005d: 	leaq	DATAat0x17004(%rip), %rsi
    00000064: 	movl	$0x1, %edi
    00000069: 	xorl	%eax, %eax
    0000006b: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 107
.Ltmp151:
    00000070: 	retq # Offset: 112
DWARF CFI Instructions:
    <empty>
End of Function "_Z11check5_sumsIiEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12check11_sumsImEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 47
  State       : disassembled
  Address     : 0x3aa0
  Size        : 0x128
  MaxSize     : 0x130
  Offset      : 0x3aa0
  Section     : .text
  Orc Section : .local.text._Z12check11_sumsImEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB046:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	movq	%rdi, %rax
    00000009: 	pushq	%r14
    0000000b: 	pushq	%r13
    0000000d: 	pushq	%r12
    0000000f: 	pushq	%rbp
    00000010: 	pushq	%rbx
    00000011: 	movq	0x48(%rdi), %rdx
    00000015: 	movq	0x50(%rdi), %rcx
    00000019: 	movq	0x10(%rdi), %r10
    0000001d: 	movq	0x18(%rdi), %r11
    00000021: 	movq	0x20(%rdi), %rbx
    00000025: 	movq	0x28(%rdi), %rbp
    00000029: 	movq	0x30(%rdi), %r12
    0000002d: 	movq	%rdx, -0x18(%rsp)
    00000032: 	movslq	iterations(%rip), %rdx
    00000039: 	movq	0x38(%rdi), %r13
    0000003d: 	movq	%rcx, -0x10(%rsp)
    00000042: 	movslq	init_value(%rip), %rcx
    00000049: 	movq	0x40(%rdi), %r14
    0000004d: 	leaq	(%rdx,%rdx), %r9
    00000051: 	leaq	(%r9,%rdx), %r8
    00000055: 	leaq	(,%r8,4), %r15
    0000005d: 	leaq	(%r15,%rdx), %rdi
    00000061: 	leaq	(%rcx,%rdi,4), %rdi
    00000065: 	movq	%rdi, %rcx
    00000068: 	subq	%r15, %rcx
    0000006b: 	cmpq	%rdi, (%rax)
    0000006e: 	jne	.Ltmp152 # Offset: 110
    00000074: 	cmpq	%rcx, 0x8(%rax)
    00000078: 	jne	.Ltmp152 # Offset: 120
    0000007e: 	leaq	(,%rdx,4), %rax
    00000086: 	movq	%rdx, %r15
    00000089: 	subq	%rax, %rcx
    0000008c: 	shlq	$0x4, %r15
    00000090: 	movq	%rcx, %rdi
    00000093: 	subq	%r15, %rdi
    00000096: 	cmpq	%rcx, %r10
    00000099: 	jne	.Ltmp152 # Offset: 153
    0000009b: 	cmpq	%rdi, %r11
    0000009e: 	jne	.Ltmp152 # Offset: 158
    000000a0: 	addq	%rdx, %rax
    000000a3: 	leaq	(%rdx,%rax,2), %r10
    000000a7: 	subq	%r10, %rdi
    000000aa: 	cmpq	%rcx, %rbx
    000000ad: 	jne	.Ltmp152 # Offset: 173
    000000af: 	cmpq	%rdi, %rbp
    000000b2: 	jne	.Ltmp152 # Offset: 178
    000000b4: 	leaq	(%rdi,%r8,2), %rcx
    000000b8: 	subq	%rdx, %r15
    000000bb: 	addq	%rcx, %r15
    000000be: 	cmpq	%rcx, %r12
    000000c1: 	jne	.Ltmp152 # Offset: 193
    000000c3: 	cmpq	%r15, %r13
    000000c6: 	jne	.Ltmp152 # Offset: 198
    000000c8: 	leaq	(%r8,%r8,8), %rdx
    000000cc: 	addq	%r15, %rdx
    000000cf: 	movq	%rdx, %rdi
    000000d2: 	subq	%r9, %rdi
    000000d5: 	cmpq	%rdx, %r14
    000000d8: 	setne	%dl
    000000db: 	cmpq	%rdi, -0x18(%rsp)
    000000e0: 	movq	%rdi, %rcx
    000000e3: 	setne	%dil
    000000e7: 	orb	%dil, %dl
    000000ea: 	jne	.Ltmp152 # Offset: 234
    000000ec: 	addq	%rcx, %rax
    000000ef: 	cmpq	-0x10(%rsp), %rax
    000000f4: 	jne	.Ltmp152 # Offset: 244
    000000f6: 	popq	%rbx
    000000f7: 	popq	%rbp
    000000f8: 	popq	%r12
    000000fa: 	popq	%r13
    000000fc: 	popq	%r14
    000000fe: 	popq	%r15
    00000100: 	retq # Offset: 256
    00000101: 	nopl	(%rax) # Size: 7
.Ltmp152:
    00000108: 	movq	(%rsi), %rdx
    0000010b: 	popq	%rbx
    0000010c: 	leaq	DATAat0x17004(%rip), %rsi
    00000113: 	movl	$0x1, %edi
    00000118: 	popq	%rbp
    00000119: 	xorl	%eax, %eax
    0000011b: 	popq	%r12
    0000011d: 	popq	%r13
    0000011f: 	popq	%r14
    00000121: 	popq	%r15
    00000123: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 291
DWARF CFI Instructions:
    <empty>
End of Function "_Z12check11_sumsImEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11check5_sumsImEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 48
  State       : disassembled
  Address     : 0x3bd0
  Size        : 0x89
  MaxSize     : 0x90
  Offset      : 0x3bd0
  Section     : .text
  Orc Section : .local.text._Z11check5_sumsImEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB047:
    00000000: 	endbr64
    00000004: 	movslq	iterations(%rip), %rax
    0000000b: 	movslq	init_value(%rip), %rcx
    00000012: 	movq	%rsi, %r8
    00000015: 	movq	0x10(%rdi), %r9
    00000019: 	movq	0x18(%rdi), %r11
    0000001d: 	leaq	(%rax,%rax,2), %rdx
    00000021: 	movq	0x20(%rdi), %r10
    00000025: 	shlq	$0x2, %rdx
    00000029: 	leaq	(%rdx,%rax), %rsi
    0000002d: 	leaq	(%rcx,%rsi,4), %rsi
    00000031: 	movq	%rsi, %rcx
    00000034: 	subq	%rdx, %rcx
    00000037: 	cmpq	%rsi, (%rdi)
    0000003a: 	jne	.Ltmp153 # Offset: 58
    0000003c: 	cmpq	%rcx, 0x8(%rdi)
    00000040: 	jne	.Ltmp153 # Offset: 64
    00000042: 	leaq	(,%rax,4), %rdx
    0000004a: 	shlq	$0x4, %rax
    0000004e: 	subq	%rdx, %rcx
    00000051: 	movq	%rcx, %rdx
    00000054: 	subq	%rax, %rdx
    00000057: 	cmpq	%r11, %rdx
    0000005a: 	setne	%al
    0000005d: 	cmpq	%rcx, %r9
    00000060: 	setne	%dl
    00000063: 	orb	%dl, %al
    00000065: 	jne	.Ltmp153 # Offset: 101
    00000067: 	cmpq	%rcx, %r10
    0000006a: 	je	.Ltmp154 # Offset: 106
.Ltmp153:
    0000006c: 	movq	(%r8), %rdx
    0000006f: 	leaq	DATAat0x17004(%rip), %rsi
    00000076: 	movl	$0x1, %edi
    0000007b: 	xorl	%eax, %eax
    0000007d: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 125
    00000082: 	nopw	(%rax,%rax) # Size: 6
.Ltmp154:
    00000088: 	retq # Offset: 136
DWARF CFI Instructions:
    <empty>
End of Function "_Z11check5_sumsImEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z12check11_sumsIdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 49
  State       : disassembled
  Address     : 0x3c60
  Size        : 0x1c1
  MaxSize     : 0x1d0
  Offset      : 0x3c60
  Section     : .text
  Orc Section : .local.text._Z12check11_sumsIdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB048:
    00000000: 	endbr64
    00000004: 	pxor	%xmm0, %xmm0
    00000008: 	pxor	%xmm1, %xmm1
    0000000c: 	movl	$0x1, %eax
    00000011: 	movq	%rsi, %rcx
    00000014: 	cvtsi2sdl	iterations(%rip), %xmm0
    0000001c: 	movsd	0x18(%rdi), %xmm4
    00000021: 	movsd	DATAat0x17de8(%rip), %xmm2
    00000029: 	cvtsi2sdl	init_value(%rip), %xmm1
    00000031: 	movsd	0x10(%rdi), %xmm11
    00000037: 	movsd	0x20(%rdi), %xmm12
    0000003d: 	movsd	0x28(%rdi), %xmm5
    00000042: 	movsd	0x30(%rdi), %xmm6
    00000047: 	movsd	0x38(%rdi), %xmm7
    0000004c: 	movsd	0x40(%rdi), %xmm10
    00000052: 	mulsd	%xmm0, %xmm2
    00000056: 	movsd	0x48(%rdi), %xmm9
    0000005c: 	movsd	0x50(%rdi), %xmm8
    00000062: 	addsd	%xmm1, %xmm2
    00000066: 	ucomisd	(%rdi), %xmm2
    0000006a: 	setp	%dl
    0000006d: 	cmovnel	%eax, %edx
    00000070: 	testb	%dl, %dl
    00000072: 	jne	.Ltmp155 # Offset: 114
    00000078: 	movsd	DATAat0x17de0(%rip), %xmm2
    00000080: 	mulsd	%xmm0, %xmm2
    00000084: 	addsd	%xmm1, %xmm2
    00000088: 	ucomisd	0x8(%rdi), %xmm2
    0000008d: 	setp	%dl
    00000090: 	cmovnel	%eax, %edx
    00000093: 	testb	%dl, %dl
    00000095: 	jne	.Ltmp155 # Offset: 149
    0000009b: 	movsd	DATAat0x17dd0(%rip), %xmm3
    000000a3: 	movsd	DATAat0x17e00(%rip), %xmm2
    000000ab: 	mulsd	%xmm0, %xmm3
    000000af: 	mulsd	%xmm0, %xmm2
    000000b3: 	addsd	%xmm1, %xmm3
    000000b7: 	addsd	%xmm1, %xmm2
    000000bb: 	ucomisd	%xmm4, %xmm3
    000000bf: 	setp	%dl
    000000c2: 	cmovnel	%eax, %edx
    000000c5: 	testb	%dl, %dl
    000000c7: 	jne	.Ltmp155 # Offset: 199
    000000cd: 	ucomisd	%xmm2, %xmm11
    000000d2: 	setp	%dl
    000000d5: 	cmovnel	%eax, %edx
    000000d8: 	testb	%dl, %dl
    000000da: 	jne	.Ltmp155 # Offset: 218
    000000e0: 	movsd	DATAat0x17dc8(%rip), %xmm3
    000000e8: 	mulsd	%xmm0, %xmm3
    000000ec: 	addsd	%xmm1, %xmm3
    000000f0: 	ucomisd	%xmm5, %xmm3
    000000f4: 	setp	%dl
    000000f7: 	cmovnel	%eax, %edx
    000000fa: 	testb	%dl, %dl
    000000fc: 	jne	.Ltmp155 # Offset: 252
    00000102: 	ucomisd	%xmm2, %xmm12
    00000107: 	setp	%dl
    0000010a: 	cmovnel	%eax, %edx
    0000010d: 	testb	%dl, %dl
    0000010f: 	jne	.Ltmp155 # Offset: 271
    00000115: 	movsd	DATAat0x17dc0(%rip), %xmm2
    0000011d: 	mulsd	%xmm0, %xmm2
    00000121: 	addsd	%xmm1, %xmm2
    00000125: 	ucomisd	%xmm6, %xmm2
    00000129: 	setp	%dl
    0000012c: 	cmovnel	%eax, %edx
    0000012f: 	testb	%dl, %dl
    00000131: 	jne	.Ltmp155 # Offset: 305
    00000133: 	movsd	DATAat0x17db8(%rip), %xmm2
    0000013b: 	mulsd	%xmm0, %xmm2
    0000013f: 	addsd	%xmm1, %xmm2
    00000143: 	ucomisd	%xmm7, %xmm2
    00000147: 	setp	%dl
    0000014a: 	cmovnel	%eax, %edx
    0000014d: 	testb	%dl, %dl
    0000014f: 	jne	.Ltmp155 # Offset: 335
    00000151: 	movsd	DATAat0x17db0(%rip), %xmm2
    00000159: 	mulsd	%xmm0, %xmm2
    0000015d: 	addsd	%xmm1, %xmm2
    00000161: 	ucomisd	%xmm10, %xmm2
    00000166: 	movsd	DATAat0x17da8(%rip), %xmm2
    0000016e: 	mulsd	%xmm0, %xmm2
    00000172: 	setp	%dl
    00000175: 	cmovnel	%eax, %edx
    00000178: 	addsd	%xmm1, %xmm2
    0000017c: 	ucomisd	%xmm9, %xmm2
    00000181: 	setp	%sil
    00000185: 	cmovnel	%eax, %esi
    00000188: 	orb	%sil, %dl
    0000018b: 	jne	.Ltmp155 # Offset: 395
    0000018d: 	mulsd	DATAat0x17da0(%rip), %xmm0
    00000195: 	addsd	%xmm1, %xmm0
    00000199: 	ucomisd	%xmm8, %xmm0
    0000019e: 	setp	%dl
    000001a1: 	cmovel	%edx, %eax
    000001a4: 	testb	%al, %al
    000001a6: 	je	.Ltmp156 # Offset: 422
.Ltmp155:
    000001a8: 	movq	(%rcx), %rdx
    000001ab: 	leaq	DATAat0x17004(%rip), %rsi
    000001b2: 	movl	$0x1, %edi
    000001b7: 	xorl	%eax, %eax
    000001b9: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 441
    000001be: 	nop # Size: 2
.Ltmp156:
    000001c0: 	retq # Offset: 448
DWARF CFI Instructions:
    <empty>
End of Function "_Z12check11_sumsIdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11check5_sumsIdEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 50
  State       : disassembled
  Address     : 0x3e30
  Size        : 0xd1
  MaxSize     : 0xe0
  Offset      : 0x3e30
  Section     : .text
  Orc Section : .local.text._Z11check5_sumsIdEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB049:
    00000000: 	endbr64
    00000004: 	pxor	%xmm0, %xmm0
    00000008: 	pxor	%xmm1, %xmm1
    0000000c: 	movl	$0x1, %eax
    00000011: 	movq	%rsi, %rcx
    00000014: 	cvtsi2sdl	iterations(%rip), %xmm0
    0000001c: 	movsd	0x10(%rdi), %xmm3
    00000021: 	movsd	0x18(%rdi), %xmm4
    00000026: 	movsd	DATAat0x17de8(%rip), %xmm2
    0000002e: 	cvtsi2sdl	init_value(%rip), %xmm1
    00000036: 	movsd	0x20(%rdi), %xmm5
    0000003b: 	mulsd	%xmm0, %xmm2
    0000003f: 	addsd	%xmm1, %xmm2
    00000043: 	ucomisd	(%rdi), %xmm2
    00000047: 	setp	%dl
    0000004a: 	cmovnel	%eax, %edx
    0000004d: 	testb	%dl, %dl
    0000004f: 	jne	.Ltmp157 # Offset: 79
    00000051: 	movsd	DATAat0x17de0(%rip), %xmm2
    00000059: 	mulsd	%xmm0, %xmm2
    0000005d: 	addsd	%xmm1, %xmm2
    00000061: 	ucomisd	0x8(%rdi), %xmm2
    00000066: 	setp	%dl
    00000069: 	cmovnel	%eax, %edx
    0000006c: 	testb	%dl, %dl
    0000006e: 	jne	.Ltmp157 # Offset: 110
    00000070: 	movsd	DATAat0x17e00(%rip), %xmm2
    00000078: 	mulsd	%xmm0, %xmm2
    0000007c: 	mulsd	DATAat0x17dd0(%rip), %xmm0
    00000084: 	addsd	%xmm1, %xmm2
    00000088: 	addsd	%xmm1, %xmm0
    0000008c: 	ucomisd	%xmm4, %xmm0
    00000090: 	setp	%dl
    00000093: 	cmovnel	%eax, %edx
    00000096: 	ucomisd	%xmm2, %xmm3
    0000009a: 	setp	%sil
    0000009e: 	cmovnel	%eax, %esi
    000000a1: 	orb	%sil, %dl
    000000a4: 	jne	.Ltmp157 # Offset: 164
    000000a6: 	ucomisd	%xmm2, %xmm5
    000000aa: 	setp	%dl
    000000ad: 	cmovel	%edx, %eax
    000000b0: 	testb	%al, %al
    000000b2: 	je	.Ltmp158 # Offset: 178
.Ltmp157:
    000000b4: 	movq	(%rcx), %rdx
    000000b7: 	leaq	DATAat0x17004(%rip), %rsi
    000000be: 	movl	$0x1, %edi
    000000c3: 	xorl	%eax, %eax
    000000c5: 	jmp	__printf_chk@PLT # TAILCALL  # Offset: 197
    000000ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp158:
    000000d0: 	retq # Offset: 208
DWARF CFI Instructions:
    <empty>
End of Function "_Z11check5_sumsIdEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_" after disassembly {
  Number      : 51
  State       : disassembled
  Address     : 0x3f10
  Size        : 0x328
  MaxSize     : 0x330
  Offset      : 0x3f10
  Section     : .text
  Orc Section : .local.text._ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB050:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rsi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x18, %rsp
    00000015: 	movq	0x48(%rdi), %r12
    00000019: 	movq	0x28(%rdi), %rsi
    0000001d: 	movq	%fs:0x28, %rax
    00000026: 	movq	%rax, 0x8(%rsp)
    0000002b: 	xorl	%eax, %eax
    0000002d: 	movq	0x30(%rdi), %rax
    00000031: 	subq	0x38(%rdi), %rax
    00000035: 	movq	%r12, %r13
    00000038: 	sarq	$0x5, %rax
    0000003c: 	subq	%rsi, %r13
    0000003f: 	movq	%r13, %rcx
    00000042: 	sarq	$0x3, %rcx
    00000046: 	cmpq	$0x1, %r12
    0000004a: 	movq	%rcx, %rdx
    0000004d: 	adcq	$-0x1, %rdx
    00000051: 	shlq	$0x4, %rdx
    00000055: 	addq	%rdx, %rax
    00000058: 	movq	0x20(%rdi), %rdx
    0000005c: 	subq	0x10(%rdi), %rdx
    00000060: 	sarq	$0x5, %rdx
    00000064: 	addq	%rdx, %rax
    00000067: 	movabsq	$0x3ffffffffffffff, %rdx
    00000071: 	cmpq	%rdx, %rax
    00000074: 	je	.Ltmp159 # Offset: 116
    0000007a: 	movq	0x8(%rdi), %rdx
    0000007e: 	movq	%rdi, %rbx
    00000081: 	movq	(%rdi), %rdi
    00000084: 	movq	%r12, %rax
    00000087: 	subq	%rdi, %rax
    0000008a: 	movq	%rdx, %r8
    0000008d: 	sarq	$0x3, %rax
    00000091: 	subq	%rax, %r8
    00000094: 	cmpq	$0x1, %r8
    00000098: 	jbe	.Ltmp160 # Offset: 152
.Ltmp171:
    0000009e: 	movl	$0x200, %edi
    000000a3: 	callq	_Znwm@PLT # Offset: 163
    000000a8: 	movq	%rax, 0x8(%r12)
    000000ad: 	movq	0x30(%rbx), %r13
    000000b1: 	movq	0x8(%rbp), %r12
    000000b5: 	leaq	0x10(%r13), %rdi
    000000b9: 	movq	%rdi, (%r13)
    000000bd: 	movq	(%rbp), %r14
    000000c1: 	movq	%r14, %rax
    000000c4: 	addq	%r12, %rax
    000000c7: 	je	.Ltmp161 # Offset: 199
    000000c9: 	testq	%r14, %r14
    000000cc: 	je	.Ltmp162 # Offset: 204
.Ltmp161:
    000000d2: 	movq	%r12, (%rsp)
    000000d6: 	cmpq	$0xf, %r12
    000000da: 	ja	.Ltmp163 # Offset: 218
    000000e0: 	cmpq	$0x1, %r12
    000000e4: 	jne	.Ltmp164 # Offset: 228
    000000e6: 	movzbl	(%r14), %eax
    000000ea: 	movb	%al, 0x10(%r13)
.Ltmp166:
    000000ee: 	movq	%r12, 0x8(%r13)
    000000f2: 	movb	$0x0, (%rdi,%r12)
    000000f7: 	movq	0x48(%rbx), %rdx
    000000fb: 	movq	0x8(%rdx), %rax
    000000ff: 	addq	$0x8, %rdx
    00000103: 	movq	%rdx, %xmm1
    00000108: 	movq	%rax, %xmm0
    0000010d: 	addq	$0x200, %rax
    00000113: 	punpcklqdq	%xmm0, %xmm0
    00000117: 	movups	%xmm0, 0x30(%rbx)
    0000011b: 	movq	%rax, %xmm0
    00000120: 	punpcklqdq	%xmm1, %xmm0
    00000124: 	movups	%xmm0, 0x40(%rbx)
    00000128: 	movq	0x8(%rsp), %rax
    0000012d: 	subq	%fs:0x28, %rax
    00000136: 	jne	.Ltmp165 # Offset: 310
    0000013c: 	addq	$0x18, %rsp
    00000140: 	popq	%rbx
    00000141: 	popq	%rbp
    00000142: 	popq	%r12
    00000144: 	popq	%r13
    00000146: 	popq	%r14
    00000148: 	popq	%r15
    0000014a: 	retq # Offset: 330
    0000014b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp164:
    00000150: 	testq	%r12, %r12
    00000153: 	je	.Ltmp166 # Offset: 339
    00000155: 	jmp	.Ltmp167 # Offset: 341
    0000015a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp160:
    00000160: 	leaq	0x2(%rcx), %r14
    00000164: 	leaq	(%r14,%r14), %rax
    00000168: 	cmpq	%rax, %rdx
    0000016b: 	ja	.Ltmp168 # Offset: 363
    00000171: 	testq	%rdx, %rdx
    00000174: 	movl	$0x1, %eax
    00000179: 	cmovneq	%rdx, %rax
    0000017d: 	leaq	0x2(%rdx,%rax), %r15
    00000182: 	movq	%r15, %rax
    00000185: 	shrq	$0x3c, %rax
    00000189: 	jne	.Ltmp169 # Offset: 393
    0000018f: 	leaq	(,%r15,8), %rdi
    00000197: 	callq	_Znwm@PLT # Offset: 407
    0000019c: 	movq	0x28(%rbx), %rsi
    000001a0: 	movq	%rax, %r12
    000001a3: 	movq	%r15, %rax
    000001a6: 	subq	%r14, %rax
    000001a9: 	shrq	%rax
    000001ac: 	leaq	(%r12,%rax,8), %r14
    000001b0: 	movq	0x48(%rbx), %rax
    000001b4: 	leaq	0x8(%rax), %rdx
    000001b8: 	cmpq	%rsi, %rdx
    000001bb: 	je	.Ltmp170 # Offset: 443
    000001bd: 	subq	%rsi, %rdx
    000001c0: 	movq	%r14, %rdi
    000001c3: 	callq	memmove@PLT # Offset: 451
.Ltmp170:
    000001c8: 	movq	0x8(%rbx), %rax
    000001cc: 	movq	(%rbx), %rdi
    000001cf: 	leaq	(,%rax,8), %rsi
    000001d7: 	callq	_ZdlPvm@PLT # Offset: 471
    000001dc: 	movq	%r12, (%rbx)
    000001df: 	movq	%r15, 0x8(%rbx)
.Ltmp173:
    000001e3: 	movq	(%r14), %rax
    000001e6: 	movq	(%r14), %xmm0
    000001eb: 	leaq	(%r14,%r13), %r12
    000001ef: 	movq	%r14, 0x28(%rbx)
    000001f3: 	movq	%r12, 0x48(%rbx)
    000001f7: 	addq	$0x200, %rax
    000001fd: 	movq	%rax, %xmm2
    00000202: 	punpcklqdq	%xmm2, %xmm0
    00000206: 	movups	%xmm0, 0x18(%rbx)
    0000020a: 	movq	(%r12), %rax
    0000020e: 	movq	(%r12), %xmm0
    00000214: 	addq	$0x200, %rax
    0000021a: 	movq	%rax, %xmm3
    0000021f: 	punpcklqdq	%xmm3, %xmm0
    00000223: 	movups	%xmm0, 0x38(%rbx)
    00000227: 	jmp	.Ltmp171 # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp163:
    00000230: 	movq	%rsp, %rsi
    00000233: 	xorl	%edx, %edx
    00000235: 	movq	%r13, %rdi
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%r13)
    00000241: 	movq	%rax, %rdi
    00000244: 	movq	(%rsp), %rax
    00000248: 	movq	%rax, 0x10(%r13)
.Ltmp167:
    0000024c: 	movq	%r12, %rdx
    0000024f: 	movq	%r14, %rsi
    00000252: 	callq	memcpy@PLT # Offset: 594
    00000257: 	movq	(%rsp), %r12
    0000025b: 	movq	(%r13), %rdi
    0000025f: 	jmp	.Ltmp166 # Offset: 607
    00000264: 	nopl	(%rax) # Size: 4
.Ltmp168:
    00000268: 	subq	%r14, %rdx
    0000026b: 	addq	$0x8, %r12
    0000026f: 	shrq	%rdx
    00000272: 	leaq	(%rdi,%rdx,8), %r14
    00000276: 	movq	%r12, %rdx
    00000279: 	subq	%rsi, %rdx
    0000027c: 	cmpq	%r14, %rsi
    0000027f: 	jbe	.Ltmp172 # Offset: 639
    00000281: 	cmpq	%r12, %rsi
    00000284: 	je	.Ltmp173 # Offset: 644
    0000028a: 	movq	%r14, %rdi
    0000028d: 	callq	memmove@PLT # Offset: 653
    00000292: 	jmp	.Ltmp173 # Offset: 658
    00000297: 	nopw	(%rax,%rax) # Size: 9
.Ltmp172:
    000002a0: 	cmpq	%r12, %rsi
    000002a3: 	je	.Ltmp173 # Offset: 675
    000002a9: 	leaq	0x8(%r13), %rdi
    000002ad: 	subq	%rdx, %rdi
    000002b0: 	addq	%r14, %rdi
    000002b3: 	callq	memmove@PLT # Offset: 691
    000002b8: 	jmp	.Ltmp173 # Offset: 696
.Ltmp162:
    000002bd: 	leaq	DATAat0x17018(%rip), %rdi
    000002c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 708
    000002c9: 	nopl	(%rax) # Size: 7
.Ltmp169:
    000002d0: 	shrq	$0x3d, %r15
    000002d4: 	je	.Ltmp174 # Offset: 724
    000002d6: 	callq	_ZSt28__throw_bad_array_new_lengthv@PLT # Offset: 726
.Ltmp174:
    000002db: 	callq	_ZSt17__throw_bad_allocv@PLT # Offset: 731
.Ltmp159:
    000002e0: 	leaq	DATAat0x17938(%rip), %rdi
    000002e7: 	callq	_ZSt20__throw_length_errorPKc@PLT # Offset: 743
.Ltmp165:
    000002ec: 	callq	__stack_chk_fail@PLT # Offset: 748
    000002f1: 	endbr64
    000002f5: 	movq	%rax, %rdi
    000002f8: 	callq	__cxa_begin_catch@PLT # Offset: 760
    000002fd: 	movq	0x48(%rbx), %rax
    00000301: 	movl	$0x200, %esi
    00000306: 	movq	0x8(%rax), %rdi
    0000030a: 	callq	_ZdlPvm@PLT # Offset: 778
    0000030f: 	callq	__cxa_rethrow@PLT # Offset: 783
    00000314: 	endbr64
    00000318: 	movq	%rax, %rbp
    0000031b: 	callq	__cxa_end_catch@PLT # Offset: 795
    00000320: 	movq	%rbp, %rdi
    00000323: 	callq	_Unwind_Resume@PLT # Offset: 803
DWARF CFI Instructions:
    <empty>
End of Function "_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_"

Binary Function "_Z18test_struct_globalId11test_structIdEXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 52
  State       : disassembled
  Address     : 0x4240
  Size        : 0x906
  MaxSize     : 0x910
  Offset      : 0x4240
  Section     : .text
  Orc Section : .local.text._Z18test_struct_globalId11test_structIdEXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB051:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	pushq	%rbx
    00000009: 	subq	$0x58, %rsp
    0000000d: 	callq	clock@PLT # Offset: 13
    00000012: 	movl	iterations(%rip), %r9d
    00000019: 	movq	%rax, start_time(%rip)
    00000020: 	testl	%r9d, %r9d
    00000023: 	jle	.Ltmp175 # Offset: 35
    00000029: 	movsd	dataDouble+32(%rip), %xmm7
    00000031: 	leal	-0x1(%r9), %r8d
    00000035: 	movsd	dataDouble+64(%rip), %xmm0
    0000003d: 	movq	dataDouble(%rip), %rdx
    00000044: 	movq	dataDouble+48(%rip), %rax
    0000004b: 	movsd	%xmm7, 0x20(%rsp)
    00000051: 	movsd	dataDouble+56(%rip), %xmm7
    00000059: 	movsd	dataDouble+80(%rip), %xmm15
    00000062: 	movsd	dataDouble+16(%rip), %xmm2
    0000006a: 	movq	dataDouble+8(%rip), %rsi
    00000071: 	movsd	%xmm7, 0x28(%rsp)
    00000077: 	movsd	dataDouble+72(%rip), %xmm7
    0000007f: 	movq	dataDouble+24(%rip), %rcx
    00000086: 	movq	dataDouble+40(%rip), %rdi
    0000008d: 	movsd	%xmm7, 0x30(%rsp)
    00000093: 	cmpl	$0x1, %r8d
    00000097: 	jbe	.Ltmp176 # Offset: 151
    0000009d: 	movsd	DATAat0x17c98(%rip), %xmm1
    000000a5: 	movsd	DATAat0x17cb0(%rip), %xmm6
    000000ad: 	movl	%r9d, %r10d
    000000b0: 	xorl	%r8d, %r8d
    000000b3: 	movsd	DATAat0x17cf0(%rip), %xmm3
    000000bb: 	shrl	%r10d
    000000be: 	movsd	DATAat0x17cb8(%rip), %xmm10
    000000c7: 	movsd	%xmm1, 0x8(%rsp)
    000000cd: 	movsd	DATAat0x17d00(%rip), %xmm1
    000000d5: 	movsd	DATAat0x17cc0(%rip), %xmm4
    000000dd: 	movsd	%xmm6, 0x10(%rsp)
    000000e3: 	movsd	DATAat0x17cc8(%rip), %xmm8
    000000ec: 	movsd	DATAat0x17dc8(%rip), %xmm9
    000000f5: 	movsd	%xmm1, 0x38(%rsp)
    000000fb: 	movsd	DATAat0x17d08(%rip), %xmm1
    00000103: 	movsd	DATAat0x17cd0(%rip), %xmm5
    0000010b: 	movsd	%xmm3, 0x18(%rsp)
    00000111: 	movsd	DATAat0x17ce0(%rip), %xmm6
    00000119: 	movsd	DATAat0x17cd8(%rip), %xmm13
    00000122: 	movsd	%xmm1, 0x40(%rsp)
    00000128: 	movsd	DATAat0x17d18(%rip), %xmm1
    00000130: 	movsd	DATAat0x17ce8(%rip), %xmm7
    00000138: 	movsd	DATAat0x17dc0(%rip), %xmm12
    00000141: 	movsd	DATAat0x17cf8(%rip), %xmm3
    00000149: 	movsd	DATAat0x17d10(%rip), %xmm14
    00000152: 	movsd	%xmm1, 0x48(%rsp)
    00000158: 	nopl	(%rax,%rax) # Size: 8
.Ltmp177:
    00000160: 	movsd	0x10(%rsp), %xmm1
    00000166: 	movsd	0x18(%rsp), %xmm11
    0000016d: 	addsd	%xmm3, %xmm15
    00000172: 	addl	$0x1, %r8d
    00000176: 	addsd	%xmm1, %xmm0
    0000017a: 	addsd	%xmm10, %xmm15
    0000017f: 	addsd	%xmm10, %xmm0
    00000184: 	addsd	%xmm9, %xmm15
    00000189: 	addsd	%xmm4, %xmm0
    0000018d: 	addsd	%xmm8, %xmm15
    00000192: 	addsd	0x38(%rsp), %xmm15
    00000199: 	addsd	0x40(%rsp), %xmm15
    000001a0: 	addsd	%xmm8, %xmm0
    000001a5: 	addsd	%xmm3, %xmm15
    000001aa: 	addsd	%xmm9, %xmm0
    000001af: 	addsd	%xmm10, %xmm15
    000001b4: 	addsd	%xmm5, %xmm0
    000001b8: 	addsd	%xmm9, %xmm15
    000001bd: 	addsd	%xmm13, %xmm0
    000001c2: 	addsd	%xmm8, %xmm15
    000001c7: 	addsd	%xmm1, %xmm0
    000001cb: 	movq	%rdx, %xmm1
    000001d0: 	addsd	%xmm6, %xmm1
    000001d4: 	movq	%xmm15, %rbx
    000001d9: 	movsd	0x20(%rsp), %xmm15
    000001e0: 	addsd	%xmm10, %xmm0
    000001e5: 	addsd	%xmm4, %xmm1
    000001e9: 	addsd	%xmm4, %xmm0
    000001ed: 	addsd	%xmm7, %xmm1
    000001f1: 	addsd	%xmm8, %xmm0
    000001f6: 	addsd	%xmm13, %xmm1
    000001fb: 	addsd	%xmm9, %xmm0
    00000200: 	addsd	%xmm11, %xmm1
    00000205: 	addsd	%xmm5, %xmm0
    00000209: 	addsd	%xmm12, %xmm1
    0000020e: 	addsd	%xmm13, %xmm0
    00000213: 	addsd	%xmm6, %xmm1
    00000217: 	addsd	%xmm4, %xmm1
    0000021b: 	addsd	%xmm7, %xmm1
    0000021f: 	addsd	%xmm13, %xmm1
    00000224: 	movq	%xmm1, %rdx
    00000229: 	movq	%rax, %xmm1
    0000022e: 	addsd	%xmm5, %xmm1
    00000232: 	addsd	%xmm3, %xmm1
    00000236: 	addsd	%xmm6, %xmm1
    0000023a: 	addsd	0x8(%rsp), %xmm1
    00000240: 	addsd	%xmm6, %xmm1
    00000244: 	addsd	%xmm3, %xmm1
    00000248: 	addsd	%xmm5, %xmm1
    0000024c: 	addsd	%xmm3, %xmm1
    00000250: 	addsd	%xmm6, %xmm1
    00000254: 	addsd	0x8(%rsp), %xmm1
    0000025a: 	movq	%xmm1, %rax
    0000025f: 	movsd	0x8(%rsp), %xmm1
    00000265: 	addsd	%xmm1, %xmm2
    00000269: 	addsd	%xmm1, %xmm15
    0000026e: 	addsd	%xmm3, %xmm2
    00000272: 	addsd	%xmm4, %xmm2
    00000276: 	addsd	%xmm7, %xmm2
    0000027a: 	addsd	%xmm9, %xmm2
    0000027f: 	addsd	%xmm8, %xmm2
    00000284: 	addsd	%xmm1, %xmm2
    00000288: 	movapd	%xmm15, %xmm1
    0000028d: 	movq	%rsi, %xmm15
    00000292: 	addsd	%xmm5, %xmm15
    00000297: 	addsd	%xmm6, %xmm1
    0000029b: 	addsd	%xmm3, %xmm2
    0000029f: 	addsd	%xmm14, %xmm15
    000002a4: 	addsd	0x10(%rsp), %xmm15
    000002ab: 	addsd	0x48(%rsp), %xmm15
    000002b2: 	addsd	%xmm3, %xmm1
    000002b6: 	addsd	%xmm4, %xmm2
    000002ba: 	addsd	%xmm5, %xmm15
    000002bf: 	addsd	%xmm5, %xmm1
    000002c3: 	addsd	%xmm7, %xmm2
    000002c7: 	addsd	%xmm14, %xmm15
    000002cc: 	addsd	%xmm4, %xmm1
    000002d0: 	addsd	%xmm9, %xmm2
    000002d5: 	movq	%xmm15, %rsi
    000002da: 	movq	%rcx, %xmm15
    000002df: 	addsd	%xmm10, %xmm1
    000002e4: 	addsd	%xmm6, %xmm15
    000002e9: 	addsd	%xmm8, %xmm2
    000002ee: 	addsd	%xmm7, %xmm1
    000002f2: 	addsd	%xmm5, %xmm15
    000002f7: 	addsd	%xmm14, %xmm1
    000002fc: 	addsd	0x8(%rsp), %xmm1
    00000302: 	addsd	%xmm10, %xmm15
    00000307: 	addsd	%xmm6, %xmm1
    0000030b: 	addsd	%xmm14, %xmm15
    00000310: 	addsd	%xmm3, %xmm1
    00000314: 	addsd	%xmm6, %xmm15
    00000319: 	addsd	%xmm5, %xmm1
    0000031d: 	addsd	%xmm5, %xmm15
    00000322: 	addsd	%xmm4, %xmm1
    00000326: 	movq	%xmm15, %rcx
    0000032b: 	movsd	0x28(%rsp), %xmm15
    00000332: 	addsd	%xmm4, %xmm15
    00000337: 	addsd	%xmm10, %xmm1
    0000033c: 	addsd	%xmm13, %xmm15
    00000341: 	addsd	%xmm7, %xmm1
    00000345: 	addsd	%xmm12, %xmm15
    0000034a: 	addsd	%xmm4, %xmm15
    0000034f: 	movsd	%xmm15, 0x28(%rsp)
    00000356: 	movsd	0x30(%rsp), %xmm15
    0000035d: 	addsd	%xmm7, %xmm15
    00000362: 	addsd	%xmm9, %xmm15
    00000367: 	addsd	%xmm8, %xmm15
    0000036c: 	addsd	%xmm11, %xmm15
    00000371: 	addsd	%xmm12, %xmm15
    00000376: 	addsd	%xmm7, %xmm15
    0000037b: 	addsd	%xmm9, %xmm15
    00000380: 	addsd	%xmm8, %xmm15
    00000385: 	movq	%xmm15, %r11
    0000038a: 	movq	%rdi, %xmm15
    0000038f: 	addsd	%xmm3, %xmm15
    00000394: 	addsd	%xmm3, %xmm15
    00000399: 	addsd	%xmm3, %xmm15
    0000039e: 	addsd	%xmm3, %xmm15
    000003a3: 	addsd	%xmm3, %xmm15
    000003a8: 	addsd	%xmm3, %xmm15
    000003ad: 	movq	%xmm15, %rdi
    000003b2: 	movq	%rdx, %xmm15
    000003b7: 	addsd	%xmm11, %xmm15
    000003bc: 	addsd	%xmm12, %xmm15
    000003c1: 	movq	%xmm15, %rdx
    000003c6: 	movq	%rcx, %xmm15
    000003cb: 	addsd	%xmm10, %xmm15
    000003d0: 	addsd	%xmm14, %xmm15
    000003d5: 	movq	%xmm15, %rcx
    000003da: 	movq	%rax, %xmm15
    000003df: 	addsd	%xmm6, %xmm15
    000003e4: 	addsd	%xmm3, %xmm15
    000003e9: 	movq	%xmm15, %rax
    000003ee: 	movq	%rsi, %xmm15
    000003f3: 	addsd	0x10(%rsp), %xmm15
    000003fa: 	movapd	%xmm15, %xmm11
    000003ff: 	addsd	0x48(%rsp), %xmm11
    00000406: 	movq	%rbx, %xmm15
    0000040b: 	addsd	0x38(%rsp), %xmm15
    00000412: 	addsd	0x40(%rsp), %xmm15
    00000419: 	movq	%xmm11, %rsi
    0000041e: 	movapd	%xmm1, %xmm11
    00000423: 	movsd	0x28(%rsp), %xmm1
    00000429: 	addsd	%xmm14, %xmm11
    0000042e: 	addsd	%xmm13, %xmm1
    00000433: 	movsd	%xmm11, 0x20(%rsp)
    0000043a: 	movq	%r11, %xmm11
    0000043f: 	addsd	0x18(%rsp), %xmm11
    00000446: 	addsd	%xmm12, %xmm1
    0000044b: 	movsd	%xmm1, 0x28(%rsp)
    00000451: 	movapd	%xmm11, %xmm1
    00000456: 	addsd	%xmm12, %xmm1
    0000045b: 	movsd	%xmm1, 0x30(%rsp)
    00000461: 	cmpl	%r8d, %r10d
    00000464: 	jne	.Ltmp177 # Offset: 1124
    0000046a: 	movl	%r9d, %r8d
    0000046d: 	andl	$-0x2, %r8d
    00000471: 	testb	$0x1, %r9b
    00000475: 	je	.Ltmp178 # Offset: 1141
.Ltmp181:
    0000047b: 	movq	%rdi, %xmm1
    00000480: 	movsd	0x10(%rsp), %xmm11
    00000487: 	addsd	0x8(%rsp), %xmm2
    0000048d: 	addsd	%xmm3, %xmm15
    00000492: 	addsd	%xmm3, %xmm1
    00000496: 	addl	$0x1, %r8d
    0000049a: 	addsd	%xmm11, %xmm0
    0000049f: 	addsd	%xmm3, %xmm2
    000004a3: 	addsd	%xmm10, %xmm15
    000004a8: 	addsd	%xmm3, %xmm1
    000004ac: 	addsd	%xmm10, %xmm0
    000004b1: 	addsd	%xmm4, %xmm2
    000004b5: 	addsd	%xmm9, %xmm15
    000004ba: 	addsd	%xmm3, %xmm1
    000004be: 	addsd	%xmm4, %xmm0
    000004c2: 	addsd	%xmm7, %xmm2
    000004c6: 	addsd	%xmm8, %xmm15
    000004cb: 	movq	%xmm1, %rdi
    000004d0: 	movq	%rdx, %xmm1
    000004d5: 	addsd	0x38(%rsp), %xmm15
    000004dc: 	addsd	%xmm6, %xmm1
    000004e0: 	addsd	%xmm8, %xmm0
    000004e5: 	addsd	%xmm9, %xmm2
    000004ea: 	addsd	0x40(%rsp), %xmm15
    000004f1: 	addsd	%xmm4, %xmm1
    000004f5: 	addsd	%xmm9, %xmm0
    000004fa: 	addsd	%xmm8, %xmm2
    000004ff: 	addsd	%xmm7, %xmm1
    00000503: 	addsd	%xmm5, %xmm0
    00000507: 	addsd	%xmm13, %xmm1
    0000050c: 	addsd	0x18(%rsp), %xmm1
    00000512: 	addsd	%xmm13, %xmm0
    00000517: 	addsd	%xmm12, %xmm1
    0000051c: 	movq	%xmm1, %rdx
    00000521: 	movq	%rcx, %xmm1
    00000526: 	addsd	%xmm6, %xmm1
    0000052a: 	addsd	%xmm5, %xmm1
    0000052e: 	addsd	%xmm10, %xmm1
    00000533: 	addsd	%xmm14, %xmm1
    00000538: 	movq	%xmm1, %rcx
    0000053d: 	movq	%rax, %xmm1
    00000542: 	addsd	%xmm5, %xmm1
    00000546: 	addsd	%xmm3, %xmm1
    0000054a: 	addsd	%xmm6, %xmm1
    0000054e: 	addsd	0x8(%rsp), %xmm1
    00000554: 	addsd	%xmm6, %xmm1
    00000558: 	addsd	%xmm3, %xmm1
    0000055c: 	movq	%xmm1, %rax
    00000561: 	movq	%rsi, %xmm1
    00000566: 	addsd	%xmm5, %xmm1
    0000056a: 	addsd	%xmm14, %xmm1
    0000056f: 	addsd	%xmm11, %xmm1
    00000574: 	addsd	0x48(%rsp), %xmm1
    0000057a: 	movsd	0x18(%rsp), %xmm11
    00000581: 	movq	%xmm1, %rsi
    00000586: 	movsd	0x20(%rsp), %xmm1
    0000058c: 	addsd	0x8(%rsp), %xmm1
    00000592: 	addsd	%xmm6, %xmm1
    00000596: 	addsd	%xmm3, %xmm1
    0000059a: 	addsd	%xmm5, %xmm1
    0000059e: 	addsd	%xmm4, %xmm1
    000005a2: 	addsd	%xmm10, %xmm1
    000005a7: 	addsd	%xmm7, %xmm1
    000005ab: 	addsd	%xmm14, %xmm1
    000005b0: 	movsd	%xmm1, 0x20(%rsp)
    000005b6: 	movsd	0x28(%rsp), %xmm1
    000005bc: 	addsd	%xmm4, %xmm1
    000005c0: 	addsd	%xmm13, %xmm1
    000005c5: 	addsd	%xmm12, %xmm1
    000005ca: 	movsd	%xmm1, 0x28(%rsp)
    000005d0: 	movsd	0x30(%rsp), %xmm1
    000005d6: 	addsd	%xmm7, %xmm1
    000005da: 	addsd	%xmm9, %xmm1
    000005df: 	addsd	%xmm8, %xmm1
    000005e4: 	addsd	%xmm11, %xmm1
    000005e9: 	addsd	%xmm12, %xmm1
    000005ee: 	movsd	%xmm1, 0x30(%rsp)
    000005f4: 	cmpl	%r8d, %r9d
    000005f7: 	jle	.Ltmp178 # Offset: 1527
    000005fd: 	movq	%rdi, %xmm1
    00000602: 	addsd	0x8(%rsp), %xmm2
    00000608: 	addsd	%xmm3, %xmm1
    0000060c: 	addsd	%xmm3, %xmm2
    00000610: 	addsd	%xmm3, %xmm1
    00000614: 	addsd	%xmm4, %xmm2
    00000618: 	addsd	%xmm3, %xmm1
    0000061c: 	addsd	%xmm7, %xmm2
    00000620: 	movq	%xmm1, %rdi
    00000625: 	movq	%rdx, %xmm1
    0000062a: 	addsd	%xmm6, %xmm1
    0000062e: 	addsd	%xmm9, %xmm2
    00000633: 	addsd	%xmm4, %xmm1
    00000637: 	addsd	%xmm8, %xmm2
    0000063c: 	addsd	%xmm7, %xmm1
    00000640: 	addsd	%xmm13, %xmm1
    00000645: 	addsd	%xmm11, %xmm1
    0000064a: 	movsd	0x10(%rsp), %xmm11
    00000651: 	addsd	%xmm11, %xmm0
    00000656: 	addsd	%xmm12, %xmm1
    0000065b: 	addsd	%xmm10, %xmm0
    00000660: 	movq	%xmm1, %rdx
    00000665: 	movq	%rcx, %xmm1
    0000066a: 	addsd	%xmm6, %xmm1
    0000066e: 	addsd	%xmm4, %xmm0
    00000672: 	addsd	%xmm5, %xmm1
    00000676: 	addsd	%xmm8, %xmm0
    0000067b: 	addsd	%xmm10, %xmm1
    00000680: 	addsd	%xmm9, %xmm0
    00000685: 	addsd	%xmm14, %xmm1
    0000068a: 	addsd	%xmm5, %xmm0
    0000068e: 	movq	%xmm1, %rcx
    00000693: 	movq	%rax, %xmm1
    00000698: 	addsd	%xmm5, %xmm1
    0000069c: 	addsd	%xmm13, %xmm0
    000006a1: 	addsd	%xmm3, %xmm1
    000006a5: 	addsd	%xmm6, %xmm1
    000006a9: 	addsd	0x8(%rsp), %xmm1
    000006af: 	addsd	%xmm6, %xmm1
    000006b3: 	addsd	%xmm3, %xmm1
    000006b7: 	movq	%xmm1, %rax
    000006bc: 	movq	%rsi, %xmm1
    000006c1: 	addsd	%xmm5, %xmm1
    000006c5: 	addsd	%xmm14, %xmm1
    000006ca: 	addsd	%xmm11, %xmm1
    000006cf: 	movsd	0x48(%rsp), %xmm11
    000006d6: 	addsd	%xmm1, %xmm11
    000006db: 	movq	%xmm11, %rsi
    000006e0: 	movsd	0x8(%rsp), %xmm11
    000006e7: 	addsd	0x20(%rsp), %xmm11
    000006ee: 	addsd	%xmm6, %xmm11
    000006f3: 	addsd	%xmm3, %xmm11
    000006f8: 	addsd	%xmm15, %xmm3
    000006fd: 	movsd	0x40(%rsp), %xmm15
    00000704: 	addsd	%xmm5, %xmm11
    00000709: 	addsd	%xmm10, %xmm3
    0000070e: 	addsd	%xmm4, %xmm11
    00000713: 	addsd	0x28(%rsp), %xmm4
    00000719: 	addsd	%xmm9, %xmm3
    0000071e: 	addsd	%xmm10, %xmm11
    00000723: 	addsd	%xmm13, %xmm4
    00000728: 	addsd	%xmm8, %xmm3
    0000072d: 	addsd	0x38(%rsp), %xmm3
    00000733: 	addsd	%xmm7, %xmm11
    00000738: 	addsd	0x30(%rsp), %xmm7
    0000073e: 	addsd	%xmm12, %xmm4
    00000743: 	addsd	%xmm3, %xmm15
    00000748: 	addsd	%xmm9, %xmm7
    0000074d: 	addsd	%xmm14, %xmm11
    00000752: 	movsd	%xmm4, 0x28(%rsp)
    00000758: 	addsd	%xmm8, %xmm7
    0000075d: 	addsd	0x18(%rsp), %xmm7
    00000763: 	movsd	%xmm11, 0x20(%rsp)
    0000076a: 	addsd	%xmm12, %xmm7
    0000076f: 	movsd	%xmm7, 0x30(%rsp)
.Ltmp178:
    00000775: 	movsd	0x20(%rsp), %xmm7
    0000077b: 	movsd	0x30(%rsp), %xmm5
    00000781: 	movq	%rdi, dataDouble+40(%rip)
    00000788: 	movq	%rdx, dataDouble(%rip)
    0000078f: 	movsd	%xmm7, dataDouble+32(%rip)
    00000797: 	movsd	0x28(%rsp), %xmm7
    0000079d: 	movq	%rcx, dataDouble+24(%rip)
    000007a4: 	movq	%rax, dataDouble+48(%rip)
    000007ab: 	movq	%rsi, dataDouble+8(%rip)
    000007b2: 	movsd	%xmm0, dataDouble+64(%rip)
    000007ba: 	movsd	%xmm2, dataDouble+16(%rip)
    000007c2: 	movsd	%xmm15, dataDouble+80(%rip)
    000007cb: 	movsd	%xmm7, dataDouble+56(%rip)
    000007d3: 	movsd	%xmm5, dataDouble+72(%rip)
.Ltmp175:
    000007db: 	movq	%rbp, %rsi
    000007de: 	leaq	dataDouble(%rip), %rdi
    000007e5: 	callq	_Z12check11_sumsIdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2021
    000007ea: 	movq	%rbp, %rdi
    000007ed: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2029
    000007f2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000007f9: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000800: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000807: 	je	.Ltmp179 # Offset: 2055
.Ltmp180:
    00000809: 	movq	-0x20(%rax), %rbp
    0000080d: 	callq	clock@PLT # Offset: 2061
    00000812: 	pxor	%xmm0, %xmm0
    00000816: 	movq	%rax, end_time(%rip)
    0000081d: 	subq	start_time(%rip), %rax
    00000824: 	movq	%rbp, %rdi
    00000827: 	cvtsi2sd	%rax, %xmm0
    0000082c: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000834: 	addq	$0x58, %rsp
    00000838: 	popq	%rbx
    00000839: 	popq	%rbp
    0000083a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 2106
    0000083f: 	nop # Size: 1
.Ltmp179:
    00000840: 	movq	-0x8(%rdx), %rax
    00000844: 	addq	$0x200, %rax
    0000084a: 	jmp	.Ltmp180 # Offset: 2122
.Ltmp176:
    0000084c: 	movsd	DATAat0x17c98(%rip), %xmm1
    00000854: 	xorl	%r8d, %r8d
    00000857: 	movsd	DATAat0x17cb0(%rip), %xmm6
    0000085f: 	movsd	DATAat0x17cf0(%rip), %xmm3
    00000867: 	movsd	DATAat0x17cb8(%rip), %xmm10
    00000870: 	movsd	%xmm1, 0x8(%rsp)
    00000876: 	movsd	DATAat0x17d00(%rip), %xmm1
    0000087e: 	movsd	DATAat0x17cc0(%rip), %xmm4
    00000886: 	movsd	%xmm6, 0x10(%rsp)
    0000088c: 	movsd	DATAat0x17cc8(%rip), %xmm8
    00000895: 	movsd	DATAat0x17dc8(%rip), %xmm9
    0000089e: 	movsd	%xmm1, 0x38(%rsp)
    000008a4: 	movsd	DATAat0x17d08(%rip), %xmm1
    000008ac: 	movsd	DATAat0x17cd0(%rip), %xmm5
    000008b4: 	movsd	%xmm3, 0x18(%rsp)
    000008ba: 	movsd	DATAat0x17ce0(%rip), %xmm6
    000008c2: 	movsd	DATAat0x17cd8(%rip), %xmm13
    000008cb: 	movsd	%xmm1, 0x40(%rsp)
    000008d1: 	movsd	DATAat0x17d18(%rip), %xmm1
    000008d9: 	movsd	DATAat0x17ce8(%rip), %xmm7
    000008e1: 	movsd	DATAat0x17dc0(%rip), %xmm12
    000008ea: 	movsd	DATAat0x17cf8(%rip), %xmm3
    000008f2: 	movsd	DATAat0x17d10(%rip), %xmm14
    000008fb: 	movsd	%xmm1, 0x48(%rsp)
    00000901: 	jmp	.Ltmp181 # Offset: 2305
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_struct_globalId11test_structIdEXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_struct_localIdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 53
  State       : disassembled
  Address     : 0x4b50
  Size        : 0x97f
  MaxSize     : 0x980
  Offset      : 0x4b50
  Section     : .text
  Orc Section : .local.text._Z17test_struct_localIdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB052:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	pxor	%xmm0, %xmm0
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0xb8, %rsp
    00000014: 	movq	%fs:0x28, %rax
    0000001d: 	movq	%rax, 0xa8(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	cvtsi2sdl	init_value(%rip), %xmm0
    0000002f: 	movapd	%xmm0, %xmm1
    00000033: 	movsd	%xmm0, 0x8(%rsp)
    00000039: 	movsd	%xmm0, 0xa0(%rsp)
    00000042: 	unpcklpd	%xmm1, %xmm1
    00000046: 	movaps	%xmm1, 0x50(%rsp)
    0000004b: 	movaps	%xmm1, 0x60(%rsp)
    00000050: 	movaps	%xmm1, 0x70(%rsp)
    00000055: 	movaps	%xmm1, 0x80(%rsp)
    0000005d: 	movaps	%xmm1, 0x90(%rsp)
    00000065: 	callq	clock@PLT # Offset: 101
    0000006a: 	movl	iterations(%rip), %r9d
    00000071: 	movq	%rax, start_time(%rip)
    00000078: 	testl	%r9d, %r9d
    0000007b: 	jle	.Ltmp182 # Offset: 123
    00000081: 	leal	-0x1(%r9), %eax
    00000085: 	movsd	0x8(%rsp), %xmm0
    0000008b: 	cmpl	$0x1, %eax
    0000008e: 	jbe	.Ltmp183 # Offset: 142
    00000094: 	movsd	DATAat0x17c98(%rip), %xmm1
    0000009c: 	movsd	DATAat0x17cb0(%rip), %xmm7
    000000a4: 	movl	%r9d, %r10d
    000000a7: 	movq	%xmm0, %rdi
    000000ac: 	movsd	DATAat0x17cf0(%rip), %xmm3
    000000b4: 	shrl	%r10d
    000000b7: 	movsd	DATAat0x17cb8(%rip), %xmm10
    000000c0: 	movsd	%xmm0, 0x30(%rsp)
    000000c6: 	movsd	%xmm1, 0x8(%rsp)
    000000cc: 	movapd	%xmm0, %xmm2
    000000d0: 	movsd	DATAat0x17d00(%rip), %xmm1
    000000d8: 	movsd	DATAat0x17cc0(%rip), %xmm4
    000000e0: 	movsd	%xmm7, 0x10(%rsp)
    000000e6: 	movq	%xmm0, %rcx
    000000eb: 	movsd	DATAat0x17cc8(%rip), %xmm8
    000000f4: 	movsd	DATAat0x17dc8(%rip), %xmm9
    000000fd: 	movsd	%xmm1, 0x38(%rsp)
    00000103: 	movq	%xmm0, %rsi
    00000108: 	movsd	DATAat0x17d08(%rip), %xmm1
    00000110: 	movsd	DATAat0x17cd0(%rip), %xmm5
    00000118: 	movsd	%xmm3, 0x18(%rsp)
    0000011e: 	movapd	%xmm0, %xmm15
    00000123: 	xorl	%r8d, %r8d
    00000126: 	movsd	DATAat0x17cd8(%rip), %xmm13
    0000012f: 	movsd	%xmm1, 0x40(%rsp)
    00000135: 	movq	%xmm0, %rax
    0000013a: 	movsd	DATAat0x17d18(%rip), %xmm1
    00000142: 	movsd	DATAat0x17ce0(%rip), %xmm6
    0000014a: 	movsd	DATAat0x17ce8(%rip), %xmm7
    00000152: 	movsd	%xmm0, 0x28(%rsp)
    00000158: 	movsd	DATAat0x17dc0(%rip), %xmm12
    00000161: 	movq	%xmm0, %rdx
    00000166: 	movsd	DATAat0x17cf8(%rip), %xmm3
    0000016e: 	movsd	%xmm0, 0x20(%rsp)
    00000174: 	movsd	DATAat0x17d10(%rip), %xmm14
    0000017d: 	movsd	%xmm1, 0x48(%rsp)
    00000183: 	nopl	(%rax,%rax) # Size: 5
.Ltmp184:
    00000188: 	movsd	0x10(%rsp), %xmm1
    0000018e: 	movsd	0x18(%rsp), %xmm11
    00000195: 	addsd	%xmm3, %xmm15
    0000019a: 	addl	$0x1, %r8d
    0000019e: 	addsd	%xmm1, %xmm0
    000001a2: 	addsd	%xmm10, %xmm15
    000001a7: 	addsd	%xmm10, %xmm0
    000001ac: 	addsd	%xmm9, %xmm15
    000001b1: 	addsd	%xmm4, %xmm0
    000001b5: 	addsd	%xmm8, %xmm15
    000001ba: 	addsd	0x38(%rsp), %xmm15
    000001c1: 	addsd	0x40(%rsp), %xmm15
    000001c8: 	addsd	%xmm8, %xmm0
    000001cd: 	addsd	%xmm3, %xmm15
    000001d2: 	addsd	%xmm9, %xmm0
    000001d7: 	addsd	%xmm10, %xmm15
    000001dc: 	addsd	%xmm5, %xmm0
    000001e0: 	addsd	%xmm9, %xmm15
    000001e5: 	addsd	%xmm13, %xmm0
    000001ea: 	addsd	%xmm8, %xmm15
    000001ef: 	addsd	%xmm1, %xmm0
    000001f3: 	movq	%rdx, %xmm1
    000001f8: 	addsd	%xmm6, %xmm1
    000001fc: 	movq	%xmm15, %rbx
    00000201: 	movsd	0x20(%rsp), %xmm15
    00000208: 	addsd	%xmm10, %xmm0
    0000020d: 	addsd	%xmm4, %xmm1
    00000211: 	addsd	%xmm4, %xmm0
    00000215: 	addsd	%xmm7, %xmm1
    00000219: 	addsd	%xmm8, %xmm0
    0000021e: 	addsd	%xmm13, %xmm1
    00000223: 	addsd	%xmm9, %xmm0
    00000228: 	addsd	%xmm11, %xmm1
    0000022d: 	addsd	%xmm5, %xmm0
    00000231: 	addsd	%xmm12, %xmm1
    00000236: 	addsd	%xmm13, %xmm0
    0000023b: 	addsd	%xmm6, %xmm1
    0000023f: 	addsd	%xmm4, %xmm1
    00000243: 	addsd	%xmm7, %xmm1
    00000247: 	addsd	%xmm13, %xmm1
    0000024c: 	movq	%xmm1, %rdx
    00000251: 	movq	%rax, %xmm1
    00000256: 	addsd	%xmm5, %xmm1
    0000025a: 	addsd	%xmm3, %xmm1
    0000025e: 	addsd	%xmm6, %xmm1
    00000262: 	addsd	0x8(%rsp), %xmm1
    00000268: 	addsd	%xmm6, %xmm1
    0000026c: 	addsd	%xmm3, %xmm1
    00000270: 	addsd	%xmm5, %xmm1
    00000274: 	addsd	%xmm3, %xmm1
    00000278: 	addsd	%xmm6, %xmm1
    0000027c: 	addsd	0x8(%rsp), %xmm1
    00000282: 	movq	%xmm1, %rax
    00000287: 	movsd	0x8(%rsp), %xmm1
    0000028d: 	addsd	%xmm1, %xmm2
    00000291: 	addsd	%xmm1, %xmm15
    00000296: 	addsd	%xmm3, %xmm2
    0000029a: 	addsd	%xmm4, %xmm2
    0000029e: 	addsd	%xmm7, %xmm2
    000002a2: 	addsd	%xmm9, %xmm2
    000002a7: 	addsd	%xmm8, %xmm2
    000002ac: 	addsd	%xmm1, %xmm2
    000002b0: 	movapd	%xmm15, %xmm1
    000002b5: 	movq	%rsi, %xmm15
    000002ba: 	addsd	%xmm5, %xmm15
    000002bf: 	addsd	%xmm6, %xmm1
    000002c3: 	addsd	%xmm3, %xmm2
    000002c7: 	addsd	%xmm14, %xmm15
    000002cc: 	addsd	0x10(%rsp), %xmm15
    000002d3: 	addsd	0x48(%rsp), %xmm15
    000002da: 	addsd	%xmm3, %xmm1
    000002de: 	addsd	%xmm4, %xmm2
    000002e2: 	addsd	%xmm5, %xmm15
    000002e7: 	addsd	%xmm5, %xmm1
    000002eb: 	addsd	%xmm7, %xmm2
    000002ef: 	addsd	%xmm14, %xmm15
    000002f4: 	addsd	%xmm4, %xmm1
    000002f8: 	addsd	%xmm9, %xmm2
    000002fd: 	movq	%xmm15, %rsi
    00000302: 	movq	%rcx, %xmm15
    00000307: 	addsd	%xmm10, %xmm1
    0000030c: 	addsd	%xmm6, %xmm15
    00000311: 	addsd	%xmm8, %xmm2
    00000316: 	addsd	%xmm7, %xmm1
    0000031a: 	addsd	%xmm5, %xmm15
    0000031f: 	addsd	%xmm14, %xmm1
    00000324: 	addsd	0x8(%rsp), %xmm1
    0000032a: 	addsd	%xmm10, %xmm15
    0000032f: 	addsd	%xmm6, %xmm1
    00000333: 	addsd	%xmm14, %xmm15
    00000338: 	addsd	%xmm3, %xmm1
    0000033c: 	addsd	%xmm6, %xmm15
    00000341: 	addsd	%xmm5, %xmm1
    00000345: 	addsd	%xmm5, %xmm15
    0000034a: 	addsd	%xmm4, %xmm1
    0000034e: 	movq	%xmm15, %rcx
    00000353: 	movsd	0x28(%rsp), %xmm15
    0000035a: 	addsd	%xmm4, %xmm15
    0000035f: 	addsd	%xmm10, %xmm1
    00000364: 	addsd	%xmm13, %xmm15
    00000369: 	addsd	%xmm7, %xmm1
    0000036d: 	addsd	%xmm12, %xmm15
    00000372: 	addsd	%xmm4, %xmm15
    00000377: 	movsd	%xmm15, 0x28(%rsp)
    0000037e: 	movsd	0x30(%rsp), %xmm15
    00000385: 	addsd	%xmm7, %xmm15
    0000038a: 	addsd	%xmm9, %xmm15
    0000038f: 	addsd	%xmm8, %xmm15
    00000394: 	addsd	%xmm11, %xmm15
    00000399: 	addsd	%xmm12, %xmm15
    0000039e: 	addsd	%xmm7, %xmm15
    000003a3: 	addsd	%xmm9, %xmm15
    000003a8: 	addsd	%xmm8, %xmm15
    000003ad: 	movq	%xmm15, %r11
    000003b2: 	movq	%rdi, %xmm15
    000003b7: 	addsd	%xmm3, %xmm15
    000003bc: 	addsd	%xmm3, %xmm15
    000003c1: 	addsd	%xmm3, %xmm15
    000003c6: 	addsd	%xmm3, %xmm15
    000003cb: 	addsd	%xmm3, %xmm15
    000003d0: 	addsd	%xmm3, %xmm15
    000003d5: 	movq	%xmm15, %rdi
    000003da: 	movq	%rdx, %xmm15
    000003df: 	addsd	%xmm11, %xmm15
    000003e4: 	addsd	%xmm12, %xmm15
    000003e9: 	movq	%xmm15, %rdx
    000003ee: 	movq	%rcx, %xmm15
    000003f3: 	addsd	%xmm10, %xmm15
    000003f8: 	addsd	%xmm14, %xmm15
    000003fd: 	movq	%xmm15, %rcx
    00000402: 	movq	%rax, %xmm15
    00000407: 	addsd	%xmm6, %xmm15
    0000040c: 	addsd	%xmm3, %xmm15
    00000411: 	movq	%xmm15, %rax
    00000416: 	movq	%rsi, %xmm15
    0000041b: 	addsd	0x10(%rsp), %xmm15
    00000422: 	movapd	%xmm15, %xmm11
    00000427: 	addsd	0x48(%rsp), %xmm11
    0000042e: 	movq	%rbx, %xmm15
    00000433: 	addsd	0x38(%rsp), %xmm15
    0000043a: 	addsd	0x40(%rsp), %xmm15
    00000441: 	movq	%xmm11, %rsi
    00000446: 	movapd	%xmm1, %xmm11
    0000044b: 	movsd	0x28(%rsp), %xmm1
    00000451: 	addsd	%xmm14, %xmm11
    00000456: 	addsd	%xmm13, %xmm1
    0000045b: 	movsd	%xmm11, 0x20(%rsp)
    00000462: 	movq	%r11, %xmm11
    00000467: 	addsd	0x18(%rsp), %xmm11
    0000046e: 	addsd	%xmm12, %xmm1
    00000473: 	movsd	%xmm1, 0x28(%rsp)
    00000479: 	movapd	%xmm11, %xmm1
    0000047e: 	addsd	%xmm12, %xmm1
    00000483: 	movsd	%xmm1, 0x30(%rsp)
    00000489: 	cmpl	%r8d, %r10d
    0000048c: 	jne	.Ltmp184 # Offset: 1164
    00000492: 	movl	%r9d, %r8d
    00000495: 	andl	$-0x2, %r8d
    00000499: 	testb	$0x1, %r9b
    0000049d: 	je	.Ltmp185 # Offset: 1181
.Ltmp189:
    000004a3: 	movq	%rdi, %xmm1
    000004a8: 	movsd	0x10(%rsp), %xmm11
    000004af: 	addsd	0x8(%rsp), %xmm2
    000004b5: 	addsd	%xmm3, %xmm15
    000004ba: 	addsd	%xmm3, %xmm1
    000004be: 	addl	$0x1, %r8d
    000004c2: 	addsd	%xmm11, %xmm0
    000004c7: 	addsd	%xmm3, %xmm2
    000004cb: 	addsd	%xmm10, %xmm15
    000004d0: 	addsd	%xmm3, %xmm1
    000004d4: 	addsd	%xmm10, %xmm0
    000004d9: 	addsd	%xmm4, %xmm2
    000004dd: 	addsd	%xmm9, %xmm15
    000004e2: 	addsd	%xmm3, %xmm1
    000004e6: 	addsd	%xmm4, %xmm0
    000004ea: 	addsd	%xmm7, %xmm2
    000004ee: 	addsd	%xmm8, %xmm15
    000004f3: 	movq	%xmm1, %rdi
    000004f8: 	movq	%rdx, %xmm1
    000004fd: 	addsd	0x38(%rsp), %xmm15
    00000504: 	addsd	%xmm6, %xmm1
    00000508: 	addsd	%xmm8, %xmm0
    0000050d: 	addsd	%xmm9, %xmm2
    00000512: 	addsd	0x40(%rsp), %xmm15
    00000519: 	addsd	%xmm4, %xmm1
    0000051d: 	addsd	%xmm9, %xmm0
    00000522: 	addsd	%xmm8, %xmm2
    00000527: 	addsd	%xmm7, %xmm1
    0000052b: 	addsd	%xmm5, %xmm0
    0000052f: 	addsd	%xmm13, %xmm1
    00000534: 	addsd	0x18(%rsp), %xmm1
    0000053a: 	addsd	%xmm13, %xmm0
    0000053f: 	addsd	%xmm12, %xmm1
    00000544: 	movq	%xmm1, %rdx
    00000549: 	movq	%rcx, %xmm1
    0000054e: 	addsd	%xmm6, %xmm1
    00000552: 	addsd	%xmm5, %xmm1
    00000556: 	addsd	%xmm10, %xmm1
    0000055b: 	addsd	%xmm14, %xmm1
    00000560: 	movq	%xmm1, %rcx
    00000565: 	movq	%rax, %xmm1
    0000056a: 	addsd	%xmm5, %xmm1
    0000056e: 	addsd	%xmm3, %xmm1
    00000572: 	addsd	%xmm6, %xmm1
    00000576: 	addsd	0x8(%rsp), %xmm1
    0000057c: 	addsd	%xmm6, %xmm1
    00000580: 	addsd	%xmm3, %xmm1
    00000584: 	movq	%xmm1, %rax
    00000589: 	movq	%rsi, %xmm1
    0000058e: 	addsd	%xmm5, %xmm1
    00000592: 	addsd	%xmm14, %xmm1
    00000597: 	addsd	%xmm11, %xmm1
    0000059c: 	addsd	0x48(%rsp), %xmm1
    000005a2: 	movsd	0x18(%rsp), %xmm11
    000005a9: 	movq	%xmm1, %rsi
    000005ae: 	movsd	0x20(%rsp), %xmm1
    000005b4: 	addsd	0x8(%rsp), %xmm1
    000005ba: 	addsd	%xmm6, %xmm1
    000005be: 	addsd	%xmm3, %xmm1
    000005c2: 	addsd	%xmm5, %xmm1
    000005c6: 	addsd	%xmm4, %xmm1
    000005ca: 	addsd	%xmm10, %xmm1
    000005cf: 	addsd	%xmm7, %xmm1
    000005d3: 	addsd	%xmm14, %xmm1
    000005d8: 	movsd	%xmm1, 0x20(%rsp)
    000005de: 	movsd	0x28(%rsp), %xmm1
    000005e4: 	addsd	%xmm4, %xmm1
    000005e8: 	addsd	%xmm13, %xmm1
    000005ed: 	addsd	%xmm12, %xmm1
    000005f2: 	movsd	%xmm1, 0x28(%rsp)
    000005f8: 	movsd	0x30(%rsp), %xmm1
    000005fe: 	addsd	%xmm7, %xmm1
    00000602: 	addsd	%xmm9, %xmm1
    00000607: 	addsd	%xmm8, %xmm1
    0000060c: 	addsd	%xmm11, %xmm1
    00000611: 	addsd	%xmm12, %xmm1
    00000616: 	movsd	%xmm1, 0x30(%rsp)
    0000061c: 	cmpl	%r8d, %r9d
    0000061f: 	jle	.Ltmp185 # Offset: 1567
    00000625: 	movq	%rdi, %xmm1
    0000062a: 	addsd	0x8(%rsp), %xmm2
    00000630: 	addsd	%xmm3, %xmm1
    00000634: 	addsd	%xmm3, %xmm2
    00000638: 	addsd	%xmm3, %xmm1
    0000063c: 	addsd	%xmm4, %xmm2
    00000640: 	addsd	%xmm3, %xmm1
    00000644: 	addsd	%xmm7, %xmm2
    00000648: 	movq	%xmm1, %rdi
    0000064d: 	movq	%rdx, %xmm1
    00000652: 	addsd	%xmm6, %xmm1
    00000656: 	addsd	%xmm9, %xmm2
    0000065b: 	addsd	%xmm4, %xmm1
    0000065f: 	addsd	%xmm8, %xmm2
    00000664: 	addsd	%xmm7, %xmm1
    00000668: 	addsd	%xmm13, %xmm1
    0000066d: 	addsd	%xmm11, %xmm1
    00000672: 	movsd	0x10(%rsp), %xmm11
    00000679: 	addsd	%xmm11, %xmm0
    0000067e: 	addsd	%xmm12, %xmm1
    00000683: 	addsd	%xmm10, %xmm0
    00000688: 	movq	%xmm1, %rdx
    0000068d: 	movq	%rcx, %xmm1
    00000692: 	addsd	%xmm6, %xmm1
    00000696: 	addsd	%xmm4, %xmm0
    0000069a: 	addsd	%xmm5, %xmm1
    0000069e: 	addsd	%xmm8, %xmm0
    000006a3: 	addsd	%xmm10, %xmm1
    000006a8: 	addsd	%xmm9, %xmm0
    000006ad: 	addsd	%xmm14, %xmm1
    000006b2: 	addsd	%xmm5, %xmm0
    000006b6: 	movq	%xmm1, %rcx
    000006bb: 	movq	%rax, %xmm1
    000006c0: 	addsd	%xmm5, %xmm1
    000006c4: 	addsd	%xmm13, %xmm0
    000006c9: 	addsd	%xmm3, %xmm1
    000006cd: 	addsd	%xmm6, %xmm1
    000006d1: 	addsd	0x8(%rsp), %xmm1
    000006d7: 	addsd	%xmm6, %xmm1
    000006db: 	addsd	%xmm3, %xmm1
    000006df: 	movq	%xmm1, %rax
    000006e4: 	movq	%rsi, %xmm1
    000006e9: 	addsd	%xmm5, %xmm1
    000006ed: 	addsd	%xmm14, %xmm1
    000006f2: 	addsd	%xmm11, %xmm1
    000006f7: 	movsd	0x48(%rsp), %xmm11
    000006fe: 	addsd	%xmm1, %xmm11
    00000703: 	movq	%xmm11, %rsi
    00000708: 	movsd	0x8(%rsp), %xmm11
    0000070f: 	addsd	0x20(%rsp), %xmm11
    00000716: 	addsd	%xmm6, %xmm11
    0000071b: 	addsd	%xmm3, %xmm11
    00000720: 	addsd	%xmm15, %xmm3
    00000725: 	movsd	0x40(%rsp), %xmm15
    0000072c: 	addsd	%xmm5, %xmm11
    00000731: 	addsd	%xmm10, %xmm3
    00000736: 	addsd	%xmm4, %xmm11
    0000073b: 	addsd	0x28(%rsp), %xmm4
    00000741: 	addsd	%xmm9, %xmm3
    00000746: 	addsd	%xmm10, %xmm11
    0000074b: 	addsd	%xmm13, %xmm4
    00000750: 	addsd	%xmm8, %xmm3
    00000755: 	addsd	0x38(%rsp), %xmm3
    0000075b: 	addsd	%xmm7, %xmm11
    00000760: 	addsd	0x30(%rsp), %xmm7
    00000766: 	addsd	%xmm12, %xmm4
    0000076b: 	addsd	%xmm3, %xmm15
    00000770: 	addsd	%xmm9, %xmm7
    00000775: 	addsd	%xmm14, %xmm11
    0000077a: 	movsd	%xmm4, 0x28(%rsp)
    00000780: 	addsd	%xmm8, %xmm7
    00000785: 	addsd	0x18(%rsp), %xmm7
    0000078b: 	movsd	%xmm11, 0x20(%rsp)
    00000792: 	addsd	%xmm12, %xmm7
    00000797: 	movsd	%xmm7, 0x30(%rsp)
.Ltmp185:
    0000079d: 	movsd	0x20(%rsp), %xmm7
    000007a3: 	movq	%rdi, 0x78(%rsp)
    000007a8: 	movq	%rdx, 0x50(%rsp)
    000007ad: 	movsd	%xmm7, 0x70(%rsp)
    000007b3: 	movsd	0x28(%rsp), %xmm7
    000007b9: 	movq	%rcx, 0x68(%rsp)
    000007be: 	movsd	%xmm7, 0x88(%rsp)
    000007c7: 	movsd	0x30(%rsp), %xmm7
    000007cd: 	movq	%rax, 0x80(%rsp)
    000007d5: 	movq	%rsi, 0x58(%rsp)
    000007da: 	movsd	%xmm0, 0x90(%rsp)
    000007e3: 	movsd	%xmm2, 0x60(%rsp)
    000007e9: 	movsd	%xmm15, 0xa0(%rsp)
    000007f3: 	movsd	%xmm7, 0x98(%rsp)
.Ltmp182:
    000007fc: 	leaq	0x50(%rsp), %rdi
    00000801: 	movq	%rbp, %rsi
    00000804: 	callq	_Z12check11_sumsIdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2052
    00000809: 	movq	%rbp, %rdi
    0000080c: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2060
    00000811: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000818: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000081f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000826: 	je	.Ltmp186 # Offset: 2086
.Ltmp188:
    00000828: 	movq	-0x20(%rax), %rbp
    0000082c: 	callq	clock@PLT # Offset: 2092
    00000831: 	movq	%rax, end_time(%rip)
    00000838: 	movq	0xa8(%rsp), %rdx
    00000840: 	subq	%fs:0x28, %rdx
    00000849: 	jne	.Ltmp187 # Offset: 2121
    0000084f: 	subq	start_time(%rip), %rax
    00000856: 	pxor	%xmm0, %xmm0
    0000085a: 	movq	%rbp, %rdi
    0000085d: 	cvtsi2sd	%rax, %xmm0
    00000862: 	divsd	DATAat0x17ca0(%rip), %xmm0
    0000086a: 	addq	$0xb8, %rsp
    00000871: 	popq	%rbx
    00000872: 	popq	%rbp
    00000873: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 2163
    00000878: 	nopl	(%rax,%rax) # Size: 8
.Ltmp186:
    00000880: 	movq	-0x8(%rdx), %rax
    00000884: 	addq	$0x200, %rax
    0000088a: 	jmp	.Ltmp188 # Offset: 2186
.Ltmp183:
    0000088c: 	movsd	DATAat0x17c98(%rip), %xmm1
    00000894: 	movq	%xmm0, %rdi
    00000899: 	movsd	DATAat0x17cb0(%rip), %xmm5
    000008a1: 	movsd	%xmm0, 0x30(%rsp)
    000008a7: 	movsd	DATAat0x17cf0(%rip), %xmm3
    000008af: 	movsd	%xmm0, 0x28(%rsp)
    000008b5: 	movsd	DATAat0x17cb8(%rip), %xmm10
    000008be: 	movq	%xmm0, %rcx
    000008c3: 	movsd	%xmm1, 0x8(%rsp)
    000008c9: 	movapd	%xmm0, %xmm2
    000008cd: 	movsd	DATAat0x17d00(%rip), %xmm1
    000008d5: 	movsd	DATAat0x17cc0(%rip), %xmm4
    000008dd: 	movsd	%xmm5, 0x10(%rsp)
    000008e3: 	movq	%xmm0, %rsi
    000008e8: 	movsd	DATAat0x17cc8(%rip), %xmm8
    000008f1: 	movsd	DATAat0x17dc8(%rip), %xmm9
    000008fa: 	movsd	%xmm1, 0x38(%rsp)
    00000900: 	movapd	%xmm0, %xmm15
    00000905: 	xorl	%r8d, %r8d
    00000908: 	movsd	DATAat0x17d08(%rip), %xmm1
    00000910: 	movsd	%xmm3, 0x18(%rsp)
    00000916: 	movsd	DATAat0x17cd0(%rip), %xmm5
    0000091e: 	movsd	DATAat0x17cd8(%rip), %xmm13
    00000927: 	movq	%xmm0, %rax
    0000092c: 	movsd	%xmm1, 0x40(%rsp)
    00000932: 	movq	%xmm0, %rdx
    00000937: 	movsd	DATAat0x17d18(%rip), %xmm1
    0000093f: 	movsd	DATAat0x17ce0(%rip), %xmm6
    00000947: 	movsd	DATAat0x17ce8(%rip), %xmm7
    0000094f: 	movsd	%xmm0, 0x20(%rsp)
    00000955: 	movsd	DATAat0x17dc0(%rip), %xmm12
    0000095e: 	movsd	DATAat0x17cf8(%rip), %xmm3
    00000966: 	movsd	%xmm1, 0x48(%rsp)
    0000096c: 	movsd	DATAat0x17d10(%rip), %xmm14
    00000975: 	jmp	.Ltmp189 # Offset: 2421
.Ltmp187:
    0000097a: 	callq	__stack_chk_fail@PLT # Offset: 2426
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_struct_localIdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_struct_argIdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 54
  State       : disassembled
  Address     : 0x54d0
  Size        : 0x8f1
  MaxSize     : 0x900
  Offset      : 0x54d0
  Section     : .text
  Orc Section : .local.text._Z15test_struct_argIdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB053:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %r12
    00000009: 	pushq	%rbp
    0000000a: 	movq	%rsi, %rbp
    0000000d: 	subq	$0x58, %rsp
    00000011: 	callq	clock@PLT # Offset: 17
    00000016: 	movl	iterations(%rip), %r8d
    0000001d: 	movq	%rax, start_time(%rip)
    00000024: 	testl	%r8d, %r8d
    00000027: 	jle	.Ltmp190 # Offset: 39
    0000002d: 	leal	-0x1(%r8), %edi
    00000031: 	movsd	0x40(%r12), %xmm1
    00000038: 	movq	(%r12), %rdx
    0000003c: 	movq	0x30(%r12), %rax
    00000041: 	movsd	0x50(%r12), %xmm14
    00000048: 	movq	0x10(%r12), %r11
    0000004d: 	movsd	0x20(%r12), %xmm0
    00000054: 	movsd	0x8(%r12), %xmm15
    0000005b: 	movq	0x18(%r12), %rcx
    00000060: 	movsd	0x38(%r12), %xmm5
    00000067: 	movsd	0x48(%r12), %xmm3
    0000006e: 	movq	0x28(%r12), %rsi
    00000073: 	cmpl	$0x1, %edi
    00000076: 	jbe	.Ltmp191 # Offset: 118
    0000007c: 	movsd	DATAat0x17cd8(%rip), %xmm2
    00000084: 	movl	%r8d, %r9d
    00000087: 	movq	%xmm15, %r10
    0000008c: 	xorl	%edi, %edi
    0000008e: 	movsd	DATAat0x17cb0(%rip), %xmm7
    00000096: 	shrl	%r9d
    00000099: 	movsd	DATAat0x17cc0(%rip), %xmm6
    000000a1: 	movq	%rax, %xmm15
    000000a6: 	movsd	%xmm2, 0x8(%rsp)
    000000ac: 	movsd	DATAat0x17cf0(%rip), %xmm2
    000000b4: 	movsd	DATAat0x17dc8(%rip), %xmm11
    000000bd: 	movsd	DATAat0x17ce0(%rip), %xmm8
    000000c6: 	movsd	%xmm7, 0x18(%rsp)
    000000cc: 	movsd	DATAat0x17ce8(%rip), %xmm9
    000000d5: 	movsd	%xmm2, 0x20(%rsp)
    000000db: 	movsd	DATAat0x17dc0(%rip), %xmm2
    000000e3: 	movsd	DATAat0x17cd0(%rip), %xmm7
    000000eb: 	movsd	DATAat0x17cf8(%rip), %xmm4
    000000f3: 	movsd	DATAat0x17c98(%rip), %xmm13
    000000fc: 	movsd	DATAat0x17cc8(%rip), %xmm10
    00000105: 	movsd	%xmm2, 0x10(%rsp)
    0000010b: 	movsd	DATAat0x17d00(%rip), %xmm2
    00000113: 	movsd	DATAat0x17cb8(%rip), %xmm12
    0000011c: 	movsd	%xmm13, 0x48(%rsp)
    00000123: 	movapd	%xmm11, %xmm13
    00000128: 	movapd	%xmm9, %xmm11
    0000012d: 	movsd	%xmm2, 0x30(%rsp)
    00000133: 	movsd	DATAat0x17d08(%rip), %xmm2
    0000013b: 	movapd	%xmm8, %xmm9
    00000140: 	movapd	%xmm7, %xmm8
    00000145: 	movsd	%xmm10, (%rsp)
    0000014b: 	movapd	%xmm6, %xmm7
    0000014f: 	movapd	%xmm4, %xmm6
    00000153: 	movq	%rdx, %xmm4
    00000158: 	movsd	%xmm2, 0x38(%rsp)
    0000015e: 	movsd	DATAat0x17d10(%rip), %xmm2
    00000166: 	movsd	%xmm2, 0x28(%rsp)
    0000016c: 	movsd	DATAat0x17d18(%rip), %xmm2
    00000174: 	movsd	%xmm2, 0x40(%rsp)
    0000017a: 	movapd	%xmm14, %xmm2
    0000017f: 	nop # Size: 1
.Ltmp192:
    00000180: 	addsd	%xmm9, %xmm4
    00000185: 	movsd	0x8(%rsp), %xmm14
    0000018c: 	addsd	%xmm6, %xmm2
    00000190: 	movsd	0x18(%rsp), %xmm10
    00000197: 	addsd	%xmm8, %xmm15
    0000019c: 	addsd	%xmm11, %xmm3
    000001a1: 	addl	$0x1, %edi
    000001a4: 	addsd	%xmm10, %xmm1
    000001a9: 	addsd	%xmm7, %xmm5
    000001ad: 	addsd	%xmm7, %xmm4
    000001b1: 	addsd	%xmm12, %xmm2
    000001b6: 	addsd	%xmm6, %xmm15
    000001bb: 	addsd	0x8(%rsp), %xmm5
    000001c1: 	addsd	%xmm12, %xmm1
    000001c6: 	addsd	%xmm13, %xmm3
    000001cb: 	addsd	%xmm11, %xmm4
    000001d0: 	addsd	%xmm13, %xmm2
    000001d5: 	addsd	(%rsp), %xmm2
    000001da: 	addsd	0x30(%rsp), %xmm2
    000001e0: 	addsd	0x38(%rsp), %xmm2
    000001e6: 	addsd	%xmm9, %xmm15
    000001eb: 	addsd	%xmm14, %xmm4
    000001f0: 	addsd	0x20(%rsp), %xmm4
    000001f6: 	addsd	0x10(%rsp), %xmm4
    000001fc: 	addsd	%xmm7, %xmm1
    00000200: 	addsd	%xmm6, %xmm2
    00000204: 	addsd	(%rsp), %xmm1
    00000209: 	addsd	(%rsp), %xmm3
    0000020e: 	addsd	0x20(%rsp), %xmm3
    00000214: 	addsd	%xmm9, %xmm4
    00000219: 	addsd	%xmm12, %xmm2
    0000021e: 	addsd	%xmm13, %xmm1
    00000223: 	addsd	%xmm7, %xmm4
    00000227: 	addsd	%xmm13, %xmm2
    0000022c: 	addsd	(%rsp), %xmm2
    00000231: 	addsd	%xmm8, %xmm1
    00000236: 	addsd	%xmm11, %xmm4
    0000023b: 	movq	%xmm2, %rdx
    00000240: 	movq	%r11, %xmm2
    00000245: 	addsd	%xmm14, %xmm1
    0000024a: 	addsd	%xmm14, %xmm4
    0000024f: 	movsd	0x28(%rsp), %xmm14
    00000256: 	addsd	%xmm10, %xmm1
    0000025b: 	movq	%xmm4, %rax
    00000260: 	movsd	0x48(%rsp), %xmm4
    00000266: 	movq	%rax, %xmm10
    0000026b: 	addsd	0x20(%rsp), %xmm10
    00000272: 	addsd	%xmm4, %xmm0
    00000276: 	addsd	%xmm4, %xmm15
    0000027b: 	addsd	%xmm4, %xmm2
    0000027f: 	addsd	%xmm12, %xmm1
    00000284: 	addsd	%xmm9, %xmm0
    00000289: 	addsd	%xmm9, %xmm15
    0000028e: 	addsd	%xmm6, %xmm2
    00000292: 	addsd	%xmm7, %xmm1
    00000296: 	addsd	(%rsp), %xmm1
    0000029b: 	addsd	%xmm6, %xmm0
    0000029f: 	addsd	%xmm6, %xmm15
    000002a4: 	addsd	%xmm7, %xmm2
    000002a8: 	addsd	%xmm13, %xmm1
    000002ad: 	addsd	%xmm8, %xmm0
    000002b2: 	addsd	%xmm8, %xmm15
    000002b7: 	addsd	%xmm11, %xmm2
    000002bc: 	addsd	%xmm8, %xmm1
    000002c1: 	addsd	0x8(%rsp), %xmm1
    000002c7: 	addsd	%xmm7, %xmm0
    000002cb: 	addsd	%xmm6, %xmm15
    000002d0: 	addsd	%xmm13, %xmm2
    000002d5: 	addsd	(%rsp), %xmm2
    000002da: 	addsd	%xmm12, %xmm0
    000002df: 	addsd	%xmm9, %xmm15
    000002e4: 	addsd	%xmm4, %xmm2
    000002e8: 	addsd	%xmm11, %xmm0
    000002ed: 	addsd	%xmm4, %xmm15
    000002f2: 	addsd	%xmm6, %xmm2
    000002f6: 	addsd	%xmm14, %xmm0
    000002fb: 	addsd	%xmm9, %xmm15
    00000300: 	addsd	%xmm7, %xmm2
    00000304: 	addsd	%xmm4, %xmm0
    00000308: 	movq	%r10, %xmm4
    0000030d: 	addsd	%xmm6, %xmm15
    00000312: 	addsd	%xmm8, %xmm4
    00000317: 	addsd	%xmm11, %xmm2
    0000031c: 	addsd	%xmm9, %xmm0
    00000321: 	addsd	%xmm14, %xmm4
    00000326: 	addsd	0x18(%rsp), %xmm4
    0000032c: 	addsd	0x40(%rsp), %xmm4
    00000332: 	addsd	%xmm13, %xmm2
    00000337: 	addsd	%xmm6, %xmm0
    0000033b: 	addsd	%xmm8, %xmm4
    00000340: 	addsd	%xmm8, %xmm0
    00000345: 	addsd	%xmm14, %xmm4
    0000034a: 	addsd	%xmm7, %xmm0
    0000034e: 	movq	%xmm4, %r10
    00000353: 	movq	%rcx, %xmm4
    00000358: 	addsd	%xmm9, %xmm4
    0000035d: 	addsd	%xmm12, %xmm0
    00000362: 	addsd	%xmm8, %xmm4
    00000367: 	addsd	%xmm11, %xmm0
    0000036c: 	addsd	%xmm12, %xmm4
    00000371: 	addsd	%xmm14, %xmm4
    00000376: 	movsd	0x10(%rsp), %xmm14
    0000037d: 	addsd	%xmm14, %xmm5
    00000382: 	addsd	%xmm14, %xmm3
    00000387: 	addsd	%xmm9, %xmm4
    0000038c: 	addsd	%xmm11, %xmm3
    00000391: 	addsd	%xmm7, %xmm5
    00000395: 	addsd	%xmm8, %xmm4
    0000039a: 	addsd	0x8(%rsp), %xmm5
    000003a0: 	addsd	%xmm13, %xmm3
    000003a5: 	addsd	(%rsp), %xmm3
    000003aa: 	movq	%xmm4, %rcx
    000003af: 	movq	%rsi, %xmm4
    000003b4: 	addsd	0x20(%rsp), %xmm3
    000003ba: 	addsd	%xmm6, %xmm4
    000003be: 	addsd	%xmm6, %xmm4
    000003c2: 	addsd	%xmm6, %xmm4
    000003c6: 	addsd	%xmm6, %xmm4
    000003ca: 	addsd	%xmm6, %xmm4
    000003ce: 	addsd	%xmm6, %xmm4
    000003d2: 	movq	%xmm4, %rsi
    000003d7: 	movapd	%xmm10, %xmm4
    000003dc: 	movsd	0x28(%rsp), %xmm10
    000003e3: 	addsd	%xmm14, %xmm4
    000003e8: 	movq	%rcx, %xmm14
    000003ed: 	addsd	%xmm12, %xmm14
    000003f2: 	addsd	%xmm10, %xmm0
    000003f7: 	addsd	%xmm10, %xmm14
    000003fc: 	movq	%xmm14, %rcx
    00000401: 	movsd	(%rsp), %xmm14
    00000407: 	addsd	%xmm2, %xmm14
    0000040c: 	movsd	0x38(%rsp), %xmm2
    00000412: 	movq	%xmm14, %r11
    00000417: 	movq	%r10, %xmm14
    0000041c: 	addsd	0x18(%rsp), %xmm14
    00000423: 	addsd	0x40(%rsp), %xmm14
    0000042a: 	movq	%xmm14, %r10
    0000042f: 	movq	%rdx, %xmm14
    00000434: 	addsd	0x30(%rsp), %xmm14
    0000043b: 	addsd	%xmm14, %xmm2
    00000440: 	movsd	0x10(%rsp), %xmm14
    00000447: 	addsd	%xmm14, %xmm5
    0000044c: 	addsd	%xmm14, %xmm3
    00000451: 	cmpl	%edi, %r9d
    00000454: 	jne	.Ltmp192 # Offset: 1108
    0000045a: 	movl	%r8d, %edi
    0000045d: 	movq	%xmm4, %rdx
    00000462: 	movq	%xmm15, %rax
    00000467: 	movsd	(%rsp), %xmm10
    0000046d: 	movapd	%xmm6, %xmm4
    00000471: 	movq	%r10, %xmm15
    00000476: 	movapd	%xmm7, %xmm6
    0000047a: 	andl	$-0x2, %edi
    0000047d: 	movapd	%xmm8, %xmm7
    00000482: 	movapd	%xmm2, %xmm14
    00000487: 	movapd	%xmm9, %xmm8
    0000048c: 	movapd	%xmm11, %xmm9
    00000491: 	movapd	%xmm13, %xmm11
    00000496: 	movsd	0x48(%rsp), %xmm13
    0000049d: 	testb	$0x1, %r8b
    000004a1: 	je	.Ltmp193 # Offset: 1185
.Ltmp196:
    000004a7: 	movq	%rsi, %xmm2
    000004ac: 	addsd	%xmm13, %xmm0
    000004b1: 	addsd	0x18(%rsp), %xmm1
    000004b7: 	addl	$0x1, %edi
    000004ba: 	addsd	%xmm4, %xmm2
    000004be: 	addsd	%xmm4, %xmm14
    000004c3: 	addsd	%xmm9, %xmm3
    000004c8: 	addsd	%xmm7, %xmm15
    000004cd: 	addsd	%xmm8, %xmm0
    000004d2: 	addsd	%xmm12, %xmm1
    000004d7: 	addsd	%xmm4, %xmm2
    000004db: 	addsd	%xmm12, %xmm14
    000004e0: 	addsd	%xmm11, %xmm3
    000004e5: 	addsd	%xmm6, %xmm5
    000004e9: 	addsd	%xmm4, %xmm0
    000004ed: 	addsd	%xmm6, %xmm1
    000004f1: 	addsd	%xmm4, %xmm2
    000004f5: 	addsd	%xmm11, %xmm14
    000004fa: 	addsd	0x8(%rsp), %xmm5
    00000500: 	addsd	%xmm10, %xmm3
    00000505: 	addsd	%xmm7, %xmm0
    00000509: 	addsd	%xmm10, %xmm1
    0000050e: 	movq	%xmm2, %rsi
    00000513: 	movq	%rdx, %xmm2
    00000518: 	addsd	0x20(%rsp), %xmm3
    0000051e: 	addsd	%xmm8, %xmm2
    00000523: 	addsd	%xmm10, %xmm14
    00000528: 	addsd	%xmm6, %xmm0
    0000052c: 	addsd	%xmm11, %xmm1
    00000531: 	addsd	0x30(%rsp), %xmm14
    00000538: 	addsd	0x38(%rsp), %xmm14
    0000053f: 	addsd	%xmm6, %xmm2
    00000543: 	addsd	%xmm12, %xmm0
    00000548: 	addsd	%xmm7, %xmm1
    0000054c: 	addsd	0x8(%rsp), %xmm1
    00000552: 	addsd	%xmm9, %xmm2
    00000557: 	addsd	0x8(%rsp), %xmm2
    0000055d: 	addsd	0x20(%rsp), %xmm2
    00000563: 	addsd	0x10(%rsp), %xmm2
    00000569: 	addsd	%xmm9, %xmm0
    0000056e: 	movq	%xmm2, %rdx
    00000573: 	movq	%rcx, %xmm2
    00000578: 	addsd	%xmm8, %xmm2
    0000057d: 	addsd	%xmm7, %xmm2
    00000581: 	addsd	%xmm12, %xmm2
    00000586: 	addsd	0x28(%rsp), %xmm2
    0000058c: 	movq	%xmm2, %rcx
    00000591: 	movq	%rax, %xmm2
    00000596: 	addsd	%xmm7, %xmm2
    0000059a: 	addsd	%xmm4, %xmm2
    0000059e: 	addsd	%xmm8, %xmm2
    000005a3: 	addsd	%xmm13, %xmm2
    000005a8: 	addsd	%xmm8, %xmm2
    000005ad: 	addsd	%xmm4, %xmm2
    000005b1: 	movq	%xmm2, %rax
    000005b6: 	movq	%r11, %xmm2
    000005bb: 	addsd	%xmm13, %xmm2
    000005c0: 	addsd	%xmm4, %xmm2
    000005c4: 	addsd	%xmm6, %xmm2
    000005c8: 	addsd	%xmm9, %xmm2
    000005cd: 	addsd	%xmm11, %xmm2
    000005d2: 	addsd	%xmm10, %xmm2
    000005d7: 	movq	%xmm2, %r11
    000005dc: 	movsd	0x28(%rsp), %xmm2
    000005e2: 	addsd	%xmm2, %xmm15
    000005e7: 	addsd	%xmm2, %xmm0
    000005eb: 	movsd	0x10(%rsp), %xmm2
    000005f1: 	addsd	0x18(%rsp), %xmm15
    000005f8: 	addsd	0x40(%rsp), %xmm15
    000005ff: 	addsd	%xmm2, %xmm5
    00000603: 	addsd	%xmm2, %xmm3
    00000607: 	cmpl	%edi, %r8d
    0000060a: 	jle	.Ltmp193 # Offset: 1546
    00000610: 	movq	%rsi, %xmm2
    00000615: 	addsd	%xmm13, %xmm0
    0000061a: 	addsd	0x18(%rsp), %xmm1
    00000620: 	addsd	%xmm4, %xmm2
    00000624: 	addsd	%xmm7, %xmm15
    00000629: 	addsd	%xmm8, %xmm0
    0000062e: 	addsd	%xmm12, %xmm1
    00000633: 	addsd	%xmm4, %xmm2
    00000637: 	addsd	%xmm4, %xmm0
    0000063b: 	addsd	%xmm6, %xmm1
    0000063f: 	addsd	%xmm4, %xmm2
    00000643: 	addsd	%xmm7, %xmm0
    00000647: 	addsd	%xmm10, %xmm1
    0000064c: 	movq	%xmm2, %rsi
    00000651: 	movq	%rdx, %xmm2
    00000656: 	addsd	%xmm8, %xmm2
    0000065b: 	addsd	%xmm6, %xmm0
    0000065f: 	addsd	%xmm11, %xmm1
    00000664: 	addsd	%xmm6, %xmm2
    00000668: 	addsd	%xmm12, %xmm0
    0000066d: 	addsd	%xmm7, %xmm1
    00000671: 	addsd	0x8(%rsp), %xmm1
    00000677: 	addsd	%xmm9, %xmm2
    0000067c: 	addsd	0x8(%rsp), %xmm2
    00000682: 	addsd	0x20(%rsp), %xmm2
    00000688: 	addsd	0x10(%rsp), %xmm2
    0000068e: 	addsd	%xmm9, %xmm0
    00000693: 	movq	%xmm2, %rdx
    00000698: 	movq	%rcx, %xmm2
    0000069d: 	addsd	%xmm8, %xmm2
    000006a2: 	addsd	%xmm7, %xmm2
    000006a6: 	addsd	%xmm12, %xmm2
    000006ab: 	addsd	0x28(%rsp), %xmm2
    000006b1: 	movq	%xmm2, %rcx
    000006b6: 	movq	%rax, %xmm2
    000006bb: 	addsd	%xmm7, %xmm2
    000006bf: 	movsd	0x10(%rsp), %xmm7
    000006c5: 	addsd	%xmm4, %xmm2
    000006c9: 	addsd	%xmm8, %xmm2
    000006ce: 	addsd	%xmm13, %xmm2
    000006d3: 	addsd	%xmm8, %xmm2
    000006d8: 	addsd	%xmm4, %xmm2
    000006dc: 	movq	%xmm2, %rax
    000006e1: 	movq	%r11, %xmm2
    000006e6: 	addsd	%xmm13, %xmm2
    000006eb: 	addsd	%xmm4, %xmm2
    000006ef: 	addsd	%xmm14, %xmm4
    000006f4: 	movsd	0x38(%rsp), %xmm14
    000006fb: 	addsd	%xmm6, %xmm2
    000006ff: 	addsd	%xmm12, %xmm4
    00000704: 	addsd	%xmm5, %xmm6
    00000708: 	addsd	0x8(%rsp), %xmm6
    0000070e: 	addsd	%xmm9, %xmm2
    00000713: 	addsd	%xmm3, %xmm9
    00000718: 	addsd	%xmm11, %xmm4
    0000071d: 	movapd	%xmm6, %xmm5
    00000721: 	addsd	%xmm7, %xmm5
    00000725: 	addsd	%xmm11, %xmm2
    0000072a: 	addsd	%xmm11, %xmm9
    0000072f: 	addsd	%xmm10, %xmm4
    00000734: 	addsd	0x30(%rsp), %xmm4
    0000073a: 	addsd	%xmm10, %xmm2
    0000073f: 	addsd	%xmm10, %xmm9
    00000744: 	addsd	0x20(%rsp), %xmm9
    0000074b: 	addsd	%xmm4, %xmm14
    00000750: 	movq	%xmm2, %r11
    00000755: 	movsd	0x28(%rsp), %xmm2
    0000075b: 	addsd	%xmm9, %xmm7
    00000760: 	addsd	%xmm2, %xmm15
    00000765: 	addsd	%xmm2, %xmm0
    00000769: 	addsd	0x18(%rsp), %xmm15
    00000770: 	addsd	0x40(%rsp), %xmm15
    00000777: 	movapd	%xmm7, %xmm3
.Ltmp193:
    0000077b: 	movq	%rsi, 0x28(%r12)
    00000780: 	movq	%rdx, (%r12)
    00000784: 	movq	%rcx, 0x18(%r12)
    00000789: 	movq	%rax, 0x30(%r12)
    0000078e: 	movq	%r11, 0x10(%r12)
    00000793: 	movsd	%xmm1, 0x40(%r12)
    0000079a: 	movsd	%xmm15, 0x8(%r12)
    000007a1: 	movsd	%xmm0, 0x20(%r12)
    000007a8: 	movsd	%xmm14, 0x50(%r12)
    000007af: 	movsd	%xmm5, 0x38(%r12)
    000007b6: 	movsd	%xmm3, 0x48(%r12)
.Ltmp190:
    000007bd: 	movq	%rbp, %rsi
    000007c0: 	movq	%r12, %rdi
    000007c3: 	callq	_Z12check11_sumsIdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1987
    000007c8: 	movq	%rbp, %rdi
    000007cb: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1995
    000007d0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000007d7: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000007de: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000007e5: 	je	.Ltmp194 # Offset: 2021
.Ltmp195:
    000007e7: 	movq	-0x20(%rax), %rbp
    000007eb: 	callq	clock@PLT # Offset: 2027
    000007f0: 	pxor	%xmm0, %xmm0
    000007f4: 	movq	%rax, end_time(%rip)
    000007fb: 	subq	start_time(%rip), %rax
    00000802: 	movq	%rbp, %rdi
    00000805: 	cvtsi2sd	%rax, %xmm0
    0000080a: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000812: 	addq	$0x58, %rsp
    00000816: 	popq	%rbp
    00000817: 	popq	%r12
    00000819: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 2073
    0000081e: 	nop # Size: 2
.Ltmp194:
    00000820: 	movq	-0x8(%rdx), %rax
    00000824: 	addq	$0x200, %rax
    0000082a: 	jmp	.Ltmp195 # Offset: 2090
.Ltmp191:
    0000082c: 	movsd	DATAat0x17dc0(%rip), %xmm2
    00000834: 	xorl	%edi, %edi
    00000836: 	movsd	DATAat0x17cd8(%rip), %xmm4
    0000083e: 	movsd	DATAat0x17cb0(%rip), %xmm7
    00000846: 	movsd	DATAat0x17cb8(%rip), %xmm12
    0000084f: 	movsd	%xmm2, 0x10(%rsp)
    00000855: 	movsd	DATAat0x17d00(%rip), %xmm2
    0000085d: 	movsd	DATAat0x17cc0(%rip), %xmm6
    00000865: 	movsd	DATAat0x17cc8(%rip), %xmm10
    0000086e: 	movsd	%xmm4, 0x8(%rsp)
    00000874: 	movsd	DATAat0x17cf0(%rip), %xmm4
    0000087c: 	movsd	DATAat0x17dc8(%rip), %xmm11
    00000885: 	movsd	%xmm2, 0x30(%rsp)
    0000088b: 	movsd	DATAat0x17d08(%rip), %xmm2
    00000893: 	movsd	DATAat0x17ce0(%rip), %xmm8
    0000089c: 	movsd	%xmm7, 0x18(%rsp)
    000008a2: 	movsd	DATAat0x17ce8(%rip), %xmm9
    000008ab: 	movsd	%xmm2, 0x38(%rsp)
    000008b1: 	movsd	DATAat0x17d10(%rip), %xmm2
    000008b9: 	movsd	DATAat0x17cd0(%rip), %xmm7
    000008c1: 	movsd	DATAat0x17c98(%rip), %xmm13
    000008ca: 	movsd	%xmm4, 0x20(%rsp)
    000008d0: 	movsd	DATAat0x17cf8(%rip), %xmm4
    000008d8: 	movsd	%xmm2, 0x28(%rsp)
    000008de: 	movsd	DATAat0x17d18(%rip), %xmm2
    000008e6: 	movsd	%xmm2, 0x40(%rsp)
    000008ec: 	jmp	.Ltmp196 # Offset: 2284
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_struct_argIdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_struct_arg2IdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 55
  State       : disassembled
  Address     : 0x5dd0
  Size        : 0xa8c
  MaxSize     : 0xa90
  Offset      : 0x5dd0
  Section     : .text
  Orc Section : .local.text._Z16test_struct_arg2IdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB054:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	movq	%rdi, %r12
    0000000f: 	pushq	%rbp
    00000010: 	movq	%rsi, %rbp
    00000013: 	pushq	%rbx
    00000014: 	subq	$0x78, %rsp
    00000018: 	callq	clock@PLT # Offset: 24
    0000001d: 	movl	iterations(%rip), %ecx
    00000023: 	movsd	(%r12), %xmm4
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	movq	0x8(%r12), %r9
    00000035: 	movsd	0x10(%r12), %xmm3
    0000003c: 	movq	0x18(%r12), %rdi
    00000041: 	movsd	0x20(%r12), %xmm0
    00000048: 	movq	0x28(%r12), %r8
    0000004d: 	movsd	0x30(%r12), %xmm2
    00000054: 	movq	0x38(%r12), %r10
    00000059: 	movsd	0x40(%r12), %xmm1
    00000060: 	movq	0x48(%r12), %rax
    00000065: 	movsd	0x50(%r12), %xmm15
    0000006c: 	testl	%ecx, %ecx
    0000006e: 	jle	.Ltmp197 # Offset: 110
    00000074: 	leal	-0x1(%rcx), %edx
    00000077: 	cmpl	$0x1, %edx
    0000007a: 	jbe	.Ltmp198 # Offset: 122
    00000080: 	movsd	DATAat0x17cd8(%rip), %xmm6
    00000088: 	movl	%ecx, 0x6c(%rsp)
    0000008c: 	movl	%ecx, %esi
    0000008e: 	xorl	%edx, %edx
    00000090: 	movsd	DATAat0x17d18(%rip), %xmm12
    00000099: 	movq	%xmm4, %r11
    0000009e: 	shrl	%esi
    000000a0: 	movsd	DATAat0x17d00(%rip), %xmm13
    000000a9: 	movsd	%xmm6, 0x38(%rsp)
    000000af: 	movq	%xmm2, %rbx
    000000b4: 	movl	%esi, %r13d
    000000b7: 	movsd	DATAat0x17cb0(%rip), %xmm11
    000000c0: 	movsd	%xmm12, 0x58(%rsp)
    000000c7: 	movq	%r12, %r15
    000000ca: 	movq	%rbp, %r14
    000000cd: 	movsd	DATAat0x17d10(%rip), %xmm9
    000000d6: 	movsd	DATAat0x17cf0(%rip), %xmm6
    000000de: 	movsd	DATAat0x17dc0(%rip), %xmm5
    000000e6: 	movsd	%xmm13, 0x8(%rsp)
    000000ed: 	movsd	DATAat0x17cc8(%rip), %xmm12
    000000f6: 	movsd	%xmm9, 0x40(%rsp)
    000000fd: 	movsd	DATAat0x17d08(%rip), %xmm13
    00000106: 	movapd	%xmm11, %xmm9
    0000010b: 	movsd	DATAat0x17c98(%rip), %xmm14
    00000114: 	movsd	%xmm6, 0x50(%rsp)
    0000011a: 	movsd	DATAat0x17ce0(%rip), %xmm7
    00000122: 	movapd	%xmm9, %xmm2
    00000127: 	movsd	%xmm12, 0x30(%rsp)
    0000012e: 	movsd	DATAat0x17cd0(%rip), %xmm6
    00000136: 	movsd	DATAat0x17cc0(%rip), %xmm8
    0000013f: 	movsd	%xmm5, 0x48(%rsp)
    00000145: 	movsd	0x30(%rsp), %xmm9
    0000014c: 	movsd	DATAat0x17ce8(%rip), %xmm10
    00000155: 	movsd	%xmm11, 0x60(%rsp)
    0000015c: 	movsd	DATAat0x17cf8(%rip), %xmm5
    00000164: 	movsd	DATAat0x17dc8(%rip), %xmm11
    0000016d: 	movsd	DATAat0x17cb8(%rip), %xmm12
    00000176: 	movsd	%xmm13, 0x10(%rsp)
    0000017d: 	movsd	0x38(%rsp), %xmm13
    00000184: 	movsd	%xmm1, 0x18(%rsp)
    0000018a: 	movsd	%xmm0, 0x28(%rsp)
    00000190: 	movapd	%xmm14, %xmm0
    00000195: 	movsd	%xmm3, 0x20(%rsp)
    0000019b: 	movsd	0x50(%rsp), %xmm3
    000001a1: 	movsd	0x58(%rsp), %xmm4
    000001a7: 	movsd	0x48(%rsp), %xmm14
    000001ae: 	movsd	0x40(%rsp), %xmm1
    000001b4: 	movsd	%xmm4, 0x30(%rsp)
    000001ba: 	nopw	(%rax,%rax) # Size: 6
.Ltmp199:
    000001c0: 	movq	%r11, %xmm4
    000001c5: 	addl	$0x1, %edx
    000001c8: 	addsd	%xmm7, %xmm4
    000001cc: 	addsd	%xmm8, %xmm4
    000001d1: 	addsd	%xmm10, %xmm4
    000001d6: 	addsd	%xmm13, %xmm4
    000001db: 	addsd	%xmm3, %xmm4
    000001df: 	addsd	%xmm14, %xmm4
    000001e4: 	addsd	%xmm7, %xmm4
    000001e8: 	addsd	%xmm8, %xmm4
    000001ed: 	addsd	%xmm10, %xmm4
    000001f2: 	addsd	%xmm13, %xmm4
    000001f7: 	movq	%xmm4, %r11
    000001fc: 	movq	%r9, %xmm4
    00000201: 	addsd	%xmm6, %xmm4
    00000205: 	addsd	%xmm1, %xmm4
    00000209: 	addsd	%xmm2, %xmm4
    0000020d: 	addsd	0x30(%rsp), %xmm4
    00000213: 	addsd	%xmm6, %xmm4
    00000217: 	addsd	%xmm1, %xmm4
    0000021b: 	movq	%xmm4, %r9
    00000220: 	movsd	0x20(%rsp), %xmm4
    00000226: 	addsd	%xmm0, %xmm4
    0000022a: 	addsd	%xmm5, %xmm4
    0000022e: 	addsd	%xmm8, %xmm4
    00000233: 	addsd	%xmm10, %xmm4
    00000238: 	addsd	%xmm11, %xmm4
    0000023d: 	addsd	%xmm9, %xmm4
    00000242: 	addsd	%xmm0, %xmm4
    00000246: 	addsd	%xmm5, %xmm4
    0000024a: 	addsd	%xmm8, %xmm4
    0000024f: 	addsd	%xmm10, %xmm4
    00000254: 	movq	%xmm4, %r12
    00000259: 	movq	%rdi, %xmm4
    0000025e: 	addsd	%xmm7, %xmm4
    00000262: 	addsd	%xmm6, %xmm4
    00000266: 	addsd	%xmm12, %xmm4
    0000026b: 	addsd	%xmm1, %xmm4
    0000026f: 	addsd	%xmm7, %xmm4
    00000273: 	addsd	%xmm6, %xmm4
    00000277: 	movq	%xmm4, %rdi
    0000027c: 	movsd	0x28(%rsp), %xmm4
    00000282: 	addsd	%xmm0, %xmm4
    00000286: 	addsd	%xmm7, %xmm4
    0000028a: 	addsd	%xmm5, %xmm4
    0000028e: 	addsd	%xmm6, %xmm4
    00000292: 	addsd	%xmm8, %xmm4
    00000297: 	addsd	%xmm12, %xmm4
    0000029c: 	addsd	%xmm10, %xmm4
    000002a1: 	addsd	%xmm1, %xmm4
    000002a5: 	addsd	%xmm0, %xmm4
    000002a9: 	addsd	%xmm7, %xmm4
    000002ad: 	addsd	%xmm5, %xmm4
    000002b1: 	addsd	%xmm6, %xmm4
    000002b5: 	addsd	%xmm8, %xmm4
    000002ba: 	addsd	%xmm12, %xmm4
    000002bf: 	movq	%xmm4, %rcx
    000002c4: 	movq	%r8, %xmm4
    000002c9: 	addsd	%xmm5, %xmm4
    000002cd: 	addsd	%xmm5, %xmm4
    000002d1: 	addsd	%xmm5, %xmm4
    000002d5: 	addsd	%xmm5, %xmm4
    000002d9: 	movq	%xmm4, %r8
    000002de: 	movq	%rbx, %xmm4
    000002e3: 	addsd	%xmm6, %xmm4
    000002e7: 	addsd	%xmm5, %xmm4
    000002eb: 	addsd	%xmm7, %xmm4
    000002ef: 	addsd	%xmm0, %xmm4
    000002f3: 	addsd	%xmm7, %xmm4
    000002f7: 	addsd	%xmm5, %xmm4
    000002fb: 	addsd	%xmm6, %xmm4
    000002ff: 	addsd	%xmm5, %xmm4
    00000303: 	addsd	%xmm7, %xmm4
    00000307: 	addsd	%xmm0, %xmm4
    0000030b: 	movq	%xmm4, %rbp
    00000310: 	movq	%r10, %xmm4
    00000315: 	addsd	%xmm8, %xmm4
    0000031a: 	addsd	%xmm13, %xmm4
    0000031f: 	addsd	%xmm14, %xmm4
    00000324: 	addsd	%xmm8, %xmm4
    00000329: 	movq	%xmm4, %r10
    0000032e: 	movsd	0x18(%rsp), %xmm4
    00000334: 	addsd	%xmm2, %xmm4
    00000338: 	addsd	%xmm12, %xmm4
    0000033d: 	addsd	%xmm8, %xmm4
    00000342: 	addsd	%xmm9, %xmm4
    00000347: 	addsd	%xmm11, %xmm4
    0000034c: 	addsd	%xmm6, %xmm4
    00000350: 	addsd	%xmm13, %xmm4
    00000355: 	addsd	%xmm2, %xmm4
    00000359: 	addsd	%xmm12, %xmm4
    0000035e: 	addsd	%xmm8, %xmm4
    00000363: 	addsd	%xmm9, %xmm4
    00000368: 	addsd	%xmm11, %xmm4
    0000036d: 	movq	%xmm4, %rsi
    00000372: 	movq	%rax, %xmm4
    00000377: 	addsd	%xmm10, %xmm4
    0000037c: 	addsd	%xmm11, %xmm4
    00000381: 	addsd	%xmm9, %xmm4
    00000386: 	addsd	%xmm3, %xmm4
    0000038a: 	addsd	%xmm14, %xmm4
    0000038f: 	addsd	%xmm10, %xmm4
    00000394: 	addsd	%xmm11, %xmm4
    00000399: 	addsd	%xmm9, %xmm4
    0000039e: 	movq	%xmm4, %rax
    000003a3: 	movapd	%xmm15, %xmm4
    000003a8: 	movq	%r8, %xmm15
    000003ad: 	addsd	%xmm5, %xmm15
    000003b2: 	addsd	%xmm5, %xmm4
    000003b6: 	addsd	%xmm5, %xmm15
    000003bb: 	addsd	%xmm12, %xmm4
    000003c0: 	movq	%xmm15, %r8
    000003c5: 	movq	%r11, %xmm15
    000003ca: 	addsd	%xmm11, %xmm4
    000003cf: 	addsd	%xmm3, %xmm15
    000003d4: 	addsd	%xmm9, %xmm4
    000003d9: 	addsd	0x8(%rsp), %xmm4
    000003df: 	addsd	%xmm14, %xmm15
    000003e4: 	addsd	0x10(%rsp), %xmm4
    000003ea: 	movq	%xmm15, %r11
    000003ef: 	movq	%rdi, %xmm15
    000003f4: 	addsd	%xmm5, %xmm4
    000003f8: 	addsd	%xmm12, %xmm15
    000003fd: 	addsd	%xmm12, %xmm4
    00000402: 	addsd	%xmm1, %xmm15
    00000407: 	addsd	%xmm11, %xmm4
    0000040c: 	movq	%xmm15, %rdi
    00000411: 	movq	%rbp, %xmm15
    00000416: 	addsd	%xmm7, %xmm15
    0000041b: 	addsd	%xmm9, %xmm4
    00000420: 	addsd	0x8(%rsp), %xmm4
    00000426: 	addsd	%xmm5, %xmm15
    0000042b: 	movq	%xmm15, %rbx
    00000430: 	movq	%rsi, %xmm15
    00000435: 	addsd	%xmm6, %xmm15
    0000043a: 	addsd	%xmm13, %xmm15
    0000043f: 	movsd	%xmm15, 0x18(%rsp)
    00000446: 	movq	%r12, %xmm15
    0000044b: 	addsd	%xmm11, %xmm15
    00000450: 	addsd	%xmm9, %xmm15
    00000455: 	movsd	%xmm15, 0x20(%rsp)
    0000045c: 	movq	%r9, %xmm15
    00000461: 	addsd	%xmm2, %xmm15
    00000466: 	addsd	0x30(%rsp), %xmm15
    0000046d: 	movq	%xmm15, %r9
    00000472: 	movq	%rcx, %xmm15
    00000477: 	addsd	%xmm10, %xmm15
    0000047c: 	addsd	%xmm1, %xmm15
    00000481: 	movsd	%xmm15, 0x28(%rsp)
    00000488: 	movsd	0x10(%rsp), %xmm15
    0000048f: 	addsd	%xmm4, %xmm15
    00000494: 	movq	%r10, %xmm4
    00000499: 	addsd	%xmm13, %xmm4
    0000049e: 	addsd	%xmm14, %xmm4
    000004a3: 	movq	%xmm4, %r10
    000004a8: 	movq	%rax, %xmm4
    000004ad: 	addsd	%xmm3, %xmm4
    000004b1: 	addsd	%xmm14, %xmm4
    000004b6: 	movq	%xmm4, %rax
    000004bb: 	cmpl	%edx, %r13d
    000004be: 	jne	.Ltmp199 # Offset: 1214
    000004c4: 	movl	0x6c(%rsp), %ecx
    000004c8: 	movsd	0x18(%rsp), %xmm1
    000004ce: 	movq	%r15, %r12
    000004d1: 	movq	%r14, %rbp
    000004d4: 	movapd	%xmm0, %xmm14
    000004d9: 	movsd	0x20(%rsp), %xmm3
    000004df: 	movsd	0x28(%rsp), %xmm0
    000004e5: 	movq	%r11, %xmm4
    000004ea: 	movl	%ecx, %edx
    000004ec: 	movq	%rbx, %xmm2
    000004f1: 	movsd	%xmm9, 0x30(%rsp)
    000004f8: 	movsd	%xmm13, 0x38(%rsp)
    000004ff: 	andl	$-0x2, %edx
    00000502: 	testb	$0x1, %cl
    00000505: 	je	.Ltmp197 # Offset: 1285
.Ltmp202:
    0000050b: 	movq	%r9, %xmm13
    00000510: 	addsd	%xmm7, %xmm4
    00000514: 	addsd	%xmm6, %xmm2
    00000518: 	addl	$0x1, %edx
    0000051b: 	addsd	%xmm6, %xmm13
    00000520: 	movsd	0x60(%rsp), %xmm9
    00000527: 	addsd	%xmm14, %xmm0
    0000052c: 	addsd	%xmm14, %xmm3
    00000531: 	addsd	%xmm5, %xmm15
    00000536: 	addsd	%xmm9, %xmm1
    0000053b: 	addsd	%xmm8, %xmm4
    00000540: 	movq	%xmm13, %r9
    00000545: 	movq	%rdi, %xmm13
    0000054a: 	addsd	%xmm7, %xmm0
    0000054e: 	addsd	%xmm7, %xmm13
    00000553: 	addsd	%xmm5, %xmm2
    00000557: 	addsd	%xmm10, %xmm4
    0000055c: 	addsd	0x38(%rsp), %xmm4
    00000562: 	addsd	%xmm5, %xmm0
    00000566: 	addsd	%xmm12, %xmm1
    0000056b: 	movq	%xmm13, %rdi
    00000570: 	movq	%r10, %xmm13
    00000575: 	addsd	%xmm5, %xmm3
    00000579: 	addsd	%xmm8, %xmm13
    0000057e: 	addsd	%xmm7, %xmm2
    00000582: 	addsd	%xmm6, %xmm0
    00000586: 	addsd	%xmm8, %xmm1
    0000058b: 	addsd	%xmm8, %xmm3
    00000590: 	addsd	0x30(%rsp), %xmm1
    00000596: 	movq	%xmm13, %r10
    0000059b: 	movq	%rax, %xmm13
    000005a0: 	addsd	%xmm14, %xmm2
    000005a5: 	addsd	%xmm10, %xmm13
    000005aa: 	addsd	%xmm8, %xmm0
    000005af: 	addsd	%xmm12, %xmm15
    000005b4: 	addsd	%xmm11, %xmm1
    000005b9: 	addsd	%xmm7, %xmm2
    000005bd: 	addsd	%xmm10, %xmm3
    000005c2: 	movq	%xmm13, %rax
    000005c7: 	movq	%r8, %xmm13
    000005cc: 	addsd	%xmm12, %xmm0
    000005d1: 	addsd	%xmm5, %xmm13
    000005d6: 	addsd	%xmm11, %xmm15
    000005db: 	addsd	%xmm11, %xmm3
    000005e0: 	addsd	0x30(%rsp), %xmm15
    000005e7: 	addsd	%xmm10, %xmm0
    000005ec: 	addsd	0x8(%rsp), %xmm15
    000005f3: 	movq	%xmm13, %r8
    000005f8: 	movq	%rdi, %xmm13
    000005fd: 	addsd	%xmm6, %xmm1
    00000601: 	addsd	%xmm6, %xmm13
    00000606: 	addsd	%xmm5, %xmm2
    0000060a: 	addsd	0x38(%rsp), %xmm1
    00000610: 	addsd	0x30(%rsp), %xmm3
    00000616: 	addsd	0x10(%rsp), %xmm15
    0000061d: 	movq	%xmm13, %rdi
    00000622: 	movq	%r9, %xmm13
    00000627: 	addsd	0x40(%rsp), %xmm13
    0000062e: 	movq	%xmm13, %r9
    00000633: 	movq	%rax, %xmm13
    00000638: 	addsd	%xmm11, %xmm13
    0000063d: 	movq	%xmm13, %rax
    00000642: 	movq	%r8, %xmm13
    00000647: 	addsd	%xmm5, %xmm13
    0000064c: 	movq	%xmm13, %r8
    00000651: 	movq	%r9, %xmm13
    00000656: 	addsd	%xmm9, %xmm13
    0000065b: 	movsd	0x50(%rsp), %xmm9
    00000662: 	addsd	%xmm9, %xmm4
    00000667: 	addsd	0x48(%rsp), %xmm4
    0000066d: 	movq	%xmm13, %r9
    00000672: 	movq	%rax, %xmm13
    00000677: 	addsd	0x30(%rsp), %xmm13
    0000067e: 	movq	%xmm13, %rax
    00000683: 	movq	%rdi, %xmm13
    00000688: 	addsd	%xmm12, %xmm13
    0000068d: 	movq	%xmm13, %rdi
    00000692: 	movq	%rax, %xmm13
    00000697: 	addsd	%xmm9, %xmm13
    0000069c: 	movsd	0x40(%rsp), %xmm9
    000006a3: 	addsd	%xmm9, %xmm0
    000006a8: 	movq	%xmm13, %rax
    000006ad: 	movq	%r8, %xmm13
    000006b2: 	addsd	%xmm5, %xmm13
    000006b7: 	movq	%xmm13, %r8
    000006bc: 	movq	%rdi, %xmm13
    000006c1: 	addsd	%xmm9, %xmm13
    000006c6: 	movsd	0x48(%rsp), %xmm9
    000006cd: 	movq	%xmm13, %rdi
    000006d2: 	movq	%r10, %xmm13
    000006d7: 	addsd	0x38(%rsp), %xmm13
    000006de: 	movq	%xmm13, %r10
    000006e3: 	movq	%r9, %xmm13
    000006e8: 	addsd	0x58(%rsp), %xmm13
    000006ef: 	movq	%xmm13, %r9
    000006f4: 	movq	%r10, %xmm13
    000006f9: 	addsd	%xmm9, %xmm13
    000006fe: 	movq	%xmm13, %r10
    00000703: 	movq	%rax, %xmm13
    00000708: 	addsd	%xmm9, %xmm13
    0000070d: 	movq	%xmm13, %rax
    00000712: 	cmpl	%edx, %ecx
    00000714: 	jle	.Ltmp197 # Offset: 1812
    0000071a: 	movq	%r9, %xmm13
    0000071f: 	movsd	0x60(%rsp), %xmm9
    00000726: 	addsd	%xmm6, %xmm2
    0000072a: 	addsd	%xmm5, %xmm15
    0000072f: 	addsd	%xmm6, %xmm13
    00000734: 	addsd	%xmm14, %xmm3
    00000739: 	addsd	%xmm9, %xmm1
    0000073e: 	addsd	%xmm14, %xmm0
    00000743: 	addsd	%xmm5, %xmm2
    00000747: 	addsd	%xmm12, %xmm15
    0000074c: 	movq	%xmm13, %r9
    00000751: 	movq	%rdi, %xmm13
    00000756: 	addsd	%xmm5, %xmm3
    0000075a: 	addsd	%xmm7, %xmm13
    0000075f: 	addsd	%xmm12, %xmm1
    00000764: 	addsd	%xmm7, %xmm2
    00000768: 	addsd	%xmm7, %xmm0
    0000076c: 	addsd	%xmm11, %xmm15
    00000771: 	addsd	%xmm8, %xmm3
    00000776: 	movq	%xmm13, %rdi
    0000077b: 	movq	%r10, %xmm13
    00000780: 	addsd	%xmm8, %xmm1
    00000785: 	addsd	%xmm8, %xmm13
    0000078a: 	addsd	%xmm14, %xmm2
    0000078f: 	addsd	%xmm5, %xmm0
    00000793: 	addsd	%xmm7, %xmm4
    00000797: 	addsd	%xmm10, %xmm3
    0000079c: 	movq	%xmm13, %r10
    000007a1: 	movq	%rax, %xmm13
    000007a6: 	addsd	%xmm7, %xmm2
    000007aa: 	addsd	%xmm10, %xmm13
    000007af: 	addsd	%xmm6, %xmm0
    000007b3: 	addsd	%xmm8, %xmm4
    000007b8: 	addsd	%xmm11, %xmm3
    000007bd: 	addsd	%xmm5, %xmm2
    000007c1: 	addsd	0x30(%rsp), %xmm3
    000007c7: 	movq	%xmm13, %rax
    000007cc: 	movq	%r8, %xmm13
    000007d1: 	addsd	%xmm8, %xmm0
    000007d6: 	movsd	0x50(%rsp), %xmm8
    000007dd: 	addsd	%xmm5, %xmm13
    000007e2: 	addsd	%xmm10, %xmm4
    000007e7: 	addsd	0x38(%rsp), %xmm4
    000007ed: 	addsd	%xmm12, %xmm0
    000007f2: 	movq	%xmm13, %r8
    000007f7: 	movq	%rdi, %xmm13
    000007fc: 	addsd	%xmm6, %xmm13
    00000801: 	movq	%r8, %xmm14
    00000806: 	addsd	%xmm8, %xmm4
    0000080b: 	addsd	%xmm5, %xmm14
    00000810: 	addsd	%xmm10, %xmm0
    00000815: 	movq	%xmm13, %rdi
    0000081a: 	movq	%r9, %xmm13
    0000081f: 	addsd	0x40(%rsp), %xmm13
    00000826: 	movq	%xmm14, %r8
    0000082b: 	movsd	%xmm13, 0x18(%rsp)
    00000832: 	movq	%rax, %xmm13
    00000837: 	addsd	%xmm11, %xmm13
    0000083c: 	movq	%xmm13, %rax
    00000841: 	movsd	0x30(%rsp), %xmm13
    00000848: 	addsd	%xmm13, %xmm1
    0000084d: 	addsd	%xmm13, %xmm15
    00000852: 	movsd	0x18(%rsp), %xmm13
    00000859: 	addsd	0x8(%rsp), %xmm15
    00000860: 	addsd	0x10(%rsp), %xmm15
    00000867: 	addsd	%xmm9, %xmm13
    0000086c: 	movq	%rdi, %xmm9
    00000871: 	addsd	%xmm11, %xmm1
    00000876: 	addsd	%xmm12, %xmm9
    0000087b: 	movsd	0x40(%rsp), %xmm11
    00000882: 	movsd	0x48(%rsp), %xmm12
    00000889: 	movapd	%xmm13, %xmm14
    0000088e: 	movq	%rax, %xmm13
    00000893: 	addsd	%xmm12, %xmm4
    00000898: 	addsd	%xmm6, %xmm1
    0000089c: 	movq	%r8, %xmm6
    000008a1: 	addsd	%xmm11, %xmm0
    000008a6: 	addsd	%xmm5, %xmm6
    000008aa: 	addsd	0x30(%rsp), %xmm13
    000008b1: 	addsd	0x58(%rsp), %xmm14
    000008b8: 	movq	%xmm6, %r8
    000008bd: 	movapd	%xmm9, %xmm6
    000008c2: 	movapd	%xmm13, %xmm7
    000008c7: 	addsd	%xmm11, %xmm6
    000008cc: 	addsd	%xmm8, %xmm7
    000008d1: 	movq	%xmm14, %r9
    000008d6: 	movsd	0x38(%rsp), %xmm8
    000008dd: 	addsd	%xmm8, %xmm1
    000008e2: 	movq	%xmm6, %rdi
    000008e7: 	movq	%r10, %xmm6
    000008ec: 	addsd	%xmm12, %xmm7
    000008f1: 	addsd	%xmm8, %xmm6
    000008f6: 	movq	%xmm7, %rax
    000008fb: 	addsd	%xmm12, %xmm6
    00000900: 	movq	%xmm6, %r10
.Ltmp197:
    00000905: 	movq	%rax, 0x48(%r12)
    0000090a: 	movq	%rbp, %rsi
    0000090d: 	movq	%r9, 0x8(%r12)
    00000912: 	movq	%rdi, 0x18(%r12)
    00000917: 	movq	%r12, %rdi
    0000091a: 	movq	%r8, 0x28(%r12)
    0000091f: 	movq	%r10, 0x38(%r12)
    00000924: 	movsd	%xmm4, (%r12)
    0000092a: 	movsd	%xmm3, 0x10(%r12)
    00000931: 	movsd	%xmm0, 0x20(%r12)
    00000938: 	movsd	%xmm2, 0x30(%r12)
    0000093f: 	movsd	%xmm1, 0x40(%r12)
    00000946: 	movsd	%xmm15, 0x50(%r12)
    0000094d: 	callq	_Z12check11_sumsIdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2381
    00000952: 	movq	%rbp, %rdi
    00000955: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2389
    0000095a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000961: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000968: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000096f: 	je	.Ltmp200 # Offset: 2415
.Ltmp201:
    00000971: 	movq	-0x20(%rax), %rbp
    00000975: 	callq	clock@PLT # Offset: 2421
    0000097a: 	pxor	%xmm0, %xmm0
    0000097e: 	movq	%rax, end_time(%rip)
    00000985: 	subq	start_time(%rip), %rax
    0000098c: 	movq	%rbp, %rdi
    0000098f: 	cvtsi2sd	%rax, %xmm0
    00000994: 	divsd	DATAat0x17ca0(%rip), %xmm0
    0000099c: 	addq	$0x78, %rsp
    000009a0: 	popq	%rbx
    000009a1: 	popq	%rbp
    000009a2: 	popq	%r12
    000009a4: 	popq	%r13
    000009a6: 	popq	%r14
    000009a8: 	popq	%r15
    000009aa: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 2474
    000009af: 	nop # Size: 1
.Ltmp200:
    000009b0: 	movq	-0x8(%rdx), %rax
    000009b4: 	addq	$0x200, %rax
    000009ba: 	jmp	.Ltmp201 # Offset: 2490
.Ltmp198:
    000009bc: 	movsd	DATAat0x17cd8(%rip), %xmm6
    000009c4: 	xorl	%edx, %edx
    000009c6: 	movsd	DATAat0x17d10(%rip), %xmm5
    000009ce: 	movsd	DATAat0x17d00(%rip), %xmm9
    000009d7: 	movsd	DATAat0x17cc8(%rip), %xmm12
    000009e0: 	movsd	%xmm6, 0x38(%rsp)
    000009e6: 	movsd	DATAat0x17cf0(%rip), %xmm6
    000009ee: 	movsd	DATAat0x17ce0(%rip), %xmm7
    000009f6: 	movsd	DATAat0x17cc0(%rip), %xmm8
    000009ff: 	movsd	%xmm5, 0x40(%rsp)
    00000a05: 	movsd	DATAat0x17cb0(%rip), %xmm5
    00000a0d: 	movsd	DATAat0x17ce8(%rip), %xmm10
    00000a16: 	movsd	%xmm6, 0x50(%rsp)
    00000a1c: 	movsd	DATAat0x17dc0(%rip), %xmm6
    00000a24: 	movsd	DATAat0x17c98(%rip), %xmm14
    00000a2d: 	movsd	%xmm5, 0x60(%rsp)
    00000a33: 	movsd	DATAat0x17d18(%rip), %xmm5
    00000a3b: 	movsd	DATAat0x17dc8(%rip), %xmm11
    00000a44: 	movsd	%xmm9, 0x8(%rsp)
    00000a4b: 	movsd	DATAat0x17d08(%rip), %xmm9
    00000a54: 	movsd	%xmm6, 0x48(%rsp)
    00000a5a: 	movsd	DATAat0x17cd0(%rip), %xmm6
    00000a62: 	movsd	%xmm5, 0x58(%rsp)
    00000a68: 	movsd	DATAat0x17cf8(%rip), %xmm5
    00000a70: 	movsd	%xmm12, 0x30(%rsp)
    00000a77: 	movsd	DATAat0x17cb8(%rip), %xmm12
    00000a80: 	movsd	%xmm9, 0x10(%rsp)
    00000a87: 	jmp	.Ltmp202 # Offset: 2695
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_struct_arg2IdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_struct_globalIm11test_structImEXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 56
  State       : disassembled
  Address     : 0x6860
  Size        : 0x1c4
  MaxSize     : 0x1d0
  Offset      : 0x6860
  Section     : .text
  Orc Section : .local.text._Z18test_struct_globalIm11test_structImEXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB055:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	movl	iterations(%rip), %eax
    0000001a: 	testl	%eax, %eax
    0000001c: 	jle	.Ltmp203 # Offset: 28
    00000022: 	subl	$0x1, %eax
    00000025: 	movdqa	DATAat0x17d20(%rip), %xmm4
    0000002d: 	paddq	data64(%rip), %xmm4
    00000035: 	leaq	(,%rax,8), %rcx
    0000003d: 	leaq	(%rax,%rax,2), %rdx
    00000041: 	movdqa	DATAat0x17d30(%rip), %xmm2
    00000049: 	movdqa	DATAat0x17d40(%rip), %xmm1
    00000051: 	leaq	(%rcx,%rax), %rdi
    00000055: 	leaq	(%rax,%rdx,4), %rdx
    00000059: 	subq	%rax, %rcx
    0000005c: 	leaq	(,%rdi,4), %rsi
    00000064: 	movq	%rdi, %xmm7
    00000069: 	leaq	(%rax,%rcx,8), %rcx
    0000006d: 	movq	%rsi, %xmm3
    00000072: 	leaq	(,%rdx,4), %rsi
    0000007a: 	paddq	data64+16(%rip), %xmm2
    00000082: 	movq	%rsi, %xmm0
    00000087: 	leaq	(%rax,%rax,4), %rsi
    0000008b: 	paddq	data64+32(%rip), %xmm1
    00000093: 	leaq	(,%rsi,8), %rdx
    0000009b: 	movq	%rdx, %xmm5
    000000a0: 	leaq	(,%rsi,4), %rdx
    000000a8: 	movq	%rdx, %xmm6
    000000ad: 	movq	%rax, %rdx
    000000b0: 	punpcklqdq	%xmm5, %xmm0
    000000b4: 	shlq	$0x4, %rdx
    000000b8: 	paddq	%xmm0, %xmm4
    000000bc: 	movdqa	%xmm3, %xmm0
    000000c0: 	subq	%rax, %rdx
    000000c3: 	leaq	(%rax,%rsi,2), %rax
    000000c7: 	punpcklqdq	%xmm6, %xmm0
    000000cb: 	movaps	%xmm4, data64(%rip)
    000000d2: 	punpcklqdq	%xmm7, %xmm3
    000000d6: 	leaq	(%rax,%rax,4), %rax
    000000da: 	leaq	(%rdx,%rdx), %rdi
    000000de: 	paddq	%xmm0, %xmm2
    000000e2: 	paddq	%xmm3, %xmm1
    000000e6: 	movq	%rax, %xmm6
    000000eb: 	movdqa	DATAat0x17d50(%rip), %xmm0
    000000f3: 	movq	data64+80(%rip), %rax
    000000fa: 	paddq	data64+48(%rip), %xmm0
    00000102: 	movq	%rdx, %xmm3
    00000107: 	movq	%rdi, %xmm5
    0000010c: 	punpcklqdq	%xmm5, %xmm3
    00000110: 	movaps	%xmm2, data64+16(%rip)
    00000117: 	paddq	%xmm0, %xmm3
    0000011b: 	leaq	0x3c(%rax,%rdx,4), %rax
    00000120: 	movq	%rcx, %xmm0
    00000125: 	movaps	%xmm1, data64+32(%rip)
    0000012c: 	punpcklqdq	%xmm6, %xmm0
    00000130: 	movq	%rax, data64+80(%rip)
    00000137: 	paddq	data64+64(%rip), %xmm0
    0000013f: 	paddq	DATAat0x17d60(%rip), %xmm0
    00000147: 	movaps	%xmm3, data64+48(%rip)
    0000014e: 	movaps	%xmm0, data64+64(%rip)
.Ltmp203:
    00000155: 	movq	%rbp, %rsi
    00000158: 	leaq	data64(%rip), %rdi
    0000015f: 	callq	_Z12check11_sumsImEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 351
    00000164: 	movq	%rbp, %rdi
    00000167: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 359
    0000016c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000173: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000017a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000181: 	je	.Ltmp204 # Offset: 385
.Ltmp205:
    00000183: 	movq	-0x20(%rax), %rbp
    00000187: 	callq	clock@PLT # Offset: 391
    0000018c: 	pxor	%xmm0, %xmm0
    00000190: 	movq	%rax, end_time(%rip)
    00000197: 	movq	%rbp, %rdi
    0000019a: 	popq	%rbp
    0000019b: 	subq	start_time(%rip), %rax
    000001a2: 	cvtsi2sd	%rax, %xmm0
    000001a7: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001af: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 431
    000001b4: 	nopl	(%rax) # Size: 4
.Ltmp204:
    000001b8: 	movq	-0x8(%rdx), %rax
    000001bc: 	addq	$0x200, %rax
    000001c2: 	jmp	.Ltmp205 # Offset: 450
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_struct_globalIm11test_structImEXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_struct_localImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 57
  State       : disassembled
  Address     : 0x6a30
  Size        : 0x181
  MaxSize     : 0x190
  Offset      : 0x6a30
  Section     : .text
  Orc Section : .local.text._Z17test_struct_localImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB056:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	pushq	%rbx
    00000009: 	subq	$0x68, %rsp
    0000000d: 	movslq	init_value(%rip), %rbx
    00000014: 	movq	%fs:0x28, %rax
    0000001d: 	movq	%rax, 0x58(%rsp)
    00000022: 	xorl	%eax, %eax
    00000024: 	movq	%rbx, %xmm0
    00000029: 	movq	%rbx, 0x50(%rsp)
    0000002e: 	punpcklqdq	%xmm0, %xmm0
    00000032: 	movaps	%xmm0, (%rsp)
    00000036: 	movaps	%xmm0, 0x10(%rsp)
    0000003b: 	movaps	%xmm0, 0x20(%rsp)
    00000040: 	movaps	%xmm0, 0x30(%rsp)
    00000045: 	movaps	%xmm0, 0x40(%rsp)
    0000004a: 	callq	clock@PLT # Offset: 74
    0000004f: 	movq	%rax, start_time(%rip)
    00000056: 	movl	iterations(%rip), %eax
    0000005c: 	testl	%eax, %eax
    0000005e: 	jle	.Ltmp206 # Offset: 94
    00000064: 	subl	$0x1, %eax
    00000067: 	leaq	(,%rax,8), %rcx
    0000006f: 	leaq	(%rax,%rax,4), %rsi
    00000073: 	leaq	(%rcx,%rax), %rdx
    00000077: 	subq	%rax, %rcx
    0000007a: 	leaq	0x24(%rbx,%rdx,4), %rdi
    0000007f: 	leaq	0x9(%rbx,%rdx), %rdx
    00000084: 	movq	%rdx, 0x28(%rsp)
    00000089: 	leaq	(%rax,%rax,2), %rdx
    0000008d: 	leaq	(%rax,%rcx,8), %rcx
    00000091: 	leaq	(%rax,%rdx,4), %rdx
    00000095: 	leaq	0x39(%rbx,%rcx), %rcx
    0000009a: 	movq	%rdi, 0x10(%rsp)
    0000009f: 	leaq	0x34(%rbx,%rdx,4), %rdx
    000000a4: 	movq	%rcx, 0x40(%rsp)
    000000a9: 	leaq	0x28(%rbx,%rsi,8), %rcx
    000000ae: 	movq	%rdx, (%rsp)
    000000b2: 	leaq	0x14(%rbx,%rsi,4), %rdx
    000000b7: 	movq	%rdx, 0x18(%rsp)
    000000bc: 	movq	%rax, %rdx
    000000bf: 	shlq	$0x4, %rdx
    000000c3: 	movq	%rcx, 0x8(%rsp)
    000000c8: 	subq	%rax, %rdx
    000000cb: 	leaq	(%rax,%rsi,2), %rax
    000000cf: 	movq	%rdi, 0x20(%rsp)
    000000d4: 	leaq	(%rax,%rax,4), %rax
    000000d8: 	leaq	0xf(%rbx,%rdx), %r8
    000000dd: 	leaq	0x3c(%rbx,%rdx,4), %rcx
    000000e2: 	leaq	0x37(%rbx,%rax), %rax
    000000e7: 	movq	%r8, 0x30(%rsp)
    000000ec: 	leaq	0x1e(%rbx,%rdx,2), %rdx
    000000f1: 	movq	%rcx, 0x50(%rsp)
    000000f6: 	movq	%rdx, 0x38(%rsp)
    000000fb: 	movq	%rax, 0x48(%rsp)
.Ltmp206:
    00000100: 	movq	%rsp, %rdi
    00000103: 	movq	%rbp, %rsi
    00000106: 	callq	_Z12check11_sumsImEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 262
    0000010b: 	movq	%rbp, %rdi
    0000010e: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 270
    00000113: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000011a: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000121: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000128: 	je	.Ltmp207 # Offset: 296
.Ltmp209:
    0000012a: 	movq	-0x20(%rax), %rbp
    0000012e: 	callq	clock@PLT # Offset: 302
    00000133: 	movq	%rax, end_time(%rip)
    0000013a: 	movq	0x58(%rsp), %rdx
    0000013f: 	subq	%fs:0x28, %rdx
    00000148: 	jne	.Ltmp208 # Offset: 328
    0000014a: 	subq	start_time(%rip), %rax
    00000151: 	pxor	%xmm0, %xmm0
    00000155: 	movq	%rbp, %rdi
    00000158: 	cvtsi2sd	%rax, %xmm0
    0000015d: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000165: 	addq	$0x68, %rsp
    00000169: 	popq	%rbx
    0000016a: 	popq	%rbp
    0000016b: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 363
.Ltmp207:
    00000170: 	movq	-0x8(%rdx), %rax
    00000174: 	addq	$0x200, %rax
    0000017a: 	jmp	.Ltmp209 # Offset: 378
.Ltmp208:
    0000017c: 	callq	__stack_chk_fail@PLT # Offset: 380
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_struct_localImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_struct_argImEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 58
  State       : disassembled
  Address     : 0x6bc0
  Size        : 0x1ac
  MaxSize     : 0x1b0
  Offset      : 0x6bc0
  Section     : .text
  Orc Section : .local.text._Z15test_struct_argImEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB057:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rsi, %r12
    00000009: 	pushq	%rbp
    0000000a: 	movq	%rdi, %rbp
    0000000d: 	subq	$0x8, %rsp
    00000011: 	callq	clock@PLT # Offset: 17
    00000016: 	movq	%rax, start_time(%rip)
    0000001d: 	movl	iterations(%rip), %eax
    00000023: 	testl	%eax, %eax
    00000025: 	jle	.Ltmp210 # Offset: 37
    0000002b: 	subl	$0x1, %eax
    0000002e: 	movdqu	(%rbp), %xmm6
    00000033: 	leaq	(,%rax,8), %rcx
    0000003b: 	leaq	(%rax,%rax,2), %rdx
    0000003f: 	leaq	(%rcx,%rax), %rdi
    00000043: 	leaq	(%rax,%rdx,4), %rdx
    00000047: 	subq	%rax, %rcx
    0000004a: 	leaq	(,%rdi,4), %rsi
    00000052: 	leaq	(%rax,%rcx,8), %rcx
    00000056: 	movq	%rsi, %xmm0
    0000005b: 	leaq	(,%rdx,4), %rsi
    00000063: 	movq	%rcx, %xmm1
    00000068: 	movq	%rsi, %xmm2
    0000006d: 	leaq	(%rax,%rax,4), %rsi
    00000071: 	movdqa	%xmm0, %xmm4
    00000075: 	leaq	(,%rsi,8), %rdx
    0000007d: 	movq	%rdx, %xmm5
    00000082: 	leaq	(,%rsi,4), %rdx
    0000008a: 	punpcklqdq	%xmm5, %xmm2
    0000008e: 	movq	%rdx, %xmm7
    00000093: 	movq	%rax, %rdx
    00000096: 	movdqu	0x10(%rbp), %xmm5
    0000009b: 	paddq	DATAat0x17d20(%rip), %xmm2
    000000a3: 	shlq	$0x4, %rdx
    000000a7: 	punpcklqdq	%xmm7, %xmm4
    000000ab: 	movdqu	0x20(%rbp), %xmm7
    000000b0: 	subq	%rax, %rdx
    000000b3: 	leaq	(%rax,%rsi,2), %rax
    000000b7: 	paddq	DATAat0x17d30(%rip), %xmm4
    000000bf: 	paddq	%xmm6, %xmm2
    000000c3: 	movq	%rdi, %xmm6
    000000c8: 	leaq	(%rax,%rax,4), %rax
    000000cc: 	punpcklqdq	%xmm6, %xmm0
    000000d0: 	leaq	(%rdx,%rdx), %rdi
    000000d4: 	paddq	%xmm5, %xmm4
    000000d8: 	movups	%xmm2, (%rbp)
    000000dc: 	movq	%rdi, %xmm5
    000000e1: 	movq	%rdx, %xmm3
    000000e6: 	movdqu	0x30(%rbp), %xmm6
    000000eb: 	paddq	DATAat0x17d40(%rip), %xmm0
    000000f3: 	punpcklqdq	%xmm5, %xmm3
    000000f7: 	movdqu	0x40(%rbp), %xmm5
    000000fc: 	paddq	DATAat0x17d50(%rip), %xmm3
    00000104: 	movups	%xmm4, 0x10(%rbp)
    00000108: 	paddq	%xmm7, %xmm0
    0000010c: 	movq	%rax, %xmm7
    00000111: 	movq	0x50(%rbp), %rax
    00000115: 	punpcklqdq	%xmm7, %xmm1
    00000119: 	paddq	DATAat0x17d60(%rip), %xmm1
    00000121: 	paddq	%xmm6, %xmm3
    00000125: 	movups	%xmm0, 0x20(%rbp)
    00000129: 	leaq	0x3c(%rax,%rdx,4), %rax
    0000012e: 	movups	%xmm3, 0x30(%rbp)
    00000132: 	movq	%rax, 0x50(%rbp)
    00000136: 	paddq	%xmm5, %xmm1
    0000013a: 	movups	%xmm1, 0x40(%rbp)
.Ltmp210:
    0000013e: 	movq	%r12, %rsi
    00000141: 	movq	%rbp, %rdi
    00000144: 	callq	_Z12check11_sumsImEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 324
    00000149: 	movq	%r12, %rdi
    0000014c: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 332
    00000151: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000158: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000015f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000166: 	je	.Ltmp211 # Offset: 358
.Ltmp212:
    00000168: 	movq	-0x20(%rax), %rbp
    0000016c: 	callq	clock@PLT # Offset: 364
    00000171: 	pxor	%xmm0, %xmm0
    00000175: 	movq	%rax, end_time(%rip)
    0000017c: 	subq	start_time(%rip), %rax
    00000183: 	movq	%rbp, %rdi
    00000186: 	cvtsi2sd	%rax, %xmm0
    0000018b: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000193: 	addq	$0x8, %rsp
    00000197: 	popq	%rbp
    00000198: 	popq	%r12
    0000019a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 410
    0000019f: 	nop # Size: 1
.Ltmp211:
    000001a0: 	movq	-0x8(%rdx), %rax
    000001a4: 	addq	$0x200, %rax
    000001aa: 	jmp	.Ltmp212 # Offset: 426
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_struct_argImEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_struct_globalIi11test_structIiEXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 59
  State       : disassembled
  Address     : 0x6d70
  Size        : 0x12c
  MaxSize     : 0x130
  Offset      : 0x6d70
  Section     : .text
  Orc Section : .local.text._Z18test_struct_globalIi11test_structIiEXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB058:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	movl	iterations(%rip), %eax
    0000001a: 	testl	%eax, %eax
    0000001c: 	jle	.Ltmp213 # Offset: 28
    00000022: 	movd	%eax, %xmm4
    00000026: 	movdqa	DATAat0x17d70(%rip), %xmm1
    0000002e: 	imull	$0x3c, %eax, %ecx
    00000031: 	addl	%ecx, data32+40(%rip)
    00000037: 	pshufd	$0x0, %xmm4, %xmm0
    0000003c: 	imull	$0x37, %eax, %edx
    0000003f: 	addl	%edx, data32+36(%rip)
    00000045: 	movdqa	%xmm0, %xmm2
    00000049: 	imull	$0x39, %eax, %eax
    0000004c: 	movdqa	%xmm0, %xmm3
    00000050: 	addl	%eax, data32+32(%rip)
    00000056: 	pmuludq	%xmm1, %xmm2
    0000005a: 	psrlq	$0x20, %xmm3
    0000005f: 	psrlq	$0x20, %xmm1
    00000064: 	pmuludq	%xmm3, %xmm1
    00000068: 	pshufd	$0x8, %xmm2, %xmm2
    0000006d: 	pshufd	$0x8, %xmm1, %xmm1
    00000072: 	punpckldq	%xmm1, %xmm2
    00000076: 	movdqa	data32(%rip), %xmm1
    0000007e: 	paddd	%xmm2, %xmm1
    00000082: 	movdqa	DATAat0x17d80(%rip), %xmm2
    0000008a: 	movaps	%xmm1, data32(%rip)
    00000091: 	pmuludq	%xmm2, %xmm0
    00000095: 	psrlq	$0x20, %xmm2
    0000009a: 	pmuludq	%xmm2, %xmm3
    0000009e: 	pshufd	$0x8, %xmm0, %xmm0
    000000a3: 	pshufd	$0x8, %xmm3, %xmm3
    000000a8: 	punpckldq	%xmm3, %xmm0
    000000ac: 	paddd	data32+16(%rip), %xmm0
    000000b4: 	movaps	%xmm0, data32+16(%rip)
.Ltmp213:
    000000bb: 	movq	%rbp, %rsi
    000000be: 	leaq	data32(%rip), %rdi
    000000c5: 	callq	_Z12check11_sumsIiEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 197
    000000ca: 	movq	%rbp, %rdi
    000000cd: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 205
    000000d2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000d9: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000000e0: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000e7: 	je	.Ltmp214 # Offset: 231
.Ltmp215:
    000000e9: 	movq	-0x20(%rax), %rbp
    000000ed: 	callq	clock@PLT # Offset: 237
    000000f2: 	pxor	%xmm0, %xmm0
    000000f6: 	movq	%rax, end_time(%rip)
    000000fd: 	movq	%rbp, %rdi
    00000100: 	popq	%rbp
    00000101: 	subq	start_time(%rip), %rax
    00000108: 	cvtsi2sd	%rax, %xmm0
    0000010d: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000115: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 277
    0000011a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp214:
    00000120: 	movq	-0x8(%rdx), %rax
    00000124: 	addq	$0x200, %rax
    0000012a: 	jmp	.Ltmp215 # Offset: 298
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_struct_globalIi11test_structIiEXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_struct_localIiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 60
  State       : disassembled
  Address     : 0x6ea0
  Size        : 0x159
  MaxSize     : 0x160
  Offset      : 0x6ea0
  Section     : .text
  Orc Section : .local.text._Z17test_struct_localIiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB059:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	pushq	%rbx
    00000009: 	subq	$0x58, %rsp
    0000000d: 	movl	init_value(%rip), %ebx
    00000013: 	movq	%fs:0x28, %rax
    0000001c: 	movq	%rax, 0x48(%rsp)
    00000021: 	xorl	%eax, %eax
    00000023: 	movd	%ebx, %xmm3
    00000027: 	movl	%ebx, 0x38(%rsp)
    0000002b: 	pshufd	$0x0, %xmm3, %xmm0
    00000030: 	pshufd	$0xe0, %xmm3, %xmm1
    00000035: 	movaps	%xmm0, 0x10(%rsp)
    0000003a: 	movaps	%xmm0, 0x20(%rsp)
    0000003f: 	movq	%xmm1, 0x30(%rsp)
    00000045: 	movq	%xmm1, 0x8(%rsp)
    0000004b: 	callq	clock@PLT # Offset: 75
    00000050: 	movq	%rax, start_time(%rip)
    00000057: 	movl	iterations(%rip), %eax
    0000005d: 	testl	%eax, %eax
    0000005f: 	jle	.Ltmp216 # Offset: 95
    00000061: 	leal	(%rax,%rax,8), %edx
    00000064: 	leal	(%rax,%rax,4), %esi
    00000067: 	movq	0x8(%rsp), %xmm1
    0000006d: 	imull	$0x39, %eax, %edi
    00000070: 	leal	(%rbx,%rdx,4), %ecx
    00000073: 	addl	%ebx, %edx
    00000075: 	movl	%edx, 0x24(%rsp)
    00000079: 	imull	$0x34, %eax, %edx
    0000007c: 	movl	%ecx, 0x18(%rsp)
    00000080: 	movd	%edi, %xmm0
    00000084: 	movl	%ecx, 0x20(%rsp)
    00000088: 	addl	%ebx, %edx
    0000008a: 	movl	%edx, 0x10(%rsp)
    0000008e: 	leal	(%rbx,%rsi,4), %edx
    00000091: 	movl	%edx, 0x1c(%rsp)
    00000095: 	movl	%eax, %edx
    00000097: 	shll	$0x4, %edx
    0000009a: 	subl	%eax, %edx
    0000009c: 	addl	%ebx, %edx
    0000009e: 	movl	%edx, 0x28(%rsp)
    000000a2: 	leal	(%rbx,%rsi,8), %edx
    000000a5: 	movl	%edx, 0x14(%rsp)
    000000a9: 	imull	$0x3c, %eax, %edx
    000000ac: 	addl	%ebx, %edx
    000000ae: 	movl	%edx, 0x38(%rsp)
    000000b2: 	imull	$0x1e, %eax, %edx
    000000b5: 	imull	$0x37, %eax, %eax
    000000b8: 	addl	%ebx, %edx
    000000ba: 	movd	%eax, %xmm2
    000000be: 	movl	%edx, 0x2c(%rsp)
    000000c2: 	punpckldq	%xmm2, %xmm0
    000000c6: 	paddd	%xmm1, %xmm0
    000000ca: 	movq	%xmm0, 0x30(%rsp)
.Ltmp216:
    000000d0: 	leaq	0x10(%rsp), %rdi
    000000d5: 	movq	%rbp, %rsi
    000000d8: 	callq	_Z12check11_sumsIiEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 216
    000000dd: 	movq	%rbp, %rdi
    000000e0: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 224
    000000e5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000ec: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000000f3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000fa: 	je	.Ltmp217 # Offset: 250
.Ltmp219:
    000000fc: 	movq	-0x20(%rax), %rbp
    00000100: 	callq	clock@PLT # Offset: 256
    00000105: 	movq	%rax, end_time(%rip)
    0000010c: 	movq	0x48(%rsp), %rdx
    00000111: 	subq	%fs:0x28, %rdx
    0000011a: 	jne	.Ltmp218 # Offset: 282
    0000011c: 	subq	start_time(%rip), %rax
    00000123: 	pxor	%xmm0, %xmm0
    00000127: 	movq	%rbp, %rdi
    0000012a: 	cvtsi2sd	%rax, %xmm0
    0000012f: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000137: 	addq	$0x58, %rsp
    0000013b: 	popq	%rbx
    0000013c: 	popq	%rbp
    0000013d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 317
    00000142: 	nopw	(%rax,%rax) # Size: 6
.Ltmp217:
    00000148: 	movq	-0x8(%rdx), %rax
    0000014c: 	addq	$0x200, %rax
    00000152: 	jmp	.Ltmp219 # Offset: 338
.Ltmp218:
    00000154: 	callq	__stack_chk_fail@PLT # Offset: 340
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_struct_localIiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_struct_argIiEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 61
  State       : disassembled
  Address     : 0x7000
  Size        : 0x124
  MaxSize     : 0x130
  Offset      : 0x7000
  Section     : .text
  Orc Section : .local.text._Z15test_struct_argIiEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB060:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rsi, %r12
    00000009: 	pushq	%rbp
    0000000a: 	movq	%rdi, %rbp
    0000000d: 	subq	$0x8, %rsp
    00000011: 	callq	clock@PLT # Offset: 17
    00000016: 	movq	%rax, start_time(%rip)
    0000001d: 	movl	iterations(%rip), %eax
    00000023: 	testl	%eax, %eax
    00000025: 	jle	.Ltmp220 # Offset: 37
    0000002b: 	movd	%eax, %xmm4
    0000002f: 	movdqa	DATAat0x17d70(%rip), %xmm1
    00000037: 	imull	$0x3c, %eax, %ecx
    0000003a: 	movdqu	0x10(%rbp), %xmm5
    0000003f: 	pshufd	$0x0, %xmm4, %xmm0
    00000044: 	imull	$0x37, %eax, %edx
    00000047: 	addl	%ecx, 0x28(%rbp)
    0000004a: 	movdqa	%xmm0, %xmm2
    0000004e: 	imull	$0x39, %eax, %eax
    00000051: 	movdqa	%xmm0, %xmm3
    00000055: 	addl	%eax, 0x20(%rbp)
    00000058: 	pmuludq	%xmm1, %xmm2
    0000005c: 	psrlq	$0x20, %xmm3
    00000061: 	addl	%edx, 0x24(%rbp)
    00000064: 	psrlq	$0x20, %xmm1
    00000069: 	pmuludq	%xmm3, %xmm1
    0000006d: 	pshufd	$0x8, %xmm2, %xmm2
    00000072: 	pshufd	$0x8, %xmm1, %xmm1
    00000077: 	punpckldq	%xmm1, %xmm2
    0000007b: 	movdqu	(%rbp), %xmm1
    00000080: 	paddd	%xmm2, %xmm1
    00000084: 	movdqa	DATAat0x17d80(%rip), %xmm2
    0000008c: 	movups	%xmm1, (%rbp)
    00000090: 	pmuludq	%xmm2, %xmm0
    00000094: 	psrlq	$0x20, %xmm2
    00000099: 	pmuludq	%xmm2, %xmm3
    0000009d: 	pshufd	$0x8, %xmm0, %xmm0
    000000a2: 	pshufd	$0x8, %xmm3, %xmm3
    000000a7: 	punpckldq	%xmm3, %xmm0
    000000ab: 	paddd	%xmm5, %xmm0
    000000af: 	movups	%xmm0, 0x10(%rbp)
.Ltmp220:
    000000b3: 	movq	%r12, %rsi
    000000b6: 	movq	%rbp, %rdi
    000000b9: 	callq	_Z12check11_sumsIiEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 185
    000000be: 	movq	%r12, %rdi
    000000c1: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 193
    000000c6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000cd: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000000d4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000db: 	je	.Ltmp221 # Offset: 219
.Ltmp222:
    000000dd: 	movq	-0x20(%rax), %rbp
    000000e1: 	callq	clock@PLT # Offset: 225
    000000e6: 	pxor	%xmm0, %xmm0
    000000ea: 	movq	%rax, end_time(%rip)
    000000f1: 	subq	start_time(%rip), %rax
    000000f8: 	movq	%rbp, %rdi
    000000fb: 	cvtsi2sd	%rax, %xmm0
    00000100: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000108: 	addq	$0x8, %rsp
    0000010c: 	popq	%rbp
    0000010d: 	popq	%r12
    0000010f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 271
    00000114: 	nopl	(%rax) # Size: 4
.Ltmp221:
    00000118: 	movq	-0x8(%rdx), %rax
    0000011c: 	addq	$0x200, %rax
    00000122: 	jmp	.Ltmp222 # Offset: 290
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_struct_argIiEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_struct_globalIs11test_structIsEXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 62
  State       : disassembled
  Address     : 0x7130
  Size        : 0x1b4
  MaxSize     : 0x1c0
  Offset      : 0x7130
  Section     : .text
  Orc Section : .local.text._Z18test_struct_globalIs11test_structIsEXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB061:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	callq	clock@PLT # Offset: 8
    0000000d: 	movq	%rax, start_time(%rip)
    00000014: 	movl	iterations(%rip), %eax
    0000001a: 	testl	%eax, %eax
    0000001c: 	jle	.Ltmp223 # Offset: 28
    00000022: 	subl	$0x1, %eax
    00000025: 	leal	(%rax,%rax,2), %edi
    00000028: 	movl	%eax, %esi
    0000002a: 	leal	(%rax,%rax,4), %ecx
    0000002d: 	leal	(%rax,%rdi,4), %edi
    00000030: 	shll	$0x4, %esi
    00000033: 	leal	(,%rax,8), %edx
    0000003a: 	shll	$0x2, %edi
    0000003d: 	subl	%eax, %esi
    0000003f: 	leal	(%rdx,%rax), %r9d
    00000043: 	subl	%eax, %edx
    00000045: 	movd	%edi, %xmm1
    00000049: 	movd	%esi, %xmm3
    0000004d: 	movzwl	data16+4(%rip), %edi
    00000054: 	pinsrw	$0x1, data16+14(%rip), %xmm3
    0000005d: 	leal	(,%rcx,4), %r10d
    00000065: 	leal	(,%r9,4), %r8d
    0000006d: 	pinsrw	$0x1, data16+2(%rip), %xmm1
    00000076: 	movd	%edi, %xmm2
    0000007a: 	movzwl	data16+8(%rip), %edi
    00000081: 	leal	(%rax,%rdx,8), %edx
    00000084: 	addw	data16+16(%rip), %dx
    0000008b: 	pinsrw	$0x1, %r10d, %xmm2
    00000091: 	leal	(,%rcx,8), %r10d
    00000099: 	leal	(%rax,%rcx,2), %ecx
    0000009c: 	addl	$0x39, %edx
    0000009f: 	movd	%edi, %xmm0
    000000a3: 	movzwl	data16(%rip), %edi
    000000aa: 	leal	(%rcx,%rcx,4), %ecx
    000000ad: 	movzwl	%dx, %eax
    000000b0: 	pinsrw	$0x1, %r9d, %xmm0
    000000b6: 	punpckldq	%xmm2, %xmm1
    000000ba: 	movd	%r8d, %xmm2
    000000bf: 	addw	data16+18(%rip), %cx
    000000c6: 	punpckldq	%xmm3, %xmm0
    000000ca: 	leal	(%rsi,%rsi), %r9d
    000000ce: 	movdqa	%xmm2, %xmm4
    000000d2: 	addl	$0x37, %ecx
    000000d5: 	punpcklqdq	%xmm0, %xmm1
    000000d9: 	movd	%edi, %xmm0
    000000dd: 	shll	$0x10, %ecx
    000000e0: 	movzwl	data16+12(%rip), %edi
    000000e7: 	movzwl	data16+20(%rip), %edx
    000000ee: 	pinsrw	$0x1, %r10d, %xmm0
    000000f4: 	orl	%ecx, %eax
    000000f6: 	pinsrw	$0x1, data16+6(%rip), %xmm4
    000000ff: 	pinsrw	$0x1, data16+10(%rip), %xmm2
    00000108: 	movd	%edi, %xmm3
    0000010c: 	movl	%eax, data16+16(%rip)
    00000112: 	pinsrw	$0x1, %r9d, %xmm3
    00000118: 	punpckldq	%xmm4, %xmm0
    0000011c: 	leal	0x3c(%rdx,%rsi,4), %esi
    00000120: 	punpckldq	%xmm3, %xmm2
    00000124: 	movw	%si, data16+20(%rip)
    0000012b: 	punpcklqdq	%xmm2, %xmm0
    0000012f: 	paddw	%xmm1, %xmm0
    00000133: 	paddw	DATAat0x17d90(%rip), %xmm0
    0000013b: 	movaps	%xmm0, data16(%rip)
.Ltmp223:
    00000142: 	movq	%rbp, %rsi
    00000145: 	leaq	data16(%rip), %rdi
    0000014c: 	callq	_Z12check11_sumsIsEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 332
    00000151: 	movq	%rbp, %rdi
    00000154: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 340
    00000159: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000160: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000167: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016e: 	je	.Ltmp224 # Offset: 366
.Ltmp225:
    00000170: 	movq	-0x20(%rax), %rbp
    00000174: 	callq	clock@PLT # Offset: 372
    00000179: 	pxor	%xmm0, %xmm0
    0000017d: 	movq	%rax, end_time(%rip)
    00000184: 	movq	%rbp, %rdi
    00000187: 	popq	%rbp
    00000188: 	subq	start_time(%rip), %rax
    0000018f: 	cvtsi2sd	%rax, %xmm0
    00000194: 	divsd	DATAat0x17ca0(%rip), %xmm0
    0000019c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 412
    000001a1: 	nopl	(%rax) # Size: 7
.Ltmp224:
    000001a8: 	movq	-0x8(%rdx), %rax
    000001ac: 	addq	$0x200, %rax
    000001b2: 	jmp	.Ltmp225 # Offset: 434
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_struct_globalIs11test_structIsEXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_struct_localIsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 63
  State       : disassembled
  Address     : 0x72f0
  Size        : 0x1c1
  MaxSize     : 0x1d0
  Offset      : 0x72f0
  Section     : .text
  Orc Section : .local.text._Z17test_struct_localIsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB062:
    00000000: 	endbr64
    00000004: 	pushq	%rbp
    00000005: 	movq	%rdi, %rbp
    00000008: 	pushq	%rbx
    00000009: 	subq	$0x38, %rsp
    0000000d: 	movl	init_value(%rip), %ebx
    00000013: 	movq	%fs:0x28, %rax
    0000001c: 	movq	%rax, 0x28(%rsp)
    00000021: 	xorl	%eax, %eax
    00000023: 	movd	%ebx, %xmm3
    00000027: 	movl	%ebx, %edx
    00000029: 	movzwl	%bx, %eax
    0000002c: 	movw	%bx, 0x24(%rsp)
    00000031: 	movdqa	%xmm3, %xmm0
    00000035: 	shll	$0x10, %edx
    00000038: 	movaps	%xmm3, (%rsp)
    0000003c: 	punpcklwd	%xmm3, %xmm0
    00000040: 	orl	%edx, %eax
    00000042: 	pshufd	$0x0, %xmm0, %xmm0
    00000047: 	movl	%eax, 0x20(%rsp)
    0000004b: 	movaps	%xmm0, 0x10(%rsp)
    00000050: 	callq	clock@PLT # Offset: 80
    00000055: 	movq	%rax, start_time(%rip)
    0000005c: 	movl	iterations(%rip), %eax
    00000062: 	testl	%eax, %eax
    00000064: 	jle	.Ltmp226 # Offset: 100
    0000006a: 	subl	$0x1, %eax
    0000006d: 	movdqa	(%rsp), %xmm3
    00000072: 	movl	%eax, %r8d
    00000075: 	leal	(%rax,%rax,4), %esi
    00000078: 	leal	(,%rax,8), %ecx
    0000007f: 	leal	(%rcx,%rax), %r9d
    00000083: 	shll	$0x4, %r8d
    00000087: 	movdqa	%xmm3, %xmm4
    0000008b: 	subl	%eax, %ecx
    0000008d: 	subl	%eax, %r8d
    00000090: 	movdqa	%xmm3, %xmm1
    00000094: 	leal	(%rax,%rcx,8), %ecx
    00000097: 	leal	0x3c(%rbx,%r8,4), %edx
    0000009c: 	movd	%r8d, %xmm2
    000000a1: 	leal	(,%rsi,4), %r10d
    000000a9: 	addl	%r8d, %r8d
    000000ac: 	movw	%dx, 0x24(%rsp)
    000000b1: 	leal	(%rax,%rax,2), %edx
    000000b4: 	leal	0x39(%rcx,%rbx), %ecx
    000000b8: 	pinsrw	$0x1, %ebx, %xmm2
    000000bd: 	leal	(%rax,%rdx,4), %edx
    000000c0: 	pinsrw	$0x1, %r10d, %xmm4
    000000c6: 	movzwl	%cx, %ecx
    000000c9: 	shll	$0x2, %edx
    000000cc: 	pinsrw	$0x1, %r9d, %xmm1
    000000d2: 	leal	(,%r9,4), %edi
    000000da: 	movd	%edx, %xmm0
    000000de: 	punpckldq	%xmm2, %xmm1
    000000e2: 	leal	(,%rsi,8), %edx
    000000e9: 	pinsrw	$0x1, %ebx, %xmm0
    000000ee: 	leal	(%rax,%rsi,2), %esi
    000000f1: 	movd	%edi, %xmm2
    000000f5: 	punpckldq	%xmm4, %xmm0
    000000f9: 	leal	(%rsi,%rsi,4), %esi
    000000fc: 	pinsrw	$0x1, %ebx, %xmm2
    00000101: 	punpcklqdq	%xmm1, %xmm0
    00000105: 	movdqa	%xmm3, %xmm1
    00000109: 	leal	0x37(%rsi,%rbx), %esi
    0000010d: 	pinsrw	$0x1, %edx, %xmm1
    00000112: 	pinsrw	$0x1, %r8d, %xmm3
    00000118: 	shll	$0x10, %esi
    0000011b: 	punpckldq	%xmm2, %xmm1
    0000011f: 	punpckldq	%xmm3, %xmm2
    00000123: 	orl	%esi, %ecx
    00000125: 	punpcklqdq	%xmm2, %xmm1
    00000129: 	movl	%ecx, 0x20(%rsp)
    0000012d: 	paddw	%xmm1, %xmm0
    00000131: 	paddw	DATAat0x17d90(%rip), %xmm0
    00000139: 	movaps	%xmm0, 0x10(%rsp)
.Ltmp226:
    0000013e: 	leaq	0x10(%rsp), %rdi
    00000143: 	movq	%rbp, %rsi
    00000146: 	callq	_Z12check11_sumsIsEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 326
    0000014b: 	movq	%rbp, %rdi
    0000014e: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 334
    00000153: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000015a: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000161: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000168: 	je	.Ltmp227 # Offset: 360
.Ltmp229:
    0000016a: 	movq	-0x20(%rax), %rbp
    0000016e: 	callq	clock@PLT # Offset: 366
    00000173: 	movq	%rax, end_time(%rip)
    0000017a: 	movq	0x28(%rsp), %rdx
    0000017f: 	subq	%fs:0x28, %rdx
    00000188: 	jne	.Ltmp228 # Offset: 392
    0000018a: 	subq	start_time(%rip), %rax
    00000191: 	pxor	%xmm0, %xmm0
    00000195: 	movq	%rbp, %rdi
    00000198: 	cvtsi2sd	%rax, %xmm0
    0000019d: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001a5: 	addq	$0x38, %rsp
    000001a9: 	popq	%rbx
    000001aa: 	popq	%rbp
    000001ab: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 427
.Ltmp227:
    000001b0: 	movq	-0x8(%rdx), %rax
    000001b4: 	addq	$0x200, %rax
    000001ba: 	jmp	.Ltmp229 # Offset: 442
.Ltmp228:
    000001bc: 	callq	__stack_chk_fail@PLT # Offset: 444
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_struct_localIsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z15test_struct_argIsEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 64
  State       : disassembled
  Address     : 0x74c0
  Size        : 0x194
  MaxSize     : 0x1a0
  Offset      : 0x74c0
  Section     : .text
  Orc Section : .local.text._Z15test_struct_argIsEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB063:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rsi, %r12
    00000009: 	pushq	%rbp
    0000000a: 	movq	%rdi, %rbp
    0000000d: 	subq	$0x8, %rsp
    00000011: 	callq	clock@PLT # Offset: 17
    00000016: 	movq	%rax, start_time(%rip)
    0000001d: 	movl	iterations(%rip), %eax
    00000023: 	testl	%eax, %eax
    00000025: 	jle	.Ltmp230 # Offset: 37
    0000002b: 	subl	$0x1, %eax
    0000002e: 	movzwl	0x14(%rbp), %edi
    00000032: 	leal	(%rax,%rax,2), %edx
    00000035: 	movl	%eax, %r9d
    00000038: 	leal	(%rax,%rax,4), %ecx
    0000003b: 	leal	(%rax,%rdx,4), %edx
    0000003e: 	shll	$0x4, %r9d
    00000042: 	leal	(,%rax,8), %esi
    00000049: 	shll	$0x2, %edx
    0000004c: 	subl	%eax, %r9d
    0000004f: 	leal	(%rsi,%rax), %r10d
    00000053: 	subl	%eax, %esi
    00000055: 	movd	%edx, %xmm1
    00000059: 	movzwl	0x4(%rbp), %edx
    0000005d: 	pinsrw	$0x1, 0x2(%rbp), %xmm1
    00000063: 	leal	(,%rcx,4), %r11d
    0000006b: 	movd	%r9d, %xmm3
    00000070: 	pinsrw	$0x1, 0xe(%rbp), %xmm3
    00000076: 	leal	0x3c(%rdi,%r9,4), %edi
    0000007b: 	addl	%r9d, %r9d
    0000007e: 	movd	%edx, %xmm2
    00000082: 	movzwl	0x8(%rbp), %edx
    00000086: 	leal	(,%r10,4), %r8d
    0000008e: 	movw	%di, 0x14(%rbp)
    00000092: 	pinsrw	$0x1, %r11d, %xmm2
    00000098: 	movd	%edx, %xmm0
    0000009c: 	movzwl	(%rbp), %edx
    000000a0: 	punpckldq	%xmm2, %xmm1
    000000a4: 	movd	%r8d, %xmm2
    000000a9: 	pinsrw	$0x1, %r10d, %xmm0
    000000af: 	movdqa	%xmm2, %xmm4
    000000b3: 	leal	(,%rcx,8), %r10d
    000000bb: 	punpckldq	%xmm3, %xmm0
    000000bf: 	pinsrw	$0x1, 0x6(%rbp), %xmm4
    000000c5: 	pinsrw	$0x1, 0xa(%rbp), %xmm2
    000000cb: 	punpcklqdq	%xmm0, %xmm1
    000000cf: 	movd	%edx, %xmm0
    000000d3: 	movzwl	0xc(%rbp), %edx
    000000d7: 	leal	(%rax,%rcx,2), %ecx
    000000da: 	pinsrw	$0x1, %r10d, %xmm0
    000000e0: 	leal	(%rcx,%rcx,4), %ecx
    000000e3: 	leal	(%rax,%rsi,8), %eax
    000000e6: 	addw	0x12(%rbp), %cx
    000000ea: 	movd	%edx, %xmm3
    000000ee: 	addw	0x10(%rbp), %ax
    000000f2: 	punpckldq	%xmm4, %xmm0
    000000f6: 	addl	$0x37, %ecx
    000000f9: 	pinsrw	$0x1, %r9d, %xmm3
    000000ff: 	addl	$0x39, %eax
    00000102: 	movw	%cx, 0x12(%rbp)
    00000106: 	punpckldq	%xmm3, %xmm2
    0000010a: 	movw	%ax, 0x10(%rbp)
    0000010e: 	punpcklqdq	%xmm2, %xmm0
    00000112: 	paddw	%xmm1, %xmm0
    00000116: 	paddw	DATAat0x17d90(%rip), %xmm0
    0000011e: 	movups	%xmm0, (%rbp)
.Ltmp230:
    00000122: 	movq	%r12, %rsi
    00000125: 	movq	%rbp, %rdi
    00000128: 	callq	_Z12check11_sumsIsEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 296
    0000012d: 	movq	%r12, %rdi
    00000130: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 304
    00000135: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000013c: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000143: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000014a: 	je	.Ltmp231 # Offset: 330
.Ltmp232:
    0000014c: 	movq	-0x20(%rax), %rbp
    00000150: 	callq	clock@PLT # Offset: 336
    00000155: 	pxor	%xmm0, %xmm0
    00000159: 	movq	%rax, end_time(%rip)
    00000160: 	subq	start_time(%rip), %rax
    00000167: 	movq	%rbp, %rdi
    0000016a: 	cvtsi2sd	%rax, %xmm0
    0000016f: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000177: 	addq	$0x8, %rsp
    0000017b: 	popq	%rbp
    0000017c: 	popq	%r12
    0000017e: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 382
    00000183: 	nopl	(%rax,%rax) # Size: 5
.Ltmp231:
    00000188: 	movq	-0x8(%rdx), %rax
    0000018c: 	addq	$0x200, %rax
    00000192: 	jmp	.Ltmp232 # Offset: 402
DWARF CFI Instructions:
    <empty>
End of Function "_Z15test_struct_argIsEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_struct_local1IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 65
  State       : disassembled
  Address     : 0x7660
  Size        : 0x277
  MaxSize     : 0x280
  Offset      : 0x7660
  Section     : .text
  Orc Section : .local.text._Z18test_struct_local1IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB064:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x68, %rsp
    00000011: 	movl	init_value(%rip), %ebx
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x58(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	movd	%ebx, %xmm2
    0000002b: 	pshufd	$0xe0, %xmm2, %xmm0
    00000030: 	movq	%xmm0, 0x8(%rsp)
    00000036: 	callq	clock@PLT # Offset: 54
    0000003b: 	movq	0x8(%rsp), %xmm0
    00000041: 	movq	%rax, start_time(%rip)
    00000048: 	movl	iterations(%rip), %eax
    0000004e: 	testl	%eax, %eax
    00000050: 	jle	.Ltmp233 # Offset: 80
    00000056: 	imull	$0x39, %eax, %r11d
    0000005a: 	movl	%ebx, %edx
    0000005c: 	leal	(%rax,%rax,8), %esi
    0000005f: 	imull	$0x34, %eax, %ecx
    00000062: 	movd	%edx, %xmm4
    00000066: 	leal	(%rdx,%rsi,4), %r8d
    0000006a: 	addl	%edx, %esi
    0000006c: 	imull	$0x1e, %eax, %edi
    0000006f: 	pshufd	$0xe0, %xmm4, %xmm1
    00000074: 	movd	%r11d, %xmm0
    00000079: 	imull	$0x37, %eax, %r11d
    0000007d: 	addl	%ecx, %ebx
    0000007f: 	leal	(%rax,%rax,4), %ecx
    00000082: 	leal	(%rdx,%rcx,8), %r10d
    00000086: 	leal	(%rdx,%rcx,4), %r9d
    0000008a: 	movl	%eax, %ecx
    0000008c: 	addl	%edx, %edi
    0000008e: 	shll	$0x4, %ecx
    00000091: 	movd	%r11d, %xmm3
    00000096: 	subl	%eax, %ecx
    00000098: 	imull	$0x3c, %eax, %eax
    0000009b: 	punpckldq	%xmm3, %xmm0
    0000009f: 	paddd	%xmm1, %xmm0
    000000a3: 	addl	%edx, %ecx
    000000a5: 	addl	%edx, %eax
.Ltmp244:
    000000a7: 	movl	%esi, 0x34(%rsp)
    000000ab: 	movq	%rbp, %rsi
    000000ae: 	movl	%edi, 0x3c(%rsp)
    000000b2: 	leaq	0x20(%rsp), %rdi
    000000b7: 	movl	%ebx, 0x20(%rsp)
    000000bb: 	movl	%eax, 0x48(%rsp)
    000000bf: 	movl	%r10d, 0x24(%rsp)
    000000c4: 	movl	%r8d, 0x28(%rsp)
    000000c9: 	movl	%r9d, 0x2c(%rsp)
    000000ce: 	movl	%r8d, 0x30(%rsp)
    000000d3: 	movl	%ecx, 0x38(%rsp)
    000000d7: 	movq	%xmm0, 0x40(%rsp)
    000000dd: 	callq	_Z12check11_sumsIiEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 221
    000000e2: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000e9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000f0: 	subq	$0x20, %rax
    000000f4: 	cmpq	%rax, %rbx
    000000f7: 	je	.Ltmp234 # Offset: 247
    000000fd: 	leaq	0x10(%rbx), %rdi
    00000101: 	movq	0x8(%rbp), %r12
    00000105: 	movq	%rdi, (%rbx)
    00000108: 	movq	(%rbp), %r13
    0000010c: 	movq	%r13, %rax
    0000010f: 	addq	%r12, %rax
    00000112: 	je	.Ltmp235 # Offset: 274
    00000114: 	testq	%r13, %r13
    00000117: 	je	.Ltmp236 # Offset: 279
.Ltmp235:
    0000011d: 	movq	%r12, 0x18(%rsp)
    00000122: 	cmpq	$0xf, %r12
    00000126: 	ja	.Ltmp237 # Offset: 294
    0000012c: 	cmpq	$0x1, %r12
    00000130: 	jne	.Ltmp238 # Offset: 304
    00000136: 	movzbl	(%r13), %eax
    0000013b: 	movb	%al, 0x10(%rbx)
.Ltmp241:
    0000013e: 	movq	%r12, 0x8(%rbx)
    00000142: 	movb	$0x0, (%rdi,%r12)
    00000147: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000014e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000155: 	addq	$0x20, %rax
    00000159: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000160: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000167: 	je	.Ltmp239 # Offset: 359
.Ltmp242:
    0000016d: 	movq	-0x20(%rax), %rbp
    00000171: 	callq	clock@PLT # Offset: 369
    00000176: 	movq	%rax, end_time(%rip)
    0000017d: 	movq	0x58(%rsp), %rdx
    00000182: 	subq	%fs:0x28, %rdx
    0000018b: 	jne	.Ltmp240 # Offset: 395
    00000191: 	subq	start_time(%rip), %rax
    00000198: 	pxor	%xmm0, %xmm0
    0000019c: 	movq	%rbp, %rdi
    0000019f: 	cvtsi2sd	%rax, %xmm0
    000001a4: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001ac: 	addq	$0x68, %rsp
    000001b0: 	popq	%rbx
    000001b1: 	popq	%rbp
    000001b2: 	popq	%r12
    000001b4: 	popq	%r13
    000001b6: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 438
    000001bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp237:
    000001c0: 	movq	%rbx, %rdi
    000001c3: 	leaq	0x18(%rsp), %rsi
    000001c8: 	xorl	%edx, %edx
    000001ca: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 458
    000001cf: 	movq	%rax, (%rbx)
    000001d2: 	movq	%rax, %rdi
    000001d5: 	movq	0x18(%rsp), %rax
    000001da: 	movq	%rax, 0x10(%rbx)
.Ltmp243:
    000001de: 	movq	%r12, %rdx
    000001e1: 	movq	%r13, %rsi
    000001e4: 	callq	memcpy@PLT # Offset: 484
    000001e9: 	movq	0x18(%rsp), %r12
    000001ee: 	movq	(%rbx), %rdi
    000001f1: 	jmp	.Ltmp241 # Offset: 497
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp234:
    00000200: 	movq	%rbp, %rsi
    00000203: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000020a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 522
    0000020f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000216: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000021d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000224: 	jne	.Ltmp242 # Offset: 548
.Ltmp239:
    0000022a: 	movq	-0x8(%rdx), %rax
    0000022e: 	addq	$0x200, %rax
    00000234: 	jmp	.Ltmp242 # Offset: 564
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp238:
    00000240: 	testq	%r12, %r12
    00000243: 	je	.Ltmp241 # Offset: 579
    00000249: 	jmp	.Ltmp243 # Offset: 585
    0000024b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp233:
    00000250: 	movl	%ebx, %eax
    00000252: 	movl	%ebx, %edi
    00000254: 	movl	%ebx, %ecx
    00000256: 	movl	%ebx, %esi
    00000258: 	movl	%ebx, %r9d
    0000025b: 	movl	%ebx, %r8d
    0000025e: 	movl	%ebx, %r10d
    00000261: 	jmp	.Ltmp244 # Offset: 609
.Ltmp236:
    00000266: 	leaq	DATAat0x17018(%rip), %rdi
    0000026d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 621
.Ltmp240:
    00000272: 	callq	__stack_chk_fail@PLT # Offset: 626
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_struct_local1IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_struct_local1IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 66
  State       : disassembled
  Address     : 0x78e0
  Size        : 0x2d9
  MaxSize     : 0x2e0
  Offset      : 0x78e0
  Section     : .text
  Orc Section : .local.text._Z18test_struct_local1IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB065:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x58, %rsp
    00000011: 	movl	init_value(%rip), %r12d
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x48(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	movd	%r12d, %xmm2
    0000002d: 	movl	%r12d, %eax
    00000030: 	movzwl	%r12w, %ebx
    00000034: 	movdqa	%xmm2, %xmm0
    00000038: 	shll	$0x10, %eax
    0000003b: 	movaps	%xmm2, 0x10(%rsp)
    00000040: 	punpcklwd	%xmm2, %xmm0
    00000044: 	orl	%eax, %ebx
    00000046: 	pshufd	$0x0, %xmm0, %xmm0
    0000004b: 	movaps	%xmm0, (%rsp)
    0000004f: 	callq	clock@PLT # Offset: 79
    00000054: 	movl	iterations(%rip), %edx
    0000005a: 	movdqa	(%rsp), %xmm0
    0000005f: 	movq	%rax, start_time(%rip)
    00000066: 	testl	%edx, %edx
    00000068: 	jle	.Ltmp245 # Offset: 104
    0000006e: 	subl	$0x1, %edx
    00000071: 	movdqa	0x10(%rsp), %xmm2
    00000077: 	leal	(,%rdx,8), %eax
    0000007e: 	leal	(%rdx,%rdx,2), %ecx
    00000081: 	movl	%edx, %r13d
    00000084: 	leal	(%rax,%rdx), %r8d
    00000088: 	leal	(%rdx,%rcx,4), %ecx
    0000008b: 	shll	$0x4, %r13d
    0000008f: 	subl	%edx, %eax
    00000091: 	leal	(%rdx,%rdx,4), %esi
    00000094: 	shll	$0x2, %ecx
    00000097: 	leal	(%rdx,%rax,8), %ebx
    0000009a: 	subl	%edx, %r13d
    0000009d: 	leal	(,%r8,4), %edi
    000000a5: 	leal	(,%rsi,8), %r10d
    000000ad: 	movd	%ecx, %xmm1
    000000b1: 	movd	%edi, %xmm0
    000000b5: 	pinsrw	$0x1, %r10d, %xmm1
    000000bb: 	leal	(%r13,%r13), %ecx
    000000c0: 	leal	(,%rsi,4), %r9d
    000000c8: 	movdqa	%xmm0, %xmm4
    000000cc: 	movdqa	%xmm0, %xmm3
    000000d0: 	movdqa	%xmm2, %xmm0
    000000d4: 	pinsrw	$0x1, %r9d, %xmm4
    000000da: 	pinsrw	$0x1, %r12d, %xmm3
    000000e0: 	pinsrw	$0x1, %r12d, %xmm0
    000000e6: 	punpckldq	%xmm4, %xmm1
    000000ea: 	pinsrw	$0x1, %r8d, %xmm2
    000000f0: 	punpckldq	%xmm0, %xmm3
    000000f4: 	leal	(%rdx,%rsi,2), %esi
    000000f7: 	punpckldq	%xmm0, %xmm0
    000000fb: 	punpcklqdq	%xmm3, %xmm1
    000000ff: 	movd	%r13d, %xmm3
    00000104: 	leal	(%rsi,%rsi,4), %esi
    00000107: 	pinsrw	$0x1, %ecx, %xmm3
    0000010c: 	leal	0x39(%rbx,%r12), %ebx
    00000111: 	leal	0x37(%rsi,%r12), %esi
    00000116: 	punpckldq	%xmm3, %xmm2
    0000011a: 	shll	$0x10, %esi
    0000011d: 	movzwl	%bx, %ebx
    00000120: 	leal	0x3c(%r12,%r13,4), %r13d
    00000125: 	punpcklqdq	%xmm2, %xmm0
    00000129: 	orl	%esi, %ebx
    0000012b: 	paddw	%xmm1, %xmm0
    0000012f: 	paddw	DATAat0x17d90(%rip), %xmm0
.Ltmp256:
    00000137: 	leaq	0x30(%rsp), %rdi
    0000013c: 	movq	%rbp, %rsi
    0000013f: 	movl	%ebx, 0x40(%rsp)
    00000143: 	movw	%r13w, 0x44(%rsp)
    00000149: 	movaps	%xmm0, 0x30(%rsp)
    0000014e: 	callq	_Z12check11_sumsIsEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 334
    00000153: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000015a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000161: 	subq	$0x20, %rax
    00000165: 	cmpq	%rax, %rbx
    00000168: 	je	.Ltmp246 # Offset: 360
    0000016e: 	leaq	0x10(%rbx), %rdi
    00000172: 	movq	0x8(%rbp), %r12
    00000176: 	movq	%rdi, (%rbx)
    00000179: 	movq	(%rbp), %r13
    0000017d: 	movq	%r13, %rax
    00000180: 	addq	%r12, %rax
    00000183: 	je	.Ltmp247 # Offset: 387
    00000185: 	testq	%r13, %r13
    00000188: 	je	.Ltmp248 # Offset: 392
.Ltmp247:
    0000018e: 	movq	%r12, 0x28(%rsp)
    00000193: 	cmpq	$0xf, %r12
    00000197: 	ja	.Ltmp249 # Offset: 407
    0000019d: 	cmpq	$0x1, %r12
    000001a1: 	jne	.Ltmp250 # Offset: 417
    000001a7: 	movzbl	(%r13), %eax
    000001ac: 	movb	%al, 0x10(%rbx)
.Ltmp253:
    000001af: 	movq	%r12, 0x8(%rbx)
    000001b3: 	movb	$0x0, (%rdi,%r12)
    000001b8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001bf: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001c6: 	addq	$0x20, %rax
    000001ca: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001d1: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001d8: 	je	.Ltmp251 # Offset: 472
.Ltmp254:
    000001de: 	movq	-0x20(%rax), %rbp
    000001e2: 	callq	clock@PLT # Offset: 482
    000001e7: 	movq	%rax, end_time(%rip)
    000001ee: 	movq	0x48(%rsp), %rdx
    000001f3: 	subq	%fs:0x28, %rdx
    000001fc: 	jne	.Ltmp252 # Offset: 508
    00000202: 	subq	start_time(%rip), %rax
    00000209: 	pxor	%xmm0, %xmm0
    0000020d: 	movq	%rbp, %rdi
    00000210: 	cvtsi2sd	%rax, %xmm0
    00000215: 	divsd	DATAat0x17ca0(%rip), %xmm0
    0000021d: 	addq	$0x58, %rsp
    00000221: 	popq	%rbx
    00000222: 	popq	%rbp
    00000223: 	popq	%r12
    00000225: 	popq	%r13
    00000227: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 551
    0000022c: 	nopl	(%rax) # Size: 4
.Ltmp249:
    00000230: 	movq	%rbx, %rdi
    00000233: 	leaq	0x28(%rsp), %rsi
    00000238: 	xorl	%edx, %edx
    0000023a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 570
    0000023f: 	movq	%rax, (%rbx)
    00000242: 	movq	%rax, %rdi
    00000245: 	movq	0x28(%rsp), %rax
    0000024a: 	movq	%rax, 0x10(%rbx)
.Ltmp255:
    0000024e: 	movq	%r12, %rdx
    00000251: 	movq	%r13, %rsi
    00000254: 	callq	memcpy@PLT # Offset: 596
    00000259: 	movq	0x28(%rsp), %r12
    0000025e: 	movq	(%rbx), %rdi
    00000261: 	jmp	.Ltmp253 # Offset: 609
    00000266: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp246:
    00000270: 	movq	%rbp, %rsi
    00000273: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000027a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 634
    0000027f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000286: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000028d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000294: 	jne	.Ltmp254 # Offset: 660
.Ltmp251:
    0000029a: 	movq	-0x8(%rdx), %rax
    0000029e: 	addq	$0x200, %rax
    000002a4: 	jmp	.Ltmp254 # Offset: 676
    000002a9: 	nopl	(%rax) # Size: 7
.Ltmp250:
    000002b0: 	testq	%r12, %r12
    000002b3: 	je	.Ltmp253 # Offset: 691
    000002b9: 	jmp	.Ltmp255 # Offset: 697
    000002bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp245:
    000002c0: 	movl	%r12d, %r13d
    000002c3: 	jmp	.Ltmp256 # Offset: 707
.Ltmp248:
    000002c8: 	leaq	DATAat0x17018(%rip), %rdi
    000002cf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 719
.Ltmp252:
    000002d4: 	callq	__stack_chk_fail@PLT # Offset: 724
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_struct_local1IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_struct_local2IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 67
  State       : disassembled
  Address     : 0x7bc0
  Size        : 0x2d9
  MaxSize     : 0x2e0
  Offset      : 0x7bc0
  Section     : .text
  Orc Section : .local.text._Z18test_struct_local2IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB066:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x58, %rsp
    00000011: 	movl	init_value(%rip), %r12d
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x48(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	movd	%r12d, %xmm2
    0000002d: 	movl	%r12d, %eax
    00000030: 	movzwl	%r12w, %ebx
    00000034: 	movdqa	%xmm2, %xmm0
    00000038: 	shll	$0x10, %eax
    0000003b: 	movaps	%xmm2, 0x10(%rsp)
    00000040: 	punpcklwd	%xmm2, %xmm0
    00000044: 	orl	%eax, %ebx
    00000046: 	pshufd	$0x0, %xmm0, %xmm0
    0000004b: 	movaps	%xmm0, (%rsp)
    0000004f: 	callq	clock@PLT # Offset: 79
    00000054: 	movl	iterations(%rip), %edx
    0000005a: 	movdqa	(%rsp), %xmm0
    0000005f: 	movq	%rax, start_time(%rip)
    00000066: 	testl	%edx, %edx
    00000068: 	jle	.Ltmp257 # Offset: 104
    0000006e: 	subl	$0x1, %edx
    00000071: 	movdqa	0x10(%rsp), %xmm2
    00000077: 	movl	%edx, %r9d
    0000007a: 	leal	(%rdx,%rdx,2), %ecx
    0000007d: 	leal	(%rdx,%rdx,4), %esi
    00000080: 	leal	(%rdx,%rcx,4), %ecx
    00000083: 	movdqa	%xmm2, %xmm4
    00000087: 	shll	$0x4, %r9d
    0000008b: 	movdqa	%xmm2, %xmm1
    0000008f: 	subl	%edx, %r9d
    00000092: 	leal	(,%rdx,8), %eax
    00000099: 	shll	$0x2, %ecx
    0000009c: 	leal	(,%rsi,4), %r11d
    000000a4: 	leal	(%rax,%rdx), %r10d
    000000a8: 	movd	%ecx, %xmm0
    000000ac: 	movd	%r9d, %xmm3
    000000b1: 	subl	%edx, %eax
    000000b3: 	pinsrw	$0x1, %r12d, %xmm3
    000000b9: 	pinsrw	$0x1, %r12d, %xmm0
    000000bf: 	pinsrw	$0x1, %r11d, %xmm4
    000000c5: 	pinsrw	$0x1, %r10d, %xmm1
    000000cb: 	punpckldq	%xmm4, %xmm0
    000000cf: 	leal	(%rdx,%rax,8), %ebx
    000000d2: 	punpckldq	%xmm3, %xmm1
    000000d6: 	leal	0x3c(%r12,%r9,4), %edi
    000000db: 	addl	%r9d, %r9d
    000000de: 	punpcklqdq	%xmm1, %xmm0
    000000e2: 	leal	(,%rsi,8), %ecx
    000000e9: 	movdqa	%xmm2, %xmm1
    000000ed: 	leal	(,%r10,4), %r8d
    000000f5: 	pinsrw	$0x1, %ecx, %xmm1
    000000fa: 	leal	(%rdx,%rsi,2), %esi
    000000fd: 	movd	%r8d, %xmm3
    00000102: 	pinsrw	$0x1, %r9d, %xmm2
    00000108: 	leal	(%rsi,%rsi,4), %esi
    0000010b: 	pinsrw	$0x1, %r12d, %xmm3
    00000111: 	leal	0x39(%rbx,%r12), %ebx
    00000116: 	leal	0x37(%rsi,%r12), %esi
    0000011b: 	punpckldq	%xmm3, %xmm1
    0000011f: 	punpckldq	%xmm2, %xmm3
    00000123: 	shll	$0x10, %esi
    00000126: 	movzwl	%bx, %ebx
    00000129: 	punpcklqdq	%xmm3, %xmm1
    0000012d: 	orl	%esi, %ebx
    0000012f: 	paddw	%xmm1, %xmm0
    00000133: 	paddw	DATAat0x17d90(%rip), %xmm0
.Ltmp268:
    0000013b: 	movw	%di, 0x44(%rsp)
    00000140: 	movq	%rbp, %rsi
    00000143: 	leaq	0x30(%rsp), %rdi
    00000148: 	movl	%ebx, 0x40(%rsp)
    0000014c: 	movaps	%xmm0, 0x30(%rsp)
    00000151: 	callq	_Z12check11_sumsIsEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 337
    00000156: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000015d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000164: 	subq	$0x20, %rax
    00000168: 	cmpq	%rax, %rbx
    0000016b: 	je	.Ltmp258 # Offset: 363
    00000171: 	leaq	0x10(%rbx), %rdi
    00000175: 	movq	0x8(%rbp), %r12
    00000179: 	movq	%rdi, (%rbx)
    0000017c: 	movq	(%rbp), %r13
    00000180: 	movq	%r13, %rax
    00000183: 	addq	%r12, %rax
    00000186: 	je	.Ltmp259 # Offset: 390
    00000188: 	testq	%r13, %r13
    0000018b: 	je	.Ltmp260 # Offset: 395
.Ltmp259:
    00000191: 	movq	%r12, 0x28(%rsp)
    00000196: 	cmpq	$0xf, %r12
    0000019a: 	ja	.Ltmp261 # Offset: 410
    000001a0: 	cmpq	$0x1, %r12
    000001a4: 	jne	.Ltmp262 # Offset: 420
    000001aa: 	movzbl	(%r13), %eax
    000001af: 	movb	%al, 0x10(%rbx)
.Ltmp265:
    000001b2: 	movq	%r12, 0x8(%rbx)
    000001b6: 	movb	$0x0, (%rdi,%r12)
    000001bb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001c2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001c9: 	addq	$0x20, %rax
    000001cd: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001d4: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001db: 	je	.Ltmp263 # Offset: 475
.Ltmp266:
    000001e1: 	movq	-0x20(%rax), %rbp
    000001e5: 	callq	clock@PLT # Offset: 485
    000001ea: 	movq	%rax, end_time(%rip)
    000001f1: 	movq	0x48(%rsp), %rdx
    000001f6: 	subq	%fs:0x28, %rdx
    000001ff: 	jne	.Ltmp264 # Offset: 511
    00000205: 	subq	start_time(%rip), %rax
    0000020c: 	pxor	%xmm0, %xmm0
    00000210: 	movq	%rbp, %rdi
    00000213: 	cvtsi2sd	%rax, %xmm0
    00000218: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000220: 	addq	$0x58, %rsp
    00000224: 	popq	%rbx
    00000225: 	popq	%rbp
    00000226: 	popq	%r12
    00000228: 	popq	%r13
    0000022a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 554
    0000022f: 	nop # Size: 1
.Ltmp261:
    00000230: 	movq	%rbx, %rdi
    00000233: 	leaq	0x28(%rsp), %rsi
    00000238: 	xorl	%edx, %edx
    0000023a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 570
    0000023f: 	movq	%rax, (%rbx)
    00000242: 	movq	%rax, %rdi
    00000245: 	movq	0x28(%rsp), %rax
    0000024a: 	movq	%rax, 0x10(%rbx)
.Ltmp267:
    0000024e: 	movq	%r12, %rdx
    00000251: 	movq	%r13, %rsi
    00000254: 	callq	memcpy@PLT # Offset: 596
    00000259: 	movq	0x28(%rsp), %r12
    0000025e: 	movq	(%rbx), %rdi
    00000261: 	jmp	.Ltmp265 # Offset: 609
    00000266: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp258:
    00000270: 	movq	%rbp, %rsi
    00000273: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000027a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 634
    0000027f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000286: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000028d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000294: 	jne	.Ltmp266 # Offset: 660
.Ltmp263:
    0000029a: 	movq	-0x8(%rdx), %rax
    0000029e: 	addq	$0x200, %rax
    000002a4: 	jmp	.Ltmp266 # Offset: 676
    000002a9: 	nopl	(%rax) # Size: 7
.Ltmp262:
    000002b0: 	testq	%r12, %r12
    000002b3: 	je	.Ltmp265 # Offset: 691
    000002b9: 	jmp	.Ltmp267 # Offset: 697
    000002bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp257:
    000002c0: 	movl	%r12d, %edi
    000002c3: 	jmp	.Ltmp268 # Offset: 707
.Ltmp260:
    000002c8: 	leaq	DATAat0x17018(%rip), %rdi
    000002cf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 719
.Ltmp264:
    000002d4: 	callq	__stack_chk_fail@PLT # Offset: 724
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_struct_local2IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_struct_local1ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 68
  State       : disassembled
  Address     : 0x7ea0
  Size        : 0x281
  MaxSize     : 0x290
  Offset      : 0x7ea0
  Section     : .text
  Orc Section : .local.text._Z18test_struct_local1ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB067:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x78, %rsp
    00000011: 	movslq	init_value(%rip), %rbx
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x68(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	callq	clock@PLT # Offset: 40
    0000002d: 	movq	%rax, start_time(%rip)
    00000034: 	movl	iterations(%rip), %eax
    0000003a: 	testl	%eax, %eax
    0000003c: 	jle	.Ltmp269 # Offset: 60
    00000042: 	subl	$0x1, %eax
    00000045: 	leaq	(%rax,%rax,2), %rdx
    00000049: 	leaq	(,%rax,8), %rcx
    00000051: 	leaq	(%rax,%rdx,4), %rdx
    00000055: 	leaq	(%rax,%rax,4), %rsi
    00000059: 	leaq	0x34(%rbx,%rdx,4), %r12
    0000005e: 	leaq	(%rcx,%rax), %rdx
    00000062: 	subq	%rax, %rcx
    00000065: 	leaq	0x24(%rbx,%rdx,4), %rdi
    0000006a: 	leaq	0x9(%rbx,%rdx), %r13
    0000006f: 	movq	%rax, %rdx
    00000072: 	shlq	$0x4, %rdx
    00000076: 	leaq	(%rax,%rcx,8), %rcx
    0000007a: 	leaq	0x28(%rbx,%rsi,8), %r11
    0000007f: 	subq	%rax, %rdx
    00000082: 	leaq	(%rax,%rsi,2), %rax
    00000086: 	leaq	0x14(%rbx,%rsi,4), %r10
    0000008b: 	leaq	(%rax,%rax,4), %rax
    0000008f: 	leaq	0xf(%rbx,%rdx), %r9
    00000094: 	leaq	0x1e(%rbx,%rdx,2), %r8
    00000099: 	leaq	0x39(%rbx,%rcx), %rcx
    0000009e: 	leaq	0x37(%rbx,%rax), %rax
    000000a3: 	leaq	0x3c(%rbx,%rdx,4), %rbx
.Ltmp280:
    000000a8: 	movq	%rdi, 0x20(%rsp)
    000000ad: 	movq	%rbp, %rsi
    000000b0: 	movq	%rdi, 0x30(%rsp)
    000000b5: 	leaq	0x10(%rsp), %rdi
    000000ba: 	movq	%rax, 0x58(%rsp)
    000000bf: 	movq	%rbx, 0x60(%rsp)
    000000c4: 	movq	%r12, 0x10(%rsp)
    000000c9: 	movq	%r11, 0x18(%rsp)
    000000ce: 	movq	%r10, 0x28(%rsp)
    000000d3: 	movq	%r13, 0x38(%rsp)
    000000d8: 	movq	%r9, 0x40(%rsp)
    000000dd: 	movq	%r8, 0x48(%rsp)
    000000e2: 	movq	%rcx, 0x50(%rsp)
    000000e7: 	callq	_Z12check11_sumsImEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 231
    000000ec: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000f3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000fa: 	subq	$0x20, %rax
    000000fe: 	cmpq	%rax, %rbx
    00000101: 	je	.Ltmp270 # Offset: 257
    00000107: 	leaq	0x10(%rbx), %rdi
    0000010b: 	movq	0x8(%rbp), %r12
    0000010f: 	movq	%rdi, (%rbx)
    00000112: 	movq	(%rbp), %r13
    00000116: 	movq	%r13, %rax
    00000119: 	addq	%r12, %rax
    0000011c: 	je	.Ltmp271 # Offset: 284
    0000011e: 	testq	%r13, %r13
    00000121: 	je	.Ltmp272 # Offset: 289
.Ltmp271:
    00000127: 	movq	%r12, 0x8(%rsp)
    0000012c: 	cmpq	$0xf, %r12
    00000130: 	ja	.Ltmp273 # Offset: 304
    00000136: 	cmpq	$0x1, %r12
    0000013a: 	jne	.Ltmp274 # Offset: 314
    00000140: 	movzbl	(%r13), %eax
    00000145: 	movb	%al, 0x10(%rbx)
.Ltmp277:
    00000148: 	movq	%r12, 0x8(%rbx)
    0000014c: 	movb	$0x0, (%rdi,%r12)
    00000151: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000158: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000015f: 	addq	$0x20, %rax
    00000163: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000016a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000171: 	je	.Ltmp275 # Offset: 369
.Ltmp278:
    00000177: 	movq	-0x20(%rax), %rbp
    0000017b: 	callq	clock@PLT # Offset: 379
    00000180: 	movq	%rax, end_time(%rip)
    00000187: 	movq	0x68(%rsp), %rdx
    0000018c: 	subq	%fs:0x28, %rdx
    00000195: 	jne	.Ltmp276 # Offset: 405
    0000019b: 	subq	start_time(%rip), %rax
    000001a2: 	pxor	%xmm0, %xmm0
    000001a6: 	movq	%rbp, %rdi
    000001a9: 	cvtsi2sd	%rax, %xmm0
    000001ae: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001b6: 	addq	$0x78, %rsp
    000001ba: 	popq	%rbx
    000001bb: 	popq	%rbp
    000001bc: 	popq	%r12
    000001be: 	popq	%r13
    000001c0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 448
    000001c5: 	nopl	(%rax) # Size: 3
.Ltmp273:
    000001c8: 	movq	%rbx, %rdi
    000001cb: 	leaq	0x8(%rsp), %rsi
    000001d0: 	xorl	%edx, %edx
    000001d2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 466
    000001d7: 	movq	%rax, (%rbx)
    000001da: 	movq	%rax, %rdi
    000001dd: 	movq	0x8(%rsp), %rax
    000001e2: 	movq	%rax, 0x10(%rbx)
.Ltmp279:
    000001e6: 	movq	%r12, %rdx
    000001e9: 	movq	%r13, %rsi
    000001ec: 	callq	memcpy@PLT # Offset: 492
    000001f1: 	movq	0x8(%rsp), %r12
    000001f6: 	movq	(%rbx), %rdi
    000001f9: 	jmp	.Ltmp277 # Offset: 505
    000001fe: 	nop # Size: 2
.Ltmp270:
    00000200: 	movq	%rbp, %rsi
    00000203: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000020a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 522
    0000020f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000216: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000021d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000224: 	jne	.Ltmp278 # Offset: 548
.Ltmp275:
    0000022a: 	movq	-0x8(%rdx), %rax
    0000022e: 	addq	$0x200, %rax
    00000234: 	jmp	.Ltmp278 # Offset: 564
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp274:
    00000240: 	testq	%r12, %r12
    00000243: 	je	.Ltmp277 # Offset: 579
    00000249: 	jmp	.Ltmp279 # Offset: 585
    0000024b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp269:
    00000250: 	movq	%rbx, %rax
    00000253: 	movq	%rbx, %rcx
    00000256: 	movq	%rbx, %r8
    00000259: 	movq	%rbx, %r9
    0000025c: 	movq	%rbx, %r13
    0000025f: 	movq	%rbx, %r10
    00000262: 	movq	%rbx, %rdi
    00000265: 	movq	%rbx, %r11
    00000268: 	movq	%rbx, %r12
    0000026b: 	jmp	.Ltmp280 # Offset: 619
.Ltmp272:
    00000270: 	leaq	DATAat0x17018(%rip), %rdi
    00000277: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 631
.Ltmp276:
    0000027c: 	callq	__stack_chk_fail@PLT # Offset: 636
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_struct_local1ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_struct_local2IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 69
  State       : disassembled
  Address     : 0x8130
  Size        : 0x278
  MaxSize     : 0x280
  Offset      : 0x8130
  Section     : .text
  Orc Section : .local.text._Z18test_struct_local2IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB068:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x68, %rsp
    00000011: 	movl	init_value(%rip), %ebx
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x58(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	movd	%ebx, %xmm2
    0000002b: 	pshufd	$0xe0, %xmm2, %xmm0
    00000030: 	movq	%xmm0, 0x8(%rsp)
    00000036: 	callq	clock@PLT # Offset: 54
    0000003b: 	movq	0x8(%rsp), %xmm0
    00000041: 	movq	%rax, start_time(%rip)
    00000048: 	movl	iterations(%rip), %eax
    0000004e: 	testl	%eax, %eax
    00000050: 	jle	.Ltmp281 # Offset: 80
    00000056: 	imull	$0x34, %eax, %ecx
    00000059: 	leal	(%rax,%rax,8), %edi
    0000005c: 	movl	%ebx, %edx
    0000005e: 	leal	(%rdi,%rbx), %r9d
    00000062: 	leal	(%rax,%rax,4), %esi
    00000065: 	movd	%edx, %xmm4
    00000069: 	imull	$0x39, %eax, %r13d
    0000006d: 	leal	(%rdx,%rsi,4), %r10d
    00000071: 	pshufd	$0xe0, %xmm4, %xmm0
    00000076: 	addl	%ecx, %ebx
    00000078: 	leal	(%rdx,%rdi,4), %r8d
    0000007c: 	leal	(%rdx,%rsi,8), %r11d
    00000080: 	movl	%eax, %ecx
    00000082: 	shll	$0x4, %ecx
    00000085: 	imull	$0x3c, %eax, %esi
    00000088: 	imull	$0x1e, %eax, %edi
    0000008b: 	subl	%eax, %ecx
    0000008d: 	movd	%r13d, %xmm1
    00000092: 	imull	$0x37, %eax, %eax
    00000095: 	addl	%edx, %ecx
    00000097: 	addl	%edx, %esi
    00000099: 	addl	%edx, %edi
    0000009b: 	movd	%eax, %xmm3
    0000009f: 	punpckldq	%xmm3, %xmm1
    000000a3: 	paddd	%xmm1, %xmm0
.Ltmp292:
    000000a7: 	movl	%edi, 0x3c(%rsp)
    000000ab: 	leaq	0x20(%rsp), %rdi
    000000b0: 	movl	%esi, 0x48(%rsp)
    000000b4: 	movq	%rbp, %rsi
    000000b7: 	movl	%ebx, 0x20(%rsp)
    000000bb: 	movl	%r11d, 0x24(%rsp)
    000000c0: 	movl	%r8d, 0x28(%rsp)
    000000c5: 	movl	%r10d, 0x2c(%rsp)
    000000ca: 	movl	%r8d, 0x30(%rsp)
    000000cf: 	movl	%r9d, 0x34(%rsp)
    000000d4: 	movl	%ecx, 0x38(%rsp)
    000000d8: 	movq	%xmm0, 0x40(%rsp)
    000000de: 	callq	_Z12check11_sumsIiEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 222
    000000e3: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ea: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000f1: 	subq	$0x20, %rax
    000000f5: 	cmpq	%rax, %rbx
    000000f8: 	je	.Ltmp282 # Offset: 248
    000000fe: 	leaq	0x10(%rbx), %rdi
    00000102: 	movq	0x8(%rbp), %r12
    00000106: 	movq	%rdi, (%rbx)
    00000109: 	movq	(%rbp), %r13
    0000010d: 	movq	%r13, %rax
    00000110: 	addq	%r12, %rax
    00000113: 	je	.Ltmp283 # Offset: 275
    00000115: 	testq	%r13, %r13
    00000118: 	je	.Ltmp284 # Offset: 280
.Ltmp283:
    0000011e: 	movq	%r12, 0x18(%rsp)
    00000123: 	cmpq	$0xf, %r12
    00000127: 	ja	.Ltmp285 # Offset: 295
    0000012d: 	cmpq	$0x1, %r12
    00000131: 	jne	.Ltmp286 # Offset: 305
    00000137: 	movzbl	(%r13), %eax
    0000013c: 	movb	%al, 0x10(%rbx)
.Ltmp289:
    0000013f: 	movq	%r12, 0x8(%rbx)
    00000143: 	movb	$0x0, (%rdi,%r12)
    00000148: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000014f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000156: 	addq	$0x20, %rax
    0000015a: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000161: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000168: 	je	.Ltmp287 # Offset: 360
.Ltmp290:
    0000016e: 	movq	-0x20(%rax), %rbp
    00000172: 	callq	clock@PLT # Offset: 370
    00000177: 	movq	%rax, end_time(%rip)
    0000017e: 	movq	0x58(%rsp), %rdx
    00000183: 	subq	%fs:0x28, %rdx
    0000018c: 	jne	.Ltmp288 # Offset: 396
    00000192: 	subq	start_time(%rip), %rax
    00000199: 	pxor	%xmm0, %xmm0
    0000019d: 	movq	%rbp, %rdi
    000001a0: 	cvtsi2sd	%rax, %xmm0
    000001a5: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001ad: 	addq	$0x68, %rsp
    000001b1: 	popq	%rbx
    000001b2: 	popq	%rbp
    000001b3: 	popq	%r12
    000001b5: 	popq	%r13
    000001b7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 439
    000001bc: 	nopl	(%rax) # Size: 4
.Ltmp285:
    000001c0: 	movq	%rbx, %rdi
    000001c3: 	leaq	0x18(%rsp), %rsi
    000001c8: 	xorl	%edx, %edx
    000001ca: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 458
    000001cf: 	movq	%rax, (%rbx)
    000001d2: 	movq	%rax, %rdi
    000001d5: 	movq	0x18(%rsp), %rax
    000001da: 	movq	%rax, 0x10(%rbx)
.Ltmp291:
    000001de: 	movq	%r12, %rdx
    000001e1: 	movq	%r13, %rsi
    000001e4: 	callq	memcpy@PLT # Offset: 484
    000001e9: 	movq	0x18(%rsp), %r12
    000001ee: 	movq	(%rbx), %rdi
    000001f1: 	jmp	.Ltmp289 # Offset: 497
    000001f6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp282:
    00000200: 	movq	%rbp, %rsi
    00000203: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000020a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 522
    0000020f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000216: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000021d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000224: 	jne	.Ltmp290 # Offset: 548
.Ltmp287:
    0000022a: 	movq	-0x8(%rdx), %rax
    0000022e: 	addq	$0x200, %rax
    00000234: 	jmp	.Ltmp290 # Offset: 564
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp286:
    00000240: 	testq	%r12, %r12
    00000243: 	je	.Ltmp289 # Offset: 579
    00000249: 	jmp	.Ltmp291 # Offset: 585
    0000024b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp281:
    00000250: 	movl	%ebx, %esi
    00000252: 	movl	%ebx, %edi
    00000254: 	movl	%ebx, %ecx
    00000256: 	movl	%ebx, %r9d
    00000259: 	movl	%ebx, %r10d
    0000025c: 	movl	%ebx, %r8d
    0000025f: 	movl	%ebx, %r11d
    00000262: 	jmp	.Ltmp292 # Offset: 610
.Ltmp284:
    00000267: 	leaq	DATAat0x17018(%rip), %rdi
    0000026e: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 622
.Ltmp288:
    00000273: 	callq	__stack_chk_fail@PLT # Offset: 627
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_struct_local2IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_struct_local2ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 70
  State       : disassembled
  Address     : 0x83b0
  Size        : 0x281
  MaxSize     : 0x290
  Offset      : 0x83b0
  Section     : .text
  Orc Section : .local.text._Z18test_struct_local2ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB069:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x78, %rsp
    00000011: 	movslq	init_value(%rip), %rbx
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x68(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	callq	clock@PLT # Offset: 40
    0000002d: 	movq	%rax, start_time(%rip)
    00000034: 	movl	iterations(%rip), %eax
    0000003a: 	testl	%eax, %eax
    0000003c: 	jle	.Ltmp293 # Offset: 60
    00000042: 	subl	$0x1, %eax
    00000045: 	leaq	(%rax,%rax,2), %rdx
    00000049: 	leaq	(,%rax,8), %rcx
    00000051: 	leaq	(%rax,%rdx,4), %rdx
    00000055: 	leaq	(%rcx,%rax), %rdi
    00000059: 	subq	%rax, %rcx
    0000005c: 	leaq	0x34(%rbx,%rdx,4), %r11
    00000061: 	movq	%rax, %rdx
    00000064: 	leaq	(%rax,%rax,4), %rsi
    00000068: 	shlq	$0x4, %rdx
    0000006c: 	leaq	(%rax,%rcx,8), %rcx
    00000070: 	leaq	0x9(%rbx,%rdi), %r9
    00000075: 	subq	%rax, %rdx
    00000078: 	leaq	(%rax,%rsi,2), %rax
    0000007c: 	leaq	0x39(%rbx,%rcx), %r12
    00000081: 	leaq	(%rax,%rax,4), %rax
    00000085: 	leaq	0xf(%rbx,%rdx), %r8
    0000008a: 	leaq	0x24(%rbx,%rdi,4), %rcx
    0000008f: 	leaq	0x14(%rbx,%rsi,4), %r10
    00000094: 	leaq	0x3c(%rbx,%rdx,4), %rdi
    00000099: 	leaq	0x28(%rbx,%rsi,8), %r13
    0000009e: 	leaq	0x1e(%rbx,%rdx,2), %rdx
    000000a3: 	leaq	0x37(%rbx,%rax), %rbx
.Ltmp304:
    000000a8: 	movq	%rdi, 0x60(%rsp)
    000000ad: 	movq	%rbp, %rsi
    000000b0: 	leaq	0x10(%rsp), %rdi
    000000b5: 	movq	%rbx, 0x58(%rsp)
    000000ba: 	movq	%r11, 0x10(%rsp)
    000000bf: 	movq	%r13, 0x18(%rsp)
    000000c4: 	movq	%rcx, 0x20(%rsp)
    000000c9: 	movq	%r10, 0x28(%rsp)
    000000ce: 	movq	%rcx, 0x30(%rsp)
    000000d3: 	movq	%r9, 0x38(%rsp)
    000000d8: 	movq	%r8, 0x40(%rsp)
    000000dd: 	movq	%rdx, 0x48(%rsp)
    000000e2: 	movq	%r12, 0x50(%rsp)
    000000e7: 	callq	_Z12check11_sumsImEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 231
    000000ec: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000f3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000fa: 	subq	$0x20, %rax
    000000fe: 	cmpq	%rax, %rbx
    00000101: 	je	.Ltmp294 # Offset: 257
    00000107: 	leaq	0x10(%rbx), %rdi
    0000010b: 	movq	0x8(%rbp), %r12
    0000010f: 	movq	%rdi, (%rbx)
    00000112: 	movq	(%rbp), %r13
    00000116: 	movq	%r13, %rax
    00000119: 	addq	%r12, %rax
    0000011c: 	je	.Ltmp295 # Offset: 284
    0000011e: 	testq	%r13, %r13
    00000121: 	je	.Ltmp296 # Offset: 289
.Ltmp295:
    00000127: 	movq	%r12, 0x8(%rsp)
    0000012c: 	cmpq	$0xf, %r12
    00000130: 	ja	.Ltmp297 # Offset: 304
    00000136: 	cmpq	$0x1, %r12
    0000013a: 	jne	.Ltmp298 # Offset: 314
    00000140: 	movzbl	(%r13), %eax
    00000145: 	movb	%al, 0x10(%rbx)
.Ltmp301:
    00000148: 	movq	%r12, 0x8(%rbx)
    0000014c: 	movb	$0x0, (%rdi,%r12)
    00000151: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000158: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000015f: 	addq	$0x20, %rax
    00000163: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000016a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000171: 	je	.Ltmp299 # Offset: 369
.Ltmp302:
    00000177: 	movq	-0x20(%rax), %rbp
    0000017b: 	callq	clock@PLT # Offset: 379
    00000180: 	movq	%rax, end_time(%rip)
    00000187: 	movq	0x68(%rsp), %rdx
    0000018c: 	subq	%fs:0x28, %rdx
    00000195: 	jne	.Ltmp300 # Offset: 405
    0000019b: 	subq	start_time(%rip), %rax
    000001a2: 	pxor	%xmm0, %xmm0
    000001a6: 	movq	%rbp, %rdi
    000001a9: 	cvtsi2sd	%rax, %xmm0
    000001ae: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001b6: 	addq	$0x78, %rsp
    000001ba: 	popq	%rbx
    000001bb: 	popq	%rbp
    000001bc: 	popq	%r12
    000001be: 	popq	%r13
    000001c0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 448
    000001c5: 	nopl	(%rax) # Size: 3
.Ltmp297:
    000001c8: 	movq	%rbx, %rdi
    000001cb: 	leaq	0x8(%rsp), %rsi
    000001d0: 	xorl	%edx, %edx
    000001d2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 466
    000001d7: 	movq	%rax, (%rbx)
    000001da: 	movq	%rax, %rdi
    000001dd: 	movq	0x8(%rsp), %rax
    000001e2: 	movq	%rax, 0x10(%rbx)
.Ltmp303:
    000001e6: 	movq	%r12, %rdx
    000001e9: 	movq	%r13, %rsi
    000001ec: 	callq	memcpy@PLT # Offset: 492
    000001f1: 	movq	0x8(%rsp), %r12
    000001f6: 	movq	(%rbx), %rdi
    000001f9: 	jmp	.Ltmp301 # Offset: 505
    000001fe: 	nop # Size: 2
.Ltmp294:
    00000200: 	movq	%rbp, %rsi
    00000203: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000020a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 522
    0000020f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000216: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000021d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000224: 	jne	.Ltmp302 # Offset: 548
.Ltmp299:
    0000022a: 	movq	-0x8(%rdx), %rax
    0000022e: 	addq	$0x200, %rax
    00000234: 	jmp	.Ltmp302 # Offset: 564
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp298:
    00000240: 	testq	%r12, %r12
    00000243: 	je	.Ltmp301 # Offset: 579
    00000249: 	jmp	.Ltmp303 # Offset: 585
    0000024b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp293:
    00000250: 	movq	%rbx, %rdi
    00000253: 	movq	%rbx, %r12
    00000256: 	movq	%rbx, %rdx
    00000259: 	movq	%rbx, %r8
    0000025c: 	movq	%rbx, %r9
    0000025f: 	movq	%rbx, %r10
    00000262: 	movq	%rbx, %rcx
    00000265: 	movq	%rbx, %r13
    00000268: 	movq	%rbx, %r11
    0000026b: 	jmp	.Ltmp304 # Offset: 619
.Ltmp296:
    00000270: 	leaq	DATAat0x17018(%rip), %rdi
    00000277: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 631
.Ltmp300:
    0000027c: 	callq	__stack_chk_fail@PLT # Offset: 636
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_struct_local2ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_struct_local1IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 71
  State       : disassembled
  Address     : 0x8640
  Size        : 0x2ba
  MaxSize     : 0x2c0
  Offset      : 0x8640
  Section     : .text
  Orc Section : .local.text._Z18test_struct_local1IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB070:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pxor	%xmm5, %xmm5
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x98, %rsp
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x88(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	cvtsi2sdl	init_value(%rip), %xmm5
    00000033: 	movapd	%xmm5, %xmm0
    00000037: 	movsd	%xmm5, 0x18(%rsp)
    0000003d: 	unpcklpd	%xmm0, %xmm0
    00000041: 	movaps	%xmm0, (%rsp)
    00000045: 	callq	clock@PLT # Offset: 69
    0000004a: 	movl	iterations(%rip), %edx
    00000050: 	movapd	(%rsp), %xmm0
    00000055: 	movq	%rax, start_time(%rip)
    0000005c: 	movsd	0x18(%rsp), %xmm5
    00000062: 	testl	%edx, %edx
    00000064: 	jle	.Ltmp305 # Offset: 100
    0000006a: 	movapd	DATAat0x17da0(%rip), %xmm9
    00000073: 	movapd	%xmm0, %xmm4
    00000077: 	movapd	%xmm0, %xmm1
    0000007b: 	xorl	%eax, %eax
    0000007d: 	movapd	DATAat0x17dc0(%rip), %xmm7
    00000085: 	movapd	%xmm0, %xmm3
    00000089: 	movapd	%xmm0, %xmm2
    0000008d: 	movapd	DATAat0x17db0(%rip), %xmm8
    00000096: 	movapd	DATAat0x17dd0(%rip), %xmm6
    0000009e: 	movapd	DATAat0x17de0(%rip), %xmm5
    000000a6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp306:
    000000b0: 	addl	$0x1, %eax
    000000b3: 	addpd	%xmm9, %xmm0
    000000b8: 	addpd	%xmm8, %xmm2
    000000bd: 	addpd	%xmm7, %xmm3
    000000c1: 	addpd	%xmm6, %xmm1
    000000c5: 	addpd	%xmm5, %xmm4
    000000c9: 	cmpl	%eax, %edx
    000000cb: 	jne	.Ltmp306 # Offset: 203
    000000cd: 	movapd	%xmm0, %xmm6
    000000d1: 	unpckhpd	%xmm0, %xmm0
    000000d5: 	shufpd	$0x1, %xmm2, %xmm2
    000000da: 	shufpd	$0x1, %xmm3, %xmm3
    000000df: 	movapd	%xmm0, %xmm5
    000000e3: 	shufpd	$0x1, %xmm1, %xmm1
    000000e8: 	shufpd	$0x1, %xmm4, %xmm4
.Ltmp317:
    000000ed: 	leaq	0x30(%rsp), %rdi
    000000f2: 	movq	%rbp, %rsi
    000000f5: 	movaps	%xmm4, 0x30(%rsp)
    000000fa: 	movaps	%xmm1, 0x40(%rsp)
    000000ff: 	movlpd	%xmm1, 0x50(%rsp)
    00000105: 	movups	%xmm3, 0x58(%rsp)
    0000010a: 	movups	%xmm2, 0x68(%rsp)
    0000010f: 	movsd	%xmm5, 0x78(%rsp)
    00000115: 	movsd	%xmm6, 0x80(%rsp)
    0000011e: 	callq	_Z12check11_sumsIdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 286
    00000123: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000012a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000131: 	subq	$0x20, %rax
    00000135: 	cmpq	%rax, %rbx
    00000138: 	je	.Ltmp307 # Offset: 312
    0000013e: 	leaq	0x10(%rbx), %rdi
    00000142: 	movq	0x8(%rbp), %r12
    00000146: 	movq	%rdi, (%rbx)
    00000149: 	movq	(%rbp), %r13
    0000014d: 	movq	%r13, %rax
    00000150: 	addq	%r12, %rax
    00000153: 	je	.Ltmp308 # Offset: 339
    00000155: 	testq	%r13, %r13
    00000158: 	je	.Ltmp309 # Offset: 344
.Ltmp308:
    0000015e: 	movq	%r12, 0x28(%rsp)
    00000163: 	cmpq	$0xf, %r12
    00000167: 	ja	.Ltmp310 # Offset: 359
    0000016d: 	cmpq	$0x1, %r12
    00000171: 	jne	.Ltmp311 # Offset: 369
    00000177: 	movzbl	(%r13), %eax
    0000017c: 	movb	%al, 0x10(%rbx)
.Ltmp314:
    0000017f: 	movq	%r12, 0x8(%rbx)
    00000183: 	movb	$0x0, (%rdi,%r12)
    00000188: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000018f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000196: 	addq	$0x20, %rax
    0000019a: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001a1: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001a8: 	je	.Ltmp312 # Offset: 424
.Ltmp315:
    000001ae: 	movq	-0x20(%rax), %rbp
    000001b2: 	callq	clock@PLT # Offset: 434
    000001b7: 	movq	%rax, end_time(%rip)
    000001be: 	movq	0x88(%rsp), %rdx
    000001c6: 	subq	%fs:0x28, %rdx
    000001cf: 	jne	.Ltmp313 # Offset: 463
    000001d5: 	subq	start_time(%rip), %rax
    000001dc: 	pxor	%xmm0, %xmm0
    000001e0: 	movq	%rbp, %rdi
    000001e3: 	cvtsi2sd	%rax, %xmm0
    000001e8: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001f0: 	addq	$0x98, %rsp
    000001f7: 	popq	%rbx
    000001f8: 	popq	%rbp
    000001f9: 	popq	%r12
    000001fb: 	popq	%r13
    000001fd: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 509
    00000202: 	nopw	(%rax,%rax) # Size: 6
.Ltmp310:
    00000208: 	movq	%rbx, %rdi
    0000020b: 	leaq	0x28(%rsp), %rsi
    00000210: 	xorl	%edx, %edx
    00000212: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 530
    00000217: 	movq	%rax, (%rbx)
    0000021a: 	movq	%rax, %rdi
    0000021d: 	movq	0x28(%rsp), %rax
    00000222: 	movq	%rax, 0x10(%rbx)
.Ltmp316:
    00000226: 	movq	%r12, %rdx
    00000229: 	movq	%r13, %rsi
    0000022c: 	callq	memcpy@PLT # Offset: 556
    00000231: 	movq	0x28(%rsp), %r12
    00000236: 	movq	(%rbx), %rdi
    00000239: 	jmp	.Ltmp314 # Offset: 569
    0000023e: 	nop # Size: 2
.Ltmp307:
    00000240: 	movq	%rbp, %rsi
    00000243: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000024a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 586
    0000024f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000256: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000025d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000264: 	jne	.Ltmp315 # Offset: 612
.Ltmp312:
    0000026a: 	movq	-0x8(%rdx), %rax
    0000026e: 	addq	$0x200, %rax
    00000274: 	jmp	.Ltmp315 # Offset: 628
    00000279: 	nopl	(%rax) # Size: 7
.Ltmp311:
    00000280: 	testq	%r12, %r12
    00000283: 	je	.Ltmp314 # Offset: 643
    00000289: 	jmp	.Ltmp316 # Offset: 649
    0000028b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp305:
    00000290: 	movapd	%xmm0, %xmm2
    00000294: 	movapd	%xmm0, %xmm3
    00000298: 	movapd	%xmm0, %xmm1
    0000029c: 	movapd	%xmm0, %xmm4
    000002a0: 	movapd	%xmm5, %xmm6
    000002a4: 	jmp	.Ltmp317 # Offset: 676
.Ltmp309:
    000002a9: 	leaq	DATAat0x17018(%rip), %rdi
    000002b0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 688
.Ltmp313:
    000002b5: 	callq	__stack_chk_fail@PLT # Offset: 693
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_struct_local1IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_struct_local0IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 72
  State       : disassembled
  Address     : 0x8900
  Size        : 0x2ac
  MaxSize     : 0x2b0
  Offset      : 0x8900
  Section     : .text
  Orc Section : .local.text._Z18test_struct_local0IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB071:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x68, %rsp
    00000011: 	movl	init_value(%rip), %ebx
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x58(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	movd	%ebx, %xmm6
    0000002b: 	pshufd	$0xe0, %xmm6, %xmm5
    00000030: 	pshufd	$0x0, %xmm6, %xmm4
    00000035: 	movq	%xmm5, %r12
    0000003a: 	movaps	%xmm4, (%rsp)
    0000003e: 	callq	clock@PLT # Offset: 62
    00000043: 	movdqa	(%rsp), %xmm4
    00000048: 	movq	%r12, %xmm7
    0000004d: 	movdqa	DATAat0x17d70(%rip), %xmm1
    00000055: 	movq	%rax, start_time(%rip)
    0000005c: 	movl	iterations(%rip), %eax
    00000062: 	movd	%eax, %xmm5
    00000066: 	imull	$0x37, %eax, %edx
    00000069: 	leal	(%rax,%rax), %edi
    0000006c: 	movl	%eax, %r8d
    0000006f: 	pshufd	$0x0, %xmm5, %xmm0
    00000074: 	imull	$0x39, %eax, %esi
    00000077: 	shll	$0x4, %r8d
    0000007b: 	movdqa	%xmm0, %xmm2
    0000007f: 	movdqa	%xmm0, %xmm3
    00000083: 	pmuludq	%xmm1, %xmm2
    00000087: 	psrlq	$0x20, %xmm3
    0000008c: 	movd	%edx, %xmm6
    00000090: 	psrlq	$0x20, %xmm1
    00000095: 	imull	$0x34, %eax, %edx
    00000098: 	pmuludq	%xmm3, %xmm1
    0000009c: 	addl	%ebx, %edx
    0000009e: 	pshufd	$0x8, %xmm2, %xmm2
    000000a3: 	pshufd	$0x8, %xmm1, %xmm1
    000000a8: 	punpckldq	%xmm1, %xmm2
    000000ac: 	movdqa	DATAat0x17d80(%rip), %xmm1
    000000b4: 	paddd	%xmm4, %xmm2
    000000b8: 	pmuludq	%xmm1, %xmm0
    000000bc: 	psrlq	$0x20, %xmm1
    000000c1: 	movaps	%xmm2, 0x20(%rsp)
    000000c6: 	pmuludq	%xmm1, %xmm3
    000000ca: 	pshufd	$0x8, %xmm0, %xmm0
    000000cf: 	pshufd	$0x8, %xmm3, %xmm3
    000000d4: 	punpckldq	%xmm3, %xmm0
    000000d8: 	paddd	%xmm4, %xmm0
    000000dc: 	movaps	%xmm0, 0x30(%rsp)
    000000e1: 	movd	%esi, %xmm0
    000000e5: 	leal	(%rdi,%rax), %esi
    000000e8: 	leal	(,%rsi,4), %ecx
    000000ef: 	punpckldq	%xmm6, %xmm0
    000000f3: 	subl	%ecx, %edx
    000000f5: 	leal	(,%rax,4), %ecx
    000000fc: 	paddd	%xmm7, %xmm0
    00000100: 	subl	%ecx, %edx
    00000102: 	addl	%eax, %ecx
    00000104: 	leal	(%rax,%rcx,2), %r9d
    00000108: 	subl	%r8d, %edx
    0000010b: 	subl	%eax, %r8d
    0000010e: 	subl	%r9d, %edx
    00000111: 	movq	%xmm0, 0x40(%rsp)
    00000117: 	leal	(%rdx,%rsi,2), %edx
    0000011a: 	leal	(%rdx,%r8), %eax
    0000011e: 	leal	(%rsi,%rsi,8), %edx
    00000121: 	movq	%rbp, %rsi
    00000124: 	addl	%edx, %eax
    00000126: 	subl	%edi, %eax
    00000128: 	leaq	0x20(%rsp), %rdi
    0000012d: 	addl	%ecx, %eax
    0000012f: 	movl	%eax, 0x48(%rsp)
    00000133: 	callq	_Z12check11_sumsIiEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 307
    00000138: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000013f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000146: 	subq	$0x20, %rax
    0000014a: 	cmpq	%rax, %rbx
    0000014d: 	je	.Ltmp318 # Offset: 333
    00000153: 	leaq	0x10(%rbx), %rdi
    00000157: 	movq	0x8(%rbp), %r12
    0000015b: 	movq	%rdi, (%rbx)
    0000015e: 	movq	(%rbp), %r13
    00000162: 	movq	%r13, %rax
    00000165: 	addq	%r12, %rax
    00000168: 	je	.Ltmp319 # Offset: 360
    0000016a: 	testq	%r13, %r13
    0000016d: 	je	.Ltmp320 # Offset: 365
.Ltmp319:
    00000173: 	movq	%r12, 0x18(%rsp)
    00000178: 	cmpq	$0xf, %r12
    0000017c: 	ja	.Ltmp321 # Offset: 380
    00000182: 	cmpq	$0x1, %r12
    00000186: 	jne	.Ltmp322 # Offset: 390
    0000018c: 	movzbl	(%r13), %eax
    00000191: 	movb	%al, 0x10(%rbx)
.Ltmp325:
    00000194: 	movq	%r12, 0x8(%rbx)
    00000198: 	movb	$0x0, (%rdi,%r12)
    0000019d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001a4: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001ab: 	addq	$0x20, %rax
    000001af: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001b6: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001bd: 	je	.Ltmp323 # Offset: 445
.Ltmp326:
    000001c3: 	movq	-0x20(%rax), %rbp
    000001c7: 	callq	clock@PLT # Offset: 455
    000001cc: 	movq	%rax, end_time(%rip)
    000001d3: 	movq	0x58(%rsp), %rdx
    000001d8: 	subq	%fs:0x28, %rdx
    000001e1: 	jne	.Ltmp324 # Offset: 481
    000001e7: 	subq	start_time(%rip), %rax
    000001ee: 	pxor	%xmm0, %xmm0
    000001f2: 	movq	%rbp, %rdi
    000001f5: 	cvtsi2sd	%rax, %xmm0
    000001fa: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000202: 	addq	$0x68, %rsp
    00000206: 	popq	%rbx
    00000207: 	popq	%rbp
    00000208: 	popq	%r12
    0000020a: 	popq	%r13
    0000020c: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 524
    00000211: 	nopl	(%rax) # Size: 7
.Ltmp321:
    00000218: 	movq	%rbx, %rdi
    0000021b: 	leaq	0x18(%rsp), %rsi
    00000220: 	xorl	%edx, %edx
    00000222: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 546
    00000227: 	movq	%rax, (%rbx)
    0000022a: 	movq	%rax, %rdi
    0000022d: 	movq	0x18(%rsp), %rax
    00000232: 	movq	%rax, 0x10(%rbx)
.Ltmp327:
    00000236: 	movq	%r12, %rdx
    00000239: 	movq	%r13, %rsi
    0000023c: 	callq	memcpy@PLT # Offset: 572
    00000241: 	movq	0x18(%rsp), %r12
    00000246: 	movq	(%rbx), %rdi
    00000249: 	jmp	.Ltmp325 # Offset: 585
    0000024e: 	nop # Size: 2
.Ltmp318:
    00000250: 	movq	%rbp, %rsi
    00000253: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000025a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 602
    0000025f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000266: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000026d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000274: 	jne	.Ltmp326 # Offset: 628
.Ltmp323:
    0000027a: 	movq	-0x8(%rdx), %rax
    0000027e: 	addq	$0x200, %rax
    00000284: 	jmp	.Ltmp326 # Offset: 644
    00000289: 	nopl	(%rax) # Size: 7
.Ltmp322:
    00000290: 	testq	%r12, %r12
    00000293: 	je	.Ltmp325 # Offset: 659
    00000299: 	jmp	.Ltmp327 # Offset: 665
.Ltmp320:
    0000029b: 	leaq	DATAat0x17018(%rip), %rdi
    000002a2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 674
.Ltmp324:
    000002a7: 	callq	__stack_chk_fail@PLT # Offset: 679
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_struct_local0IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_struct_local0ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 73
  State       : disassembled
  Address     : 0x8bb0
  Size        : 0x25c
  MaxSize     : 0x260
  Offset      : 0x8bb0
  Section     : .text
  Orc Section : .local.text._Z18test_struct_local0ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB072:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	movq	%rdi, %r12
    0000000b: 	pushq	%rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x78, %rsp
    00000011: 	movslq	init_value(%rip), %r13
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x68(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	callq	clock@PLT # Offset: 40
    0000002d: 	movq	%rax, start_time(%rip)
    00000034: 	movslq	iterations(%rip), %rax
    0000003b: 	leaq	(%rax,%rax), %rbx
    0000003f: 	leaq	(%rbx,%rax), %rbp
    00000043: 	leaq	(,%rbp,4), %rdx
    0000004b: 	leaq	(%rdx,%rax), %rcx
    0000004f: 	leaq	(%r13,%rcx,4), %r11
    00000054: 	movq	%rax, %rcx
    00000057: 	movq	%r11, %r10
    0000005a: 	shlq	$0x4, %rcx
    0000005e: 	movq	%r11, 0x10(%rsp)
    00000063: 	subq	%rdx, %r10
    00000066: 	leaq	(,%rax,4), %rdx
    0000006e: 	movq	%r10, %rsi
    00000071: 	movq	%r10, 0x18(%rsp)
    00000076: 	subq	%rdx, %rsi
    00000079: 	addq	%rax, %rdx
    0000007c: 	movq	%rsi, %r9
    0000007f: 	leaq	(%rax,%rdx,2), %rdi
    00000083: 	movq	%rsi, 0x20(%rsp)
    00000088: 	subq	%rcx, %r9
    0000008b: 	subq	%rax, %rcx
    0000008e: 	movq	%rsi, 0x30(%rsp)
    00000093: 	movq	%r12, %rsi
    00000096: 	movq	%r9, %r8
    00000099: 	movq	%r9, 0x28(%rsp)
    0000009e: 	subq	%rdi, %r8
    000000a1: 	leaq	(%r8,%rbp,2), %rdi
    000000a5: 	movq	%r8, 0x38(%rsp)
    000000aa: 	leaq	(%rcx,%rdi), %rax
    000000ae: 	leaq	(%rbp,%rbp,8), %rcx
    000000b3: 	movq	%rdi, 0x40(%rsp)
    000000b8: 	addq	%rax, %rcx
    000000bb: 	leaq	0x10(%rsp), %rdi
    000000c0: 	movq	%rax, 0x48(%rsp)
    000000c5: 	movq	%rcx, %rbp
    000000c8: 	movq	%rcx, %xmm0
    000000cd: 	subq	%rbx, %rbp
    000000d0: 	movq	%rbp, %xmm1
    000000d5: 	addq	%rbp, %rdx
    000000d8: 	punpcklqdq	%xmm1, %xmm0
    000000dc: 	movq	%rdx, 0x60(%rsp)
    000000e1: 	movaps	%xmm0, 0x50(%rsp)
    000000e6: 	callq	_Z12check11_sumsImEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 230
    000000eb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000f2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000f9: 	subq	$0x20, %rax
    000000fd: 	cmpq	%rax, %rbx
    00000100: 	je	.Ltmp328 # Offset: 256
    00000106: 	leaq	0x10(%rbx), %rdi
    0000010a: 	movq	%rdi, (%rbx)
    0000010d: 	movq	(%r12), %rbp
    00000111: 	movq	0x8(%r12), %r12
    00000116: 	movq	%rbp, %rax
    00000119: 	addq	%r12, %rax
    0000011c: 	je	.Ltmp329 # Offset: 284
    0000011e: 	testq	%rbp, %rbp
    00000121: 	je	.Ltmp330 # Offset: 289
.Ltmp329:
    00000127: 	movq	%r12, 0x8(%rsp)
    0000012c: 	cmpq	$0xf, %r12
    00000130: 	ja	.Ltmp331 # Offset: 304
    00000136: 	cmpq	$0x1, %r12
    0000013a: 	jne	.Ltmp332 # Offset: 314
    00000140: 	movzbl	(%rbp), %eax
    00000144: 	movb	%al, 0x10(%rbx)
.Ltmp335:
    00000147: 	movq	%r12, 0x8(%rbx)
    0000014b: 	movb	$0x0, (%rdi,%r12)
    00000150: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000157: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000015e: 	addq	$0x20, %rax
    00000162: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000169: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000170: 	je	.Ltmp333 # Offset: 368
.Ltmp336:
    00000176: 	movq	-0x20(%rax), %rbp
    0000017a: 	callq	clock@PLT # Offset: 378
    0000017f: 	movq	%rax, end_time(%rip)
    00000186: 	movq	0x68(%rsp), %rdx
    0000018b: 	subq	%fs:0x28, %rdx
    00000194: 	jne	.Ltmp334 # Offset: 404
    0000019a: 	subq	start_time(%rip), %rax
    000001a1: 	pxor	%xmm0, %xmm0
    000001a5: 	movq	%rbp, %rdi
    000001a8: 	cvtsi2sd	%rax, %xmm0
    000001ad: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001b5: 	addq	$0x78, %rsp
    000001b9: 	popq	%rbx
    000001ba: 	popq	%rbp
    000001bb: 	popq	%r12
    000001bd: 	popq	%r13
    000001bf: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 447
    000001c4: 	nopl	(%rax) # Size: 4
.Ltmp331:
    000001c8: 	movq	%rbx, %rdi
    000001cb: 	leaq	0x8(%rsp), %rsi
    000001d0: 	xorl	%edx, %edx
    000001d2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 466
    000001d7: 	movq	%rax, (%rbx)
    000001da: 	movq	%rax, %rdi
    000001dd: 	movq	0x8(%rsp), %rax
    000001e2: 	movq	%rax, 0x10(%rbx)
.Ltmp337:
    000001e6: 	movq	%r12, %rdx
    000001e9: 	movq	%rbp, %rsi
    000001ec: 	callq	memcpy@PLT # Offset: 492
    000001f1: 	movq	0x8(%rsp), %r12
    000001f6: 	movq	(%rbx), %rdi
    000001f9: 	jmp	.Ltmp335 # Offset: 505
    000001fe: 	nop # Size: 2
.Ltmp328:
    00000200: 	movq	%r12, %rsi
    00000203: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000020a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 522
    0000020f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000216: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000021d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000224: 	jne	.Ltmp336 # Offset: 548
.Ltmp333:
    0000022a: 	movq	-0x8(%rdx), %rax
    0000022e: 	addq	$0x200, %rax
    00000234: 	jmp	.Ltmp336 # Offset: 564
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp332:
    00000240: 	testq	%r12, %r12
    00000243: 	je	.Ltmp335 # Offset: 579
    00000249: 	jmp	.Ltmp337 # Offset: 585
.Ltmp330:
    0000024b: 	leaq	DATAat0x17018(%rip), %rdi
    00000252: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 594
.Ltmp334:
    00000257: 	callq	__stack_chk_fail@PLT # Offset: 599
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_struct_local0ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_struct_local0IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 74
  State       : disassembled
  Address     : 0x8e10
  Size        : 0x23c
  MaxSize     : 0x240
  Offset      : 0x8e10
  Section     : .text
  Orc Section : .local.text._Z18test_struct_local0IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB073:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x38, %rsp
    00000011: 	movl	init_value(%rip), %ebx
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x28(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	movl	iterations(%rip), %edx
    00000032: 	movd	%ebx, %xmm1
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	punpcklwd	%xmm1, %xmm1
    00000041: 	leal	(%rdx,%rdx), %edi
    00000044: 	movd	%edx, %xmm0
    00000048: 	pshufd	$0x0, %xmm1, %xmm1
    0000004d: 	movl	%edx, %r8d
    00000050: 	leal	(%rdi,%rdx), %esi
    00000053: 	shll	$0x4, %r8d
    00000057: 	punpcklwd	%xmm0, %xmm0
    0000005b: 	leal	(,%rsi,4), %ecx
    00000062: 	pshufd	$0x0, %xmm0, %xmm0
    00000067: 	pmullw	DATAat0x17d90(%rip), %xmm0
    0000006f: 	paddw	%xmm1, %xmm0
    00000073: 	leal	(%rcx,%rdx), %eax
    00000076: 	movaps	%xmm0, 0x10(%rsp)
    0000007b: 	leal	(%rbx,%rax,4), %eax
    0000007e: 	subl	%ecx, %eax
    00000080: 	leal	(,%rdx,4), %ecx
    00000087: 	subl	%ecx, %eax
    00000089: 	addl	%edx, %ecx
    0000008b: 	leal	(%rdx,%rcx,2), %r9d
    0000008f: 	subl	%r8d, %eax
    00000092: 	subl	%edx, %r8d
    00000095: 	subl	%r9d, %eax
    00000098: 	leal	(%rax,%rsi,2), %eax
    0000009b: 	leal	(%rsi,%rsi,8), %esi
    0000009e: 	addl	%r8d, %eax
    000000a1: 	addl	%esi, %eax
    000000a3: 	movl	%eax, %esi
    000000a5: 	movzwl	%ax, %eax
    000000a8: 	subl	%edi, %esi
    000000aa: 	leaq	0x10(%rsp), %rdi
    000000af: 	movl	%esi, %edx
    000000b1: 	addl	%esi, %ecx
    000000b3: 	movq	%rbp, %rsi
    000000b6: 	shll	$0x10, %edx
    000000b9: 	movw	%cx, 0x24(%rsp)
    000000be: 	orl	%edx, %eax
    000000c0: 	movl	%eax, 0x20(%rsp)
    000000c4: 	callq	_Z12check11_sumsIsEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 196
    000000c9: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000d0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000d7: 	subq	$0x20, %rax
    000000db: 	cmpq	%rax, %rbx
    000000de: 	je	.Ltmp338 # Offset: 222
    000000e4: 	leaq	0x10(%rbx), %rdi
    000000e8: 	movq	0x8(%rbp), %r12
    000000ec: 	movq	%rdi, (%rbx)
    000000ef: 	movq	(%rbp), %r13
    000000f3: 	movq	%r13, %rax
    000000f6: 	addq	%r12, %rax
    000000f9: 	je	.Ltmp339 # Offset: 249
    000000fb: 	testq	%r13, %r13
    000000fe: 	je	.Ltmp340 # Offset: 254
.Ltmp339:
    00000104: 	movq	%r12, 0x8(%rsp)
    00000109: 	cmpq	$0xf, %r12
    0000010d: 	ja	.Ltmp341 # Offset: 269
    00000113: 	cmpq	$0x1, %r12
    00000117: 	jne	.Ltmp342 # Offset: 279
    0000011d: 	movzbl	(%r13), %eax
    00000122: 	movb	%al, 0x10(%rbx)
.Ltmp345:
    00000125: 	movq	%r12, 0x8(%rbx)
    00000129: 	movb	$0x0, (%rdi,%r12)
    0000012e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000135: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000013c: 	addq	$0x20, %rax
    00000140: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000147: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000014e: 	je	.Ltmp343 # Offset: 334
.Ltmp346:
    00000154: 	movq	-0x20(%rax), %rbp
    00000158: 	callq	clock@PLT # Offset: 344
    0000015d: 	movq	%rax, end_time(%rip)
    00000164: 	movq	0x28(%rsp), %rdx
    00000169: 	subq	%fs:0x28, %rdx
    00000172: 	jne	.Ltmp344 # Offset: 370
    00000178: 	subq	start_time(%rip), %rax
    0000017f: 	pxor	%xmm0, %xmm0
    00000183: 	movq	%rbp, %rdi
    00000186: 	cvtsi2sd	%rax, %xmm0
    0000018b: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000193: 	addq	$0x38, %rsp
    00000197: 	popq	%rbx
    00000198: 	popq	%rbp
    00000199: 	popq	%r12
    0000019b: 	popq	%r13
    0000019d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 413
    000001a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp341:
    000001a8: 	movq	%rbx, %rdi
    000001ab: 	leaq	0x8(%rsp), %rsi
    000001b0: 	xorl	%edx, %edx
    000001b2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 434
    000001b7: 	movq	%rax, (%rbx)
    000001ba: 	movq	%rax, %rdi
    000001bd: 	movq	0x8(%rsp), %rax
    000001c2: 	movq	%rax, 0x10(%rbx)
.Ltmp347:
    000001c6: 	movq	%r12, %rdx
    000001c9: 	movq	%r13, %rsi
    000001cc: 	callq	memcpy@PLT # Offset: 460
    000001d1: 	movq	0x8(%rsp), %r12
    000001d6: 	movq	(%rbx), %rdi
    000001d9: 	jmp	.Ltmp345 # Offset: 473
    000001de: 	nop # Size: 2
.Ltmp338:
    000001e0: 	movq	%rbp, %rsi
    000001e3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001ea: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 490
    000001ef: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001fd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000204: 	jne	.Ltmp346 # Offset: 516
.Ltmp343:
    0000020a: 	movq	-0x8(%rdx), %rax
    0000020e: 	addq	$0x200, %rax
    00000214: 	jmp	.Ltmp346 # Offset: 532
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp342:
    00000220: 	testq	%r12, %r12
    00000223: 	je	.Ltmp345 # Offset: 547
    00000229: 	jmp	.Ltmp347 # Offset: 553
.Ltmp340:
    0000022b: 	leaq	DATAat0x17018(%rip), %rdi
    00000232: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 562
.Ltmp344:
    00000237: 	callq	__stack_chk_fail@PLT # Offset: 567
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_struct_local0IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_struct_local0IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 75
  State       : disassembled
  Address     : 0x9050
  Size        : 0x27c
  MaxSize     : 0x280
  Offset      : 0x9050
  Section     : .text
  Orc Section : .local.text._Z18test_struct_local0IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB074:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pxor	%xmm4, %xmm4
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x98, %rsp
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x88(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	cvtsi2sdl	init_value(%rip), %xmm4
    00000033: 	movapd	%xmm4, %xmm2
    00000037: 	movsd	%xmm4, 0x18(%rsp)
    0000003d: 	unpcklpd	%xmm2, %xmm2
    00000041: 	movaps	%xmm2, (%rsp)
    00000045: 	callq	clock@PLT # Offset: 69
    0000004a: 	pxor	%xmm1, %xmm1
    0000004e: 	movapd	(%rsp), %xmm2
    00000053: 	movapd	DATAat0x17df0(%rip), %xmm3
    0000005b: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000063: 	movsd	0x18(%rsp), %xmm4
    00000069: 	leaq	0x30(%rsp), %rdi
    0000006e: 	movq	%rbp, %rsi
    00000071: 	movq	%rax, start_time(%rip)
    00000078: 	movapd	%xmm1, %xmm0
    0000007c: 	mulsd	DATAat0x17da0(%rip), %xmm1
    00000084: 	unpcklpd	%xmm0, %xmm0
    00000088: 	mulpd	%xmm0, %xmm3
    0000008c: 	addsd	%xmm4, %xmm1
    00000090: 	addpd	%xmm2, %xmm3
    00000094: 	movsd	%xmm1, 0x80(%rsp)
    0000009d: 	movaps	%xmm3, 0x30(%rsp)
    000000a2: 	movapd	DATAat0x17e00(%rip), %xmm3
    000000aa: 	mulpd	%xmm0, %xmm3
    000000ae: 	addpd	%xmm2, %xmm3
    000000b2: 	movaps	%xmm3, 0x40(%rsp)
    000000b7: 	movapd	DATAat0x17e10(%rip), %xmm3
    000000bf: 	mulpd	%xmm0, %xmm3
    000000c3: 	addpd	%xmm2, %xmm3
    000000c7: 	movaps	%xmm3, 0x50(%rsp)
    000000cc: 	movapd	DATAat0x17e20(%rip), %xmm3
    000000d4: 	mulpd	%xmm0, %xmm3
    000000d8: 	mulpd	DATAat0x17e30(%rip), %xmm0
    000000e0: 	addpd	%xmm2, %xmm3
    000000e4: 	addpd	%xmm2, %xmm0
    000000e8: 	movaps	%xmm3, 0x60(%rsp)
    000000ed: 	movaps	%xmm0, 0x70(%rsp)
    000000f2: 	callq	_Z12check11_sumsIdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 242
    000000f7: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000fe: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000105: 	subq	$0x20, %rax
    00000109: 	cmpq	%rax, %rbx
    0000010c: 	je	.Ltmp348 # Offset: 268
    00000112: 	leaq	0x10(%rbx), %rdi
    00000116: 	movq	0x8(%rbp), %r12
    0000011a: 	movq	%rdi, (%rbx)
    0000011d: 	movq	(%rbp), %r13
    00000121: 	movq	%r13, %rax
    00000124: 	addq	%r12, %rax
    00000127: 	je	.Ltmp349 # Offset: 295
    00000129: 	testq	%r13, %r13
    0000012c: 	je	.Ltmp350 # Offset: 300
.Ltmp349:
    00000132: 	movq	%r12, 0x28(%rsp)
    00000137: 	cmpq	$0xf, %r12
    0000013b: 	ja	.Ltmp351 # Offset: 315
    00000141: 	cmpq	$0x1, %r12
    00000145: 	jne	.Ltmp352 # Offset: 325
    0000014b: 	movzbl	(%r13), %eax
    00000150: 	movb	%al, 0x10(%rbx)
.Ltmp355:
    00000153: 	movq	%r12, 0x8(%rbx)
    00000157: 	movb	$0x0, (%rdi,%r12)
    0000015c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000163: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016a: 	addq	$0x20, %rax
    0000016e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000175: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017c: 	je	.Ltmp353 # Offset: 380
.Ltmp356:
    00000182: 	movq	-0x20(%rax), %rbp
    00000186: 	callq	clock@PLT # Offset: 390
    0000018b: 	movq	%rax, end_time(%rip)
    00000192: 	movq	0x88(%rsp), %rdx
    0000019a: 	subq	%fs:0x28, %rdx
    000001a3: 	jne	.Ltmp354 # Offset: 419
    000001a9: 	subq	start_time(%rip), %rax
    000001b0: 	pxor	%xmm0, %xmm0
    000001b4: 	movq	%rbp, %rdi
    000001b7: 	cvtsi2sd	%rax, %xmm0
    000001bc: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001c4: 	addq	$0x98, %rsp
    000001cb: 	popq	%rbx
    000001cc: 	popq	%rbp
    000001cd: 	popq	%r12
    000001cf: 	popq	%r13
    000001d1: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 465
    000001d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp351:
    000001e0: 	movq	%rbx, %rdi
    000001e3: 	leaq	0x28(%rsp), %rsi
    000001e8: 	xorl	%edx, %edx
    000001ea: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 490
    000001ef: 	movq	%rax, (%rbx)
    000001f2: 	movq	%rax, %rdi
    000001f5: 	movq	0x28(%rsp), %rax
    000001fa: 	movq	%rax, 0x10(%rbx)
.Ltmp357:
    000001fe: 	movq	%r12, %rdx
    00000201: 	movq	%r13, %rsi
    00000204: 	callq	memcpy@PLT # Offset: 516
    00000209: 	movq	0x28(%rsp), %r12
    0000020e: 	movq	(%rbx), %rdi
    00000211: 	jmp	.Ltmp355 # Offset: 529
    00000216: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp348:
    00000220: 	movq	%rbp, %rsi
    00000223: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000022a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 554
    0000022f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000236: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000023d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000244: 	jne	.Ltmp356 # Offset: 580
.Ltmp353:
    0000024a: 	movq	-0x8(%rdx), %rax
    0000024e: 	addq	$0x200, %rax
    00000254: 	jmp	.Ltmp356 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp352:
    00000260: 	testq	%r12, %r12
    00000263: 	je	.Ltmp355 # Offset: 611
    00000269: 	jmp	.Ltmp357 # Offset: 617
.Ltmp350:
    0000026b: 	leaq	DATAat0x17018(%rip), %rdi
    00000272: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 626
.Ltmp354:
    00000277: 	callq	__stack_chk_fail@PLT # Offset: 631
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_struct_local0IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct_global1Id11test_structIdEXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 76
  State       : disassembled
  Address     : 0x92d0
  Size        : 0x26c
  MaxSize     : 0x270
  Offset      : 0x92d0
  Section     : .text
  Orc Section : .local.text._Z19test_struct_global1Id11test_structIdEXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB075:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movl	iterations(%rip), %edx
    0000002c: 	movapd	dataDouble(%rip), %xmm5
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movapd	dataDouble+16(%rip), %xmm4
    00000043: 	movapd	dataDouble+32(%rip), %xmm3
    0000004b: 	movapd	dataDouble+48(%rip), %xmm2
    00000053: 	movapd	dataDouble+64(%rip), %xmm1
    0000005b: 	movsd	dataDouble+80(%rip), %xmm0
    00000063: 	testl	%edx, %edx
    00000065: 	jle	.Ltmp358 # Offset: 101
    00000067: 	movapd	DATAat0x17df0(%rip), %xmm11
    00000070: 	xorl	%eax, %eax
    00000072: 	movapd	DATAat0x17e00(%rip), %xmm10
    0000007b: 	movapd	DATAat0x17e30(%rip), %xmm7
    00000083: 	movsd	DATAat0x17da0(%rip), %xmm6
    0000008b: 	movapd	DATAat0x17e10(%rip), %xmm9
    00000094: 	movapd	DATAat0x17e20(%rip), %xmm8
    0000009d: 	nopl	(%rax) # Size: 3
.Ltmp359:
    000000a0: 	addl	$0x1, %eax
    000000a3: 	addpd	%xmm11, %xmm5
    000000a8: 	addpd	%xmm10, %xmm4
    000000ad: 	addpd	%xmm9, %xmm3
    000000b2: 	addpd	%xmm8, %xmm2
    000000b7: 	addpd	%xmm7, %xmm1
    000000bb: 	addsd	%xmm6, %xmm0
    000000bf: 	cmpl	%edx, %eax
    000000c1: 	jne	.Ltmp359 # Offset: 193
.Ltmp358:
    000000c3: 	movq	%rbp, %rsi
    000000c6: 	leaq	dataDouble(%rip), %rdi
    000000cd: 	movaps	%xmm5, dataDouble(%rip)
    000000d4: 	movaps	%xmm4, dataDouble+16(%rip)
    000000db: 	movaps	%xmm3, dataDouble+32(%rip)
    000000e2: 	movaps	%xmm2, dataDouble+48(%rip)
    000000e9: 	movaps	%xmm1, dataDouble+64(%rip)
    000000f0: 	movsd	%xmm0, dataDouble+80(%rip)
    000000f8: 	callq	_Z12check11_sumsIdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 248
    000000fd: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000104: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000010b: 	subq	$0x20, %rax
    0000010f: 	cmpq	%rax, %rbx
    00000112: 	je	.Ltmp360 # Offset: 274
    00000118: 	leaq	0x10(%rbx), %rdi
    0000011c: 	movq	0x8(%rbp), %r12
    00000120: 	movq	%rdi, (%rbx)
    00000123: 	movq	(%rbp), %r13
    00000127: 	movq	%r13, %rax
    0000012a: 	addq	%r12, %rax
    0000012d: 	je	.Ltmp361 # Offset: 301
    0000012f: 	testq	%r13, %r13
    00000132: 	je	.Ltmp362 # Offset: 306
.Ltmp361:
    00000138: 	movq	%r12, (%rsp)
    0000013c: 	cmpq	$0xf, %r12
    00000140: 	ja	.Ltmp363 # Offset: 320
    00000146: 	cmpq	$0x1, %r12
    0000014a: 	jne	.Ltmp364 # Offset: 330
    00000150: 	movzbl	(%r13), %eax
    00000155: 	movb	%al, 0x10(%rbx)
.Ltmp367:
    00000158: 	movq	%r12, 0x8(%rbx)
    0000015c: 	movb	$0x0, (%rdi,%r12)
    00000161: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000168: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016f: 	addq	$0x20, %rax
    00000173: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000017a: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000181: 	je	.Ltmp365 # Offset: 385
.Ltmp368:
    00000187: 	movq	-0x20(%rax), %rbp
    0000018b: 	callq	clock@PLT # Offset: 395
    00000190: 	movq	%rax, end_time(%rip)
    00000197: 	movq	0x8(%rsp), %rdx
    0000019c: 	subq	%fs:0x28, %rdx
    000001a5: 	jne	.Ltmp366 # Offset: 421
    000001ab: 	subq	start_time(%rip), %rax
    000001b2: 	pxor	%xmm0, %xmm0
    000001b6: 	movq	%rbp, %rdi
    000001b9: 	cvtsi2sd	%rax, %xmm0
    000001be: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001c6: 	addq	$0x18, %rsp
    000001ca: 	popq	%rbx
    000001cb: 	popq	%rbp
    000001cc: 	popq	%r12
    000001ce: 	popq	%r13
    000001d0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 464
    000001d5: 	nopl	(%rax) # Size: 3
.Ltmp363:
    000001d8: 	movq	%rbx, %rdi
    000001db: 	movq	%rsp, %rsi
    000001de: 	xorl	%edx, %edx
    000001e0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 480
    000001e5: 	movq	%rax, (%rbx)
    000001e8: 	movq	%rax, %rdi
    000001eb: 	movq	(%rsp), %rax
    000001ef: 	movq	%rax, 0x10(%rbx)
.Ltmp369:
    000001f3: 	movq	%r12, %rdx
    000001f6: 	movq	%r13, %rsi
    000001f9: 	callq	memcpy@PLT # Offset: 505
    000001fe: 	movq	(%rsp), %r12
    00000202: 	movq	(%rbx), %rdi
    00000205: 	jmp	.Ltmp367 # Offset: 517
    0000020a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp360:
    00000210: 	movq	%rbp, %rsi
    00000213: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000021a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 538
    0000021f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000226: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000022d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000234: 	jne	.Ltmp368 # Offset: 564
.Ltmp365:
    0000023a: 	movq	-0x8(%rdx), %rax
    0000023e: 	addq	$0x200, %rax
    00000244: 	jmp	.Ltmp368 # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp364:
    00000250: 	testq	%r12, %r12
    00000253: 	je	.Ltmp367 # Offset: 595
    00000259: 	jmp	.Ltmp369 # Offset: 601
.Ltmp366:
    0000025b: 	callq	__stack_chk_fail@PLT # Offset: 603
.Ltmp362:
    00000260: 	leaq	DATAat0x17018(%rip), %rdi
    00000267: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 615
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct_global1Id11test_structIdEXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct_global2Is11test_structIsEXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 77
  State       : disassembled
  Address     : 0x9540
  Size        : 0x32c
  MaxSize     : 0x330
  Offset      : 0x9540
  Section     : .text
  Orc Section : .local.text._Z19test_struct_global2Is11test_structIsEXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB076:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x18(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	callq	clock@PLT # Offset: 37
    0000002a: 	movdqa	data16(%rip), %xmm0
    00000032: 	movzwl	data16(%rip), %r12d
    0000003a: 	movq	%rax, start_time(%rip)
    00000041: 	movzwl	data16+6(%rip), %eax
    00000048: 	movzwl	data16+2(%rip), %r14d
    00000050: 	movzwl	data16+4(%rip), %r8d
    00000058: 	movw	%ax, 0x4(%rsp)
    0000005d: 	movzwl	data16+10(%rip), %eax
    00000064: 	movzwl	data16+8(%rip), %esi
    0000006b: 	movzwl	data16+12(%rip), %r15d
    00000073: 	movw	%ax, 0x6(%rsp)
    00000078: 	movl	iterations(%rip), %eax
    0000007e: 	movzwl	data16+14(%rip), %r13d
    00000086: 	movzwl	data16+16(%rip), %ebx
    0000008d: 	movzwl	data16+18(%rip), %r11d
    00000095: 	movzwl	data16+20(%rip), %r10d
    0000009d: 	testl	%eax, %eax
    0000009f: 	jle	.Ltmp370 # Offset: 159
    000000a5: 	subl	$0x1, %eax
    000000a8: 	movd	%r8d, %xmm2
    000000ad: 	movd	%esi, %xmm0
    000000b1: 	leal	(,%rax,8), %r9d
    000000b9: 	movl	%eax, %edi
    000000bb: 	movl	%r9d, %edx
    000000be: 	addl	%eax, %r9d
    000000c1: 	shll	$0x4, %edi
    000000c4: 	subl	%eax, %edx
    000000c6: 	leal	(,%r9,4), %ecx
    000000ce: 	subl	%eax, %edi
    000000d0: 	leal	(%rax,%rdx,8), %edx
    000000d3: 	movw	%cx, 0x8(%rsp)
    000000d8: 	movd	%edi, %xmm3
    000000dc: 	leal	0x3c(%r10,%rdi,4), %r10d
    000000e1: 	leal	0x39(%rbx,%rdx), %ebx
    000000e5: 	leal	(%rax,%rax,2), %edx
    000000e8: 	pinsrw	$0x1, %r13d, %xmm3
    000000ee: 	addl	%edi, %edi
    000000f0: 	leal	(%rax,%rdx,4), %edx
    000000f3: 	pinsrw	$0x1, %r9d, %xmm0
    000000f9: 	leal	(,%rdx,4), %ecx
    00000100: 	punpckldq	%xmm3, %xmm0
    00000104: 	movd	%r15d, %xmm3
    00000109: 	movw	%cx, 0xc(%rsp)
    0000010e: 	leal	(%rax,%rax,4), %ecx
    00000111: 	pinsrw	$0x1, %edi, %xmm3
    00000116: 	leal	(,%rcx,4), %edx
    0000011d: 	pinsrw	$0x1, %edx, %xmm2
    00000122: 	leal	(,%rcx,8), %edx
    00000129: 	leal	(%rax,%rcx,2), %ecx
    0000012c: 	movd	0xc(%rsp), %xmm1
    00000132: 	leal	(%rcx,%rcx,4), %ecx
    00000135: 	pinsrw	$0x1, %r14d, %xmm1
    0000013b: 	leal	0x37(%r11,%rcx), %r11d
    00000140: 	punpckldq	%xmm2, %xmm1
    00000144: 	movd	0x8(%rsp), %xmm2
    0000014a: 	punpcklqdq	%xmm0, %xmm1
    0000014e: 	movdqa	%xmm2, %xmm4
    00000152: 	movd	%r12d, %xmm0
    00000157: 	pinsrw	$0x1, 0x4(%rsp), %xmm4
    0000015e: 	pinsrw	$0x1, 0x6(%rsp), %xmm2
    00000165: 	pinsrw	$0x1, %edx, %xmm0
    0000016a: 	punpckldq	%xmm4, %xmm0
    0000016e: 	punpckldq	%xmm3, %xmm2
    00000172: 	punpcklqdq	%xmm2, %xmm0
    00000176: 	paddw	%xmm1, %xmm0
    0000017a: 	paddw	DATAat0x17d90(%rip), %xmm0
.Ltmp370:
    00000182: 	movq	%rbp, %rsi
    00000185: 	leaq	data16(%rip), %rdi
    0000018c: 	movw	%bx, data16+16(%rip)
    00000193: 	movw	%r11w, data16+18(%rip)
    0000019b: 	movw	%r10w, data16+20(%rip)
    000001a3: 	movaps	%xmm0, data16(%rip)
    000001aa: 	callq	_Z12check11_sumsIsEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 426
    000001af: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001b6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001bd: 	subq	$0x20, %rax
    000001c1: 	cmpq	%rax, %rbx
    000001c4: 	je	.Ltmp371 # Offset: 452
    000001ca: 	leaq	0x10(%rbx), %rdi
    000001ce: 	movq	0x8(%rbp), %r12
    000001d2: 	movq	%rdi, (%rbx)
    000001d5: 	movq	(%rbp), %r13
    000001d9: 	movq	%r13, %rax
    000001dc: 	addq	%r12, %rax
    000001df: 	je	.Ltmp372 # Offset: 479
    000001e1: 	testq	%r13, %r13
    000001e4: 	je	.Ltmp373 # Offset: 484
.Ltmp372:
    000001ea: 	movq	%r12, 0x10(%rsp)
    000001ef: 	cmpq	$0xf, %r12
    000001f3: 	ja	.Ltmp374 # Offset: 499
    000001f9: 	cmpq	$0x1, %r12
    000001fd: 	jne	.Ltmp375 # Offset: 509
    00000203: 	movzbl	(%r13), %eax
    00000208: 	movb	%al, 0x10(%rbx)
.Ltmp378:
    0000020b: 	movq	%r12, 0x8(%rbx)
    0000020f: 	movb	$0x0, (%rdi,%r12)
    00000214: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000021b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000222: 	addq	$0x20, %rax
    00000226: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000022d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000234: 	je	.Ltmp376 # Offset: 564
.Ltmp379:
    0000023a: 	movq	-0x20(%rax), %rbp
    0000023e: 	callq	clock@PLT # Offset: 574
    00000243: 	movq	%rax, end_time(%rip)
    0000024a: 	movq	0x18(%rsp), %rdx
    0000024f: 	subq	%fs:0x28, %rdx
    00000258: 	jne	.Ltmp377 # Offset: 600
    0000025e: 	subq	start_time(%rip), %rax
    00000265: 	pxor	%xmm0, %xmm0
    00000269: 	movq	%rbp, %rdi
    0000026c: 	cvtsi2sd	%rax, %xmm0
    00000271: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000279: 	addq	$0x28, %rsp
    0000027d: 	popq	%rbx
    0000027e: 	popq	%rbp
    0000027f: 	popq	%r12
    00000281: 	popq	%r13
    00000283: 	popq	%r14
    00000285: 	popq	%r15
    00000287: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 647
    0000028c: 	nopl	(%rax) # Size: 4
.Ltmp374:
    00000290: 	movq	%rbx, %rdi
    00000293: 	leaq	0x10(%rsp), %rsi
    00000298: 	xorl	%edx, %edx
    0000029a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 666
    0000029f: 	movq	%rax, (%rbx)
    000002a2: 	movq	%rax, %rdi
    000002a5: 	movq	0x10(%rsp), %rax
    000002aa: 	movq	%rax, 0x10(%rbx)
.Ltmp380:
    000002ae: 	movq	%r12, %rdx
    000002b1: 	movq	%r13, %rsi
    000002b4: 	callq	memcpy@PLT # Offset: 692
    000002b9: 	movq	0x10(%rsp), %r12
    000002be: 	movq	(%rbx), %rdi
    000002c1: 	jmp	.Ltmp378 # Offset: 705
    000002c6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp371:
    000002d0: 	movq	%rbp, %rsi
    000002d3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002da: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 730
    000002df: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002e6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002ed: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002f4: 	jne	.Ltmp379 # Offset: 756
.Ltmp376:
    000002fa: 	movq	-0x8(%rdx), %rax
    000002fe: 	addq	$0x200, %rax
    00000304: 	jmp	.Ltmp379 # Offset: 772
    00000309: 	nopl	(%rax) # Size: 7
.Ltmp375:
    00000310: 	testq	%r12, %r12
    00000313: 	je	.Ltmp378 # Offset: 787
    00000319: 	jmp	.Ltmp380 # Offset: 793
.Ltmp377:
    0000031b: 	callq	__stack_chk_fail@PLT # Offset: 795
.Ltmp373:
    00000320: 	leaq	DATAat0x17018(%rip), %rdi
    00000327: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 807
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct_global2Is11test_structIsEXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct_global1Ii11test_structIiEXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 78
  State       : disassembled
  Address     : 0x9870
  Size        : 0x26c
  MaxSize     : 0x270
  Offset      : 0x9870
  Section     : .text
  Orc Section : .local.text._Z19test_struct_global1Ii11test_structIiEXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB077:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movdqa	data32(%rip), %xmm5
    0000002e: 	movdqa	data32+16(%rip), %xmm4
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	movl	iterations(%rip), %eax
    00000043: 	movl	data32+32(%rip), %esi
    00000049: 	movl	data32+36(%rip), %ecx
    0000004f: 	movl	data32+40(%rip), %edx
    00000055: 	testl	%eax, %eax
    00000057: 	jle	.Ltmp381 # Offset: 87
    00000059: 	movd	%eax, %xmm6
    0000005d: 	movdqa	DATAat0x17d70(%rip), %xmm1
    00000065: 	imull	$0x39, %eax, %edi
    00000068: 	pshufd	$0x0, %xmm6, %xmm0
    0000006d: 	movdqa	%xmm0, %xmm3
    00000071: 	movdqa	%xmm0, %xmm2
    00000075: 	pmuludq	%xmm1, %xmm3
    00000079: 	psrlq	$0x20, %xmm2
    0000007e: 	addl	%edi, %esi
    00000080: 	psrlq	$0x20, %xmm1
    00000085: 	imull	$0x37, %eax, %edi
    00000088: 	pmuludq	%xmm2, %xmm1
    0000008c: 	imull	$0x3c, %eax, %eax
    0000008f: 	addl	%edi, %ecx
    00000091: 	pshufd	$0x8, %xmm3, %xmm3
    00000096: 	addl	%eax, %edx
    00000098: 	pshufd	$0x8, %xmm1, %xmm1
    0000009d: 	punpckldq	%xmm1, %xmm3
    000000a1: 	movdqa	DATAat0x17d80(%rip), %xmm1
    000000a9: 	paddd	%xmm3, %xmm5
    000000ad: 	pmuludq	%xmm1, %xmm0
    000000b1: 	psrlq	$0x20, %xmm1
    000000b6: 	pmuludq	%xmm1, %xmm2
    000000ba: 	pshufd	$0x8, %xmm0, %xmm0
    000000bf: 	pshufd	$0x8, %xmm2, %xmm2
    000000c4: 	punpckldq	%xmm2, %xmm0
    000000c8: 	paddd	%xmm0, %xmm4
.Ltmp381:
    000000cc: 	movl	%esi, data32+32(%rip)
    000000d2: 	leaq	data32(%rip), %rdi
    000000d9: 	movq	%rbp, %rsi
    000000dc: 	movl	%ecx, data32+36(%rip)
    000000e2: 	movl	%edx, data32+40(%rip)
    000000e8: 	movaps	%xmm5, data32(%rip)
    000000ef: 	movaps	%xmm4, data32+16(%rip)
    000000f6: 	callq	_Z12check11_sumsIiEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 246
    000000fb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000102: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000109: 	subq	$0x20, %rax
    0000010d: 	cmpq	%rax, %rbx
    00000110: 	je	.Ltmp382 # Offset: 272
    00000116: 	leaq	0x10(%rbx), %rdi
    0000011a: 	movq	0x8(%rbp), %r12
    0000011e: 	movq	%rdi, (%rbx)
    00000121: 	movq	(%rbp), %r13
    00000125: 	movq	%r13, %rax
    00000128: 	addq	%r12, %rax
    0000012b: 	je	.Ltmp383 # Offset: 299
    0000012d: 	testq	%r13, %r13
    00000130: 	je	.Ltmp384 # Offset: 304
.Ltmp383:
    00000136: 	movq	%r12, (%rsp)
    0000013a: 	cmpq	$0xf, %r12
    0000013e: 	ja	.Ltmp385 # Offset: 318
    00000144: 	cmpq	$0x1, %r12
    00000148: 	jne	.Ltmp386 # Offset: 328
    0000014e: 	movzbl	(%r13), %eax
    00000153: 	movb	%al, 0x10(%rbx)
.Ltmp389:
    00000156: 	movq	%r12, 0x8(%rbx)
    0000015a: 	movb	$0x0, (%rdi,%r12)
    0000015f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000166: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016d: 	addq	$0x20, %rax
    00000171: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000178: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017f: 	je	.Ltmp387 # Offset: 383
.Ltmp390:
    00000185: 	movq	-0x20(%rax), %rbp
    00000189: 	callq	clock@PLT # Offset: 393
    0000018e: 	movq	%rax, end_time(%rip)
    00000195: 	movq	0x8(%rsp), %rdx
    0000019a: 	subq	%fs:0x28, %rdx
    000001a3: 	jne	.Ltmp388 # Offset: 419
    000001a9: 	subq	start_time(%rip), %rax
    000001b0: 	pxor	%xmm0, %xmm0
    000001b4: 	movq	%rbp, %rdi
    000001b7: 	cvtsi2sd	%rax, %xmm0
    000001bc: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001c4: 	addq	$0x18, %rsp
    000001c8: 	popq	%rbx
    000001c9: 	popq	%rbp
    000001ca: 	popq	%r12
    000001cc: 	popq	%r13
    000001ce: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 462
    000001d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp385:
    000001d8: 	movq	%rbx, %rdi
    000001db: 	movq	%rsp, %rsi
    000001de: 	xorl	%edx, %edx
    000001e0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 480
    000001e5: 	movq	%rax, (%rbx)
    000001e8: 	movq	%rax, %rdi
    000001eb: 	movq	(%rsp), %rax
    000001ef: 	movq	%rax, 0x10(%rbx)
.Ltmp391:
    000001f3: 	movq	%r12, %rdx
    000001f6: 	movq	%r13, %rsi
    000001f9: 	callq	memcpy@PLT # Offset: 505
    000001fe: 	movq	(%rsp), %r12
    00000202: 	movq	(%rbx), %rdi
    00000205: 	jmp	.Ltmp389 # Offset: 517
    0000020a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp382:
    00000210: 	movq	%rbp, %rsi
    00000213: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000021a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 538
    0000021f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000226: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000022d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000234: 	jne	.Ltmp390 # Offset: 564
.Ltmp387:
    0000023a: 	movq	-0x8(%rdx), %rax
    0000023e: 	addq	$0x200, %rax
    00000244: 	jmp	.Ltmp390 # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp386:
    00000250: 	testq	%r12, %r12
    00000253: 	je	.Ltmp389 # Offset: 595
    00000259: 	jmp	.Ltmp391 # Offset: 601
.Ltmp388:
    0000025b: 	callq	__stack_chk_fail@PLT # Offset: 603
.Ltmp384:
    00000260: 	leaq	DATAat0x17018(%rip), %rdi
    00000267: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 615
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct_global1Ii11test_structIiEXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct_global2Ii11test_structIiEXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 79
  State       : disassembled
  Address     : 0x9ae0
  Size        : 0x26c
  MaxSize     : 0x270
  Offset      : 0x9ae0
  Section     : .text
  Orc Section : .local.text._Z19test_struct_global2Ii11test_structIiEXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB078:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movdqa	data32(%rip), %xmm5
    0000002e: 	movdqa	data32+16(%rip), %xmm4
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	movl	iterations(%rip), %eax
    00000043: 	movl	data32+32(%rip), %esi
    00000049: 	movl	data32+36(%rip), %ecx
    0000004f: 	movl	data32+40(%rip), %edx
    00000055: 	testl	%eax, %eax
    00000057: 	jle	.Ltmp392 # Offset: 87
    00000059: 	movd	%eax, %xmm6
    0000005d: 	movdqa	DATAat0x17d70(%rip), %xmm1
    00000065: 	imull	$0x39, %eax, %edi
    00000068: 	pshufd	$0x0, %xmm6, %xmm0
    0000006d: 	movdqa	%xmm0, %xmm3
    00000071: 	movdqa	%xmm0, %xmm2
    00000075: 	pmuludq	%xmm1, %xmm3
    00000079: 	psrlq	$0x20, %xmm2
    0000007e: 	addl	%edi, %esi
    00000080: 	psrlq	$0x20, %xmm1
    00000085: 	imull	$0x3c, %eax, %edi
    00000088: 	pmuludq	%xmm2, %xmm1
    0000008c: 	imull	$0x37, %eax, %eax
    0000008f: 	addl	%edi, %edx
    00000091: 	pshufd	$0x8, %xmm3, %xmm3
    00000096: 	addl	%eax, %ecx
    00000098: 	pshufd	$0x8, %xmm1, %xmm1
    0000009d: 	punpckldq	%xmm1, %xmm3
    000000a1: 	movdqa	DATAat0x17d80(%rip), %xmm1
    000000a9: 	paddd	%xmm3, %xmm5
    000000ad: 	pmuludq	%xmm1, %xmm0
    000000b1: 	psrlq	$0x20, %xmm1
    000000b6: 	pmuludq	%xmm1, %xmm2
    000000ba: 	pshufd	$0x8, %xmm0, %xmm0
    000000bf: 	pshufd	$0x8, %xmm2, %xmm2
    000000c4: 	punpckldq	%xmm2, %xmm0
    000000c8: 	paddd	%xmm0, %xmm4
.Ltmp392:
    000000cc: 	movl	%esi, data32+32(%rip)
    000000d2: 	leaq	data32(%rip), %rdi
    000000d9: 	movq	%rbp, %rsi
    000000dc: 	movl	%ecx, data32+36(%rip)
    000000e2: 	movl	%edx, data32+40(%rip)
    000000e8: 	movaps	%xmm5, data32(%rip)
    000000ef: 	movaps	%xmm4, data32+16(%rip)
    000000f6: 	callq	_Z12check11_sumsIiEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 246
    000000fb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000102: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000109: 	subq	$0x20, %rax
    0000010d: 	cmpq	%rax, %rbx
    00000110: 	je	.Ltmp393 # Offset: 272
    00000116: 	leaq	0x10(%rbx), %rdi
    0000011a: 	movq	0x8(%rbp), %r12
    0000011e: 	movq	%rdi, (%rbx)
    00000121: 	movq	(%rbp), %r13
    00000125: 	movq	%r13, %rax
    00000128: 	addq	%r12, %rax
    0000012b: 	je	.Ltmp394 # Offset: 299
    0000012d: 	testq	%r13, %r13
    00000130: 	je	.Ltmp395 # Offset: 304
.Ltmp394:
    00000136: 	movq	%r12, (%rsp)
    0000013a: 	cmpq	$0xf, %r12
    0000013e: 	ja	.Ltmp396 # Offset: 318
    00000144: 	cmpq	$0x1, %r12
    00000148: 	jne	.Ltmp397 # Offset: 328
    0000014e: 	movzbl	(%r13), %eax
    00000153: 	movb	%al, 0x10(%rbx)
.Ltmp400:
    00000156: 	movq	%r12, 0x8(%rbx)
    0000015a: 	movb	$0x0, (%rdi,%r12)
    0000015f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000166: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016d: 	addq	$0x20, %rax
    00000171: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000178: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017f: 	je	.Ltmp398 # Offset: 383
.Ltmp401:
    00000185: 	movq	-0x20(%rax), %rbp
    00000189: 	callq	clock@PLT # Offset: 393
    0000018e: 	movq	%rax, end_time(%rip)
    00000195: 	movq	0x8(%rsp), %rdx
    0000019a: 	subq	%fs:0x28, %rdx
    000001a3: 	jne	.Ltmp399 # Offset: 419
    000001a9: 	subq	start_time(%rip), %rax
    000001b0: 	pxor	%xmm0, %xmm0
    000001b4: 	movq	%rbp, %rdi
    000001b7: 	cvtsi2sd	%rax, %xmm0
    000001bc: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001c4: 	addq	$0x18, %rsp
    000001c8: 	popq	%rbx
    000001c9: 	popq	%rbp
    000001ca: 	popq	%r12
    000001cc: 	popq	%r13
    000001ce: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 462
    000001d3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp396:
    000001d8: 	movq	%rbx, %rdi
    000001db: 	movq	%rsp, %rsi
    000001de: 	xorl	%edx, %edx
    000001e0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 480
    000001e5: 	movq	%rax, (%rbx)
    000001e8: 	movq	%rax, %rdi
    000001eb: 	movq	(%rsp), %rax
    000001ef: 	movq	%rax, 0x10(%rbx)
.Ltmp402:
    000001f3: 	movq	%r12, %rdx
    000001f6: 	movq	%r13, %rsi
    000001f9: 	callq	memcpy@PLT # Offset: 505
    000001fe: 	movq	(%rsp), %r12
    00000202: 	movq	(%rbx), %rdi
    00000205: 	jmp	.Ltmp400 # Offset: 517
    0000020a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp393:
    00000210: 	movq	%rbp, %rsi
    00000213: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000021a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 538
    0000021f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000226: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000022d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000234: 	jne	.Ltmp401 # Offset: 564
.Ltmp398:
    0000023a: 	movq	-0x8(%rdx), %rax
    0000023e: 	addq	$0x200, %rax
    00000244: 	jmp	.Ltmp401 # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp397:
    00000250: 	testq	%r12, %r12
    00000253: 	je	.Ltmp400 # Offset: 595
    00000259: 	jmp	.Ltmp402 # Offset: 601
.Ltmp399:
    0000025b: 	callq	__stack_chk_fail@PLT # Offset: 603
.Ltmp395:
    00000260: 	leaq	DATAat0x17018(%rip), %rdi
    00000267: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 615
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct_global2Ii11test_structIiEXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct_global2Im11test_structImEXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 80
  State       : disassembled
  Address     : 0x9d50
  Size        : 0x2f4
  MaxSize     : 0x300
  Offset      : 0x9d50
  Section     : .text
  Orc Section : .local.text._Z19test_struct_global2Im11test_structImEXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB079:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movdqa	data64(%rip), %xmm5
    0000002e: 	movdqa	data64+16(%rip), %xmm4
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	movl	iterations(%rip), %eax
    00000043: 	movdqa	data64+32(%rip), %xmm3
    0000004b: 	movdqa	data64+48(%rip), %xmm2
    00000053: 	movdqa	data64+64(%rip), %xmm0
    0000005b: 	movq	data64+64(%rip), %r8
    00000062: 	movq	data64+72(%rip), %rdi
    00000069: 	movq	data64+80(%rip), %rcx
    00000070: 	testl	%eax, %eax
    00000072: 	jle	.Ltmp403 # Offset: 114
    00000078: 	movd	%eax, %xmm6
    0000007c: 	pcmpeqd	%xmm1, %xmm1
    00000080: 	leal	-0x1(%rax), %edx
    00000083: 	pshufd	$0x0, %xmm6, %xmm0
    00000088: 	paddq	DATAat0x17d30(%rip), %xmm4
    00000090: 	paddq	DATAat0x17d20(%rip), %xmm5
    00000098: 	movq	%rdx, %rsi
    0000009b: 	paddd	%xmm1, %xmm0
    0000009f: 	movdqa	DATAat0x17d70(%rip), %xmm1
    000000a7: 	leaq	(,%rdx,8), %rax
    000000af: 	shlq	$0x4, %rsi
    000000b3: 	movdqa	%xmm0, %xmm6
    000000b7: 	subq	%rdx, %rax
    000000ba: 	subq	%rdx, %rsi
    000000bd: 	movdqa	%xmm1, %xmm7
    000000c1: 	punpckldq	%xmm0, %xmm6
    000000c5: 	punpckhdq	%xmm0, %xmm0
    000000c9: 	punpckldq	%xmm1, %xmm7
    000000cd: 	punpckhdq	%xmm1, %xmm1
    000000d1: 	paddq	DATAat0x17d50(%rip), %xmm2
    000000d9: 	pmuludq	%xmm0, %xmm1
    000000dd: 	pmuludq	%xmm6, %xmm7
    000000e1: 	leaq	(%rdx,%rax,8), %rax
    000000e5: 	addq	%r8, %rax
    000000e8: 	paddq	DATAat0x17d40(%rip), %xmm3
    000000f0: 	leaq	0x3c(%rcx,%rsi,4), %rcx
    000000f5: 	paddq	%xmm1, %xmm4
    000000f9: 	movdqa	DATAat0x17d80(%rip), %xmm1
    00000101: 	paddq	%xmm7, %xmm5
    00000105: 	movdqa	%xmm1, %xmm7
    00000109: 	punpckldq	%xmm1, %xmm7
    0000010d: 	punpckhdq	%xmm1, %xmm1
    00000111: 	pmuludq	%xmm1, %xmm0
    00000115: 	pmuludq	%xmm7, %xmm6
    00000119: 	paddq	%xmm0, %xmm2
    0000011d: 	movq	%rax, %xmm0
    00000122: 	leaq	(%rdx,%rdx,4), %rax
    00000126: 	leaq	(%rdx,%rax,2), %rax
    0000012a: 	paddq	%xmm6, %xmm3
    0000012e: 	leaq	(%rax,%rax,4), %rax
    00000132: 	addq	%rdi, %rax
    00000135: 	movq	%rax, %xmm6
    0000013a: 	punpcklqdq	%xmm6, %xmm0
    0000013e: 	paddq	DATAat0x17d60(%rip), %xmm0
.Ltmp403:
    00000146: 	movq	%rbp, %rsi
    00000149: 	leaq	data64(%rip), %rdi
    00000150: 	movq	%rcx, data64+80(%rip)
    00000157: 	movaps	%xmm5, data64(%rip)
    0000015e: 	movaps	%xmm4, data64+16(%rip)
    00000165: 	movaps	%xmm3, data64+32(%rip)
    0000016c: 	movaps	%xmm2, data64+48(%rip)
    00000173: 	movaps	%xmm0, data64+64(%rip)
    0000017a: 	callq	_Z12check11_sumsImEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 378
    0000017f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000186: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000018d: 	subq	$0x20, %rax
    00000191: 	cmpq	%rax, %rbx
    00000194: 	je	.Ltmp404 # Offset: 404
    0000019a: 	leaq	0x10(%rbx), %rdi
    0000019e: 	movq	0x8(%rbp), %r12
    000001a2: 	movq	%rdi, (%rbx)
    000001a5: 	movq	(%rbp), %r13
    000001a9: 	movq	%r13, %rax
    000001ac: 	addq	%r12, %rax
    000001af: 	je	.Ltmp405 # Offset: 431
    000001b1: 	testq	%r13, %r13
    000001b4: 	je	.Ltmp406 # Offset: 436
.Ltmp405:
    000001ba: 	movq	%r12, (%rsp)
    000001be: 	cmpq	$0xf, %r12
    000001c2: 	ja	.Ltmp407 # Offset: 450
    000001c8: 	cmpq	$0x1, %r12
    000001cc: 	jne	.Ltmp408 # Offset: 460
    000001d2: 	movzbl	(%r13), %eax
    000001d7: 	movb	%al, 0x10(%rbx)
.Ltmp411:
    000001da: 	movq	%r12, 0x8(%rbx)
    000001de: 	movb	$0x0, (%rdi,%r12)
    000001e3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ea: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f1: 	addq	$0x20, %rax
    000001f5: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001fc: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000203: 	je	.Ltmp409 # Offset: 515
.Ltmp412:
    00000209: 	movq	-0x20(%rax), %rbp
    0000020d: 	callq	clock@PLT # Offset: 525
    00000212: 	movq	%rax, end_time(%rip)
    00000219: 	movq	0x8(%rsp), %rdx
    0000021e: 	subq	%fs:0x28, %rdx
    00000227: 	jne	.Ltmp410 # Offset: 551
    0000022d: 	subq	start_time(%rip), %rax
    00000234: 	pxor	%xmm0, %xmm0
    00000238: 	movq	%rbp, %rdi
    0000023b: 	cvtsi2sd	%rax, %xmm0
    00000240: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000248: 	addq	$0x18, %rsp
    0000024c: 	popq	%rbx
    0000024d: 	popq	%rbp
    0000024e: 	popq	%r12
    00000250: 	popq	%r13
    00000252: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 594
    00000257: 	nopw	(%rax,%rax) # Size: 9
.Ltmp407:
    00000260: 	movq	%rbx, %rdi
    00000263: 	movq	%rsp, %rsi
    00000266: 	xorl	%edx, %edx
    00000268: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 616
    0000026d: 	movq	%rax, (%rbx)
    00000270: 	movq	%rax, %rdi
    00000273: 	movq	(%rsp), %rax
    00000277: 	movq	%rax, 0x10(%rbx)
.Ltmp413:
    0000027b: 	movq	%r12, %rdx
    0000027e: 	movq	%r13, %rsi
    00000281: 	callq	memcpy@PLT # Offset: 641
    00000286: 	movq	(%rsp), %r12
    0000028a: 	movq	(%rbx), %rdi
    0000028d: 	jmp	.Ltmp411 # Offset: 653
    00000292: 	nopw	(%rax,%rax) # Size: 6
.Ltmp404:
    00000298: 	movq	%rbp, %rsi
    0000029b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002a2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 674
    000002a7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ae: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002b5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002bc: 	jne	.Ltmp412 # Offset: 700
.Ltmp409:
    000002c2: 	movq	-0x8(%rdx), %rax
    000002c6: 	addq	$0x200, %rax
    000002cc: 	jmp	.Ltmp412 # Offset: 716
    000002d1: 	nopl	(%rax) # Size: 7
.Ltmp408:
    000002d8: 	testq	%r12, %r12
    000002db: 	je	.Ltmp411 # Offset: 731
    000002e1: 	jmp	.Ltmp413 # Offset: 737
.Ltmp410:
    000002e3: 	callq	__stack_chk_fail@PLT # Offset: 739
.Ltmp406:
    000002e8: 	leaq	DATAat0x17018(%rip), %rdi
    000002ef: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 751
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct_global2Im11test_structImEXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct_global1Im11test_structImEXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 81
  State       : disassembled
  Address     : 0xa050
  Size        : 0x2f4
  MaxSize     : 0x300
  Offset      : 0xa050
  Section     : .text
  Orc Section : .local.text._Z19test_struct_global1Im11test_structImEXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB080:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movdqa	data64(%rip), %xmm6
    0000002e: 	movdqa	data64+16(%rip), %xmm5
    00000036: 	movq	%rax, start_time(%rip)
    0000003d: 	movl	iterations(%rip), %eax
    00000043: 	movdqa	data64+32(%rip), %xmm4
    0000004b: 	movdqa	data64+48(%rip), %xmm3
    00000053: 	movdqa	data64+64(%rip), %xmm0
    0000005b: 	movq	data64+80(%rip), %r8
    00000062: 	testl	%eax, %eax
    00000064: 	jle	.Ltmp414 # Offset: 100
    0000006a: 	subl	$0x1, %eax
    0000006d: 	paddq	DATAat0x17d20(%rip), %xmm6
    00000075: 	paddq	DATAat0x17d30(%rip), %xmm5
    0000007d: 	leaq	(%rax,%rax,2), %rdx
    00000081: 	leaq	(,%rax,8), %rcx
    00000089: 	leaq	(%rax,%rdx,4), %rdx
    0000008d: 	leaq	(%rcx,%rax), %rdi
    00000091: 	subq	%rax, %rcx
    00000094: 	leaq	(,%rdx,4), %rsi
    0000009c: 	leaq	(,%rdi,4), %rbx
    000000a4: 	movq	%rsi, %xmm1
    000000a9: 	leaq	(%rax,%rax,4), %rsi
    000000ad: 	paddq	DATAat0x17d40(%rip), %xmm4
    000000b5: 	leaq	(,%rsi,8), %rdx
    000000bd: 	movq	%rbx, %xmm2
    000000c2: 	leaq	(%rax,%rcx,8), %rcx
    000000c6: 	movq	%rdx, %xmm7
    000000cb: 	leaq	(,%rsi,4), %rdx
    000000d3: 	paddq	DATAat0x17d50(%rip), %xmm3
    000000db: 	punpcklqdq	%xmm7, %xmm1
    000000df: 	movq	%rdx, %xmm7
    000000e4: 	movq	%rax, %rdx
    000000e7: 	paddq	%xmm1, %xmm6
    000000eb: 	shlq	$0x4, %rdx
    000000ef: 	movq	%rbx, %xmm1
    000000f4: 	subq	%rax, %rdx
    000000f7: 	punpcklqdq	%xmm7, %xmm1
    000000fb: 	movq	%rdi, %xmm7
    00000100: 	punpcklqdq	%xmm7, %xmm2
    00000104: 	leaq	(%rdx,%rdx), %rdi
    00000108: 	paddq	%xmm1, %xmm5
    0000010c: 	paddq	%xmm2, %xmm4
    00000110: 	movq	%rdx, %xmm1
    00000115: 	movq	%rdi, %xmm2
    0000011a: 	leaq	(%rax,%rsi,2), %rax
    0000011e: 	punpcklqdq	%xmm2, %xmm1
    00000122: 	leaq	0x3c(%r8,%rdx,4), %r8
    00000127: 	leaq	(%rax,%rax,4), %rax
    0000012b: 	paddq	DATAat0x17d60(%rip), %xmm0
    00000133: 	paddq	%xmm1, %xmm3
    00000137: 	movq	%rax, %xmm7
    0000013c: 	movq	%rcx, %xmm1
    00000141: 	punpcklqdq	%xmm7, %xmm1
    00000145: 	paddq	%xmm1, %xmm0
.Ltmp414:
    00000149: 	movq	%rbp, %rsi
    0000014c: 	leaq	data64(%rip), %rdi
    00000153: 	movq	%r8, data64+80(%rip)
    0000015a: 	movaps	%xmm6, data64(%rip)
    00000161: 	movaps	%xmm5, data64+16(%rip)
    00000168: 	movaps	%xmm4, data64+32(%rip)
    0000016f: 	movaps	%xmm3, data64+48(%rip)
    00000176: 	movaps	%xmm0, data64+64(%rip)
    0000017d: 	callq	_Z12check11_sumsImEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 381
    00000182: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000189: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000190: 	subq	$0x20, %rax
    00000194: 	cmpq	%rax, %rbx
    00000197: 	je	.Ltmp415 # Offset: 407
    0000019d: 	leaq	0x10(%rbx), %rdi
    000001a1: 	movq	0x8(%rbp), %r12
    000001a5: 	movq	%rdi, (%rbx)
    000001a8: 	movq	(%rbp), %r13
    000001ac: 	movq	%r13, %rax
    000001af: 	addq	%r12, %rax
    000001b2: 	je	.Ltmp416 # Offset: 434
    000001b4: 	testq	%r13, %r13
    000001b7: 	je	.Ltmp417 # Offset: 439
.Ltmp416:
    000001bd: 	movq	%r12, (%rsp)
    000001c1: 	cmpq	$0xf, %r12
    000001c5: 	ja	.Ltmp418 # Offset: 453
    000001cb: 	cmpq	$0x1, %r12
    000001cf: 	jne	.Ltmp419 # Offset: 463
    000001d5: 	movzbl	(%r13), %eax
    000001da: 	movb	%al, 0x10(%rbx)
.Ltmp422:
    000001dd: 	movq	%r12, 0x8(%rbx)
    000001e1: 	movb	$0x0, (%rdi,%r12)
    000001e6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ed: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f4: 	addq	$0x20, %rax
    000001f8: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001ff: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000206: 	je	.Ltmp420 # Offset: 518
.Ltmp423:
    0000020c: 	movq	-0x20(%rax), %rbp
    00000210: 	callq	clock@PLT # Offset: 528
    00000215: 	movq	%rax, end_time(%rip)
    0000021c: 	movq	0x8(%rsp), %rdx
    00000221: 	subq	%fs:0x28, %rdx
    0000022a: 	jne	.Ltmp421 # Offset: 554
    00000230: 	subq	start_time(%rip), %rax
    00000237: 	pxor	%xmm0, %xmm0
    0000023b: 	movq	%rbp, %rdi
    0000023e: 	cvtsi2sd	%rax, %xmm0
    00000243: 	divsd	DATAat0x17ca0(%rip), %xmm0
    0000024b: 	addq	$0x18, %rsp
    0000024f: 	popq	%rbx
    00000250: 	popq	%rbp
    00000251: 	popq	%r12
    00000253: 	popq	%r13
    00000255: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 597
    0000025a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp418:
    00000260: 	movq	%rbx, %rdi
    00000263: 	movq	%rsp, %rsi
    00000266: 	xorl	%edx, %edx
    00000268: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 616
    0000026d: 	movq	%rax, (%rbx)
    00000270: 	movq	%rax, %rdi
    00000273: 	movq	(%rsp), %rax
    00000277: 	movq	%rax, 0x10(%rbx)
.Ltmp424:
    0000027b: 	movq	%r12, %rdx
    0000027e: 	movq	%r13, %rsi
    00000281: 	callq	memcpy@PLT # Offset: 641
    00000286: 	movq	(%rsp), %r12
    0000028a: 	movq	(%rbx), %rdi
    0000028d: 	jmp	.Ltmp422 # Offset: 653
    00000292: 	nopw	(%rax,%rax) # Size: 6
.Ltmp415:
    00000298: 	movq	%rbp, %rsi
    0000029b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002a2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 674
    000002a7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ae: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002b5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002bc: 	jne	.Ltmp423 # Offset: 700
.Ltmp420:
    000002c2: 	movq	-0x8(%rdx), %rax
    000002c6: 	addq	$0x200, %rax
    000002cc: 	jmp	.Ltmp423 # Offset: 716
    000002d1: 	nopl	(%rax) # Size: 7
.Ltmp419:
    000002d8: 	testq	%r12, %r12
    000002db: 	je	.Ltmp422 # Offset: 731
    000002e1: 	jmp	.Ltmp424 # Offset: 737
.Ltmp421:
    000002e3: 	callq	__stack_chk_fail@PLT # Offset: 739
.Ltmp417:
    000002e8: 	leaq	DATAat0x17018(%rip), %rdi
    000002ef: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 751
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct_global1Im11test_structImEXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct_global1Is11test_structIsEXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 82
  State       : disassembled
  Address     : 0xa350
  Size        : 0x31c
  MaxSize     : 0x320
  Offset      : 0xa350
  Section     : .text
  Orc Section : .local.text._Z19test_struct_global1Is11test_structIsEXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB081:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	pushq	%r14
    00000008: 	pushq	%r13
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x18(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	callq	clock@PLT # Offset: 37
    0000002a: 	movdqa	data16(%rip), %xmm0
    00000032: 	movzwl	data16+2(%rip), %r14d
    0000003a: 	movq	%rax, start_time(%rip)
    00000041: 	movzwl	data16(%rip), %eax
    00000048: 	movzwl	data16+4(%rip), %edi
    0000004f: 	movzwl	data16+6(%rip), %r13d
    00000057: 	movw	%ax, 0x4(%rsp)
    0000005c: 	movzwl	data16+12(%rip), %eax
    00000063: 	movzwl	data16+8(%rip), %ecx
    0000006a: 	movzwl	data16+10(%rip), %r12d
    00000072: 	movw	%ax, 0x8(%rsp)
    00000077: 	movl	iterations(%rip), %eax
    0000007d: 	movzwl	data16+14(%rip), %r15d
    00000085: 	movzwl	data16+16(%rip), %r11d
    0000008d: 	movzwl	data16+18(%rip), %r10d
    00000095: 	movzwl	data16+20(%rip), %r9d
    0000009d: 	testl	%eax, %eax
    0000009f: 	jle	.Ltmp425 # Offset: 159
    000000a5: 	movd	%edi, %xmm2
    000000a9: 	movd	%ecx, %xmm0
    000000ad: 	movd	0x4(%rsp), %xmm1
    000000b3: 	subl	$0x1, %eax
    000000b6: 	leal	(,%rax,8), %esi
    000000bd: 	pinsrw	$0x1, %r13d, %xmm2
    000000c3: 	pinsrw	$0x1, %r14d, %xmm1
    000000c9: 	leal	(%rsi,%rax), %ebx
    000000cc: 	leal	(%rax,%rax,4), %ecx
    000000cf: 	punpckldq	%xmm2, %xmm1
    000000d3: 	subl	%eax, %esi
    000000d5: 	leal	(,%rbx,4), %r8d
    000000dd: 	pinsrw	$0x1, %ebx, %xmm0
    000000e2: 	leal	(,%rcx,4), %edi
    000000e9: 	movw	%r8w, 0xc(%rsp)
    000000ef: 	movl	%eax, %r8d
    000000f2: 	leal	(,%rcx,8), %ebx
    000000f9: 	leal	(%rax,%rcx,2), %ecx
    000000fc: 	shll	$0x4, %r8d
    00000100: 	leal	(%rax,%rsi,8), %esi
    00000103: 	leal	(%rcx,%rcx,4), %ecx
    00000106: 	subl	%eax, %r8d
    00000109: 	leal	0x39(%r11,%rsi), %r11d
    0000010e: 	leal	0x37(%r10,%rcx), %r10d
    00000113: 	leal	(%r8,%r8), %edx
    00000117: 	movd	%r8d, %xmm3
    0000011c: 	movd	0xc(%rsp), %xmm2
    00000122: 	pinsrw	$0x1, %edx, %xmm3
    00000127: 	leal	(%rax,%rax,2), %edx
    0000012a: 	movdqa	%xmm2, %xmm4
    0000012e: 	leal	(%rax,%rdx,4), %edx
    00000131: 	punpckldq	%xmm3, %xmm0
    00000135: 	movd	0x8(%rsp), %xmm3
    0000013b: 	shll	$0x2, %edx
    0000013e: 	punpcklqdq	%xmm0, %xmm1
    00000142: 	pinsrw	$0x1, %edi, %xmm4
    00000147: 	movd	%edx, %xmm0
    0000014b: 	pinsrw	$0x1, %r12d, %xmm2
    00000151: 	pinsrw	$0x1, %r15d, %xmm3
    00000157: 	pinsrw	$0x1, %ebx, %xmm0
    0000015c: 	punpckldq	%xmm3, %xmm2
    00000160: 	leal	0x3c(%r9,%r8,4), %r9d
    00000165: 	punpckldq	%xmm4, %xmm0
    00000169: 	punpcklqdq	%xmm2, %xmm0
    0000016d: 	paddw	%xmm1, %xmm0
    00000171: 	paddw	DATAat0x17d90(%rip), %xmm0
.Ltmp425:
    00000179: 	movq	%rbp, %rsi
    0000017c: 	leaq	data16(%rip), %rdi
    00000183: 	movw	%r11w, data16+16(%rip)
    0000018b: 	movw	%r10w, data16+18(%rip)
    00000193: 	movw	%r9w, data16+20(%rip)
    0000019b: 	movaps	%xmm0, data16(%rip)
    000001a2: 	callq	_Z12check11_sumsIsEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 418
    000001a7: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001ae: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001b5: 	subq	$0x20, %rax
    000001b9: 	cmpq	%rax, %rbx
    000001bc: 	je	.Ltmp426 # Offset: 444
    000001c2: 	leaq	0x10(%rbx), %rdi
    000001c6: 	movq	0x8(%rbp), %r12
    000001ca: 	movq	%rdi, (%rbx)
    000001cd: 	movq	(%rbp), %r13
    000001d1: 	movq	%r13, %rax
    000001d4: 	addq	%r12, %rax
    000001d7: 	je	.Ltmp427 # Offset: 471
    000001d9: 	testq	%r13, %r13
    000001dc: 	je	.Ltmp428 # Offset: 476
.Ltmp427:
    000001e2: 	movq	%r12, 0x10(%rsp)
    000001e7: 	cmpq	$0xf, %r12
    000001eb: 	ja	.Ltmp429 # Offset: 491
    000001f1: 	cmpq	$0x1, %r12
    000001f5: 	jne	.Ltmp430 # Offset: 501
    000001fb: 	movzbl	(%r13), %eax
    00000200: 	movb	%al, 0x10(%rbx)
.Ltmp433:
    00000203: 	movq	%r12, 0x8(%rbx)
    00000207: 	movb	$0x0, (%rdi,%r12)
    0000020c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000213: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000021a: 	addq	$0x20, %rax
    0000021e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000225: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000022c: 	je	.Ltmp431 # Offset: 556
.Ltmp434:
    00000232: 	movq	-0x20(%rax), %rbp
    00000236: 	callq	clock@PLT # Offset: 566
    0000023b: 	movq	%rax, end_time(%rip)
    00000242: 	movq	0x18(%rsp), %rdx
    00000247: 	subq	%fs:0x28, %rdx
    00000250: 	jne	.Ltmp432 # Offset: 592
    00000256: 	subq	start_time(%rip), %rax
    0000025d: 	pxor	%xmm0, %xmm0
    00000261: 	movq	%rbp, %rdi
    00000264: 	cvtsi2sd	%rax, %xmm0
    00000269: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000271: 	addq	$0x28, %rsp
    00000275: 	popq	%rbx
    00000276: 	popq	%rbp
    00000277: 	popq	%r12
    00000279: 	popq	%r13
    0000027b: 	popq	%r14
    0000027d: 	popq	%r15
    0000027f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 639
    00000284: 	nopl	(%rax) # Size: 4
.Ltmp429:
    00000288: 	movq	%rbx, %rdi
    0000028b: 	leaq	0x10(%rsp), %rsi
    00000290: 	xorl	%edx, %edx
    00000292: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 658
    00000297: 	movq	%rax, (%rbx)
    0000029a: 	movq	%rax, %rdi
    0000029d: 	movq	0x10(%rsp), %rax
    000002a2: 	movq	%rax, 0x10(%rbx)
.Ltmp435:
    000002a6: 	movq	%r12, %rdx
    000002a9: 	movq	%r13, %rsi
    000002ac: 	callq	memcpy@PLT # Offset: 684
    000002b1: 	movq	0x10(%rsp), %r12
    000002b6: 	movq	(%rbx), %rdi
    000002b9: 	jmp	.Ltmp433 # Offset: 697
    000002be: 	nop # Size: 2
.Ltmp426:
    000002c0: 	movq	%rbp, %rsi
    000002c3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002ca: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 714
    000002cf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002d6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002dd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002e4: 	jne	.Ltmp434 # Offset: 740
.Ltmp431:
    000002ea: 	movq	-0x8(%rdx), %rax
    000002ee: 	addq	$0x200, %rax
    000002f4: 	jmp	.Ltmp434 # Offset: 756
    000002f9: 	nopl	(%rax) # Size: 7
.Ltmp430:
    00000300: 	testq	%r12, %r12
    00000303: 	je	.Ltmp433 # Offset: 771
    00000309: 	jmp	.Ltmp435 # Offset: 777
.Ltmp432:
    0000030b: 	callq	__stack_chk_fail@PLT # Offset: 779
.Ltmp428:
    00000310: 	leaq	DATAat0x17018(%rip), %rdi
    00000317: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 791
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct_global1Is11test_structIsEXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct5_local1ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 83
  State       : disassembled
  Address     : 0xa670
  Size        : 0x267
  MaxSize     : 0x270
  Offset      : 0xa670
  Section     : .text
  Orc Section : .local.text._Z19test_struct5_local1ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB082:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movslq	init_value(%rip), %rbx
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x8(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	callq	clock@PLT # Offset: 40
    0000002d: 	movq	%rax, start_time(%rip)
    00000034: 	movslq	iterations(%rip), %rax
    0000003b: 	testl	%eax, %eax
    0000003d: 	jle	.Ltmp436 # Offset: 61
    00000043: 	leal	-0x1(%rax), %edx
    00000046: 	leaq	(%rdx,%rdx,2), %rcx
    0000004a: 	leaq	(%rdx,%rcx,4), %rcx
    0000004e: 	leaq	0x34(%rbx,%rcx,4), %rdi
    00000053: 	leaq	(%rdx,%rdx,4), %rcx
    00000057: 	leaq	(%rdx,%rdx,8), %rdx
    0000005b: 	leaq	0x28(%rbx,%rcx,8), %r9
    00000060: 	leaq	0x24(%rbx,%rdx,4), %r8
    00000065: 	leaq	0x14(%rbx,%rcx,4), %rbx
.Ltmp449:
    0000006a: 	leaq	(%rax,%rax,2), %rdx
    0000006e: 	movslq	init_value(%rip), %rcx
    00000075: 	shlq	$0x2, %rdx
    00000079: 	leaq	(%rdx,%rax), %rsi
    0000007d: 	leaq	(%rcx,%rsi,4), %rsi
    00000081: 	movq	%rsi, %rcx
    00000084: 	subq	%rdx, %rcx
    00000087: 	cmpq	%rdi, %rsi
    0000008a: 	jne	.Ltmp437 # Offset: 138
    00000090: 	cmpq	%rcx, %r9
    00000093: 	jne	.Ltmp437 # Offset: 147
    00000099: 	leaq	(,%rax,4), %rdx
    000000a1: 	shlq	$0x4, %rax
    000000a5: 	subq	%rdx, %rcx
    000000a8: 	movq	%rcx, %rdx
    000000ab: 	subq	%rax, %rdx
    000000ae: 	cmpq	%rbx, %rdx
    000000b1: 	jne	.Ltmp437 # Offset: 177
    000000b7: 	cmpq	%r8, %rcx
    000000ba: 	jne	.Ltmp437 # Offset: 186
.Ltmp445:
    000000c0: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ce: 	subq	$0x20, %rax
    000000d2: 	cmpq	%rax, %rbx
    000000d5: 	je	.Ltmp438 # Offset: 213
    000000db: 	leaq	0x10(%rbx), %rdi
    000000df: 	movq	0x8(%rbp), %r12
    000000e3: 	movq	%rdi, (%rbx)
    000000e6: 	movq	(%rbp), %r13
    000000ea: 	movq	%r13, %rax
    000000ed: 	addq	%r12, %rax
    000000f0: 	je	.Ltmp439 # Offset: 240
    000000f2: 	testq	%r13, %r13
    000000f5: 	je	.Ltmp440 # Offset: 245
.Ltmp439:
    000000fb: 	movq	%r12, (%rsp)
    000000ff: 	cmpq	$0xf, %r12
    00000103: 	ja	.Ltmp441 # Offset: 259
    00000109: 	cmpq	$0x1, %r12
    0000010d: 	jne	.Ltmp442 # Offset: 269
    00000113: 	movzbl	(%r13), %eax
    00000118: 	movb	%al, 0x10(%rbx)
.Ltmp446:
    0000011b: 	movq	%r12, 0x8(%rbx)
    0000011f: 	movb	$0x0, (%rdi,%r12)
    00000124: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000012b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000132: 	addq	$0x20, %rax
    00000136: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000013d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000144: 	je	.Ltmp443 # Offset: 324
.Ltmp447:
    0000014a: 	movq	-0x20(%rax), %rbp
    0000014e: 	callq	clock@PLT # Offset: 334
    00000153: 	movq	%rax, end_time(%rip)
    0000015a: 	movq	0x8(%rsp), %rdx
    0000015f: 	subq	%fs:0x28, %rdx
    00000168: 	jne	.Ltmp444 # Offset: 360
    0000016e: 	subq	start_time(%rip), %rax
    00000175: 	pxor	%xmm0, %xmm0
    00000179: 	movq	%rbp, %rdi
    0000017c: 	cvtsi2sd	%rax, %xmm0
    00000181: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000189: 	addq	$0x18, %rsp
    0000018d: 	popq	%rbx
    0000018e: 	popq	%rbp
    0000018f: 	popq	%r12
    00000191: 	popq	%r13
    00000193: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 403
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp437:
    000001a0: 	movq	(%rbp), %rdx
    000001a4: 	leaq	DATAat0x17004(%rip), %rsi
    000001ab: 	movl	$0x1, %edi
    000001b0: 	xorl	%eax, %eax
    000001b2: 	callq	__printf_chk@PLT # Offset: 434
    000001b7: 	jmp	.Ltmp445 # Offset: 439
    000001bc: 	nopl	(%rax) # Size: 4
.Ltmp441:
    000001c0: 	movq	%rbx, %rdi
    000001c3: 	movq	%rsp, %rsi
    000001c6: 	xorl	%edx, %edx
    000001c8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 456
    000001cd: 	movq	%rax, (%rbx)
    000001d0: 	movq	%rax, %rdi
    000001d3: 	movq	(%rsp), %rax
    000001d7: 	movq	%rax, 0x10(%rbx)
.Ltmp448:
    000001db: 	movq	%r12, %rdx
    000001de: 	movq	%r13, %rsi
    000001e1: 	callq	memcpy@PLT # Offset: 481
    000001e6: 	movq	(%rsp), %r12
    000001ea: 	movq	(%rbx), %rdi
    000001ed: 	jmp	.Ltmp446 # Offset: 493
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp438:
    000001f8: 	movq	%rbp, %rsi
    000001fb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000202: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 514
    00000207: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000020e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000215: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000021c: 	jne	.Ltmp447 # Offset: 540
.Ltmp443:
    00000222: 	movq	-0x8(%rdx), %rax
    00000226: 	addq	$0x200, %rax
    0000022c: 	jmp	.Ltmp447 # Offset: 556
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp442:
    00000238: 	testq	%r12, %r12
    0000023b: 	je	.Ltmp446 # Offset: 571
    00000241: 	jmp	.Ltmp448 # Offset: 577
    00000243: 	nopl	(%rax,%rax) # Size: 5
.Ltmp436:
    00000248: 	movq	%rbx, %r8
    0000024b: 	movq	%rbx, %r9
    0000024e: 	movq	%rbx, %rdi
    00000251: 	jmp	.Ltmp449 # Offset: 593
.Ltmp440:
    00000256: 	leaq	DATAat0x17018(%rip), %rdi
    0000025d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 605
.Ltmp444:
    00000262: 	callq	__stack_chk_fail@PLT # Offset: 610
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct5_local1ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct5_local2IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 84
  State       : disassembled
  Address     : 0xa8e0
  Size        : 0x246
  MaxSize     : 0x250
  Offset      : 0xa8e0
  Section     : .text
  Orc Section : .local.text._Z19test_struct5_local2IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB083:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movl	init_value(%rip), %ebx
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x8(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	movq	%rax, start_time(%rip)
    00000033: 	movl	iterations(%rip), %eax
    00000039: 	testl	%eax, %eax
    0000003b: 	jle	.Ltmp450 # Offset: 59
    00000041: 	imull	$0x34, %eax, %ecx
    00000044: 	movl	%ebx, %edx
    00000046: 	leal	(%rax,%rax,8), %esi
    00000049: 	leal	(%rdx,%rsi,4), %r9d
    0000004d: 	addl	%ecx, %ebx
    0000004f: 	leal	(%rax,%rax,4), %ecx
    00000052: 	leal	(%rdx,%rcx,4), %r8d
    00000056: 	leal	(%rdx,%rcx,8), %edi
.Ltmp463:
    00000059: 	imull	$0x34, %eax, %edx
    0000005c: 	leal	(%rax,%rax,2), %esi
    0000005f: 	addl	init_value(%rip), %edx
    00000065: 	shll	$0x2, %esi
    00000068: 	movl	%edx, %ecx
    0000006a: 	subl	%esi, %ecx
    0000006c: 	cmpl	%ebx, %edx
    0000006e: 	jne	.Ltmp451 # Offset: 110
    00000074: 	cmpl	%ecx, %edi
    00000076: 	jne	.Ltmp451 # Offset: 118
    0000007c: 	leal	(,%rax,4), %edx
    00000083: 	shll	$0x4, %eax
    00000086: 	subl	%edx, %ecx
    00000088: 	movl	%ecx, %edx
    0000008a: 	subl	%eax, %edx
    0000008c: 	cmpl	%r8d, %edx
    0000008f: 	jne	.Ltmp451 # Offset: 143
    00000095: 	cmpl	%r9d, %ecx
    00000098: 	jne	.Ltmp451 # Offset: 152
.Ltmp459:
    0000009e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000a5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ac: 	subq	$0x20, %rax
    000000b0: 	cmpq	%rax, %rbx
    000000b3: 	je	.Ltmp452 # Offset: 179
    000000b9: 	leaq	0x10(%rbx), %rdi
    000000bd: 	movq	0x8(%rbp), %r12
    000000c1: 	movq	%rdi, (%rbx)
    000000c4: 	movq	(%rbp), %r13
    000000c8: 	movq	%r13, %rax
    000000cb: 	addq	%r12, %rax
    000000ce: 	je	.Ltmp453 # Offset: 206
    000000d0: 	testq	%r13, %r13
    000000d3: 	je	.Ltmp454 # Offset: 211
.Ltmp453:
    000000d9: 	movq	%r12, (%rsp)
    000000dd: 	cmpq	$0xf, %r12
    000000e1: 	ja	.Ltmp455 # Offset: 225
    000000e7: 	cmpq	$0x1, %r12
    000000eb: 	jne	.Ltmp456 # Offset: 235
    000000f1: 	movzbl	(%r13), %eax
    000000f6: 	movb	%al, 0x10(%rbx)
.Ltmp460:
    000000f9: 	movq	%r12, 0x8(%rbx)
    000000fd: 	movb	$0x0, (%rdi,%r12)
    00000102: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000109: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000110: 	addq	$0x20, %rax
    00000114: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000011b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000122: 	je	.Ltmp457 # Offset: 290
.Ltmp461:
    00000128: 	movq	-0x20(%rax), %rbp
    0000012c: 	callq	clock@PLT # Offset: 300
    00000131: 	movq	%rax, end_time(%rip)
    00000138: 	movq	0x8(%rsp), %rdx
    0000013d: 	subq	%fs:0x28, %rdx
    00000146: 	jne	.Ltmp458 # Offset: 326
    0000014c: 	subq	start_time(%rip), %rax
    00000153: 	pxor	%xmm0, %xmm0
    00000157: 	movq	%rbp, %rdi
    0000015a: 	cvtsi2sd	%rax, %xmm0
    0000015f: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000167: 	addq	$0x18, %rsp
    0000016b: 	popq	%rbx
    0000016c: 	popq	%rbp
    0000016d: 	popq	%r12
    0000016f: 	popq	%r13
    00000171: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 369
    00000176: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp451:
    00000180: 	movq	(%rbp), %rdx
    00000184: 	leaq	DATAat0x17004(%rip), %rsi
    0000018b: 	movl	$0x1, %edi
    00000190: 	xorl	%eax, %eax
    00000192: 	callq	__printf_chk@PLT # Offset: 402
    00000197: 	jmp	.Ltmp459 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp455:
    000001a0: 	movq	%rbx, %rdi
    000001a3: 	movq	%rsp, %rsi
    000001a6: 	xorl	%edx, %edx
    000001a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 424
    000001ad: 	movq	%rax, (%rbx)
    000001b0: 	movq	%rax, %rdi
    000001b3: 	movq	(%rsp), %rax
    000001b7: 	movq	%rax, 0x10(%rbx)
.Ltmp462:
    000001bb: 	movq	%r12, %rdx
    000001be: 	movq	%r13, %rsi
    000001c1: 	callq	memcpy@PLT # Offset: 449
    000001c6: 	movq	(%rsp), %r12
    000001ca: 	movq	(%rbx), %rdi
    000001cd: 	jmp	.Ltmp460 # Offset: 461
    000001d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp452:
    000001d8: 	movq	%rbp, %rsi
    000001db: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001e2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 482
    000001e7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ee: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001f5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001fc: 	jne	.Ltmp461 # Offset: 508
.Ltmp457:
    00000202: 	movq	-0x8(%rdx), %rax
    00000206: 	addq	$0x200, %rax
    0000020c: 	jmp	.Ltmp461 # Offset: 524
    00000211: 	nopl	(%rax) # Size: 7
.Ltmp456:
    00000218: 	testq	%r12, %r12
    0000021b: 	je	.Ltmp460 # Offset: 539
    00000221: 	jmp	.Ltmp462 # Offset: 545
    00000223: 	nopl	(%rax,%rax) # Size: 5
.Ltmp450:
    00000228: 	movl	%ebx, %r8d
    0000022b: 	movl	%ebx, %r9d
    0000022e: 	movl	%ebx, %edi
    00000230: 	jmp	.Ltmp463 # Offset: 560
.Ltmp454:
    00000235: 	leaq	DATAat0x17018(%rip), %rdi
    0000023c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 572
.Ltmp458:
    00000241: 	callq	__stack_chk_fail@PLT # Offset: 577
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct5_local2IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct5_local1IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 85
  State       : disassembled
  Address     : 0xab30
  Size        : 0x25a
  MaxSize     : 0x260
  Offset      : 0xab30
  Section     : .text
  Orc Section : .local.text._Z19test_struct5_local1IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB084:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movl	init_value(%rip), %r12d
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x8(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	callq	clock@PLT # Offset: 40
    0000002d: 	movl	iterations(%rip), %edx
    00000033: 	movq	%rax, start_time(%rip)
    0000003a: 	testl	%edx, %edx
    0000003c: 	jle	.Ltmp464 # Offset: 60
    00000042: 	leal	-0x1(%rdx), %eax
    00000045: 	leal	(%rax,%rax,2), %ebx
    00000048: 	leal	(%rax,%rax,4), %ecx
    0000004b: 	leal	(%rax,%rbx,4), %ebx
    0000004e: 	leal	(%rax,%rax,8), %eax
    00000051: 	leal	0x34(%r12,%rbx,4), %ebx
    00000056: 	leal	0x28(%r12,%rcx,8), %r8d
    0000005b: 	leal	0x24(%r12,%rax,4), %eax
    00000060: 	leal	0x14(%r12,%rcx,4), %r9d
.Ltmp477:
    00000065: 	leal	(%rdx,%rdx,2), %esi
    00000068: 	shll	$0x2, %esi
    0000006b: 	leal	(%rsi,%rdx), %ecx
    0000006e: 	shll	$0x2, %ecx
    00000071: 	addw	init_value(%rip), %cx
    00000078: 	movl	%ecx, %edi
    0000007a: 	subl	%esi, %edi
    0000007c: 	cmpw	%bx, %cx
    0000007f: 	jne	.Ltmp465 # Offset: 127
    00000085: 	cmpw	%r8w, %di
    00000089: 	jne	.Ltmp465 # Offset: 137
    0000008f: 	leal	(,%rdx,4), %ecx
    00000096: 	shll	$0x4, %edx
    00000099: 	subl	%ecx, %edi
    0000009b: 	movl	%edi, %ecx
    0000009d: 	subl	%edx, %ecx
    0000009f: 	cmpw	%r9w, %cx
    000000a3: 	jne	.Ltmp465 # Offset: 163
    000000a9: 	cmpw	%ax, %di
    000000ac: 	jne	.Ltmp465 # Offset: 172
.Ltmp473:
    000000b2: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000b9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000c0: 	subq	$0x20, %rax
    000000c4: 	cmpq	%rax, %rbx
    000000c7: 	je	.Ltmp466 # Offset: 199
    000000cd: 	leaq	0x10(%rbx), %rdi
    000000d1: 	movq	0x8(%rbp), %r12
    000000d5: 	movq	%rdi, (%rbx)
    000000d8: 	movq	(%rbp), %r13
    000000dc: 	movq	%r13, %rax
    000000df: 	addq	%r12, %rax
    000000e2: 	je	.Ltmp467 # Offset: 226
    000000e4: 	testq	%r13, %r13
    000000e7: 	je	.Ltmp468 # Offset: 231
.Ltmp467:
    000000ed: 	movq	%r12, (%rsp)
    000000f1: 	cmpq	$0xf, %r12
    000000f5: 	ja	.Ltmp469 # Offset: 245
    000000fb: 	cmpq	$0x1, %r12
    000000ff: 	jne	.Ltmp470 # Offset: 255
    00000105: 	movzbl	(%r13), %eax
    0000010a: 	movb	%al, 0x10(%rbx)
.Ltmp474:
    0000010d: 	movq	%r12, 0x8(%rbx)
    00000111: 	movb	$0x0, (%rdi,%r12)
    00000116: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000011d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000124: 	addq	$0x20, %rax
    00000128: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000012f: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000136: 	je	.Ltmp471 # Offset: 310
.Ltmp475:
    0000013c: 	movq	-0x20(%rax), %rbp
    00000140: 	callq	clock@PLT # Offset: 320
    00000145: 	movq	%rax, end_time(%rip)
    0000014c: 	movq	0x8(%rsp), %rdx
    00000151: 	subq	%fs:0x28, %rdx
    0000015a: 	jne	.Ltmp472 # Offset: 346
    00000160: 	subq	start_time(%rip), %rax
    00000167: 	pxor	%xmm0, %xmm0
    0000016b: 	movq	%rbp, %rdi
    0000016e: 	cvtsi2sd	%rax, %xmm0
    00000173: 	divsd	DATAat0x17ca0(%rip), %xmm0
    0000017b: 	addq	$0x18, %rsp
    0000017f: 	popq	%rbx
    00000180: 	popq	%rbp
    00000181: 	popq	%r12
    00000183: 	popq	%r13
    00000185: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 389
    0000018a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp465:
    00000190: 	movq	(%rbp), %rdx
    00000194: 	leaq	DATAat0x17004(%rip), %rsi
    0000019b: 	movl	$0x1, %edi
    000001a0: 	xorl	%eax, %eax
    000001a2: 	callq	__printf_chk@PLT # Offset: 418
    000001a7: 	jmp	.Ltmp473 # Offset: 423
    000001ac: 	nopl	(%rax) # Size: 4
.Ltmp469:
    000001b0: 	movq	%rbx, %rdi
    000001b3: 	movq	%rsp, %rsi
    000001b6: 	xorl	%edx, %edx
    000001b8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 440
    000001bd: 	movq	%rax, (%rbx)
    000001c0: 	movq	%rax, %rdi
    000001c3: 	movq	(%rsp), %rax
    000001c7: 	movq	%rax, 0x10(%rbx)
.Ltmp476:
    000001cb: 	movq	%r12, %rdx
    000001ce: 	movq	%r13, %rsi
    000001d1: 	callq	memcpy@PLT # Offset: 465
    000001d6: 	movq	(%rsp), %r12
    000001da: 	movq	(%rbx), %rdi
    000001dd: 	jmp	.Ltmp474 # Offset: 477
    000001e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp466:
    000001e8: 	movq	%rbp, %rsi
    000001eb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001f2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 498
    000001f7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001fe: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000205: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000020c: 	jne	.Ltmp475 # Offset: 524
.Ltmp471:
    00000212: 	movq	-0x8(%rdx), %rax
    00000216: 	addq	$0x200, %rax
    0000021c: 	jmp	.Ltmp475 # Offset: 540
    00000221: 	nopl	(%rax) # Size: 7
.Ltmp470:
    00000228: 	testq	%r12, %r12
    0000022b: 	je	.Ltmp474 # Offset: 555
    00000231: 	jmp	.Ltmp476 # Offset: 561
    00000233: 	nopl	(%rax,%rax) # Size: 5
.Ltmp464:
    00000238: 	movl	%r12d, %ebx
    0000023b: 	movl	%r12d, %r9d
    0000023e: 	movl	%r12d, %eax
    00000241: 	movl	%r12d, %r8d
    00000244: 	jmp	.Ltmp477 # Offset: 580
.Ltmp468:
    00000249: 	leaq	DATAat0x17018(%rip), %rdi
    00000250: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 592
.Ltmp472:
    00000255: 	callq	__stack_chk_fail@PLT # Offset: 597
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct5_local1IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct5_local2IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 86
  State       : disassembled
  Address     : 0xad90
  Size        : 0x255
  MaxSize     : 0x260
  Offset      : 0xad90
  Section     : .text
  Orc Section : .local.text._Z19test_struct5_local2IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB085:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movl	init_value(%rip), %ebx
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x8(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	movl	iterations(%rip), %edx
    00000032: 	movq	%rax, start_time(%rip)
    00000039: 	testl	%edx, %edx
    0000003b: 	jle	.Ltmp478 # Offset: 59
    00000041: 	leal	-0x1(%rdx), %eax
    00000044: 	leal	(%rax,%rax,2), %r12d
    00000048: 	leal	(%rax,%rax,4), %ecx
    0000004b: 	leal	(%rax,%r12,4), %r12d
    0000004f: 	leal	(%rax,%rax,8), %eax
    00000052: 	leal	0x34(%rbx,%r12,4), %r12d
    00000057: 	leal	0x14(%rbx,%rcx,4), %edi
    0000005b: 	leal	0x24(%rbx,%rax,4), %eax
    0000005f: 	leal	0x28(%rbx,%rcx,8), %ebx
.Ltmp491:
    00000063: 	leal	(%rdx,%rdx,2), %esi
    00000066: 	shll	$0x2, %esi
    00000069: 	leal	(%rsi,%rdx), %ecx
    0000006c: 	shll	$0x2, %ecx
    0000006f: 	addw	init_value(%rip), %cx
    00000076: 	movl	%ecx, %r8d
    00000079: 	subl	%esi, %r8d
    0000007c: 	cmpw	%r12w, %cx
    00000080: 	jne	.Ltmp479 # Offset: 128
    00000086: 	cmpw	%bx, %r8w
    0000008a: 	jne	.Ltmp479 # Offset: 138
    00000090: 	leal	(,%rdx,4), %ecx
    00000097: 	shll	$0x4, %edx
    0000009a: 	subl	%ecx, %r8d
    0000009d: 	movl	%r8d, %ecx
    000000a0: 	subl	%edx, %ecx
    000000a2: 	cmpw	%di, %cx
    000000a5: 	jne	.Ltmp479 # Offset: 165
    000000ab: 	cmpw	%ax, %r8w
    000000af: 	jne	.Ltmp479 # Offset: 175
.Ltmp487:
    000000b5: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000bc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000c3: 	subq	$0x20, %rax
    000000c7: 	cmpq	%rax, %rbx
    000000ca: 	je	.Ltmp480 # Offset: 202
    000000d0: 	leaq	0x10(%rbx), %rdi
    000000d4: 	movq	0x8(%rbp), %r12
    000000d8: 	movq	%rdi, (%rbx)
    000000db: 	movq	(%rbp), %r13
    000000df: 	movq	%r13, %rax
    000000e2: 	addq	%r12, %rax
    000000e5: 	je	.Ltmp481 # Offset: 229
    000000e7: 	testq	%r13, %r13
    000000ea: 	je	.Ltmp482 # Offset: 234
.Ltmp481:
    000000f0: 	movq	%r12, (%rsp)
    000000f4: 	cmpq	$0xf, %r12
    000000f8: 	ja	.Ltmp483 # Offset: 248
    000000fe: 	cmpq	$0x1, %r12
    00000102: 	jne	.Ltmp484 # Offset: 258
    00000108: 	movzbl	(%r13), %eax
    0000010d: 	movb	%al, 0x10(%rbx)
.Ltmp488:
    00000110: 	movq	%r12, 0x8(%rbx)
    00000114: 	movb	$0x0, (%rdi,%r12)
    00000119: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000120: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000127: 	addq	$0x20, %rax
    0000012b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000132: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000139: 	je	.Ltmp485 # Offset: 313
.Ltmp489:
    0000013f: 	movq	-0x20(%rax), %rbp
    00000143: 	callq	clock@PLT # Offset: 323
    00000148: 	movq	%rax, end_time(%rip)
    0000014f: 	movq	0x8(%rsp), %rdx
    00000154: 	subq	%fs:0x28, %rdx
    0000015d: 	jne	.Ltmp486 # Offset: 349
    00000163: 	subq	start_time(%rip), %rax
    0000016a: 	pxor	%xmm0, %xmm0
    0000016e: 	movq	%rbp, %rdi
    00000171: 	cvtsi2sd	%rax, %xmm0
    00000176: 	divsd	DATAat0x17ca0(%rip), %xmm0
    0000017e: 	addq	$0x18, %rsp
    00000182: 	popq	%rbx
    00000183: 	popq	%rbp
    00000184: 	popq	%r12
    00000186: 	popq	%r13
    00000188: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 392
    0000018d: 	nopl	(%rax) # Size: 3
.Ltmp479:
    00000190: 	movq	(%rbp), %rdx
    00000194: 	leaq	DATAat0x17004(%rip), %rsi
    0000019b: 	movl	$0x1, %edi
    000001a0: 	xorl	%eax, %eax
    000001a2: 	callq	__printf_chk@PLT # Offset: 418
    000001a7: 	jmp	.Ltmp487 # Offset: 423
    000001ac: 	nopl	(%rax) # Size: 4
.Ltmp483:
    000001b0: 	movq	%rbx, %rdi
    000001b3: 	movq	%rsp, %rsi
    000001b6: 	xorl	%edx, %edx
    000001b8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 440
    000001bd: 	movq	%rax, (%rbx)
    000001c0: 	movq	%rax, %rdi
    000001c3: 	movq	(%rsp), %rax
    000001c7: 	movq	%rax, 0x10(%rbx)
.Ltmp490:
    000001cb: 	movq	%r12, %rdx
    000001ce: 	movq	%r13, %rsi
    000001d1: 	callq	memcpy@PLT # Offset: 465
    000001d6: 	movq	(%rsp), %r12
    000001da: 	movq	(%rbx), %rdi
    000001dd: 	jmp	.Ltmp488 # Offset: 477
    000001e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp480:
    000001e8: 	movq	%rbp, %rsi
    000001eb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001f2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 498
    000001f7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001fe: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000205: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000020c: 	jne	.Ltmp489 # Offset: 524
.Ltmp485:
    00000212: 	movq	-0x8(%rdx), %rax
    00000216: 	addq	$0x200, %rax
    0000021c: 	jmp	.Ltmp489 # Offset: 540
    00000221: 	nopl	(%rax) # Size: 7
.Ltmp484:
    00000228: 	testq	%r12, %r12
    0000022b: 	je	.Ltmp488 # Offset: 555
    00000231: 	jmp	.Ltmp490 # Offset: 561
    00000233: 	nopl	(%rax,%rax) # Size: 5
.Ltmp478:
    00000238: 	movl	%ebx, %r12d
    0000023b: 	movl	%ebx, %edi
    0000023d: 	movl	%ebx, %eax
    0000023f: 	jmp	.Ltmp491 # Offset: 575
.Ltmp482:
    00000244: 	leaq	DATAat0x17018(%rip), %rdi
    0000024b: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 587
.Ltmp486:
    00000250: 	callq	__stack_chk_fail@PLT # Offset: 592
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct5_local2IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct5_local2ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 87
  State       : disassembled
  Address     : 0xaff0
  Size        : 0x267
  MaxSize     : 0x270
  Offset      : 0xaff0
  Section     : .text
  Orc Section : .local.text._Z19test_struct5_local2ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB086:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movslq	init_value(%rip), %rbx
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x8(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	callq	clock@PLT # Offset: 40
    0000002d: 	movq	%rax, start_time(%rip)
    00000034: 	movslq	iterations(%rip), %rax
    0000003b: 	testl	%eax, %eax
    0000003d: 	jle	.Ltmp492 # Offset: 61
    00000043: 	leal	-0x1(%rax), %edx
    00000046: 	leaq	(%rdx,%rdx,2), %rcx
    0000004a: 	leaq	(%rdx,%rcx,4), %rcx
    0000004e: 	leaq	0x34(%rbx,%rcx,4), %r9
    00000053: 	leaq	(%rdx,%rdx,4), %rcx
    00000057: 	leaq	(%rdx,%rdx,8), %rdx
    0000005b: 	leaq	0x14(%rbx,%rcx,4), %rdi
    00000060: 	leaq	0x24(%rbx,%rdx,4), %r8
    00000065: 	leaq	0x28(%rbx,%rcx,8), %rbx
.Ltmp505:
    0000006a: 	leaq	(%rax,%rax,2), %rdx
    0000006e: 	movslq	init_value(%rip), %rcx
    00000075: 	shlq	$0x2, %rdx
    00000079: 	leaq	(%rdx,%rax), %rsi
    0000007d: 	leaq	(%rcx,%rsi,4), %rsi
    00000081: 	movq	%rsi, %rcx
    00000084: 	subq	%rdx, %rcx
    00000087: 	cmpq	%r9, %rsi
    0000008a: 	jne	.Ltmp493 # Offset: 138
    00000090: 	cmpq	%rcx, %rbx
    00000093: 	jne	.Ltmp493 # Offset: 147
    00000099: 	leaq	(,%rax,4), %rdx
    000000a1: 	shlq	$0x4, %rax
    000000a5: 	subq	%rdx, %rcx
    000000a8: 	movq	%rcx, %rdx
    000000ab: 	subq	%rax, %rdx
    000000ae: 	cmpq	%rdi, %rdx
    000000b1: 	jne	.Ltmp493 # Offset: 177
    000000b7: 	cmpq	%r8, %rcx
    000000ba: 	jne	.Ltmp493 # Offset: 186
.Ltmp501:
    000000c0: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ce: 	subq	$0x20, %rax
    000000d2: 	cmpq	%rax, %rbx
    000000d5: 	je	.Ltmp494 # Offset: 213
    000000db: 	leaq	0x10(%rbx), %rdi
    000000df: 	movq	0x8(%rbp), %r12
    000000e3: 	movq	%rdi, (%rbx)
    000000e6: 	movq	(%rbp), %r13
    000000ea: 	movq	%r13, %rax
    000000ed: 	addq	%r12, %rax
    000000f0: 	je	.Ltmp495 # Offset: 240
    000000f2: 	testq	%r13, %r13
    000000f5: 	je	.Ltmp496 # Offset: 245
.Ltmp495:
    000000fb: 	movq	%r12, (%rsp)
    000000ff: 	cmpq	$0xf, %r12
    00000103: 	ja	.Ltmp497 # Offset: 259
    00000109: 	cmpq	$0x1, %r12
    0000010d: 	jne	.Ltmp498 # Offset: 269
    00000113: 	movzbl	(%r13), %eax
    00000118: 	movb	%al, 0x10(%rbx)
.Ltmp502:
    0000011b: 	movq	%r12, 0x8(%rbx)
    0000011f: 	movb	$0x0, (%rdi,%r12)
    00000124: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000012b: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000132: 	addq	$0x20, %rax
    00000136: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000013d: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000144: 	je	.Ltmp499 # Offset: 324
.Ltmp503:
    0000014a: 	movq	-0x20(%rax), %rbp
    0000014e: 	callq	clock@PLT # Offset: 334
    00000153: 	movq	%rax, end_time(%rip)
    0000015a: 	movq	0x8(%rsp), %rdx
    0000015f: 	subq	%fs:0x28, %rdx
    00000168: 	jne	.Ltmp500 # Offset: 360
    0000016e: 	subq	start_time(%rip), %rax
    00000175: 	pxor	%xmm0, %xmm0
    00000179: 	movq	%rbp, %rdi
    0000017c: 	cvtsi2sd	%rax, %xmm0
    00000181: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000189: 	addq	$0x18, %rsp
    0000018d: 	popq	%rbx
    0000018e: 	popq	%rbp
    0000018f: 	popq	%r12
    00000191: 	popq	%r13
    00000193: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 403
    00000198: 	nopl	(%rax,%rax) # Size: 8
.Ltmp493:
    000001a0: 	movq	(%rbp), %rdx
    000001a4: 	leaq	DATAat0x17004(%rip), %rsi
    000001ab: 	movl	$0x1, %edi
    000001b0: 	xorl	%eax, %eax
    000001b2: 	callq	__printf_chk@PLT # Offset: 434
    000001b7: 	jmp	.Ltmp501 # Offset: 439
    000001bc: 	nopl	(%rax) # Size: 4
.Ltmp497:
    000001c0: 	movq	%rbx, %rdi
    000001c3: 	movq	%rsp, %rsi
    000001c6: 	xorl	%edx, %edx
    000001c8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 456
    000001cd: 	movq	%rax, (%rbx)
    000001d0: 	movq	%rax, %rdi
    000001d3: 	movq	(%rsp), %rax
    000001d7: 	movq	%rax, 0x10(%rbx)
.Ltmp504:
    000001db: 	movq	%r12, %rdx
    000001de: 	movq	%r13, %rsi
    000001e1: 	callq	memcpy@PLT # Offset: 481
    000001e6: 	movq	(%rsp), %r12
    000001ea: 	movq	(%rbx), %rdi
    000001ed: 	jmp	.Ltmp502 # Offset: 493
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp494:
    000001f8: 	movq	%rbp, %rsi
    000001fb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000202: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 514
    00000207: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000020e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000215: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000021c: 	jne	.Ltmp503 # Offset: 540
.Ltmp499:
    00000222: 	movq	-0x8(%rdx), %rax
    00000226: 	addq	$0x200, %rax
    0000022c: 	jmp	.Ltmp503 # Offset: 556
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp498:
    00000238: 	testq	%r12, %r12
    0000023b: 	je	.Ltmp502 # Offset: 571
    00000241: 	jmp	.Ltmp504 # Offset: 577
    00000243: 	nopl	(%rax,%rax) # Size: 5
.Ltmp492:
    00000248: 	movq	%rbx, %rdi
    0000024b: 	movq	%rbx, %r8
    0000024e: 	movq	%rbx, %r9
    00000251: 	jmp	.Ltmp505 # Offset: 593
.Ltmp496:
    00000256: 	leaq	DATAat0x17018(%rip), %rdi
    0000025d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 605
.Ltmp500:
    00000262: 	callq	__stack_chk_fail@PLT # Offset: 610
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct5_local2ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct5_local1IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 88
  State       : disassembled
  Address     : 0xb260
  Size        : 0x246
  MaxSize     : 0x250
  Offset      : 0xb260
  Section     : .text
  Orc Section : .local.text._Z19test_struct5_local1IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB087:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movl	init_value(%rip), %ebx
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x8(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	movq	%rax, start_time(%rip)
    00000033: 	movl	iterations(%rip), %eax
    00000039: 	testl	%eax, %eax
    0000003b: 	jle	.Ltmp506 # Offset: 59
    00000041: 	imull	$0x34, %eax, %ecx
    00000044: 	movl	%ebx, %edx
    00000046: 	leal	(%rax,%rax,8), %esi
    00000049: 	leal	(%rdx,%rsi,4), %r9d
    0000004d: 	addl	%ecx, %ebx
    0000004f: 	leal	(%rax,%rax,4), %ecx
    00000052: 	leal	(%rdx,%rcx,8), %edi
    00000055: 	leal	(%rdx,%rcx,4), %r8d
.Ltmp519:
    00000059: 	imull	$0x34, %eax, %edx
    0000005c: 	leal	(%rax,%rax,2), %esi
    0000005f: 	addl	init_value(%rip), %edx
    00000065: 	shll	$0x2, %esi
    00000068: 	movl	%edx, %ecx
    0000006a: 	subl	%esi, %ecx
    0000006c: 	cmpl	%ebx, %edx
    0000006e: 	jne	.Ltmp507 # Offset: 110
    00000074: 	cmpl	%ecx, %edi
    00000076: 	jne	.Ltmp507 # Offset: 118
    0000007c: 	leal	(,%rax,4), %edx
    00000083: 	shll	$0x4, %eax
    00000086: 	subl	%edx, %ecx
    00000088: 	movl	%ecx, %edx
    0000008a: 	subl	%eax, %edx
    0000008c: 	cmpl	%r8d, %edx
    0000008f: 	jne	.Ltmp507 # Offset: 143
    00000095: 	cmpl	%r9d, %ecx
    00000098: 	jne	.Ltmp507 # Offset: 152
.Ltmp515:
    0000009e: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000a5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ac: 	subq	$0x20, %rax
    000000b0: 	cmpq	%rax, %rbx
    000000b3: 	je	.Ltmp508 # Offset: 179
    000000b9: 	leaq	0x10(%rbx), %rdi
    000000bd: 	movq	0x8(%rbp), %r12
    000000c1: 	movq	%rdi, (%rbx)
    000000c4: 	movq	(%rbp), %r13
    000000c8: 	movq	%r13, %rax
    000000cb: 	addq	%r12, %rax
    000000ce: 	je	.Ltmp509 # Offset: 206
    000000d0: 	testq	%r13, %r13
    000000d3: 	je	.Ltmp510 # Offset: 211
.Ltmp509:
    000000d9: 	movq	%r12, (%rsp)
    000000dd: 	cmpq	$0xf, %r12
    000000e1: 	ja	.Ltmp511 # Offset: 225
    000000e7: 	cmpq	$0x1, %r12
    000000eb: 	jne	.Ltmp512 # Offset: 235
    000000f1: 	movzbl	(%r13), %eax
    000000f6: 	movb	%al, 0x10(%rbx)
.Ltmp516:
    000000f9: 	movq	%r12, 0x8(%rbx)
    000000fd: 	movb	$0x0, (%rdi,%r12)
    00000102: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000109: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000110: 	addq	$0x20, %rax
    00000114: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000011b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000122: 	je	.Ltmp513 # Offset: 290
.Ltmp517:
    00000128: 	movq	-0x20(%rax), %rbp
    0000012c: 	callq	clock@PLT # Offset: 300
    00000131: 	movq	%rax, end_time(%rip)
    00000138: 	movq	0x8(%rsp), %rdx
    0000013d: 	subq	%fs:0x28, %rdx
    00000146: 	jne	.Ltmp514 # Offset: 326
    0000014c: 	subq	start_time(%rip), %rax
    00000153: 	pxor	%xmm0, %xmm0
    00000157: 	movq	%rbp, %rdi
    0000015a: 	cvtsi2sd	%rax, %xmm0
    0000015f: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000167: 	addq	$0x18, %rsp
    0000016b: 	popq	%rbx
    0000016c: 	popq	%rbp
    0000016d: 	popq	%r12
    0000016f: 	popq	%r13
    00000171: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 369
    00000176: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp507:
    00000180: 	movq	(%rbp), %rdx
    00000184: 	leaq	DATAat0x17004(%rip), %rsi
    0000018b: 	movl	$0x1, %edi
    00000190: 	xorl	%eax, %eax
    00000192: 	callq	__printf_chk@PLT # Offset: 402
    00000197: 	jmp	.Ltmp515 # Offset: 407
    0000019c: 	nopl	(%rax) # Size: 4
.Ltmp511:
    000001a0: 	movq	%rbx, %rdi
    000001a3: 	movq	%rsp, %rsi
    000001a6: 	xorl	%edx, %edx
    000001a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 424
    000001ad: 	movq	%rax, (%rbx)
    000001b0: 	movq	%rax, %rdi
    000001b3: 	movq	(%rsp), %rax
    000001b7: 	movq	%rax, 0x10(%rbx)
.Ltmp518:
    000001bb: 	movq	%r12, %rdx
    000001be: 	movq	%r13, %rsi
    000001c1: 	callq	memcpy@PLT # Offset: 449
    000001c6: 	movq	(%rsp), %r12
    000001ca: 	movq	(%rbx), %rdi
    000001cd: 	jmp	.Ltmp516 # Offset: 461
    000001d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp508:
    000001d8: 	movq	%rbp, %rsi
    000001db: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001e2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 482
    000001e7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ee: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001f5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001fc: 	jne	.Ltmp517 # Offset: 508
.Ltmp513:
    00000202: 	movq	-0x8(%rdx), %rax
    00000206: 	addq	$0x200, %rax
    0000020c: 	jmp	.Ltmp517 # Offset: 524
    00000211: 	nopl	(%rax) # Size: 7
.Ltmp512:
    00000218: 	testq	%r12, %r12
    0000021b: 	je	.Ltmp516 # Offset: 539
    00000221: 	jmp	.Ltmp518 # Offset: 545
    00000223: 	nopl	(%rax,%rax) # Size: 5
.Ltmp506:
    00000228: 	movl	%ebx, %r8d
    0000022b: 	movl	%ebx, %r9d
    0000022e: 	movl	%ebx, %edi
    00000230: 	jmp	.Ltmp519 # Offset: 560
.Ltmp510:
    00000235: 	leaq	DATAat0x17018(%rip), %rdi
    0000023c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 572
.Ltmp514:
    00000241: 	callq	__stack_chk_fail@PLT # Offset: 577
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct5_local1IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct5_local0IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 89
  State       : disassembled
  Address     : 0xb4b0
  Size        : 0x1c4
  MaxSize     : 0x1d0
  Offset      : 0xb4b0
  Section     : .text
  Orc Section : .local.text._Z19test_struct5_local0IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB088:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movl	init_value(%rip), %ebx
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x8(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	cmpw	%bx, init_value(%rip)
    00000033: 	movq	%rax, start_time(%rip)
    0000003a: 	je	.Ltmp520 # Offset: 58
    0000003c: 	movq	(%rbp), %rdx
    00000040: 	leaq	DATAat0x17004(%rip), %rsi
    00000047: 	movl	$0x1, %edi
    0000004c: 	xorl	%eax, %eax
    0000004e: 	callq	__printf_chk@PLT # Offset: 78
.Ltmp520:
    00000053: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000005a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000061: 	subq	$0x20, %rax
    00000065: 	cmpq	%rax, %rbx
    00000068: 	je	.Ltmp521 # Offset: 104
    0000006e: 	leaq	0x10(%rbx), %rdi
    00000072: 	movq	0x8(%rbp), %r12
    00000076: 	movq	%rdi, (%rbx)
    00000079: 	movq	(%rbp), %r13
    0000007d: 	movq	%r13, %rax
    00000080: 	addq	%r12, %rax
    00000083: 	je	.Ltmp522 # Offset: 131
    00000085: 	testq	%r13, %r13
    00000088: 	je	.Ltmp523 # Offset: 136
.Ltmp522:
    0000008e: 	movq	%r12, (%rsp)
    00000092: 	cmpq	$0xf, %r12
    00000096: 	ja	.Ltmp524 # Offset: 150
    0000009c: 	cmpq	$0x1, %r12
    000000a0: 	jne	.Ltmp525 # Offset: 160
    000000a6: 	movzbl	(%r13), %eax
    000000ab: 	movb	%al, 0x10(%rbx)
.Ltmp528:
    000000ae: 	movq	%r12, 0x8(%rbx)
    000000b2: 	movb	$0x0, (%rdi,%r12)
    000000b7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000be: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000c5: 	addq	$0x20, %rax
    000000c9: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000000d0: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000000d7: 	je	.Ltmp526 # Offset: 215
.Ltmp529:
    000000dd: 	movq	-0x20(%rax), %rbp
    000000e1: 	callq	clock@PLT # Offset: 225
    000000e6: 	movq	%rax, end_time(%rip)
    000000ed: 	movq	0x8(%rsp), %rdx
    000000f2: 	subq	%fs:0x28, %rdx
    000000fb: 	jne	.Ltmp527 # Offset: 251
    00000101: 	subq	start_time(%rip), %rax
    00000108: 	pxor	%xmm0, %xmm0
    0000010c: 	movq	%rbp, %rdi
    0000010f: 	cvtsi2sd	%rax, %xmm0
    00000114: 	divsd	DATAat0x17ca0(%rip), %xmm0
    0000011c: 	addq	$0x18, %rsp
    00000120: 	popq	%rbx
    00000121: 	popq	%rbp
    00000122: 	popq	%r12
    00000124: 	popq	%r13
    00000126: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 294
    0000012b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp524:
    00000130: 	movq	%rbx, %rdi
    00000133: 	movq	%rsp, %rsi
    00000136: 	xorl	%edx, %edx
    00000138: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 312
    0000013d: 	movq	%rax, (%rbx)
    00000140: 	movq	%rax, %rdi
    00000143: 	movq	(%rsp), %rax
    00000147: 	movq	%rax, 0x10(%rbx)
.Ltmp530:
    0000014b: 	movq	%r12, %rdx
    0000014e: 	movq	%r13, %rsi
    00000151: 	callq	memcpy@PLT # Offset: 337
    00000156: 	movq	(%rsp), %r12
    0000015a: 	movq	(%rbx), %rdi
    0000015d: 	jmp	.Ltmp528 # Offset: 349
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp521:
    00000168: 	movq	%rbp, %rsi
    0000016b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000172: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 370
    00000177: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000017e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000185: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000018c: 	jne	.Ltmp529 # Offset: 396
.Ltmp526:
    00000192: 	movq	-0x8(%rdx), %rax
    00000196: 	addq	$0x200, %rax
    0000019c: 	jmp	.Ltmp529 # Offset: 412
    000001a1: 	nopl	(%rax) # Size: 7
.Ltmp525:
    000001a8: 	testq	%r12, %r12
    000001ab: 	je	.Ltmp528 # Offset: 427
    000001b1: 	jmp	.Ltmp530 # Offset: 433
.Ltmp523:
    000001b3: 	leaq	DATAat0x17018(%rip), %rdi
    000001ba: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 442
.Ltmp527:
    000001bf: 	callq	__stack_chk_fail@PLT # Offset: 447
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct5_local0IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct5_local0IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 90
  State       : disassembled
  Address     : 0xb680
  Size        : 0x1c4
  MaxSize     : 0x1d0
  Offset      : 0xb680
  Section     : .text
  Orc Section : .local.text._Z19test_struct5_local0IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB089:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movl	init_value(%rip), %ebx
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x8(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	cmpl	init_value(%rip), %ebx
    00000032: 	movq	%rax, start_time(%rip)
    00000039: 	je	.Ltmp531 # Offset: 57
    0000003b: 	movq	(%rbp), %rdx
    0000003f: 	leaq	DATAat0x17004(%rip), %rsi
    00000046: 	movl	$0x1, %edi
    0000004b: 	xorl	%eax, %eax
    0000004d: 	callq	__printf_chk@PLT # Offset: 77
.Ltmp531:
    00000052: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000059: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000060: 	subq	$0x20, %rax
    00000064: 	cmpq	%rax, %rbx
    00000067: 	je	.Ltmp532 # Offset: 103
    0000006d: 	leaq	0x10(%rbx), %rdi
    00000071: 	movq	0x8(%rbp), %r12
    00000075: 	movq	%rdi, (%rbx)
    00000078: 	movq	(%rbp), %r13
    0000007c: 	movq	%r13, %rax
    0000007f: 	addq	%r12, %rax
    00000082: 	je	.Ltmp533 # Offset: 130
    00000084: 	testq	%r13, %r13
    00000087: 	je	.Ltmp534 # Offset: 135
.Ltmp533:
    0000008d: 	movq	%r12, (%rsp)
    00000091: 	cmpq	$0xf, %r12
    00000095: 	ja	.Ltmp535 # Offset: 149
    0000009b: 	cmpq	$0x1, %r12
    0000009f: 	jne	.Ltmp536 # Offset: 159
    000000a5: 	movzbl	(%r13), %eax
    000000aa: 	movb	%al, 0x10(%rbx)
.Ltmp539:
    000000ad: 	movq	%r12, 0x8(%rbx)
    000000b1: 	movb	$0x0, (%rdi,%r12)
    000000b6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000bd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000c4: 	addq	$0x20, %rax
    000000c8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000000cf: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000000d6: 	je	.Ltmp537 # Offset: 214
.Ltmp540:
    000000dc: 	movq	-0x20(%rax), %rbp
    000000e0: 	callq	clock@PLT # Offset: 224
    000000e5: 	movq	%rax, end_time(%rip)
    000000ec: 	movq	0x8(%rsp), %rdx
    000000f1: 	subq	%fs:0x28, %rdx
    000000fa: 	jne	.Ltmp538 # Offset: 250
    00000100: 	subq	start_time(%rip), %rax
    00000107: 	pxor	%xmm0, %xmm0
    0000010b: 	movq	%rbp, %rdi
    0000010e: 	cvtsi2sd	%rax, %xmm0
    00000113: 	divsd	DATAat0x17ca0(%rip), %xmm0
    0000011b: 	addq	$0x18, %rsp
    0000011f: 	popq	%rbx
    00000120: 	popq	%rbp
    00000121: 	popq	%r12
    00000123: 	popq	%r13
    00000125: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 293
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp535:
    00000130: 	movq	%rbx, %rdi
    00000133: 	movq	%rsp, %rsi
    00000136: 	xorl	%edx, %edx
    00000138: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 312
    0000013d: 	movq	%rax, (%rbx)
    00000140: 	movq	%rax, %rdi
    00000143: 	movq	(%rsp), %rax
    00000147: 	movq	%rax, 0x10(%rbx)
.Ltmp541:
    0000014b: 	movq	%r12, %rdx
    0000014e: 	movq	%r13, %rsi
    00000151: 	callq	memcpy@PLT # Offset: 337
    00000156: 	movq	(%rsp), %r12
    0000015a: 	movq	(%rbx), %rdi
    0000015d: 	jmp	.Ltmp539 # Offset: 349
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp532:
    00000168: 	movq	%rbp, %rsi
    0000016b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000172: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 370
    00000177: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000017e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000185: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000018c: 	jne	.Ltmp540 # Offset: 396
.Ltmp537:
    00000192: 	movq	-0x8(%rdx), %rax
    00000196: 	addq	$0x200, %rax
    0000019c: 	jmp	.Ltmp540 # Offset: 412
    000001a1: 	nopl	(%rax) # Size: 7
.Ltmp536:
    000001a8: 	testq	%r12, %r12
    000001ab: 	je	.Ltmp539 # Offset: 427
    000001b1: 	jmp	.Ltmp541 # Offset: 433
.Ltmp534:
    000001b3: 	leaq	DATAat0x17018(%rip), %rdi
    000001ba: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 442
.Ltmp538:
    000001bf: 	callq	__stack_chk_fail@PLT # Offset: 447
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct5_local0IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct5_local0ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 91
  State       : disassembled
  Address     : 0xb850
  Size        : 0x1c4
  MaxSize     : 0x1d0
  Offset      : 0xb850
  Section     : .text
  Orc Section : .local.text._Z19test_struct5_local0ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB090:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movl	init_value(%rip), %ebx
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x8(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	cmpl	init_value(%rip), %ebx
    00000032: 	movq	%rax, start_time(%rip)
    00000039: 	je	.Ltmp542 # Offset: 57
    0000003b: 	movq	(%rbp), %rdx
    0000003f: 	leaq	DATAat0x17004(%rip), %rsi
    00000046: 	movl	$0x1, %edi
    0000004b: 	xorl	%eax, %eax
    0000004d: 	callq	__printf_chk@PLT # Offset: 77
.Ltmp542:
    00000052: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000059: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000060: 	subq	$0x20, %rax
    00000064: 	cmpq	%rax, %rbx
    00000067: 	je	.Ltmp543 # Offset: 103
    0000006d: 	leaq	0x10(%rbx), %rdi
    00000071: 	movq	0x8(%rbp), %r12
    00000075: 	movq	%rdi, (%rbx)
    00000078: 	movq	(%rbp), %r13
    0000007c: 	movq	%r13, %rax
    0000007f: 	addq	%r12, %rax
    00000082: 	je	.Ltmp544 # Offset: 130
    00000084: 	testq	%r13, %r13
    00000087: 	je	.Ltmp545 # Offset: 135
.Ltmp544:
    0000008d: 	movq	%r12, (%rsp)
    00000091: 	cmpq	$0xf, %r12
    00000095: 	ja	.Ltmp546 # Offset: 149
    0000009b: 	cmpq	$0x1, %r12
    0000009f: 	jne	.Ltmp547 # Offset: 159
    000000a5: 	movzbl	(%r13), %eax
    000000aa: 	movb	%al, 0x10(%rbx)
.Ltmp550:
    000000ad: 	movq	%r12, 0x8(%rbx)
    000000b1: 	movb	$0x0, (%rdi,%r12)
    000000b6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000000bd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000000c4: 	addq	$0x20, %rax
    000000c8: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000000cf: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000000d6: 	je	.Ltmp548 # Offset: 214
.Ltmp551:
    000000dc: 	movq	-0x20(%rax), %rbp
    000000e0: 	callq	clock@PLT # Offset: 224
    000000e5: 	movq	%rax, end_time(%rip)
    000000ec: 	movq	0x8(%rsp), %rdx
    000000f1: 	subq	%fs:0x28, %rdx
    000000fa: 	jne	.Ltmp549 # Offset: 250
    00000100: 	subq	start_time(%rip), %rax
    00000107: 	pxor	%xmm0, %xmm0
    0000010b: 	movq	%rbp, %rdi
    0000010e: 	cvtsi2sd	%rax, %xmm0
    00000113: 	divsd	DATAat0x17ca0(%rip), %xmm0
    0000011b: 	addq	$0x18, %rsp
    0000011f: 	popq	%rbx
    00000120: 	popq	%rbp
    00000121: 	popq	%r12
    00000123: 	popq	%r13
    00000125: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 293
    0000012a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp546:
    00000130: 	movq	%rbx, %rdi
    00000133: 	movq	%rsp, %rsi
    00000136: 	xorl	%edx, %edx
    00000138: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 312
    0000013d: 	movq	%rax, (%rbx)
    00000140: 	movq	%rax, %rdi
    00000143: 	movq	(%rsp), %rax
    00000147: 	movq	%rax, 0x10(%rbx)
.Ltmp552:
    0000014b: 	movq	%r12, %rdx
    0000014e: 	movq	%r13, %rsi
    00000151: 	callq	memcpy@PLT # Offset: 337
    00000156: 	movq	(%rsp), %r12
    0000015a: 	movq	(%rbx), %rdi
    0000015d: 	jmp	.Ltmp550 # Offset: 349
    00000162: 	nopw	(%rax,%rax) # Size: 6
.Ltmp543:
    00000168: 	movq	%rbp, %rsi
    0000016b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000172: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 370
    00000177: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000017e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000185: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000018c: 	jne	.Ltmp551 # Offset: 396
.Ltmp548:
    00000192: 	movq	-0x8(%rdx), %rax
    00000196: 	addq	$0x200, %rax
    0000019c: 	jmp	.Ltmp551 # Offset: 412
    000001a1: 	nopl	(%rax) # Size: 7
.Ltmp547:
    000001a8: 	testq	%r12, %r12
    000001ab: 	je	.Ltmp550 # Offset: 427
    000001b1: 	jmp	.Ltmp552 # Offset: 433
.Ltmp545:
    000001b3: 	leaq	DATAat0x17018(%rip), %rdi
    000001ba: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 442
.Ltmp549:
    000001bf: 	callq	__stack_chk_fail@PLT # Offset: 447
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct5_local0ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct5_local1IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 92
  State       : disassembled
  Address     : 0xba20
  Size        : 0x2c2
  MaxSize     : 0x2d0
  Offset      : 0xba20
  Section     : .text
  Orc Section : .local.text._Z19test_struct5_local1IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB091:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pxor	%xmm0, %xmm0
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x18(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	cvtsi2sdl	init_value(%rip), %xmm0
    0000002d: 	movsd	%xmm0, 0x8(%rsp)
    00000033: 	callq	clock@PLT # Offset: 51
    00000038: 	movl	iterations(%rip), %edx
    0000003e: 	movsd	0x8(%rsp), %xmm0
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	testl	%edx, %edx
    0000004d: 	jle	.Ltmp553 # Offset: 77
    00000053: 	movapd	%xmm0, %xmm1
    00000057: 	movapd	DATAat0x17dd0(%rip), %xmm3
    0000005f: 	movapd	DATAat0x17de0(%rip), %xmm2
    00000067: 	xorl	%eax, %eax
    00000069: 	unpcklpd	%xmm1, %xmm1
    0000006d: 	movapd	%xmm1, %xmm0
    00000071: 	nopl	(%rax) # Size: 7
.Ltmp554:
    00000078: 	addl	$0x1, %eax
    0000007b: 	addpd	%xmm3, %xmm1
    0000007f: 	addpd	%xmm2, %xmm0
    00000083: 	cmpl	%edx, %eax
    00000085: 	jne	.Ltmp554 # Offset: 133
    00000087: 	movapd	%xmm1, %xmm6
    0000008b: 	movapd	%xmm0, %xmm5
    0000008f: 	unpckhpd	%xmm1, %xmm1
    00000093: 	unpckhpd	%xmm0, %xmm0
.Ltmp567:
    00000097: 	pxor	%xmm2, %xmm2
    0000009b: 	movsd	DATAat0x17de8(%rip), %xmm3
    000000a3: 	pxor	%xmm4, %xmm4
    000000a7: 	cvtsi2sd	%edx, %xmm2
    000000ab: 	movl	$0x1, %edx
    000000b0: 	cvtsi2sdl	init_value(%rip), %xmm4
    000000b8: 	mulsd	%xmm2, %xmm3
    000000bc: 	addsd	%xmm4, %xmm3
    000000c0: 	ucomisd	%xmm0, %xmm3
    000000c4: 	setp	%al
    000000c7: 	cmovnel	%edx, %eax
    000000ca: 	testb	%al, %al
    000000cc: 	jne	.Ltmp555 # Offset: 204
    000000ce: 	movsd	DATAat0x17de0(%rip), %xmm0
    000000d6: 	mulsd	%xmm2, %xmm0
    000000da: 	addsd	%xmm4, %xmm0
    000000de: 	ucomisd	%xmm5, %xmm0
    000000e2: 	setp	%al
    000000e5: 	cmovnel	%edx, %eax
    000000e8: 	testb	%al, %al
    000000ea: 	jne	.Ltmp555 # Offset: 234
    000000ec: 	movsd	DATAat0x17e00(%rip), %xmm0
    000000f4: 	mulsd	%xmm2, %xmm0
    000000f8: 	addsd	%xmm4, %xmm0
    000000fc: 	ucomisd	%xmm1, %xmm0
    00000100: 	setp	%al
    00000103: 	cmovnel	%edx, %eax
    00000106: 	testb	%al, %al
    00000108: 	jne	.Ltmp555 # Offset: 264
    0000010a: 	mulsd	DATAat0x17dd0(%rip), %xmm2
    00000112: 	addsd	%xmm4, %xmm2
    00000116: 	ucomisd	%xmm6, %xmm2
    0000011a: 	setp	%al
    0000011d: 	cmovnel	%edx, %eax
    00000120: 	testb	%al, %al
    00000122: 	je	.Ltmp556 # Offset: 290
.Ltmp555:
    00000124: 	movq	(%rbp), %rdx
    00000128: 	leaq	DATAat0x17004(%rip), %rsi
    0000012f: 	movl	$0x1, %edi
    00000134: 	xorl	%eax, %eax
    00000136: 	callq	__printf_chk@PLT # Offset: 310
.Ltmp556:
    0000013b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000142: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000149: 	subq	$0x20, %rax
    0000014d: 	cmpq	%rax, %rbx
    00000150: 	je	.Ltmp557 # Offset: 336
    00000156: 	leaq	0x10(%rbx), %rdi
    0000015a: 	movq	0x8(%rbp), %r12
    0000015e: 	movq	%rdi, (%rbx)
    00000161: 	movq	(%rbp), %r13
    00000165: 	movq	%r13, %rax
    00000168: 	addq	%r12, %rax
    0000016b: 	je	.Ltmp558 # Offset: 363
    0000016d: 	testq	%r13, %r13
    00000170: 	je	.Ltmp559 # Offset: 368
.Ltmp558:
    00000176: 	movq	%r12, 0x10(%rsp)
    0000017b: 	cmpq	$0xf, %r12
    0000017f: 	ja	.Ltmp560 # Offset: 383
    00000185: 	cmpq	$0x1, %r12
    00000189: 	jne	.Ltmp561 # Offset: 393
    0000018f: 	movzbl	(%r13), %eax
    00000194: 	movb	%al, 0x10(%rbx)
.Ltmp564:
    00000197: 	movq	%r12, 0x8(%rbx)
    0000019b: 	movb	$0x0, (%rdi,%r12)
    000001a0: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001a7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001ae: 	addq	$0x20, %rax
    000001b2: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001b9: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001c0: 	je	.Ltmp562 # Offset: 448
.Ltmp565:
    000001c6: 	movq	-0x20(%rax), %rbp
    000001ca: 	callq	clock@PLT # Offset: 458
    000001cf: 	movq	%rax, end_time(%rip)
    000001d6: 	movq	0x18(%rsp), %rdx
    000001db: 	subq	%fs:0x28, %rdx
    000001e4: 	jne	.Ltmp563 # Offset: 484
    000001ea: 	subq	start_time(%rip), %rax
    000001f1: 	pxor	%xmm0, %xmm0
    000001f5: 	movq	%rbp, %rdi
    000001f8: 	cvtsi2sd	%rax, %xmm0
    000001fd: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000205: 	addq	$0x28, %rsp
    00000209: 	popq	%rbx
    0000020a: 	popq	%rbp
    0000020b: 	popq	%r12
    0000020d: 	popq	%r13
    0000020f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 527
    00000214: 	nopl	(%rax) # Size: 4
.Ltmp560:
    00000218: 	movq	%rbx, %rdi
    0000021b: 	leaq	0x10(%rsp), %rsi
    00000220: 	xorl	%edx, %edx
    00000222: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 546
    00000227: 	movq	%rax, (%rbx)
    0000022a: 	movq	%rax, %rdi
    0000022d: 	movq	0x10(%rsp), %rax
    00000232: 	movq	%rax, 0x10(%rbx)
.Ltmp566:
    00000236: 	movq	%r12, %rdx
    00000239: 	movq	%r13, %rsi
    0000023c: 	callq	memcpy@PLT # Offset: 572
    00000241: 	movq	0x10(%rsp), %r12
    00000246: 	movq	(%rbx), %rdi
    00000249: 	jmp	.Ltmp564 # Offset: 585
    0000024e: 	nop # Size: 2
.Ltmp557:
    00000250: 	movq	%rbp, %rsi
    00000253: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000025a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 602
    0000025f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000266: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000026d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000274: 	jne	.Ltmp565 # Offset: 628
.Ltmp562:
    0000027a: 	movq	-0x8(%rdx), %rax
    0000027e: 	addq	$0x200, %rax
    00000284: 	jmp	.Ltmp565 # Offset: 644
    00000289: 	nopl	(%rax) # Size: 7
.Ltmp561:
    00000290: 	testq	%r12, %r12
    00000293: 	je	.Ltmp564 # Offset: 659
    00000299: 	jmp	.Ltmp566 # Offset: 665
    0000029b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp553:
    000002a0: 	movapd	%xmm0, %xmm6
    000002a4: 	movapd	%xmm0, %xmm1
    000002a8: 	movapd	%xmm0, %xmm5
    000002ac: 	jmp	.Ltmp567 # Offset: 684
.Ltmp559:
    000002b1: 	leaq	DATAat0x17018(%rip), %rdi
    000002b8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 696
.Ltmp563:
    000002bd: 	callq	__stack_chk_fail@PLT # Offset: 701
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct5_local1IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct_global0Ii11test_structIiEXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 93
  State       : disassembled
  Address     : 0xbcf0
  Size        : 0x24c
  MaxSize     : 0x250
  Offset      : 0xbcf0
  Section     : .text
  Orc Section : .local.text._Z19test_struct_global0Ii11test_structIiEXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB092:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movdqa	DATAat0x17d80(%rip), %xmm1
    0000002e: 	movq	%rbp, %rsi
    00000031: 	leaq	data32(%rip), %rdi
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	movl	iterations(%rip), %eax
    00000045: 	movd	%eax, %xmm4
    00000049: 	imull	$0x39, %eax, %edx
    0000004c: 	addl	%edx, data32+32(%rip)
    00000052: 	pshufd	$0x0, %xmm4, %xmm0
    00000057: 	imull	$0x37, %eax, %edx
    0000005a: 	addl	%edx, data32+36(%rip)
    00000060: 	movdqa	%xmm0, %xmm2
    00000064: 	imull	$0x3c, %eax, %eax
    00000067: 	movdqa	%xmm0, %xmm3
    0000006b: 	addl	%eax, data32+40(%rip)
    00000071: 	pmuludq	%xmm1, %xmm2
    00000075: 	psrlq	$0x20, %xmm3
    0000007a: 	psrlq	$0x20, %xmm1
    0000007f: 	pmuludq	%xmm3, %xmm1
    00000083: 	pshufd	$0x8, %xmm2, %xmm2
    00000088: 	pshufd	$0x8, %xmm1, %xmm1
    0000008d: 	punpckldq	%xmm1, %xmm2
    00000091: 	movdqa	data32+16(%rip), %xmm1
    00000099: 	paddd	%xmm2, %xmm1
    0000009d: 	movdqa	DATAat0x17d70(%rip), %xmm2
    000000a5: 	movaps	%xmm1, data32+16(%rip)
    000000ac: 	pmuludq	%xmm2, %xmm0
    000000b0: 	psrlq	$0x20, %xmm2
    000000b5: 	pmuludq	%xmm2, %xmm3
    000000b9: 	pshufd	$0x8, %xmm0, %xmm0
    000000be: 	pshufd	$0x8, %xmm3, %xmm3
    000000c3: 	punpckldq	%xmm3, %xmm0
    000000c7: 	paddd	data32(%rip), %xmm0
    000000cf: 	movaps	%xmm0, data32(%rip)
    000000d6: 	callq	_Z12check11_sumsIiEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 214
    000000db: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000e2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000e9: 	subq	$0x20, %rax
    000000ed: 	cmpq	%rax, %rbx
    000000f0: 	je	.Ltmp568 # Offset: 240
    000000f6: 	leaq	0x10(%rbx), %rdi
    000000fa: 	movq	0x8(%rbp), %r12
    000000fe: 	movq	%rdi, (%rbx)
    00000101: 	movq	(%rbp), %r13
    00000105: 	movq	%r13, %rax
    00000108: 	addq	%r12, %rax
    0000010b: 	je	.Ltmp569 # Offset: 267
    0000010d: 	testq	%r13, %r13
    00000110: 	je	.Ltmp570 # Offset: 272
.Ltmp569:
    00000116: 	movq	%r12, (%rsp)
    0000011a: 	cmpq	$0xf, %r12
    0000011e: 	ja	.Ltmp571 # Offset: 286
    00000124: 	cmpq	$0x1, %r12
    00000128: 	jne	.Ltmp572 # Offset: 296
    0000012e: 	movzbl	(%r13), %eax
    00000133: 	movb	%al, 0x10(%rbx)
.Ltmp575:
    00000136: 	movq	%r12, 0x8(%rbx)
    0000013a: 	movb	$0x0, (%rdi,%r12)
    0000013f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000146: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000014d: 	addq	$0x20, %rax
    00000151: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000158: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000015f: 	je	.Ltmp573 # Offset: 351
.Ltmp576:
    00000165: 	movq	-0x20(%rax), %rbp
    00000169: 	callq	clock@PLT # Offset: 361
    0000016e: 	movq	%rax, end_time(%rip)
    00000175: 	movq	0x8(%rsp), %rdx
    0000017a: 	subq	%fs:0x28, %rdx
    00000183: 	jne	.Ltmp574 # Offset: 387
    00000189: 	subq	start_time(%rip), %rax
    00000190: 	pxor	%xmm0, %xmm0
    00000194: 	movq	%rbp, %rdi
    00000197: 	cvtsi2sd	%rax, %xmm0
    0000019c: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001a4: 	addq	$0x18, %rsp
    000001a8: 	popq	%rbx
    000001a9: 	popq	%rbp
    000001aa: 	popq	%r12
    000001ac: 	popq	%r13
    000001ae: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 430
    000001b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp571:
    000001b8: 	movq	%rbx, %rdi
    000001bb: 	movq	%rsp, %rsi
    000001be: 	xorl	%edx, %edx
    000001c0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 448
    000001c5: 	movq	%rax, (%rbx)
    000001c8: 	movq	%rax, %rdi
    000001cb: 	movq	(%rsp), %rax
    000001cf: 	movq	%rax, 0x10(%rbx)
.Ltmp577:
    000001d3: 	movq	%r12, %rdx
    000001d6: 	movq	%r13, %rsi
    000001d9: 	callq	memcpy@PLT # Offset: 473
    000001de: 	movq	(%rsp), %r12
    000001e2: 	movq	(%rbx), %rdi
    000001e5: 	jmp	.Ltmp575 # Offset: 485
    000001ea: 	nopw	(%rax,%rax) # Size: 6
.Ltmp568:
    000001f0: 	movq	%rbp, %rsi
    000001f3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001fa: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 506
    000001ff: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000206: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000020d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000214: 	jne	.Ltmp576 # Offset: 532
.Ltmp573:
    0000021a: 	movq	-0x8(%rdx), %rax
    0000021e: 	addq	$0x200, %rax
    00000224: 	jmp	.Ltmp576 # Offset: 548
    00000229: 	nopl	(%rax) # Size: 7
.Ltmp572:
    00000230: 	testq	%r12, %r12
    00000233: 	je	.Ltmp575 # Offset: 563
    00000239: 	jmp	.Ltmp577 # Offset: 569
.Ltmp570:
    0000023b: 	leaq	DATAat0x17018(%rip), %rdi
    00000242: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 578
.Ltmp574:
    00000247: 	callq	__stack_chk_fail@PLT # Offset: 583
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct_global0Ii11test_structIiEXadL_Z6data32EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct_global0Is11test_structIsEXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 94
  State       : disassembled
  Address     : 0xbf40
  Size        : 0x20c
  MaxSize     : 0x210
  Offset      : 0xbf40
  Section     : .text
  Orc Section : .local.text._Z19test_struct_global0Is11test_structIsEXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB093:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	leaq	data16(%rip), %rdi
    0000002d: 	movq	%rax, start_time(%rip)
    00000034: 	movl	iterations(%rip), %eax
    0000003a: 	movd	%eax, %xmm0
    0000003e: 	leal	(,%rax,8), %esi
    00000045: 	leal	(%rax,%rax,4), %edx
    00000048: 	movl	%eax, %ecx
    0000004a: 	punpcklwd	%xmm0, %xmm0
    0000004e: 	subl	%eax, %esi
    00000050: 	shll	$0x4, %ecx
    00000053: 	leal	(%rax,%rdx,2), %edx
    00000056: 	pshufd	$0x0, %xmm0, %xmm0
    0000005b: 	leal	(%rax,%rsi,8), %esi
    0000005e: 	leal	(%rdx,%rdx,4), %edx
    00000061: 	subl	%eax, %ecx
    00000063: 	pmullw	DATAat0x17d90(%rip), %xmm0
    0000006b: 	paddw	data16(%rip), %xmm0
    00000073: 	addw	%si, data16+16(%rip)
    0000007a: 	movq	%rbp, %rsi
    0000007d: 	shll	$0x2, %ecx
    00000080: 	addw	%dx, data16+18(%rip)
    00000087: 	addw	%cx, data16+20(%rip)
    0000008e: 	movaps	%xmm0, data16(%rip)
    00000095: 	callq	_Z12check11_sumsIsEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 149
    0000009a: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000a1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000a8: 	subq	$0x20, %rax
    000000ac: 	cmpq	%rax, %rbx
    000000af: 	je	.Ltmp578 # Offset: 175
    000000b5: 	leaq	0x10(%rbx), %rdi
    000000b9: 	movq	0x8(%rbp), %r12
    000000bd: 	movq	%rdi, (%rbx)
    000000c0: 	movq	(%rbp), %r13
    000000c4: 	movq	%r13, %rax
    000000c7: 	addq	%r12, %rax
    000000ca: 	je	.Ltmp579 # Offset: 202
    000000cc: 	testq	%r13, %r13
    000000cf: 	je	.Ltmp580 # Offset: 207
.Ltmp579:
    000000d5: 	movq	%r12, (%rsp)
    000000d9: 	cmpq	$0xf, %r12
    000000dd: 	ja	.Ltmp581 # Offset: 221
    000000e3: 	cmpq	$0x1, %r12
    000000e7: 	jne	.Ltmp582 # Offset: 231
    000000ed: 	movzbl	(%r13), %eax
    000000f2: 	movb	%al, 0x10(%rbx)
.Ltmp585:
    000000f5: 	movq	%r12, 0x8(%rbx)
    000000f9: 	movb	$0x0, (%rdi,%r12)
    000000fe: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000105: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000010c: 	addq	$0x20, %rax
    00000110: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000117: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000011e: 	je	.Ltmp583 # Offset: 286
.Ltmp586:
    00000124: 	movq	-0x20(%rax), %rbp
    00000128: 	callq	clock@PLT # Offset: 296
    0000012d: 	movq	%rax, end_time(%rip)
    00000134: 	movq	0x8(%rsp), %rdx
    00000139: 	subq	%fs:0x28, %rdx
    00000142: 	jne	.Ltmp584 # Offset: 322
    00000148: 	subq	start_time(%rip), %rax
    0000014f: 	pxor	%xmm0, %xmm0
    00000153: 	movq	%rbp, %rdi
    00000156: 	cvtsi2sd	%rax, %xmm0
    0000015b: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000163: 	addq	$0x18, %rsp
    00000167: 	popq	%rbx
    00000168: 	popq	%rbp
    00000169: 	popq	%r12
    0000016b: 	popq	%r13
    0000016d: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 365
    00000172: 	nopw	(%rax,%rax) # Size: 6
.Ltmp581:
    00000178: 	movq	%rbx, %rdi
    0000017b: 	movq	%rsp, %rsi
    0000017e: 	xorl	%edx, %edx
    00000180: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 384
    00000185: 	movq	%rax, (%rbx)
    00000188: 	movq	%rax, %rdi
    0000018b: 	movq	(%rsp), %rax
    0000018f: 	movq	%rax, 0x10(%rbx)
.Ltmp587:
    00000193: 	movq	%r12, %rdx
    00000196: 	movq	%r13, %rsi
    00000199: 	callq	memcpy@PLT # Offset: 409
    0000019e: 	movq	(%rsp), %r12
    000001a2: 	movq	(%rbx), %rdi
    000001a5: 	jmp	.Ltmp585 # Offset: 421
    000001aa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp578:
    000001b0: 	movq	%rbp, %rsi
    000001b3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001ba: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 442
    000001bf: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001c6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001cd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001d4: 	jne	.Ltmp586 # Offset: 468
.Ltmp583:
    000001da: 	movq	-0x8(%rdx), %rax
    000001de: 	addq	$0x200, %rax
    000001e4: 	jmp	.Ltmp586 # Offset: 484
    000001e9: 	nopl	(%rax) # Size: 7
.Ltmp582:
    000001f0: 	testq	%r12, %r12
    000001f3: 	je	.Ltmp585 # Offset: 499
    000001f9: 	jmp	.Ltmp587 # Offset: 505
.Ltmp580:
    000001fb: 	leaq	DATAat0x17018(%rip), %rdi
    00000202: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 514
.Ltmp584:
    00000207: 	callq	__stack_chk_fail@PLT # Offset: 519
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct_global0Is11test_structIsEXadL_Z6data16EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct_global0Im11test_structImEXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 95
  State       : disassembled
  Address     : 0xc150
  Size        : 0x334
  MaxSize     : 0x340
  Offset      : 0xc150
  Section     : .text
  Orc Section : .local.text._Z19test_struct_global0Im11test_structImEXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB094:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movd	iterations(%rip), %xmm6
    0000002e: 	pxor	%xmm2, %xmm2
    00000032: 	movdqa	DATAat0x17d80(%rip), %xmm8
    0000003b: 	movdqa	%xmm2, %xmm7
    0000003f: 	movdqa	%xmm2, %xmm5
    00000043: 	movdqa	%xmm2, %xmm10
    00000048: 	movq	%rbp, %rsi
    0000004b: 	pshufd	$0x0, %xmm6, %xmm0
    00000050: 	movdqa	DATAat0x17d70(%rip), %xmm6
    00000058: 	movq	%rax, start_time(%rip)
    0000005f: 	leaq	data64(%rip), %rdi
    00000066: 	movdqa	%xmm0, %xmm1
    0000006a: 	movslq	iterations(%rip), %rax
    00000071: 	punpckhdq	%xmm0, %xmm1
    00000075: 	movdqa	%xmm6, %xmm4
    00000079: 	punpckldq	%xmm0, %xmm0
    0000007d: 	punpckhdq	%xmm6, %xmm4
    00000081: 	pcmpgtd	%xmm1, %xmm7
    00000085: 	punpckldq	%xmm6, %xmm6
    00000089: 	pcmpgtd	%xmm4, %xmm5
    0000008d: 	leaq	(,%rax,8), %rdx
    00000095: 	leaq	(%rax,%rax,4), %rcx
    00000099: 	subq	%rax, %rdx
    0000009c: 	leaq	(%rax,%rcx,2), %rcx
    000000a0: 	movdqa	%xmm7, %xmm3
    000000a4: 	leaq	(%rax,%rdx,8), %rdx
    000000a8: 	addq	data64+64(%rip), %rdx
    000000af: 	pmuludq	%xmm1, %xmm5
    000000b3: 	pmuludq	%xmm4, %xmm3
    000000b7: 	leaq	(%rcx,%rcx,4), %rcx
    000000bb: 	addq	data64+72(%rip), %rcx
    000000c2: 	pmuludq	%xmm1, %xmm4
    000000c6: 	paddq	%xmm5, %xmm3
    000000ca: 	movdqa	%xmm2, %xmm5
    000000ce: 	psllq	$0x20, %xmm3
    000000d3: 	pcmpgtd	%xmm0, %xmm5
    000000d7: 	paddq	%xmm3, %xmm4
    000000db: 	movdqa	%xmm8, %xmm3
    000000e0: 	paddq	data64+16(%rip), %xmm4
    000000e8: 	punpckldq	%xmm8, %xmm3
    000000ed: 	punpckhdq	%xmm8, %xmm8
    000000f2: 	pcmpgtd	%xmm3, %xmm10
    000000f7: 	movdqa	%xmm5, %xmm9
    000000fc: 	movaps	%xmm4, data64+16(%rip)
    00000103: 	pmuludq	%xmm3, %xmm9
    00000108: 	pmuludq	%xmm0, %xmm3
    0000010c: 	pmuludq	%xmm6, %xmm5
    00000110: 	pmuludq	%xmm8, %xmm7
    00000115: 	pmuludq	%xmm0, %xmm10
    0000011a: 	paddq	%xmm10, %xmm9
    0000011f: 	psllq	$0x20, %xmm9
    00000125: 	paddq	%xmm9, %xmm3
    0000012a: 	movdqa	%xmm2, %xmm9
    0000012f: 	paddq	data64+32(%rip), %xmm3
    00000137: 	pcmpgtd	%xmm6, %xmm2
    0000013b: 	pcmpgtd	%xmm8, %xmm9
    00000140: 	movaps	%xmm3, data64+32(%rip)
    00000147: 	pmuludq	%xmm0, %xmm2
    0000014b: 	pmuludq	%xmm6, %xmm0
    0000014f: 	movq	%rcx, %xmm6
    00000154: 	pmuludq	%xmm1, %xmm9
    00000159: 	pmuludq	%xmm8, %xmm1
    0000015e: 	paddq	%xmm2, %xmm5
    00000162: 	psllq	$0x20, %xmm5
    00000167: 	paddq	%xmm9, %xmm7
    0000016c: 	paddq	%xmm5, %xmm0
    00000170: 	paddq	data64(%rip), %xmm0
    00000178: 	psllq	$0x20, %xmm7
    0000017d: 	paddq	%xmm7, %xmm1
    00000181: 	paddq	data64+48(%rip), %xmm1
    00000189: 	movaps	%xmm0, data64(%rip)
    00000190: 	movq	%rdx, %xmm0
    00000195: 	movq	%rax, %rdx
    00000198: 	shlq	$0x4, %rdx
    0000019c: 	punpcklqdq	%xmm6, %xmm0
    000001a0: 	movaps	%xmm1, data64+48(%rip)
    000001a7: 	subq	%rax, %rdx
    000001aa: 	movaps	%xmm0, data64+64(%rip)
    000001b1: 	leaq	(,%rdx,4), %rax
    000001b9: 	addq	%rax, data64+80(%rip)
    000001c0: 	callq	_Z12check11_sumsImEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 448
    000001c5: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000001cc: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000001d3: 	subq	$0x20, %rax
    000001d7: 	cmpq	%rax, %rbx
    000001da: 	je	.Ltmp588 # Offset: 474
    000001e0: 	leaq	0x10(%rbx), %rdi
    000001e4: 	movq	0x8(%rbp), %r12
    000001e8: 	movq	%rdi, (%rbx)
    000001eb: 	movq	(%rbp), %r13
    000001ef: 	movq	%r13, %rax
    000001f2: 	addq	%r12, %rax
    000001f5: 	je	.Ltmp589 # Offset: 501
    000001f7: 	testq	%r13, %r13
    000001fa: 	je	.Ltmp590 # Offset: 506
.Ltmp589:
    00000200: 	movq	%r12, (%rsp)
    00000204: 	cmpq	$0xf, %r12
    00000208: 	ja	.Ltmp591 # Offset: 520
    0000020e: 	cmpq	$0x1, %r12
    00000212: 	jne	.Ltmp592 # Offset: 530
    00000218: 	movzbl	(%r13), %eax
    0000021d: 	movb	%al, 0x10(%rbx)
.Ltmp595:
    00000220: 	movq	%r12, 0x8(%rbx)
    00000224: 	movb	$0x0, (%rdi,%r12)
    00000229: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000230: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000237: 	addq	$0x20, %rax
    0000023b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000242: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000249: 	je	.Ltmp593 # Offset: 585
.Ltmp596:
    0000024f: 	movq	-0x20(%rax), %rbp
    00000253: 	callq	clock@PLT # Offset: 595
    00000258: 	movq	%rax, end_time(%rip)
    0000025f: 	movq	0x8(%rsp), %rdx
    00000264: 	subq	%fs:0x28, %rdx
    0000026d: 	jne	.Ltmp594 # Offset: 621
    00000273: 	subq	start_time(%rip), %rax
    0000027a: 	pxor	%xmm0, %xmm0
    0000027e: 	movq	%rbp, %rdi
    00000281: 	cvtsi2sd	%rax, %xmm0
    00000286: 	divsd	DATAat0x17ca0(%rip), %xmm0
    0000028e: 	addq	$0x18, %rsp
    00000292: 	popq	%rbx
    00000293: 	popq	%rbp
    00000294: 	popq	%r12
    00000296: 	popq	%r13
    00000298: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 664
    0000029d: 	nopl	(%rax) # Size: 3
.Ltmp591:
    000002a0: 	movq	%rbx, %rdi
    000002a3: 	movq	%rsp, %rsi
    000002a6: 	xorl	%edx, %edx
    000002a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 680
    000002ad: 	movq	%rax, (%rbx)
    000002b0: 	movq	%rax, %rdi
    000002b3: 	movq	(%rsp), %rax
    000002b7: 	movq	%rax, 0x10(%rbx)
.Ltmp597:
    000002bb: 	movq	%r12, %rdx
    000002be: 	movq	%r13, %rsi
    000002c1: 	callq	memcpy@PLT # Offset: 705
    000002c6: 	movq	(%rsp), %r12
    000002ca: 	movq	(%rbx), %rdi
    000002cd: 	jmp	.Ltmp595 # Offset: 717
    000002d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp588:
    000002d8: 	movq	%rbp, %rsi
    000002db: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000002e2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 738
    000002e7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ee: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002f5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002fc: 	jne	.Ltmp596 # Offset: 764
.Ltmp593:
    00000302: 	movq	-0x8(%rdx), %rax
    00000306: 	addq	$0x200, %rax
    0000030c: 	jmp	.Ltmp596 # Offset: 780
    00000311: 	nopl	(%rax) # Size: 7
.Ltmp592:
    00000318: 	testq	%r12, %r12
    0000031b: 	je	.Ltmp595 # Offset: 795
    00000321: 	jmp	.Ltmp597 # Offset: 801
.Ltmp590:
    00000323: 	leaq	DATAat0x17018(%rip), %rdi
    0000032a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 810
.Ltmp594:
    0000032f: 	callq	__stack_chk_fail@PLT # Offset: 815
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct_global0Im11test_structImEXadL_Z6data64EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct_global0Id11test_structIdEXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 96
  State       : disassembled
  Address     : 0xc490
  Size        : 0x25c
  MaxSize     : 0x260
  Offset      : 0xc490
  Section     : .text
  Orc Section : .local.text._Z19test_struct_global0Id11test_structIdEXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB095:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	pxor	%xmm1, %xmm1
    0000002a: 	movq	%rbp, %rsi
    0000002d: 	movapd	DATAat0x17e00(%rip), %xmm5
    00000035: 	cvtsi2sdl	iterations(%rip), %xmm1
    0000003d: 	movapd	DATAat0x17e10(%rip), %xmm4
    00000045: 	movapd	DATAat0x17e20(%rip), %xmm3
    0000004d: 	leaq	dataDouble(%rip), %rdi
    00000054: 	movapd	DATAat0x17e30(%rip), %xmm2
    0000005c: 	movq	%rax, start_time(%rip)
    00000063: 	movapd	%xmm1, %xmm0
    00000067: 	mulsd	DATAat0x17da0(%rip), %xmm1
    0000006f: 	unpcklpd	%xmm0, %xmm0
    00000073: 	mulpd	%xmm0, %xmm5
    00000077: 	addsd	dataDouble+80(%rip), %xmm1
    0000007f: 	mulpd	%xmm0, %xmm4
    00000083: 	addpd	dataDouble+16(%rip), %xmm5
    0000008b: 	mulpd	%xmm0, %xmm3
    0000008f: 	addpd	dataDouble+32(%rip), %xmm4
    00000097: 	mulpd	%xmm0, %xmm2
    0000009b: 	addpd	dataDouble+48(%rip), %xmm3
    000000a3: 	movsd	%xmm1, dataDouble+80(%rip)
    000000ab: 	mulpd	DATAat0x17df0(%rip), %xmm0
    000000b3: 	addpd	dataDouble+64(%rip), %xmm2
    000000bb: 	movaps	%xmm5, dataDouble+16(%rip)
    000000c2: 	addpd	dataDouble(%rip), %xmm0
    000000ca: 	movaps	%xmm4, dataDouble+32(%rip)
    000000d1: 	movaps	%xmm3, dataDouble+48(%rip)
    000000d8: 	movaps	%xmm2, dataDouble+64(%rip)
    000000df: 	movaps	%xmm0, dataDouble(%rip)
    000000e6: 	callq	_Z12check11_sumsIdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 230
    000000eb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000f2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000f9: 	subq	$0x20, %rax
    000000fd: 	cmpq	%rax, %rbx
    00000100: 	je	.Ltmp598 # Offset: 256
    00000106: 	leaq	0x10(%rbx), %rdi
    0000010a: 	movq	0x8(%rbp), %r12
    0000010e: 	movq	%rdi, (%rbx)
    00000111: 	movq	(%rbp), %r13
    00000115: 	movq	%r13, %rax
    00000118: 	addq	%r12, %rax
    0000011b: 	je	.Ltmp599 # Offset: 283
    0000011d: 	testq	%r13, %r13
    00000120: 	je	.Ltmp600 # Offset: 288
.Ltmp599:
    00000126: 	movq	%r12, (%rsp)
    0000012a: 	cmpq	$0xf, %r12
    0000012e: 	ja	.Ltmp601 # Offset: 302
    00000134: 	cmpq	$0x1, %r12
    00000138: 	jne	.Ltmp602 # Offset: 312
    0000013e: 	movzbl	(%r13), %eax
    00000143: 	movb	%al, 0x10(%rbx)
.Ltmp605:
    00000146: 	movq	%r12, 0x8(%rbx)
    0000014a: 	movb	$0x0, (%rdi,%r12)
    0000014f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000156: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000015d: 	addq	$0x20, %rax
    00000161: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000168: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000016f: 	je	.Ltmp603 # Offset: 367
.Ltmp606:
    00000175: 	movq	-0x20(%rax), %rbp
    00000179: 	callq	clock@PLT # Offset: 377
    0000017e: 	movq	%rax, end_time(%rip)
    00000185: 	movq	0x8(%rsp), %rdx
    0000018a: 	subq	%fs:0x28, %rdx
    00000193: 	jne	.Ltmp604 # Offset: 403
    00000199: 	subq	start_time(%rip), %rax
    000001a0: 	pxor	%xmm0, %xmm0
    000001a4: 	movq	%rbp, %rdi
    000001a7: 	cvtsi2sd	%rax, %xmm0
    000001ac: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001b4: 	addq	$0x18, %rsp
    000001b8: 	popq	%rbx
    000001b9: 	popq	%rbp
    000001ba: 	popq	%r12
    000001bc: 	popq	%r13
    000001be: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 446
    000001c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp601:
    000001c8: 	movq	%rbx, %rdi
    000001cb: 	movq	%rsp, %rsi
    000001ce: 	xorl	%edx, %edx
    000001d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 464
    000001d5: 	movq	%rax, (%rbx)
    000001d8: 	movq	%rax, %rdi
    000001db: 	movq	(%rsp), %rax
    000001df: 	movq	%rax, 0x10(%rbx)
.Ltmp607:
    000001e3: 	movq	%r12, %rdx
    000001e6: 	movq	%r13, %rsi
    000001e9: 	callq	memcpy@PLT # Offset: 489
    000001ee: 	movq	(%rsp), %r12
    000001f2: 	movq	(%rbx), %rdi
    000001f5: 	jmp	.Ltmp605 # Offset: 501
    000001fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp598:
    00000200: 	movq	%rbp, %rsi
    00000203: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000020a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 522
    0000020f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000216: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000021d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000224: 	jne	.Ltmp606 # Offset: 548
.Ltmp603:
    0000022a: 	movq	-0x8(%rdx), %rax
    0000022e: 	addq	$0x200, %rax
    00000234: 	jmp	.Ltmp606 # Offset: 564
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp602:
    00000240: 	testq	%r12, %r12
    00000243: 	je	.Ltmp605 # Offset: 579
    00000249: 	jmp	.Ltmp607 # Offset: 585
.Ltmp600:
    0000024b: 	leaq	DATAat0x17018(%rip), %rdi
    00000252: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 594
.Ltmp604:
    00000257: 	callq	__stack_chk_fail@PLT # Offset: 599
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct_global0Id11test_structIdEXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_struct5_global1Is12test_struct5IsEXadL_Z8data16_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 97
  State       : disassembled
  Address     : 0xc6f0
  Size        : 0x264
  MaxSize     : 0x270
  Offset      : 0xc6f0
  Section     : .text
  Orc Section : .local.text._Z20test_struct5_global1Is12test_struct5IsEXadL_Z8data16_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB096:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movzwl	data16_5+8(%rip), %edi
    0000002d: 	movq	data16_5(%rip), %xmm0
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	movl	iterations(%rip), %eax
    00000042: 	testl	%eax, %eax
    00000044: 	jle	.Ltmp608 # Offset: 68
    00000046: 	movq	DATAat0x17d90(%rip), %xmm2
    0000004e: 	leal	-0x1(%rax), %edx
    00000051: 	movd	%edx, %xmm3
    00000055: 	leal	(%rdx,%rdx,8), %edx
    00000058: 	pshuflw	$0x0, %xmm3, %xmm1
    0000005d: 	leal	0x24(%rdi,%rdx,4), %edi
    00000061: 	pmullw	%xmm2, %xmm1
    00000065: 	paddw	%xmm1, %xmm0
    00000069: 	paddw	%xmm2, %xmm0
.Ltmp608:
    0000006d: 	leal	(%rax,%rax,2), %ecx
    00000070: 	movw	%di, data16_5+8(%rip)
    00000077: 	pextrw	$0x3, %xmm0, %r9d
    0000007d: 	pextrw	$0x2, %xmm0, %r8d
    00000083: 	movq	%xmm0, data16_5(%rip)
    0000008b: 	shll	$0x2, %ecx
    0000008e: 	leal	(%rcx,%rax), %edx
    00000091: 	shll	$0x2, %edx
    00000094: 	addw	init_value(%rip), %dx
    0000009b: 	movl	%edx, %esi
    0000009d: 	subl	%ecx, %esi
    0000009f: 	pextrw	$0x0, %xmm0, %ecx
    000000a4: 	cmpw	%cx, %dx
    000000a7: 	jne	.Ltmp609 # Offset: 167
    000000a9: 	pextrw	$0x1, %xmm0, %edx
    000000ae: 	cmpw	%dx, %si
    000000b1: 	jne	.Ltmp609 # Offset: 177
    000000b3: 	leal	(,%rax,4), %edx
    000000ba: 	shll	$0x4, %eax
    000000bd: 	subl	%edx, %esi
    000000bf: 	movl	%esi, %edx
    000000c1: 	subl	%eax, %edx
    000000c3: 	cmpw	%r9w, %dx
    000000c7: 	setne	%al
    000000ca: 	cmpw	%r8w, %si
    000000ce: 	setne	%dl
    000000d1: 	orb	%dl, %al
    000000d3: 	jne	.Ltmp609 # Offset: 211
    000000d5: 	cmpw	%si, %di
    000000d8: 	je	.Ltmp610 # Offset: 216
.Ltmp609:
    000000da: 	movq	(%rbp), %rdx
    000000de: 	leaq	DATAat0x17004(%rip), %rsi
    000000e5: 	movl	$0x1, %edi
    000000ea: 	xorl	%eax, %eax
    000000ec: 	callq	__printf_chk@PLT # Offset: 236
.Ltmp610:
    000000f1: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000f8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ff: 	subq	$0x20, %rax
    00000103: 	cmpq	%rax, %rbx
    00000106: 	je	.Ltmp611 # Offset: 262
    0000010c: 	leaq	0x10(%rbx), %rdi
    00000110: 	movq	0x8(%rbp), %r12
    00000114: 	movq	%rdi, (%rbx)
    00000117: 	movq	(%rbp), %r13
    0000011b: 	movq	%r13, %rax
    0000011e: 	addq	%r12, %rax
    00000121: 	je	.Ltmp612 # Offset: 289
    00000123: 	testq	%r13, %r13
    00000126: 	je	.Ltmp613 # Offset: 294
.Ltmp612:
    0000012c: 	movq	%r12, (%rsp)
    00000130: 	cmpq	$0xf, %r12
    00000134: 	ja	.Ltmp614 # Offset: 308
    0000013a: 	cmpq	$0x1, %r12
    0000013e: 	jne	.Ltmp615 # Offset: 318
    00000144: 	movzbl	(%r13), %eax
    00000149: 	movb	%al, 0x10(%rbx)
.Ltmp618:
    0000014c: 	movq	%r12, 0x8(%rbx)
    00000150: 	movb	$0x0, (%rdi,%r12)
    00000155: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000015c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000163: 	addq	$0x20, %rax
    00000167: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000016e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000175: 	je	.Ltmp616 # Offset: 373
.Ltmp619:
    0000017b: 	movq	-0x20(%rax), %rbp
    0000017f: 	callq	clock@PLT # Offset: 383
    00000184: 	movq	%rax, end_time(%rip)
    0000018b: 	movq	0x8(%rsp), %rdx
    00000190: 	subq	%fs:0x28, %rdx
    00000199: 	jne	.Ltmp617 # Offset: 409
    0000019f: 	subq	start_time(%rip), %rax
    000001a6: 	pxor	%xmm0, %xmm0
    000001aa: 	movq	%rbp, %rdi
    000001ad: 	cvtsi2sd	%rax, %xmm0
    000001b2: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001ba: 	addq	$0x18, %rsp
    000001be: 	popq	%rbx
    000001bf: 	popq	%rbp
    000001c0: 	popq	%r12
    000001c2: 	popq	%r13
    000001c4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 452
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp614:
    000001d0: 	movq	%rbx, %rdi
    000001d3: 	movq	%rsp, %rsi
    000001d6: 	xorl	%edx, %edx
    000001d8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 472
    000001dd: 	movq	%rax, (%rbx)
    000001e0: 	movq	%rax, %rdi
    000001e3: 	movq	(%rsp), %rax
    000001e7: 	movq	%rax, 0x10(%rbx)
.Ltmp620:
    000001eb: 	movq	%r12, %rdx
    000001ee: 	movq	%r13, %rsi
    000001f1: 	callq	memcpy@PLT # Offset: 497
    000001f6: 	movq	(%rsp), %r12
    000001fa: 	movq	(%rbx), %rdi
    000001fd: 	jmp	.Ltmp618 # Offset: 509
    00000202: 	nopw	(%rax,%rax) # Size: 6
.Ltmp611:
    00000208: 	movq	%rbp, %rsi
    0000020b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000212: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 530
    00000217: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000021e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000225: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000022c: 	jne	.Ltmp619 # Offset: 556
.Ltmp616:
    00000232: 	movq	-0x8(%rdx), %rax
    00000236: 	addq	$0x200, %rax
    0000023c: 	jmp	.Ltmp619 # Offset: 572
    00000241: 	nopl	(%rax) # Size: 7
.Ltmp615:
    00000248: 	testq	%r12, %r12
    0000024b: 	je	.Ltmp618 # Offset: 587
    00000251: 	jmp	.Ltmp620 # Offset: 593
.Ltmp617:
    00000253: 	callq	__stack_chk_fail@PLT # Offset: 595
.Ltmp613:
    00000258: 	leaq	DATAat0x17018(%rip), %rdi
    0000025f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 607
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_struct5_global1Is12test_struct5IsEXadL_Z8data16_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct5_local0IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 98
  State       : disassembled
  Address     : 0xc960
  Size        : 0x27c
  MaxSize     : 0x280
  Offset      : 0xc960
  Section     : .text
  Orc Section : .local.text._Z19test_struct5_local0IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB097:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pxor	%xmm2, %xmm2
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x18(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	cvtsi2sdl	init_value(%rip), %xmm2
    0000002d: 	movsd	%xmm2, 0x8(%rsp)
    00000033: 	callq	clock@PLT # Offset: 51
    00000038: 	pxor	%xmm0, %xmm0
    0000003c: 	pxor	%xmm4, %xmm4
    00000040: 	movsd	DATAat0x17de8(%rip), %xmm1
    00000048: 	cvtsi2sdl	iterations(%rip), %xmm0
    00000050: 	movsd	0x8(%rsp), %xmm2
    00000056: 	movq	%rax, start_time(%rip)
    0000005d: 	movl	$0x1, %edx
    00000062: 	cvtsi2sdl	init_value(%rip), %xmm4
    0000006a: 	movsd	DATAat0x17de0(%rip), %xmm3
    00000072: 	mulsd	%xmm0, %xmm1
    00000076: 	mulsd	%xmm0, %xmm3
    0000007a: 	movapd	%xmm1, %xmm5
    0000007e: 	addsd	%xmm4, %xmm1
    00000082: 	addsd	%xmm2, %xmm5
    00000086: 	ucomisd	%xmm1, %xmm5
    0000008a: 	setp	%al
    0000008d: 	cmovnel	%edx, %eax
    00000090: 	testb	%al, %al
    00000092: 	jne	.Ltmp621 # Offset: 146
    00000094: 	movapd	%xmm3, %xmm1
    00000098: 	addsd	%xmm4, %xmm3
    0000009c: 	addsd	%xmm2, %xmm1
    000000a0: 	ucomisd	%xmm3, %xmm1
    000000a4: 	setp	%al
    000000a7: 	cmovnel	%edx, %eax
    000000aa: 	testb	%al, %al
    000000ac: 	jne	.Ltmp621 # Offset: 172
    000000ae: 	movsd	DATAat0x17e00(%rip), %xmm1
    000000b6: 	mulsd	%xmm0, %xmm1
    000000ba: 	mulsd	DATAat0x17dd0(%rip), %xmm0
    000000c2: 	movapd	%xmm1, %xmm3
    000000c6: 	addsd	%xmm4, %xmm1
    000000ca: 	addsd	%xmm2, %xmm3
    000000ce: 	ucomisd	%xmm1, %xmm3
    000000d2: 	setp	%al
    000000d5: 	cmovnel	%edx, %eax
    000000d8: 	testb	%al, %al
    000000da: 	jne	.Ltmp621 # Offset: 218
    000000dc: 	addsd	%xmm0, %xmm2
    000000e0: 	addsd	%xmm4, %xmm0
    000000e4: 	ucomisd	%xmm0, %xmm2
    000000e8: 	setp	%al
    000000eb: 	cmovnel	%edx, %eax
    000000ee: 	testb	%al, %al
    000000f0: 	je	.Ltmp622 # Offset: 240
.Ltmp621:
    000000f2: 	movq	(%rbp), %rdx
    000000f6: 	leaq	DATAat0x17004(%rip), %rsi
    000000fd: 	movl	$0x1, %edi
    00000102: 	xorl	%eax, %eax
    00000104: 	callq	__printf_chk@PLT # Offset: 260
.Ltmp622:
    00000109: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000110: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000117: 	subq	$0x20, %rax
    0000011b: 	cmpq	%rax, %rbx
    0000011e: 	je	.Ltmp623 # Offset: 286
    00000124: 	leaq	0x10(%rbx), %rdi
    00000128: 	movq	0x8(%rbp), %r12
    0000012c: 	movq	%rdi, (%rbx)
    0000012f: 	movq	(%rbp), %r13
    00000133: 	movq	%r13, %rax
    00000136: 	addq	%r12, %rax
    00000139: 	je	.Ltmp624 # Offset: 313
    0000013b: 	testq	%r13, %r13
    0000013e: 	je	.Ltmp625 # Offset: 318
.Ltmp624:
    00000144: 	movq	%r12, 0x10(%rsp)
    00000149: 	cmpq	$0xf, %r12
    0000014d: 	ja	.Ltmp626 # Offset: 333
    00000153: 	cmpq	$0x1, %r12
    00000157: 	jne	.Ltmp627 # Offset: 343
    0000015d: 	movzbl	(%r13), %eax
    00000162: 	movb	%al, 0x10(%rbx)
.Ltmp630:
    00000165: 	movq	%r12, 0x8(%rbx)
    00000169: 	movb	$0x0, (%rdi,%r12)
    0000016e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000175: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000017c: 	addq	$0x20, %rax
    00000180: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000187: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000018e: 	je	.Ltmp628 # Offset: 398
.Ltmp631:
    00000194: 	movq	-0x20(%rax), %rbp
    00000198: 	callq	clock@PLT # Offset: 408
    0000019d: 	movq	%rax, end_time(%rip)
    000001a4: 	movq	0x18(%rsp), %rdx
    000001a9: 	subq	%fs:0x28, %rdx
    000001b2: 	jne	.Ltmp629 # Offset: 434
    000001b8: 	subq	start_time(%rip), %rax
    000001bf: 	pxor	%xmm0, %xmm0
    000001c3: 	movq	%rbp, %rdi
    000001c6: 	cvtsi2sd	%rax, %xmm0
    000001cb: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001d3: 	addq	$0x28, %rsp
    000001d7: 	popq	%rbx
    000001d8: 	popq	%rbp
    000001d9: 	popq	%r12
    000001db: 	popq	%r13
    000001dd: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 477
    000001e2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp626:
    000001e8: 	movq	%rbx, %rdi
    000001eb: 	leaq	0x10(%rsp), %rsi
    000001f0: 	xorl	%edx, %edx
    000001f2: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 498
    000001f7: 	movq	%rax, (%rbx)
    000001fa: 	movq	%rax, %rdi
    000001fd: 	movq	0x10(%rsp), %rax
    00000202: 	movq	%rax, 0x10(%rbx)
.Ltmp632:
    00000206: 	movq	%r12, %rdx
    00000209: 	movq	%r13, %rsi
    0000020c: 	callq	memcpy@PLT # Offset: 524
    00000211: 	movq	0x10(%rsp), %r12
    00000216: 	movq	(%rbx), %rdi
    00000219: 	jmp	.Ltmp630 # Offset: 537
    0000021e: 	nop # Size: 2
.Ltmp623:
    00000220: 	movq	%rbp, %rsi
    00000223: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000022a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 554
    0000022f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000236: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000023d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000244: 	jne	.Ltmp631 # Offset: 580
.Ltmp628:
    0000024a: 	movq	-0x8(%rdx), %rax
    0000024e: 	addq	$0x200, %rax
    00000254: 	jmp	.Ltmp631 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp627:
    00000260: 	testq	%r12, %r12
    00000263: 	je	.Ltmp630 # Offset: 611
    00000269: 	jmp	.Ltmp632 # Offset: 617
.Ltmp625:
    0000026b: 	leaq	DATAat0x17018(%rip), %rdi
    00000272: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 626
.Ltmp629:
    00000277: 	callq	__stack_chk_fail@PLT # Offset: 631
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct5_local0IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_struct5_global2Im12test_struct5ImEXadL_Z8data64_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 99
  State       : disassembled
  Address     : 0xcbe0
  Size        : 0x284
  MaxSize     : 0x290
  Offset      : 0xcbe0
  Section     : .text
  Orc Section : .local.text._Z20test_struct5_global2Im12test_struct5ImEXadL_Z8data64_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB098:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movq	data64_5(%rip), %rsi
    0000002d: 	movq	data64_5+8(%rip), %rdi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movslq	iterations(%rip), %rax
    00000042: 	movq	data64_5+16(%rip), %r8
    00000049: 	movq	data64_5+24(%rip), %r9
    00000050: 	movq	data64_5+32(%rip), %r10
    00000057: 	testl	%eax, %eax
    00000059: 	jle	.Ltmp633 # Offset: 89
    0000005b: 	leal	-0x1(%rax), %edx
    0000005e: 	leaq	(%rdx,%rdx,2), %rcx
    00000062: 	leaq	(%rdx,%rcx,4), %rcx
    00000066: 	leaq	0x34(%rsi,%rcx,4), %rsi
    0000006b: 	leaq	(%rdx,%rdx,4), %rcx
    0000006f: 	leaq	(%rdx,%rdx,8), %rdx
    00000073: 	leaq	0x14(%r9,%rcx,4), %r9
    00000078: 	shlq	$0x2, %rdx
    0000007c: 	leaq	0x28(%rdi,%rcx,8), %rdi
    00000081: 	leaq	0x24(%r8,%rdx), %r8
    00000086: 	leaq	0x24(%r10,%rdx), %r10
.Ltmp633:
    0000008b: 	leaq	(%rax,%rax,2), %rdx
    0000008f: 	movslq	init_value(%rip), %rcx
    00000096: 	movq	%rsi, data64_5(%rip)
    0000009d: 	shlq	$0x2, %rdx
    000000a1: 	movq	%rdi, data64_5+8(%rip)
    000000a8: 	leaq	(%rdx,%rax), %r11
    000000ac: 	movq	%r8, data64_5+16(%rip)
    000000b3: 	leaq	(%rcx,%r11,4), %r11
    000000b7: 	movq	%r9, data64_5+24(%rip)
    000000be: 	movq	%r11, %rcx
    000000c1: 	movq	%r10, data64_5+32(%rip)
    000000c8: 	subq	%rdx, %rcx
    000000cb: 	cmpq	%rsi, %r11
    000000ce: 	jne	.Ltmp634 # Offset: 206
    000000d0: 	cmpq	%rdi, %rcx
    000000d3: 	jne	.Ltmp634 # Offset: 211
    000000d5: 	leaq	(,%rax,4), %rdx
    000000dd: 	shlq	$0x4, %rax
    000000e1: 	subq	%rdx, %rcx
    000000e4: 	movq	%rcx, %rdx
    000000e7: 	subq	%rax, %rdx
    000000ea: 	cmpq	%r9, %rdx
    000000ed: 	setne	%al
    000000f0: 	cmpq	%r8, %rcx
    000000f3: 	setne	%dl
    000000f6: 	orb	%dl, %al
    000000f8: 	jne	.Ltmp634 # Offset: 248
    000000fa: 	cmpq	%rcx, %r10
    000000fd: 	je	.Ltmp635 # Offset: 253
.Ltmp634:
    000000ff: 	movq	(%rbp), %rdx
    00000103: 	leaq	DATAat0x17004(%rip), %rsi
    0000010a: 	movl	$0x1, %edi
    0000010f: 	xorl	%eax, %eax
    00000111: 	callq	__printf_chk@PLT # Offset: 273
.Ltmp635:
    00000116: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000011d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000124: 	subq	$0x20, %rax
    00000128: 	cmpq	%rax, %rbx
    0000012b: 	je	.Ltmp636 # Offset: 299
    00000131: 	leaq	0x10(%rbx), %rdi
    00000135: 	movq	0x8(%rbp), %r12
    00000139: 	movq	%rdi, (%rbx)
    0000013c: 	movq	(%rbp), %r13
    00000140: 	movq	%r13, %rax
    00000143: 	addq	%r12, %rax
    00000146: 	je	.Ltmp637 # Offset: 326
    00000148: 	testq	%r13, %r13
    0000014b: 	je	.Ltmp638 # Offset: 331
.Ltmp637:
    00000151: 	movq	%r12, (%rsp)
    00000155: 	cmpq	$0xf, %r12
    00000159: 	ja	.Ltmp639 # Offset: 345
    0000015f: 	cmpq	$0x1, %r12
    00000163: 	jne	.Ltmp640 # Offset: 355
    00000169: 	movzbl	(%r13), %eax
    0000016e: 	movb	%al, 0x10(%rbx)
.Ltmp643:
    00000171: 	movq	%r12, 0x8(%rbx)
    00000175: 	movb	$0x0, (%rdi,%r12)
    0000017a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000181: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000188: 	addq	$0x20, %rax
    0000018c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000193: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000019a: 	je	.Ltmp641 # Offset: 410
.Ltmp644:
    000001a0: 	movq	-0x20(%rax), %rbp
    000001a4: 	callq	clock@PLT # Offset: 420
    000001a9: 	movq	%rax, end_time(%rip)
    000001b0: 	movq	0x8(%rsp), %rdx
    000001b5: 	subq	%fs:0x28, %rdx
    000001be: 	jne	.Ltmp642 # Offset: 446
    000001c4: 	subq	start_time(%rip), %rax
    000001cb: 	pxor	%xmm0, %xmm0
    000001cf: 	movq	%rbp, %rdi
    000001d2: 	cvtsi2sd	%rax, %xmm0
    000001d7: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001df: 	addq	$0x18, %rsp
    000001e3: 	popq	%rbx
    000001e4: 	popq	%rbp
    000001e5: 	popq	%r12
    000001e7: 	popq	%r13
    000001e9: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 489
    000001ee: 	nop # Size: 2
.Ltmp639:
    000001f0: 	movq	%rbx, %rdi
    000001f3: 	movq	%rsp, %rsi
    000001f6: 	xorl	%edx, %edx
    000001f8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 504
    000001fd: 	movq	%rax, (%rbx)
    00000200: 	movq	%rax, %rdi
    00000203: 	movq	(%rsp), %rax
    00000207: 	movq	%rax, 0x10(%rbx)
.Ltmp645:
    0000020b: 	movq	%r12, %rdx
    0000020e: 	movq	%r13, %rsi
    00000211: 	callq	memcpy@PLT # Offset: 529
    00000216: 	movq	(%rsp), %r12
    0000021a: 	movq	(%rbx), %rdi
    0000021d: 	jmp	.Ltmp643 # Offset: 541
    00000222: 	nopw	(%rax,%rax) # Size: 6
.Ltmp636:
    00000228: 	movq	%rbp, %rsi
    0000022b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000232: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 562
    00000237: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000023e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000245: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000024c: 	jne	.Ltmp644 # Offset: 588
.Ltmp641:
    00000252: 	movq	-0x8(%rdx), %rax
    00000256: 	addq	$0x200, %rax
    0000025c: 	jmp	.Ltmp644 # Offset: 604
    00000261: 	nopl	(%rax) # Size: 7
.Ltmp640:
    00000268: 	testq	%r12, %r12
    0000026b: 	je	.Ltmp643 # Offset: 619
    00000271: 	jmp	.Ltmp645 # Offset: 625
.Ltmp642:
    00000273: 	callq	__stack_chk_fail@PLT # Offset: 627
.Ltmp638:
    00000278: 	leaq	DATAat0x17018(%rip), %rdi
    0000027f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 639
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_struct5_global2Im12test_struct5ImEXadL_Z8data64_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_struct5_global1Ii12test_struct5IiEXadL_Z8data32_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 100
  State       : disassembled
  Address     : 0xce70
  Size        : 0x27c
  MaxSize     : 0x280
  Offset      : 0xce70
  Section     : .text
  Orc Section : .local.text._Z20test_struct5_global1Ii12test_struct5IiEXadL_Z8data32_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB099:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movl	iterations(%rip), %edx
    0000002c: 	movdqa	data32_5(%rip), %xmm0
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	data32_5+16(%rip), %esi
    00000041: 	testl	%edx, %edx
    00000043: 	jle	.Ltmp646 # Offset: 67
    00000045: 	movd	%edx, %xmm4
    00000049: 	movdqa	DATAat0x17d70(%rip), %xmm3
    00000051: 	leal	(%rdx,%rdx,8), %eax
    00000054: 	pshufd	$0x0, %xmm4, %xmm1
    00000059: 	leal	(%rsi,%rax,4), %esi
    0000005c: 	movdqa	%xmm1, %xmm2
    00000060: 	psrlq	$0x20, %xmm1
    00000065: 	pmuludq	%xmm3, %xmm2
    00000069: 	psrlq	$0x20, %xmm3
    0000006e: 	pmuludq	%xmm3, %xmm1
    00000072: 	pshufd	$0x8, %xmm2, %xmm2
    00000077: 	pshufd	$0x8, %xmm1, %xmm1
    0000007c: 	punpckldq	%xmm1, %xmm2
    00000080: 	paddd	%xmm2, %xmm0
.Ltmp646:
    00000084: 	pshufd	$0xff, %xmm0, %xmm1
    00000089: 	imull	$0x34, %edx, %eax
    0000008c: 	leal	(%rdx,%rdx,2), %edi
    0000008f: 	addl	init_value(%rip), %eax
    00000095: 	shll	$0x2, %edi
    00000098: 	movd	%xmm1, %r9d
    0000009d: 	movl	%eax, %ecx
    0000009f: 	movl	%esi, data32_5+16(%rip)
    000000a5: 	movdqa	%xmm0, %xmm1
    000000a9: 	subl	%edi, %ecx
    000000ab: 	movd	%xmm0, %edi
    000000af: 	movaps	%xmm0, data32_5(%rip)
    000000b6: 	punpckhdq	%xmm0, %xmm1
    000000ba: 	movd	%xmm1, %r8d
    000000bf: 	cmpl	%eax, %edi
    000000c1: 	jne	.Ltmp647 # Offset: 193
    000000c3: 	pshufd	$0x55, %xmm0, %xmm0
    000000c8: 	movd	%xmm0, %eax
    000000cc: 	cmpl	%ecx, %eax
    000000ce: 	jne	.Ltmp647 # Offset: 206
    000000d0: 	leal	(,%rdx,4), %eax
    000000d7: 	shll	$0x4, %edx
    000000da: 	subl	%eax, %ecx
    000000dc: 	movl	%ecx, %eax
    000000de: 	subl	%edx, %eax
    000000e0: 	cmpl	%r9d, %eax
    000000e3: 	setne	%al
    000000e6: 	cmpl	%ecx, %r8d
    000000e9: 	setne	%dl
    000000ec: 	orb	%dl, %al
    000000ee: 	jne	.Ltmp647 # Offset: 238
    000000f0: 	cmpl	%ecx, %esi
    000000f2: 	je	.Ltmp648 # Offset: 242
.Ltmp647:
    000000f4: 	movq	(%rbp), %rdx
    000000f8: 	leaq	DATAat0x17004(%rip), %rsi
    000000ff: 	movl	$0x1, %edi
    00000104: 	xorl	%eax, %eax
    00000106: 	callq	__printf_chk@PLT # Offset: 262
.Ltmp648:
    0000010b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000112: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000119: 	subq	$0x20, %rax
    0000011d: 	cmpq	%rax, %rbx
    00000120: 	je	.Ltmp649 # Offset: 288
    00000126: 	leaq	0x10(%rbx), %rdi
    0000012a: 	movq	0x8(%rbp), %r12
    0000012e: 	movq	%rdi, (%rbx)
    00000131: 	movq	(%rbp), %r13
    00000135: 	movq	%r13, %rax
    00000138: 	addq	%r12, %rax
    0000013b: 	je	.Ltmp650 # Offset: 315
    0000013d: 	testq	%r13, %r13
    00000140: 	je	.Ltmp651 # Offset: 320
.Ltmp650:
    00000146: 	movq	%r12, (%rsp)
    0000014a: 	cmpq	$0xf, %r12
    0000014e: 	ja	.Ltmp652 # Offset: 334
    00000154: 	cmpq	$0x1, %r12
    00000158: 	jne	.Ltmp653 # Offset: 344
    0000015e: 	movzbl	(%r13), %eax
    00000163: 	movb	%al, 0x10(%rbx)
.Ltmp656:
    00000166: 	movq	%r12, 0x8(%rbx)
    0000016a: 	movb	$0x0, (%rdi,%r12)
    0000016f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000176: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000017d: 	addq	$0x20, %rax
    00000181: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000188: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000018f: 	je	.Ltmp654 # Offset: 399
.Ltmp657:
    00000195: 	movq	-0x20(%rax), %rbp
    00000199: 	callq	clock@PLT # Offset: 409
    0000019e: 	movq	%rax, end_time(%rip)
    000001a5: 	movq	0x8(%rsp), %rdx
    000001aa: 	subq	%fs:0x28, %rdx
    000001b3: 	jne	.Ltmp655 # Offset: 435
    000001b9: 	subq	start_time(%rip), %rax
    000001c0: 	pxor	%xmm0, %xmm0
    000001c4: 	movq	%rbp, %rdi
    000001c7: 	cvtsi2sd	%rax, %xmm0
    000001cc: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001d4: 	addq	$0x18, %rsp
    000001d8: 	popq	%rbx
    000001d9: 	popq	%rbp
    000001da: 	popq	%r12
    000001dc: 	popq	%r13
    000001de: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 478
    000001e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp652:
    000001e8: 	movq	%rbx, %rdi
    000001eb: 	movq	%rsp, %rsi
    000001ee: 	xorl	%edx, %edx
    000001f0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 496
    000001f5: 	movq	%rax, (%rbx)
    000001f8: 	movq	%rax, %rdi
    000001fb: 	movq	(%rsp), %rax
    000001ff: 	movq	%rax, 0x10(%rbx)
.Ltmp658:
    00000203: 	movq	%r12, %rdx
    00000206: 	movq	%r13, %rsi
    00000209: 	callq	memcpy@PLT # Offset: 521
    0000020e: 	movq	(%rsp), %r12
    00000212: 	movq	(%rbx), %rdi
    00000215: 	jmp	.Ltmp656 # Offset: 533
    0000021a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp649:
    00000220: 	movq	%rbp, %rsi
    00000223: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000022a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 554
    0000022f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000236: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000023d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000244: 	jne	.Ltmp657 # Offset: 580
.Ltmp654:
    0000024a: 	movq	-0x8(%rdx), %rax
    0000024e: 	addq	$0x200, %rax
    00000254: 	jmp	.Ltmp657 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp653:
    00000260: 	testq	%r12, %r12
    00000263: 	je	.Ltmp656 # Offset: 611
    00000269: 	jmp	.Ltmp658 # Offset: 617
.Ltmp655:
    0000026b: 	callq	__stack_chk_fail@PLT # Offset: 619
.Ltmp651:
    00000270: 	leaq	DATAat0x17018(%rip), %rdi
    00000277: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 631
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_struct5_global1Ii12test_struct5IiEXadL_Z8data32_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_struct5_global2Is12test_struct5IsEXadL_Z8data16_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 101
  State       : disassembled
  Address     : 0xd0f0
  Size        : 0x264
  MaxSize     : 0x270
  Offset      : 0xd0f0
  Section     : .text
  Orc Section : .local.text._Z20test_struct5_global2Is12test_struct5IsEXadL_Z8data16_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0100:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movzwl	data16_5+8(%rip), %edi
    0000002d: 	movq	data16_5(%rip), %xmm0
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	movl	iterations(%rip), %eax
    00000042: 	testl	%eax, %eax
    00000044: 	jle	.Ltmp659 # Offset: 68
    00000046: 	movq	DATAat0x17d90(%rip), %xmm2
    0000004e: 	leal	-0x1(%rax), %edx
    00000051: 	movd	%edx, %xmm3
    00000055: 	leal	(%rdx,%rdx,8), %edx
    00000058: 	pshuflw	$0x0, %xmm3, %xmm1
    0000005d: 	leal	0x24(%rdi,%rdx,4), %edi
    00000061: 	pmullw	%xmm2, %xmm1
    00000065: 	paddw	%xmm1, %xmm0
    00000069: 	paddw	%xmm2, %xmm0
.Ltmp659:
    0000006d: 	leal	(%rax,%rax,2), %ecx
    00000070: 	movw	%di, data16_5+8(%rip)
    00000077: 	pextrw	$0x3, %xmm0, %r9d
    0000007d: 	pextrw	$0x2, %xmm0, %r8d
    00000083: 	movq	%xmm0, data16_5(%rip)
    0000008b: 	shll	$0x2, %ecx
    0000008e: 	leal	(%rcx,%rax), %edx
    00000091: 	shll	$0x2, %edx
    00000094: 	addw	init_value(%rip), %dx
    0000009b: 	movl	%edx, %esi
    0000009d: 	subl	%ecx, %esi
    0000009f: 	pextrw	$0x0, %xmm0, %ecx
    000000a4: 	cmpw	%cx, %dx
    000000a7: 	jne	.Ltmp660 # Offset: 167
    000000a9: 	pextrw	$0x1, %xmm0, %edx
    000000ae: 	cmpw	%dx, %si
    000000b1: 	jne	.Ltmp660 # Offset: 177
    000000b3: 	leal	(,%rax,4), %edx
    000000ba: 	shll	$0x4, %eax
    000000bd: 	subl	%edx, %esi
    000000bf: 	movl	%esi, %edx
    000000c1: 	subl	%eax, %edx
    000000c3: 	cmpw	%r9w, %dx
    000000c7: 	setne	%al
    000000ca: 	cmpw	%r8w, %si
    000000ce: 	setne	%dl
    000000d1: 	orb	%dl, %al
    000000d3: 	jne	.Ltmp660 # Offset: 211
    000000d5: 	cmpw	%si, %di
    000000d8: 	je	.Ltmp661 # Offset: 216
.Ltmp660:
    000000da: 	movq	(%rbp), %rdx
    000000de: 	leaq	DATAat0x17004(%rip), %rsi
    000000e5: 	movl	$0x1, %edi
    000000ea: 	xorl	%eax, %eax
    000000ec: 	callq	__printf_chk@PLT # Offset: 236
.Ltmp661:
    000000f1: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000f8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ff: 	subq	$0x20, %rax
    00000103: 	cmpq	%rax, %rbx
    00000106: 	je	.Ltmp662 # Offset: 262
    0000010c: 	leaq	0x10(%rbx), %rdi
    00000110: 	movq	0x8(%rbp), %r12
    00000114: 	movq	%rdi, (%rbx)
    00000117: 	movq	(%rbp), %r13
    0000011b: 	movq	%r13, %rax
    0000011e: 	addq	%r12, %rax
    00000121: 	je	.Ltmp663 # Offset: 289
    00000123: 	testq	%r13, %r13
    00000126: 	je	.Ltmp664 # Offset: 294
.Ltmp663:
    0000012c: 	movq	%r12, (%rsp)
    00000130: 	cmpq	$0xf, %r12
    00000134: 	ja	.Ltmp665 # Offset: 308
    0000013a: 	cmpq	$0x1, %r12
    0000013e: 	jne	.Ltmp666 # Offset: 318
    00000144: 	movzbl	(%r13), %eax
    00000149: 	movb	%al, 0x10(%rbx)
.Ltmp669:
    0000014c: 	movq	%r12, 0x8(%rbx)
    00000150: 	movb	$0x0, (%rdi,%r12)
    00000155: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000015c: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000163: 	addq	$0x20, %rax
    00000167: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000016e: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000175: 	je	.Ltmp667 # Offset: 373
.Ltmp670:
    0000017b: 	movq	-0x20(%rax), %rbp
    0000017f: 	callq	clock@PLT # Offset: 383
    00000184: 	movq	%rax, end_time(%rip)
    0000018b: 	movq	0x8(%rsp), %rdx
    00000190: 	subq	%fs:0x28, %rdx
    00000199: 	jne	.Ltmp668 # Offset: 409
    0000019f: 	subq	start_time(%rip), %rax
    000001a6: 	pxor	%xmm0, %xmm0
    000001aa: 	movq	%rbp, %rdi
    000001ad: 	cvtsi2sd	%rax, %xmm0
    000001b2: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001ba: 	addq	$0x18, %rsp
    000001be: 	popq	%rbx
    000001bf: 	popq	%rbp
    000001c0: 	popq	%r12
    000001c2: 	popq	%r13
    000001c4: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 452
    000001c9: 	nopl	(%rax) # Size: 7
.Ltmp665:
    000001d0: 	movq	%rbx, %rdi
    000001d3: 	movq	%rsp, %rsi
    000001d6: 	xorl	%edx, %edx
    000001d8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 472
    000001dd: 	movq	%rax, (%rbx)
    000001e0: 	movq	%rax, %rdi
    000001e3: 	movq	(%rsp), %rax
    000001e7: 	movq	%rax, 0x10(%rbx)
.Ltmp671:
    000001eb: 	movq	%r12, %rdx
    000001ee: 	movq	%r13, %rsi
    000001f1: 	callq	memcpy@PLT # Offset: 497
    000001f6: 	movq	(%rsp), %r12
    000001fa: 	movq	(%rbx), %rdi
    000001fd: 	jmp	.Ltmp669 # Offset: 509
    00000202: 	nopw	(%rax,%rax) # Size: 6
.Ltmp662:
    00000208: 	movq	%rbp, %rsi
    0000020b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000212: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 530
    00000217: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000021e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000225: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000022c: 	jne	.Ltmp670 # Offset: 556
.Ltmp667:
    00000232: 	movq	-0x8(%rdx), %rax
    00000236: 	addq	$0x200, %rax
    0000023c: 	jmp	.Ltmp670 # Offset: 572
    00000241: 	nopl	(%rax) # Size: 7
.Ltmp666:
    00000248: 	testq	%r12, %r12
    0000024b: 	je	.Ltmp669 # Offset: 587
    00000251: 	jmp	.Ltmp671 # Offset: 593
.Ltmp668:
    00000253: 	callq	__stack_chk_fail@PLT # Offset: 595
.Ltmp664:
    00000258: 	leaq	DATAat0x17018(%rip), %rdi
    0000025f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 607
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_struct5_global2Is12test_struct5IsEXadL_Z8data16_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_struct5_global1Im12test_struct5ImEXadL_Z8data64_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 102
  State       : disassembled
  Address     : 0xd360
  Size        : 0x284
  MaxSize     : 0x290
  Offset      : 0xd360
  Section     : .text
  Orc Section : .local.text._Z20test_struct5_global1Im12test_struct5ImEXadL_Z8data64_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0101:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movq	data64_5(%rip), %rsi
    0000002d: 	movq	data64_5+8(%rip), %rdi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movslq	iterations(%rip), %rax
    00000042: 	movq	data64_5+16(%rip), %r8
    00000049: 	movq	data64_5+24(%rip), %r9
    00000050: 	movq	data64_5+32(%rip), %r10
    00000057: 	testl	%eax, %eax
    00000059: 	jle	.Ltmp672 # Offset: 89
    0000005b: 	leal	-0x1(%rax), %edx
    0000005e: 	leaq	(%rdx,%rdx,2), %rcx
    00000062: 	leaq	(%rdx,%rcx,4), %rcx
    00000066: 	leaq	0x34(%rsi,%rcx,4), %rsi
    0000006b: 	leaq	(%rdx,%rdx,4), %rcx
    0000006f: 	leaq	(%rdx,%rdx,8), %rdx
    00000073: 	leaq	0x28(%rdi,%rcx,8), %rdi
    00000078: 	shlq	$0x2, %rdx
    0000007c: 	leaq	0x14(%r9,%rcx,4), %r9
    00000081: 	leaq	0x24(%r8,%rdx), %r8
    00000086: 	leaq	0x24(%r10,%rdx), %r10
.Ltmp672:
    0000008b: 	leaq	(%rax,%rax,2), %rdx
    0000008f: 	movslq	init_value(%rip), %rcx
    00000096: 	movq	%rsi, data64_5(%rip)
    0000009d: 	shlq	$0x2, %rdx
    000000a1: 	movq	%rdi, data64_5+8(%rip)
    000000a8: 	leaq	(%rdx,%rax), %r11
    000000ac: 	movq	%r8, data64_5+16(%rip)
    000000b3: 	leaq	(%rcx,%r11,4), %r11
    000000b7: 	movq	%r9, data64_5+24(%rip)
    000000be: 	movq	%r11, %rcx
    000000c1: 	movq	%r10, data64_5+32(%rip)
    000000c8: 	subq	%rdx, %rcx
    000000cb: 	cmpq	%rsi, %r11
    000000ce: 	jne	.Ltmp673 # Offset: 206
    000000d0: 	cmpq	%rdi, %rcx
    000000d3: 	jne	.Ltmp673 # Offset: 211
    000000d5: 	leaq	(,%rax,4), %rdx
    000000dd: 	shlq	$0x4, %rax
    000000e1: 	subq	%rdx, %rcx
    000000e4: 	movq	%rcx, %rdx
    000000e7: 	subq	%rax, %rdx
    000000ea: 	cmpq	%r9, %rdx
    000000ed: 	setne	%al
    000000f0: 	cmpq	%r8, %rcx
    000000f3: 	setne	%dl
    000000f6: 	orb	%dl, %al
    000000f8: 	jne	.Ltmp673 # Offset: 248
    000000fa: 	cmpq	%rcx, %r10
    000000fd: 	je	.Ltmp674 # Offset: 253
.Ltmp673:
    000000ff: 	movq	(%rbp), %rdx
    00000103: 	leaq	DATAat0x17004(%rip), %rsi
    0000010a: 	movl	$0x1, %edi
    0000010f: 	xorl	%eax, %eax
    00000111: 	callq	__printf_chk@PLT # Offset: 273
.Ltmp674:
    00000116: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000011d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000124: 	subq	$0x20, %rax
    00000128: 	cmpq	%rax, %rbx
    0000012b: 	je	.Ltmp675 # Offset: 299
    00000131: 	leaq	0x10(%rbx), %rdi
    00000135: 	movq	0x8(%rbp), %r12
    00000139: 	movq	%rdi, (%rbx)
    0000013c: 	movq	(%rbp), %r13
    00000140: 	movq	%r13, %rax
    00000143: 	addq	%r12, %rax
    00000146: 	je	.Ltmp676 # Offset: 326
    00000148: 	testq	%r13, %r13
    0000014b: 	je	.Ltmp677 # Offset: 331
.Ltmp676:
    00000151: 	movq	%r12, (%rsp)
    00000155: 	cmpq	$0xf, %r12
    00000159: 	ja	.Ltmp678 # Offset: 345
    0000015f: 	cmpq	$0x1, %r12
    00000163: 	jne	.Ltmp679 # Offset: 355
    00000169: 	movzbl	(%r13), %eax
    0000016e: 	movb	%al, 0x10(%rbx)
.Ltmp682:
    00000171: 	movq	%r12, 0x8(%rbx)
    00000175: 	movb	$0x0, (%rdi,%r12)
    0000017a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000181: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000188: 	addq	$0x20, %rax
    0000018c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000193: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000019a: 	je	.Ltmp680 # Offset: 410
.Ltmp683:
    000001a0: 	movq	-0x20(%rax), %rbp
    000001a4: 	callq	clock@PLT # Offset: 420
    000001a9: 	movq	%rax, end_time(%rip)
    000001b0: 	movq	0x8(%rsp), %rdx
    000001b5: 	subq	%fs:0x28, %rdx
    000001be: 	jne	.Ltmp681 # Offset: 446
    000001c4: 	subq	start_time(%rip), %rax
    000001cb: 	pxor	%xmm0, %xmm0
    000001cf: 	movq	%rbp, %rdi
    000001d2: 	cvtsi2sd	%rax, %xmm0
    000001d7: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001df: 	addq	$0x18, %rsp
    000001e3: 	popq	%rbx
    000001e4: 	popq	%rbp
    000001e5: 	popq	%r12
    000001e7: 	popq	%r13
    000001e9: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 489
    000001ee: 	nop # Size: 2
.Ltmp678:
    000001f0: 	movq	%rbx, %rdi
    000001f3: 	movq	%rsp, %rsi
    000001f6: 	xorl	%edx, %edx
    000001f8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 504
    000001fd: 	movq	%rax, (%rbx)
    00000200: 	movq	%rax, %rdi
    00000203: 	movq	(%rsp), %rax
    00000207: 	movq	%rax, 0x10(%rbx)
.Ltmp684:
    0000020b: 	movq	%r12, %rdx
    0000020e: 	movq	%r13, %rsi
    00000211: 	callq	memcpy@PLT # Offset: 529
    00000216: 	movq	(%rsp), %r12
    0000021a: 	movq	(%rbx), %rdi
    0000021d: 	jmp	.Ltmp682 # Offset: 541
    00000222: 	nopw	(%rax,%rax) # Size: 6
.Ltmp675:
    00000228: 	movq	%rbp, %rsi
    0000022b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000232: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 562
    00000237: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000023e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000245: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000024c: 	jne	.Ltmp683 # Offset: 588
.Ltmp680:
    00000252: 	movq	-0x8(%rdx), %rax
    00000256: 	addq	$0x200, %rax
    0000025c: 	jmp	.Ltmp683 # Offset: 604
    00000261: 	nopl	(%rax) # Size: 7
.Ltmp679:
    00000268: 	testq	%r12, %r12
    0000026b: 	je	.Ltmp682 # Offset: 619
    00000271: 	jmp	.Ltmp684 # Offset: 625
.Ltmp681:
    00000273: 	callq	__stack_chk_fail@PLT # Offset: 627
.Ltmp677:
    00000278: 	leaq	DATAat0x17018(%rip), %rdi
    0000027f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 639
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_struct5_global1Im12test_struct5ImEXadL_Z8data64_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_struct5_global2Ii12test_struct5IiEXadL_Z8data32_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 103
  State       : disassembled
  Address     : 0xd5f0
  Size        : 0x27c
  MaxSize     : 0x280
  Offset      : 0xd5f0
  Section     : .text
  Orc Section : .local.text._Z20test_struct5_global2Ii12test_struct5IiEXadL_Z8data32_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0102:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movl	iterations(%rip), %edx
    0000002c: 	movdqa	data32_5(%rip), %xmm0
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movl	data32_5+16(%rip), %esi
    00000041: 	testl	%edx, %edx
    00000043: 	jle	.Ltmp685 # Offset: 67
    00000045: 	movd	%edx, %xmm4
    00000049: 	movdqa	DATAat0x17d70(%rip), %xmm3
    00000051: 	leal	(%rdx,%rdx,8), %eax
    00000054: 	pshufd	$0x0, %xmm4, %xmm1
    00000059: 	leal	(%rsi,%rax,4), %esi
    0000005c: 	movdqa	%xmm1, %xmm2
    00000060: 	psrlq	$0x20, %xmm1
    00000065: 	pmuludq	%xmm3, %xmm2
    00000069: 	psrlq	$0x20, %xmm3
    0000006e: 	pmuludq	%xmm3, %xmm1
    00000072: 	pshufd	$0x8, %xmm2, %xmm2
    00000077: 	pshufd	$0x8, %xmm1, %xmm1
    0000007c: 	punpckldq	%xmm1, %xmm2
    00000080: 	paddd	%xmm2, %xmm0
.Ltmp685:
    00000084: 	pshufd	$0xff, %xmm0, %xmm1
    00000089: 	imull	$0x34, %edx, %eax
    0000008c: 	leal	(%rdx,%rdx,2), %edi
    0000008f: 	addl	init_value(%rip), %eax
    00000095: 	shll	$0x2, %edi
    00000098: 	movd	%xmm1, %r9d
    0000009d: 	movl	%eax, %ecx
    0000009f: 	movl	%esi, data32_5+16(%rip)
    000000a5: 	movdqa	%xmm0, %xmm1
    000000a9: 	subl	%edi, %ecx
    000000ab: 	movd	%xmm0, %edi
    000000af: 	movaps	%xmm0, data32_5(%rip)
    000000b6: 	punpckhdq	%xmm0, %xmm1
    000000ba: 	movd	%xmm1, %r8d
    000000bf: 	cmpl	%eax, %edi
    000000c1: 	jne	.Ltmp686 # Offset: 193
    000000c3: 	pshufd	$0x55, %xmm0, %xmm0
    000000c8: 	movd	%xmm0, %eax
    000000cc: 	cmpl	%ecx, %eax
    000000ce: 	jne	.Ltmp686 # Offset: 206
    000000d0: 	leal	(,%rdx,4), %eax
    000000d7: 	shll	$0x4, %edx
    000000da: 	subl	%eax, %ecx
    000000dc: 	movl	%ecx, %eax
    000000de: 	subl	%edx, %eax
    000000e0: 	cmpl	%r9d, %eax
    000000e3: 	setne	%al
    000000e6: 	cmpl	%ecx, %r8d
    000000e9: 	setne	%dl
    000000ec: 	orb	%dl, %al
    000000ee: 	jne	.Ltmp686 # Offset: 238
    000000f0: 	cmpl	%ecx, %esi
    000000f2: 	je	.Ltmp687 # Offset: 242
.Ltmp686:
    000000f4: 	movq	(%rbp), %rdx
    000000f8: 	leaq	DATAat0x17004(%rip), %rsi
    000000ff: 	movl	$0x1, %edi
    00000104: 	xorl	%eax, %eax
    00000106: 	callq	__printf_chk@PLT # Offset: 262
.Ltmp687:
    0000010b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000112: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000119: 	subq	$0x20, %rax
    0000011d: 	cmpq	%rax, %rbx
    00000120: 	je	.Ltmp688 # Offset: 288
    00000126: 	leaq	0x10(%rbx), %rdi
    0000012a: 	movq	0x8(%rbp), %r12
    0000012e: 	movq	%rdi, (%rbx)
    00000131: 	movq	(%rbp), %r13
    00000135: 	movq	%r13, %rax
    00000138: 	addq	%r12, %rax
    0000013b: 	je	.Ltmp689 # Offset: 315
    0000013d: 	testq	%r13, %r13
    00000140: 	je	.Ltmp690 # Offset: 320
.Ltmp689:
    00000146: 	movq	%r12, (%rsp)
    0000014a: 	cmpq	$0xf, %r12
    0000014e: 	ja	.Ltmp691 # Offset: 334
    00000154: 	cmpq	$0x1, %r12
    00000158: 	jne	.Ltmp692 # Offset: 344
    0000015e: 	movzbl	(%r13), %eax
    00000163: 	movb	%al, 0x10(%rbx)
.Ltmp695:
    00000166: 	movq	%r12, 0x8(%rbx)
    0000016a: 	movb	$0x0, (%rdi,%r12)
    0000016f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000176: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000017d: 	addq	$0x20, %rax
    00000181: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000188: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000018f: 	je	.Ltmp693 # Offset: 399
.Ltmp696:
    00000195: 	movq	-0x20(%rax), %rbp
    00000199: 	callq	clock@PLT # Offset: 409
    0000019e: 	movq	%rax, end_time(%rip)
    000001a5: 	movq	0x8(%rsp), %rdx
    000001aa: 	subq	%fs:0x28, %rdx
    000001b3: 	jne	.Ltmp694 # Offset: 435
    000001b9: 	subq	start_time(%rip), %rax
    000001c0: 	pxor	%xmm0, %xmm0
    000001c4: 	movq	%rbp, %rdi
    000001c7: 	cvtsi2sd	%rax, %xmm0
    000001cc: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001d4: 	addq	$0x18, %rsp
    000001d8: 	popq	%rbx
    000001d9: 	popq	%rbp
    000001da: 	popq	%r12
    000001dc: 	popq	%r13
    000001de: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 478
    000001e3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp691:
    000001e8: 	movq	%rbx, %rdi
    000001eb: 	movq	%rsp, %rsi
    000001ee: 	xorl	%edx, %edx
    000001f0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 496
    000001f5: 	movq	%rax, (%rbx)
    000001f8: 	movq	%rax, %rdi
    000001fb: 	movq	(%rsp), %rax
    000001ff: 	movq	%rax, 0x10(%rbx)
.Ltmp697:
    00000203: 	movq	%r12, %rdx
    00000206: 	movq	%r13, %rsi
    00000209: 	callq	memcpy@PLT # Offset: 521
    0000020e: 	movq	(%rsp), %r12
    00000212: 	movq	(%rbx), %rdi
    00000215: 	jmp	.Ltmp695 # Offset: 533
    0000021a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp688:
    00000220: 	movq	%rbp, %rsi
    00000223: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000022a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 554
    0000022f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000236: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000023d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000244: 	jne	.Ltmp696 # Offset: 580
.Ltmp693:
    0000024a: 	movq	-0x8(%rdx), %rax
    0000024e: 	addq	$0x200, %rax
    00000254: 	jmp	.Ltmp696 # Offset: 596
    00000259: 	nopl	(%rax) # Size: 7
.Ltmp692:
    00000260: 	testq	%r12, %r12
    00000263: 	je	.Ltmp695 # Offset: 611
    00000269: 	jmp	.Ltmp697 # Offset: 617
.Ltmp694:
    0000026b: 	callq	__stack_chk_fail@PLT # Offset: 619
.Ltmp690:
    00000270: 	leaq	DATAat0x17018(%rip), %rdi
    00000277: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 631
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_struct5_global2Ii12test_struct5IiEXadL_Z8data32_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_struct5_global0Ii12test_struct5IiEXadL_Z8data32_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 104
  State       : disassembled
  Address     : 0xd870
  Size        : 0x254
  MaxSize     : 0x260
  Offset      : 0xd870
  Section     : .text
  Orc Section : .local.text._Z20test_struct5_global0Ii12test_struct5IiEXadL_Z8data32_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0103:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movd	iterations(%rip), %xmm4
    0000002e: 	movdqa	DATAat0x17d70(%rip), %xmm3
    00000036: 	movl	data32_5+16(%rip), %ecx
    0000003c: 	movdqa	data32_5(%rip), %xmm2
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	pshufd	$0x0, %xmm4, %xmm1
    00000050: 	movl	init_value(%rip), %edx
    00000056: 	movl	data32_5+12(%rip), %esi
    0000005c: 	movdqa	%xmm1, %xmm0
    00000060: 	psrlq	$0x20, %xmm1
    00000065: 	movl	data32_5+8(%rip), %edi
    0000006b: 	pmuludq	%xmm3, %xmm0
    0000006f: 	psrlq	$0x20, %xmm3
    00000074: 	pmuludq	%xmm3, %xmm1
    00000078: 	pshufd	$0x8, %xmm0, %xmm0
    0000007d: 	pshufd	$0x8, %xmm1, %xmm1
    00000082: 	punpckldq	%xmm1, %xmm0
    00000086: 	movdqa	%xmm0, %xmm1
    0000008a: 	punpckhdq	%xmm0, %xmm0
    0000008e: 	movd	%xmm0, %eax
    00000092: 	paddd	%xmm2, %xmm1
    00000096: 	addl	%ecx, %eax
    00000098: 	movaps	%xmm1, data32_5(%rip)
    0000009f: 	movl	%eax, data32_5+16(%rip)
    000000a5: 	movd	%xmm2, %eax
    000000a9: 	cmpl	%edx, %eax
    000000ab: 	jne	.Ltmp698 # Offset: 171
    000000ad: 	pshufd	$0x55, %xmm2, %xmm2
    000000b2: 	movd	%xmm2, %eax
    000000b6: 	cmpl	%edx, %eax
    000000b8: 	jne	.Ltmp698 # Offset: 184
    000000ba: 	cmpl	%edi, %edx
    000000bc: 	setne	%al
    000000bf: 	cmpl	%esi, %edx
    000000c1: 	setne	%sil
    000000c5: 	orb	%sil, %al
    000000c8: 	jne	.Ltmp698 # Offset: 200
    000000ca: 	cmpl	%edx, %ecx
    000000cc: 	je	.Ltmp699 # Offset: 204
.Ltmp698:
    000000ce: 	movq	(%rbp), %rdx
    000000d2: 	leaq	DATAat0x17004(%rip), %rsi
    000000d9: 	movl	$0x1, %edi
    000000de: 	xorl	%eax, %eax
    000000e0: 	callq	__printf_chk@PLT # Offset: 224
.Ltmp699:
    000000e5: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ec: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000f3: 	subq	$0x20, %rax
    000000f7: 	cmpq	%rax, %rbx
    000000fa: 	je	.Ltmp700 # Offset: 250
    00000100: 	leaq	0x10(%rbx), %rdi
    00000104: 	movq	0x8(%rbp), %r12
    00000108: 	movq	%rdi, (%rbx)
    0000010b: 	movq	(%rbp), %r13
    0000010f: 	movq	%r13, %rax
    00000112: 	addq	%r12, %rax
    00000115: 	je	.Ltmp701 # Offset: 277
    00000117: 	testq	%r13, %r13
    0000011a: 	je	.Ltmp702 # Offset: 282
.Ltmp701:
    00000120: 	movq	%r12, (%rsp)
    00000124: 	cmpq	$0xf, %r12
    00000128: 	ja	.Ltmp703 # Offset: 296
    0000012e: 	cmpq	$0x1, %r12
    00000132: 	jne	.Ltmp704 # Offset: 306
    00000138: 	movzbl	(%r13), %eax
    0000013d: 	movb	%al, 0x10(%rbx)
.Ltmp707:
    00000140: 	movq	%r12, 0x8(%rbx)
    00000144: 	movb	$0x0, (%rdi,%r12)
    00000149: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000150: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000157: 	addq	$0x20, %rax
    0000015b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000162: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000169: 	je	.Ltmp705 # Offset: 361
.Ltmp708:
    0000016f: 	movq	-0x20(%rax), %rbp
    00000173: 	callq	clock@PLT # Offset: 371
    00000178: 	movq	%rax, end_time(%rip)
    0000017f: 	movq	0x8(%rsp), %rdx
    00000184: 	subq	%fs:0x28, %rdx
    0000018d: 	jne	.Ltmp706 # Offset: 397
    00000193: 	subq	start_time(%rip), %rax
    0000019a: 	pxor	%xmm0, %xmm0
    0000019e: 	movq	%rbp, %rdi
    000001a1: 	cvtsi2sd	%rax, %xmm0
    000001a6: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001ae: 	addq	$0x18, %rsp
    000001b2: 	popq	%rbx
    000001b3: 	popq	%rbp
    000001b4: 	popq	%r12
    000001b6: 	popq	%r13
    000001b8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 440
    000001bd: 	nopl	(%rax) # Size: 3
.Ltmp703:
    000001c0: 	movq	%rbx, %rdi
    000001c3: 	movq	%rsp, %rsi
    000001c6: 	xorl	%edx, %edx
    000001c8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 456
    000001cd: 	movq	%rax, (%rbx)
    000001d0: 	movq	%rax, %rdi
    000001d3: 	movq	(%rsp), %rax
    000001d7: 	movq	%rax, 0x10(%rbx)
.Ltmp709:
    000001db: 	movq	%r12, %rdx
    000001de: 	movq	%r13, %rsi
    000001e1: 	callq	memcpy@PLT # Offset: 481
    000001e6: 	movq	(%rsp), %r12
    000001ea: 	movq	(%rbx), %rdi
    000001ed: 	jmp	.Ltmp707 # Offset: 493
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp700:
    000001f8: 	movq	%rbp, %rsi
    000001fb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000202: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 514
    00000207: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000020e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000215: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000021c: 	jne	.Ltmp708 # Offset: 540
.Ltmp705:
    00000222: 	movq	-0x8(%rdx), %rax
    00000226: 	addq	$0x200, %rax
    0000022c: 	jmp	.Ltmp708 # Offset: 556
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp704:
    00000238: 	testq	%r12, %r12
    0000023b: 	je	.Ltmp707 # Offset: 571
    00000241: 	jmp	.Ltmp709 # Offset: 577
.Ltmp702:
    00000243: 	leaq	DATAat0x17018(%rip), %rdi
    0000024a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 586
.Ltmp706:
    0000024f: 	callq	__stack_chk_fail@PLT # Offset: 591
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_struct5_global0Ii12test_struct5IiEXadL_Z8data32_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_struct5_global0Im12test_struct5ImEXadL_Z8data64_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 105
  State       : disassembled
  Address     : 0xdad0
  Size        : 0x254
  MaxSize     : 0x260
  Offset      : 0xdad0
  Section     : .text
  Orc Section : .local.text._Z20test_struct5_global0Im12test_struct5ImEXadL_Z8data64_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0104:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movq	data64_5(%rip), %rcx
    0000002d: 	movq	data64_5+8(%rip), %rsi
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movslq	iterations(%rip), %rax
    00000042: 	movq	data64_5+24(%rip), %rdi
    00000049: 	movq	data64_5+16(%rip), %r8
    00000050: 	leaq	(%rax,%rax,2), %r10
    00000054: 	leaq	(%rax,%rax,8), %rdx
    00000058: 	movq	data64_5+32(%rip), %r9
    0000005f: 	leaq	(%rax,%r10,4), %r10
    00000063: 	leaq	(%rax,%rax,4), %rax
    00000067: 	shlq	$0x2, %rdx
    0000006b: 	leaq	(%rcx,%r10,4), %r10
    0000006f: 	movq	%r10, data64_5(%rip)
    00000076: 	leaq	(%rsi,%rax,8), %r10
    0000007a: 	leaq	(%rdi,%rax,4), %rax
    0000007e: 	movq	%rax, data64_5+24(%rip)
    00000085: 	movslq	init_value(%rip), %rax
    0000008c: 	movq	%r10, data64_5+8(%rip)
    00000093: 	leaq	(%rdx,%r8), %r10
    00000097: 	addq	%r9, %rdx
    0000009a: 	movq	%r10, data64_5+16(%rip)
    000000a1: 	movq	%rdx, data64_5+32(%rip)
    000000a8: 	cmpq	%rax, %rcx
    000000ab: 	jne	.Ltmp710 # Offset: 171
    000000ad: 	cmpq	%rax, %rsi
    000000b0: 	jne	.Ltmp710 # Offset: 176
    000000b2: 	cmpq	%rax, %r8
    000000b5: 	setne	%dl
    000000b8: 	cmpq	%rax, %rdi
    000000bb: 	setne	%cl
    000000be: 	orb	%cl, %dl
    000000c0: 	jne	.Ltmp710 # Offset: 192
    000000c2: 	cmpq	%rax, %r9
    000000c5: 	je	.Ltmp711 # Offset: 197
.Ltmp710:
    000000c7: 	movq	(%rbp), %rdx
    000000cb: 	leaq	DATAat0x17004(%rip), %rsi
    000000d2: 	movl	$0x1, %edi
    000000d7: 	xorl	%eax, %eax
    000000d9: 	callq	__printf_chk@PLT # Offset: 217
.Ltmp711:
    000000de: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000e5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ec: 	subq	$0x20, %rax
    000000f0: 	cmpq	%rax, %rbx
    000000f3: 	je	.Ltmp712 # Offset: 243
    000000f9: 	leaq	0x10(%rbx), %rdi
    000000fd: 	movq	0x8(%rbp), %r12
    00000101: 	movq	%rdi, (%rbx)
    00000104: 	movq	(%rbp), %r13
    00000108: 	movq	%r13, %rax
    0000010b: 	addq	%r12, %rax
    0000010e: 	je	.Ltmp713 # Offset: 270
    00000110: 	testq	%r13, %r13
    00000113: 	je	.Ltmp714 # Offset: 275
.Ltmp713:
    00000119: 	movq	%r12, (%rsp)
    0000011d: 	cmpq	$0xf, %r12
    00000121: 	ja	.Ltmp715 # Offset: 289
    00000127: 	cmpq	$0x1, %r12
    0000012b: 	jne	.Ltmp716 # Offset: 299
    00000131: 	movzbl	(%r13), %eax
    00000136: 	movb	%al, 0x10(%rbx)
.Ltmp719:
    00000139: 	movq	%r12, 0x8(%rbx)
    0000013d: 	movb	$0x0, (%rdi,%r12)
    00000142: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000149: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000150: 	addq	$0x20, %rax
    00000154: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000015b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000162: 	je	.Ltmp717 # Offset: 354
.Ltmp720:
    00000168: 	movq	-0x20(%rax), %rbp
    0000016c: 	callq	clock@PLT # Offset: 364
    00000171: 	movq	%rax, end_time(%rip)
    00000178: 	movq	0x8(%rsp), %rdx
    0000017d: 	subq	%fs:0x28, %rdx
    00000186: 	jne	.Ltmp718 # Offset: 390
    0000018c: 	subq	start_time(%rip), %rax
    00000193: 	pxor	%xmm0, %xmm0
    00000197: 	movq	%rbp, %rdi
    0000019a: 	cvtsi2sd	%rax, %xmm0
    0000019f: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001a7: 	addq	$0x18, %rsp
    000001ab: 	popq	%rbx
    000001ac: 	popq	%rbp
    000001ad: 	popq	%r12
    000001af: 	popq	%r13
    000001b1: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 433
    000001b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp715:
    000001c0: 	movq	%rbx, %rdi
    000001c3: 	movq	%rsp, %rsi
    000001c6: 	xorl	%edx, %edx
    000001c8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 456
    000001cd: 	movq	%rax, (%rbx)
    000001d0: 	movq	%rax, %rdi
    000001d3: 	movq	(%rsp), %rax
    000001d7: 	movq	%rax, 0x10(%rbx)
.Ltmp721:
    000001db: 	movq	%r12, %rdx
    000001de: 	movq	%r13, %rsi
    000001e1: 	callq	memcpy@PLT # Offset: 481
    000001e6: 	movq	(%rsp), %r12
    000001ea: 	movq	(%rbx), %rdi
    000001ed: 	jmp	.Ltmp719 # Offset: 493
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp712:
    000001f8: 	movq	%rbp, %rsi
    000001fb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000202: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 514
    00000207: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000020e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000215: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000021c: 	jne	.Ltmp720 # Offset: 540
.Ltmp717:
    00000222: 	movq	-0x8(%rdx), %rax
    00000226: 	addq	$0x200, %rax
    0000022c: 	jmp	.Ltmp720 # Offset: 556
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp716:
    00000238: 	testq	%r12, %r12
    0000023b: 	je	.Ltmp719 # Offset: 571
    00000241: 	jmp	.Ltmp721 # Offset: 577
.Ltmp714:
    00000243: 	leaq	DATAat0x17018(%rip), %rdi
    0000024a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 586
.Ltmp718:
    0000024f: 	callq	__stack_chk_fail@PLT # Offset: 591
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_struct5_global0Im12test_struct5ImEXadL_Z8data64_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_struct5_global0Is12test_struct5IsEXadL_Z8data16_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 106
  State       : disassembled
  Address     : 0xdd30
  Size        : 0x254
  MaxSize     : 0x260
  Offset      : 0xdd30
  Section     : .text
  Orc Section : .local.text._Z20test_struct5_global0Is12test_struct5IsEXadL_Z8data16_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0105:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movd	iterations(%rip), %xmm2
    0000002e: 	movq	DATAat0x17d90(%rip), %xmm1
    00000036: 	movzwl	data16_5+8(%rip), %edi
    0000003d: 	movl	init_value(%rip), %edx
    00000043: 	movq	%rax, start_time(%rip)
    0000004a: 	pshuflw	$0x0, %xmm2, %xmm0
    0000004f: 	pmullw	%xmm1, %xmm0
    00000053: 	movq	data16_5(%rip), %xmm1
    0000005b: 	paddw	%xmm0, %xmm1
    0000005f: 	pextrw	$0x2, %xmm0, %eax
    00000064: 	pextrw	$0x0, %xmm0, %ecx
    00000069: 	addl	%eax, %edi
    0000006b: 	addl	%edx, %ecx
    0000006d: 	pextrw	$0x3, %xmm0, %esi
    00000072: 	movw	%di, data16_5+8(%rip)
    00000079: 	pextrw	$0x0, %xmm1, %r10d
    0000007f: 	pextrw	$0x3, %xmm1, %r9d
    00000085: 	pextrw	$0x2, %xmm1, %r8d
    0000008b: 	movq	%xmm1, data16_5(%rip)
    00000093: 	cmpw	%r10w, %cx
    00000097: 	jne	.Ltmp722 # Offset: 151
    00000099: 	pextrw	$0x1, %xmm0, %ecx
    0000009e: 	pextrw	$0x1, %xmm1, %r10d
    000000a4: 	addl	%edx, %ecx
    000000a6: 	cmpw	%r10w, %cx
    000000aa: 	jne	.Ltmp722 # Offset: 170
    000000ac: 	addl	%edx, %esi
    000000ae: 	addl	%edx, %eax
    000000b0: 	cmpw	%r9w, %si
    000000b4: 	setne	%dl
    000000b7: 	cmpw	%r8w, %ax
    000000bb: 	setne	%cl
    000000be: 	orb	%cl, %dl
    000000c0: 	jne	.Ltmp722 # Offset: 192
    000000c2: 	cmpw	%ax, %di
    000000c5: 	je	.Ltmp723 # Offset: 197
.Ltmp722:
    000000c7: 	movq	(%rbp), %rdx
    000000cb: 	leaq	DATAat0x17004(%rip), %rsi
    000000d2: 	movl	$0x1, %edi
    000000d7: 	xorl	%eax, %eax
    000000d9: 	callq	__printf_chk@PLT # Offset: 217
.Ltmp723:
    000000de: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000e5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ec: 	subq	$0x20, %rax
    000000f0: 	cmpq	%rax, %rbx
    000000f3: 	je	.Ltmp724 # Offset: 243
    000000f9: 	leaq	0x10(%rbx), %rdi
    000000fd: 	movq	0x8(%rbp), %r12
    00000101: 	movq	%rdi, (%rbx)
    00000104: 	movq	(%rbp), %r13
    00000108: 	movq	%r13, %rax
    0000010b: 	addq	%r12, %rax
    0000010e: 	je	.Ltmp725 # Offset: 270
    00000110: 	testq	%r13, %r13
    00000113: 	je	.Ltmp726 # Offset: 275
.Ltmp725:
    00000119: 	movq	%r12, (%rsp)
    0000011d: 	cmpq	$0xf, %r12
    00000121: 	ja	.Ltmp727 # Offset: 289
    00000127: 	cmpq	$0x1, %r12
    0000012b: 	jne	.Ltmp728 # Offset: 299
    00000131: 	movzbl	(%r13), %eax
    00000136: 	movb	%al, 0x10(%rbx)
.Ltmp731:
    00000139: 	movq	%r12, 0x8(%rbx)
    0000013d: 	movb	$0x0, (%rdi,%r12)
    00000142: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000149: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000150: 	addq	$0x20, %rax
    00000154: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000015b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000162: 	je	.Ltmp729 # Offset: 354
.Ltmp732:
    00000168: 	movq	-0x20(%rax), %rbp
    0000016c: 	callq	clock@PLT # Offset: 364
    00000171: 	movq	%rax, end_time(%rip)
    00000178: 	movq	0x8(%rsp), %rdx
    0000017d: 	subq	%fs:0x28, %rdx
    00000186: 	jne	.Ltmp730 # Offset: 390
    0000018c: 	subq	start_time(%rip), %rax
    00000193: 	pxor	%xmm0, %xmm0
    00000197: 	movq	%rbp, %rdi
    0000019a: 	cvtsi2sd	%rax, %xmm0
    0000019f: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001a7: 	addq	$0x18, %rsp
    000001ab: 	popq	%rbx
    000001ac: 	popq	%rbp
    000001ad: 	popq	%r12
    000001af: 	popq	%r13
    000001b1: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 433
    000001b6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp727:
    000001c0: 	movq	%rbx, %rdi
    000001c3: 	movq	%rsp, %rsi
    000001c6: 	xorl	%edx, %edx
    000001c8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 456
    000001cd: 	movq	%rax, (%rbx)
    000001d0: 	movq	%rax, %rdi
    000001d3: 	movq	(%rsp), %rax
    000001d7: 	movq	%rax, 0x10(%rbx)
.Ltmp733:
    000001db: 	movq	%r12, %rdx
    000001de: 	movq	%r13, %rsi
    000001e1: 	callq	memcpy@PLT # Offset: 481
    000001e6: 	movq	(%rsp), %r12
    000001ea: 	movq	(%rbx), %rdi
    000001ed: 	jmp	.Ltmp731 # Offset: 493
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp724:
    000001f8: 	movq	%rbp, %rsi
    000001fb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000202: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 514
    00000207: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000020e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000215: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000021c: 	jne	.Ltmp732 # Offset: 540
.Ltmp729:
    00000222: 	movq	-0x8(%rdx), %rax
    00000226: 	addq	$0x200, %rax
    0000022c: 	jmp	.Ltmp732 # Offset: 556
    00000231: 	nopl	(%rax) # Size: 7
.Ltmp728:
    00000238: 	testq	%r12, %r12
    0000023b: 	je	.Ltmp731 # Offset: 571
    00000241: 	jmp	.Ltmp733 # Offset: 577
.Ltmp726:
    00000243: 	leaq	DATAat0x17018(%rip), %rdi
    0000024a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 586
.Ltmp730:
    0000024f: 	callq	__stack_chk_fail@PLT # Offset: 591
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_struct5_global0Is12test_struct5IsEXadL_Z8data16_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_struct5_global1Id12test_struct5IdEXadL_Z11dataDouble5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 107
  State       : disassembled
  Address     : 0xdf90
  Size        : 0x2c4
  MaxSize     : 0x2d0
  Offset      : 0xdf90
  Section     : .text
  Orc Section : .local.text._Z20test_struct5_global1Id12test_struct5IdEXadL_Z11dataDouble5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0106:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movl	iterations(%rip), %edx
    0000002c: 	movapd	dataDouble5(%rip), %xmm0
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	movapd	dataDouble5+16(%rip), %xmm1
    00000043: 	movsd	dataDouble5+32(%rip), %xmm2
    0000004b: 	testl	%edx, %edx
    0000004d: 	jle	.Ltmp734 # Offset: 77
    0000004f: 	movapd	DATAat0x17df0(%rip), %xmm5
    00000057: 	movapd	DATAat0x17e00(%rip), %xmm4
    0000005f: 	xorl	%eax, %eax
    00000061: 	movsd	DATAat0x17e00(%rip), %xmm3
    00000069: 	nopl	(%rax) # Size: 7
.Ltmp735:
    00000070: 	addl	$0x1, %eax
    00000073: 	addpd	%xmm5, %xmm0
    00000077: 	addpd	%xmm4, %xmm1
    0000007b: 	addsd	%xmm3, %xmm2
    0000007f: 	cmpl	%edx, %eax
    00000081: 	jne	.Ltmp735 # Offset: 129
.Ltmp734:
    00000083: 	movapd	%xmm1, %xmm6
    00000087: 	movapd	%xmm1, %xmm5
    0000008b: 	pxor	%xmm3, %xmm3
    0000008f: 	movaps	%xmm1, dataDouble5+16(%rip)
    00000096: 	pxor	%xmm1, %xmm1
    0000009a: 	movsd	DATAat0x17de8(%rip), %xmm4
    000000a2: 	movl	$0x1, %eax
    000000a7: 	unpckhpd	%xmm6, %xmm6
    000000ab: 	cvtsi2sd	%edx, %xmm1
    000000af: 	movaps	%xmm0, dataDouble5(%rip)
    000000b6: 	cvtsi2sdl	init_value(%rip), %xmm3
    000000be: 	movsd	%xmm2, dataDouble5+32(%rip)
    000000c6: 	mulsd	%xmm1, %xmm4
    000000ca: 	addsd	%xmm3, %xmm4
    000000ce: 	ucomisd	%xmm0, %xmm4
    000000d2: 	setp	%dl
    000000d5: 	cmovnel	%eax, %edx
    000000d8: 	testb	%dl, %dl
    000000da: 	jne	.Ltmp736 # Offset: 218
    000000dc: 	movsd	DATAat0x17de0(%rip), %xmm4
    000000e4: 	unpckhpd	%xmm0, %xmm0
    000000e8: 	mulsd	%xmm1, %xmm4
    000000ec: 	addsd	%xmm3, %xmm4
    000000f0: 	ucomisd	%xmm0, %xmm4
    000000f4: 	setp	%dl
    000000f7: 	cmovnel	%eax, %edx
    000000fa: 	testb	%dl, %dl
    000000fc: 	jne	.Ltmp736 # Offset: 252
    000000fe: 	movsd	DATAat0x17e00(%rip), %xmm0
    00000106: 	mulsd	%xmm1, %xmm0
    0000010a: 	mulsd	DATAat0x17dd0(%rip), %xmm1
    00000112: 	addsd	%xmm3, %xmm0
    00000116: 	addsd	%xmm3, %xmm1
    0000011a: 	ucomisd	%xmm6, %xmm1
    0000011e: 	setp	%dl
    00000121: 	cmovnel	%eax, %edx
    00000124: 	ucomisd	%xmm5, %xmm0
    00000128: 	setp	%cl
    0000012b: 	cmovnel	%eax, %ecx
    0000012e: 	orb	%cl, %dl
    00000130: 	jne	.Ltmp736 # Offset: 304
    00000132: 	ucomisd	%xmm0, %xmm2
    00000136: 	setp	%dl
    00000139: 	cmovel	%edx, %eax
    0000013c: 	testb	%al, %al
    0000013e: 	je	.Ltmp737 # Offset: 318
.Ltmp736:
    00000140: 	movq	(%rbp), %rdx
    00000144: 	leaq	DATAat0x17004(%rip), %rsi
    0000014b: 	movl	$0x1, %edi
    00000150: 	xorl	%eax, %eax
    00000152: 	callq	__printf_chk@PLT # Offset: 338
.Ltmp737:
    00000157: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000015e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000165: 	subq	$0x20, %rax
    00000169: 	cmpq	%rax, %rbx
    0000016c: 	je	.Ltmp738 # Offset: 364
    00000172: 	leaq	0x10(%rbx), %rdi
    00000176: 	movq	0x8(%rbp), %r12
    0000017a: 	movq	%rdi, (%rbx)
    0000017d: 	movq	(%rbp), %r13
    00000181: 	movq	%r13, %rax
    00000184: 	addq	%r12, %rax
    00000187: 	je	.Ltmp739 # Offset: 391
    00000189: 	testq	%r13, %r13
    0000018c: 	je	.Ltmp740 # Offset: 396
.Ltmp739:
    00000192: 	movq	%r12, (%rsp)
    00000196: 	cmpq	$0xf, %r12
    0000019a: 	ja	.Ltmp741 # Offset: 410
    000001a0: 	cmpq	$0x1, %r12
    000001a4: 	jne	.Ltmp742 # Offset: 420
    000001aa: 	movzbl	(%r13), %eax
    000001af: 	movb	%al, 0x10(%rbx)
.Ltmp745:
    000001b2: 	movq	%r12, 0x8(%rbx)
    000001b6: 	movb	$0x0, (%rdi,%r12)
    000001bb: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001c2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001c9: 	addq	$0x20, %rax
    000001cd: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001d4: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001db: 	je	.Ltmp743 # Offset: 475
.Ltmp746:
    000001e1: 	movq	-0x20(%rax), %rbp
    000001e5: 	callq	clock@PLT # Offset: 485
    000001ea: 	movq	%rax, end_time(%rip)
    000001f1: 	movq	0x8(%rsp), %rdx
    000001f6: 	subq	%fs:0x28, %rdx
    000001ff: 	jne	.Ltmp744 # Offset: 511
    00000205: 	subq	start_time(%rip), %rax
    0000020c: 	pxor	%xmm0, %xmm0
    00000210: 	movq	%rbp, %rdi
    00000213: 	cvtsi2sd	%rax, %xmm0
    00000218: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000220: 	addq	$0x18, %rsp
    00000224: 	popq	%rbx
    00000225: 	popq	%rbp
    00000226: 	popq	%r12
    00000228: 	popq	%r13
    0000022a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 554
    0000022f: 	nop # Size: 1
.Ltmp741:
    00000230: 	movq	%rbx, %rdi
    00000233: 	movq	%rsp, %rsi
    00000236: 	xorl	%edx, %edx
    00000238: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 568
    0000023d: 	movq	%rax, (%rbx)
    00000240: 	movq	%rax, %rdi
    00000243: 	movq	(%rsp), %rax
    00000247: 	movq	%rax, 0x10(%rbx)
.Ltmp747:
    0000024b: 	movq	%r12, %rdx
    0000024e: 	movq	%r13, %rsi
    00000251: 	callq	memcpy@PLT # Offset: 593
    00000256: 	movq	(%rsp), %r12
    0000025a: 	movq	(%rbx), %rdi
    0000025d: 	jmp	.Ltmp745 # Offset: 605
    00000262: 	nopw	(%rax,%rax) # Size: 6
.Ltmp738:
    00000268: 	movq	%rbp, %rsi
    0000026b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000272: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 626
    00000277: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000027e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000285: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000028c: 	jne	.Ltmp746 # Offset: 652
.Ltmp743:
    00000292: 	movq	-0x8(%rdx), %rax
    00000296: 	addq	$0x200, %rax
    0000029c: 	jmp	.Ltmp746 # Offset: 668
    000002a1: 	nopl	(%rax) # Size: 7
.Ltmp742:
    000002a8: 	testq	%r12, %r12
    000002ab: 	je	.Ltmp745 # Offset: 683
    000002b1: 	jmp	.Ltmp747 # Offset: 689
.Ltmp744:
    000002b3: 	callq	__stack_chk_fail@PLT # Offset: 691
.Ltmp740:
    000002b8: 	leaq	DATAat0x17018(%rip), %rdi
    000002bf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 703
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_struct5_global1Id12test_struct5IdEXadL_Z11dataDouble5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_struct5_global0Id12test_struct5IdEXadL_Z11dataDouble5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 108
  State       : disassembled
  Address     : 0xe260
  Size        : 0x2a4
  MaxSize     : 0x2b0
  Offset      : 0xe260
  Section     : .text
  Orc Section : .local.text._Z20test_struct5_global0Id12test_struct5IdEXadL_Z11dataDouble5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0107:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	pxor	%xmm0, %xmm0
    0000002a: 	movapd	DATAat0x17df0(%rip), %xmm1
    00000032: 	movapd	dataDouble5+16(%rip), %xmm2
    0000003a: 	cvtsi2sdl	iterations(%rip), %xmm0
    00000042: 	movapd	dataDouble5(%rip), %xmm3
    0000004a: 	movq	%rax, start_time(%rip)
    00000051: 	movl	$0x1, %eax
    00000056: 	unpcklpd	%xmm0, %xmm0
    0000005a: 	mulpd	%xmm0, %xmm1
    0000005e: 	mulpd	DATAat0x17e00(%rip), %xmm0
    00000066: 	movapd	%xmm1, %xmm4
    0000006a: 	addpd	%xmm1, %xmm3
    0000006e: 	addpd	%xmm0, %xmm2
    00000072: 	movapd	%xmm0, %xmm5
    00000076: 	unpckhpd	%xmm5, %xmm5
    0000007a: 	movapd	%xmm5, %xmm8
    0000007f: 	movsd	dataDouble5+32(%rip), %xmm5
    00000087: 	movaps	%xmm3, dataDouble5(%rip)
    0000008e: 	movapd	%xmm2, %xmm6
    00000092: 	movaps	%xmm2, dataDouble5+16(%rip)
    00000099: 	unpckhpd	%xmm6, %xmm6
    0000009d: 	addsd	%xmm0, %xmm5
    000000a1: 	movapd	%xmm6, %xmm7
    000000a5: 	movapd	%xmm2, %xmm6
    000000a9: 	pxor	%xmm2, %xmm2
    000000ad: 	cvtsi2sdl	init_value(%rip), %xmm2
    000000b5: 	movsd	%xmm5, dataDouble5+32(%rip)
    000000bd: 	addsd	%xmm2, %xmm4
    000000c1: 	ucomisd	%xmm3, %xmm4
    000000c5: 	setp	%dl
    000000c8: 	cmovnel	%eax, %edx
    000000cb: 	testb	%dl, %dl
    000000cd: 	jne	.Ltmp748 # Offset: 205
    000000cf: 	unpckhpd	%xmm1, %xmm1
    000000d3: 	unpckhpd	%xmm3, %xmm3
    000000d7: 	addsd	%xmm2, %xmm1
    000000db: 	ucomisd	%xmm3, %xmm1
    000000df: 	setp	%dl
    000000e2: 	cmovnel	%eax, %edx
    000000e5: 	testb	%dl, %dl
    000000e7: 	jne	.Ltmp748 # Offset: 231
    000000e9: 	addsd	%xmm2, %xmm0
    000000ed: 	addsd	%xmm8, %xmm2
    000000f2: 	ucomisd	%xmm7, %xmm2
    000000f6: 	setp	%dl
    000000f9: 	cmovnel	%eax, %edx
    000000fc: 	ucomisd	%xmm6, %xmm0
    00000100: 	setp	%cl
    00000103: 	cmovnel	%eax, %ecx
    00000106: 	orb	%cl, %dl
    00000108: 	jne	.Ltmp748 # Offset: 264
    0000010a: 	ucomisd	%xmm0, %xmm5
    0000010e: 	setp	%dl
    00000111: 	cmovel	%edx, %eax
    00000114: 	testb	%al, %al
    00000116: 	je	.Ltmp749 # Offset: 278
.Ltmp748:
    00000118: 	movq	(%rbp), %rdx
    0000011c: 	leaq	DATAat0x17004(%rip), %rsi
    00000123: 	movl	$0x1, %edi
    00000128: 	xorl	%eax, %eax
    0000012a: 	callq	__printf_chk@PLT # Offset: 298
.Ltmp749:
    0000012f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000136: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000013d: 	subq	$0x20, %rax
    00000141: 	cmpq	%rax, %rbx
    00000144: 	je	.Ltmp750 # Offset: 324
    0000014a: 	leaq	0x10(%rbx), %rdi
    0000014e: 	movq	0x8(%rbp), %r12
    00000152: 	movq	%rdi, (%rbx)
    00000155: 	movq	(%rbp), %r13
    00000159: 	movq	%r13, %rax
    0000015c: 	addq	%r12, %rax
    0000015f: 	je	.Ltmp751 # Offset: 351
    00000161: 	testq	%r13, %r13
    00000164: 	je	.Ltmp752 # Offset: 356
.Ltmp751:
    0000016a: 	movq	%r12, (%rsp)
    0000016e: 	cmpq	$0xf, %r12
    00000172: 	ja	.Ltmp753 # Offset: 370
    00000178: 	cmpq	$0x1, %r12
    0000017c: 	jne	.Ltmp754 # Offset: 380
    00000182: 	movzbl	(%r13), %eax
    00000187: 	movb	%al, 0x10(%rbx)
.Ltmp757:
    0000018a: 	movq	%r12, 0x8(%rbx)
    0000018e: 	movb	$0x0, (%rdi,%r12)
    00000193: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000019a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001a1: 	addq	$0x20, %rax
    000001a5: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001ac: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000001b3: 	je	.Ltmp755 # Offset: 435
.Ltmp758:
    000001b9: 	movq	-0x20(%rax), %rbp
    000001bd: 	callq	clock@PLT # Offset: 445
    000001c2: 	movq	%rax, end_time(%rip)
    000001c9: 	movq	0x8(%rsp), %rdx
    000001ce: 	subq	%fs:0x28, %rdx
    000001d7: 	jne	.Ltmp756 # Offset: 471
    000001dd: 	subq	start_time(%rip), %rax
    000001e4: 	pxor	%xmm0, %xmm0
    000001e8: 	movq	%rbp, %rdi
    000001eb: 	cvtsi2sd	%rax, %xmm0
    000001f0: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001f8: 	addq	$0x18, %rsp
    000001fc: 	popq	%rbx
    000001fd: 	popq	%rbp
    000001fe: 	popq	%r12
    00000200: 	popq	%r13
    00000202: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 514
    00000207: 	nopw	(%rax,%rax) # Size: 9
.Ltmp753:
    00000210: 	movq	%rbx, %rdi
    00000213: 	movq	%rsp, %rsi
    00000216: 	xorl	%edx, %edx
    00000218: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 536
    0000021d: 	movq	%rax, (%rbx)
    00000220: 	movq	%rax, %rdi
    00000223: 	movq	(%rsp), %rax
    00000227: 	movq	%rax, 0x10(%rbx)
.Ltmp759:
    0000022b: 	movq	%r12, %rdx
    0000022e: 	movq	%r13, %rsi
    00000231: 	callq	memcpy@PLT # Offset: 561
    00000236: 	movq	(%rsp), %r12
    0000023a: 	movq	(%rbx), %rdi
    0000023d: 	jmp	.Ltmp757 # Offset: 573
    00000242: 	nopw	(%rax,%rax) # Size: 6
.Ltmp750:
    00000248: 	movq	%rbp, %rsi
    0000024b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000252: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 594
    00000257: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000025e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000265: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000026c: 	jne	.Ltmp758 # Offset: 620
.Ltmp755:
    00000272: 	movq	-0x8(%rdx), %rax
    00000276: 	addq	$0x200, %rax
    0000027c: 	jmp	.Ltmp758 # Offset: 636
    00000281: 	nopl	(%rax) # Size: 7
.Ltmp754:
    00000288: 	testq	%r12, %r12
    0000028b: 	je	.Ltmp757 # Offset: 651
    00000291: 	jmp	.Ltmp759 # Offset: 657
.Ltmp752:
    00000293: 	leaq	DATAat0x17018(%rip), %rdi
    0000029a: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 666
.Ltmp756:
    0000029f: 	callq	__stack_chk_fail@PLT # Offset: 671
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_struct5_global0Id12test_struct5IdEXadL_Z11dataDouble5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct5_local2IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 109
  State       : disassembled
  Address     : 0xe510
  Size        : 0x38c
  MaxSize     : 0x390
  Offset      : 0xe510
  Section     : .text
  Orc Section : .local.text._Z19test_struct5_local2IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0108:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pxor	%xmm0, %xmm0
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x18(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	cvtsi2sdl	init_value(%rip), %xmm0
    0000002d: 	movsd	%xmm0, 0x8(%rsp)
    00000033: 	callq	clock@PLT # Offset: 51
    00000038: 	movl	iterations(%rip), %ecx
    0000003e: 	movsd	0x8(%rsp), %xmm0
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	movapd	%xmm0, %xmm12
    00000050: 	movapd	%xmm0, %xmm3
    00000054: 	movapd	%xmm0, %xmm1
    00000058: 	testl	%ecx, %ecx
    0000005a: 	movapd	%xmm0, %xmm2
    0000005e: 	jle	.Ltmp760 # Offset: 94
    00000064: 	movsd	DATAat0x17ce0(%rip), %xmm8
    0000006d: 	xorl	%edx, %edx
    0000006f: 	movsd	DATAat0x17cc0(%rip), %xmm7
    00000077: 	movsd	DATAat0x17ce8(%rip), %xmm6
    0000007f: 	movsd	DATAat0x17cd0(%rip), %xmm5
    00000087: 	movsd	DATAat0x17cd8(%rip), %xmm15
    00000090: 	movsd	DATAat0x17d10(%rip), %xmm4
    00000098: 	movsd	DATAat0x17c98(%rip), %xmm11
    000000a1: 	movsd	DATAat0x17cf8(%rip), %xmm10
    000000aa: 	movsd	DATAat0x17cb8(%rip), %xmm9
    000000b3: 	movsd	DATAat0x17cf0(%rip), %xmm14
    000000bc: 	movsd	DATAat0x17cb0(%rip), %xmm13
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp761:
    000000c8: 	addsd	%xmm11, %xmm12
    000000cd: 	addsd	%xmm8, %xmm0
    000000d2: 	addl	$0x1, %edx
    000000d5: 	addsd	%xmm11, %xmm1
    000000da: 	addsd	%xmm8, %xmm3
    000000df: 	addsd	%xmm5, %xmm2
    000000e3: 	addsd	%xmm8, %xmm12
    000000e8: 	addsd	%xmm7, %xmm0
    000000ec: 	addsd	%xmm10, %xmm1
    000000f1: 	addsd	%xmm5, %xmm3
    000000f5: 	addsd	%xmm4, %xmm2
    000000f9: 	addsd	%xmm10, %xmm12
    000000fe: 	addsd	%xmm6, %xmm0
    00000102: 	addsd	%xmm7, %xmm1
    00000106: 	addsd	%xmm9, %xmm3
    0000010b: 	addsd	%xmm13, %xmm2
    00000110: 	addsd	DATAat0x17d18(%rip), %xmm2
    00000118: 	addsd	%xmm5, %xmm12
    0000011d: 	addsd	%xmm15, %xmm0
    00000122: 	addsd	%xmm6, %xmm1
    00000126: 	addsd	%xmm4, %xmm3
    0000012a: 	addsd	DATAat0x17dc8(%rip), %xmm1
    00000132: 	addsd	DATAat0x17cc8(%rip), %xmm1
    0000013a: 	addsd	%xmm7, %xmm12
    0000013f: 	addsd	%xmm14, %xmm0
    00000144: 	addsd	DATAat0x17dc0(%rip), %xmm0
    0000014c: 	addsd	%xmm9, %xmm12
    00000151: 	addsd	%xmm6, %xmm12
    00000156: 	addsd	%xmm4, %xmm12
    0000015b: 	cmpl	%ecx, %edx
    0000015d: 	jne	.Ltmp761 # Offset: 349
.Ltmp760:
    00000163: 	pxor	%xmm4, %xmm4
    00000167: 	pxor	%xmm5, %xmm5
    0000016b: 	movl	$0x1, %edx
    00000170: 	movsd	DATAat0x17de8(%rip), %xmm6
    00000178: 	cvtsi2sd	%ecx, %xmm4
    0000017c: 	cvtsi2sdl	init_value(%rip), %xmm5
    00000184: 	mulsd	%xmm4, %xmm6
    00000188: 	addsd	%xmm5, %xmm6
    0000018c: 	ucomisd	%xmm0, %xmm6
    00000190: 	setp	%cl
    00000193: 	cmovnel	%edx, %ecx
    00000196: 	testb	%cl, %cl
    00000198: 	jne	.Ltmp762 # Offset: 408
    0000019a: 	movsd	DATAat0x17de0(%rip), %xmm0
    000001a2: 	mulsd	%xmm4, %xmm0
    000001a6: 	addsd	%xmm5, %xmm0
    000001aa: 	ucomisd	%xmm2, %xmm0
    000001ae: 	setp	%cl
    000001b1: 	cmovnel	%edx, %ecx
    000001b4: 	testb	%cl, %cl
    000001b6: 	jne	.Ltmp762 # Offset: 438
    000001b8: 	movsd	DATAat0x17e00(%rip), %xmm0
    000001c0: 	mulsd	%xmm4, %xmm0
    000001c4: 	mulsd	DATAat0x17dd0(%rip), %xmm4
    000001cc: 	addsd	%xmm5, %xmm0
    000001d0: 	addsd	%xmm5, %xmm4
    000001d4: 	ucomisd	%xmm3, %xmm4
    000001d8: 	setp	%cl
    000001db: 	cmovnel	%edx, %ecx
    000001de: 	ucomisd	%xmm1, %xmm0
    000001e2: 	setp	%sil
    000001e6: 	cmovnel	%edx, %esi
    000001e9: 	orb	%sil, %cl
    000001ec: 	jne	.Ltmp762 # Offset: 492
    000001ee: 	ucomisd	%xmm0, %xmm12
    000001f3: 	setp	%al
    000001f6: 	cmovnel	%edx, %eax
    000001f9: 	testb	%al, %al
    000001fb: 	je	.Ltmp763 # Offset: 507
.Ltmp762:
    000001fd: 	movq	(%rbp), %rdx
    00000201: 	leaq	DATAat0x17004(%rip), %rsi
    00000208: 	movl	$0x1, %edi
    0000020d: 	xorl	%eax, %eax
    0000020f: 	callq	__printf_chk@PLT # Offset: 527
.Ltmp763:
    00000214: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000021b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000222: 	subq	$0x20, %rax
    00000226: 	cmpq	%rax, %rbx
    00000229: 	je	.Ltmp764 # Offset: 553
    0000022f: 	leaq	0x10(%rbx), %rdi
    00000233: 	movq	0x8(%rbp), %r12
    00000237: 	movq	%rdi, (%rbx)
    0000023a: 	movq	(%rbp), %r13
    0000023e: 	movq	%r13, %rax
    00000241: 	addq	%r12, %rax
    00000244: 	je	.Ltmp765 # Offset: 580
    00000246: 	testq	%r13, %r13
    00000249: 	je	.Ltmp766 # Offset: 585
.Ltmp765:
    0000024f: 	movq	%r12, 0x10(%rsp)
    00000254: 	cmpq	$0xf, %r12
    00000258: 	ja	.Ltmp767 # Offset: 600
    0000025e: 	cmpq	$0x1, %r12
    00000262: 	jne	.Ltmp768 # Offset: 610
    00000268: 	movzbl	(%r13), %eax
    0000026d: 	movb	%al, 0x10(%rbx)
.Ltmp771:
    00000270: 	movq	%r12, 0x8(%rbx)
    00000274: 	movb	$0x0, (%rdi,%r12)
    00000279: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000280: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000287: 	addq	$0x20, %rax
    0000028b: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000292: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000299: 	je	.Ltmp769 # Offset: 665
.Ltmp772:
    0000029f: 	movq	-0x20(%rax), %rbp
    000002a3: 	callq	clock@PLT # Offset: 675
    000002a8: 	movq	%rax, end_time(%rip)
    000002af: 	movq	0x18(%rsp), %rdx
    000002b4: 	subq	%fs:0x28, %rdx
    000002bd: 	jne	.Ltmp770 # Offset: 701
    000002c3: 	subq	start_time(%rip), %rax
    000002ca: 	pxor	%xmm0, %xmm0
    000002ce: 	movq	%rbp, %rdi
    000002d1: 	cvtsi2sd	%rax, %xmm0
    000002d6: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000002de: 	addq	$0x28, %rsp
    000002e2: 	popq	%rbx
    000002e3: 	popq	%rbp
    000002e4: 	popq	%r12
    000002e6: 	popq	%r13
    000002e8: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 744
    000002ed: 	nopl	(%rax) # Size: 3
.Ltmp767:
    000002f0: 	movq	%rbx, %rdi
    000002f3: 	leaq	0x10(%rsp), %rsi
    000002f8: 	xorl	%edx, %edx
    000002fa: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 762
    000002ff: 	movq	%rax, (%rbx)
    00000302: 	movq	%rax, %rdi
    00000305: 	movq	0x10(%rsp), %rax
    0000030a: 	movq	%rax, 0x10(%rbx)
.Ltmp773:
    0000030e: 	movq	%r12, %rdx
    00000311: 	movq	%r13, %rsi
    00000314: 	callq	memcpy@PLT # Offset: 788
    00000319: 	movq	0x10(%rsp), %r12
    0000031e: 	movq	(%rbx), %rdi
    00000321: 	jmp	.Ltmp771 # Offset: 801
    00000326: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp764:
    00000330: 	movq	%rbp, %rsi
    00000333: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000033a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 826
    0000033f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000346: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000034d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000354: 	jne	.Ltmp772 # Offset: 852
.Ltmp769:
    0000035a: 	movq	-0x8(%rdx), %rax
    0000035e: 	addq	$0x200, %rax
    00000364: 	jmp	.Ltmp772 # Offset: 868
    00000369: 	nopl	(%rax) # Size: 7
.Ltmp768:
    00000370: 	testq	%r12, %r12
    00000373: 	je	.Ltmp771 # Offset: 883
    00000379: 	jmp	.Ltmp773 # Offset: 889
.Ltmp770:
    0000037b: 	callq	__stack_chk_fail@PLT # Offset: 891
.Ltmp766:
    00000380: 	leaq	DATAat0x17018(%rip), %rdi
    00000387: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 903
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct5_local2IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct5_globalIi12test_struct5IiEXadL_Z8data32_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 110
  State       : disassembled
  Address     : 0xe8a0
  Size        : 0x287
  MaxSize     : 0x290
  Offset      : 0xe8a0
  Section     : .text
  Orc Section : .local.text._Z19test_struct5_globalIi12test_struct5IiEXadL_Z8data32_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0109:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rdi, %r12
    00000009: 	pushq	%rbp
    0000000a: 	pushq	%rbx
    0000000b: 	subq	$0x10, %rsp
    0000000f: 	movq	%fs:0x28, %rax
    00000018: 	movq	%rax, 0x8(%rsp)
    0000001d: 	xorl	%eax, %eax
    0000001f: 	callq	clock@PLT # Offset: 31
    00000024: 	movq	%rax, start_time(%rip)
    0000002b: 	movl	iterations(%rip), %eax
    00000031: 	testl	%eax, %eax
    00000033: 	jle	.Ltmp774 # Offset: 51
    00000039: 	movl	data32_5+12(%rip), %edx
    0000003f: 	movl	data32_5+4(%rip), %esi
    00000045: 	imull	$0x34, %eax, %edi
    00000048: 	leal	(%rax,%rax,4), %ecx
    0000004b: 	movl	data32_5+8(%rip), %r10d
    00000052: 	addl	data32_5(%rip), %edi
    00000058: 	leal	(%rdx,%rcx,4), %r9d
    0000005c: 	leal	(%rsi,%rcx,8), %r11d
    00000060: 	movl	data32_5+16(%rip), %esi
    00000066: 	movl	%edi, data32_5(%rip)
    0000006c: 	leal	(%rax,%rax,8), %edx
    0000006f: 	movl	%r9d, data32_5+12(%rip)
    00000076: 	shll	$0x2, %edx
    00000079: 	movl	%r11d, data32_5+4(%rip)
    00000080: 	addl	%edx, %r10d
    00000083: 	addl	%edx, %esi
    00000085: 	movl	%r10d, data32_5+8(%rip)
    0000008c: 	movl	%esi, data32_5+16(%rip)
.Ltmp787:
    00000092: 	imull	$0x34, %eax, %edx
    00000095: 	leal	(%rax,%rax,2), %r8d
    00000099: 	addl	init_value(%rip), %edx
    0000009f: 	shll	$0x2, %r8d
    000000a3: 	movl	%edx, %ecx
    000000a5: 	subl	%r8d, %ecx
    000000a8: 	cmpl	%edi, %edx
    000000aa: 	jne	.Ltmp775 # Offset: 170
    000000ac: 	cmpl	%r11d, %ecx
    000000af: 	jne	.Ltmp775 # Offset: 175
    000000b1: 	leal	(,%rax,4), %edx
    000000b8: 	shll	$0x4, %eax
    000000bb: 	subl	%edx, %ecx
    000000bd: 	movl	%ecx, %edx
    000000bf: 	subl	%eax, %edx
    000000c1: 	cmpl	%r9d, %edx
    000000c4: 	setne	%al
    000000c7: 	cmpl	%r10d, %ecx
    000000ca: 	setne	%dl
    000000cd: 	orb	%dl, %al
    000000cf: 	jne	.Ltmp775 # Offset: 207
    000000d1: 	cmpl	%esi, %ecx
    000000d3: 	je	.Ltmp776 # Offset: 211
.Ltmp775:
    000000d5: 	movq	(%r12), %rdx
    000000d9: 	leaq	DATAat0x17004(%rip), %rsi
    000000e0: 	movl	$0x1, %edi
    000000e5: 	xorl	%eax, %eax
    000000e7: 	callq	__printf_chk@PLT # Offset: 231
.Ltmp776:
    000000ec: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000f3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000fa: 	subq	$0x20, %rax
    000000fe: 	cmpq	%rax, %rbx
    00000101: 	je	.Ltmp777 # Offset: 257
    00000107: 	leaq	0x10(%rbx), %rdi
    0000010b: 	movq	%rdi, (%rbx)
    0000010e: 	movq	(%r12), %rbp
    00000112: 	movq	0x8(%r12), %r12
    00000117: 	movq	%rbp, %rax
    0000011a: 	addq	%r12, %rax
    0000011d: 	je	.Ltmp778 # Offset: 285
    0000011f: 	testq	%rbp, %rbp
    00000122: 	je	.Ltmp779 # Offset: 290
.Ltmp778:
    00000128: 	movq	%r12, (%rsp)
    0000012c: 	cmpq	$0xf, %r12
    00000130: 	ja	.Ltmp780 # Offset: 304
    00000136: 	cmpq	$0x1, %r12
    0000013a: 	jne	.Ltmp781 # Offset: 314
    00000140: 	movzbl	(%rbp), %eax
    00000144: 	movb	%al, 0x10(%rbx)
.Ltmp784:
    00000147: 	movq	%r12, 0x8(%rbx)
    0000014b: 	movb	$0x0, (%rdi,%r12)
    00000150: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000157: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000015e: 	addq	$0x20, %rax
    00000162: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000169: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000170: 	je	.Ltmp782 # Offset: 368
.Ltmp785:
    00000176: 	movq	-0x20(%rax), %rbp
    0000017a: 	callq	clock@PLT # Offset: 378
    0000017f: 	movq	%rax, end_time(%rip)
    00000186: 	movq	0x8(%rsp), %rdx
    0000018b: 	subq	%fs:0x28, %rdx
    00000194: 	jne	.Ltmp783 # Offset: 404
    0000019a: 	subq	start_time(%rip), %rax
    000001a1: 	pxor	%xmm0, %xmm0
    000001a5: 	movq	%rbp, %rdi
    000001a8: 	cvtsi2sd	%rax, %xmm0
    000001ad: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001b5: 	addq	$0x10, %rsp
    000001b9: 	popq	%rbx
    000001ba: 	popq	%rbp
    000001bb: 	popq	%r12
    000001bd: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 445
    000001c2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp780:
    000001c8: 	movq	%rbx, %rdi
    000001cb: 	movq	%rsp, %rsi
    000001ce: 	xorl	%edx, %edx
    000001d0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 464
    000001d5: 	movq	%rax, (%rbx)
    000001d8: 	movq	%rax, %rdi
    000001db: 	movq	(%rsp), %rax
    000001df: 	movq	%rax, 0x10(%rbx)
.Ltmp786:
    000001e3: 	movq	%r12, %rdx
    000001e6: 	movq	%rbp, %rsi
    000001e9: 	callq	memcpy@PLT # Offset: 489
    000001ee: 	movq	(%rsp), %r12
    000001f2: 	movq	(%rbx), %rdi
    000001f5: 	jmp	.Ltmp784 # Offset: 501
    000001fa: 	nopw	(%rax,%rax) # Size: 6
.Ltmp777:
    00000200: 	movq	%r12, %rsi
    00000203: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000020a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 522
    0000020f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000216: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000021d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000224: 	jne	.Ltmp785 # Offset: 548
.Ltmp782:
    0000022a: 	movq	-0x8(%rdx), %rax
    0000022e: 	addq	$0x200, %rax
    00000234: 	jmp	.Ltmp785 # Offset: 564
    00000239: 	nopl	(%rax) # Size: 7
.Ltmp781:
    00000240: 	testq	%r12, %r12
    00000243: 	je	.Ltmp784 # Offset: 579
    00000249: 	jmp	.Ltmp786 # Offset: 585
    0000024b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp774:
    00000250: 	movl	data32_5(%rip), %edi
    00000256: 	movl	data32_5+4(%rip), %r11d
    0000025d: 	movl	data32_5+8(%rip), %r10d
    00000264: 	movl	data32_5+12(%rip), %r9d
    0000026b: 	movl	data32_5+16(%rip), %esi
    00000271: 	jmp	.Ltmp787 # Offset: 625
.Ltmp779:
    00000276: 	leaq	DATAat0x17018(%rip), %rdi
    0000027d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 637
.Ltmp783:
    00000282: 	callq	__stack_chk_fail@PLT # Offset: 642
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct5_globalIi12test_struct5IiEXadL_Z8data32_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_struct5_argImEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 111
  State       : disassembled
  Address     : 0xeb30
  Size        : 0x291
  MaxSize     : 0x2a0
  Offset      : 0xeb30
  Section     : .text
  Orc Section : .local.text._Z16test_struct5_argImEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0110:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rsi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rdi, %rbx
    00000010: 	subq	$0x18, %rsp
    00000014: 	movq	%fs:0x28, %rax
    0000001d: 	movq	%rax, 0x8(%rsp)
    00000022: 	xorl	%eax, %eax
    00000024: 	callq	clock@PLT # Offset: 36
    00000029: 	movq	%rax, start_time(%rip)
    00000030: 	movslq	iterations(%rip), %rax
    00000037: 	testl	%eax, %eax
    00000039: 	jle	.Ltmp788 # Offset: 57
    0000003f: 	leal	-0x1(%rax), %edx
    00000042: 	movq	0x10(%rbx), %r8
    00000046: 	leaq	(%rdx,%rdx,2), %rcx
    0000004a: 	leaq	(%rdx,%rcx,4), %rsi
    0000004e: 	movq	(%rbx), %rcx
    00000051: 	leaq	0x34(%rcx,%rsi,4), %r9
    00000056: 	movq	0x18(%rbx), %rsi
    0000005a: 	leaq	(%rdx,%rdx,4), %rcx
    0000005e: 	leaq	(%rdx,%rdx,8), %rdx
    00000062: 	movq	%r9, (%rbx)
    00000065: 	leaq	0x14(%rsi,%rcx,4), %rdi
    0000006a: 	shlq	$0x2, %rdx
    0000006e: 	movq	0x8(%rbx), %rsi
    00000072: 	addq	%rdx, %r8
    00000075: 	addq	0x20(%rbx), %rdx
    00000079: 	movq	%rdi, 0x18(%rbx)
    0000007d: 	addq	$0x24, %r8
    00000081: 	leaq	0x28(%rsi,%rcx,8), %r11
    00000086: 	addq	$0x24, %rdx
    0000008a: 	movq	%r8, 0x10(%rbx)
    0000008e: 	movq	%r11, 0x8(%rbx)
    00000092: 	movq	%rdx, 0x20(%rbx)
.Ltmp801:
    00000096: 	leaq	(%rax,%rax,2), %rcx
    0000009a: 	movslq	init_value(%rip), %rsi
    000000a1: 	shlq	$0x2, %rcx
    000000a5: 	leaq	(%rcx,%rax), %r10
    000000a9: 	leaq	(%rsi,%r10,4), %r10
    000000ad: 	movq	%r10, %rsi
    000000b0: 	subq	%rcx, %rsi
    000000b3: 	cmpq	%r9, %r10
    000000b6: 	jne	.Ltmp789 # Offset: 182
    000000b8: 	cmpq	%r11, %rsi
    000000bb: 	jne	.Ltmp789 # Offset: 187
    000000bd: 	leaq	(,%rax,4), %rcx
    000000c5: 	shlq	$0x4, %rax
    000000c9: 	subq	%rcx, %rsi
    000000cc: 	movq	%rsi, %rcx
    000000cf: 	subq	%rax, %rcx
    000000d2: 	cmpq	%rdi, %rcx
    000000d5: 	setne	%al
    000000d8: 	cmpq	%r8, %rsi
    000000db: 	setne	%cl
    000000de: 	orb	%cl, %al
    000000e0: 	jne	.Ltmp789 # Offset: 224
    000000e2: 	cmpq	%rdx, %rsi
    000000e5: 	je	.Ltmp790 # Offset: 229
.Ltmp789:
    000000e7: 	movq	(%rbp), %rdx
    000000eb: 	leaq	DATAat0x17004(%rip), %rsi
    000000f2: 	movl	$0x1, %edi
    000000f7: 	xorl	%eax, %eax
    000000f9: 	callq	__printf_chk@PLT # Offset: 249
.Ltmp790:
    000000fe: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000105: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000010c: 	subq	$0x20, %rax
    00000110: 	cmpq	%rax, %rbx
    00000113: 	je	.Ltmp791 # Offset: 275
    00000119: 	leaq	0x10(%rbx), %rdi
    0000011d: 	movq	0x8(%rbp), %r12
    00000121: 	movq	%rdi, (%rbx)
    00000124: 	movq	(%rbp), %r13
    00000128: 	movq	%r13, %rax
    0000012b: 	addq	%r12, %rax
    0000012e: 	je	.Ltmp792 # Offset: 302
    00000130: 	testq	%r13, %r13
    00000133: 	je	.Ltmp793 # Offset: 307
.Ltmp792:
    00000139: 	movq	%r12, (%rsp)
    0000013d: 	cmpq	$0xf, %r12
    00000141: 	ja	.Ltmp794 # Offset: 321
    00000147: 	cmpq	$0x1, %r12
    0000014b: 	jne	.Ltmp795 # Offset: 331
    00000151: 	movzbl	(%r13), %eax
    00000156: 	movb	%al, 0x10(%rbx)
.Ltmp798:
    00000159: 	movq	%r12, 0x8(%rbx)
    0000015d: 	movb	$0x0, (%rdi,%r12)
    00000162: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000169: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000170: 	addq	$0x20, %rax
    00000174: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000017b: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000182: 	je	.Ltmp796 # Offset: 386
.Ltmp799:
    00000188: 	movq	-0x20(%rax), %rbp
    0000018c: 	callq	clock@PLT # Offset: 396
    00000191: 	movq	%rax, end_time(%rip)
    00000198: 	movq	0x8(%rsp), %rdx
    0000019d: 	subq	%fs:0x28, %rdx
    000001a6: 	jne	.Ltmp797 # Offset: 422
    000001ac: 	subq	start_time(%rip), %rax
    000001b3: 	pxor	%xmm0, %xmm0
    000001b7: 	movq	%rbp, %rdi
    000001ba: 	cvtsi2sd	%rax, %xmm0
    000001bf: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001c7: 	addq	$0x18, %rsp
    000001cb: 	popq	%rbx
    000001cc: 	popq	%rbp
    000001cd: 	popq	%r12
    000001cf: 	popq	%r13
    000001d1: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 465
    000001d6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp794:
    000001e0: 	movq	%rbx, %rdi
    000001e3: 	movq	%rsp, %rsi
    000001e6: 	xorl	%edx, %edx
    000001e8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 488
    000001ed: 	movq	%rax, (%rbx)
    000001f0: 	movq	%rax, %rdi
    000001f3: 	movq	(%rsp), %rax
    000001f7: 	movq	%rax, 0x10(%rbx)
.Ltmp800:
    000001fb: 	movq	%r12, %rdx
    000001fe: 	movq	%r13, %rsi
    00000201: 	callq	memcpy@PLT # Offset: 513
    00000206: 	movq	(%rsp), %r12
    0000020a: 	movq	(%rbx), %rdi
    0000020d: 	jmp	.Ltmp798 # Offset: 525
    00000212: 	nopw	(%rax,%rax) # Size: 6
.Ltmp791:
    00000218: 	movq	%rbp, %rsi
    0000021b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000222: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 546
    00000227: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000022e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000235: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000023c: 	jne	.Ltmp799 # Offset: 572
.Ltmp796:
    00000242: 	movq	-0x8(%rdx), %rax
    00000246: 	addq	$0x200, %rax
    0000024c: 	jmp	.Ltmp799 # Offset: 588
    00000251: 	nopl	(%rax) # Size: 7
.Ltmp795:
    00000258: 	testq	%r12, %r12
    0000025b: 	je	.Ltmp798 # Offset: 603
    00000261: 	jmp	.Ltmp800 # Offset: 609
    00000263: 	nopl	(%rax,%rax) # Size: 5
.Ltmp788:
    00000268: 	movq	(%rbx), %r9
    0000026b: 	movq	0x8(%rbx), %r11
    0000026f: 	movq	0x10(%rbx), %r8
    00000273: 	movq	0x18(%rbx), %rdi
    00000277: 	movq	0x20(%rbx), %rdx
    0000027b: 	jmp	.Ltmp801 # Offset: 635
.Ltmp793:
    00000280: 	leaq	DATAat0x17018(%rip), %rdi
    00000287: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 647
.Ltmp797:
    0000028c: 	callq	__stack_chk_fail@PLT # Offset: 652
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_struct5_argImEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_struct5_argIsEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 112
  State       : disassembled
  Address     : 0xedd0
  Size        : 0x28b
  MaxSize     : 0x290
  Offset      : 0xedd0
  Section     : .text
  Orc Section : .local.text._Z16test_struct5_argIsEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0111:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rsi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rdi, %rbx
    00000010: 	subq	$0x18, %rsp
    00000014: 	movq	%fs:0x28, %rax
    0000001d: 	movq	%rax, 0x8(%rsp)
    00000022: 	xorl	%eax, %eax
    00000024: 	callq	clock@PLT # Offset: 36
    00000029: 	movl	iterations(%rip), %edx
    0000002f: 	movq	%rax, start_time(%rip)
    00000036: 	testl	%edx, %edx
    00000038: 	jle	.Ltmp802 # Offset: 56
    0000003e: 	leal	-0x1(%rdx), %eax
    00000041: 	movzwl	(%rbx), %ecx
    00000044: 	movzwl	0x4(%rbx), %r10d
    00000049: 	leal	(%rax,%rax,2), %esi
    0000004c: 	leal	(%rax,%rax,4), %edi
    0000004f: 	movzwl	0x6(%rbx), %r8d
    00000054: 	leal	(%rax,%rsi,4), %esi
    00000057: 	leal	(%rax,%rax,8), %eax
    0000005a: 	leal	0x34(%rcx,%rsi,4), %esi
    0000005e: 	shll	$0x2, %eax
    00000061: 	movzwl	0x2(%rbx), %ecx
    00000065: 	leal	0x14(%r8,%rdi,4), %r8d
    0000006a: 	addl	%eax, %r10d
    0000006d: 	addw	0x8(%rbx), %ax
    00000071: 	movw	%si, (%rbx)
    00000074: 	addl	$0x24, %r10d
    00000078: 	leal	0x28(%rcx,%rdi,8), %edi
    0000007c: 	addl	$0x24, %eax
    0000007f: 	movw	%r8w, 0x6(%rbx)
    00000084: 	movw	%r10w, 0x4(%rbx)
    00000089: 	movw	%di, 0x2(%rbx)
    0000008d: 	movw	%ax, 0x8(%rbx)
.Ltmp815:
    00000091: 	leal	(%rdx,%rdx,2), %r9d
    00000095: 	shll	$0x2, %r9d
    00000099: 	leal	(%r9,%rdx), %ecx
    0000009d: 	shll	$0x2, %ecx
    000000a0: 	addw	init_value(%rip), %cx
    000000a7: 	movl	%ecx, %r11d
    000000aa: 	subl	%r9d, %r11d
    000000ad: 	cmpw	%si, %cx
    000000b0: 	jne	.Ltmp803 # Offset: 176
    000000b2: 	cmpw	%di, %r11w
    000000b6: 	jne	.Ltmp803 # Offset: 182
    000000b8: 	leal	(,%rdx,4), %ecx
    000000bf: 	shll	$0x4, %edx
    000000c2: 	subl	%ecx, %r11d
    000000c5: 	movl	%r11d, %ecx
    000000c8: 	subl	%edx, %ecx
    000000ca: 	cmpw	%r8w, %cx
    000000ce: 	setne	%dl
    000000d1: 	cmpw	%r10w, %r11w
    000000d5: 	setne	%cl
    000000d8: 	orb	%cl, %dl
    000000da: 	jne	.Ltmp803 # Offset: 218
    000000dc: 	cmpw	%ax, %r11w
    000000e0: 	je	.Ltmp804 # Offset: 224
.Ltmp803:
    000000e2: 	movq	(%rbp), %rdx
    000000e6: 	leaq	DATAat0x17004(%rip), %rsi
    000000ed: 	movl	$0x1, %edi
    000000f2: 	xorl	%eax, %eax
    000000f4: 	callq	__printf_chk@PLT # Offset: 244
.Ltmp804:
    000000f9: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000100: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000107: 	subq	$0x20, %rax
    0000010b: 	cmpq	%rax, %rbx
    0000010e: 	je	.Ltmp805 # Offset: 270
    00000114: 	leaq	0x10(%rbx), %rdi
    00000118: 	movq	0x8(%rbp), %r12
    0000011c: 	movq	%rdi, (%rbx)
    0000011f: 	movq	(%rbp), %r13
    00000123: 	movq	%r13, %rax
    00000126: 	addq	%r12, %rax
    00000129: 	je	.Ltmp806 # Offset: 297
    0000012b: 	testq	%r13, %r13
    0000012e: 	je	.Ltmp807 # Offset: 302
.Ltmp806:
    00000134: 	movq	%r12, (%rsp)
    00000138: 	cmpq	$0xf, %r12
    0000013c: 	ja	.Ltmp808 # Offset: 316
    00000142: 	cmpq	$0x1, %r12
    00000146: 	jne	.Ltmp809 # Offset: 326
    0000014c: 	movzbl	(%r13), %eax
    00000151: 	movb	%al, 0x10(%rbx)
.Ltmp812:
    00000154: 	movq	%r12, 0x8(%rbx)
    00000158: 	movb	$0x0, (%rdi,%r12)
    0000015d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000164: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000016b: 	addq	$0x20, %rax
    0000016f: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000176: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000017d: 	je	.Ltmp810 # Offset: 381
.Ltmp813:
    00000183: 	movq	-0x20(%rax), %rbp
    00000187: 	callq	clock@PLT # Offset: 391
    0000018c: 	movq	%rax, end_time(%rip)
    00000193: 	movq	0x8(%rsp), %rdx
    00000198: 	subq	%fs:0x28, %rdx
    000001a1: 	jne	.Ltmp811 # Offset: 417
    000001a7: 	subq	start_time(%rip), %rax
    000001ae: 	pxor	%xmm0, %xmm0
    000001b2: 	movq	%rbp, %rdi
    000001b5: 	cvtsi2sd	%rax, %xmm0
    000001ba: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001c2: 	addq	$0x18, %rsp
    000001c6: 	popq	%rbx
    000001c7: 	popq	%rbp
    000001c8: 	popq	%r12
    000001ca: 	popq	%r13
    000001cc: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 460
    000001d1: 	nopl	(%rax) # Size: 7
.Ltmp808:
    000001d8: 	movq	%rbx, %rdi
    000001db: 	movq	%rsp, %rsi
    000001de: 	xorl	%edx, %edx
    000001e0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 480
    000001e5: 	movq	%rax, (%rbx)
    000001e8: 	movq	%rax, %rdi
    000001eb: 	movq	(%rsp), %rax
    000001ef: 	movq	%rax, 0x10(%rbx)
.Ltmp814:
    000001f3: 	movq	%r12, %rdx
    000001f6: 	movq	%r13, %rsi
    000001f9: 	callq	memcpy@PLT # Offset: 505
    000001fe: 	movq	(%rsp), %r12
    00000202: 	movq	(%rbx), %rdi
    00000205: 	jmp	.Ltmp812 # Offset: 517
    0000020a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp805:
    00000210: 	movq	%rbp, %rsi
    00000213: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000021a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 538
    0000021f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000226: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000022d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000234: 	jne	.Ltmp813 # Offset: 564
.Ltmp810:
    0000023a: 	movq	-0x8(%rdx), %rax
    0000023e: 	addq	$0x200, %rax
    00000244: 	jmp	.Ltmp813 # Offset: 580
    00000249: 	nopl	(%rax) # Size: 7
.Ltmp809:
    00000250: 	testq	%r12, %r12
    00000253: 	je	.Ltmp812 # Offset: 595
    00000259: 	jmp	.Ltmp814 # Offset: 601
    0000025b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp802:
    00000260: 	movzwl	(%rbx), %esi
    00000263: 	movzwl	0x2(%rbx), %edi
    00000267: 	movzwl	0x4(%rbx), %r10d
    0000026c: 	movzwl	0x6(%rbx), %r8d
    00000271: 	movzwl	0x8(%rbx), %eax
    00000275: 	jmp	.Ltmp815 # Offset: 629
.Ltmp807:
    0000027a: 	leaq	DATAat0x17018(%rip), %rdi
    00000281: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 641
.Ltmp811:
    00000286: 	callq	__stack_chk_fail@PLT # Offset: 646
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_struct5_argIsEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_struct5_argIiEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 113
  State       : disassembled
  Address     : 0xf060
  Size        : 0x257
  MaxSize     : 0x260
  Offset      : 0xf060
  Section     : .text
  Orc Section : .local.text._Z16test_struct5_argIiEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0112:
    00000000: 	endbr64
    00000004: 	pushq	%r12
    00000006: 	movq	%rsi, %r12
    00000009: 	pushq	%rbp
    0000000a: 	pushq	%rbx
    0000000b: 	movq	%rdi, %rbx
    0000000e: 	subq	$0x10, %rsp
    00000012: 	movq	%fs:0x28, %rax
    0000001b: 	movq	%rax, 0x8(%rsp)
    00000020: 	xorl	%eax, %eax
    00000022: 	callq	clock@PLT # Offset: 34
    00000027: 	movq	%rax, start_time(%rip)
    0000002e: 	movl	iterations(%rip), %eax
    00000034: 	testl	%eax, %eax
    00000036: 	jle	.Ltmp816 # Offset: 54
    0000003c: 	movl	0xc(%rbx), %edx
    0000003f: 	movl	0x4(%rbx), %esi
    00000042: 	imull	$0x34, %eax, %edi
    00000045: 	leal	(%rax,%rax,4), %ecx
    00000048: 	movl	0x8(%rbx), %r10d
    0000004c: 	addl	(%rbx), %edi
    0000004e: 	leal	(%rdx,%rcx,4), %r9d
    00000052: 	leal	(%rsi,%rcx,8), %r11d
    00000056: 	movl	0x10(%rbx), %esi
    00000059: 	movl	%edi, (%rbx)
    0000005b: 	leal	(%rax,%rax,8), %edx
    0000005e: 	movl	%r9d, 0xc(%rbx)
    00000062: 	shll	$0x2, %edx
    00000065: 	movl	%r11d, 0x4(%rbx)
    00000069: 	addl	%edx, %r10d
    0000006c: 	addl	%edx, %esi
    0000006e: 	movl	%r10d, 0x8(%rbx)
    00000072: 	movl	%esi, 0x10(%rbx)
.Ltmp829:
    00000075: 	imull	$0x34, %eax, %edx
    00000078: 	leal	(%rax,%rax,2), %r8d
    0000007c: 	addl	init_value(%rip), %edx
    00000082: 	shll	$0x2, %r8d
    00000086: 	movl	%edx, %ecx
    00000088: 	subl	%r8d, %ecx
    0000008b: 	cmpl	%edi, %edx
    0000008d: 	jne	.Ltmp817 # Offset: 141
    0000008f: 	cmpl	%r11d, %ecx
    00000092: 	jne	.Ltmp817 # Offset: 146
    00000094: 	leal	(,%rax,4), %edx
    0000009b: 	shll	$0x4, %eax
    0000009e: 	subl	%edx, %ecx
    000000a0: 	movl	%ecx, %edx
    000000a2: 	subl	%eax, %edx
    000000a4: 	cmpl	%r9d, %edx
    000000a7: 	setne	%al
    000000aa: 	cmpl	%r10d, %ecx
    000000ad: 	setne	%dl
    000000b0: 	orb	%dl, %al
    000000b2: 	jne	.Ltmp817 # Offset: 178
    000000b4: 	cmpl	%esi, %ecx
    000000b6: 	je	.Ltmp818 # Offset: 182
.Ltmp817:
    000000b8: 	movq	(%r12), %rdx
    000000bc: 	leaq	DATAat0x17004(%rip), %rsi
    000000c3: 	movl	$0x1, %edi
    000000c8: 	xorl	%eax, %eax
    000000ca: 	callq	__printf_chk@PLT # Offset: 202
.Ltmp818:
    000000cf: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000d6: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000dd: 	subq	$0x20, %rax
    000000e1: 	cmpq	%rax, %rbx
    000000e4: 	je	.Ltmp819 # Offset: 228
    000000ea: 	leaq	0x10(%rbx), %rdi
    000000ee: 	movq	%rdi, (%rbx)
    000000f1: 	movq	(%r12), %rbp
    000000f5: 	movq	0x8(%r12), %r12
    000000fa: 	movq	%rbp, %rax
    000000fd: 	addq	%r12, %rax
    00000100: 	je	.Ltmp820 # Offset: 256
    00000102: 	testq	%rbp, %rbp
    00000105: 	je	.Ltmp821 # Offset: 261
.Ltmp820:
    0000010b: 	movq	%r12, (%rsp)
    0000010f: 	cmpq	$0xf, %r12
    00000113: 	ja	.Ltmp822 # Offset: 275
    00000119: 	cmpq	$0x1, %r12
    0000011d: 	jne	.Ltmp823 # Offset: 285
    00000123: 	movzbl	(%rbp), %eax
    00000127: 	movb	%al, 0x10(%rbx)
.Ltmp826:
    0000012a: 	movq	%r12, 0x8(%rbx)
    0000012e: 	movb	$0x0, (%rdi,%r12)
    00000133: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000013a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000141: 	addq	$0x20, %rax
    00000145: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000014c: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000153: 	je	.Ltmp824 # Offset: 339
.Ltmp827:
    00000159: 	movq	-0x20(%rax), %rbp
    0000015d: 	callq	clock@PLT # Offset: 349
    00000162: 	movq	%rax, end_time(%rip)
    00000169: 	movq	0x8(%rsp), %rdx
    0000016e: 	subq	%fs:0x28, %rdx
    00000177: 	jne	.Ltmp825 # Offset: 375
    0000017d: 	subq	start_time(%rip), %rax
    00000184: 	pxor	%xmm0, %xmm0
    00000188: 	movq	%rbp, %rdi
    0000018b: 	cvtsi2sd	%rax, %xmm0
    00000190: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000198: 	addq	$0x10, %rsp
    0000019c: 	popq	%rbx
    0000019d: 	popq	%rbp
    0000019e: 	popq	%r12
    000001a0: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 416
    000001a5: 	nopl	(%rax) # Size: 3
.Ltmp822:
    000001a8: 	movq	%rbx, %rdi
    000001ab: 	movq	%rsp, %rsi
    000001ae: 	xorl	%edx, %edx
    000001b0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 432
    000001b5: 	movq	%rax, (%rbx)
    000001b8: 	movq	%rax, %rdi
    000001bb: 	movq	(%rsp), %rax
    000001bf: 	movq	%rax, 0x10(%rbx)
.Ltmp828:
    000001c3: 	movq	%r12, %rdx
    000001c6: 	movq	%rbp, %rsi
    000001c9: 	callq	memcpy@PLT # Offset: 457
    000001ce: 	movq	(%rsp), %r12
    000001d2: 	movq	(%rbx), %rdi
    000001d5: 	jmp	.Ltmp826 # Offset: 469
    000001da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp819:
    000001e0: 	movq	%r12, %rsi
    000001e3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001ea: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 490
    000001ef: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001f6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001fd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000204: 	jne	.Ltmp827 # Offset: 516
.Ltmp824:
    0000020a: 	movq	-0x8(%rdx), %rax
    0000020e: 	addq	$0x200, %rax
    00000214: 	jmp	.Ltmp827 # Offset: 532
    00000219: 	nopl	(%rax) # Size: 7
.Ltmp823:
    00000220: 	testq	%r12, %r12
    00000223: 	je	.Ltmp826 # Offset: 547
    00000229: 	jmp	.Ltmp828 # Offset: 553
    0000022b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp816:
    00000230: 	movl	(%rbx), %edi
    00000232: 	movl	0x4(%rbx), %r11d
    00000236: 	movl	0x8(%rbx), %r10d
    0000023a: 	movl	0xc(%rbx), %r9d
    0000023e: 	movl	0x10(%rbx), %esi
    00000241: 	jmp	.Ltmp829 # Offset: 577
.Ltmp821:
    00000246: 	leaq	DATAat0x17018(%rip), %rdi
    0000024d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 589
.Ltmp825:
    00000252: 	callq	__stack_chk_fail@PLT # Offset: 594
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_struct5_argIiEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct5_globalIm12test_struct5ImEXadL_Z8data64_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 114
  State       : disassembled
  Address     : 0xf2c0
  Size        : 0x2b9
  MaxSize     : 0x2c0
  Offset      : 0xf2c0
  Section     : .text
  Orc Section : .local.text._Z19test_struct5_globalIm12test_struct5ImEXadL_Z8data64_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0113:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movq	%rax, start_time(%rip)
    0000002d: 	movslq	iterations(%rip), %rax
    00000034: 	testl	%eax, %eax
    00000036: 	jle	.Ltmp830 # Offset: 54
    0000003c: 	leal	-0x1(%rax), %edx
    0000003f: 	leaq	(%rdx,%rdx,2), %rcx
    00000043: 	leaq	(%rdx,%rcx,4), %rsi
    00000047: 	movq	data64_5(%rip), %rcx
    0000004e: 	leaq	0x34(%rcx,%rsi,4), %rdi
    00000053: 	movq	data64_5+24(%rip), %rsi
    0000005a: 	leaq	(%rdx,%rdx,4), %rcx
    0000005e: 	leaq	(%rdx,%rdx,8), %rdx
    00000062: 	movq	%rdi, data64_5(%rip)
    00000069: 	leaq	0x14(%rsi,%rcx,4), %r9
    0000006e: 	movq	data64_5+16(%rip), %rsi
    00000075: 	shlq	$0x2, %rdx
    00000079: 	movq	%r9, data64_5+24(%rip)
    00000080: 	leaq	0x24(%rdx,%rsi), %r10
    00000085: 	movq	data64_5+8(%rip), %rsi
    0000008c: 	movq	%r10, data64_5+16(%rip)
    00000093: 	leaq	0x28(%rsi,%rcx,8), %r8
    00000098: 	movq	data64_5+32(%rip), %rcx
    0000009f: 	movq	%r8, data64_5+8(%rip)
    000000a6: 	leaq	0x24(%rdx,%rcx), %r11
    000000ab: 	movq	%r11, data64_5+32(%rip)
.Ltmp843:
    000000b2: 	leaq	(%rax,%rax,2), %rdx
    000000b6: 	movslq	init_value(%rip), %rcx
    000000bd: 	shlq	$0x2, %rdx
    000000c1: 	leaq	(%rdx,%rax), %rsi
    000000c5: 	leaq	(%rcx,%rsi,4), %rsi
    000000c9: 	movq	%rsi, %rcx
    000000cc: 	subq	%rdx, %rcx
    000000cf: 	cmpq	%rdi, %rsi
    000000d2: 	jne	.Ltmp831 # Offset: 210
    000000d4: 	cmpq	%r8, %rcx
    000000d7: 	jne	.Ltmp831 # Offset: 215
    000000d9: 	leaq	(,%rax,4), %rdx
    000000e1: 	shlq	$0x4, %rax
    000000e5: 	subq	%rdx, %rcx
    000000e8: 	movq	%rcx, %rdx
    000000eb: 	subq	%rax, %rdx
    000000ee: 	cmpq	%r9, %rdx
    000000f1: 	setne	%al
    000000f4: 	cmpq	%r10, %rcx
    000000f7: 	setne	%dl
    000000fa: 	orb	%dl, %al
    000000fc: 	jne	.Ltmp831 # Offset: 252
    000000fe: 	cmpq	%r11, %rcx
    00000101: 	je	.Ltmp832 # Offset: 257
.Ltmp831:
    00000103: 	movq	(%rbp), %rdx
    00000107: 	leaq	DATAat0x17004(%rip), %rsi
    0000010e: 	movl	$0x1, %edi
    00000113: 	xorl	%eax, %eax
    00000115: 	callq	__printf_chk@PLT # Offset: 277
.Ltmp832:
    0000011a: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000121: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000128: 	subq	$0x20, %rax
    0000012c: 	cmpq	%rax, %rbx
    0000012f: 	je	.Ltmp833 # Offset: 303
    00000135: 	leaq	0x10(%rbx), %rdi
    00000139: 	movq	0x8(%rbp), %r12
    0000013d: 	movq	%rdi, (%rbx)
    00000140: 	movq	(%rbp), %r13
    00000144: 	movq	%r13, %rax
    00000147: 	addq	%r12, %rax
    0000014a: 	je	.Ltmp834 # Offset: 330
    0000014c: 	testq	%r13, %r13
    0000014f: 	je	.Ltmp835 # Offset: 335
.Ltmp834:
    00000155: 	movq	%r12, (%rsp)
    00000159: 	cmpq	$0xf, %r12
    0000015d: 	ja	.Ltmp836 # Offset: 349
    00000163: 	cmpq	$0x1, %r12
    00000167: 	jne	.Ltmp837 # Offset: 359
    0000016d: 	movzbl	(%r13), %eax
    00000172: 	movb	%al, 0x10(%rbx)
.Ltmp840:
    00000175: 	movq	%r12, 0x8(%rbx)
    00000179: 	movb	$0x0, (%rdi,%r12)
    0000017e: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000185: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000018c: 	addq	$0x20, %rax
    00000190: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000197: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000019e: 	je	.Ltmp838 # Offset: 414
.Ltmp841:
    000001a4: 	movq	-0x20(%rax), %rbp
    000001a8: 	callq	clock@PLT # Offset: 424
    000001ad: 	movq	%rax, end_time(%rip)
    000001b4: 	movq	0x8(%rsp), %rdx
    000001b9: 	subq	%fs:0x28, %rdx
    000001c2: 	jne	.Ltmp839 # Offset: 450
    000001c8: 	subq	start_time(%rip), %rax
    000001cf: 	pxor	%xmm0, %xmm0
    000001d3: 	movq	%rbp, %rdi
    000001d6: 	cvtsi2sd	%rax, %xmm0
    000001db: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001e3: 	addq	$0x18, %rsp
    000001e7: 	popq	%rbx
    000001e8: 	popq	%rbp
    000001e9: 	popq	%r12
    000001eb: 	popq	%r13
    000001ed: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 493
    000001f2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp836:
    000001f8: 	movq	%rbx, %rdi
    000001fb: 	movq	%rsp, %rsi
    000001fe: 	xorl	%edx, %edx
    00000200: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 512
    00000205: 	movq	%rax, (%rbx)
    00000208: 	movq	%rax, %rdi
    0000020b: 	movq	(%rsp), %rax
    0000020f: 	movq	%rax, 0x10(%rbx)
.Ltmp842:
    00000213: 	movq	%r12, %rdx
    00000216: 	movq	%r13, %rsi
    00000219: 	callq	memcpy@PLT # Offset: 537
    0000021e: 	movq	(%rsp), %r12
    00000222: 	movq	(%rbx), %rdi
    00000225: 	jmp	.Ltmp840 # Offset: 549
    0000022a: 	nopw	(%rax,%rax) # Size: 6
.Ltmp833:
    00000230: 	movq	%rbp, %rsi
    00000233: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000023a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 570
    0000023f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000246: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000024d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000254: 	jne	.Ltmp841 # Offset: 596
.Ltmp838:
    0000025a: 	movq	-0x8(%rdx), %rax
    0000025e: 	addq	$0x200, %rax
    00000264: 	jmp	.Ltmp841 # Offset: 612
    00000269: 	nopl	(%rax) # Size: 7
.Ltmp837:
    00000270: 	testq	%r12, %r12
    00000273: 	je	.Ltmp840 # Offset: 627
    00000279: 	jmp	.Ltmp842 # Offset: 633
    0000027b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp830:
    00000280: 	movq	data64_5(%rip), %rdi
    00000287: 	movq	data64_5+8(%rip), %r8
    0000028e: 	movq	data64_5+16(%rip), %r10
    00000295: 	movq	data64_5+24(%rip), %r9
    0000029c: 	movq	data64_5+32(%rip), %r11
    000002a3: 	jmp	.Ltmp843 # Offset: 675
.Ltmp835:
    000002a8: 	leaq	DATAat0x17018(%rip), %rdi
    000002af: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 687
.Ltmp839:
    000002b4: 	callq	__stack_chk_fail@PLT # Offset: 692
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct5_globalIm12test_struct5ImEXadL_Z8data64_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct5_globalIs12test_struct5IsEXadL_Z8data16_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 115
  State       : disassembled
  Address     : 0xf580
  Size        : 0x2b3
  MaxSize     : 0x2c0
  Offset      : 0xf580
  Section     : .text
  Orc Section : .local.text._Z19test_struct5_globalIs12test_struct5IsEXadL_Z8data16_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0114:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movl	iterations(%rip), %edx
    0000002c: 	movq	%rax, start_time(%rip)
    00000033: 	testl	%edx, %edx
    00000035: 	jle	.Ltmp844 # Offset: 53
    0000003b: 	leal	-0x1(%rdx), %eax
    0000003e: 	movzwl	data16_5(%rip), %ecx
    00000045: 	movzwl	data16_5+4(%rip), %r10d
    0000004d: 	leal	(%rax,%rax,2), %esi
    00000050: 	leal	(%rax,%rax,4), %edi
    00000053: 	movzwl	data16_5+6(%rip), %r8d
    0000005b: 	leal	(%rax,%rsi,4), %esi
    0000005e: 	leal	(%rax,%rax,8), %eax
    00000061: 	leal	0x34(%rcx,%rsi,4), %esi
    00000065: 	shll	$0x2, %eax
    00000068: 	movzwl	data16_5+2(%rip), %ecx
    0000006f: 	leal	0x14(%r8,%rdi,4), %r8d
    00000074: 	addl	%eax, %r10d
    00000077: 	addw	data16_5+8(%rip), %ax
    0000007e: 	movw	%si, data16_5(%rip)
    00000085: 	addl	$0x24, %r10d
    00000089: 	leal	0x28(%rcx,%rdi,8), %edi
    0000008d: 	addl	$0x24, %eax
    00000090: 	movw	%r8w, data16_5+6(%rip)
    00000098: 	movw	%r10w, data16_5+4(%rip)
    000000a0: 	movw	%di, data16_5+2(%rip)
    000000a7: 	movw	%ax, data16_5+8(%rip)
.Ltmp857:
    000000ae: 	leal	(%rdx,%rdx,2), %r9d
    000000b2: 	shll	$0x2, %r9d
    000000b6: 	leal	(%r9,%rdx), %ecx
    000000ba: 	shll	$0x2, %ecx
    000000bd: 	addw	init_value(%rip), %cx
    000000c4: 	movl	%ecx, %r11d
    000000c7: 	subl	%r9d, %r11d
    000000ca: 	cmpw	%si, %cx
    000000cd: 	jne	.Ltmp845 # Offset: 205
    000000cf: 	cmpw	%di, %r11w
    000000d3: 	jne	.Ltmp845 # Offset: 211
    000000d5: 	leal	(,%rdx,4), %ecx
    000000dc: 	shll	$0x4, %edx
    000000df: 	subl	%ecx, %r11d
    000000e2: 	movl	%r11d, %ecx
    000000e5: 	subl	%edx, %ecx
    000000e7: 	cmpw	%r8w, %cx
    000000eb: 	setne	%dl
    000000ee: 	cmpw	%r10w, %r11w
    000000f2: 	setne	%cl
    000000f5: 	orb	%cl, %dl
    000000f7: 	jne	.Ltmp845 # Offset: 247
    000000f9: 	cmpw	%ax, %r11w
    000000fd: 	je	.Ltmp846 # Offset: 253
.Ltmp845:
    000000ff: 	movq	(%rbp), %rdx
    00000103: 	leaq	DATAat0x17004(%rip), %rsi
    0000010a: 	movl	$0x1, %edi
    0000010f: 	xorl	%eax, %eax
    00000111: 	callq	__printf_chk@PLT # Offset: 273
.Ltmp846:
    00000116: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000011d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000124: 	subq	$0x20, %rax
    00000128: 	cmpq	%rax, %rbx
    0000012b: 	je	.Ltmp847 # Offset: 299
    00000131: 	leaq	0x10(%rbx), %rdi
    00000135: 	movq	0x8(%rbp), %r12
    00000139: 	movq	%rdi, (%rbx)
    0000013c: 	movq	(%rbp), %r13
    00000140: 	movq	%r13, %rax
    00000143: 	addq	%r12, %rax
    00000146: 	je	.Ltmp848 # Offset: 326
    00000148: 	testq	%r13, %r13
    0000014b: 	je	.Ltmp849 # Offset: 331
.Ltmp848:
    00000151: 	movq	%r12, (%rsp)
    00000155: 	cmpq	$0xf, %r12
    00000159: 	ja	.Ltmp850 # Offset: 345
    0000015f: 	cmpq	$0x1, %r12
    00000163: 	jne	.Ltmp851 # Offset: 355
    00000169: 	movzbl	(%r13), %eax
    0000016e: 	movb	%al, 0x10(%rbx)
.Ltmp854:
    00000171: 	movq	%r12, 0x8(%rbx)
    00000175: 	movb	$0x0, (%rdi,%r12)
    0000017a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000181: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000188: 	addq	$0x20, %rax
    0000018c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000193: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000019a: 	je	.Ltmp852 # Offset: 410
.Ltmp855:
    000001a0: 	movq	-0x20(%rax), %rbp
    000001a4: 	callq	clock@PLT # Offset: 420
    000001a9: 	movq	%rax, end_time(%rip)
    000001b0: 	movq	0x8(%rsp), %rdx
    000001b5: 	subq	%fs:0x28, %rdx
    000001be: 	jne	.Ltmp853 # Offset: 446
    000001c4: 	subq	start_time(%rip), %rax
    000001cb: 	pxor	%xmm0, %xmm0
    000001cf: 	movq	%rbp, %rdi
    000001d2: 	cvtsi2sd	%rax, %xmm0
    000001d7: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000001df: 	addq	$0x18, %rsp
    000001e3: 	popq	%rbx
    000001e4: 	popq	%rbp
    000001e5: 	popq	%r12
    000001e7: 	popq	%r13
    000001e9: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 489
    000001ee: 	nop # Size: 2
.Ltmp850:
    000001f0: 	movq	%rbx, %rdi
    000001f3: 	movq	%rsp, %rsi
    000001f6: 	xorl	%edx, %edx
    000001f8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 504
    000001fd: 	movq	%rax, (%rbx)
    00000200: 	movq	%rax, %rdi
    00000203: 	movq	(%rsp), %rax
    00000207: 	movq	%rax, 0x10(%rbx)
.Ltmp856:
    0000020b: 	movq	%r12, %rdx
    0000020e: 	movq	%r13, %rsi
    00000211: 	callq	memcpy@PLT # Offset: 529
    00000216: 	movq	(%rsp), %r12
    0000021a: 	movq	(%rbx), %rdi
    0000021d: 	jmp	.Ltmp854 # Offset: 541
    00000222: 	nopw	(%rax,%rax) # Size: 6
.Ltmp847:
    00000228: 	movq	%rbp, %rsi
    0000022b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000232: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 562
    00000237: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000023e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000245: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000024c: 	jne	.Ltmp855 # Offset: 588
.Ltmp852:
    00000252: 	movq	-0x8(%rdx), %rax
    00000256: 	addq	$0x200, %rax
    0000025c: 	jmp	.Ltmp855 # Offset: 604
    00000261: 	nopl	(%rax) # Size: 7
.Ltmp851:
    00000268: 	testq	%r12, %r12
    0000026b: 	je	.Ltmp854 # Offset: 619
    00000271: 	jmp	.Ltmp856 # Offset: 625
    00000273: 	nopl	(%rax,%rax) # Size: 5
.Ltmp844:
    00000278: 	movzwl	data16_5(%rip), %esi
    0000027f: 	movzwl	data16_5+2(%rip), %edi
    00000286: 	movzwl	data16_5+4(%rip), %r10d
    0000028e: 	movzwl	data16_5+6(%rip), %r8d
    00000296: 	movzwl	data16_5+8(%rip), %eax
    0000029d: 	jmp	.Ltmp857 # Offset: 669
.Ltmp849:
    000002a2: 	leaq	DATAat0x17018(%rip), %rdi
    000002a9: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 681
.Ltmp853:
    000002ae: 	callq	__stack_chk_fail@PLT # Offset: 686
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct5_globalIs12test_struct5IsEXadL_Z8data16_5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z16test_struct5_argIdEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 116
  State       : disassembled
  Address     : 0xf840
  Size        : 0x3b2
  MaxSize     : 0x3c0
  Offset      : 0xf840
  Section     : .text
  Orc Section : .local.text._Z16test_struct5_argIdEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0115:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rsi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rdi, %rbx
    00000010: 	subq	$0x18, %rsp
    00000014: 	movq	%fs:0x28, %rax
    0000001d: 	movq	%rax, 0x8(%rsp)
    00000022: 	xorl	%eax, %eax
    00000024: 	callq	clock@PLT # Offset: 36
    00000029: 	movl	iterations(%rip), %edx
    0000002f: 	movsd	(%rbx), %xmm1
    00000033: 	movq	%rax, start_time(%rip)
    0000003a: 	testl	%edx, %edx
    0000003c: 	jle	.Ltmp858 # Offset: 60
    00000042: 	movsd	0x10(%rbx), %xmm2
    00000047: 	movsd	0x20(%rbx), %xmm0
    0000004c: 	xorl	%eax, %eax
    0000004e: 	movsd	0x8(%rbx), %xmm3
    00000053: 	movsd	0x18(%rbx), %xmm4
    00000058: 	movsd	DATAat0x17ce8(%rip), %xmm7
    00000060: 	movsd	DATAat0x17ce0(%rip), %xmm9
    00000069: 	movsd	DATAat0x17cd0(%rip), %xmm6
    00000071: 	movsd	DATAat0x17d10(%rip), %xmm5
    00000079: 	movsd	DATAat0x17cc0(%rip), %xmm8
    00000082: 	movsd	DATAat0x17c98(%rip), %xmm12
    0000008b: 	movsd	DATAat0x17cf8(%rip), %xmm11
    00000094: 	movsd	DATAat0x17cb8(%rip), %xmm10
    0000009d: 	movsd	DATAat0x17cc8(%rip), %xmm15
    000000a6: 	movsd	DATAat0x17cb0(%rip), %xmm14
    000000af: 	movsd	DATAat0x17d18(%rip), %xmm13
    000000b8: 	nopl	(%rax,%rax) # Size: 8
.Ltmp859:
    000000c0: 	addsd	%xmm12, %xmm0
    000000c5: 	addsd	%xmm12, %xmm2
    000000ca: 	addl	$0x1, %eax
    000000cd: 	addsd	%xmm6, %xmm3
    000000d1: 	addsd	%xmm9, %xmm4
    000000d6: 	addsd	%xmm9, %xmm1
    000000db: 	addsd	%xmm9, %xmm0
    000000e0: 	addsd	%xmm11, %xmm2
    000000e5: 	addsd	%xmm5, %xmm3
    000000e9: 	addsd	%xmm6, %xmm4
    000000ed: 	addsd	%xmm8, %xmm1
    000000f2: 	addsd	%xmm11, %xmm0
    000000f7: 	addsd	%xmm8, %xmm2
    000000fc: 	addsd	%xmm10, %xmm4
    00000101: 	addsd	%xmm14, %xmm3
    00000106: 	addsd	%xmm7, %xmm1
    0000010a: 	addsd	DATAat0x17cd8(%rip), %xmm1
    00000112: 	addsd	%xmm6, %xmm0
    00000116: 	addsd	%xmm7, %xmm2
    0000011a: 	addsd	DATAat0x17dc8(%rip), %xmm2
    00000122: 	addsd	DATAat0x17cf0(%rip), %xmm1
    0000012a: 	addsd	%xmm5, %xmm4
    0000012e: 	addsd	DATAat0x17dc0(%rip), %xmm1
    00000136: 	addsd	%xmm8, %xmm0
    0000013b: 	addsd	%xmm13, %xmm3
    00000140: 	addsd	%xmm15, %xmm2
    00000145: 	addsd	%xmm10, %xmm0
    0000014a: 	addsd	%xmm7, %xmm0
    0000014e: 	addsd	%xmm5, %xmm0
    00000152: 	cmpl	%edx, %eax
    00000154: 	jne	.Ltmp859 # Offset: 340
    0000015a: 	movapd	%xmm1, %xmm5
    0000015e: 	movsd	%xmm0, 0x20(%rbx)
    00000163: 	unpcklpd	%xmm3, %xmm5
    00000167: 	movups	%xmm5, (%rbx)
    0000016a: 	movapd	%xmm2, %xmm5
    0000016e: 	unpcklpd	%xmm4, %xmm5
    00000172: 	movups	%xmm5, 0x10(%rbx)
.Ltmp872:
    00000176: 	pxor	%xmm5, %xmm5
    0000017a: 	pxor	%xmm6, %xmm6
    0000017e: 	movl	$0x1, %eax
    00000183: 	movsd	DATAat0x17de8(%rip), %xmm7
    0000018b: 	cvtsi2sd	%edx, %xmm5
    0000018f: 	cvtsi2sdl	init_value(%rip), %xmm6
    00000197: 	mulsd	%xmm5, %xmm7
    0000019b: 	addsd	%xmm6, %xmm7
    0000019f: 	ucomisd	%xmm1, %xmm7
    000001a3: 	setp	%dl
    000001a6: 	cmovnel	%eax, %edx
    000001a9: 	testb	%dl, %dl
    000001ab: 	jne	.Ltmp860 # Offset: 427
    000001ad: 	movsd	DATAat0x17de0(%rip), %xmm1
    000001b5: 	mulsd	%xmm5, %xmm1
    000001b9: 	addsd	%xmm6, %xmm1
    000001bd: 	ucomisd	%xmm3, %xmm1
    000001c1: 	setp	%dl
    000001c4: 	cmovnel	%eax, %edx
    000001c7: 	testb	%dl, %dl
    000001c9: 	jne	.Ltmp860 # Offset: 457
    000001cb: 	movsd	DATAat0x17e00(%rip), %xmm1
    000001d3: 	mulsd	%xmm5, %xmm1
    000001d7: 	mulsd	DATAat0x17dd0(%rip), %xmm5
    000001df: 	addsd	%xmm6, %xmm1
    000001e3: 	addsd	%xmm6, %xmm5
    000001e7: 	ucomisd	%xmm4, %xmm5
    000001eb: 	setp	%dl
    000001ee: 	cmovnel	%eax, %edx
    000001f1: 	ucomisd	%xmm2, %xmm1
    000001f5: 	setp	%cl
    000001f8: 	cmovnel	%eax, %ecx
    000001fb: 	orb	%cl, %dl
    000001fd: 	jne	.Ltmp860 # Offset: 509
    000001ff: 	ucomisd	%xmm0, %xmm1
    00000203: 	setp	%dl
    00000206: 	cmovel	%edx, %eax
    00000209: 	testb	%al, %al
    0000020b: 	je	.Ltmp861 # Offset: 523
.Ltmp860:
    0000020d: 	movq	(%rbp), %rdx
    00000211: 	leaq	DATAat0x17004(%rip), %rsi
    00000218: 	movl	$0x1, %edi
    0000021d: 	xorl	%eax, %eax
    0000021f: 	callq	__printf_chk@PLT # Offset: 543
.Ltmp861:
    00000224: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000022b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000232: 	subq	$0x20, %rax
    00000236: 	cmpq	%rax, %rbx
    00000239: 	je	.Ltmp862 # Offset: 569
    0000023f: 	leaq	0x10(%rbx), %rdi
    00000243: 	movq	0x8(%rbp), %r12
    00000247: 	movq	%rdi, (%rbx)
    0000024a: 	movq	(%rbp), %r13
    0000024e: 	movq	%r13, %rax
    00000251: 	addq	%r12, %rax
    00000254: 	je	.Ltmp863 # Offset: 596
    00000256: 	testq	%r13, %r13
    00000259: 	je	.Ltmp864 # Offset: 601
.Ltmp863:
    0000025f: 	movq	%r12, (%rsp)
    00000263: 	cmpq	$0xf, %r12
    00000267: 	ja	.Ltmp865 # Offset: 615
    0000026d: 	cmpq	$0x1, %r12
    00000271: 	jne	.Ltmp866 # Offset: 625
    00000277: 	movzbl	(%r13), %eax
    0000027c: 	movb	%al, 0x10(%rbx)
.Ltmp869:
    0000027f: 	movq	%r12, 0x8(%rbx)
    00000283: 	movb	$0x0, (%rdi,%r12)
    00000288: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000028f: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000296: 	addq	$0x20, %rax
    0000029a: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002a1: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002a8: 	je	.Ltmp867 # Offset: 680
.Ltmp870:
    000002ae: 	movq	-0x20(%rax), %rbp
    000002b2: 	callq	clock@PLT # Offset: 690
    000002b7: 	movq	%rax, end_time(%rip)
    000002be: 	movq	0x8(%rsp), %rdx
    000002c3: 	subq	%fs:0x28, %rdx
    000002cc: 	jne	.Ltmp868 # Offset: 716
    000002d2: 	subq	start_time(%rip), %rax
    000002d9: 	pxor	%xmm0, %xmm0
    000002dd: 	movq	%rbp, %rdi
    000002e0: 	cvtsi2sd	%rax, %xmm0
    000002e5: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000002ed: 	addq	$0x18, %rsp
    000002f1: 	popq	%rbx
    000002f2: 	popq	%rbp
    000002f3: 	popq	%r12
    000002f5: 	popq	%r13
    000002f7: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 759
    000002fc: 	nopl	(%rax) # Size: 4
.Ltmp865:
    00000300: 	movq	%rbx, %rdi
    00000303: 	movq	%rsp, %rsi
    00000306: 	xorl	%edx, %edx
    00000308: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 776
    0000030d: 	movq	%rax, (%rbx)
    00000310: 	movq	%rax, %rdi
    00000313: 	movq	(%rsp), %rax
    00000317: 	movq	%rax, 0x10(%rbx)
.Ltmp871:
    0000031b: 	movq	%r12, %rdx
    0000031e: 	movq	%r13, %rsi
    00000321: 	callq	memcpy@PLT # Offset: 801
    00000326: 	movq	(%rsp), %r12
    0000032a: 	movq	(%rbx), %rdi
    0000032d: 	jmp	.Ltmp869 # Offset: 813
    00000332: 	nopw	(%rax,%rax) # Size: 6
.Ltmp862:
    00000338: 	movq	%rbp, %rsi
    0000033b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000342: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 834
    00000347: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000034e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000355: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000035c: 	jne	.Ltmp870 # Offset: 860
.Ltmp867:
    00000362: 	movq	-0x8(%rdx), %rax
    00000366: 	addq	$0x200, %rax
    0000036c: 	jmp	.Ltmp870 # Offset: 876
    00000371: 	nopl	(%rax) # Size: 7
.Ltmp866:
    00000378: 	testq	%r12, %r12
    0000037b: 	je	.Ltmp869 # Offset: 891
    00000381: 	jmp	.Ltmp871 # Offset: 897
    00000383: 	nopl	(%rax,%rax) # Size: 5
.Ltmp858:
    00000388: 	movsd	0x8(%rbx), %xmm3
    0000038d: 	movsd	0x10(%rbx), %xmm2
    00000392: 	movsd	0x18(%rbx), %xmm4
    00000397: 	movsd	0x20(%rbx), %xmm0
    0000039c: 	jmp	.Ltmp872 # Offset: 924
.Ltmp864:
    000003a1: 	leaq	DATAat0x17018(%rip), %rdi
    000003a8: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 936
.Ltmp868:
    000003ad: 	callq	__stack_chk_fail@PLT # Offset: 941
DWARF CFI Instructions:
    <empty>
End of Function "_Z16test_struct5_argIdEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z17test_struct5_arg2IdEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 117
  State       : disassembled
  Address     : 0xfc00
  Size        : 0x3c4
  MaxSize     : 0x3d0
  Offset      : 0xfc00
  Section     : .text
  Orc Section : .local.text._Z17test_struct5_arg2IdEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0116:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rsi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	movq	%rdi, %rbx
    00000010: 	subq	$0x18, %rsp
    00000014: 	movq	%fs:0x28, %rax
    0000001d: 	movq	%rax, 0x8(%rsp)
    00000022: 	xorl	%eax, %eax
    00000024: 	callq	clock@PLT # Offset: 36
    00000029: 	movupd	(%rbx), %xmm2
    0000002d: 	movupd	0x10(%rbx), %xmm3
    00000032: 	movl	iterations(%rip), %edi
    00000038: 	movq	%rax, start_time(%rip)
    0000003f: 	movapd	%xmm2, %xmm7
    00000043: 	movsd	0x20(%rbx), %xmm10
    00000049: 	unpckhpd	%xmm7, %xmm7
    0000004d: 	movapd	%xmm7, %xmm1
    00000051: 	movapd	%xmm3, %xmm7
    00000055: 	unpckhpd	%xmm7, %xmm7
    00000059: 	testl	%edi, %edi
    0000005b: 	jle	.Ltmp873 # Offset: 91
    00000061: 	movapd	%xmm2, %xmm12
    00000066: 	movapd	%xmm7, %xmm0
    0000006a: 	movapd	%xmm3, %xmm11
    0000006f: 	xorl	%esi, %esi
    00000071: 	movsd	DATAat0x17ce0(%rip), %xmm6
    00000079: 	movsd	DATAat0x17cc0(%rip), %xmm5
    00000081: 	movsd	DATAat0x17ce8(%rip), %xmm4
    00000089: 	movsd	DATAat0x17cd0(%rip), %xmm3
    00000091: 	movsd	DATAat0x17d10(%rip), %xmm2
    00000099: 	movsd	DATAat0x17cd8(%rip), %xmm15
    000000a2: 	movsd	DATAat0x17c98(%rip), %xmm9
    000000ab: 	movsd	DATAat0x17cf8(%rip), %xmm8
    000000b4: 	movsd	DATAat0x17cb8(%rip), %xmm7
    000000bc: 	movsd	DATAat0x17cf0(%rip), %xmm14
    000000c5: 	movsd	DATAat0x17dc0(%rip), %xmm13
    000000ce: 	nop # Size: 2
.Ltmp874:
    000000d0: 	addsd	%xmm9, %xmm10
    000000d5: 	addsd	%xmm6, %xmm12
    000000da: 	addl	$0x1, %esi
    000000dd: 	addsd	%xmm9, %xmm11
    000000e2: 	addsd	%xmm6, %xmm0
    000000e6: 	addsd	%xmm3, %xmm1
    000000ea: 	addsd	%xmm6, %xmm10
    000000ef: 	addsd	%xmm5, %xmm12
    000000f4: 	addsd	%xmm8, %xmm11
    000000f9: 	addsd	%xmm3, %xmm0
    000000fd: 	addsd	%xmm2, %xmm1
    00000101: 	addsd	DATAat0x17cb0(%rip), %xmm1
    00000109: 	addsd	%xmm8, %xmm10
    0000010e: 	addsd	%xmm4, %xmm12
    00000113: 	addsd	%xmm5, %xmm11
    00000118: 	addsd	%xmm7, %xmm0
    0000011c: 	addsd	DATAat0x17d18(%rip), %xmm1
    00000124: 	addsd	%xmm3, %xmm10
    00000129: 	addsd	%xmm15, %xmm12
    0000012e: 	addsd	%xmm4, %xmm11
    00000133: 	addsd	%xmm2, %xmm0
    00000137: 	addsd	DATAat0x17dc8(%rip), %xmm11
    00000140: 	addsd	DATAat0x17cc8(%rip), %xmm11
    00000149: 	addsd	%xmm5, %xmm10
    0000014e: 	addsd	%xmm14, %xmm12
    00000153: 	addsd	%xmm7, %xmm10
    00000158: 	addsd	%xmm13, %xmm12
    0000015d: 	addsd	%xmm4, %xmm10
    00000162: 	addsd	%xmm2, %xmm10
    00000167: 	cmpl	%edi, %esi
    00000169: 	jne	.Ltmp874 # Offset: 361
    0000016f: 	movapd	%xmm12, %xmm2
    00000174: 	movapd	%xmm11, %xmm3
    00000179: 	unpcklpd	%xmm1, %xmm2
    0000017d: 	unpcklpd	%xmm0, %xmm3
.Ltmp873:
    00000181: 	pxor	%xmm0, %xmm0
    00000185: 	movapd	%xmm3, %xmm7
    00000189: 	movapd	%xmm3, %xmm6
    0000018d: 	movups	%xmm3, 0x10(%rbx)
    00000191: 	cvtsi2sd	%edi, %xmm0
    00000195: 	pxor	%xmm1, %xmm1
    00000199: 	movl	$0x1, %edx
    0000019e: 	movups	%xmm2, (%rbx)
    000001a1: 	movsd	DATAat0x17de8(%rip), %xmm3
    000001a9: 	unpckhpd	%xmm7, %xmm7
    000001ad: 	cvtsi2sdl	init_value(%rip), %xmm1
    000001b5: 	movsd	%xmm10, 0x20(%rbx)
    000001bb: 	mulsd	%xmm0, %xmm3
    000001bf: 	addsd	%xmm1, %xmm3
    000001c3: 	ucomisd	%xmm2, %xmm3
    000001c7: 	setp	%cl
    000001ca: 	cmovnel	%edx, %ecx
    000001cd: 	testb	%cl, %cl
    000001cf: 	jne	.Ltmp875 # Offset: 463
    000001d1: 	movsd	DATAat0x17de0(%rip), %xmm3
    000001d9: 	unpckhpd	%xmm2, %xmm2
    000001dd: 	mulsd	%xmm0, %xmm3
    000001e1: 	addsd	%xmm1, %xmm3
    000001e5: 	ucomisd	%xmm2, %xmm3
    000001e9: 	setp	%cl
    000001ec: 	cmovnel	%edx, %ecx
    000001ef: 	testb	%cl, %cl
    000001f1: 	jne	.Ltmp875 # Offset: 497
    000001f3: 	movsd	DATAat0x17e00(%rip), %xmm2
    000001fb: 	mulsd	%xmm0, %xmm2
    000001ff: 	mulsd	DATAat0x17dd0(%rip), %xmm0
    00000207: 	addsd	%xmm1, %xmm2
    0000020b: 	addsd	%xmm1, %xmm0
    0000020f: 	ucomisd	%xmm7, %xmm0
    00000213: 	setp	%cl
    00000216: 	cmovnel	%edx, %ecx
    00000219: 	ucomisd	%xmm2, %xmm6
    0000021d: 	setp	%sil
    00000221: 	cmovnel	%edx, %esi
    00000224: 	orb	%sil, %cl
    00000227: 	jne	.Ltmp875 # Offset: 551
    00000229: 	ucomisd	%xmm2, %xmm10
    0000022e: 	setp	%al
    00000231: 	cmovnel	%edx, %eax
    00000234: 	testb	%al, %al
    00000236: 	je	.Ltmp876 # Offset: 566
.Ltmp875:
    00000238: 	movq	(%rbp), %rdx
    0000023c: 	leaq	DATAat0x17004(%rip), %rsi
    00000243: 	movl	$0x1, %edi
    00000248: 	xorl	%eax, %eax
    0000024a: 	callq	__printf_chk@PLT # Offset: 586
.Ltmp876:
    0000024f: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000256: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    0000025d: 	subq	$0x20, %rax
    00000261: 	cmpq	%rax, %rbx
    00000264: 	je	.Ltmp877 # Offset: 612
    0000026a: 	leaq	0x10(%rbx), %rdi
    0000026e: 	movq	0x8(%rbp), %r12
    00000272: 	movq	%rdi, (%rbx)
    00000275: 	movq	(%rbp), %r13
    00000279: 	movq	%r13, %rax
    0000027c: 	addq	%r12, %rax
    0000027f: 	je	.Ltmp878 # Offset: 639
    00000281: 	testq	%r13, %r13
    00000284: 	je	.Ltmp879 # Offset: 644
.Ltmp878:
    0000028a: 	movq	%r12, (%rsp)
    0000028e: 	cmpq	$0xf, %r12
    00000292: 	ja	.Ltmp880 # Offset: 658
    00000298: 	cmpq	$0x1, %r12
    0000029c: 	jne	.Ltmp881 # Offset: 668
    000002a2: 	movzbl	(%r13), %eax
    000002a7: 	movb	%al, 0x10(%rbx)
.Ltmp884:
    000002aa: 	movq	%r12, 0x8(%rbx)
    000002ae: 	movb	$0x0, (%rdi,%r12)
    000002b3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ba: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002c1: 	addq	$0x20, %rax
    000002c5: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002cc: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002d3: 	je	.Ltmp882 # Offset: 723
.Ltmp885:
    000002d9: 	movq	-0x20(%rax), %rbp
    000002dd: 	callq	clock@PLT # Offset: 733
    000002e2: 	movq	%rax, end_time(%rip)
    000002e9: 	movq	0x8(%rsp), %rdx
    000002ee: 	subq	%fs:0x28, %rdx
    000002f7: 	jne	.Ltmp883 # Offset: 759
    000002fd: 	subq	start_time(%rip), %rax
    00000304: 	pxor	%xmm0, %xmm0
    00000308: 	movq	%rbp, %rdi
    0000030b: 	cvtsi2sd	%rax, %xmm0
    00000310: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000318: 	addq	$0x18, %rsp
    0000031c: 	popq	%rbx
    0000031d: 	popq	%rbp
    0000031e: 	popq	%r12
    00000320: 	popq	%r13
    00000322: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 802
    00000327: 	nopw	(%rax,%rax) # Size: 9
.Ltmp880:
    00000330: 	movq	%rbx, %rdi
    00000333: 	movq	%rsp, %rsi
    00000336: 	xorl	%edx, %edx
    00000338: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 824
    0000033d: 	movq	%rax, (%rbx)
    00000340: 	movq	%rax, %rdi
    00000343: 	movq	(%rsp), %rax
    00000347: 	movq	%rax, 0x10(%rbx)
.Ltmp886:
    0000034b: 	movq	%r12, %rdx
    0000034e: 	movq	%r13, %rsi
    00000351: 	callq	memcpy@PLT # Offset: 849
    00000356: 	movq	(%rsp), %r12
    0000035a: 	movq	(%rbx), %rdi
    0000035d: 	jmp	.Ltmp884 # Offset: 861
    00000362: 	nopw	(%rax,%rax) # Size: 6
.Ltmp877:
    00000368: 	movq	%rbp, %rsi
    0000036b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000372: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 882
    00000377: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000037e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000385: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000038c: 	jne	.Ltmp885 # Offset: 908
.Ltmp882:
    00000392: 	movq	-0x8(%rdx), %rax
    00000396: 	addq	$0x200, %rax
    0000039c: 	jmp	.Ltmp885 # Offset: 924
    000003a1: 	nopl	(%rax) # Size: 7
.Ltmp881:
    000003a8: 	testq	%r12, %r12
    000003ab: 	je	.Ltmp884 # Offset: 939
    000003b1: 	jmp	.Ltmp886 # Offset: 945
.Ltmp883:
    000003b3: 	callq	__stack_chk_fail@PLT # Offset: 947
.Ltmp879:
    000003b8: 	leaq	DATAat0x17018(%rip), %rdi
    000003bf: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 959
DWARF CFI Instructions:
    <empty>
End of Function "_Z17test_struct5_arg2IdEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z20test_struct5_global2Id12test_struct5IdEXadL_Z11dataDouble5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 118
  State       : disassembled
  Address     : 0xffd0
  Size        : 0x3ea
  MaxSize     : 0x3f0
  Offset      : 0xffd0
  Section     : .text
  Orc Section : .local.text._Z20test_struct5_global2Id12test_struct5IdEXadL_Z11dataDouble5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0117:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movapd	dataDouble5(%rip), %xmm2
    0000002e: 	movapd	dataDouble5+16(%rip), %xmm3
    00000036: 	movl	iterations(%rip), %edi
    0000003c: 	movq	%rax, start_time(%rip)
    00000043: 	movsd	dataDouble5+32(%rip), %xmm10
    0000004c: 	movapd	%xmm2, %xmm7
    00000050: 	unpckhpd	%xmm7, %xmm7
    00000054: 	movapd	%xmm7, %xmm1
    00000058: 	movapd	%xmm3, %xmm7
    0000005c: 	unpckhpd	%xmm7, %xmm7
    00000060: 	testl	%edi, %edi
    00000062: 	jle	.Ltmp887 # Offset: 98
    00000068: 	movapd	%xmm2, %xmm12
    0000006d: 	movapd	%xmm7, %xmm0
    00000071: 	movapd	%xmm3, %xmm11
    00000076: 	xorl	%esi, %esi
    00000078: 	movsd	DATAat0x17ce0(%rip), %xmm6
    00000080: 	movsd	DATAat0x17cc0(%rip), %xmm5
    00000088: 	movsd	DATAat0x17ce8(%rip), %xmm4
    00000090: 	movsd	DATAat0x17cd0(%rip), %xmm3
    00000098: 	movsd	DATAat0x17d10(%rip), %xmm2
    000000a0: 	movsd	DATAat0x17cd8(%rip), %xmm15
    000000a9: 	movsd	DATAat0x17c98(%rip), %xmm9
    000000b2: 	movsd	DATAat0x17cf8(%rip), %xmm8
    000000bb: 	movsd	DATAat0x17cb8(%rip), %xmm7
    000000c3: 	movsd	DATAat0x17cf0(%rip), %xmm14
    000000cc: 	movsd	DATAat0x17dc0(%rip), %xmm13
    000000d5: 	nopl	(%rax) # Size: 3
.Ltmp888:
    000000d8: 	addsd	%xmm9, %xmm10
    000000dd: 	addsd	%xmm6, %xmm12
    000000e2: 	addl	$0x1, %esi
    000000e5: 	addsd	%xmm9, %xmm11
    000000ea: 	addsd	%xmm6, %xmm0
    000000ee: 	addsd	%xmm3, %xmm1
    000000f2: 	addsd	%xmm6, %xmm10
    000000f7: 	addsd	%xmm5, %xmm12
    000000fc: 	addsd	%xmm8, %xmm11
    00000101: 	addsd	%xmm3, %xmm0
    00000105: 	addsd	%xmm2, %xmm1
    00000109: 	addsd	DATAat0x17cb0(%rip), %xmm1
    00000111: 	addsd	%xmm8, %xmm10
    00000116: 	addsd	%xmm4, %xmm12
    0000011b: 	addsd	%xmm5, %xmm11
    00000120: 	addsd	%xmm7, %xmm0
    00000124: 	addsd	DATAat0x17d18(%rip), %xmm1
    0000012c: 	addsd	%xmm3, %xmm10
    00000131: 	addsd	%xmm15, %xmm12
    00000136: 	addsd	%xmm4, %xmm11
    0000013b: 	addsd	%xmm2, %xmm0
    0000013f: 	addsd	DATAat0x17dc8(%rip), %xmm11
    00000148: 	addsd	DATAat0x17cc8(%rip), %xmm11
    00000151: 	addsd	%xmm5, %xmm10
    00000156: 	addsd	%xmm14, %xmm12
    0000015b: 	addsd	%xmm7, %xmm10
    00000160: 	addsd	%xmm13, %xmm12
    00000165: 	addsd	%xmm4, %xmm10
    0000016a: 	addsd	%xmm2, %xmm10
    0000016f: 	cmpl	%edi, %esi
    00000171: 	jne	.Ltmp888 # Offset: 369
    00000177: 	movapd	%xmm12, %xmm2
    0000017c: 	movapd	%xmm11, %xmm3
    00000181: 	movapd	%xmm12, %xmm5
    00000186: 	unpcklpd	%xmm1, %xmm2
    0000018a: 	unpcklpd	%xmm0, %xmm3
    0000018e: 	movapd	%xmm0, %xmm4
    00000192: 	movapd	%xmm11, %xmm6
.Ltmp901:
    00000197: 	pxor	%xmm0, %xmm0
    0000019b: 	movaps	%xmm3, dataDouble5+16(%rip)
    000001a2: 	pxor	%xmm1, %xmm1
    000001a6: 	movsd	DATAat0x17de8(%rip), %xmm3
    000001ae: 	cvtsi2sd	%edi, %xmm0
    000001b2: 	movl	$0x1, %edx
    000001b7: 	movaps	%xmm2, dataDouble5(%rip)
    000001be: 	cvtsi2sdl	init_value(%rip), %xmm1
    000001c6: 	movsd	%xmm10, dataDouble5+32(%rip)
    000001cf: 	mulsd	%xmm0, %xmm3
    000001d3: 	addsd	%xmm1, %xmm3
    000001d7: 	ucomisd	%xmm5, %xmm3
    000001db: 	setp	%cl
    000001de: 	cmovnel	%edx, %ecx
    000001e1: 	testb	%cl, %cl
    000001e3: 	jne	.Ltmp889 # Offset: 483
    000001e5: 	movsd	DATAat0x17de0(%rip), %xmm3
    000001ed: 	unpckhpd	%xmm2, %xmm2
    000001f1: 	mulsd	%xmm0, %xmm3
    000001f5: 	addsd	%xmm1, %xmm3
    000001f9: 	ucomisd	%xmm2, %xmm3
    000001fd: 	setp	%cl
    00000200: 	cmovnel	%edx, %ecx
    00000203: 	testb	%cl, %cl
    00000205: 	jne	.Ltmp889 # Offset: 517
    00000207: 	movsd	DATAat0x17e00(%rip), %xmm2
    0000020f: 	mulsd	%xmm0, %xmm2
    00000213: 	mulsd	DATAat0x17dd0(%rip), %xmm0
    0000021b: 	addsd	%xmm1, %xmm2
    0000021f: 	addsd	%xmm1, %xmm0
    00000223: 	ucomisd	%xmm4, %xmm0
    00000227: 	setp	%cl
    0000022a: 	cmovnel	%edx, %ecx
    0000022d: 	ucomisd	%xmm2, %xmm6
    00000231: 	setp	%sil
    00000235: 	cmovnel	%edx, %esi
    00000238: 	orb	%sil, %cl
    0000023b: 	jne	.Ltmp889 # Offset: 571
    0000023d: 	ucomisd	%xmm2, %xmm10
    00000242: 	setp	%al
    00000245: 	cmovnel	%edx, %eax
    00000248: 	testb	%al, %al
    0000024a: 	je	.Ltmp890 # Offset: 586
.Ltmp889:
    0000024c: 	movq	(%rbp), %rdx
    00000250: 	leaq	DATAat0x17004(%rip), %rsi
    00000257: 	movl	$0x1, %edi
    0000025c: 	xorl	%eax, %eax
    0000025e: 	callq	__printf_chk@PLT # Offset: 606
.Ltmp890:
    00000263: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000026a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000271: 	subq	$0x20, %rax
    00000275: 	cmpq	%rax, %rbx
    00000278: 	je	.Ltmp891 # Offset: 632
    0000027e: 	leaq	0x10(%rbx), %rdi
    00000282: 	movq	0x8(%rbp), %r12
    00000286: 	movq	%rdi, (%rbx)
    00000289: 	movq	(%rbp), %r13
    0000028d: 	movq	%r13, %rax
    00000290: 	addq	%r12, %rax
    00000293: 	je	.Ltmp892 # Offset: 659
    00000295: 	testq	%r13, %r13
    00000298: 	je	.Ltmp893 # Offset: 664
.Ltmp892:
    0000029e: 	movq	%r12, (%rsp)
    000002a2: 	cmpq	$0xf, %r12
    000002a6: 	ja	.Ltmp894 # Offset: 678
    000002ac: 	cmpq	$0x1, %r12
    000002b0: 	jne	.Ltmp895 # Offset: 688
    000002b6: 	movzbl	(%r13), %eax
    000002bb: 	movb	%al, 0x10(%rbx)
.Ltmp898:
    000002be: 	movq	%r12, 0x8(%rbx)
    000002c2: 	movb	$0x0, (%rdi,%r12)
    000002c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002ce: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002d5: 	addq	$0x20, %rax
    000002d9: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002e0: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002e7: 	je	.Ltmp896 # Offset: 743
.Ltmp899:
    000002ed: 	movq	-0x20(%rax), %rbp
    000002f1: 	callq	clock@PLT # Offset: 753
    000002f6: 	movq	%rax, end_time(%rip)
    000002fd: 	movq	0x8(%rsp), %rdx
    00000302: 	subq	%fs:0x28, %rdx
    0000030b: 	jne	.Ltmp897 # Offset: 779
    00000311: 	subq	start_time(%rip), %rax
    00000318: 	pxor	%xmm0, %xmm0
    0000031c: 	movq	%rbp, %rdi
    0000031f: 	cvtsi2sd	%rax, %xmm0
    00000324: 	divsd	DATAat0x17ca0(%rip), %xmm0
    0000032c: 	addq	$0x18, %rsp
    00000330: 	popq	%rbx
    00000331: 	popq	%rbp
    00000332: 	popq	%r12
    00000334: 	popq	%r13
    00000336: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 822
    0000033b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp894:
    00000340: 	movq	%rbx, %rdi
    00000343: 	movq	%rsp, %rsi
    00000346: 	xorl	%edx, %edx
    00000348: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 840
    0000034d: 	movq	%rax, (%rbx)
    00000350: 	movq	%rax, %rdi
    00000353: 	movq	(%rsp), %rax
    00000357: 	movq	%rax, 0x10(%rbx)
.Ltmp900:
    0000035b: 	movq	%r12, %rdx
    0000035e: 	movq	%r13, %rsi
    00000361: 	callq	memcpy@PLT # Offset: 865
    00000366: 	movq	(%rsp), %r12
    0000036a: 	movq	(%rbx), %rdi
    0000036d: 	jmp	.Ltmp898 # Offset: 877
    00000372: 	nopw	(%rax,%rax) # Size: 6
.Ltmp891:
    00000378: 	movq	%rbp, %rsi
    0000037b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000382: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 898
    00000387: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000038e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000395: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000039c: 	jne	.Ltmp899 # Offset: 924
.Ltmp896:
    000003a2: 	movq	-0x8(%rdx), %rax
    000003a6: 	addq	$0x200, %rax
    000003ac: 	jmp	.Ltmp899 # Offset: 940
    000003b1: 	nopl	(%rax) # Size: 7
.Ltmp895:
    000003b8: 	testq	%r12, %r12
    000003bb: 	je	.Ltmp898 # Offset: 955
    000003c1: 	jmp	.Ltmp900 # Offset: 961
    000003c3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp887:
    000003c8: 	movapd	%xmm2, %xmm5
    000003cc: 	movapd	%xmm7, %xmm4
    000003d0: 	movapd	%xmm3, %xmm6
    000003d4: 	jmp	.Ltmp901 # Offset: 980
.Ltmp893:
    000003d9: 	leaq	DATAat0x17018(%rip), %rdi
    000003e0: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 992
.Ltmp897:
    000003e5: 	callq	__stack_chk_fail@PLT # Offset: 997
DWARF CFI Instructions:
    <empty>
End of Function "_Z20test_struct5_global2Id12test_struct5IdEXadL_Z11dataDouble5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z19test_struct5_globalId12test_struct5IdEXadL_Z11dataDouble5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 119
  State       : disassembled
  Address     : 0x103c0
  Size        : 0x3ce
  MaxSize     : 0x3d0
  Offset      : 0x103c0
  Section     : .text
  Orc Section : .local.text._Z19test_struct5_globalId12test_struct5IdEXadL_Z11dataDouble5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0118:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x8(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movl	iterations(%rip), %edx
    0000002c: 	movsd	dataDouble5(%rip), %xmm1
    00000034: 	movq	%rax, start_time(%rip)
    0000003b: 	testl	%edx, %edx
    0000003d: 	jle	.Ltmp902 # Offset: 61
    00000043: 	movsd	dataDouble5+16(%rip), %xmm2
    0000004b: 	movsd	dataDouble5+32(%rip), %xmm0
    00000053: 	xorl	%eax, %eax
    00000055: 	movsd	dataDouble5+8(%rip), %xmm3
    0000005d: 	movsd	dataDouble5+24(%rip), %xmm4
    00000065: 	movsd	DATAat0x17ce8(%rip), %xmm7
    0000006d: 	movsd	DATAat0x17ce0(%rip), %xmm9
    00000076: 	movsd	DATAat0x17cd0(%rip), %xmm6
    0000007e: 	movsd	DATAat0x17d10(%rip), %xmm5
    00000086: 	movsd	DATAat0x17cc0(%rip), %xmm8
    0000008f: 	movsd	DATAat0x17c98(%rip), %xmm12
    00000098: 	movsd	DATAat0x17cf8(%rip), %xmm11
    000000a1: 	movsd	DATAat0x17cb8(%rip), %xmm10
    000000aa: 	movsd	DATAat0x17cc8(%rip), %xmm15
    000000b3: 	movsd	DATAat0x17cb0(%rip), %xmm14
    000000bc: 	movsd	DATAat0x17d18(%rip), %xmm13
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp903:
    000000c8: 	addsd	%xmm12, %xmm0
    000000cd: 	addsd	%xmm12, %xmm2
    000000d2: 	addl	$0x1, %eax
    000000d5: 	addsd	%xmm6, %xmm3
    000000d9: 	addsd	%xmm9, %xmm4
    000000de: 	addsd	%xmm9, %xmm1
    000000e3: 	addsd	%xmm9, %xmm0
    000000e8: 	addsd	%xmm11, %xmm2
    000000ed: 	addsd	%xmm5, %xmm3
    000000f1: 	addsd	%xmm6, %xmm4
    000000f5: 	addsd	%xmm8, %xmm1
    000000fa: 	addsd	%xmm11, %xmm0
    000000ff: 	addsd	%xmm8, %xmm2
    00000104: 	addsd	%xmm10, %xmm4
    00000109: 	addsd	%xmm14, %xmm3
    0000010e: 	addsd	%xmm7, %xmm1
    00000112: 	addsd	DATAat0x17cd8(%rip), %xmm1
    0000011a: 	addsd	%xmm6, %xmm0
    0000011e: 	addsd	%xmm7, %xmm2
    00000122: 	addsd	DATAat0x17dc8(%rip), %xmm2
    0000012a: 	addsd	DATAat0x17cf0(%rip), %xmm1
    00000132: 	addsd	%xmm5, %xmm4
    00000136: 	addsd	DATAat0x17dc0(%rip), %xmm1
    0000013e: 	addsd	%xmm8, %xmm0
    00000143: 	addsd	%xmm13, %xmm3
    00000148: 	addsd	%xmm15, %xmm2
    0000014d: 	addsd	%xmm10, %xmm0
    00000152: 	addsd	%xmm7, %xmm0
    00000156: 	addsd	%xmm5, %xmm0
    0000015a: 	cmpl	%edx, %eax
    0000015c: 	jne	.Ltmp903 # Offset: 348
    00000162: 	movapd	%xmm1, %xmm5
    00000166: 	movsd	%xmm0, dataDouble5+32(%rip)
    0000016e: 	unpcklpd	%xmm3, %xmm5
    00000172: 	movaps	%xmm5, dataDouble5(%rip)
    00000179: 	movapd	%xmm2, %xmm5
    0000017d: 	unpcklpd	%xmm4, %xmm5
    00000181: 	movaps	%xmm5, dataDouble5+16(%rip)
.Ltmp916:
    00000188: 	pxor	%xmm5, %xmm5
    0000018c: 	pxor	%xmm6, %xmm6
    00000190: 	movl	$0x1, %eax
    00000195: 	movsd	DATAat0x17de8(%rip), %xmm7
    0000019d: 	cvtsi2sd	%edx, %xmm5
    000001a1: 	cvtsi2sdl	init_value(%rip), %xmm6
    000001a9: 	mulsd	%xmm5, %xmm7
    000001ad: 	addsd	%xmm6, %xmm7
    000001b1: 	ucomisd	%xmm1, %xmm7
    000001b5: 	setp	%dl
    000001b8: 	cmovnel	%eax, %edx
    000001bb: 	testb	%dl, %dl
    000001bd: 	jne	.Ltmp904 # Offset: 445
    000001bf: 	movsd	DATAat0x17de0(%rip), %xmm1
    000001c7: 	mulsd	%xmm5, %xmm1
    000001cb: 	addsd	%xmm6, %xmm1
    000001cf: 	ucomisd	%xmm3, %xmm1
    000001d3: 	setp	%dl
    000001d6: 	cmovnel	%eax, %edx
    000001d9: 	testb	%dl, %dl
    000001db: 	jne	.Ltmp904 # Offset: 475
    000001dd: 	movsd	DATAat0x17e00(%rip), %xmm1
    000001e5: 	mulsd	%xmm5, %xmm1
    000001e9: 	mulsd	DATAat0x17dd0(%rip), %xmm5
    000001f1: 	addsd	%xmm6, %xmm1
    000001f5: 	addsd	%xmm6, %xmm5
    000001f9: 	ucomisd	%xmm4, %xmm5
    000001fd: 	setp	%dl
    00000200: 	cmovnel	%eax, %edx
    00000203: 	ucomisd	%xmm2, %xmm1
    00000207: 	setp	%cl
    0000020a: 	cmovnel	%eax, %ecx
    0000020d: 	orb	%cl, %dl
    0000020f: 	jne	.Ltmp904 # Offset: 527
    00000211: 	ucomisd	%xmm0, %xmm1
    00000215: 	setp	%dl
    00000218: 	cmovel	%edx, %eax
    0000021b: 	testb	%al, %al
    0000021d: 	je	.Ltmp905 # Offset: 541
.Ltmp904:
    0000021f: 	movq	(%rbp), %rdx
    00000223: 	leaq	DATAat0x17004(%rip), %rsi
    0000022a: 	movl	$0x1, %edi
    0000022f: 	xorl	%eax, %eax
    00000231: 	callq	__printf_chk@PLT # Offset: 561
.Ltmp905:
    00000236: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000023d: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000244: 	subq	$0x20, %rax
    00000248: 	cmpq	%rax, %rbx
    0000024b: 	je	.Ltmp906 # Offset: 587
    00000251: 	leaq	0x10(%rbx), %rdi
    00000255: 	movq	0x8(%rbp), %r12
    00000259: 	movq	%rdi, (%rbx)
    0000025c: 	movq	(%rbp), %r13
    00000260: 	movq	%r13, %rax
    00000263: 	addq	%r12, %rax
    00000266: 	je	.Ltmp907 # Offset: 614
    00000268: 	testq	%r13, %r13
    0000026b: 	je	.Ltmp908 # Offset: 619
.Ltmp907:
    00000271: 	movq	%r12, (%rsp)
    00000275: 	cmpq	$0xf, %r12
    00000279: 	ja	.Ltmp909 # Offset: 633
    0000027f: 	cmpq	$0x1, %r12
    00000283: 	jne	.Ltmp910 # Offset: 643
    00000289: 	movzbl	(%r13), %eax
    0000028e: 	movb	%al, 0x10(%rbx)
.Ltmp913:
    00000291: 	movq	%r12, 0x8(%rbx)
    00000295: 	movb	$0x0, (%rdi,%r12)
    0000029a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002a1: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002a8: 	addq	$0x20, %rax
    000002ac: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000002b3: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002ba: 	je	.Ltmp911 # Offset: 698
.Ltmp914:
    000002c0: 	movq	-0x20(%rax), %rbp
    000002c4: 	callq	clock@PLT # Offset: 708
    000002c9: 	movq	%rax, end_time(%rip)
    000002d0: 	movq	0x8(%rsp), %rdx
    000002d5: 	subq	%fs:0x28, %rdx
    000002de: 	jne	.Ltmp912 # Offset: 734
    000002e4: 	subq	start_time(%rip), %rax
    000002eb: 	pxor	%xmm0, %xmm0
    000002ef: 	movq	%rbp, %rdi
    000002f2: 	cvtsi2sd	%rax, %xmm0
    000002f7: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000002ff: 	addq	$0x18, %rsp
    00000303: 	popq	%rbx
    00000304: 	popq	%rbp
    00000305: 	popq	%r12
    00000307: 	popq	%r13
    00000309: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 777
    0000030e: 	nop # Size: 2
.Ltmp909:
    00000310: 	movq	%rbx, %rdi
    00000313: 	movq	%rsp, %rsi
    00000316: 	xorl	%edx, %edx
    00000318: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 792
    0000031d: 	movq	%rax, (%rbx)
    00000320: 	movq	%rax, %rdi
    00000323: 	movq	(%rsp), %rax
    00000327: 	movq	%rax, 0x10(%rbx)
.Ltmp915:
    0000032b: 	movq	%r12, %rdx
    0000032e: 	movq	%r13, %rsi
    00000331: 	callq	memcpy@PLT # Offset: 817
    00000336: 	movq	(%rsp), %r12
    0000033a: 	movq	(%rbx), %rdi
    0000033d: 	jmp	.Ltmp913 # Offset: 829
    00000342: 	nopw	(%rax,%rax) # Size: 6
.Ltmp906:
    00000348: 	movq	%rbp, %rsi
    0000034b: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000352: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 850
    00000357: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000035e: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000365: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000036c: 	jne	.Ltmp914 # Offset: 876
.Ltmp911:
    00000372: 	movq	-0x8(%rdx), %rax
    00000376: 	addq	$0x200, %rax
    0000037c: 	jmp	.Ltmp914 # Offset: 892
    00000381: 	nopl	(%rax) # Size: 7
.Ltmp910:
    00000388: 	testq	%r12, %r12
    0000038b: 	je	.Ltmp913 # Offset: 907
    00000391: 	jmp	.Ltmp915 # Offset: 913
    00000393: 	nopl	(%rax,%rax) # Size: 5
.Ltmp902:
    00000398: 	movsd	dataDouble5+8(%rip), %xmm3
    000003a0: 	movsd	dataDouble5+16(%rip), %xmm2
    000003a8: 	movsd	dataDouble5+24(%rip), %xmm4
    000003b0: 	movsd	dataDouble5+32(%rip), %xmm0
    000003b8: 	jmp	.Ltmp916 # Offset: 952
.Ltmp908:
    000003bd: 	leaq	DATAat0x17018(%rip), %rdi
    000003c4: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 964
.Ltmp912:
    000003c9: 	callq	__stack_chk_fail@PLT # Offset: 969
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct5_globalId12test_struct5IdEXadL_Z11dataDouble5EEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_struct5_localIsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 120
  State       : disassembled
  Address     : 0x10790
  Size        : 0x23d
  MaxSize     : 0x240
  Offset      : 0x10790
  Section     : .text
  Orc Section : .local.text._Z18test_struct5_localIsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0119:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movl	init_value(%rip), %ebx
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x8(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	movl	iterations(%rip), %edx
    00000032: 	movq	%rax, start_time(%rip)
    00000039: 	testl	%edx, %edx
    0000003b: 	jle	.Ltmp917 # Offset: 59
    00000041: 	leal	-0x1(%rdx), %eax
    00000044: 	leal	(%rax,%rax,2), %r12d
    00000048: 	leal	(%rax,%rax,4), %ecx
    0000004b: 	leal	(%rax,%r12,4), %r12d
    0000004f: 	leal	(%rax,%rax,8), %eax
    00000052: 	leal	0x34(%rbx,%r12,4), %r12d
    00000057: 	leal	0x14(%rbx,%rcx,4), %edi
    0000005b: 	leal	0x24(%rbx,%rax,4), %eax
    0000005f: 	leal	0x28(%rbx,%rcx,8), %ebx
.Ltmp930:
    00000063: 	leal	(%rdx,%rdx,2), %esi
    00000066: 	shll	$0x2, %esi
    00000069: 	leal	(%rsi,%rdx), %ecx
    0000006c: 	shll	$0x2, %ecx
    0000006f: 	addw	init_value(%rip), %cx
    00000076: 	movl	%ecx, %r8d
    00000079: 	subl	%esi, %r8d
    0000007c: 	cmpw	%r12w, %cx
    00000080: 	jne	.Ltmp918 # Offset: 128
    00000082: 	cmpw	%bx, %r8w
    00000086: 	jne	.Ltmp918 # Offset: 134
    00000088: 	leal	(,%rdx,4), %ecx
    0000008f: 	shll	$0x4, %edx
    00000092: 	subl	%ecx, %r8d
    00000095: 	movl	%r8d, %ecx
    00000098: 	subl	%edx, %ecx
    0000009a: 	cmpw	%di, %cx
    0000009d: 	jne	.Ltmp918 # Offset: 157
    0000009f: 	cmpw	%ax, %r8w
    000000a3: 	je	.Ltmp919 # Offset: 163
.Ltmp918:
    000000a5: 	movq	(%rbp), %rdx
    000000a9: 	leaq	DATAat0x17004(%rip), %rsi
    000000b0: 	movl	$0x1, %edi
    000000b5: 	xorl	%eax, %eax
    000000b7: 	callq	__printf_chk@PLT # Offset: 183
.Ltmp919:
    000000bc: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000c3: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000ca: 	subq	$0x20, %rax
    000000ce: 	cmpq	%rax, %rbx
    000000d1: 	je	.Ltmp920 # Offset: 209
    000000d7: 	leaq	0x10(%rbx), %rdi
    000000db: 	movq	0x8(%rbp), %r12
    000000df: 	movq	%rdi, (%rbx)
    000000e2: 	movq	(%rbp), %r13
    000000e6: 	movq	%r13, %rax
    000000e9: 	addq	%r12, %rax
    000000ec: 	je	.Ltmp921 # Offset: 236
    000000ee: 	testq	%r13, %r13
    000000f1: 	je	.Ltmp922 # Offset: 241
.Ltmp921:
    000000f7: 	movq	%r12, (%rsp)
    000000fb: 	cmpq	$0xf, %r12
    000000ff: 	ja	.Ltmp923 # Offset: 255
    00000105: 	cmpq	$0x1, %r12
    00000109: 	jne	.Ltmp924 # Offset: 265
    0000010f: 	movzbl	(%r13), %eax
    00000114: 	movb	%al, 0x10(%rbx)
.Ltmp927:
    00000117: 	movq	%r12, 0x8(%rbx)
    0000011b: 	movb	$0x0, (%rdi,%r12)
    00000120: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000127: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000012e: 	addq	$0x20, %rax
    00000132: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000139: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000140: 	je	.Ltmp925 # Offset: 320
.Ltmp928:
    00000146: 	movq	-0x20(%rax), %rbp
    0000014a: 	callq	clock@PLT # Offset: 330
    0000014f: 	movq	%rax, end_time(%rip)
    00000156: 	movq	0x8(%rsp), %rdx
    0000015b: 	subq	%fs:0x28, %rdx
    00000164: 	jne	.Ltmp926 # Offset: 356
    0000016a: 	subq	start_time(%rip), %rax
    00000171: 	pxor	%xmm0, %xmm0
    00000175: 	movq	%rbp, %rdi
    00000178: 	cvtsi2sd	%rax, %xmm0
    0000017d: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000185: 	addq	$0x18, %rsp
    00000189: 	popq	%rbx
    0000018a: 	popq	%rbp
    0000018b: 	popq	%r12
    0000018d: 	popq	%r13
    0000018f: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 399
    00000194: 	nopl	(%rax) # Size: 4
.Ltmp923:
    00000198: 	movq	%rbx, %rdi
    0000019b: 	movq	%rsp, %rsi
    0000019e: 	xorl	%edx, %edx
    000001a0: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 416
    000001a5: 	movq	%rax, (%rbx)
    000001a8: 	movq	%rax, %rdi
    000001ab: 	movq	(%rsp), %rax
    000001af: 	movq	%rax, 0x10(%rbx)
.Ltmp929:
    000001b3: 	movq	%r12, %rdx
    000001b6: 	movq	%r13, %rsi
    000001b9: 	callq	memcpy@PLT # Offset: 441
    000001be: 	movq	(%rsp), %r12
    000001c2: 	movq	(%rbx), %rdi
    000001c5: 	jmp	.Ltmp927 # Offset: 453
    000001ca: 	nopw	(%rax,%rax) # Size: 6
.Ltmp920:
    000001d0: 	movq	%rbp, %rsi
    000001d3: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001da: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 474
    000001df: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001e6: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000001ed: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001f4: 	jne	.Ltmp928 # Offset: 500
.Ltmp925:
    000001fa: 	movq	-0x8(%rdx), %rax
    000001fe: 	addq	$0x200, %rax
    00000204: 	jmp	.Ltmp928 # Offset: 516
    00000209: 	nopl	(%rax) # Size: 7
.Ltmp924:
    00000210: 	testq	%r12, %r12
    00000213: 	je	.Ltmp927 # Offset: 531
    00000219: 	jmp	.Ltmp929 # Offset: 537
    0000021b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp917:
    00000220: 	movl	%ebx, %r12d
    00000223: 	movl	%ebx, %edi
    00000225: 	movl	%ebx, %eax
    00000227: 	jmp	.Ltmp930 # Offset: 551
.Ltmp922:
    0000022c: 	leaq	DATAat0x17018(%rip), %rdi
    00000233: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 563
.Ltmp926:
    00000238: 	callq	__stack_chk_fail@PLT # Offset: 568
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_struct5_localIsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIsEvv" after disassembly {
  Number      : 121
  State       : disassembled
  Address     : 0x109d0
  Size        : 0xe9f
  MaxSize     : 0xea0
  Offset      : 0x109d0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIsEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0120:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x17968(%rip), %rsi
    0000000d: 	pushq	%r14
    0000000f: 	pushq	%r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0xe8, %rsp
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0xd8(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	leaq	0x90(%rsp), %rax
    00000037: 	movq	%rax, %rdi
    0000003a: 	movq	%rax, 0x8(%rsp)
    0000003f: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 63
    00000044: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm6
    0000004c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000053: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm3
    0000005b: 	movq	_Z7gLabelsB5cxx11+56(%rip), %r14
    00000062: 	movhlps	%xmm6, %xmm7
    00000065: 	movq	%rax, 0x20(%rsp)
    0000006a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    00000071: 	movq	%xmm7, %rcx
    00000076: 	movaps	%xmm3, 0x30(%rsp)
    0000007b: 	movq	%xmm3, %rbp
    00000080: 	leaq	0x8(%rcx), %r12
    00000084: 	movq	%rax, 0x10(%rsp)
    00000089: 	movaps	%xmm6, 0x50(%rsp)
    0000008e: 	movq	%xmm7, 0x48(%rsp)
    00000094: 	movq	%xmm6, 0x40(%rsp)
    0000009a: 	cmpq	%r12, %rax
    0000009d: 	jbe	.Ltmp931 # Offset: 157
    0000009f: 	movq	%r12, %r13
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp934:
    000000a8: 	movq	(%r13), %r15
    000000ac: 	leaq	0x200(%r15), %rbx
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp933:
    000000b8: 	movq	(%r15), %rdi
    000000bb: 	leaq	0x10(%r15), %rdx
    000000bf: 	cmpq	%rdx, %rdi
    000000c2: 	je	.Ltmp932 # Offset: 194
    000000c8: 	movq	0x10(%r15), %rax
    000000cc: 	addq	$0x20, %r15
    000000d0: 	leaq	0x1(%rax), %rsi
    000000d4: 	callq	_ZdlPvm@PLT # Offset: 212
    000000d9: 	cmpq	%rbx, %r15
    000000dc: 	jne	.Ltmp933 # Offset: 220
    000000de: 	addq	$0x8, %r13
    000000e2: 	cmpq	%r13, 0x10(%rsp)
    000000e7: 	ja	.Ltmp934 # Offset: 231
.Ltmp931:
    000000e9: 	movq	0x48(%rsp), %rcx
    000000ee: 	cmpq	%rcx, 0x10(%rsp)
    000000f3: 	je	.Ltmp935 # Offset: 243
    000000f9: 	cmpq	%rbp, 0x40(%rsp)
    000000fe: 	je	.Ltmp936 # Offset: 254
.Ltmp938:
    00000100: 	movq	(%rbp), %rdi
    00000104: 	leaq	0x10(%rbp), %rax
    00000108: 	cmpq	%rax, %rdi
    0000010b: 	je	.Ltmp937 # Offset: 267
    00000111: 	movq	0x10(%rbp), %rax
    00000115: 	addq	$0x20, %rbp
    00000119: 	leaq	0x1(%rax), %rsi
    0000011d: 	callq	_ZdlPvm@PLT # Offset: 285
    00000122: 	cmpq	%rbp, 0x40(%rsp)
    00000127: 	jne	.Ltmp938 # Offset: 295
.Ltmp936:
    00000129: 	cmpq	%r14, 0x20(%rsp)
    0000012e: 	je	.Ltmp939 # Offset: 302
.Ltmp941:
    00000130: 	movq	(%r14), %rdi
    00000133: 	leaq	0x10(%r14), %rax
    00000137: 	cmpq	%rax, %rdi
    0000013a: 	je	.Ltmp940 # Offset: 314
    00000140: 	movq	0x10(%r14), %rax
    00000144: 	addq	$0x20, %r14
    00000148: 	leaq	0x1(%rax), %rsi
    0000014c: 	callq	_ZdlPvm@PLT # Offset: 332
    00000151: 	cmpq	%r14, 0x20(%rsp)
    00000156: 	jne	.Ltmp941 # Offset: 342
.Ltmp939:
    00000158: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    0000015f: 	leaq	0x8(%rax), %rbx
    00000163: 	cmpq	%r12, %rbx
    00000166: 	jbe	.Ltmp942 # Offset: 358
    00000168: 	nopl	(%rax,%rax) # Size: 8
.Ltmp943:
    00000170: 	movq	(%r12), %rdi
    00000174: 	movl	$0x200, %esi
    00000179: 	addq	$0x8, %r12
    0000017d: 	callq	_ZdlPvm@PLT # Offset: 381
    00000182: 	cmpq	%r12, %rbx
    00000185: 	ja	.Ltmp943 # Offset: 389
.Ltmp942:
    00000187: 	movl	init_value(%rip), %ebx
    0000018d: 	movdqa	0x30(%rsp), %xmm5
    00000193: 	leaq	0xb0(%rsp), %rbp
    0000019b: 	movdqa	0x50(%rsp), %xmm7
    000001a1: 	movq	0x8(%rsp), %rsi
    000001a6: 	movq	%rbp, %rdi
    000001a9: 	movd	%ebx, %xmm4
    000001ad: 	movl	%ebx, %edx
    000001af: 	movzwl	%bx, %eax
    000001b2: 	movw	%bx, 0x84(%rsp)
    000001ba: 	movdqa	%xmm4, %xmm0
    000001be: 	movaps	%xmm4, 0x10(%rsp)
    000001c3: 	punpcklwd	0x10(%rsp), %xmm0
    000001c9: 	shll	$0x10, %edx
    000001cc: 	orl	%edx, %eax
    000001ce: 	leaq	DATAat0x17970(%rip), %rdx
    000001d5: 	movaps	%xmm5, _Z7gLabelsB5cxx11+48(%rip)
    000001dc: 	pshufd	$0x0, %xmm0, %xmm0
    000001e1: 	movl	%eax, 0x80(%rsp)
    000001e8: 	movaps	%xmm7, _Z7gLabelsB5cxx11+64(%rip)
    000001ef: 	movaps	%xmm0, 0x70(%rsp)
    000001f4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 500
    000001f9: 	callq	clock@PLT # Offset: 505
    000001fe: 	movl	iterations(%rip), %edx
    00000204: 	movdqa	0x10(%rsp), %xmm4
    0000020a: 	leaq	0x70(%rsp), %r14
    0000020f: 	movq	%rax, start_time(%rip)
    00000216: 	leal	(%rdx,%rdx), %edi
    00000219: 	movdqa	%xmm4, %xmm1
    0000021d: 	movd	%edx, %xmm0
    00000221: 	movl	%edx, %r8d
    00000224: 	leal	(%rdi,%rdx), %esi
    00000227: 	punpcklwd	%xmm4, %xmm1
    0000022b: 	shll	$0x4, %r8d
    0000022f: 	punpcklwd	%xmm0, %xmm0
    00000233: 	leal	(,%rsi,4), %ecx
    0000023a: 	pshufd	$0x0, %xmm1, %xmm1
    0000023f: 	pshufd	$0x0, %xmm0, %xmm0
    00000244: 	pmullw	DATAat0x17d90(%rip), %xmm0
    0000024c: 	leal	(%rcx,%rdx), %eax
    0000024f: 	paddw	%xmm1, %xmm0
    00000253: 	leal	(%rbx,%rax,4), %eax
    00000256: 	movaps	%xmm0, 0x70(%rsp)
    0000025b: 	subl	%ecx, %eax
    0000025d: 	leal	(,%rdx,4), %ecx
    00000264: 	subl	%ecx, %eax
    00000266: 	addl	%edx, %ecx
    00000268: 	leal	(%rdx,%rcx,2), %r9d
    0000026c: 	subl	%r8d, %eax
    0000026f: 	subl	%edx, %r8d
    00000272: 	subl	%r9d, %eax
    00000275: 	leal	(%rax,%rsi,2), %eax
    00000278: 	leal	(%rsi,%rsi,8), %esi
    0000027b: 	addl	%r8d, %eax
    0000027e: 	addl	%esi, %eax
    00000280: 	movl	%eax, %esi
    00000282: 	movzwl	%ax, %eax
    00000285: 	subl	%edi, %esi
    00000287: 	movq	%r14, %rdi
    0000028a: 	movl	%esi, %edx
    0000028c: 	addl	%esi, %ecx
    0000028e: 	movq	%rbp, %rsi
    00000291: 	shll	$0x10, %edx
    00000294: 	movw	%cx, 0x84(%rsp)
    0000029c: 	orl	%edx, %eax
    0000029e: 	movl	%eax, 0x80(%rsp)
    000002a5: 	callq	_Z12check11_sumsIsEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 677
    000002aa: 	movq	%rbp, %rdi
    000002ad: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 685
    000002b2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002b9: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002c0: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002c7: 	je	.Ltmp944 # Offset: 711
.Ltmp974:
    000002cd: 	movq	-0x20(%rax), %r12
    000002d1: 	callq	clock@PLT # Offset: 721
    000002d6: 	pxor	%xmm0, %xmm0
    000002da: 	movq	%rax, end_time(%rip)
    000002e1: 	movq	%r12, %rdi
    000002e4: 	subq	start_time(%rip), %rax
    000002eb: 	cvtsi2sd	%rax, %xmm0
    000002f0: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000002f8: 	callq	_Z13record_resultdPKc # Offset: 760
    000002fd: 	movq	0xb0(%rsp), %rdi
    00000305: 	leaq	0xc0(%rsp), %rbx
    0000030d: 	cmpq	%rbx, %rdi
    00000310: 	je	.Ltmp945 # Offset: 784
    00000312: 	movq	0xc0(%rsp), %rax
    0000031a: 	leaq	0x1(%rax), %rsi
    0000031e: 	callq	_ZdlPvm@PLT # Offset: 798
.Ltmp945:
    00000323: 	movl	init_value(%rip), %r13d
    0000032a: 	movq	0x8(%rsp), %rsi
    0000032f: 	leaq	DATAat0x179a0(%rip), %rdx
    00000336: 	movq	%rbp, %rdi
    00000339: 	movd	%r13d, %xmm7
    0000033e: 	movl	%r13d, %eax
    00000341: 	movzwl	%r13w, %r12d
    00000345: 	movl	%r13d, %r15d
    00000348: 	movdqa	%xmm7, %xmm0
    0000034c: 	movaps	%xmm7, 0x20(%rsp)
    00000351: 	shll	$0x10, %eax
    00000354: 	punpcklwd	0x20(%rsp), %xmm0
    0000035a: 	movw	%r13w, 0x84(%rsp)
    00000363: 	orl	%eax, %r12d
    00000366: 	pshufd	$0x0, %xmm0, %xmm0
    0000036b: 	movl	%r12d, 0x80(%rsp)
    00000373: 	movaps	%xmm0, 0x10(%rsp)
    00000378: 	movaps	%xmm0, 0x70(%rsp)
    0000037d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 893
    00000382: 	callq	clock@PLT # Offset: 898
    00000387: 	movq	%rax, start_time(%rip)
    0000038e: 	movl	iterations(%rip), %eax
    00000394: 	testl	%eax, %eax
    00000396: 	jle	.Ltmp946 # Offset: 918
    0000039c: 	subl	$0x1, %eax
    0000039f: 	leal	(,%rax,8), %esi
    000003a6: 	leal	(%rax,%rax,2), %edx
    000003a9: 	leal	(%rsi,%rax), %r8d
    000003ad: 	leal	(%rax,%rdx,4), %edx
    000003b0: 	subl	%eax, %esi
    000003b2: 	leal	(,%r8,4), %edi
    000003ba: 	shll	$0x2, %edx
    000003bd: 	leal	(%rax,%rax,4), %ecx
    000003c0: 	movd	%edi, %xmm1
    000003c4: 	movd	%edx, %xmm0
    000003c8: 	movl	%eax, %edx
    000003ca: 	movdqa	%xmm1, %xmm3
    000003ce: 	movdqa	%xmm1, %xmm2
    000003d2: 	shll	$0x4, %edx
    000003d5: 	leal	(%rax,%rsi,8), %r12d
    000003d9: 	movdqa	0x20(%rsp), %xmm1
    000003df: 	subl	%eax, %edx
    000003e1: 	pinsrw	$0x1, %r8d, %xmm2
    000003e7: 	leal	0x39(%r12,%r13), %r12d
    000003ec: 	leal	(,%rcx,8), %r10d
    000003f4: 	leal	(,%rcx,4), %r9d
    000003fc: 	movzwl	%r12w, %r12d
    00000400: 	pinsrw	$0x1, %r13d, %xmm1
    00000406: 	pinsrw	$0x1, %r9d, %xmm3
    0000040c: 	pinsrw	$0x1, %r10d, %xmm0
    00000412: 	punpckldq	%xmm1, %xmm2
    00000416: 	punpckldq	%xmm3, %xmm0
    0000041a: 	leal	(%rdx,%rdx), %edi
    0000041d: 	movd	%edx, %xmm3
    00000421: 	punpcklqdq	%xmm2, %xmm0
    00000425: 	leal	(%rax,%rcx,2), %ecx
    00000428: 	movdqa	%xmm1, %xmm2
    0000042c: 	pinsrw	$0x1, %edi, %xmm3
    00000431: 	leal	(%rcx,%rcx,4), %ecx
    00000434: 	punpckldq	%xmm1, %xmm2
    00000438: 	punpckldq	%xmm3, %xmm1
    0000043c: 	leal	0x37(%rcx,%r13), %eax
    00000441: 	punpcklqdq	%xmm1, %xmm2
    00000445: 	shll	$0x10, %eax
    00000448: 	paddw	%xmm2, %xmm0
    0000044c: 	paddw	DATAat0x17d90(%rip), %xmm0
    00000454: 	orl	%eax, %r12d
    00000457: 	leal	0x3c(%r13,%rdx,4), %eax
    0000045c: 	movaps	%xmm0, 0x10(%rsp)
    00000461: 	movl	%eax, %r15d
.Ltmp946:
    00000464: 	movdqa	0x10(%rsp), %xmm4
    0000046a: 	movq	%rbp, %rsi
    0000046d: 	movq	%r14, %rdi
    00000470: 	movl	%r12d, 0x80(%rsp)
    00000478: 	movw	%r15w, 0x84(%rsp)
    00000481: 	movaps	%xmm4, 0x70(%rsp)
    00000486: 	callq	_Z12check11_sumsIsEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1158
    0000048b: 	movq	%rbp, %rdi
    0000048e: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1166
    00000493: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000049a: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000004a1: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004a8: 	je	.Ltmp947 # Offset: 1192
.Ltmp979:
    000004ae: 	movq	-0x20(%rax), %r12
    000004b2: 	callq	clock@PLT # Offset: 1202
    000004b7: 	pxor	%xmm0, %xmm0
    000004bb: 	movq	%rax, end_time(%rip)
    000004c2: 	movq	%r12, %rdi
    000004c5: 	subq	start_time(%rip), %rax
    000004cc: 	cvtsi2sd	%rax, %xmm0
    000004d1: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000004d9: 	callq	_Z13record_resultdPKc # Offset: 1241
    000004de: 	movq	0xb0(%rsp), %rdi
    000004e6: 	cmpq	%rbx, %rdi
    000004e9: 	je	.Ltmp948 # Offset: 1257
    000004eb: 	movq	0xc0(%rsp), %rax
    000004f3: 	leaq	0x1(%rax), %rsi
    000004f7: 	callq	_ZdlPvm@PLT # Offset: 1271
.Ltmp948:
    000004fc: 	movl	init_value(%rip), %r13d
    00000503: 	movq	0x8(%rsp), %rsi
    00000508: 	leaq	DATAat0x179d0(%rip), %rdx
    0000050f: 	movq	%rbp, %rdi
    00000512: 	movd	%r13d, %xmm5
    00000517: 	movl	%r13d, %eax
    0000051a: 	movzwl	%r13w, %r12d
    0000051e: 	movl	%r13d, %r15d
    00000521: 	movdqa	%xmm5, %xmm0
    00000525: 	movaps	%xmm5, 0x20(%rsp)
    0000052a: 	shll	$0x10, %eax
    0000052d: 	punpcklwd	0x20(%rsp), %xmm0
    00000533: 	movw	%r13w, 0x84(%rsp)
    0000053c: 	orl	%eax, %r12d
    0000053f: 	pshufd	$0x0, %xmm0, %xmm0
    00000544: 	movl	%r12d, 0x80(%rsp)
    0000054c: 	movaps	%xmm0, 0x10(%rsp)
    00000551: 	movaps	%xmm0, 0x70(%rsp)
    00000556: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1366
    0000055b: 	callq	clock@PLT # Offset: 1371
    00000560: 	movq	%rax, start_time(%rip)
    00000567: 	movl	iterations(%rip), %eax
    0000056d: 	movd	%eax, %xmm7
    00000571: 	pshufd	$0x0, %xmm7, %xmm0
    00000576: 	movdqa	%xmm0, %xmm1
    0000057a: 	punpckhwd	%xmm0, %xmm1
    0000057e: 	punpcklwd	%xmm0, %xmm0
    00000582: 	movdqa	%xmm0, %xmm2
    00000586: 	punpcklwd	%xmm1, %xmm0
    0000058a: 	punpckhwd	%xmm1, %xmm2
    0000058e: 	pcmpeqd	%xmm1, %xmm1
    00000592: 	punpcklwd	%xmm2, %xmm0
    00000596: 	paddw	%xmm1, %xmm0
    0000059a: 	pmullw	DATAat0x17d90(%rip), %xmm0
    000005a2: 	testl	%eax, %eax
    000005a4: 	jle	.Ltmp949 # Offset: 1444
    000005a6: 	subl	$0x1, %eax
    000005a9: 	movdqa	0x20(%rsp), %xmm5
    000005af: 	movl	%eax, %edx
    000005b1: 	leal	(,%rax,8), %r12d
    000005b9: 	shll	$0x4, %edx
    000005bc: 	subl	%eax, %r12d
    000005bf: 	movdqa	%xmm5, %xmm1
    000005c3: 	subl	%eax, %edx
    000005c5: 	leal	(%rax,%r12,8), %r12d
    000005c9: 	punpcklwd	%xmm5, %xmm1
    000005cd: 	leal	0x3c(%r13,%rdx,4), %ecx
    000005d2: 	leal	(%rax,%rax,4), %edx
    000005d5: 	pshufd	$0x0, %xmm1, %xmm1
    000005da: 	leal	(%rax,%rdx,2), %eax
    000005dd: 	leal	0x39(%r12,%r13), %r12d
    000005e2: 	movl	%ecx, %r15d
    000005e5: 	leal	(%rax,%rax,4), %eax
    000005e8: 	paddw	%xmm1, %xmm0
    000005ec: 	movzwl	%r12w, %r12d
    000005f0: 	paddw	DATAat0x17d90(%rip), %xmm0
    000005f8: 	leal	0x37(%rax,%r13), %eax
    000005fd: 	shll	$0x10, %eax
    00000600: 	orl	%eax, %r12d
    00000603: 	movaps	%xmm0, 0x10(%rsp)
.Ltmp949:
    00000608: 	movdqa	0x10(%rsp), %xmm5
    0000060e: 	movq	%rbp, %rsi
    00000611: 	movq	%r14, %rdi
    00000614: 	movl	%r12d, 0x80(%rsp)
    0000061c: 	movw	%r15w, 0x84(%rsp)
    00000625: 	movaps	%xmm5, 0x70(%rsp)
    0000062a: 	callq	_Z12check11_sumsIsEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1578
    0000062f: 	movq	%rbp, %rdi
    00000632: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1586
    00000637: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000063e: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000645: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000064c: 	je	.Ltmp950 # Offset: 1612
.Ltmp978:
    00000652: 	movq	-0x20(%rax), %r12
    00000656: 	callq	clock@PLT # Offset: 1622
    0000065b: 	pxor	%xmm0, %xmm0
    0000065f: 	movq	%rax, end_time(%rip)
    00000666: 	movq	%r12, %rdi
    00000669: 	subq	start_time(%rip), %rax
    00000670: 	cvtsi2sd	%rax, %xmm0
    00000675: 	divsd	DATAat0x17ca0(%rip), %xmm0
    0000067d: 	callq	_Z13record_resultdPKc # Offset: 1661
    00000682: 	movq	0xb0(%rsp), %rdi
    0000068a: 	cmpq	%rbx, %rdi
    0000068d: 	je	.Ltmp951 # Offset: 1677
    0000068f: 	movq	0xc0(%rsp), %rax
    00000697: 	leaq	0x1(%rax), %rsi
    0000069b: 	callq	_ZdlPvm@PLT # Offset: 1691
.Ltmp951:
    000006a0: 	movl	init_value(%rip), %eax
    000006a6: 	movq	0x8(%rsp), %rsi
    000006ab: 	movq	%rbp, %rdi
    000006ae: 	movl	%eax, %ecx
    000006b0: 	movd	%eax, %xmm0
    000006b4: 	movzwl	%ax, %edx
    000006b7: 	movw	%ax, 0x84(%rsp)
    000006bf: 	shll	$0x10, %ecx
    000006c2: 	punpcklwd	%xmm0, %xmm0
    000006c6: 	orl	%ecx, %edx
    000006c8: 	pshufd	$0x0, %xmm0, %xmm0
    000006cd: 	movl	%edx, 0x80(%rsp)
    000006d4: 	leaq	DATAat0x17a00(%rip), %rdx
    000006db: 	movaps	%xmm0, 0x70(%rsp)
    000006e0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1760
    000006e5: 	movq	%rbp, %rsi
    000006e8: 	movq	%r14, %rdi
    000006eb: 	callq	_Z15test_struct_argIsEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1771
    000006f0: 	movq	0xb0(%rsp), %rdi
    000006f8: 	cmpq	%rbx, %rdi
    000006fb: 	je	.Ltmp952 # Offset: 1787
    000006fd: 	movq	0xc0(%rsp), %rax
    00000705: 	leaq	0x1(%rax), %rsi
    00000709: 	callq	_ZdlPvm@PLT # Offset: 1801
.Ltmp952:
    0000070e: 	movl	init_value(%rip), %eax
    00000714: 	movq	0x8(%rsp), %rsi
    00000719: 	leaq	DATAat0x17a28(%rip), %rdx
    00000720: 	movq	%rbp, %rdi
    00000723: 	movd	%eax, %xmm6
    00000727: 	movw	%ax, 0x68(%rsp)
    0000072c: 	pshuflw	$0x0, %xmm6, %xmm4
    00000731: 	movq	%xmm4, %r13
    00000736: 	movq	%xmm4, 0x60(%rsp)
    0000073c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1852
    00000741: 	callq	clock@PLT # Offset: 1857
    00000746: 	movd	iterations(%rip), %xmm3
    0000074e: 	movq	%r13, %xmm7
    00000753: 	movq	%rbp, %r9
    00000756: 	movq	DATAat0x17d90(%rip), %r12
    0000075d: 	movq	%rax, start_time(%rip)
    00000764: 	pshuflw	$0x0, %xmm3, %xmm0
    00000769: 	movq	%r12, %xmm5
    0000076e: 	pmullw	%xmm5, %xmm0
    00000772: 	paddw	%xmm7, %xmm0
    00000776: 	pextrw	$0x2, %xmm0, %edx
    0000077b: 	pextrw	$0x3, %xmm0, %ecx
    00000780: 	pextrw	$0x1, %xmm0, %esi
    00000785: 	movq	%xmm0, 0x60(%rsp)
    0000078b: 	pextrw	$0x0, %xmm0, %edi
    00000790: 	movl	%edx, %r8d
    00000793: 	movw	%dx, 0x68(%rsp)
    00000798: 	callq	"_Z11check5_sumsIsEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 1944
    0000079d: 	movq	%rbp, %rdi
    000007a0: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1952
    000007a5: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000007ac: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000007b3: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000007ba: 	je	.Ltmp953 # Offset: 1978
.Ltmp977:
    000007c0: 	movq	-0x20(%rax), %r13
    000007c4: 	callq	clock@PLT # Offset: 1988
    000007c9: 	pxor	%xmm0, %xmm0
    000007cd: 	movq	%rax, end_time(%rip)
    000007d4: 	movq	%r13, %rdi
    000007d7: 	subq	start_time(%rip), %rax
    000007de: 	cvtsi2sd	%rax, %xmm0
    000007e3: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000007eb: 	callq	_Z13record_resultdPKc # Offset: 2027
    000007f0: 	movq	0xb0(%rsp), %rdi
    000007f8: 	cmpq	%rbx, %rdi
    000007fb: 	je	.Ltmp954 # Offset: 2043
    000007fd: 	movq	0xc0(%rsp), %rax
    00000805: 	leaq	0x1(%rax), %rsi
    00000809: 	callq	_ZdlPvm@PLT # Offset: 2057
.Ltmp954:
    0000080e: 	movl	init_value(%rip), %eax
    00000814: 	movq	0x8(%rsp), %rsi
    00000819: 	leaq	DATAat0x17a60(%rip), %rdx
    00000820: 	movq	%rbp, %rdi
    00000823: 	movd	%eax, %xmm6
    00000827: 	movw	%ax, 0x68(%rsp)
    0000082c: 	pshuflw	$0x0, %xmm6, %xmm4
    00000831: 	movq	%xmm4, %r14
    00000836: 	movq	%xmm4, %r13
    0000083b: 	movq	%xmm4, 0x60(%rsp)
    00000841: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2113
    00000846: 	callq	clock@PLT # Offset: 2118
    0000084b: 	movq	%rax, start_time(%rip)
    00000852: 	movl	iterations(%rip), %eax
    00000858: 	testl	%eax, %eax
    0000085a: 	jle	.Ltmp955 # Offset: 2138
    0000085c: 	subl	$0x1, %eax
    0000085f: 	movq	%r12, %xmm3
    00000864: 	movq	%r14, %xmm5
    00000869: 	movd	%eax, %xmm0
    0000086d: 	pshuflw	$0x0, %xmm0, %xmm0
    00000872: 	pmullw	%xmm3, %xmm0
    00000876: 	paddw	%xmm5, %xmm0
    0000087a: 	paddw	%xmm3, %xmm0
    0000087e: 	movq	%xmm0, %r13
.Ltmp955:
    00000883: 	movq	%r13, %xmm3
    00000888: 	movq	%rbp, %r9
    0000088b: 	movq	%r13, 0x60(%rsp)
    00000890: 	pextrw	$0x2, %xmm3, %edx
    00000895: 	pextrw	$0x3, %xmm3, %ecx
    0000089a: 	pextrw	$0x1, %xmm3, %esi
    0000089f: 	pextrw	$0x0, %xmm3, %edi
    000008a4: 	movl	%edx, %r8d
    000008a7: 	movw	%dx, 0x68(%rsp)
    000008ac: 	callq	"_Z11check5_sumsIsEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 2220
    000008b1: 	movq	%rbp, %rdi
    000008b4: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2228
    000008b9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000008c0: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000008c7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000008ce: 	je	.Ltmp956 # Offset: 2254
.Ltmp976:
    000008d4: 	movq	-0x20(%rax), %r13
    000008d8: 	callq	clock@PLT # Offset: 2264
    000008dd: 	pxor	%xmm0, %xmm0
    000008e1: 	movq	%rax, end_time(%rip)
    000008e8: 	movq	%r13, %rdi
    000008eb: 	subq	start_time(%rip), %rax
    000008f2: 	cvtsi2sd	%rax, %xmm0
    000008f7: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000008ff: 	callq	_Z13record_resultdPKc # Offset: 2303
    00000904: 	movq	0xb0(%rsp), %rdi
    0000090c: 	cmpq	%rbx, %rdi
    0000090f: 	je	.Ltmp957 # Offset: 2319
    00000911: 	movq	0xc0(%rsp), %rax
    00000919: 	leaq	0x1(%rax), %rsi
    0000091d: 	callq	_ZdlPvm@PLT # Offset: 2333
.Ltmp957:
    00000922: 	movl	init_value(%rip), %eax
    00000928: 	movq	0x8(%rsp), %rsi
    0000092d: 	leaq	DATAat0x17a98(%rip), %rdx
    00000934: 	movq	%rbp, %rdi
    00000937: 	movd	%eax, %xmm3
    0000093b: 	movw	%ax, 0x68(%rsp)
    00000940: 	pshuflw	$0x0, %xmm3, %xmm6
    00000945: 	movq	%xmm6, %r14
    0000094a: 	movq	%xmm6, %r13
    0000094f: 	movq	%xmm6, 0x60(%rsp)
    00000955: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2389
    0000095a: 	callq	clock@PLT # Offset: 2394
    0000095f: 	movq	%rax, start_time(%rip)
    00000966: 	movl	iterations(%rip), %eax
    0000096c: 	testl	%eax, %eax
    0000096e: 	jle	.Ltmp958 # Offset: 2414
    00000970: 	subl	$0x1, %eax
    00000973: 	movq	%r12, %xmm2
    00000978: 	movq	%r14, %xmm4
    0000097d: 	movd	%eax, %xmm0
    00000981: 	movq	%r12, %xmm7
    00000986: 	pshuflw	$0x0, %xmm0, %xmm0
    0000098b: 	pmullw	%xmm2, %xmm0
    0000098f: 	paddw	%xmm4, %xmm0
    00000993: 	paddw	%xmm0, %xmm7
    00000997: 	movq	%xmm7, %r13
.Ltmp958:
    0000099c: 	movq	%r13, %xmm5
    000009a1: 	movq	%rbp, %r9
    000009a4: 	movq	%r13, 0x60(%rsp)
    000009a9: 	pextrw	$0x2, %xmm5, %edx
    000009ae: 	pextrw	$0x3, %xmm5, %ecx
    000009b3: 	pextrw	$0x1, %xmm5, %esi
    000009b8: 	pextrw	$0x0, %xmm5, %edi
    000009bd: 	movl	%edx, %r8d
    000009c0: 	movw	%dx, 0x68(%rsp)
    000009c5: 	callq	"_Z11check5_sumsIsEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.isra.0/1" # Offset: 2501
    000009ca: 	movq	%rbp, %rdi
    000009cd: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2509
    000009d2: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000009d9: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000009e0: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000009e7: 	je	.Ltmp959 # Offset: 2535
.Ltmp975:
    000009ed: 	movq	-0x20(%rax), %r12
    000009f1: 	callq	clock@PLT # Offset: 2545
    000009f6: 	pxor	%xmm0, %xmm0
    000009fa: 	movq	%rax, end_time(%rip)
    00000a01: 	movq	%r12, %rdi
    00000a04: 	subq	start_time(%rip), %rax
    00000a0b: 	cvtsi2sd	%rax, %xmm0
    00000a10: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000a18: 	callq	_Z13record_resultdPKc # Offset: 2584
    00000a1d: 	movq	0xb0(%rsp), %rdi
    00000a25: 	cmpq	%rbx, %rdi
    00000a28: 	je	.Ltmp960 # Offset: 2600
    00000a2a: 	movq	0xc0(%rsp), %rax
    00000a32: 	leaq	0x1(%rax), %rsi
    00000a36: 	callq	_ZdlPvm@PLT # Offset: 2614
.Ltmp960:
    00000a3b: 	movl	init_value(%rip), %eax
    00000a41: 	movq	0x8(%rsp), %rsi
    00000a46: 	leaq	DATAat0x17ad0(%rip), %rdx
    00000a4d: 	movq	%rbp, %rdi
    00000a50: 	movd	%eax, %xmm6
    00000a54: 	movw	%ax, 0x68(%rsp)
    00000a59: 	pshuflw	$0x0, %xmm6, %xmm0
    00000a5e: 	movq	%xmm0, 0x60(%rsp)
    00000a64: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2660
    00000a69: 	leaq	0x60(%rsp), %rdi
    00000a6e: 	movq	%rbp, %rsi
    00000a71: 	callq	_Z16test_struct5_argIsEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2673
    00000a76: 	movq	0xb0(%rsp), %rdi
    00000a7e: 	cmpq	%rbx, %rdi
    00000a81: 	je	.Ltmp961 # Offset: 2689
    00000a83: 	movq	0xc0(%rsp), %rax
    00000a8b: 	leaq	0x1(%rax), %rsi
    00000a8f: 	callq	_ZdlPvm@PLT # Offset: 2703
.Ltmp961:
    00000a94: 	movq	0x8(%rsp), %rsi
    00000a99: 	leaq	DATAat0x17b00(%rip), %rdx
    00000aa0: 	movq	%rbp, %rdi
    00000aa3: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2723
    00000aa8: 	movq	%rbp, %rdi
    00000aab: 	callq	_Z18test_struct_local0IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2731
    00000ab0: 	movq	0xb0(%rsp), %rdi
    00000ab8: 	cmpq	%rbx, %rdi
    00000abb: 	je	.Ltmp962 # Offset: 2747
    00000abd: 	movq	0xc0(%rsp), %rax
    00000ac5: 	leaq	0x1(%rax), %rsi
    00000ac9: 	callq	_ZdlPvm@PLT # Offset: 2761
.Ltmp962:
    00000ace: 	movq	0x8(%rsp), %rsi
    00000ad3: 	leaq	DATAat0x17b30(%rip), %rdx
    00000ada: 	movq	%rbp, %rdi
    00000add: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2781
    00000ae2: 	movq	%rbp, %rdi
    00000ae5: 	callq	_Z18test_struct_local1IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2789
    00000aea: 	movq	0xb0(%rsp), %rdi
    00000af2: 	cmpq	%rbx, %rdi
    00000af5: 	je	.Ltmp963 # Offset: 2805
    00000af7: 	movq	0xc0(%rsp), %rax
    00000aff: 	leaq	0x1(%rax), %rsi
    00000b03: 	callq	_ZdlPvm@PLT # Offset: 2819
.Ltmp963:
    00000b08: 	movq	0x8(%rsp), %rsi
    00000b0d: 	leaq	DATAat0x17b60(%rip), %rdx
    00000b14: 	movq	%rbp, %rdi
    00000b17: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2839
    00000b1c: 	movq	%rbp, %rdi
    00000b1f: 	callq	_Z18test_struct_local2IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2847
    00000b24: 	movq	0xb0(%rsp), %rdi
    00000b2c: 	cmpq	%rbx, %rdi
    00000b2f: 	je	.Ltmp964 # Offset: 2863
    00000b31: 	movq	0xc0(%rsp), %rax
    00000b39: 	leaq	0x1(%rax), %rsi
    00000b3d: 	callq	_ZdlPvm@PLT # Offset: 2877
.Ltmp964:
    00000b42: 	movq	0x8(%rsp), %rsi
    00000b47: 	leaq	DATAat0x17b90(%rip), %rdx
    00000b4e: 	movq	%rbp, %rdi
    00000b51: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2897
    00000b56: 	movq	%rbp, %rdi
    00000b59: 	callq	_Z17test_struct_localIsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2905
    00000b5e: 	movq	0xb0(%rsp), %rdi
    00000b66: 	cmpq	%rbx, %rdi
    00000b69: 	je	.Ltmp965 # Offset: 2921
    00000b6b: 	movq	0xc0(%rsp), %rax
    00000b73: 	leaq	0x1(%rax), %rsi
    00000b77: 	callq	_ZdlPvm@PLT # Offset: 2935
.Ltmp965:
    00000b7c: 	movq	0x8(%rsp), %rsi
    00000b81: 	leaq	DATAat0x17bb8(%rip), %rdx
    00000b88: 	movq	%rbp, %rdi
    00000b8b: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2955
    00000b90: 	movq	%rbp, %rdi
    00000b93: 	callq	_Z19test_struct5_local0IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2963
    00000b98: 	movq	0xb0(%rsp), %rdi
    00000ba0: 	cmpq	%rbx, %rdi
    00000ba3: 	je	.Ltmp966 # Offset: 2979
    00000ba5: 	movq	0xc0(%rsp), %rax
    00000bad: 	leaq	0x1(%rax), %rsi
    00000bb1: 	callq	_ZdlPvm@PLT # Offset: 2993
.Ltmp966:
    00000bb6: 	movq	0x8(%rsp), %rsi
    00000bbb: 	leaq	DATAat0x17be8(%rip), %rdx
    00000bc2: 	movq	%rbp, %rdi
    00000bc5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3013
    00000bca: 	movq	%rbp, %rdi
    00000bcd: 	callq	_Z19test_struct5_local1IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3021
    00000bd2: 	movq	0xb0(%rsp), %rdi
    00000bda: 	cmpq	%rbx, %rdi
    00000bdd: 	je	.Ltmp967 # Offset: 3037
    00000bdf: 	movq	0xc0(%rsp), %rax
    00000be7: 	leaq	0x1(%rax), %rsi
    00000beb: 	callq	_ZdlPvm@PLT # Offset: 3051
.Ltmp967:
    00000bf0: 	movq	0x8(%rsp), %rsi
    00000bf5: 	leaq	DATAat0x17c18(%rip), %rdx
    00000bfc: 	movq	%rbp, %rdi
    00000bff: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3071
    00000c04: 	movq	%rbp, %rdi
    00000c07: 	callq	_Z19test_struct5_local2IsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3079
    00000c0c: 	movq	0xb0(%rsp), %rdi
    00000c14: 	cmpq	%rbx, %rdi
    00000c17: 	je	.Ltmp968 # Offset: 3095
    00000c19: 	movq	0xc0(%rsp), %rax
    00000c21: 	leaq	0x1(%rax), %rsi
    00000c25: 	callq	_ZdlPvm@PLT # Offset: 3109
.Ltmp968:
    00000c2a: 	movq	0x8(%rsp), %rsi
    00000c2f: 	leaq	DATAat0x17c48(%rip), %rdx
    00000c36: 	movq	%rbp, %rdi
    00000c39: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3129
    00000c3e: 	movq	%rbp, %rdi
    00000c41: 	callq	_Z18test_struct5_localIsEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3137
    00000c46: 	movq	0xb0(%rsp), %rdi
    00000c4e: 	cmpq	%rbx, %rdi
    00000c51: 	je	.Ltmp969 # Offset: 3153
    00000c53: 	movq	0xc0(%rsp), %rax
    00000c5b: 	leaq	0x1(%rax), %rsi
    00000c5f: 	callq	_ZdlPvm@PLT # Offset: 3167
.Ltmp969:
    00000c64: 	movq	0x90(%rsp), %rdi
    00000c6c: 	leaq	0xa0(%rsp), %rax
    00000c74: 	cmpq	%rax, %rdi
    00000c77: 	je	.Ltmp970 # Offset: 3191
    00000c79: 	movq	0xa0(%rsp), %rax
    00000c81: 	leaq	0x1(%rax), %rsi
    00000c85: 	callq	_ZdlPvm@PLT # Offset: 3205
.Ltmp970:
    00000c8a: 	movq	0xd8(%rsp), %rax
    00000c92: 	subq	%fs:0x28, %rax
    00000c9b: 	jne	.Ltmp971 # Offset: 3227
    00000ca1: 	addq	$0xe8, %rsp
    00000ca8: 	popq	%rbx
    00000ca9: 	popq	%rbp
    00000caa: 	popq	%r12
    00000cac: 	popq	%r13
    00000cae: 	popq	%r14
    00000cb0: 	popq	%r15
    00000cb2: 	retq # Offset: 3250
    00000cb3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp972:
    00000cb8: 	addq	$0x20, %rbp
.Ltmp935:
    00000cbc: 	cmpq	%rbp, 0x20(%rsp)
    00000cc1: 	je	.Ltmp939 # Offset: 3265
.Ltmp973:
    00000cc7: 	movq	(%rbp), %rdi
    00000ccb: 	leaq	0x10(%rbp), %rax
    00000ccf: 	cmpq	%rax, %rdi
    00000cd2: 	je	.Ltmp972 # Offset: 3282
    00000cd4: 	movq	0x10(%rbp), %rax
    00000cd8: 	addq	$0x20, %rbp
    00000cdc: 	leaq	0x1(%rax), %rsi
    00000ce0: 	callq	_ZdlPvm@PLT # Offset: 3296
    00000ce5: 	cmpq	%rbp, 0x20(%rsp)
    00000cea: 	jne	.Ltmp973 # Offset: 3306
    00000cec: 	jmp	.Ltmp939 # Offset: 3308
    00000cf1: 	nopl	(%rax) # Size: 7
.Ltmp932:
    00000cf8: 	addq	$0x20, %r15
    00000cfc: 	cmpq	%rbx, %r15
    00000cff: 	jne	.Ltmp933 # Offset: 3327
    00000d05: 	addq	$0x8, %r13
    00000d09: 	cmpq	%r13, 0x10(%rsp)
    00000d0e: 	ja	.Ltmp934 # Offset: 3342
    00000d14: 	jmp	.Ltmp931 # Offset: 3348
    00000d19: 	nopl	(%rax) # Size: 7
.Ltmp937:
    00000d20: 	addq	$0x20, %rbp
    00000d24: 	cmpq	0x40(%rsp), %rbp
    00000d29: 	jne	.Ltmp938 # Offset: 3369
    00000d2f: 	jmp	.Ltmp936 # Offset: 3375
    00000d34: 	nopl	(%rax) # Size: 4
.Ltmp940:
    00000d38: 	addq	$0x20, %r14
    00000d3c: 	cmpq	%r14, 0x20(%rsp)
    00000d41: 	jne	.Ltmp941 # Offset: 3393
    00000d47: 	jmp	.Ltmp939 # Offset: 3399
.Ltmp944:
    00000d4c: 	movq	-0x8(%rdx), %rax
    00000d50: 	addq	$0x200, %rax
    00000d56: 	jmp	.Ltmp974 # Offset: 3414
.Ltmp959:
    00000d5b: 	movq	-0x8(%rdx), %rax
    00000d5f: 	addq	$0x200, %rax
    00000d65: 	jmp	.Ltmp975 # Offset: 3429
.Ltmp956:
    00000d6a: 	movq	-0x8(%rdx), %rax
    00000d6e: 	addq	$0x200, %rax
    00000d74: 	jmp	.Ltmp976 # Offset: 3444
.Ltmp953:
    00000d79: 	movq	-0x8(%rdx), %rax
    00000d7d: 	addq	$0x200, %rax
    00000d83: 	jmp	.Ltmp977 # Offset: 3459
.Ltmp950:
    00000d88: 	movq	-0x8(%rdx), %rax
    00000d8c: 	addq	$0x200, %rax
    00000d92: 	jmp	.Ltmp978 # Offset: 3474
.Ltmp947:
    00000d97: 	movq	-0x8(%rdx), %rax
    00000d9b: 	addq	$0x200, %rax
    00000da1: 	jmp	.Ltmp979 # Offset: 3489
.Ltmp971:
    00000da6: 	callq	__stack_chk_fail@PLT # Offset: 3494
    00000dab: 	endbr64
    00000daf: 	movq	%rax, %rbp
    00000db2: 	jmp	.Ltmp980 # Offset: 3506
    00000db4: 	endbr64
.Ltmp982:
    00000db8: 	movq	%rax, %rbp
    00000dbb: 	jmp	.Ltmp981 # Offset: 3515
    00000dc0: 	endbr64
    00000dc4: 	jmp	.Ltmp982 # Offset: 3524
    00000dc6: 	endbr64
    00000dca: 	jmp	.Ltmp982 # Offset: 3530
    00000dcc: 	endbr64
    00000dd0: 	jmp	.Ltmp982 # Offset: 3536
    00000dd2: 	endbr64
    00000dd6: 	jmp	.Ltmp982 # Offset: 3542
    00000dd8: 	endbr64
    00000ddc: 	jmp	.Ltmp982 # Offset: 3548
    00000dde: 	endbr64
    00000de2: 	movq	%rax, %rbp
    00000de5: 	jmp	.Ltmp983 # Offset: 3557
    00000de7: 	endbr64
    00000deb: 	jmp	.Ltmp982 # Offset: 3563
.Ltmp983:
    00000ded: 	movq	0xb0(%rsp), %rdi
    00000df5: 	leaq	0xc0(%rsp), %rax
    00000dfd: 	cmpq	%rax, %rdi
    00000e00: 	je	.Ltmp980 # Offset: 3584
.Ltmp985:
    00000e02: 	movq	0xc0(%rsp), %rax
    00000e0a: 	leaq	0x1(%rax), %rsi
    00000e0e: 	callq	_ZdlPvm@PLT # Offset: 3598
.Ltmp980:
    00000e13: 	movq	0x90(%rsp), %rdi
    00000e1b: 	leaq	0xa0(%rsp), %rax
    00000e23: 	cmpq	%rax, %rdi
    00000e26: 	je	.Ltmp984 # Offset: 3622
    00000e28: 	movq	0xa0(%rsp), %rax
    00000e30: 	leaq	0x1(%rax), %rsi
    00000e34: 	callq	_ZdlPvm@PLT # Offset: 3636
.Ltmp984:
    00000e39: 	movq	%rbp, %rdi
    00000e3c: 	callq	_Unwind_Resume@PLT # Offset: 3644
    00000e41: 	endbr64
    00000e45: 	jmp	.Ltmp982 # Offset: 3653
    00000e4a: 	endbr64
    00000e4e: 	jmp	.Ltmp982 # Offset: 3662
    00000e53: 	endbr64
    00000e57: 	jmp	.Ltmp982 # Offset: 3671
    00000e5c: 	endbr64
    00000e60: 	jmp	.Ltmp982 # Offset: 3680
    00000e65: 	endbr64
    00000e69: 	jmp	.Ltmp982 # Offset: 3689
    00000e6e: 	endbr64
    00000e72: 	jmp	.Ltmp982 # Offset: 3698
    00000e77: 	endbr64
    00000e7b: 	jmp	.Ltmp982 # Offset: 3707
    00000e80: 	endbr64
    00000e84: 	jmp	.Ltmp982 # Offset: 3716
.Ltmp981:
    00000e89: 	movq	0xb0(%rsp), %rdi
    00000e91: 	cmpq	%rbx, %rdi
    00000e94: 	jne	.Ltmp985 # Offset: 3732
    00000e9a: 	jmp	.Ltmp980 # Offset: 3738
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIsEvv"

Binary Function "_Z18test_struct5_localImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 122
  State       : disassembled
  Address     : 0x11870
  Size        : 0x247
  MaxSize     : 0x250
  Offset      : 0x11870
  Section     : .text
  Orc Section : .local.text._Z18test_struct5_localImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0121:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movslq	init_value(%rip), %rbx
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0x8(%rsp)
    00000026: 	xorl	%eax, %eax
    00000028: 	callq	clock@PLT # Offset: 40
    0000002d: 	movq	%rax, start_time(%rip)
    00000034: 	movslq	iterations(%rip), %rax
    0000003b: 	testl	%eax, %eax
    0000003d: 	jle	.Ltmp986 # Offset: 61
    00000043: 	leal	-0x1(%rax), %edx
    00000046: 	leaq	(%rdx,%rdx,2), %rcx
    0000004a: 	leaq	(%rdx,%rcx,4), %rcx
    0000004e: 	leaq	0x34(%rbx,%rcx,4), %r9
    00000053: 	leaq	(%rdx,%rdx,4), %rcx
    00000057: 	leaq	(%rdx,%rdx,8), %rdx
    0000005b: 	leaq	0x14(%rbx,%rcx,4), %rdi
    00000060: 	leaq	0x24(%rbx,%rdx,4), %r8
    00000065: 	leaq	0x28(%rbx,%rcx,8), %rbx
.Ltmp999:
    0000006a: 	leaq	(%rax,%rax,2), %rdx
    0000006e: 	movslq	init_value(%rip), %rcx
    00000075: 	shlq	$0x2, %rdx
    00000079: 	leaq	(%rdx,%rax), %rsi
    0000007d: 	leaq	(%rcx,%rsi,4), %rsi
    00000081: 	movq	%rsi, %rcx
    00000084: 	subq	%rdx, %rcx
    00000087: 	cmpq	%rsi, %r9
    0000008a: 	jne	.Ltmp987 # Offset: 138
    0000008c: 	cmpq	%rcx, %rbx
    0000008f: 	jne	.Ltmp987 # Offset: 143
    00000091: 	leaq	(,%rax,4), %rdx
    00000099: 	shlq	$0x4, %rax
    0000009d: 	subq	%rdx, %rcx
    000000a0: 	movq	%rcx, %rdx
    000000a3: 	subq	%rax, %rdx
    000000a6: 	cmpq	%rdi, %rdx
    000000a9: 	jne	.Ltmp987 # Offset: 169
    000000ab: 	cmpq	%rcx, %r8
    000000ae: 	je	.Ltmp988 # Offset: 174
.Ltmp987:
    000000b0: 	movq	(%rbp), %rdx
    000000b4: 	leaq	DATAat0x17004(%rip), %rsi
    000000bb: 	movl	$0x1, %edi
    000000c0: 	xorl	%eax, %eax
    000000c2: 	callq	__printf_chk@PLT # Offset: 194
.Ltmp988:
    000000c7: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ce: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000d5: 	subq	$0x20, %rax
    000000d9: 	cmpq	%rax, %rbx
    000000dc: 	je	.Ltmp989 # Offset: 220
    000000e2: 	leaq	0x10(%rbx), %rdi
    000000e6: 	movq	0x8(%rbp), %r12
    000000ea: 	movq	%rdi, (%rbx)
    000000ed: 	movq	(%rbp), %r13
    000000f1: 	movq	%r13, %rax
    000000f4: 	addq	%r12, %rax
    000000f7: 	je	.Ltmp990 # Offset: 247
    000000f9: 	testq	%r13, %r13
    000000fc: 	je	.Ltmp991 # Offset: 252
.Ltmp990:
    00000102: 	movq	%r12, (%rsp)
    00000106: 	cmpq	$0xf, %r12
    0000010a: 	ja	.Ltmp992 # Offset: 266
    00000110: 	cmpq	$0x1, %r12
    00000114: 	jne	.Ltmp993 # Offset: 276
    0000011a: 	movzbl	(%r13), %eax
    0000011f: 	movb	%al, 0x10(%rbx)
.Ltmp996:
    00000122: 	movq	%r12, 0x8(%rbx)
    00000126: 	movb	$0x0, (%rdi,%r12)
    0000012b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000132: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000139: 	addq	$0x20, %rax
    0000013d: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000144: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    0000014b: 	je	.Ltmp994 # Offset: 331
.Ltmp997:
    00000151: 	movq	-0x20(%rax), %rbp
    00000155: 	callq	clock@PLT # Offset: 341
    0000015a: 	movq	%rax, end_time(%rip)
    00000161: 	movq	0x8(%rsp), %rdx
    00000166: 	subq	%fs:0x28, %rdx
    0000016f: 	jne	.Ltmp995 # Offset: 367
    00000175: 	subq	start_time(%rip), %rax
    0000017c: 	pxor	%xmm0, %xmm0
    00000180: 	movq	%rbp, %rdi
    00000183: 	cvtsi2sd	%rax, %xmm0
    00000188: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000190: 	addq	$0x18, %rsp
    00000194: 	popq	%rbx
    00000195: 	popq	%rbp
    00000196: 	popq	%r12
    00000198: 	popq	%r13
    0000019a: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 410
    0000019f: 	nop # Size: 1
.Ltmp992:
    000001a0: 	movq	%rbx, %rdi
    000001a3: 	movq	%rsp, %rsi
    000001a6: 	xorl	%edx, %edx
    000001a8: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 424
    000001ad: 	movq	%rax, (%rbx)
    000001b0: 	movq	%rax, %rdi
    000001b3: 	movq	(%rsp), %rax
    000001b7: 	movq	%rax, 0x10(%rbx)
.Ltmp998:
    000001bb: 	movq	%r12, %rdx
    000001be: 	movq	%r13, %rsi
    000001c1: 	callq	memcpy@PLT # Offset: 449
    000001c6: 	movq	(%rsp), %r12
    000001ca: 	movq	(%rbx), %rdi
    000001cd: 	jmp	.Ltmp996 # Offset: 461
    000001d2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp989:
    000001d8: 	movq	%rbp, %rsi
    000001db: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001e2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 482
    000001e7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ee: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001f5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001fc: 	jne	.Ltmp997 # Offset: 508
.Ltmp994:
    00000202: 	movq	-0x8(%rdx), %rax
    00000206: 	addq	$0x200, %rax
    0000020c: 	jmp	.Ltmp997 # Offset: 524
    00000211: 	nopl	(%rax) # Size: 7
.Ltmp993:
    00000218: 	testq	%r12, %r12
    0000021b: 	je	.Ltmp996 # Offset: 539
    00000221: 	jmp	.Ltmp998 # Offset: 545
    00000223: 	nopl	(%rax,%rax) # Size: 5
.Ltmp986:
    00000228: 	movq	%rbx, %rdi
    0000022b: 	movq	%rbx, %r8
    0000022e: 	movq	%rbx, %r9
    00000231: 	jmp	.Ltmp999 # Offset: 561
.Ltmp991:
    00000236: 	leaq	DATAat0x17018(%rip), %rdi
    0000023d: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 573
.Ltmp995:
    00000242: 	callq	__stack_chk_fail@PLT # Offset: 578
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_struct5_localImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeImEvv" after disassembly {
  Number      : 123
  State       : disassembled
  Address     : 0x11ac0
  Size        : 0xf09
  MaxSize     : 0xf10
  Offset      : 0x11ac0
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeImEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0122:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x17c73(%rip), %rsi
    0000000d: 	pushq	%r14
    0000000f: 	pushq	%r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0x138, %rsp
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0x128(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	leaq	0xe0(%rsp), %rax
    00000037: 	movq	%rax, %rdi
    0000003a: 	movq	%rax, (%rsp)
    0000003e: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 62
    00000043: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm1
    0000004b: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm2
    00000053: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rcx
    0000005a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %r15
    00000061: 	movhlps	%xmm1, %xmm6
    00000064: 	movaps	%xmm2, 0x20(%rsp)
    00000069: 	movq	%xmm2, %rbp
    0000006e: 	movq	_Z7gLabelsB5cxx11+56(%rip), %r14
    00000075: 	movq	%xmm6, %rax
    0000007a: 	movq	%rcx, 0x8(%rsp)
    0000007f: 	leaq	0x8(%rax), %r12
    00000083: 	movq	%r15, 0x18(%rsp)
    00000088: 	movaps	%xmm1, 0x30(%rsp)
    0000008d: 	movq	%xmm6, 0x40(%rsp)
    00000093: 	movq	%xmm1, 0x10(%rsp)
    00000099: 	cmpq	%r12, %r15
    0000009c: 	jbe	.Ltmp1000 # Offset: 156
    0000009e: 	movq	%r12, %r13
    000000a1: 	movq	%xmm2, 0x48(%rsp)
    000000a7: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1003:
    000000b0: 	movq	(%r13), %rbp
    000000b4: 	leaq	0x200(%rbp), %rbx
    000000bb: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1002:
    000000c0: 	movq	(%rbp), %rdi
    000000c4: 	leaq	0x10(%rbp), %rdx
    000000c8: 	cmpq	%rdx, %rdi
    000000cb: 	je	.Ltmp1001 # Offset: 203
    000000d1: 	movq	0x10(%rbp), %rax
    000000d5: 	addq	$0x20, %rbp
    000000d9: 	leaq	0x1(%rax), %rsi
    000000dd: 	callq	_ZdlPvm@PLT # Offset: 221
    000000e2: 	cmpq	%rbx, %rbp
    000000e5: 	jne	.Ltmp1002 # Offset: 229
    000000e7: 	addq	$0x8, %r13
    000000eb: 	cmpq	%r13, %r15
    000000ee: 	ja	.Ltmp1003 # Offset: 238
.Ltmp1043:
    000000f0: 	movq	0x48(%rsp), %rbp
.Ltmp1000:
    000000f5: 	movq	0x40(%rsp), %rcx
    000000fa: 	cmpq	%rcx, 0x18(%rsp)
    000000ff: 	je	.Ltmp1004 # Offset: 255
.Ltmp1044:
    00000105: 	cmpq	0x10(%rsp), %rbp
    0000010a: 	je	.Ltmp1005 # Offset: 266
.Ltmp1007:
    0000010c: 	movq	(%rbp), %rdi
    00000110: 	leaq	0x10(%rbp), %rax
    00000114: 	cmpq	%rax, %rdi
    00000117: 	je	.Ltmp1006 # Offset: 279
    0000011d: 	movq	0x10(%rbp), %rax
    00000121: 	addq	$0x20, %rbp
    00000125: 	leaq	0x1(%rax), %rsi
    00000129: 	callq	_ZdlPvm@PLT # Offset: 297
    0000012e: 	cmpq	%rbp, 0x10(%rsp)
    00000133: 	jne	.Ltmp1007 # Offset: 307
.Ltmp1005:
    00000135: 	cmpq	%r14, 0x8(%rsp)
    0000013a: 	je	.Ltmp1008 # Offset: 314
    0000013c: 	nopl	(%rax) # Size: 4
.Ltmp1010:
    00000140: 	movq	(%r14), %rdi
    00000143: 	leaq	0x10(%r14), %rax
    00000147: 	cmpq	%rax, %rdi
    0000014a: 	je	.Ltmp1009 # Offset: 330
    00000150: 	movq	0x10(%r14), %rax
    00000154: 	addq	$0x20, %r14
    00000158: 	leaq	0x1(%rax), %rsi
    0000015c: 	callq	_ZdlPvm@PLT # Offset: 348
    00000161: 	cmpq	%r14, 0x8(%rsp)
    00000166: 	jne	.Ltmp1010 # Offset: 358
.Ltmp1008:
    00000168: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    0000016f: 	leaq	0x8(%rax), %rbx
    00000173: 	cmpq	%r12, %rbx
    00000176: 	jbe	.Ltmp1011 # Offset: 374
    00000178: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1012:
    00000180: 	movq	(%r12), %rdi
    00000184: 	movl	$0x200, %esi
    00000189: 	addq	$0x8, %r12
    0000018d: 	callq	_ZdlPvm@PLT # Offset: 397
    00000192: 	cmpq	%r12, %rbx
    00000195: 	ja	.Ltmp1012 # Offset: 405
.Ltmp1011:
    00000197: 	movslq	init_value(%rip), %r13
    0000019e: 	movdqa	0x20(%rsp), %xmm3
    000001a4: 	leaq	0x100(%rsp), %rbp
    000001ac: 	leaq	DATAat0x17970(%rip), %rdx
    000001b3: 	movdqa	0x30(%rsp), %xmm4
    000001b9: 	movq	(%rsp), %rsi
    000001bd: 	movq	%rbp, %rdi
    000001c0: 	movq	%r13, %xmm0
    000001c5: 	movq	%r13, 0xd0(%rsp)
    000001cd: 	punpcklqdq	%xmm0, %xmm0
    000001d1: 	movaps	%xmm3, _Z7gLabelsB5cxx11+48(%rip)
    000001d8: 	movaps	%xmm4, _Z7gLabelsB5cxx11+64(%rip)
    000001df: 	movaps	%xmm0, 0x80(%rsp)
    000001e7: 	movaps	%xmm0, 0x90(%rsp)
    000001ef: 	movaps	%xmm0, 0xa0(%rsp)
    000001f7: 	movaps	%xmm0, 0xb0(%rsp)
    000001ff: 	movaps	%xmm0, 0xc0(%rsp)
    00000207: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 519
    0000020c: 	callq	clock@PLT # Offset: 524
    00000211: 	movq	%rax, start_time(%rip)
    00000218: 	movslq	iterations(%rip), %rax
    0000021f: 	leaq	(%rax,%rax), %rbx
    00000223: 	leaq	(%rbx,%rax), %r12
    00000227: 	leaq	(,%r12,4), %rdx
    0000022f: 	leaq	(%rdx,%rax), %rcx
    00000233: 	leaq	(%r13,%rcx,4), %r11
    00000238: 	movq	%rax, %rcx
    0000023b: 	leaq	0x80(%rsp), %r13
    00000243: 	movq	%r11, %r10
    00000246: 	shlq	$0x4, %rcx
    0000024a: 	movq	%r11, 0x80(%rsp)
    00000252: 	subq	%rdx, %r10
    00000255: 	leaq	(,%rax,4), %rdx
    0000025d: 	movq	%r10, %rsi
    00000260: 	movq	%r10, 0x88(%rsp)
    00000268: 	subq	%rdx, %rsi
    0000026b: 	addq	%rax, %rdx
    0000026e: 	movq	%rsi, %r9
    00000271: 	leaq	(%rax,%rdx,2), %rdi
    00000275: 	movq	%rsi, 0x90(%rsp)
    0000027d: 	subq	%rcx, %r9
    00000280: 	subq	%rax, %rcx
    00000283: 	movq	%rsi, 0xa0(%rsp)
    0000028b: 	movq	%rbp, %rsi
    0000028e: 	movq	%r9, %r8
    00000291: 	movq	%r9, 0x98(%rsp)
    00000299: 	subq	%rdi, %r8
    0000029c: 	leaq	(%r8,%r12,2), %rdi
    000002a0: 	movq	%r8, 0xa8(%rsp)
    000002a8: 	leaq	(%rcx,%rdi), %rax
    000002ac: 	leaq	(%r12,%r12,8), %rcx
    000002b0: 	movq	%rdi, 0xb0(%rsp)
    000002b8: 	movq	%r13, %rdi
    000002bb: 	addq	%rax, %rcx
    000002be: 	movq	%rax, 0xb8(%rsp)
    000002c6: 	movq	%rcx, %r12
    000002c9: 	movq	%rcx, %xmm0
    000002ce: 	subq	%rbx, %r12
    000002d1: 	movq	%r12, %xmm5
    000002d6: 	addq	%r12, %rdx
    000002d9: 	punpcklqdq	%xmm5, %xmm0
    000002dd: 	movq	%rdx, 0xd0(%rsp)
    000002e5: 	movaps	%xmm0, 0xc0(%rsp)
    000002ed: 	callq	_Z12check11_sumsImEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 749
    000002f2: 	movq	%rbp, %rdi
    000002f5: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 757
    000002fa: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000301: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000308: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000030f: 	je	.Ltmp1013 # Offset: 783
.Ltmp1045:
    00000315: 	movq	-0x20(%rax), %r12
    00000319: 	callq	clock@PLT # Offset: 793
    0000031e: 	pxor	%xmm0, %xmm0
    00000322: 	movq	%rax, end_time(%rip)
    00000329: 	movq	%r12, %rdi
    0000032c: 	subq	start_time(%rip), %rax
    00000333: 	cvtsi2sd	%rax, %xmm0
    00000338: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000340: 	callq	_Z13record_resultdPKc # Offset: 832
    00000345: 	movq	0x100(%rsp), %rdi
    0000034d: 	leaq	0x110(%rsp), %rbx
    00000355: 	cmpq	%rbx, %rdi
    00000358: 	je	.Ltmp1014 # Offset: 856
    0000035a: 	movq	0x110(%rsp), %rax
    00000362: 	leaq	0x1(%rax), %rsi
    00000366: 	callq	_ZdlPvm@PLT # Offset: 870
.Ltmp1014:
    0000036b: 	movslq	init_value(%rip), %r12
    00000372: 	movq	(%rsp), %rsi
    00000376: 	leaq	DATAat0x179a0(%rip), %rdx
    0000037d: 	movq	%rbp, %rdi
    00000380: 	movq	%r12, %xmm0
    00000385: 	movq	%r12, 0xd0(%rsp)
    0000038d: 	punpcklqdq	%xmm0, %xmm0
    00000391: 	movaps	%xmm0, 0x80(%rsp)
    00000399: 	movaps	%xmm0, 0x90(%rsp)
    000003a1: 	movaps	%xmm0, 0xa0(%rsp)
    000003a9: 	movaps	%xmm0, 0xb0(%rsp)
    000003b1: 	movaps	%xmm0, 0xc0(%rsp)
    000003b9: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 953
    000003be: 	callq	clock@PLT # Offset: 958
    000003c3: 	movq	%rax, start_time(%rip)
    000003ca: 	movl	iterations(%rip), %eax
    000003d0: 	testl	%eax, %eax
    000003d2: 	jle	.Ltmp1015 # Offset: 978
    000003d8: 	subl	$0x1, %eax
    000003db: 	leaq	(%rax,%rax,2), %rdx
    000003df: 	leaq	(,%rax,8), %rcx
    000003e7: 	leaq	(%rax,%rdx,4), %rdx
    000003eb: 	leaq	(%rax,%rax,4), %rsi
    000003ef: 	leaq	0x34(%r12,%rdx,4), %r14
    000003f4: 	leaq	(%rcx,%rax), %rdx
    000003f8: 	subq	%rax, %rcx
    000003fb: 	leaq	0x24(%r12,%rdx,4), %rdi
    00000400: 	leaq	0x9(%r12,%rdx), %r9
    00000405: 	movq	%rax, %rdx
    00000408: 	shlq	$0x4, %rdx
    0000040c: 	leaq	(%rax,%rcx,8), %rcx
    00000410: 	leaq	0x28(%r12,%rsi,8), %r11
    00000415: 	subq	%rax, %rdx
    00000418: 	leaq	(%rax,%rsi,2), %rax
    0000041c: 	leaq	0x14(%r12,%rsi,4), %r10
    00000421: 	leaq	(%rax,%rax,4), %rax
    00000425: 	leaq	0xf(%r12,%rdx), %r8
    0000042a: 	leaq	0x1e(%r12,%rdx,2), %r15
    0000042f: 	leaq	0x39(%r12,%rcx), %rcx
    00000434: 	leaq	0x37(%r12,%rax), %rax
    00000439: 	leaq	0x3c(%r12,%rdx,4), %r12
.Ltmp1054:
    0000043e: 	movq	%rdi, 0x90(%rsp)
    00000446: 	movq	%rbp, %rsi
    00000449: 	movq	%rdi, 0xa0(%rsp)
    00000451: 	movq	%r13, %rdi
    00000454: 	movq	%r14, 0x80(%rsp)
    0000045c: 	movq	%r11, 0x88(%rsp)
    00000464: 	movq	%r10, 0x98(%rsp)
    0000046c: 	movq	%r9, 0xa8(%rsp)
    00000474: 	movq	%r8, 0xb0(%rsp)
    0000047c: 	movq	%r15, 0xb8(%rsp)
    00000484: 	movq	%rcx, 0xc0(%rsp)
    0000048c: 	movq	%rax, 0xc8(%rsp)
    00000494: 	movq	%r12, 0xd0(%rsp)
    0000049c: 	callq	_Z12check11_sumsImEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1180
    000004a1: 	movq	%rbp, %rdi
    000004a4: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1188
    000004a9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004b0: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000004b7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004be: 	je	.Ltmp1016 # Offset: 1214
.Ltmp1050:
    000004c4: 	movq	-0x20(%rax), %r12
    000004c8: 	callq	clock@PLT # Offset: 1224
    000004cd: 	pxor	%xmm0, %xmm0
    000004d1: 	movq	%rax, end_time(%rip)
    000004d8: 	movq	%r12, %rdi
    000004db: 	subq	start_time(%rip), %rax
    000004e2: 	cvtsi2sd	%rax, %xmm0
    000004e7: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000004ef: 	callq	_Z13record_resultdPKc # Offset: 1263
    000004f4: 	movq	0x100(%rsp), %rdi
    000004fc: 	cmpq	%rbx, %rdi
    000004ff: 	je	.Ltmp1017 # Offset: 1279
    00000501: 	movq	0x110(%rsp), %rax
    00000509: 	leaq	0x1(%rax), %rsi
    0000050d: 	callq	_ZdlPvm@PLT # Offset: 1293
.Ltmp1017:
    00000512: 	movslq	init_value(%rip), %r12
    00000519: 	movq	(%rsp), %rsi
    0000051d: 	leaq	DATAat0x179d0(%rip), %rdx
    00000524: 	movq	%rbp, %rdi
    00000527: 	movq	%r12, %xmm0
    0000052c: 	movq	%r12, 0xd0(%rsp)
    00000534: 	punpcklqdq	%xmm0, %xmm0
    00000538: 	movaps	%xmm0, 0x80(%rsp)
    00000540: 	movaps	%xmm0, 0x90(%rsp)
    00000548: 	movaps	%xmm0, 0xa0(%rsp)
    00000550: 	movaps	%xmm0, 0xb0(%rsp)
    00000558: 	movaps	%xmm0, 0xc0(%rsp)
    00000560: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1376
    00000565: 	callq	clock@PLT # Offset: 1381
    0000056a: 	movq	%rax, start_time(%rip)
    00000571: 	movl	iterations(%rip), %eax
    00000577: 	testl	%eax, %eax
    00000579: 	jle	.Ltmp1018 # Offset: 1401
    0000057f: 	subl	$0x1, %eax
    00000582: 	leaq	(%rax,%rax,2), %rdx
    00000586: 	leaq	(,%rax,8), %rsi
    0000058e: 	leaq	(%rax,%rdx,4), %rdx
    00000592: 	leaq	(%rsi,%rax), %r11
    00000596: 	subq	%rax, %rsi
    00000599: 	leaq	0x34(%r12,%rdx,4), %r14
    0000059e: 	movq	%rax, %rdx
    000005a1: 	leaq	(%rax,%rax,4), %rcx
    000005a5: 	shlq	$0x4, %rdx
    000005a9: 	leaq	(%rax,%rsi,8), %rsi
    000005ad: 	leaq	0x9(%r12,%r11), %r9
    000005b2: 	subq	%rax, %rdx
    000005b5: 	leaq	(%rax,%rcx,2), %rax
    000005b9: 	leaq	0x39(%r12,%rsi), %rdi
    000005be: 	leaq	(%rax,%rax,4), %rax
    000005c2: 	leaq	0xf(%r12,%rdx), %r8
    000005c7: 	leaq	0x24(%r12,%r11,4), %rsi
    000005cc: 	leaq	0x3c(%r12,%rdx,4), %r15
    000005d1: 	leaq	0x14(%r12,%rcx,4), %r10
    000005d6: 	leaq	0x28(%r12,%rcx,8), %r11
    000005db: 	leaq	0x1e(%r12,%rdx,2), %rdx
    000005e0: 	leaq	0x37(%r12,%rax), %r12
.Ltmp1051:
    000005e5: 	movq	%rsi, 0x90(%rsp)
    000005ed: 	movq	%rsi, 0xa0(%rsp)
    000005f5: 	movq	%rbp, %rsi
    000005f8: 	movq	%rdi, 0xc0(%rsp)
    00000600: 	movq	%r13, %rdi
    00000603: 	movq	%r14, 0x80(%rsp)
    0000060b: 	movq	%r11, 0x88(%rsp)
    00000613: 	movq	%r10, 0x98(%rsp)
    0000061b: 	movq	%r9, 0xa8(%rsp)
    00000623: 	movq	%r8, 0xb0(%rsp)
    0000062b: 	movq	%rdx, 0xb8(%rsp)
    00000633: 	movq	%r12, 0xc8(%rsp)
    0000063b: 	movq	%r15, 0xd0(%rsp)
    00000643: 	callq	_Z12check11_sumsImEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1603
    00000648: 	movq	%rbp, %rdi
    0000064b: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1611
    00000650: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000657: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    0000065e: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000665: 	je	.Ltmp1019 # Offset: 1637
.Ltmp1049:
    0000066b: 	movq	-0x20(%rax), %r12
    0000066f: 	callq	clock@PLT # Offset: 1647
    00000674: 	pxor	%xmm0, %xmm0
    00000678: 	movq	%rax, end_time(%rip)
    0000067f: 	movq	%r12, %rdi
    00000682: 	subq	start_time(%rip), %rax
    00000689: 	cvtsi2sd	%rax, %xmm0
    0000068e: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000696: 	callq	_Z13record_resultdPKc # Offset: 1686
    0000069b: 	movq	0x100(%rsp), %rdi
    000006a3: 	cmpq	%rbx, %rdi
    000006a6: 	je	.Ltmp1020 # Offset: 1702
    000006a8: 	movq	0x110(%rsp), %rax
    000006b0: 	leaq	0x1(%rax), %rsi
    000006b4: 	callq	_ZdlPvm@PLT # Offset: 1716
.Ltmp1020:
    000006b9: 	movslq	init_value(%rip), %rax
    000006c0: 	movq	(%rsp), %rsi
    000006c4: 	leaq	DATAat0x17a00(%rip), %rdx
    000006cb: 	movq	%rbp, %rdi
    000006ce: 	movq	%rax, %xmm0
    000006d3: 	movq	%rax, 0xd0(%rsp)
    000006db: 	punpcklqdq	%xmm0, %xmm0
    000006df: 	movaps	%xmm0, 0x80(%rsp)
    000006e7: 	movaps	%xmm0, 0x90(%rsp)
    000006ef: 	movaps	%xmm0, 0xa0(%rsp)
    000006f7: 	movaps	%xmm0, 0xb0(%rsp)
    000006ff: 	movaps	%xmm0, 0xc0(%rsp)
    00000707: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1799
    0000070c: 	movq	%rbp, %rsi
    0000070f: 	movq	%r13, %rdi
    00000712: 	callq	_Z15test_struct_argImEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1810
    00000717: 	movq	0x100(%rsp), %rdi
    0000071f: 	cmpq	%rbx, %rdi
    00000722: 	je	.Ltmp1021 # Offset: 1826
    00000724: 	movq	0x110(%rsp), %rax
    0000072c: 	leaq	0x1(%rax), %rsi
    00000730: 	callq	_ZdlPvm@PLT # Offset: 1840
.Ltmp1021:
    00000735: 	movslq	init_value(%rip), %r12
    0000073c: 	movq	(%rsp), %rsi
    00000740: 	leaq	DATAat0x17a28(%rip), %rdx
    00000747: 	movq	%rbp, %rdi
    0000074a: 	movq	%r12, %xmm0
    0000074f: 	movq	%r12, 0x70(%rsp)
    00000754: 	punpcklqdq	%xmm0, %xmm0
    00000758: 	movaps	%xmm0, 0x50(%rsp)
    0000075d: 	movaps	%xmm0, 0x60(%rsp)
    00000762: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1890
    00000767: 	callq	clock@PLT # Offset: 1895
    0000076c: 	leaq	0x50(%rsp), %r13
    00000771: 	movq	%rax, start_time(%rip)
    00000778: 	movslq	iterations(%rip), %rax
    0000077f: 	leaq	(%rax,%rax,2), %rdx
    00000783: 	leaq	(,%rax,4), %rdi
    0000078b: 	shlq	$0x2, %rdx
    0000078f: 	leaq	(%rdx,%rax), %rcx
    00000793: 	shlq	$0x4, %rax
    00000797: 	leaq	(%r12,%rcx,4), %rsi
    0000079b: 	movq	%rsi, %rcx
    0000079e: 	movq	%rsi, 0x50(%rsp)
    000007a3: 	movq	%rbp, %rsi
    000007a6: 	subq	%rdx, %rcx
    000007a9: 	movq	%rcx, %rdx
    000007ac: 	movq	%rcx, 0x58(%rsp)
    000007b1: 	subq	%rdi, %rdx
    000007b4: 	movq	%r13, %rdi
    000007b7: 	movq	%rdx, %rcx
    000007ba: 	movq	%rdx, 0x60(%rsp)
    000007bf: 	subq	%rax, %rcx
    000007c2: 	movq	%rdx, 0x70(%rsp)
    000007c7: 	movq	%rcx, 0x68(%rsp)
    000007cc: 	callq	_Z11check5_sumsImEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1996
    000007d1: 	movq	%rbp, %rdi
    000007d4: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2004
    000007d9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000007e0: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000007e7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000007ee: 	je	.Ltmp1022 # Offset: 2030
.Ltmp1048:
    000007f4: 	movq	-0x20(%rax), %r12
    000007f8: 	callq	clock@PLT # Offset: 2040
    000007fd: 	pxor	%xmm0, %xmm0
    00000801: 	movq	%rax, end_time(%rip)
    00000808: 	movq	%r12, %rdi
    0000080b: 	subq	start_time(%rip), %rax
    00000812: 	cvtsi2sd	%rax, %xmm0
    00000817: 	divsd	DATAat0x17ca0(%rip), %xmm0
    0000081f: 	callq	_Z13record_resultdPKc # Offset: 2079
    00000824: 	movq	0x100(%rsp), %rdi
    0000082c: 	cmpq	%rbx, %rdi
    0000082f: 	je	.Ltmp1023 # Offset: 2095
    00000831: 	movq	0x110(%rsp), %rax
    00000839: 	leaq	0x1(%rax), %rsi
    0000083d: 	callq	_ZdlPvm@PLT # Offset: 2109
.Ltmp1023:
    00000842: 	movslq	init_value(%rip), %r12
    00000849: 	movq	(%rsp), %rsi
    0000084d: 	leaq	DATAat0x17a60(%rip), %rdx
    00000854: 	movq	%rbp, %rdi
    00000857: 	movq	%r12, %xmm0
    0000085c: 	movq	%r12, 0x70(%rsp)
    00000861: 	punpcklqdq	%xmm0, %xmm0
    00000865: 	movaps	%xmm0, 0x50(%rsp)
    0000086a: 	movaps	%xmm0, 0x60(%rsp)
    0000086f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2159
    00000874: 	callq	clock@PLT # Offset: 2164
    00000879: 	movq	%rax, start_time(%rip)
    00000880: 	movl	iterations(%rip), %eax
    00000886: 	testl	%eax, %eax
    00000888: 	jle	.Ltmp1024 # Offset: 2184
    0000088e: 	subl	$0x1, %eax
    00000891: 	leaq	(%rax,%rax,2), %rdx
    00000895: 	leaq	(%rax,%rdx,4), %rdx
    00000899: 	leaq	0x34(%r12,%rdx,4), %rsi
    0000089e: 	leaq	(%rax,%rax,4), %rdx
    000008a2: 	leaq	(%rax,%rax,8), %rax
    000008a6: 	leaq	0x28(%r12,%rdx,8), %rcx
    000008ab: 	leaq	0x24(%r12,%rax,4), %rax
    000008b0: 	leaq	0x14(%r12,%rdx,4), %r12
.Ltmp1053:
    000008b5: 	movq	%rsi, 0x50(%rsp)
    000008ba: 	movq	%r13, %rdi
    000008bd: 	movq	%rbp, %rsi
    000008c0: 	movq	%rcx, 0x58(%rsp)
    000008c5: 	movq	%rax, 0x60(%rsp)
    000008ca: 	movq	%r12, 0x68(%rsp)
    000008cf: 	movq	%rax, 0x70(%rsp)
    000008d4: 	callq	_Z11check5_sumsImEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2260
    000008d9: 	movq	%rbp, %rdi
    000008dc: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2268
    000008e1: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000008e8: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000008ef: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000008f6: 	je	.Ltmp1025 # Offset: 2294
.Ltmp1047:
    000008fc: 	movq	-0x20(%rax), %r12
    00000900: 	callq	clock@PLT # Offset: 2304
    00000905: 	pxor	%xmm0, %xmm0
    00000909: 	movq	%rax, end_time(%rip)
    00000910: 	movq	%r12, %rdi
    00000913: 	subq	start_time(%rip), %rax
    0000091a: 	cvtsi2sd	%rax, %xmm0
    0000091f: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000927: 	callq	_Z13record_resultdPKc # Offset: 2343
    0000092c: 	movq	0x100(%rsp), %rdi
    00000934: 	cmpq	%rbx, %rdi
    00000937: 	je	.Ltmp1026 # Offset: 2359
    00000939: 	movq	0x110(%rsp), %rax
    00000941: 	leaq	0x1(%rax), %rsi
    00000945: 	callq	_ZdlPvm@PLT # Offset: 2373
.Ltmp1026:
    0000094a: 	movslq	init_value(%rip), %r12
    00000951: 	movq	(%rsp), %rsi
    00000955: 	leaq	DATAat0x17a98(%rip), %rdx
    0000095c: 	movq	%rbp, %rdi
    0000095f: 	movq	%r12, %xmm0
    00000964: 	movq	%r12, 0x70(%rsp)
    00000969: 	punpcklqdq	%xmm0, %xmm0
    0000096d: 	movaps	%xmm0, 0x50(%rsp)
    00000972: 	movaps	%xmm0, 0x60(%rsp)
    00000977: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2423
    0000097c: 	callq	clock@PLT # Offset: 2428
    00000981: 	movq	%rax, start_time(%rip)
    00000988: 	movl	iterations(%rip), %eax
    0000098e: 	testl	%eax, %eax
    00000990: 	jle	.Ltmp1027 # Offset: 2448
    00000996: 	subl	$0x1, %eax
    00000999: 	leaq	(%rax,%rax,2), %rdx
    0000099d: 	leaq	(%rax,%rdx,4), %rdx
    000009a1: 	leaq	0x34(%r12,%rdx,4), %rsi
    000009a6: 	leaq	(%rax,%rax,4), %rdx
    000009aa: 	leaq	(%rax,%rax,8), %rax
    000009ae: 	leaq	0x14(%r12,%rdx,4), %rcx
    000009b3: 	leaq	0x24(%r12,%rax,4), %rax
    000009b8: 	leaq	0x28(%r12,%rdx,8), %r12
.Ltmp1052:
    000009bd: 	movq	%rsi, 0x50(%rsp)
    000009c2: 	movq	%r13, %rdi
    000009c5: 	movq	%rbp, %rsi
    000009c8: 	movq	%r12, 0x58(%rsp)
    000009cd: 	movq	%rax, 0x60(%rsp)
    000009d2: 	movq	%rcx, 0x68(%rsp)
    000009d7: 	movq	%rax, 0x70(%rsp)
    000009dc: 	callq	_Z11check5_sumsImEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2524
    000009e1: 	movq	%rbp, %rdi
    000009e4: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2532
    000009e9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000009f0: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000009f7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000009fe: 	je	.Ltmp1028 # Offset: 2558
.Ltmp1046:
    00000a04: 	movq	-0x20(%rax), %r12
    00000a08: 	callq	clock@PLT # Offset: 2568
    00000a0d: 	pxor	%xmm0, %xmm0
    00000a11: 	movq	%rax, end_time(%rip)
    00000a18: 	movq	%r12, %rdi
    00000a1b: 	subq	start_time(%rip), %rax
    00000a22: 	cvtsi2sd	%rax, %xmm0
    00000a27: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000a2f: 	callq	_Z13record_resultdPKc # Offset: 2607
    00000a34: 	movq	0x100(%rsp), %rdi
    00000a3c: 	cmpq	%rbx, %rdi
    00000a3f: 	je	.Ltmp1029 # Offset: 2623
    00000a41: 	movq	0x110(%rsp), %rax
    00000a49: 	leaq	0x1(%rax), %rsi
    00000a4d: 	callq	_ZdlPvm@PLT # Offset: 2637
.Ltmp1029:
    00000a52: 	movslq	init_value(%rip), %rax
    00000a59: 	movq	(%rsp), %rsi
    00000a5d: 	leaq	DATAat0x17ad0(%rip), %rdx
    00000a64: 	movq	%rbp, %rdi
    00000a67: 	movq	%rax, %xmm0
    00000a6c: 	movq	%rax, 0x70(%rsp)
    00000a71: 	punpcklqdq	%xmm0, %xmm0
    00000a75: 	movaps	%xmm0, 0x50(%rsp)
    00000a7a: 	movaps	%xmm0, 0x60(%rsp)
    00000a7f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2687
    00000a84: 	movq	%rbp, %rsi
    00000a87: 	movq	%r13, %rdi
    00000a8a: 	callq	_Z16test_struct5_argImEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2698
    00000a8f: 	movq	0x100(%rsp), %rdi
    00000a97: 	cmpq	%rbx, %rdi
    00000a9a: 	je	.Ltmp1030 # Offset: 2714
    00000a9c: 	movq	0x110(%rsp), %rax
    00000aa4: 	leaq	0x1(%rax), %rsi
    00000aa8: 	callq	_ZdlPvm@PLT # Offset: 2728
.Ltmp1030:
    00000aad: 	movq	(%rsp), %rsi
    00000ab1: 	leaq	DATAat0x17b00(%rip), %rdx
    00000ab8: 	movq	%rbp, %rdi
    00000abb: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2747
    00000ac0: 	movq	%rbp, %rdi
    00000ac3: 	callq	_Z18test_struct_local0ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2755
    00000ac8: 	movq	0x100(%rsp), %rdi
    00000ad0: 	cmpq	%rbx, %rdi
    00000ad3: 	je	.Ltmp1031 # Offset: 2771
    00000ad5: 	movq	0x110(%rsp), %rax
    00000add: 	leaq	0x1(%rax), %rsi
    00000ae1: 	callq	_ZdlPvm@PLT # Offset: 2785
.Ltmp1031:
    00000ae6: 	movq	(%rsp), %rsi
    00000aea: 	leaq	DATAat0x17b30(%rip), %rdx
    00000af1: 	movq	%rbp, %rdi
    00000af4: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2804
    00000af9: 	movq	%rbp, %rdi
    00000afc: 	callq	_Z18test_struct_local1ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2812
    00000b01: 	movq	0x100(%rsp), %rdi
    00000b09: 	cmpq	%rbx, %rdi
    00000b0c: 	je	.Ltmp1032 # Offset: 2828
    00000b0e: 	movq	0x110(%rsp), %rax
    00000b16: 	leaq	0x1(%rax), %rsi
    00000b1a: 	callq	_ZdlPvm@PLT # Offset: 2842
.Ltmp1032:
    00000b1f: 	movq	(%rsp), %rsi
    00000b23: 	leaq	DATAat0x17b60(%rip), %rdx
    00000b2a: 	movq	%rbp, %rdi
    00000b2d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2861
    00000b32: 	movq	%rbp, %rdi
    00000b35: 	callq	_Z18test_struct_local2ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2869
    00000b3a: 	movq	0x100(%rsp), %rdi
    00000b42: 	cmpq	%rbx, %rdi
    00000b45: 	je	.Ltmp1033 # Offset: 2885
    00000b47: 	movq	0x110(%rsp), %rax
    00000b4f: 	leaq	0x1(%rax), %rsi
    00000b53: 	callq	_ZdlPvm@PLT # Offset: 2899
.Ltmp1033:
    00000b58: 	movq	(%rsp), %rsi
    00000b5c: 	leaq	DATAat0x17b90(%rip), %rdx
    00000b63: 	movq	%rbp, %rdi
    00000b66: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2918
    00000b6b: 	movq	%rbp, %rdi
    00000b6e: 	callq	_Z17test_struct_localImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2926
    00000b73: 	movq	0x100(%rsp), %rdi
    00000b7b: 	cmpq	%rbx, %rdi
    00000b7e: 	je	.Ltmp1034 # Offset: 2942
    00000b80: 	movq	0x110(%rsp), %rax
    00000b88: 	leaq	0x1(%rax), %rsi
    00000b8c: 	callq	_ZdlPvm@PLT # Offset: 2956
.Ltmp1034:
    00000b91: 	movq	(%rsp), %rsi
    00000b95: 	leaq	DATAat0x17bb8(%rip), %rdx
    00000b9c: 	movq	%rbp, %rdi
    00000b9f: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2975
    00000ba4: 	movq	%rbp, %rdi
    00000ba7: 	callq	_Z19test_struct5_local0ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2983
    00000bac: 	movq	0x100(%rsp), %rdi
    00000bb4: 	cmpq	%rbx, %rdi
    00000bb7: 	je	.Ltmp1035 # Offset: 2999
    00000bb9: 	movq	0x110(%rsp), %rax
    00000bc1: 	leaq	0x1(%rax), %rsi
    00000bc5: 	callq	_ZdlPvm@PLT # Offset: 3013
.Ltmp1035:
    00000bca: 	movq	(%rsp), %rsi
    00000bce: 	leaq	DATAat0x17be8(%rip), %rdx
    00000bd5: 	movq	%rbp, %rdi
    00000bd8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3032
    00000bdd: 	movq	%rbp, %rdi
    00000be0: 	callq	_Z19test_struct5_local1ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3040
    00000be5: 	movq	0x100(%rsp), %rdi
    00000bed: 	cmpq	%rbx, %rdi
    00000bf0: 	je	.Ltmp1036 # Offset: 3056
    00000bf2: 	movq	0x110(%rsp), %rax
    00000bfa: 	leaq	0x1(%rax), %rsi
    00000bfe: 	callq	_ZdlPvm@PLT # Offset: 3070
.Ltmp1036:
    00000c03: 	movq	(%rsp), %rsi
    00000c07: 	leaq	DATAat0x17c18(%rip), %rdx
    00000c0e: 	movq	%rbp, %rdi
    00000c11: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3089
    00000c16: 	movq	%rbp, %rdi
    00000c19: 	callq	_Z19test_struct5_local2ImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3097
    00000c1e: 	movq	0x100(%rsp), %rdi
    00000c26: 	cmpq	%rbx, %rdi
    00000c29: 	je	.Ltmp1037 # Offset: 3113
    00000c2b: 	movq	0x110(%rsp), %rax
    00000c33: 	leaq	0x1(%rax), %rsi
    00000c37: 	callq	_ZdlPvm@PLT # Offset: 3127
.Ltmp1037:
    00000c3c: 	movq	(%rsp), %rsi
    00000c40: 	leaq	DATAat0x17c48(%rip), %rdx
    00000c47: 	movq	%rbp, %rdi
    00000c4a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3146
    00000c4f: 	movq	%rbp, %rdi
    00000c52: 	callq	_Z18test_struct5_localImEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3154
    00000c57: 	movq	0x100(%rsp), %rdi
    00000c5f: 	cmpq	%rbx, %rdi
    00000c62: 	je	.Ltmp1038 # Offset: 3170
    00000c64: 	movq	0x110(%rsp), %rax
    00000c6c: 	leaq	0x1(%rax), %rsi
    00000c70: 	callq	_ZdlPvm@PLT # Offset: 3184
.Ltmp1038:
    00000c75: 	movq	0xe0(%rsp), %rdi
    00000c7d: 	leaq	0xf0(%rsp), %rax
    00000c85: 	cmpq	%rax, %rdi
    00000c88: 	je	.Ltmp1039 # Offset: 3208
    00000c8a: 	movq	0xf0(%rsp), %rax
    00000c92: 	leaq	0x1(%rax), %rsi
    00000c96: 	callq	_ZdlPvm@PLT # Offset: 3222
.Ltmp1039:
    00000c9b: 	movq	0x128(%rsp), %rax
    00000ca3: 	subq	%fs:0x28, %rax
    00000cac: 	jne	.Ltmp1040 # Offset: 3244
    00000cb2: 	addq	$0x138, %rsp
    00000cb9: 	popq	%rbx
    00000cba: 	popq	%rbp
    00000cbb: 	popq	%r12
    00000cbd: 	popq	%r13
    00000cbf: 	popq	%r14
    00000cc1: 	popq	%r15
    00000cc3: 	retq # Offset: 3267
    00000cc4: 	nopl	(%rax) # Size: 4
.Ltmp1041:
    00000cc8: 	addq	$0x20, %rbp
.Ltmp1004:
    00000ccc: 	cmpq	%rbp, 0x8(%rsp)
    00000cd1: 	je	.Ltmp1008 # Offset: 3281
.Ltmp1042:
    00000cd7: 	movq	(%rbp), %rdi
    00000cdb: 	leaq	0x10(%rbp), %rax
    00000cdf: 	cmpq	%rax, %rdi
    00000ce2: 	je	.Ltmp1041 # Offset: 3298
    00000ce4: 	movq	0x10(%rbp), %rax
    00000ce8: 	addq	$0x20, %rbp
    00000cec: 	leaq	0x1(%rax), %rsi
    00000cf0: 	callq	_ZdlPvm@PLT # Offset: 3312
    00000cf5: 	cmpq	%rbp, 0x8(%rsp)
    00000cfa: 	jne	.Ltmp1042 # Offset: 3322
    00000cfc: 	jmp	.Ltmp1008 # Offset: 3324
    00000d01: 	nopl	(%rax) # Size: 7
.Ltmp1001:
    00000d08: 	addq	$0x20, %rbp
    00000d0c: 	cmpq	%rbp, %rbx
    00000d0f: 	jne	.Ltmp1002 # Offset: 3343
    00000d15: 	addq	$0x8, %r13
    00000d19: 	cmpq	%r13, %r15
    00000d1c: 	ja	.Ltmp1003 # Offset: 3356
    00000d22: 	jmp	.Ltmp1043 # Offset: 3362
    00000d27: 	nopw	(%rax,%rax) # Size: 9
.Ltmp1006:
    00000d30: 	addq	$0x20, %rbp
    00000d34: 	jmp	.Ltmp1044 # Offset: 3380
    00000d39: 	nopl	(%rax) # Size: 7
.Ltmp1009:
    00000d40: 	addq	$0x20, %r14
    00000d44: 	cmpq	%r14, 0x8(%rsp)
    00000d49: 	jne	.Ltmp1010 # Offset: 3401
    00000d4f: 	jmp	.Ltmp1008 # Offset: 3407
.Ltmp1013:
    00000d54: 	movq	-0x8(%rdx), %rax
    00000d58: 	addq	$0x200, %rax
    00000d5e: 	jmp	.Ltmp1045 # Offset: 3422
.Ltmp1028:
    00000d63: 	movq	-0x8(%rdx), %rax
    00000d67: 	addq	$0x200, %rax
    00000d6d: 	jmp	.Ltmp1046 # Offset: 3437
.Ltmp1025:
    00000d72: 	movq	-0x8(%rdx), %rax
    00000d76: 	addq	$0x200, %rax
    00000d7c: 	jmp	.Ltmp1047 # Offset: 3452
.Ltmp1022:
    00000d81: 	movq	-0x8(%rdx), %rax
    00000d85: 	addq	$0x200, %rax
    00000d8b: 	jmp	.Ltmp1048 # Offset: 3467
.Ltmp1019:
    00000d90: 	movq	-0x8(%rdx), %rax
    00000d94: 	addq	$0x200, %rax
    00000d9a: 	jmp	.Ltmp1049 # Offset: 3482
.Ltmp1016:
    00000d9f: 	movq	-0x8(%rdx), %rax
    00000da3: 	addq	$0x200, %rax
    00000da9: 	jmp	.Ltmp1050 # Offset: 3497
.Ltmp1018:
    00000dae: 	movq	%r12, %rdx
    00000db1: 	movq	%r12, %r15
    00000db4: 	movq	%r12, %r11
    00000db7: 	movq	%r12, %rsi
    00000dba: 	movq	%r12, %rdi
    00000dbd: 	movq	%r12, %r8
    00000dc0: 	movq	%r12, %r10
    00000dc3: 	movq	%r12, %r14
    00000dc6: 	movq	%r12, %r9
    00000dc9: 	jmp	.Ltmp1051 # Offset: 3529
.Ltmp1027:
    00000dce: 	movq	%r12, %rax
    00000dd1: 	movq	%r12, %rcx
    00000dd4: 	movq	%r12, %rsi
    00000dd7: 	jmp	.Ltmp1052 # Offset: 3543
.Ltmp1024:
    00000ddc: 	movq	%r12, %rax
    00000ddf: 	movq	%r12, %rcx
    00000de2: 	movq	%r12, %rsi
    00000de5: 	jmp	.Ltmp1053 # Offset: 3557
.Ltmp1015:
    00000dea: 	movq	%r12, %rax
    00000ded: 	movq	%r12, %rcx
    00000df0: 	movq	%r12, %r15
    00000df3: 	movq	%r12, %r8
    00000df6: 	movq	%r12, %r9
    00000df9: 	movq	%r12, %r10
    00000dfc: 	movq	%r12, %rdi
    00000dff: 	movq	%r12, %r11
    00000e02: 	movq	%r12, %r14
    00000e05: 	jmp	.Ltmp1054 # Offset: 3589
.Ltmp1040:
    00000e0a: 	callq	__stack_chk_fail@PLT # Offset: 3594
    00000e0f: 	endbr64
.Ltmp1056:
    00000e13: 	movq	%rax, %rbp
    00000e16: 	jmp	.Ltmp1055 # Offset: 3606
    00000e1b: 	endbr64
    00000e1f: 	jmp	.Ltmp1056 # Offset: 3615
    00000e21: 	endbr64
    00000e25: 	jmp	.Ltmp1056 # Offset: 3621
    00000e27: 	endbr64
    00000e2b: 	jmp	.Ltmp1056 # Offset: 3627
    00000e2d: 	endbr64
    00000e31: 	movq	%rax, %rbp
    00000e34: 	jmp	.Ltmp1057 # Offset: 3636
    00000e36: 	endbr64
    00000e3a: 	jmp	.Ltmp1056 # Offset: 3642
.Ltmp1057:
    00000e3c: 	movq	0x100(%rsp), %rdi
    00000e44: 	leaq	0x110(%rsp), %rax
    00000e4c: 	cmpq	%rax, %rdi
    00000e4f: 	je	.Ltmp1058 # Offset: 3663
.Ltmp1060:
    00000e51: 	movq	0x110(%rsp), %rax
    00000e59: 	leaq	0x1(%rax), %rsi
    00000e5d: 	callq	_ZdlPvm@PLT # Offset: 3677
.Ltmp1058:
    00000e62: 	movq	0xe0(%rsp), %rdi
    00000e6a: 	leaq	0xf0(%rsp), %rax
    00000e72: 	cmpq	%rax, %rdi
    00000e75: 	je	.Ltmp1059 # Offset: 3701
    00000e77: 	movq	0xf0(%rsp), %rax
    00000e7f: 	leaq	0x1(%rax), %rsi
    00000e83: 	callq	_ZdlPvm@PLT # Offset: 3715
.Ltmp1059:
    00000e88: 	movq	%rbp, %rdi
    00000e8b: 	callq	_Unwind_Resume@PLT # Offset: 3723
    00000e90: 	endbr64
    00000e94: 	jmp	.Ltmp1056 # Offset: 3732
    00000e99: 	endbr64
    00000e9d: 	jmp	.Ltmp1056 # Offset: 3741
    00000ea2: 	endbr64
    00000ea6: 	jmp	.Ltmp1056 # Offset: 3750
    00000eab: 	endbr64
    00000eaf: 	jmp	.Ltmp1056 # Offset: 3759
    00000eb4: 	endbr64
    00000eb8: 	jmp	.Ltmp1056 # Offset: 3768
    00000ebd: 	endbr64
    00000ec1: 	jmp	.Ltmp1056 # Offset: 3777
    00000ec6: 	endbr64
    00000eca: 	jmp	.Ltmp1056 # Offset: 3786
    00000ecf: 	endbr64
    00000ed3: 	movq	%rax, %rbp
    00000ed6: 	jmp	.Ltmp1058 # Offset: 3798
    00000ed8: 	endbr64
    00000edc: 	jmp	.Ltmp1056 # Offset: 3804
    00000ee1: 	endbr64
    00000ee5: 	jmp	.Ltmp1056 # Offset: 3813
    00000eea: 	endbr64
    00000eee: 	jmp	.Ltmp1056 # Offset: 3822
.Ltmp1055:
    00000ef3: 	movq	0x100(%rsp), %rdi
    00000efb: 	cmpq	%rbx, %rdi
    00000efe: 	jne	.Ltmp1060 # Offset: 3838
    00000f04: 	jmp	.Ltmp1058 # Offset: 3844
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeImEvv"

Binary Function "_Z18test_struct5_localIiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 124
  State       : disassembled
  Address     : 0x129d0
  Size        : 0x226
  MaxSize     : 0x230
  Offset      : 0x129d0
  Section     : .text
  Orc Section : .local.text._Z18test_struct5_localIiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0123:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x18, %rsp
    00000011: 	movl	init_value(%rip), %ebx
    00000017: 	movq	%fs:0x28, %rax
    00000020: 	movq	%rax, 0x8(%rsp)
    00000025: 	xorl	%eax, %eax
    00000027: 	callq	clock@PLT # Offset: 39
    0000002c: 	movq	%rax, start_time(%rip)
    00000033: 	movl	iterations(%rip), %eax
    00000039: 	testl	%eax, %eax
    0000003b: 	jle	.Ltmp1061 # Offset: 59
    00000041: 	imull	$0x34, %eax, %ecx
    00000044: 	movl	%ebx, %edx
    00000046: 	leal	(%rax,%rax,8), %esi
    00000049: 	leal	(%rdx,%rsi,4), %r9d
    0000004d: 	addl	%ecx, %ebx
    0000004f: 	leal	(%rax,%rax,4), %ecx
    00000052: 	leal	(%rdx,%rcx,4), %r8d
    00000056: 	leal	(%rdx,%rcx,8), %edi
.Ltmp1074:
    00000059: 	imull	$0x34, %eax, %edx
    0000005c: 	leal	(%rax,%rax,2), %esi
    0000005f: 	addl	init_value(%rip), %edx
    00000065: 	shll	$0x2, %esi
    00000068: 	movl	%edx, %ecx
    0000006a: 	subl	%esi, %ecx
    0000006c: 	cmpl	%edx, %ebx
    0000006e: 	jne	.Ltmp1062 # Offset: 110
    00000070: 	cmpl	%ecx, %edi
    00000072: 	jne	.Ltmp1062 # Offset: 114
    00000074: 	leal	(,%rax,4), %edx
    0000007b: 	shll	$0x4, %eax
    0000007e: 	subl	%edx, %ecx
    00000080: 	movl	%ecx, %edx
    00000082: 	subl	%eax, %edx
    00000084: 	cmpl	%r8d, %edx
    00000087: 	jne	.Ltmp1062 # Offset: 135
    00000089: 	cmpl	%ecx, %r9d
    0000008c: 	je	.Ltmp1063 # Offset: 140
.Ltmp1062:
    0000008e: 	movq	(%rbp), %rdx
    00000092: 	leaq	DATAat0x17004(%rip), %rsi
    00000099: 	movl	$0x1, %edi
    0000009e: 	xorl	%eax, %eax
    000000a0: 	callq	__printf_chk@PLT # Offset: 160
.Ltmp1063:
    000000a5: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    000000ac: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    000000b3: 	subq	$0x20, %rax
    000000b7: 	cmpq	%rax, %rbx
    000000ba: 	je	.Ltmp1064 # Offset: 186
    000000c0: 	leaq	0x10(%rbx), %rdi
    000000c4: 	movq	0x8(%rbp), %r12
    000000c8: 	movq	%rdi, (%rbx)
    000000cb: 	movq	(%rbp), %r13
    000000cf: 	movq	%r13, %rax
    000000d2: 	addq	%r12, %rax
    000000d5: 	je	.Ltmp1065 # Offset: 213
    000000d7: 	testq	%r13, %r13
    000000da: 	je	.Ltmp1066 # Offset: 218
.Ltmp1065:
    000000e0: 	movq	%r12, (%rsp)
    000000e4: 	cmpq	$0xf, %r12
    000000e8: 	ja	.Ltmp1067 # Offset: 232
    000000ee: 	cmpq	$0x1, %r12
    000000f2: 	jne	.Ltmp1068 # Offset: 242
    000000f8: 	movzbl	(%r13), %eax
    000000fd: 	movb	%al, 0x10(%rbx)
.Ltmp1071:
    00000100: 	movq	%r12, 0x8(%rbx)
    00000104: 	movb	$0x0, (%rdi,%r12)
    00000109: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000110: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000117: 	addq	$0x20, %rax
    0000011b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000122: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000129: 	je	.Ltmp1069 # Offset: 297
.Ltmp1072:
    0000012f: 	movq	-0x20(%rax), %rbp
    00000133: 	callq	clock@PLT # Offset: 307
    00000138: 	movq	%rax, end_time(%rip)
    0000013f: 	movq	0x8(%rsp), %rdx
    00000144: 	subq	%fs:0x28, %rdx
    0000014d: 	jne	.Ltmp1070 # Offset: 333
    00000153: 	subq	start_time(%rip), %rax
    0000015a: 	pxor	%xmm0, %xmm0
    0000015e: 	movq	%rbp, %rdi
    00000161: 	cvtsi2sd	%rax, %xmm0
    00000166: 	divsd	DATAat0x17ca0(%rip), %xmm0
    0000016e: 	addq	$0x18, %rsp
    00000172: 	popq	%rbx
    00000173: 	popq	%rbp
    00000174: 	popq	%r12
    00000176: 	popq	%r13
    00000178: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 376
    0000017d: 	nopl	(%rax) # Size: 3
.Ltmp1067:
    00000180: 	movq	%rbx, %rdi
    00000183: 	movq	%rsp, %rsi
    00000186: 	xorl	%edx, %edx
    00000188: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 392
    0000018d: 	movq	%rax, (%rbx)
    00000190: 	movq	%rax, %rdi
    00000193: 	movq	(%rsp), %rax
    00000197: 	movq	%rax, 0x10(%rbx)
.Ltmp1073:
    0000019b: 	movq	%r12, %rdx
    0000019e: 	movq	%r13, %rsi
    000001a1: 	callq	memcpy@PLT # Offset: 417
    000001a6: 	movq	(%rsp), %r12
    000001aa: 	movq	(%rbx), %rdi
    000001ad: 	jmp	.Ltmp1071 # Offset: 429
    000001b2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1064:
    000001b8: 	movq	%rbp, %rsi
    000001bb: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    000001c2: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 450
    000001c7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000001ce: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000001d5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000001dc: 	jne	.Ltmp1072 # Offset: 476
.Ltmp1069:
    000001e2: 	movq	-0x8(%rdx), %rax
    000001e6: 	addq	$0x200, %rax
    000001ec: 	jmp	.Ltmp1072 # Offset: 492
    000001f1: 	nopl	(%rax) # Size: 7
.Ltmp1068:
    000001f8: 	testq	%r12, %r12
    000001fb: 	je	.Ltmp1071 # Offset: 507
    00000201: 	jmp	.Ltmp1073 # Offset: 513
    00000203: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1061:
    00000208: 	movl	%ebx, %r8d
    0000020b: 	movl	%ebx, %r9d
    0000020e: 	movl	%ebx, %edi
    00000210: 	jmp	.Ltmp1074 # Offset: 528
.Ltmp1066:
    00000215: 	leaq	DATAat0x17018(%rip), %rdi
    0000021c: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 540
.Ltmp1070:
    00000221: 	callq	__stack_chk_fail@PLT # Offset: 545
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_struct5_localIiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIiEvv" after disassembly {
  Number      : 125
  State       : disassembled
  Address     : 0x12c00
  Size        : 0xee3
  MaxSize     : 0xef0
  Offset      : 0x12c00
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIiEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0124:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x17c7c(%rip), %rsi
    0000000d: 	pushq	%r14
    0000000f: 	pushq	%r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0x108, %rsp
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0xf8(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	leaq	0xb0(%rsp), %rax
    00000037: 	movq	%rax, %rdi
    0000003a: 	movq	%rax, 0x8(%rsp)
    0000003f: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 63
    00000044: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm3
    0000004c: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm5
    00000054: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000005b: 	movq	_Z7gLabelsB5cxx11+56(%rip), %r14
    00000062: 	movaps	%xmm3, 0x30(%rsp)
    00000067: 	movq	%xmm3, %rbp
    0000006c: 	movhlps	%xmm5, %xmm3
    0000006f: 	movq	%rax, 0x20(%rsp)
    00000074: 	movq	%xmm3, %rcx
    00000079: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    00000080: 	leaq	0x8(%rcx), %r12
    00000084: 	movaps	%xmm5, 0x40(%rsp)
    00000089: 	movq	%rax, 0x10(%rsp)
    0000008e: 	movq	%xmm3, 0x58(%rsp)
    00000094: 	movq	%xmm5, 0x50(%rsp)
    0000009a: 	cmpq	%r12, %rax
    0000009d: 	jbe	.Ltmp1075 # Offset: 157
    0000009f: 	movq	%r12, %r13
    000000a2: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1078:
    000000a8: 	movq	(%r13), %r15
    000000ac: 	leaq	0x200(%r15), %rbx
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1077:
    000000b8: 	movq	(%r15), %rdi
    000000bb: 	leaq	0x10(%r15), %rdx
    000000bf: 	cmpq	%rdx, %rdi
    000000c2: 	je	.Ltmp1076 # Offset: 194
    000000c8: 	movq	0x10(%r15), %rax
    000000cc: 	addq	$0x20, %r15
    000000d0: 	leaq	0x1(%rax), %rsi
    000000d4: 	callq	_ZdlPvm@PLT # Offset: 212
    000000d9: 	cmpq	%rbx, %r15
    000000dc: 	jne	.Ltmp1077 # Offset: 220
    000000de: 	addq	$0x8, %r13
    000000e2: 	cmpq	%r13, 0x10(%rsp)
    000000e7: 	ja	.Ltmp1078 # Offset: 231
.Ltmp1075:
    000000e9: 	movq	0x58(%rsp), %rcx
    000000ee: 	cmpq	%rcx, 0x10(%rsp)
    000000f3: 	je	.Ltmp1079 # Offset: 243
.Ltmp1118:
    000000f9: 	cmpq	0x50(%rsp), %rbp
    000000fe: 	je	.Ltmp1080 # Offset: 254
.Ltmp1082:
    00000100: 	movq	(%rbp), %rdi
    00000104: 	leaq	0x10(%rbp), %rax
    00000108: 	cmpq	%rax, %rdi
    0000010b: 	je	.Ltmp1081 # Offset: 267
    00000111: 	movq	0x10(%rbp), %rax
    00000115: 	addq	$0x20, %rbp
    00000119: 	leaq	0x1(%rax), %rsi
    0000011d: 	callq	_ZdlPvm@PLT # Offset: 285
    00000122: 	cmpq	0x50(%rsp), %rbp
    00000127: 	jne	.Ltmp1082 # Offset: 295
.Ltmp1080:
    00000129: 	cmpq	%r14, 0x20(%rsp)
    0000012e: 	je	.Ltmp1083 # Offset: 302
.Ltmp1085:
    00000130: 	movq	(%r14), %rdi
    00000133: 	leaq	0x10(%r14), %rax
    00000137: 	cmpq	%rax, %rdi
    0000013a: 	je	.Ltmp1084 # Offset: 314
    00000140: 	movq	0x10(%r14), %rax
    00000144: 	addq	$0x20, %r14
    00000148: 	leaq	0x1(%rax), %rsi
    0000014c: 	callq	_ZdlPvm@PLT # Offset: 332
    00000151: 	cmpq	%r14, 0x20(%rsp)
    00000156: 	jne	.Ltmp1085 # Offset: 342
.Ltmp1083:
    00000158: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    0000015f: 	leaq	0x8(%rax), %rbx
    00000163: 	cmpq	%r12, %rbx
    00000166: 	jbe	.Ltmp1086 # Offset: 358
    00000168: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1087:
    00000170: 	movq	(%r12), %rdi
    00000174: 	movl	$0x200, %esi
    00000179: 	addq	$0x8, %r12
    0000017d: 	callq	_ZdlPvm@PLT # Offset: 381
    00000182: 	cmpq	%r12, %rbx
    00000185: 	ja	.Ltmp1087 # Offset: 389
.Ltmp1086:
    00000187: 	movdqa	0x30(%rsp), %xmm6
    0000018d: 	movl	init_value(%rip), %ebx
    00000193: 	leaq	0xd0(%rsp), %rbp
    0000019b: 	leaq	DATAat0x17970(%rip), %rdx
    000001a2: 	movdqa	0x40(%rsp), %xmm7
    000001a8: 	movq	0x8(%rsp), %rsi
    000001ad: 	movq	%rbp, %rdi
    000001b0: 	movaps	%xmm6, _Z7gLabelsB5cxx11+48(%rip)
    000001b7: 	movd	%ebx, %xmm6
    000001bb: 	pshufd	$0x0, %xmm6, %xmm4
    000001c0: 	pshufd	$0xe0, %xmm6, %xmm3
    000001c5: 	movl	%ebx, 0xa8(%rsp)
    000001cc: 	movaps	%xmm7, _Z7gLabelsB5cxx11+64(%rip)
    000001d3: 	movq	%xmm3, %r12
    000001d8: 	movaps	%xmm4, 0x80(%rsp)
    000001e0: 	movaps	%xmm4, 0x10(%rsp)
    000001e5: 	movaps	%xmm4, 0x90(%rsp)
    000001ed: 	movq	%xmm3, 0xa0(%rsp)
    000001f6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 502
    000001fb: 	callq	clock@PLT # Offset: 507
    00000200: 	movdqa	0x10(%rsp), %xmm4
    00000206: 	movq	%r12, %xmm7
    0000020b: 	leaq	0x80(%rsp), %r14
    00000213: 	movq	%rax, start_time(%rip)
    0000021a: 	movl	iterations(%rip), %eax
    00000220: 	movd	%eax, %xmm3
    00000224: 	imull	$0x37, %eax, %edx
    00000227: 	leal	(%rax,%rax), %edi
    0000022a: 	movl	%eax, %r8d
    0000022d: 	pshufd	$0x0, %xmm3, %xmm0
    00000232: 	imull	$0x39, %eax, %ecx
    00000235: 	leal	(%rdi,%rax), %esi
    00000238: 	shll	$0x4, %r8d
    0000023c: 	movdqa	DATAat0x17d70(%rip), %xmm3
    00000244: 	movdqa	%xmm0, %xmm2
    00000248: 	movdqa	%xmm0, %xmm1
    0000024c: 	pmuludq	DATAat0x17d70(%rip), %xmm1
    00000254: 	psrlq	$0x20, %xmm2
    00000259: 	pshufd	$0x8, %xmm1, %xmm1
    0000025e: 	movd	%edx, %xmm6
    00000262: 	psrlq	$0x20, %xmm3
    00000267: 	imull	$0x34, %eax, %edx
    0000026a: 	pmuludq	%xmm2, %xmm3
    0000026e: 	addl	%ebx, %edx
    00000270: 	pshufd	$0x8, %xmm3, %xmm3
    00000275: 	punpckldq	%xmm3, %xmm1
    00000279: 	paddd	%xmm4, %xmm1
    0000027d: 	movaps	%xmm1, 0x80(%rsp)
    00000285: 	movdqa	DATAat0x17d80(%rip), %xmm1
    0000028d: 	pmuludq	%xmm1, %xmm0
    00000291: 	psrlq	$0x20, %xmm1
    00000296: 	pmuludq	%xmm1, %xmm2
    0000029a: 	pshufd	$0x8, %xmm0, %xmm0
    0000029f: 	pshufd	$0x8, %xmm2, %xmm1
    000002a4: 	punpckldq	%xmm1, %xmm0
    000002a8: 	paddd	%xmm4, %xmm0
    000002ac: 	movaps	%xmm0, 0x90(%rsp)
    000002b4: 	movd	%ecx, %xmm0
    000002b8: 	leal	(,%rsi,4), %ecx
    000002bf: 	subl	%ecx, %edx
    000002c1: 	leal	(,%rax,4), %ecx
    000002c8: 	punpckldq	%xmm6, %xmm0
    000002cc: 	subl	%ecx, %edx
    000002ce: 	addl	%eax, %ecx
    000002d0: 	paddd	%xmm7, %xmm0
    000002d4: 	subl	%r8d, %edx
    000002d7: 	leal	(%rax,%rcx,2), %r9d
    000002db: 	subl	%eax, %r8d
    000002de: 	subl	%r9d, %edx
    000002e1: 	movq	%xmm0, 0xa0(%rsp)
    000002ea: 	leal	(%rdx,%rsi,2), %edx
    000002ed: 	leal	(%rdx,%r8), %eax
    000002f1: 	leal	(%rsi,%rsi,8), %edx
    000002f4: 	movq	%rbp, %rsi
    000002f7: 	addl	%edx, %eax
    000002f9: 	subl	%edi, %eax
    000002fb: 	movq	%r14, %rdi
    000002fe: 	addl	%ecx, %eax
    00000300: 	movl	%eax, 0xa8(%rsp)
    00000307: 	callq	_Z12check11_sumsIiEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 775
    0000030c: 	movq	%rbp, %rdi
    0000030f: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 783
    00000314: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000031b: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000322: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000329: 	je	.Ltmp1088 # Offset: 809
.Ltmp1119:
    0000032f: 	movq	-0x20(%rax), %r12
    00000333: 	callq	clock@PLT # Offset: 819
    00000338: 	pxor	%xmm0, %xmm0
    0000033c: 	movq	%rax, end_time(%rip)
    00000343: 	movq	%r12, %rdi
    00000346: 	subq	start_time(%rip), %rax
    0000034d: 	cvtsi2sd	%rax, %xmm0
    00000352: 	divsd	DATAat0x17ca0(%rip), %xmm0
    0000035a: 	callq	_Z13record_resultdPKc # Offset: 858
    0000035f: 	movq	0xd0(%rsp), %rdi
    00000367: 	leaq	0xe0(%rsp), %rbx
    0000036f: 	cmpq	%rbx, %rdi
    00000372: 	je	.Ltmp1089 # Offset: 882
    00000374: 	movq	0xe0(%rsp), %rax
    0000037c: 	leaq	0x1(%rax), %rsi
    00000380: 	callq	_ZdlPvm@PLT # Offset: 896
.Ltmp1089:
    00000385: 	movl	init_value(%rip), %r12d
    0000038c: 	movq	0x8(%rsp), %rsi
    00000391: 	leaq	DATAat0x179a0(%rip), %rdx
    00000398: 	movq	%rbp, %rdi
    0000039b: 	movd	%r12d, %xmm4
    000003a0: 	movl	%r12d, 0xa8(%rsp)
    000003a8: 	pshufd	$0xe0, %xmm4, %xmm3
    000003ad: 	pshufd	$0x0, %xmm4, %xmm0
    000003b2: 	movq	%xmm3, %r13
    000003b7: 	movaps	%xmm0, 0x80(%rsp)
    000003bf: 	movaps	%xmm0, 0x90(%rsp)
    000003c7: 	movq	%xmm3, 0xa0(%rsp)
    000003d0: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 976
    000003d5: 	callq	clock@PLT # Offset: 981
    000003da: 	movq	%rax, start_time(%rip)
    000003e1: 	movl	iterations(%rip), %eax
    000003e7: 	testl	%eax, %eax
    000003e9: 	jle	.Ltmp1090 # Offset: 1001
    000003ef: 	imull	$0x34, %eax, %edx
    000003f2: 	movl	%r12d, %r10d
    000003f5: 	leal	(%rax,%rax,8), %ecx
    000003f8: 	imull	$0x39, %eax, %r13d
    000003fc: 	movd	%r10d, %xmm3
    00000401: 	leal	(%r10,%rcx,4), %edi
    00000405: 	addl	%r10d, %ecx
    00000408: 	imull	$0x37, %eax, %r11d
    0000040c: 	pshufd	$0xe0, %xmm3, %xmm0
    00000411: 	addl	%edx, %r12d
    00000414: 	imull	$0x1e, %eax, %esi
    00000417: 	leal	(%rax,%rax,4), %edx
    0000041a: 	movd	%r13d, %xmm1
    0000041f: 	leal	(%r10,%rdx,8), %r9d
    00000423: 	leal	(%r10,%rdx,4), %r8d
    00000427: 	movl	%eax, %edx
    00000429: 	movd	%r11d, %xmm7
    0000042e: 	shll	$0x4, %edx
    00000431: 	punpckldq	%xmm7, %xmm1
    00000435: 	subl	%eax, %edx
    00000437: 	addl	%r10d, %esi
    0000043a: 	imull	$0x3c, %eax, %eax
    0000043d: 	paddd	%xmm0, %xmm1
    00000441: 	addl	%r10d, %edx
    00000444: 	movq	%xmm1, %r13
    00000449: 	addl	%r10d, %eax
.Ltmp1126:
    0000044c: 	movl	%edi, 0x88(%rsp)
    00000453: 	movl	%edi, 0x90(%rsp)
    0000045a: 	movq	%r14, %rdi
    0000045d: 	movl	%esi, 0x9c(%rsp)
    00000464: 	movq	%rbp, %rsi
    00000467: 	movl	%r12d, 0x80(%rsp)
    0000046f: 	movl	%r9d, 0x84(%rsp)
    00000477: 	movl	%r8d, 0x8c(%rsp)
    0000047f: 	movl	%ecx, 0x94(%rsp)
    00000486: 	movl	%edx, 0x98(%rsp)
    0000048d: 	movq	%r13, 0xa0(%rsp)
    00000495: 	movl	%eax, 0xa8(%rsp)
    0000049c: 	callq	_Z12check11_sumsIiEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1180
    000004a1: 	movq	%rbp, %rdi
    000004a4: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1188
    000004a9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004b0: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000004b7: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004be: 	je	.Ltmp1091 # Offset: 1214
.Ltmp1124:
    000004c4: 	movq	-0x20(%rax), %r12
    000004c8: 	callq	clock@PLT # Offset: 1224
    000004cd: 	pxor	%xmm0, %xmm0
    000004d1: 	movq	%rax, end_time(%rip)
    000004d8: 	movq	%r12, %rdi
    000004db: 	subq	start_time(%rip), %rax
    000004e2: 	cvtsi2sd	%rax, %xmm0
    000004e7: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000004ef: 	callq	_Z13record_resultdPKc # Offset: 1263
    000004f4: 	movq	0xd0(%rsp), %rdi
    000004fc: 	cmpq	%rbx, %rdi
    000004ff: 	je	.Ltmp1092 # Offset: 1279
    00000501: 	movq	0xe0(%rsp), %rax
    00000509: 	leaq	0x1(%rax), %rsi
    0000050d: 	callq	_ZdlPvm@PLT # Offset: 1293
.Ltmp1092:
    00000512: 	movl	init_value(%rip), %r12d
    00000519: 	movq	0x8(%rsp), %rsi
    0000051e: 	leaq	DATAat0x179d0(%rip), %rdx
    00000525: 	movq	%rbp, %rdi
    00000528: 	movd	%r12d, %xmm3
    0000052d: 	movl	%r12d, 0xa8(%rsp)
    00000535: 	pshufd	$0xe0, %xmm3, %xmm7
    0000053a: 	pshufd	$0x0, %xmm3, %xmm0
    0000053f: 	movq	%xmm7, %r13
    00000544: 	movaps	%xmm0, 0x80(%rsp)
    0000054c: 	movaps	%xmm0, 0x90(%rsp)
    00000554: 	movq	%xmm7, 0xa0(%rsp)
    0000055d: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1373
    00000562: 	callq	clock@PLT # Offset: 1378
    00000567: 	movq	%rax, start_time(%rip)
    0000056e: 	movl	iterations(%rip), %eax
    00000574: 	testl	%eax, %eax
    00000576: 	jle	.Ltmp1093 # Offset: 1398
    0000057c: 	movl	%eax, %edx
    0000057e: 	leal	(%rax,%rax,8), %esi
    00000581: 	leal	(%rax,%rax,4), %ecx
    00000584: 	movl	%r12d, %r11d
    00000587: 	shll	$0x4, %edx
    0000058a: 	imull	$0x39, %eax, %r13d
    0000058e: 	leal	(%r11,%rcx,4), %r9d
    00000592: 	addl	%esi, %r12d
    00000595: 	imull	$0x34, %eax, %edi
    00000598: 	leal	(%r11,%rsi,4), %r8d
    0000059c: 	movd	%r11d, %xmm5
    000005a1: 	subl	%eax, %edx
    000005a3: 	imull	$0x1e, %eax, %esi
    000005a6: 	leal	(%r11,%rcx,8), %r10d
    000005aa: 	pshufd	$0xe0, %xmm5, %xmm0
    000005af: 	addl	%r11d, %edx
    000005b2: 	imull	$0x3c, %eax, %ecx
    000005b5: 	movd	%r13d, %xmm1
    000005ba: 	imull	$0x37, %eax, %eax
    000005bd: 	addl	%r11d, %edi
    000005c0: 	addl	%r11d, %esi
    000005c3: 	addl	%r11d, %ecx
    000005c6: 	movd	%eax, %xmm4
    000005ca: 	punpckldq	%xmm4, %xmm1
    000005ce: 	paddd	%xmm0, %xmm1
    000005d2: 	movq	%xmm1, %r13
.Ltmp1125:
    000005d7: 	movl	%edi, 0x80(%rsp)
    000005de: 	movq	%r14, %rdi
    000005e1: 	movl	%esi, 0x9c(%rsp)
    000005e8: 	movq	%rbp, %rsi
    000005eb: 	movl	%r10d, 0x84(%rsp)
    000005f3: 	movl	%r8d, 0x88(%rsp)
    000005fb: 	movl	%r9d, 0x8c(%rsp)
    00000603: 	movl	%r8d, 0x90(%rsp)
    0000060b: 	movl	%r12d, 0x94(%rsp)
    00000613: 	movl	%edx, 0x98(%rsp)
    0000061a: 	movq	%r13, 0xa0(%rsp)
    00000622: 	movl	%ecx, 0xa8(%rsp)
    00000629: 	callq	_Z12check11_sumsIiEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1577
    0000062e: 	movq	%rbp, %rdi
    00000631: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1585
    00000636: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    0000063d: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000644: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000064b: 	je	.Ltmp1094 # Offset: 1611
.Ltmp1123:
    00000651: 	movq	-0x20(%rax), %r12
    00000655: 	callq	clock@PLT # Offset: 1621
    0000065a: 	pxor	%xmm0, %xmm0
    0000065e: 	movq	%rax, end_time(%rip)
    00000665: 	movq	%r12, %rdi
    00000668: 	subq	start_time(%rip), %rax
    0000066f: 	cvtsi2sd	%rax, %xmm0
    00000674: 	divsd	DATAat0x17ca0(%rip), %xmm0
    0000067c: 	callq	_Z13record_resultdPKc # Offset: 1660
    00000681: 	movq	0xd0(%rsp), %rdi
    00000689: 	cmpq	%rbx, %rdi
    0000068c: 	je	.Ltmp1095 # Offset: 1676
    0000068e: 	movq	0xe0(%rsp), %rax
    00000696: 	leaq	0x1(%rax), %rsi
    0000069a: 	callq	_ZdlPvm@PLT # Offset: 1690
.Ltmp1095:
    0000069f: 	movl	init_value(%rip), %eax
    000006a5: 	movq	0x8(%rsp), %rsi
    000006aa: 	leaq	DATAat0x17a00(%rip), %rdx
    000006b1: 	movq	%rbp, %rdi
    000006b4: 	movd	%eax, %xmm5
    000006b8: 	movl	%eax, 0xa8(%rsp)
    000006bf: 	pshufd	$0x0, %xmm5, %xmm0
    000006c4: 	movaps	%xmm0, 0x80(%rsp)
    000006cc: 	movaps	%xmm0, 0x90(%rsp)
    000006d4: 	pshufd	$0xe0, %xmm5, %xmm0
    000006d9: 	movq	%xmm0, 0xa0(%rsp)
    000006e2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1762
    000006e7: 	movq	%rbp, %rsi
    000006ea: 	movq	%r14, %rdi
    000006ed: 	callq	_Z15test_struct_argIiEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1773
    000006f2: 	movq	0xd0(%rsp), %rdi
    000006fa: 	cmpq	%rbx, %rdi
    000006fd: 	je	.Ltmp1096 # Offset: 1789
    000006ff: 	movq	0xe0(%rsp), %rax
    00000707: 	leaq	0x1(%rax), %rsi
    0000070b: 	callq	_ZdlPvm@PLT # Offset: 1803
.Ltmp1096:
    00000710: 	movl	init_value(%rip), %eax
    00000716: 	movq	0x8(%rsp), %rsi
    0000071b: 	leaq	DATAat0x17a28(%rip), %rdx
    00000722: 	movq	%rbp, %rdi
    00000725: 	movd	%eax, %xmm7
    00000729: 	movl	%eax, 0x70(%rsp)
    0000072d: 	pshufd	$0x0, %xmm7, %xmm5
    00000732: 	movaps	%xmm5, 0x10(%rsp)
    00000737: 	movaps	%xmm5, 0x60(%rsp)
    0000073c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1852
    00000741: 	callq	clock@PLT # Offset: 1857
    00000746: 	movd	iterations(%rip), %xmm3
    0000074e: 	leaq	0x60(%rsp), %r12
    00000753: 	movq	%rbp, %rsi
    00000756: 	movdqa	DATAat0x17d70(%rip), %xmm2
    0000075e: 	movq	%r12, %rdi
    00000761: 	movq	%rax, start_time(%rip)
    00000768: 	pshufd	$0x0, %xmm3, %xmm1
    0000076d: 	movdqa	%xmm1, %xmm0
    00000771: 	psrlq	$0x20, %xmm2
    00000776: 	pmuludq	DATAat0x17d70(%rip), %xmm0
    0000077e: 	pshufd	$0x8, %xmm0, %xmm0
    00000783: 	psrlq	$0x20, %xmm1
    00000788: 	pmuludq	%xmm2, %xmm1
    0000078c: 	pshufd	$0x8, %xmm1, %xmm1
    00000791: 	punpckldq	%xmm1, %xmm0
    00000795: 	paddd	0x10(%rsp), %xmm0
    0000079b: 	movaps	%xmm0, 0x60(%rsp)
    000007a0: 	punpckhdq	%xmm0, %xmm0
    000007a4: 	movd	%xmm0, 0x70(%rsp)
    000007aa: 	callq	_Z11check5_sumsIiEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1962
    000007af: 	movq	%rbp, %rdi
    000007b2: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1970
    000007b7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000007be: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000007c5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000007cc: 	je	.Ltmp1097 # Offset: 1996
.Ltmp1122:
    000007d2: 	movq	-0x20(%rax), %r13
    000007d6: 	callq	clock@PLT # Offset: 2006
    000007db: 	pxor	%xmm0, %xmm0
    000007df: 	movq	%rax, end_time(%rip)
    000007e6: 	movq	%r13, %rdi
    000007e9: 	subq	start_time(%rip), %rax
    000007f0: 	cvtsi2sd	%rax, %xmm0
    000007f5: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000007fd: 	callq	_Z13record_resultdPKc # Offset: 2045
    00000802: 	movq	0xd0(%rsp), %rdi
    0000080a: 	cmpq	%rbx, %rdi
    0000080d: 	je	.Ltmp1098 # Offset: 2061
    0000080f: 	movq	0xe0(%rsp), %rax
    00000817: 	leaq	0x1(%rax), %rsi
    0000081b: 	callq	_ZdlPvm@PLT # Offset: 2075
.Ltmp1098:
    00000820: 	movl	init_value(%rip), %eax
    00000826: 	movq	0x8(%rsp), %rsi
    0000082b: 	leaq	DATAat0x17a60(%rip), %rdx
    00000832: 	movq	%rbp, %rdi
    00000835: 	movd	%eax, %xmm4
    00000839: 	movl	%eax, 0x70(%rsp)
    0000083d: 	pshufd	$0x0, %xmm4, %xmm6
    00000842: 	movaps	%xmm6, 0x10(%rsp)
    00000847: 	movaps	%xmm6, 0x20(%rsp)
    0000084c: 	movaps	%xmm6, 0x60(%rsp)
    00000851: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2129
    00000856: 	callq	clock@PLT # Offset: 2134
    0000085b: 	movq	%rax, start_time(%rip)
    00000862: 	movl	iterations(%rip), %eax
    00000868: 	testl	%eax, %eax
    0000086a: 	jle	.Ltmp1099 # Offset: 2154
    0000086c: 	movd	%eax, %xmm2
    00000870: 	pshufd	$0x0, %xmm2, %xmm0
    00000875: 	movdqa	DATAat0x17d70(%rip), %xmm2
    0000087d: 	movdqa	%xmm0, %xmm1
    00000881: 	psrlq	$0x20, %xmm0
    00000886: 	pmuludq	DATAat0x17d70(%rip), %xmm1
    0000088e: 	pshufd	$0x8, %xmm1, %xmm1
    00000893: 	psrlq	$0x20, %xmm2
    00000898: 	pmuludq	%xmm2, %xmm0
    0000089c: 	pshufd	$0x8, %xmm0, %xmm0
    000008a1: 	punpckldq	%xmm0, %xmm1
    000008a5: 	paddd	0x20(%rsp), %xmm1
    000008ab: 	movaps	%xmm1, 0x10(%rsp)
.Ltmp1099:
    000008b0: 	movdqa	0x10(%rsp), %xmm0
    000008b6: 	movq	%rbp, %rsi
    000008b9: 	movq	%r12, %rdi
    000008bc: 	movaps	%xmm0, 0x60(%rsp)
    000008c1: 	punpckhdq	%xmm0, %xmm0
    000008c5: 	movd	%xmm0, 0x70(%rsp)
    000008cb: 	callq	_Z11check5_sumsIiEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2251
    000008d0: 	movq	%rbp, %rdi
    000008d3: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2259
    000008d8: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000008df: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000008e6: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000008ed: 	je	.Ltmp1100 # Offset: 2285
.Ltmp1121:
    000008f3: 	movq	-0x20(%rax), %r13
    000008f7: 	callq	clock@PLT # Offset: 2295
    000008fc: 	pxor	%xmm0, %xmm0
    00000900: 	movq	%rax, end_time(%rip)
    00000907: 	movq	%r13, %rdi
    0000090a: 	subq	start_time(%rip), %rax
    00000911: 	cvtsi2sd	%rax, %xmm0
    00000916: 	divsd	DATAat0x17ca0(%rip), %xmm0
    0000091e: 	callq	_Z13record_resultdPKc # Offset: 2334
    00000923: 	movq	0xd0(%rsp), %rdi
    0000092b: 	cmpq	%rbx, %rdi
    0000092e: 	je	.Ltmp1101 # Offset: 2350
    00000930: 	movq	0xe0(%rsp), %rax
    00000938: 	leaq	0x1(%rax), %rsi
    0000093c: 	callq	_ZdlPvm@PLT # Offset: 2364
.Ltmp1101:
    00000941: 	movl	init_value(%rip), %eax
    00000947: 	movq	0x8(%rsp), %rsi
    0000094c: 	leaq	DATAat0x17a98(%rip), %rdx
    00000953: 	movq	%rbp, %rdi
    00000956: 	movd	%eax, %xmm5
    0000095a: 	movl	%eax, 0x70(%rsp)
    0000095e: 	pshufd	$0x0, %xmm5, %xmm7
    00000963: 	movaps	%xmm7, 0x10(%rsp)
    00000968: 	movaps	%xmm7, 0x20(%rsp)
    0000096d: 	movaps	%xmm7, 0x60(%rsp)
    00000972: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2418
    00000977: 	callq	clock@PLT # Offset: 2423
    0000097c: 	movq	%rax, start_time(%rip)
    00000983: 	movl	iterations(%rip), %eax
    00000989: 	testl	%eax, %eax
    0000098b: 	jle	.Ltmp1102 # Offset: 2443
    0000098d: 	movdqa	DATAat0x17d70(%rip), %xmm1
    00000995: 	movd	%eax, %xmm6
    00000999: 	pshufd	$0x0, %xmm6, %xmm0
    0000099e: 	movdqa	%xmm0, %xmm2
    000009a2: 	psrlq	$0x20, %xmm1
    000009a7: 	pmuludq	DATAat0x17d70(%rip), %xmm2
    000009af: 	psrlq	$0x20, %xmm0
    000009b4: 	pmuludq	%xmm1, %xmm0
    000009b8: 	pshufd	$0x8, %xmm2, %xmm1
    000009bd: 	pshufd	$0x8, %xmm0, %xmm0
    000009c2: 	punpckldq	%xmm0, %xmm1
    000009c6: 	paddd	0x20(%rsp), %xmm1
    000009cc: 	movaps	%xmm1, 0x10(%rsp)
.Ltmp1102:
    000009d1: 	movdqa	0x10(%rsp), %xmm0
    000009d7: 	movq	%rbp, %rsi
    000009da: 	movq	%r12, %rdi
    000009dd: 	movaps	%xmm0, 0x60(%rsp)
    000009e2: 	punpckhdq	%xmm0, %xmm0
    000009e6: 	movd	%xmm0, 0x70(%rsp)
    000009ec: 	callq	_Z11check5_sumsIiEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2540
    000009f1: 	movq	%rbp, %rdi
    000009f4: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2548
    000009f9: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000a00: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    00000a07: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000a0e: 	je	.Ltmp1103 # Offset: 2574
.Ltmp1120:
    00000a14: 	movq	-0x20(%rax), %r13
    00000a18: 	callq	clock@PLT # Offset: 2584
    00000a1d: 	pxor	%xmm0, %xmm0
    00000a21: 	movq	%rax, end_time(%rip)
    00000a28: 	movq	%r13, %rdi
    00000a2b: 	subq	start_time(%rip), %rax
    00000a32: 	cvtsi2sd	%rax, %xmm0
    00000a37: 	divsd	DATAat0x17ca0(%rip), %xmm0
    00000a3f: 	callq	_Z13record_resultdPKc # Offset: 2623
    00000a44: 	movq	0xd0(%rsp), %rdi
    00000a4c: 	cmpq	%rbx, %rdi
    00000a4f: 	je	.Ltmp1104 # Offset: 2639
    00000a51: 	movq	0xe0(%rsp), %rax
    00000a59: 	leaq	0x1(%rax), %rsi
    00000a5d: 	callq	_ZdlPvm@PLT # Offset: 2653
.Ltmp1104:
    00000a62: 	movl	init_value(%rip), %eax
    00000a68: 	movq	0x8(%rsp), %rsi
    00000a6d: 	leaq	DATAat0x17ad0(%rip), %rdx
    00000a74: 	movq	%rbp, %rdi
    00000a77: 	movd	%eax, %xmm6
    00000a7b: 	movl	%eax, 0x70(%rsp)
    00000a7f: 	pshufd	$0x0, %xmm6, %xmm0
    00000a84: 	movaps	%xmm0, 0x60(%rsp)
    00000a89: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2697
    00000a8e: 	movq	%rbp, %rsi
    00000a91: 	movq	%r12, %rdi
    00000a94: 	callq	_Z16test_struct5_argIiEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2708
    00000a99: 	movq	0xd0(%rsp), %rdi
    00000aa1: 	cmpq	%rbx, %rdi
    00000aa4: 	je	.Ltmp1105 # Offset: 2724
    00000aa6: 	movq	0xe0(%rsp), %rax
    00000aae: 	leaq	0x1(%rax), %rsi
    00000ab2: 	callq	_ZdlPvm@PLT # Offset: 2738
.Ltmp1105:
    00000ab7: 	movq	0x8(%rsp), %rsi
    00000abc: 	leaq	DATAat0x17b00(%rip), %rdx
    00000ac3: 	movq	%rbp, %rdi
    00000ac6: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2758
    00000acb: 	movq	%rbp, %rdi
    00000ace: 	callq	_Z18test_struct_local0IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2766
    00000ad3: 	movq	0xd0(%rsp), %rdi
    00000adb: 	cmpq	%rbx, %rdi
    00000ade: 	je	.Ltmp1106 # Offset: 2782
    00000ae0: 	movq	0xe0(%rsp), %rax
    00000ae8: 	leaq	0x1(%rax), %rsi
    00000aec: 	callq	_ZdlPvm@PLT # Offset: 2796
.Ltmp1106:
    00000af1: 	movq	0x8(%rsp), %rsi
    00000af6: 	leaq	DATAat0x17b30(%rip), %rdx
    00000afd: 	movq	%rbp, %rdi
    00000b00: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2816
    00000b05: 	movq	%rbp, %rdi
    00000b08: 	callq	_Z18test_struct_local1IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2824
    00000b0d: 	movq	0xd0(%rsp), %rdi
    00000b15: 	cmpq	%rbx, %rdi
    00000b18: 	je	.Ltmp1107 # Offset: 2840
    00000b1a: 	movq	0xe0(%rsp), %rax
    00000b22: 	leaq	0x1(%rax), %rsi
    00000b26: 	callq	_ZdlPvm@PLT # Offset: 2854
.Ltmp1107:
    00000b2b: 	movq	0x8(%rsp), %rsi
    00000b30: 	leaq	DATAat0x17b60(%rip), %rdx
    00000b37: 	movq	%rbp, %rdi
    00000b3a: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2874
    00000b3f: 	movq	%rbp, %rdi
    00000b42: 	callq	_Z18test_struct_local2IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2882
    00000b47: 	movq	0xd0(%rsp), %rdi
    00000b4f: 	cmpq	%rbx, %rdi
    00000b52: 	je	.Ltmp1108 # Offset: 2898
    00000b54: 	movq	0xe0(%rsp), %rax
    00000b5c: 	leaq	0x1(%rax), %rsi
    00000b60: 	callq	_ZdlPvm@PLT # Offset: 2912
.Ltmp1108:
    00000b65: 	movq	0x8(%rsp), %rsi
    00000b6a: 	leaq	DATAat0x17b90(%rip), %rdx
    00000b71: 	movq	%rbp, %rdi
    00000b74: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2932
    00000b79: 	movq	%rbp, %rdi
    00000b7c: 	callq	_Z17test_struct_localIiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2940
    00000b81: 	movq	0xd0(%rsp), %rdi
    00000b89: 	cmpq	%rbx, %rdi
    00000b8c: 	je	.Ltmp1109 # Offset: 2956
    00000b8e: 	movq	0xe0(%rsp), %rax
    00000b96: 	leaq	0x1(%rax), %rsi
    00000b9a: 	callq	_ZdlPvm@PLT # Offset: 2970
.Ltmp1109:
    00000b9f: 	movq	0x8(%rsp), %rsi
    00000ba4: 	leaq	DATAat0x17bb8(%rip), %rdx
    00000bab: 	movq	%rbp, %rdi
    00000bae: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2990
    00000bb3: 	movq	%rbp, %rdi
    00000bb6: 	callq	_Z19test_struct5_local0IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2998
    00000bbb: 	movq	0xd0(%rsp), %rdi
    00000bc3: 	cmpq	%rbx, %rdi
    00000bc6: 	je	.Ltmp1110 # Offset: 3014
    00000bc8: 	movq	0xe0(%rsp), %rax
    00000bd0: 	leaq	0x1(%rax), %rsi
    00000bd4: 	callq	_ZdlPvm@PLT # Offset: 3028
.Ltmp1110:
    00000bd9: 	movq	0x8(%rsp), %rsi
    00000bde: 	leaq	DATAat0x17be8(%rip), %rdx
    00000be5: 	movq	%rbp, %rdi
    00000be8: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3048
    00000bed: 	movq	%rbp, %rdi
    00000bf0: 	callq	_Z19test_struct5_local1IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3056
    00000bf5: 	movq	0xd0(%rsp), %rdi
    00000bfd: 	cmpq	%rbx, %rdi
    00000c00: 	je	.Ltmp1111 # Offset: 3072
    00000c02: 	movq	0xe0(%rsp), %rax
    00000c0a: 	leaq	0x1(%rax), %rsi
    00000c0e: 	callq	_ZdlPvm@PLT # Offset: 3086
.Ltmp1111:
    00000c13: 	movq	0x8(%rsp), %rsi
    00000c18: 	leaq	DATAat0x17c18(%rip), %rdx
    00000c1f: 	movq	%rbp, %rdi
    00000c22: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3106
    00000c27: 	movq	%rbp, %rdi
    00000c2a: 	callq	_Z19test_struct5_local2IiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3114
    00000c2f: 	movq	0xd0(%rsp), %rdi
    00000c37: 	cmpq	%rbx, %rdi
    00000c3a: 	je	.Ltmp1112 # Offset: 3130
    00000c3c: 	movq	0xe0(%rsp), %rax
    00000c44: 	leaq	0x1(%rax), %rsi
    00000c48: 	callq	_ZdlPvm@PLT # Offset: 3144
.Ltmp1112:
    00000c4d: 	movq	0x8(%rsp), %rsi
    00000c52: 	leaq	DATAat0x17c48(%rip), %rdx
    00000c59: 	movq	%rbp, %rdi
    00000c5c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 3164
    00000c61: 	movq	%rbp, %rdi
    00000c64: 	callq	_Z18test_struct5_localIiEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 3172
    00000c69: 	movq	0xd0(%rsp), %rdi
    00000c71: 	cmpq	%rbx, %rdi
    00000c74: 	je	.Ltmp1113 # Offset: 3188
    00000c76: 	movq	0xe0(%rsp), %rax
    00000c7e: 	leaq	0x1(%rax), %rsi
    00000c82: 	callq	_ZdlPvm@PLT # Offset: 3202
.Ltmp1113:
    00000c87: 	movq	0xb0(%rsp), %rdi
    00000c8f: 	leaq	0xc0(%rsp), %rax
    00000c97: 	cmpq	%rax, %rdi
    00000c9a: 	je	.Ltmp1114 # Offset: 3226
    00000c9c: 	movq	0xc0(%rsp), %rax
    00000ca4: 	leaq	0x1(%rax), %rsi
    00000ca8: 	callq	_ZdlPvm@PLT # Offset: 3240
.Ltmp1114:
    00000cad: 	movq	0xf8(%rsp), %rax
    00000cb5: 	subq	%fs:0x28, %rax
    00000cbe: 	jne	.Ltmp1115 # Offset: 3262
    00000cc4: 	addq	$0x108, %rsp
    00000ccb: 	popq	%rbx
    00000ccc: 	popq	%rbp
    00000ccd: 	popq	%r12
    00000ccf: 	popq	%r13
    00000cd1: 	popq	%r14
    00000cd3: 	popq	%r15
    00000cd5: 	retq # Offset: 3285
    00000cd6: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1116:
    00000ce0: 	addq	$0x20, %rbp
.Ltmp1079:
    00000ce4: 	cmpq	%rbp, 0x20(%rsp)
    00000ce9: 	je	.Ltmp1083 # Offset: 3305
.Ltmp1117:
    00000cef: 	movq	(%rbp), %rdi
    00000cf3: 	leaq	0x10(%rbp), %rax
    00000cf7: 	cmpq	%rax, %rdi
    00000cfa: 	je	.Ltmp1116 # Offset: 3322
    00000cfc: 	movq	0x10(%rbp), %rax
    00000d00: 	addq	$0x20, %rbp
    00000d04: 	leaq	0x1(%rax), %rsi
    00000d08: 	callq	_ZdlPvm@PLT # Offset: 3336
    00000d0d: 	cmpq	0x20(%rsp), %rbp
    00000d12: 	jne	.Ltmp1117 # Offset: 3346
    00000d14: 	jmp	.Ltmp1083 # Offset: 3348
    00000d19: 	nopl	(%rax) # Size: 7
.Ltmp1076:
    00000d20: 	addq	$0x20, %r15
    00000d24: 	cmpq	%rbx, %r15
    00000d27: 	jne	.Ltmp1077 # Offset: 3367
    00000d2d: 	addq	$0x8, %r13
    00000d31: 	cmpq	%r13, 0x10(%rsp)
    00000d36: 	ja	.Ltmp1078 # Offset: 3382
    00000d3c: 	jmp	.Ltmp1075 # Offset: 3388
    00000d41: 	nopl	(%rax) # Size: 7
.Ltmp1081:
    00000d48: 	addq	$0x20, %rbp
    00000d4c: 	jmp	.Ltmp1118 # Offset: 3404
    00000d51: 	nopl	(%rax) # Size: 7
.Ltmp1084:
    00000d58: 	addq	$0x20, %r14
    00000d5c: 	cmpq	%r14, 0x20(%rsp)
    00000d61: 	jne	.Ltmp1085 # Offset: 3425
    00000d67: 	jmp	.Ltmp1083 # Offset: 3431
.Ltmp1088:
    00000d6c: 	movq	-0x8(%rdx), %rax
    00000d70: 	addq	$0x200, %rax
    00000d76: 	jmp	.Ltmp1119 # Offset: 3446
.Ltmp1103:
    00000d7b: 	movq	-0x8(%rdx), %rax
    00000d7f: 	addq	$0x200, %rax
    00000d85: 	jmp	.Ltmp1120 # Offset: 3461
.Ltmp1100:
    00000d8a: 	movq	-0x8(%rdx), %rax
    00000d8e: 	addq	$0x200, %rax
    00000d94: 	jmp	.Ltmp1121 # Offset: 3476
.Ltmp1097:
    00000d99: 	movq	-0x8(%rdx), %rax
    00000d9d: 	addq	$0x200, %rax
    00000da3: 	jmp	.Ltmp1122 # Offset: 3491
.Ltmp1094:
    00000da8: 	movq	-0x8(%rdx), %rax
    00000dac: 	addq	$0x200, %rax
    00000db2: 	jmp	.Ltmp1123 # Offset: 3506
.Ltmp1091:
    00000db7: 	movq	-0x8(%rdx), %rax
    00000dbb: 	addq	$0x200, %rax
    00000dc1: 	jmp	.Ltmp1124 # Offset: 3521
.Ltmp1093:
    00000dc6: 	movl	%r12d, %esi
    00000dc9: 	movl	%r12d, %ecx
    00000dcc: 	movl	%r12d, %r10d
    00000dcf: 	movl	%r12d, %r8d
    00000dd2: 	movl	%r12d, %edx
    00000dd5: 	movl	%r12d, %r9d
    00000dd8: 	movl	%r12d, %edi
    00000ddb: 	jmp	.Ltmp1125 # Offset: 3547
.Ltmp1090:
    00000de0: 	movl	%r12d, %eax
    00000de3: 	movl	%r12d, %esi
    00000de6: 	movl	%r12d, %edx
    00000de9: 	movl	%r12d, %ecx
    00000dec: 	movl	%r12d, %r8d
    00000def: 	movl	%r12d, %edi
    00000df2: 	movl	%r12d, %r9d
    00000df5: 	jmp	.Ltmp1126 # Offset: 3573
.Ltmp1115:
    00000dfa: 	callq	__stack_chk_fail@PLT # Offset: 3578
    00000dff: 	endbr64
.Ltmp1128:
    00000e03: 	movq	%rax, %rbp
    00000e06: 	jmp	.Ltmp1127 # Offset: 3590
    00000e08: 	endbr64
    00000e0c: 	jmp	.Ltmp1128 # Offset: 3596
    00000e0e: 	endbr64
    00000e12: 	jmp	.Ltmp1128 # Offset: 3602
    00000e14: 	endbr64
    00000e18: 	jmp	.Ltmp1128 # Offset: 3608
    00000e1a: 	endbr64
    00000e1e: 	jmp	.Ltmp1128 # Offset: 3614
    00000e20: 	endbr64
    00000e24: 	movq	%rax, %rbp
    00000e27: 	jmp	.Ltmp1129 # Offset: 3623
    00000e29: 	endbr64
    00000e2d: 	jmp	.Ltmp1128 # Offset: 3629
    00000e2f: 	endbr64
    00000e33: 	jmp	.Ltmp1128 # Offset: 3635
    00000e35: 	endbr64
    00000e39: 	jmp	.Ltmp1128 # Offset: 3641
    00000e3b: 	endbr64
    00000e3f: 	jmp	.Ltmp1128 # Offset: 3647
.Ltmp1127:
    00000e41: 	movq	0xd0(%rsp), %rdi
    00000e49: 	cmpq	%rbx, %rdi
    00000e4c: 	je	.Ltmp1129 # Offset: 3660
.Ltmp1132:
    00000e4e: 	movq	0xe0(%rsp), %rax
    00000e56: 	leaq	0x1(%rax), %rsi
    00000e5a: 	callq	_ZdlPvm@PLT # Offset: 3674
.Ltmp1129:
    00000e5f: 	movq	0xb0(%rsp), %rdi
    00000e67: 	leaq	0xc0(%rsp), %rax
    00000e6f: 	cmpq	%rax, %rdi
    00000e72: 	je	.Ltmp1130 # Offset: 3698
    00000e74: 	movq	0xc0(%rsp), %rax
    00000e7c: 	leaq	0x1(%rax), %rsi
    00000e80: 	callq	_ZdlPvm@PLT # Offset: 3712
.Ltmp1130:
    00000e85: 	movq	%rbp, %rdi
    00000e88: 	callq	_Unwind_Resume@PLT # Offset: 3720
    00000e8d: 	endbr64
    00000e91: 	jmp	.Ltmp1128 # Offset: 3729
    00000e96: 	endbr64
    00000e9a: 	jmp	.Ltmp1128 # Offset: 3738
    00000e9f: 	endbr64
    00000ea3: 	movq	%rax, %rbp
    00000ea6: 	jmp	.Ltmp1131 # Offset: 3750
    00000ea8: 	endbr64
    00000eac: 	jmp	.Ltmp1128 # Offset: 3756
.Ltmp1131:
    00000eb1: 	movq	0xd0(%rsp), %rdi
    00000eb9: 	leaq	0xe0(%rsp), %rax
    00000ec1: 	cmpq	%rax, %rdi
    00000ec4: 	jne	.Ltmp1132 # Offset: 3780
    00000ec6: 	jmp	.Ltmp1129 # Offset: 3782
    00000ec8: 	endbr64
    00000ecc: 	jmp	.Ltmp1128 # Offset: 3788
    00000ed1: 	endbr64
    00000ed5: 	jmp	.Ltmp1128 # Offset: 3797
    00000eda: 	endbr64
    00000ede: 	jmp	.Ltmp1128 # Offset: 3806
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIiEvv"

Binary Function "_Z18test_struct_local2IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 126
  State       : disassembled
  Address     : 0x13af0
  Size        : 0xbac
  MaxSize     : 0xbb0
  Offset      : 0x13af0
  Section     : .text
  Orc Section : .local.text._Z18test_struct_local2IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0125:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pxor	%xmm2, %xmm2
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0xc8, %rsp
    00000018: 	movq	%fs:0x28, %rax
    00000021: 	movq	%rax, 0xb8(%rsp)
    00000029: 	xorl	%eax, %eax
    0000002b: 	cvtsi2sdl	init_value(%rip), %xmm2
    00000033: 	movsd	%xmm2, 0x8(%rsp)
    00000039: 	callq	clock@PLT # Offset: 57
    0000003e: 	movl	iterations(%rip), %esi
    00000044: 	movsd	0x8(%rsp), %xmm2
    0000004a: 	movq	%rax, start_time(%rip)
    00000051: 	testl	%esi, %esi
    00000053: 	jle	.Ltmp1133 # Offset: 83
    00000059: 	leal	-0x1(%rsi), %eax
    0000005c: 	cmpl	$0x1, %eax
    0000005f: 	jbe	.Ltmp1134 # Offset: 95
    00000065: 	movsd	DATAat0x17d10(%rip), %xmm4
    0000006d: 	movl	%esi, %edi
    0000006f: 	movapd	%xmm2, %xmm1
    00000073: 	xorl	%ecx, %ecx
    00000075: 	movsd	DATAat0x17cf0(%rip), %xmm5
    0000007d: 	shrl	%edi
    0000007f: 	movsd	DATAat0x17d00(%rip), %xmm13
    00000088: 	movq	%xmm2, %rax
    0000008d: 	movsd	%xmm4, 0x20(%rsp)
    00000093: 	movsd	DATAat0x17cb0(%rip), %xmm4
    0000009b: 	movsd	DATAat0x17cd8(%rip), %xmm12
    000000a4: 	movq	%xmm2, %rdx
    000000a9: 	movsd	%xmm5, 0x18(%rsp)
    000000af: 	movsd	DATAat0x17dc0(%rip), %xmm5
    000000b7: 	movsd	DATAat0x17ce0(%rip), %xmm6
    000000bf: 	movq	%xmm2, %r11
    000000c4: 	movsd	%xmm4, 0x10(%rsp)
    000000ca: 	movapd	%xmm2, %xmm3
    000000ce: 	movsd	DATAat0x17d18(%rip), %xmm4
    000000d6: 	movsd	DATAat0x17cc0(%rip), %xmm7
    000000de: 	movsd	%xmm13, 0x30(%rsp)
    000000e5: 	movq	%xmm2, %r10
    000000ea: 	movsd	DATAat0x17d08(%rip), %xmm13
    000000f3: 	movsd	DATAat0x17ce8(%rip), %xmm9
    000000fc: 	movsd	%xmm5, 0x28(%rsp)
    00000102: 	movapd	%xmm2, %xmm0
    00000106: 	movsd	DATAat0x17cd0(%rip), %xmm5
    0000010e: 	movsd	DATAat0x17c98(%rip), %xmm14
    00000117: 	movsd	%xmm4, 0x40(%rsp)
    0000011d: 	movq	%xmm2, %r8
    00000122: 	movsd	DATAat0x17cf8(%rip), %xmm4
    0000012a: 	movsd	DATAat0x17dc8(%rip), %xmm10
    00000133: 	movsd	DATAat0x17cc8(%rip), %xmm8
    0000013c: 	movapd	%xmm2, %xmm15
    00000141: 	movsd	DATAat0x17cb8(%rip), %xmm11
    0000014a: 	movq	%xmm2, %r9
    0000014f: 	movsd	%xmm13, 0x38(%rsp)
    00000156: 	movsd	%xmm12, 0x8(%rsp)
    0000015d: 	nopl	(%rax) # Size: 3
.Ltmp1135:
    00000160: 	addsd	%xmm6, %xmm2
    00000164: 	movsd	0x28(%rsp), %xmm12
    0000016b: 	addsd	%xmm14, %xmm0
    00000170: 	addl	$0x1, %ecx
    00000173: 	movsd	0x20(%rsp), %xmm13
    0000017a: 	addsd	%xmm14, %xmm15
    0000017f: 	addsd	%xmm5, %xmm3
    00000183: 	addsd	%xmm7, %xmm2
    00000187: 	addsd	%xmm6, %xmm0
    0000018b: 	addsd	%xmm4, %xmm15
    00000190: 	addsd	%xmm4, %xmm3
    00000194: 	addsd	%xmm9, %xmm2
    00000199: 	addsd	0x8(%rsp), %xmm2
    0000019f: 	addsd	0x18(%rsp), %xmm2
    000001a5: 	addsd	%xmm4, %xmm0
    000001a9: 	addsd	%xmm7, %xmm15
    000001ae: 	addsd	%xmm6, %xmm3
    000001b2: 	addsd	%xmm12, %xmm2
    000001b7: 	addsd	%xmm5, %xmm0
    000001bb: 	addsd	%xmm9, %xmm15
    000001c0: 	addsd	%xmm14, %xmm3
    000001c5: 	addsd	%xmm6, %xmm2
    000001c9: 	addsd	%xmm7, %xmm0
    000001cd: 	addsd	%xmm10, %xmm15
    000001d2: 	addsd	%xmm6, %xmm3
    000001d6: 	addsd	%xmm7, %xmm2
    000001da: 	addsd	%xmm11, %xmm0
    000001df: 	addsd	%xmm8, %xmm15
    000001e4: 	addsd	%xmm4, %xmm3
    000001e8: 	addsd	%xmm9, %xmm2
    000001ed: 	addsd	0x8(%rsp), %xmm2
    000001f3: 	addsd	%xmm9, %xmm0
    000001f8: 	addsd	%xmm14, %xmm15
    000001fd: 	addsd	%xmm5, %xmm3
    00000201: 	movq	%xmm2, %rbx
    00000206: 	movq	%r9, %xmm2
    0000020b: 	addsd	%xmm5, %xmm2
    0000020f: 	addsd	%xmm13, %xmm0
    00000214: 	addsd	%xmm4, %xmm15
    00000219: 	addsd	%xmm4, %xmm3
    0000021d: 	addsd	%xmm13, %xmm2
    00000222: 	addsd	0x10(%rsp), %xmm2
    00000228: 	addsd	0x40(%rsp), %xmm2
    0000022e: 	addsd	%xmm14, %xmm0
    00000233: 	addsd	%xmm7, %xmm15
    00000238: 	addsd	%xmm6, %xmm3
    0000023c: 	addsd	%xmm5, %xmm2
    00000240: 	addsd	%xmm6, %xmm0
    00000244: 	addsd	%xmm9, %xmm15
    00000249: 	addsd	%xmm14, %xmm3
    0000024e: 	addsd	%xmm13, %xmm2
    00000253: 	addsd	%xmm4, %xmm0
    00000257: 	addsd	%xmm6, %xmm3
    0000025b: 	addsd	%xmm10, %xmm15
    00000260: 	movq	%xmm2, %r9
    00000265: 	movq	%r8, %xmm2
    0000026a: 	addsd	%xmm5, %xmm0
    0000026e: 	addsd	%xmm6, %xmm2
    00000272: 	addsd	%xmm4, %xmm3
    00000276: 	addsd	%xmm8, %xmm15
    0000027b: 	addsd	%xmm7, %xmm0
    0000027f: 	addsd	%xmm5, %xmm2
    00000283: 	addsd	%xmm11, %xmm0
    00000288: 	addsd	%xmm11, %xmm2
    0000028d: 	addsd	%xmm9, %xmm0
    00000292: 	addsd	%xmm13, %xmm2
    00000297: 	movq	%rbx, %xmm13
    0000029c: 	addsd	0x18(%rsp), %xmm13
    000002a3: 	addsd	%xmm6, %xmm2
    000002a7: 	addsd	%xmm5, %xmm2
    000002ab: 	movq	%xmm2, %r8
    000002b0: 	movq	%r10, %xmm2
    000002b5: 	addsd	%xmm4, %xmm2
    000002b9: 	addsd	%xmm4, %xmm2
    000002bd: 	addsd	%xmm4, %xmm2
    000002c1: 	addsd	%xmm4, %xmm2
    000002c5: 	movq	%xmm2, %r10
    000002ca: 	movq	%r11, %xmm2
    000002cf: 	addsd	%xmm7, %xmm2
    000002d3: 	addsd	0x8(%rsp), %xmm2
    000002d9: 	addsd	%xmm12, %xmm2
    000002de: 	addsd	%xmm7, %xmm2
    000002e2: 	movq	%xmm2, %r11
    000002e7: 	movsd	0x10(%rsp), %xmm2
    000002ed: 	addsd	%xmm2, %xmm1
    000002f1: 	addsd	%xmm11, %xmm1
    000002f6: 	addsd	%xmm7, %xmm1
    000002fa: 	addsd	%xmm8, %xmm1
    000002ff: 	addsd	%xmm10, %xmm1
    00000304: 	addsd	%xmm5, %xmm1
    00000308: 	addsd	0x8(%rsp), %xmm1
    0000030e: 	addsd	%xmm2, %xmm1
    00000312: 	movq	%rdx, %xmm2
    00000317: 	addsd	%xmm9, %xmm2
    0000031c: 	addsd	%xmm11, %xmm1
    00000321: 	addsd	%xmm10, %xmm2
    00000326: 	addsd	%xmm7, %xmm1
    0000032a: 	addsd	%xmm8, %xmm2
    0000032f: 	addsd	0x18(%rsp), %xmm2
    00000335: 	addsd	%xmm8, %xmm1
    0000033a: 	addsd	%xmm12, %xmm2
    0000033f: 	addsd	%xmm10, %xmm1
    00000344: 	addsd	%xmm9, %xmm2
    00000349: 	addsd	%xmm5, %xmm1
    0000034d: 	addsd	0x8(%rsp), %xmm1
    00000353: 	addsd	%xmm10, %xmm2
    00000358: 	addsd	%xmm8, %xmm2
    0000035d: 	movq	%xmm2, %rdx
    00000362: 	movq	%rax, %xmm2
    00000367: 	addsd	%xmm4, %xmm2
    0000036b: 	addsd	%xmm11, %xmm2
    00000370: 	addsd	%xmm10, %xmm2
    00000375: 	addsd	%xmm8, %xmm2
    0000037a: 	addsd	0x30(%rsp), %xmm2
    00000380: 	addsd	0x38(%rsp), %xmm2
    00000386: 	addsd	%xmm4, %xmm2
    0000038a: 	addsd	%xmm11, %xmm2
    0000038f: 	addsd	%xmm10, %xmm2
    00000394: 	addsd	%xmm8, %xmm2
    00000399: 	movq	%xmm2, %rax
    0000039e: 	movq	%r10, %xmm2
    000003a3: 	addsd	%xmm4, %xmm2
    000003a7: 	addsd	%xmm4, %xmm2
    000003ab: 	movq	%xmm2, %r10
    000003b0: 	movapd	%xmm13, %xmm2
    000003b5: 	movsd	0x20(%rsp), %xmm13
    000003bc: 	addsd	%xmm12, %xmm2
    000003c1: 	movq	%r8, %xmm12
    000003c6: 	addsd	%xmm11, %xmm12
    000003cb: 	addsd	%xmm13, %xmm0
    000003d0: 	addsd	%xmm13, %xmm12
    000003d5: 	movsd	0x28(%rsp), %xmm13
    000003dc: 	movq	%xmm12, %r8
    000003e1: 	movq	%r9, %xmm12
    000003e6: 	addsd	0x10(%rsp), %xmm12
    000003ed: 	addsd	0x40(%rsp), %xmm12
    000003f4: 	movq	%xmm12, %r9
    000003f9: 	movq	%rax, %xmm12
    000003fe: 	addsd	0x30(%rsp), %xmm12
    00000405: 	addsd	0x38(%rsp), %xmm12
    0000040c: 	movq	%xmm12, %rax
    00000411: 	movq	%r11, %xmm12
    00000416: 	addsd	0x8(%rsp), %xmm12
    0000041d: 	addsd	%xmm13, %xmm12
    00000422: 	movq	%xmm12, %r11
    00000427: 	movq	%rdx, %xmm12
    0000042c: 	addsd	0x18(%rsp), %xmm12
    00000433: 	addsd	%xmm13, %xmm12
    00000438: 	movq	%xmm12, %rdx
    0000043d: 	cmpl	%ecx, %edi
    0000043f: 	jne	.Ltmp1135 # Offset: 1087
    00000445: 	movl	%esi, %ecx
    00000447: 	andl	$-0x2, %ecx
    0000044a: 	testb	$0x1, %sil
    0000044e: 	je	.Ltmp1136 # Offset: 1102
.Ltmp1147:
    00000454: 	movq	%rax, %xmm12
    00000459: 	addsd	%xmm6, %xmm2
    0000045d: 	addsd	%xmm5, %xmm3
    00000461: 	addl	$0x1, %ecx
    00000464: 	addsd	%xmm4, %xmm12
    00000469: 	movsd	0x10(%rsp), %xmm13
    00000470: 	addsd	%xmm14, %xmm0
    00000475: 	addsd	%xmm14, %xmm15
    0000047a: 	addsd	%xmm13, %xmm1
    0000047f: 	addsd	%xmm7, %xmm2
    00000483: 	movq	%xmm12, %rax
    00000488: 	movq	%r9, %xmm12
    0000048d: 	addsd	%xmm6, %xmm0
    00000491: 	addsd	%xmm5, %xmm12
    00000496: 	addsd	%xmm4, %xmm3
    0000049a: 	addsd	%xmm11, %xmm1
    0000049f: 	addsd	%xmm4, %xmm15
    000004a4: 	addsd	%xmm9, %xmm2
    000004a9: 	addsd	%xmm4, %xmm0
    000004ad: 	movq	%xmm12, %r9
    000004b2: 	movq	%r8, %xmm12
    000004b7: 	addsd	0x8(%rsp), %xmm2
    000004bd: 	addsd	%xmm6, %xmm12
    000004c2: 	addsd	%xmm7, %xmm1
    000004c6: 	addsd	%xmm6, %xmm3
    000004ca: 	addsd	%xmm7, %xmm15
    000004cf: 	addsd	%xmm5, %xmm0
    000004d3: 	movq	%xmm12, %r8
    000004d8: 	movq	%r11, %xmm12
    000004dd: 	addsd	%xmm8, %xmm1
    000004e2: 	addsd	%xmm7, %xmm12
    000004e7: 	addsd	%xmm14, %xmm3
    000004ec: 	addsd	%xmm7, %xmm0
    000004f0: 	addsd	%xmm9, %xmm15
    000004f5: 	addsd	%xmm10, %xmm1
    000004fa: 	movq	%xmm12, %r11
    000004ff: 	movq	%rdx, %xmm12
    00000504: 	addsd	%xmm6, %xmm3
    00000508: 	addsd	%xmm9, %xmm12
    0000050d: 	addsd	%xmm11, %xmm0
    00000512: 	addsd	%xmm10, %xmm15
    00000517: 	addsd	%xmm5, %xmm1
    0000051b: 	addsd	%xmm4, %xmm3
    0000051f: 	addsd	0x8(%rsp), %xmm1
    00000525: 	movq	%xmm12, %rdx
    0000052a: 	movq	%r10, %xmm12
    0000052f: 	addsd	%xmm9, %xmm0
    00000534: 	addsd	%xmm4, %xmm12
    00000539: 	addsd	%xmm8, %xmm15
    0000053e: 	addsd	0x20(%rsp), %xmm0
    00000544: 	movq	%xmm12, %r10
    00000549: 	movq	%r8, %xmm12
    0000054e: 	addsd	%xmm5, %xmm12
    00000553: 	movq	%xmm12, %r8
    00000558: 	movq	%rax, %xmm12
    0000055d: 	addsd	%xmm11, %xmm12
    00000562: 	movq	%xmm12, %rax
    00000567: 	movq	%r9, %xmm12
    0000056c: 	addsd	0x20(%rsp), %xmm12
    00000573: 	movq	%xmm12, %r9
    00000578: 	movq	%rdx, %xmm12
    0000057d: 	addsd	%xmm10, %xmm12
    00000582: 	movq	%xmm12, %rdx
    00000587: 	movq	%rax, %xmm12
    0000058c: 	addsd	%xmm10, %xmm12
    00000591: 	movq	%xmm12, %rax
    00000596: 	movq	%r10, %xmm12
    0000059b: 	addsd	%xmm4, %xmm12
    000005a0: 	movq	%xmm12, %r10
    000005a5: 	movq	%rax, %xmm12
    000005aa: 	addsd	%xmm8, %xmm12
    000005af: 	movq	%xmm12, %rax
    000005b4: 	movq	%r9, %xmm12
    000005b9: 	addsd	%xmm13, %xmm12
    000005be: 	movsd	0x18(%rsp), %xmm13
    000005c5: 	addsd	%xmm13, %xmm2
    000005ca: 	movq	%xmm12, %r9
    000005cf: 	movq	%rdx, %xmm12
    000005d4: 	addsd	%xmm8, %xmm12
    000005d9: 	movq	%xmm12, %rdx
    000005de: 	movq	%r8, %xmm12
    000005e3: 	addsd	%xmm11, %xmm12
    000005e8: 	movq	%xmm12, %r8
    000005ed: 	movq	%rdx, %xmm12
    000005f2: 	addsd	%xmm13, %xmm12
    000005f7: 	movsd	0x28(%rsp), %xmm13
    000005fe: 	addsd	%xmm13, %xmm2
    00000603: 	movq	%xmm12, %rdx
    00000608: 	movq	%rax, %xmm12
    0000060d: 	addsd	0x30(%rsp), %xmm12
    00000614: 	movq	%xmm12, %rax
    00000619: 	movq	%r10, %xmm12
    0000061e: 	addsd	%xmm4, %xmm12
    00000623: 	movq	%xmm12, %r10
    00000628: 	movq	%r8, %xmm12
    0000062d: 	addsd	0x20(%rsp), %xmm12
    00000634: 	movq	%xmm12, %r8
    00000639: 	movq	%r11, %xmm12
    0000063e: 	addsd	0x8(%rsp), %xmm12
    00000645: 	movq	%xmm12, %r11
    0000064a: 	movq	%r9, %xmm12
    0000064f: 	addsd	0x40(%rsp), %xmm12
    00000656: 	movq	%xmm12, %r9
    0000065b: 	movq	%rax, %xmm12
    00000660: 	addsd	0x38(%rsp), %xmm12
    00000667: 	movq	%xmm12, %rax
    0000066c: 	movq	%r11, %xmm12
    00000671: 	addsd	%xmm13, %xmm12
    00000676: 	movq	%xmm12, %r11
    0000067b: 	movq	%rdx, %xmm12
    00000680: 	addsd	%xmm13, %xmm12
    00000685: 	movq	%xmm12, %rdx
    0000068a: 	cmpl	%ecx, %esi
    0000068c: 	jle	.Ltmp1136 # Offset: 1676
    00000692: 	movq	%rax, %xmm12
    00000697: 	movsd	0x10(%rsp), %xmm13
    0000069e: 	addsd	%xmm5, %xmm3
    000006a2: 	addsd	%xmm14, %xmm0
    000006a7: 	addsd	%xmm4, %xmm12
    000006ac: 	addsd	%xmm14, %xmm15
    000006b1: 	addsd	%xmm13, %xmm1
    000006b6: 	addsd	%xmm6, %xmm2
    000006ba: 	addsd	%xmm4, %xmm3
    000006be: 	addsd	%xmm6, %xmm0
    000006c2: 	movq	%xmm12, %rax
    000006c7: 	movq	%r9, %xmm12
    000006cc: 	addsd	%xmm4, %xmm15
    000006d1: 	addsd	%xmm5, %xmm12
    000006d6: 	addsd	%xmm11, %xmm1
    000006db: 	addsd	%xmm6, %xmm3
    000006df: 	addsd	%xmm4, %xmm0
    000006e3: 	addsd	%xmm7, %xmm2
    000006e7: 	addsd	%xmm7, %xmm15
    000006ec: 	movq	%xmm12, %r9
    000006f1: 	movq	%r8, %xmm12
    000006f6: 	addsd	%xmm7, %xmm1
    000006fa: 	addsd	%xmm6, %xmm12
    000006ff: 	addsd	%xmm14, %xmm3
    00000704: 	addsd	%xmm5, %xmm0
    00000708: 	addsd	%xmm9, %xmm2
    0000070d: 	addsd	%xmm8, %xmm1
    00000712: 	addsd	0x8(%rsp), %xmm2
    00000718: 	movq	%xmm12, %r8
    0000071d: 	movq	%r11, %xmm12
    00000722: 	addsd	%xmm6, %xmm3
    00000726: 	movsd	0x18(%rsp), %xmm6
    0000072c: 	addsd	%xmm7, %xmm12
    00000731: 	addsd	%xmm7, %xmm0
    00000735: 	addsd	%xmm10, %xmm1
    0000073a: 	addsd	%xmm9, %xmm15
    0000073f: 	addsd	%xmm6, %xmm2
    00000743: 	addsd	%xmm4, %xmm3
    00000747: 	movq	%xmm12, %r11
    0000074c: 	movq	%rdx, %xmm12
    00000751: 	addsd	%xmm11, %xmm0
    00000756: 	addsd	%xmm9, %xmm12
    0000075b: 	addsd	%xmm5, %xmm1
    0000075f: 	addsd	%xmm10, %xmm15
    00000764: 	addsd	%xmm9, %xmm0
    00000769: 	movq	%xmm12, %rdx
    0000076e: 	movq	%r10, %xmm12
    00000773: 	addsd	%xmm4, %xmm12
    00000778: 	addsd	%xmm8, %xmm15
    0000077d: 	movq	%xmm12, %r10
    00000782: 	movq	%r8, %xmm12
    00000787: 	addsd	%xmm5, %xmm12
    0000078c: 	movq	%r10, %xmm14
    00000791: 	addsd	%xmm4, %xmm14
    00000796: 	movq	%xmm12, %r8
    0000079b: 	movq	%rax, %xmm12
    000007a0: 	addsd	%xmm11, %xmm12
    000007a5: 	movq	%xmm14, %r10
    000007aa: 	movq	%r10, %xmm5
    000007af: 	addsd	%xmm4, %xmm5
    000007b3: 	movq	%xmm12, %rax
    000007b8: 	movq	%r9, %xmm12
    000007bd: 	addsd	0x20(%rsp), %xmm12
    000007c4: 	movq	%xmm5, %r10
    000007c9: 	movsd	%xmm12, 0x48(%rsp)
    000007d0: 	movq	%rdx, %xmm12
    000007d5: 	addsd	%xmm10, %xmm12
    000007da: 	movq	%xmm12, %rdx
    000007df: 	movq	%rax, %xmm12
    000007e4: 	addsd	%xmm10, %xmm12
    000007e9: 	movsd	0x28(%rsp), %xmm10
    000007f0: 	addsd	%xmm10, %xmm2
    000007f5: 	movapd	%xmm12, %xmm14
    000007fa: 	movsd	0x48(%rsp), %xmm12
    00000801: 	addsd	%xmm8, %xmm14
    00000806: 	addsd	%xmm13, %xmm12
    0000080b: 	movq	%r8, %xmm13
    00000810: 	addsd	%xmm11, %xmm13
    00000815: 	movsd	0x20(%rsp), %xmm11
    0000081c: 	movsd	%xmm14, 0x10(%rsp)
    00000823: 	movapd	%xmm12, %xmm14
    00000828: 	movq	%rdx, %xmm12
    0000082d: 	addsd	%xmm11, %xmm0
    00000832: 	movapd	%xmm13, %xmm5
    00000837: 	addsd	%xmm8, %xmm12
    0000083c: 	movsd	0x8(%rsp), %xmm13
    00000843: 	addsd	0x40(%rsp), %xmm14
    0000084a: 	addsd	%xmm11, %xmm5
    0000084f: 	addsd	%xmm13, %xmm1
    00000854: 	movapd	%xmm12, %xmm7
    00000859: 	movq	%xmm14, %r9
    0000085e: 	movq	%xmm5, %r8
    00000863: 	movq	%r11, %xmm5
    00000868: 	addsd	%xmm6, %xmm7
    0000086c: 	movsd	0x10(%rsp), %xmm6
    00000872: 	addsd	%xmm13, %xmm5
    00000877: 	addsd	0x30(%rsp), %xmm6
    0000087d: 	addsd	0x38(%rsp), %xmm6
    00000883: 	addsd	%xmm10, %xmm7
    00000888: 	addsd	%xmm10, %xmm5
    0000088d: 	movq	%xmm6, %rax
    00000892: 	movq	%xmm7, %rdx
    00000897: 	movq	%xmm5, %r11
.Ltmp1136:
    0000089c: 	leaq	0x60(%rsp), %rdi
    000008a1: 	movq	%rbp, %rsi
    000008a4: 	movq	%r9, 0x68(%rsp)
    000008a9: 	movq	%rax, 0xb0(%rsp)
    000008b1: 	movq	%r8, 0x78(%rsp)
    000008b6: 	movq	%r10, 0x88(%rsp)
    000008be: 	movq	%r11, 0x98(%rsp)
    000008c6: 	movq	%rdx, 0xa8(%rsp)
    000008ce: 	movsd	%xmm2, 0x60(%rsp)
    000008d4: 	movsd	%xmm15, 0x70(%rsp)
    000008db: 	movsd	%xmm0, 0x80(%rsp)
    000008e4: 	movsd	%xmm3, 0x90(%rsp)
    000008ed: 	movsd	%xmm1, 0xa0(%rsp)
    000008f6: 	callq	_Z12check11_sumsIdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2294
    000008fb: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000902: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000909: 	subq	$0x20, %rax
    0000090d: 	cmpq	%rax, %rbx
    00000910: 	je	.Ltmp1137 # Offset: 2320
    00000916: 	leaq	0x10(%rbx), %rdi
    0000091a: 	movq	0x8(%rbp), %r12
    0000091e: 	movq	%rdi, (%rbx)
    00000921: 	movq	(%rbp), %r13
    00000925: 	movq	%r13, %rax
    00000928: 	addq	%r12, %rax
    0000092b: 	je	.Ltmp1138 # Offset: 2347
    0000092d: 	testq	%r13, %r13
    00000930: 	je	.Ltmp1139 # Offset: 2352
.Ltmp1138:
    00000936: 	movq	%r12, 0x58(%rsp)
    0000093b: 	cmpq	$0xf, %r12
    0000093f: 	ja	.Ltmp1140 # Offset: 2367
    00000945: 	cmpq	$0x1, %r12
    00000949: 	jne	.Ltmp1141 # Offset: 2377
    0000094f: 	movzbl	(%r13), %eax
    00000954: 	movb	%al, 0x10(%rbx)
.Ltmp1144:
    00000957: 	movq	%r12, 0x8(%rbx)
    0000095b: 	movb	$0x0, (%rdi,%r12)
    00000960: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000967: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000096e: 	addq	$0x20, %rax
    00000972: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000979: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    00000980: 	je	.Ltmp1142 # Offset: 2432
.Ltmp1145:
    00000986: 	movq	-0x20(%rax), %rbp
    0000098a: 	callq	clock@PLT # Offset: 2442
    0000098f: 	movq	%rax, end_time(%rip)
    00000996: 	movq	0xb8(%rsp), %rdx
    0000099e: 	subq	%fs:0x28, %rdx
    000009a7: 	jne	.Ltmp1143 # Offset: 2471
    000009ad: 	subq	start_time(%rip), %rax
    000009b4: 	pxor	%xmm0, %xmm0
    000009b8: 	movq	%rbp, %rdi
    000009bb: 	cvtsi2sd	%rax, %xmm0
    000009c0: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000009c8: 	addq	$0xc8, %rsp
    000009cf: 	popq	%rbx
    000009d0: 	popq	%rbp
    000009d1: 	popq	%r12
    000009d3: 	popq	%r13
    000009d5: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 2517
    000009da: 	nopw	(%rax,%rax) # Size: 6
.Ltmp1140:
    000009e0: 	movq	%rbx, %rdi
    000009e3: 	leaq	0x58(%rsp), %rsi
    000009e8: 	xorl	%edx, %edx
    000009ea: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2538
    000009ef: 	movq	%rax, (%rbx)
    000009f2: 	movq	%rax, %rdi
    000009f5: 	movq	0x58(%rsp), %rax
    000009fa: 	movq	%rax, 0x10(%rbx)
.Ltmp1146:
    000009fe: 	movq	%r12, %rdx
    00000a01: 	movq	%r13, %rsi
    00000a04: 	callq	memcpy@PLT # Offset: 2564
    00000a09: 	movq	0x58(%rsp), %r12
    00000a0e: 	movq	(%rbx), %rdi
    00000a11: 	jmp	.Ltmp1144 # Offset: 2577
    00000a16: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1137:
    00000a20: 	movq	%rbp, %rsi
    00000a23: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000a2a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 2602
    00000a2f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000a36: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000a3d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000a44: 	jne	.Ltmp1145 # Offset: 2628
.Ltmp1142:
    00000a4a: 	movq	-0x8(%rdx), %rax
    00000a4e: 	addq	$0x200, %rax
    00000a54: 	jmp	.Ltmp1145 # Offset: 2644
    00000a59: 	nopl	(%rax) # Size: 7
.Ltmp1141:
    00000a60: 	testq	%r12, %r12
    00000a63: 	je	.Ltmp1144 # Offset: 2659
    00000a69: 	jmp	.Ltmp1146 # Offset: 2665
    00000a6b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1133:
    00000a70: 	movq	%xmm2, %rax
    00000a75: 	movq	%xmm2, %rdx
    00000a7a: 	movapd	%xmm2, %xmm1
    00000a7e: 	movq	%xmm2, %r11
    00000a83: 	movapd	%xmm2, %xmm3
    00000a87: 	movq	%xmm2, %r10
    00000a8c: 	movapd	%xmm2, %xmm0
    00000a90: 	movq	%xmm2, %r8
    00000a95: 	movapd	%xmm2, %xmm15
    00000a9a: 	movq	%xmm2, %r9
    00000a9f: 	jmp	.Ltmp1136 # Offset: 2719
.Ltmp1134:
    00000aa4: 	movsd	DATAat0x17cd8(%rip), %xmm5
    00000aac: 	movq	%xmm2, %rax
    00000ab1: 	xorl	%ecx, %ecx
    00000ab3: 	movsd	DATAat0x17d10(%rip), %xmm4
    00000abb: 	movsd	DATAat0x17ce0(%rip), %xmm6
    00000ac3: 	movq	%xmm2, %rdx
    00000ac8: 	movsd	DATAat0x17d00(%rip), %xmm13
    00000ad1: 	movapd	%xmm2, %xmm1
    00000ad5: 	movsd	%xmm5, 0x8(%rsp)
    00000adb: 	movq	%xmm2, %r11
    00000ae0: 	movsd	DATAat0x17cf0(%rip), %xmm5
    00000ae8: 	movsd	DATAat0x17cc0(%rip), %xmm7
    00000af0: 	movsd	%xmm4, 0x20(%rsp)
    00000af6: 	movapd	%xmm2, %xmm3
    00000afa: 	movsd	DATAat0x17cb0(%rip), %xmm4
    00000b02: 	movsd	DATAat0x17ce8(%rip), %xmm9
    00000b0b: 	movsd	%xmm5, 0x18(%rsp)
    00000b11: 	movq	%xmm2, %r10
    00000b16: 	movsd	DATAat0x17dc0(%rip), %xmm5
    00000b1e: 	movsd	DATAat0x17c98(%rip), %xmm14
    00000b27: 	movsd	%xmm4, 0x10(%rsp)
    00000b2d: 	movapd	%xmm2, %xmm0
    00000b31: 	movsd	DATAat0x17d18(%rip), %xmm4
    00000b39: 	movsd	DATAat0x17dc8(%rip), %xmm10
    00000b42: 	movsd	%xmm5, 0x28(%rsp)
    00000b48: 	movq	%xmm2, %r8
    00000b4d: 	movsd	DATAat0x17cd0(%rip), %xmm5
    00000b55: 	movsd	DATAat0x17cc8(%rip), %xmm8
    00000b5e: 	movsd	%xmm4, 0x40(%rsp)
    00000b64: 	movapd	%xmm2, %xmm15
    00000b69: 	movsd	DATAat0x17cf8(%rip), %xmm4
    00000b71: 	movsd	DATAat0x17cb8(%rip), %xmm11
    00000b7a: 	movsd	%xmm13, 0x30(%rsp)
    00000b81: 	movq	%xmm2, %r9
    00000b86: 	movsd	DATAat0x17d08(%rip), %xmm13
    00000b8f: 	movsd	%xmm13, 0x38(%rsp)
    00000b96: 	jmp	.Ltmp1147 # Offset: 2966
.Ltmp1139:
    00000b9b: 	leaq	DATAat0x17018(%rip), %rdi
    00000ba2: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 2978
.Ltmp1143:
    00000ba7: 	callq	__stack_chk_fail@PLT # Offset: 2983
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_struct_local2IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z18test_struct5_localIdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 127
  State       : disassembled
  Address     : 0x146a0
  Size        : 0x38c
  MaxSize     : 0x390
  Offset      : 0x146a0
  Section     : .text
  Orc Section : .local.text._Z18test_struct5_localIdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0126:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pxor	%xmm0, %xmm0
    0000000a: 	pushq	%r12
    0000000c: 	pushq	%rbp
    0000000d: 	movq	%rdi, %rbp
    00000010: 	pushq	%rbx
    00000011: 	subq	$0x28, %rsp
    00000015: 	movq	%fs:0x28, %rax
    0000001e: 	movq	%rax, 0x18(%rsp)
    00000023: 	xorl	%eax, %eax
    00000025: 	cvtsi2sdl	init_value(%rip), %xmm0
    0000002d: 	movsd	%xmm0, 0x8(%rsp)
    00000033: 	callq	clock@PLT # Offset: 51
    00000038: 	movl	iterations(%rip), %esi
    0000003e: 	movsd	0x8(%rsp), %xmm0
    00000044: 	movq	%rax, start_time(%rip)
    0000004b: 	movapd	%xmm0, %xmm11
    00000050: 	movapd	%xmm0, %xmm2
    00000054: 	movapd	%xmm0, %xmm12
    00000059: 	testl	%esi, %esi
    0000005b: 	movapd	%xmm0, %xmm1
    0000005f: 	jle	.Ltmp1148 # Offset: 95
    00000065: 	movsd	DATAat0x17ce0(%rip), %xmm7
    0000006d: 	xorl	%ecx, %ecx
    0000006f: 	movsd	DATAat0x17cc0(%rip), %xmm6
    00000077: 	movsd	DATAat0x17ce8(%rip), %xmm5
    0000007f: 	movsd	DATAat0x17cd0(%rip), %xmm4
    00000087: 	movsd	DATAat0x17cd8(%rip), %xmm15
    00000090: 	movsd	DATAat0x17d10(%rip), %xmm3
    00000098: 	movsd	DATAat0x17c98(%rip), %xmm10
    000000a1: 	movsd	DATAat0x17cf8(%rip), %xmm9
    000000aa: 	movsd	DATAat0x17cb8(%rip), %xmm8
    000000b3: 	movsd	DATAat0x17cf0(%rip), %xmm14
    000000bc: 	movsd	DATAat0x17dc0(%rip), %xmm13
    000000c5: 	nopl	(%rax) # Size: 3
.Ltmp1149:
    000000c8: 	addsd	%xmm10, %xmm11
    000000cd: 	addsd	%xmm7, %xmm0
    000000d1: 	addl	$0x1, %ecx
    000000d4: 	addsd	%xmm10, %xmm12
    000000d9: 	addsd	%xmm7, %xmm2
    000000dd: 	addsd	%xmm4, %xmm1
    000000e1: 	addsd	%xmm7, %xmm11
    000000e6: 	addsd	%xmm6, %xmm0
    000000ea: 	addsd	%xmm9, %xmm12
    000000ef: 	addsd	%xmm4, %xmm2
    000000f3: 	addsd	%xmm3, %xmm1
    000000f7: 	addsd	DATAat0x17cb0(%rip), %xmm1
    000000ff: 	addsd	%xmm9, %xmm11
    00000104: 	addsd	%xmm5, %xmm0
    00000108: 	addsd	%xmm6, %xmm12
    0000010d: 	addsd	%xmm8, %xmm2
    00000112: 	addsd	DATAat0x17d18(%rip), %xmm1
    0000011a: 	addsd	%xmm4, %xmm11
    0000011f: 	addsd	%xmm15, %xmm0
    00000124: 	addsd	%xmm5, %xmm12
    00000129: 	addsd	%xmm3, %xmm2
    0000012d: 	addsd	DATAat0x17dc8(%rip), %xmm12
    00000136: 	addsd	DATAat0x17cc8(%rip), %xmm12
    0000013f: 	addsd	%xmm6, %xmm11
    00000144: 	addsd	%xmm14, %xmm0
    00000149: 	addsd	%xmm8, %xmm11
    0000014e: 	addsd	%xmm13, %xmm0
    00000153: 	addsd	%xmm5, %xmm11
    00000158: 	addsd	%xmm3, %xmm11
    0000015d: 	cmpl	%esi, %ecx
    0000015f: 	jne	.Ltmp1149 # Offset: 351
.Ltmp1148:
    00000165: 	pxor	%xmm3, %xmm3
    00000169: 	pxor	%xmm4, %xmm4
    0000016d: 	movl	$0x1, %ecx
    00000172: 	movsd	DATAat0x17de8(%rip), %xmm5
    0000017a: 	cvtsi2sd	%esi, %xmm3
    0000017e: 	cvtsi2sdl	init_value(%rip), %xmm4
    00000186: 	mulsd	%xmm3, %xmm5
    0000018a: 	addsd	%xmm4, %xmm5
    0000018e: 	ucomisd	%xmm0, %xmm5
    00000192: 	setp	%sil
    00000196: 	cmovnel	%ecx, %esi
    00000199: 	testb	%sil, %sil
    0000019c: 	jne	.Ltmp1150 # Offset: 412
    0000019e: 	movsd	DATAat0x17de0(%rip), %xmm0
    000001a6: 	mulsd	%xmm3, %xmm0
    000001aa: 	addsd	%xmm4, %xmm0
    000001ae: 	ucomisd	%xmm1, %xmm0
    000001b2: 	setp	%sil
    000001b6: 	cmovnel	%ecx, %esi
    000001b9: 	testb	%sil, %sil
    000001bc: 	jne	.Ltmp1150 # Offset: 444
    000001be: 	movsd	DATAat0x17e00(%rip), %xmm0
    000001c6: 	mulsd	%xmm3, %xmm0
    000001ca: 	mulsd	DATAat0x17dd0(%rip), %xmm3
    000001d2: 	addsd	%xmm4, %xmm0
    000001d6: 	addsd	%xmm4, %xmm3
    000001da: 	ucomisd	%xmm2, %xmm3
    000001de: 	setp	%sil
    000001e2: 	cmovnel	%ecx, %esi
    000001e5: 	ucomisd	%xmm0, %xmm12
    000001ea: 	setp	%dl
    000001ed: 	cmovnel	%ecx, %edx
    000001f0: 	orb	%dl, %sil
    000001f3: 	jne	.Ltmp1150 # Offset: 499
    000001f5: 	ucomisd	%xmm0, %xmm11
    000001fa: 	setp	%al
    000001fd: 	cmovnel	%ecx, %eax
    00000200: 	testb	%al, %al
    00000202: 	je	.Ltmp1151 # Offset: 514
.Ltmp1150:
    00000204: 	movq	(%rbp), %rdx
    00000208: 	leaq	DATAat0x17004(%rip), %rsi
    0000020f: 	movl	$0x1, %edi
    00000214: 	xorl	%eax, %eax
    00000216: 	callq	__printf_chk@PLT # Offset: 534
.Ltmp1151:
    0000021b: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    00000222: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000229: 	subq	$0x20, %rax
    0000022d: 	cmpq	%rax, %rbx
    00000230: 	je	.Ltmp1152 # Offset: 560
    00000236: 	leaq	0x10(%rbx), %rdi
    0000023a: 	movq	0x8(%rbp), %r12
    0000023e: 	movq	%rdi, (%rbx)
    00000241: 	movq	(%rbp), %r13
    00000245: 	movq	%r13, %rax
    00000248: 	addq	%r12, %rax
    0000024b: 	je	.Ltmp1153 # Offset: 587
    0000024d: 	testq	%r13, %r13
    00000250: 	je	.Ltmp1154 # Offset: 592
.Ltmp1153:
    00000256: 	movq	%r12, 0x10(%rsp)
    0000025b: 	cmpq	$0xf, %r12
    0000025f: 	ja	.Ltmp1155 # Offset: 607
    00000265: 	cmpq	$0x1, %r12
    00000269: 	jne	.Ltmp1156 # Offset: 617
    0000026f: 	movzbl	(%r13), %eax
    00000274: 	movb	%al, 0x10(%rbx)
.Ltmp1159:
    00000277: 	movq	%r12, 0x8(%rbx)
    0000027b: 	movb	$0x0, (%rdi,%r12)
    00000280: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000287: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    0000028e: 	addq	$0x20, %rax
    00000292: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000299: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000002a0: 	je	.Ltmp1157 # Offset: 672
.Ltmp1160:
    000002a6: 	movq	-0x20(%rax), %rbp
    000002aa: 	callq	clock@PLT # Offset: 682
    000002af: 	movq	%rax, end_time(%rip)
    000002b6: 	movq	0x18(%rsp), %rdx
    000002bb: 	subq	%fs:0x28, %rdx
    000002c4: 	jne	.Ltmp1158 # Offset: 708
    000002ca: 	subq	start_time(%rip), %rax
    000002d1: 	pxor	%xmm0, %xmm0
    000002d5: 	movq	%rbp, %rdi
    000002d8: 	cvtsi2sd	%rax, %xmm0
    000002dd: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000002e5: 	addq	$0x28, %rsp
    000002e9: 	popq	%rbx
    000002ea: 	popq	%rbp
    000002eb: 	popq	%r12
    000002ed: 	popq	%r13
    000002ef: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 751
    000002f4: 	nopl	(%rax) # Size: 4
.Ltmp1155:
    000002f8: 	movq	%rbx, %rdi
    000002fb: 	leaq	0x10(%rsp), %rsi
    00000300: 	xorl	%edx, %edx
    00000302: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 770
    00000307: 	movq	%rax, (%rbx)
    0000030a: 	movq	%rax, %rdi
    0000030d: 	movq	0x10(%rsp), %rax
    00000312: 	movq	%rax, 0x10(%rbx)
.Ltmp1161:
    00000316: 	movq	%r12, %rdx
    00000319: 	movq	%r13, %rsi
    0000031c: 	callq	memcpy@PLT # Offset: 796
    00000321: 	movq	0x10(%rsp), %r12
    00000326: 	movq	(%rbx), %rdi
    00000329: 	jmp	.Ltmp1159 # Offset: 809
    0000032e: 	nop # Size: 2
.Ltmp1152:
    00000330: 	movq	%rbp, %rsi
    00000333: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    0000033a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 826
    0000033f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000346: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    0000034d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000354: 	jne	.Ltmp1160 # Offset: 852
.Ltmp1157:
    0000035a: 	movq	-0x8(%rdx), %rax
    0000035e: 	addq	$0x200, %rax
    00000364: 	jmp	.Ltmp1160 # Offset: 868
    00000369: 	nopl	(%rax) # Size: 7
.Ltmp1156:
    00000370: 	testq	%r12, %r12
    00000373: 	je	.Ltmp1159 # Offset: 883
    00000379: 	jmp	.Ltmp1161 # Offset: 889
.Ltmp1158:
    0000037b: 	callq	__stack_chk_fail@PLT # Offset: 891
.Ltmp1154:
    00000380: 	leaq	DATAat0x17018(%rip), %rdi
    00000387: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 903
DWARF CFI Instructions:
    <empty>
End of Function "_Z18test_struct5_localIdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_Z11TestOneTypeIdEvv" after disassembly {
  Number      : 128
  State       : disassembled
  Address     : 0x14a30
  Size        : 0xd0d
  MaxSize     : 0xd10
  Offset      : 0x14a30
  Section     : .text
  Orc Section : .local.text._Z11TestOneTypeIdEvv
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0127:
    00000000: 	endbr64
    00000004: 	pushq	%r15
    00000006: 	leaq	DATAat0x17c84(%rip), %rsi
    0000000d: 	pushq	%r14
    0000000f: 	pushq	%r13
    00000011: 	pushq	%r12
    00000013: 	pushq	%rbp
    00000014: 	pushq	%rbx
    00000015: 	subq	$0x148, %rsp
    0000001c: 	movq	%fs:0x28, %rax
    00000025: 	movq	%rax, 0x138(%rsp)
    0000002d: 	xorl	%eax, %eax
    0000002f: 	leaq	0xf0(%rsp), %rax
    00000037: 	movq	%rax, %rdi
    0000003a: 	movq	%rax, 0x18(%rsp)
    0000003f: 	callq	"_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.constprop.0/1" # Offset: 63
    00000044: 	movdqa	_Z7gLabelsB5cxx11+32(%rip), %xmm7
    0000004c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000053: 	movdqa	_Z7gLabelsB5cxx11+16(%rip), %xmm3
    0000005b: 	movq	_Z7gLabelsB5cxx11+56(%rip), %r14
    00000062: 	movhlps	%xmm7, %xmm6
    00000065: 	movq	%rax, 0x20(%rsp)
    0000006a: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    00000071: 	movq	%xmm6, %rcx
    00000076: 	movaps	%xmm3, 0x40(%rsp)
    0000007b: 	movq	%xmm3, %rbp
    00000080: 	leaq	0x8(%rcx), %r12
    00000084: 	movq	%rax, (%rsp)
    00000088: 	movaps	%xmm7, 0x30(%rsp)
    0000008d: 	movq	%xmm6, 0x58(%rsp)
    00000093: 	movq	%xmm7, 0x50(%rsp)
    00000099: 	cmpq	%r12, %rax
    0000009c: 	jbe	.Ltmp1162 # Offset: 156
    0000009e: 	movq	%r12, %r13
    000000a1: 	nopl	(%rax) # Size: 7
.Ltmp1165:
    000000a8: 	movq	(%r13), %r15
    000000ac: 	leaq	0x200(%r15), %rbx
    000000b3: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1164:
    000000b8: 	movq	(%r15), %rdi
    000000bb: 	leaq	0x10(%r15), %rdx
    000000bf: 	cmpq	%rdx, %rdi
    000000c2: 	je	.Ltmp1163 # Offset: 194
    000000c8: 	movq	0x10(%r15), %rax
    000000cc: 	addq	$0x20, %r15
    000000d0: 	leaq	0x1(%rax), %rsi
    000000d4: 	callq	_ZdlPvm@PLT # Offset: 212
    000000d9: 	cmpq	%rbx, %r15
    000000dc: 	jne	.Ltmp1164 # Offset: 220
    000000de: 	addq	$0x8, %r13
    000000e2: 	cmpq	%r13, (%rsp)
    000000e6: 	ja	.Ltmp1165 # Offset: 230
.Ltmp1162:
    000000e8: 	movq	0x58(%rsp), %rcx
    000000ed: 	cmpq	%rcx, (%rsp)
    000000f1: 	je	.Ltmp1166 # Offset: 241
.Ltmp1203:
    000000f7: 	cmpq	0x50(%rsp), %rbp
    000000fc: 	je	.Ltmp1167 # Offset: 252
.Ltmp1169:
    000000fe: 	movq	(%rbp), %rdi
    00000102: 	leaq	0x10(%rbp), %rax
    00000106: 	cmpq	%rax, %rdi
    00000109: 	je	.Ltmp1168 # Offset: 265
    0000010f: 	movq	0x10(%rbp), %rax
    00000113: 	addq	$0x20, %rbp
    00000117: 	leaq	0x1(%rax), %rsi
    0000011b: 	callq	_ZdlPvm@PLT # Offset: 283
    00000120: 	cmpq	%rbp, 0x50(%rsp)
    00000125: 	jne	.Ltmp1169 # Offset: 293
.Ltmp1167:
    00000127: 	cmpq	%r14, 0x20(%rsp)
    0000012c: 	je	.Ltmp1170 # Offset: 300
    0000012e: 	nop # Size: 2
.Ltmp1172:
    00000130: 	movq	(%r14), %rdi
    00000133: 	leaq	0x10(%r14), %rax
    00000137: 	cmpq	%rax, %rdi
    0000013a: 	je	.Ltmp1171 # Offset: 314
    00000140: 	movq	0x10(%r14), %rax
    00000144: 	addq	$0x20, %r14
    00000148: 	leaq	0x1(%rax), %rsi
    0000014c: 	callq	_ZdlPvm@PLT # Offset: 332
    00000151: 	cmpq	%r14, 0x20(%rsp)
    00000156: 	jne	.Ltmp1172 # Offset: 342
.Ltmp1170:
    00000158: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rax
    0000015f: 	leaq	0x8(%rax), %rbx
    00000163: 	cmpq	%r12, %rbx
    00000166: 	jbe	.Ltmp1173 # Offset: 358
    00000168: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1174:
    00000170: 	movq	(%r12), %rdi
    00000174: 	movl	$0x200, %esi
    00000179: 	addq	$0x8, %r12
    0000017d: 	callq	_ZdlPvm@PLT # Offset: 381
    00000182: 	cmpq	%r12, %rbx
    00000185: 	ja	.Ltmp1174 # Offset: 389
.Ltmp1173:
    00000187: 	pxor	%xmm6, %xmm6
    0000018b: 	movdqa	0x40(%rsp), %xmm4
    00000191: 	leaq	0x110(%rsp), %rbp
    00000199: 	movq	0x18(%rsp), %rsi
    0000019e: 	cvtsi2sdl	init_value(%rip), %xmm6
    000001a6: 	leaq	DATAat0x17970(%rip), %rdx
    000001ad: 	movq	%rbp, %rdi
    000001b0: 	movaps	%xmm4, _Z7gLabelsB5cxx11+48(%rip)
    000001b7: 	movdqa	0x30(%rsp), %xmm4
    000001bd: 	movaps	%xmm4, _Z7gLabelsB5cxx11+64(%rip)
    000001c4: 	movapd	%xmm6, %xmm3
    000001c8: 	movsd	%xmm6, (%rsp)
    000001cd: 	movsd	%xmm6, 0xe0(%rsp)
    000001d6: 	unpcklpd	%xmm3, %xmm3
    000001da: 	movaps	%xmm3, 0x90(%rsp)
    000001e2: 	movaps	%xmm3, 0xa0(%rsp)
    000001ea: 	movaps	%xmm3, 0xb0(%rsp)
    000001f2: 	movaps	%xmm3, 0xc0(%rsp)
    000001fa: 	movaps	%xmm3, 0x20(%rsp)
    000001ff: 	movaps	%xmm3, 0xd0(%rsp)
    00000207: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 519
    0000020c: 	callq	clock@PLT # Offset: 524
    00000211: 	pxor	%xmm1, %xmm1
    00000215: 	movq	%rbp, %rsi
    00000218: 	movapd	DATAat0x17df0(%rip), %xmm2
    00000220: 	cvtsi2sdl	iterations(%rip), %xmm1
    00000228: 	movapd	0x20(%rsp), %xmm7
    0000022e: 	leaq	0x90(%rsp), %r12
    00000236: 	movq	%rax, start_time(%rip)
    0000023d: 	movq	%r12, %rdi
    00000240: 	movapd	%xmm1, %xmm0
    00000244: 	mulsd	DATAat0x17da0(%rip), %xmm1
    0000024c: 	unpcklpd	%xmm0, %xmm0
    00000250: 	mulpd	%xmm0, %xmm2
    00000254: 	addsd	(%rsp), %xmm1
    00000259: 	movsd	%xmm1, 0xe0(%rsp)
    00000262: 	addpd	%xmm7, %xmm2
    00000266: 	movaps	%xmm2, 0x90(%rsp)
    0000026e: 	movapd	DATAat0x17e00(%rip), %xmm2
    00000276: 	mulpd	%xmm0, %xmm2
    0000027a: 	addpd	%xmm7, %xmm2
    0000027e: 	movaps	%xmm2, 0xa0(%rsp)
    00000286: 	movapd	DATAat0x17e10(%rip), %xmm2
    0000028e: 	mulpd	%xmm0, %xmm2
    00000292: 	addpd	%xmm7, %xmm2
    00000296: 	movaps	%xmm2, 0xb0(%rsp)
    0000029e: 	movapd	DATAat0x17e20(%rip), %xmm2
    000002a6: 	mulpd	%xmm0, %xmm2
    000002aa: 	mulpd	DATAat0x17e30(%rip), %xmm0
    000002b2: 	addpd	%xmm7, %xmm2
    000002b6: 	addpd	%xmm7, %xmm0
    000002ba: 	movaps	%xmm2, 0xc0(%rsp)
    000002c2: 	movaps	%xmm0, 0xd0(%rsp)
    000002ca: 	callq	_Z12check11_sumsIdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 714
    000002cf: 	movq	%rbp, %rdi
    000002d2: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 722
    000002d7: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000002de: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000002e5: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000002ec: 	je	.Ltmp1175 # Offset: 748
.Ltmp1204:
    000002f2: 	movq	-0x20(%rax), %r13
    000002f6: 	callq	clock@PLT # Offset: 758
    000002fb: 	pxor	%xmm0, %xmm0
    000002ff: 	movq	%rax, end_time(%rip)
    00000306: 	movq	%r13, %rdi
    00000309: 	subq	start_time(%rip), %rax
    00000310: 	cvtsi2sd	%rax, %xmm0
    00000315: 	divsd	DATAat0x17ca0(%rip), %xmm0
    0000031d: 	callq	_Z13record_resultdPKc # Offset: 797
    00000322: 	movq	0x110(%rsp), %rdi
    0000032a: 	leaq	0x120(%rsp), %rbx
    00000332: 	cmpq	%rbx, %rdi
    00000335: 	je	.Ltmp1176 # Offset: 821
    00000337: 	movq	0x120(%rsp), %rax
    0000033f: 	leaq	0x1(%rax), %rsi
    00000343: 	callq	_ZdlPvm@PLT # Offset: 835
.Ltmp1176:
    00000348: 	pxor	%xmm3, %xmm3
    0000034c: 	movq	0x18(%rsp), %rsi
    00000351: 	leaq	DATAat0x179a0(%rip), %rdx
    00000358: 	movq	%rbp, %rdi
    0000035b: 	cvtsi2sdl	init_value(%rip), %xmm3
    00000363: 	movapd	%xmm3, %xmm5
    00000367: 	movq	%xmm3, %r13
    0000036c: 	movsd	%xmm3, 0xe0(%rsp)
    00000375: 	unpcklpd	%xmm5, %xmm5
    00000379: 	movaps	%xmm5, 0x90(%rsp)
    00000381: 	movaps	%xmm5, 0xa0(%rsp)
    00000389: 	movaps	%xmm5, 0xb0(%rsp)
    00000391: 	movaps	%xmm5, 0xc0(%rsp)
    00000399: 	movaps	%xmm5, (%rsp)
    0000039d: 	movaps	%xmm5, 0xd0(%rsp)
    000003a5: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 933
    000003aa: 	callq	clock@PLT # Offset: 938
    000003af: 	movl	iterations(%rip), %edx
    000003b5: 	movapd	(%rsp), %xmm1
    000003ba: 	movq	%rax, start_time(%rip)
    000003c1: 	testl	%edx, %edx
    000003c3: 	jle	.Ltmp1177 # Offset: 963
    000003c9: 	movapd	DATAat0x17da0(%rip), %xmm8
    000003d2: 	movapd	DATAat0x17db0(%rip), %xmm7
    000003da: 	movapd	%xmm1, %xmm3
    000003de: 	movapd	%xmm1, %xmm0
    000003e2: 	movapd	DATAat0x17dc0(%rip), %xmm6
    000003ea: 	movapd	DATAat0x17dd0(%rip), %xmm5
    000003f2: 	movapd	%xmm1, %xmm2
    000003f6: 	xorl	%eax, %eax
    000003f8: 	movapd	DATAat0x17de0(%rip), %xmm4
.Ltmp1178:
    00000400: 	movapd	(%rsp), %xmm9
    00000406: 	addl	$0x1, %eax
    00000409: 	addpd	%xmm7, %xmm1
    0000040d: 	addpd	%xmm6, %xmm2
    00000411: 	addpd	%xmm5, %xmm0
    00000415: 	addpd	%xmm4, %xmm3
    00000419: 	addpd	%xmm8, %xmm9
    0000041e: 	movaps	%xmm9, (%rsp)
    00000423: 	cmpl	%edx, %eax
    00000425: 	jne	.Ltmp1178 # Offset: 1061
    00000427: 	movapd	%xmm9, %xmm6
    0000042c: 	movapd	%xmm9, %xmm4
    00000431: 	shufpd	$0x1, %xmm1, %xmm1
    00000436: 	shufpd	$0x1, %xmm2, %xmm2
    0000043b: 	unpckhpd	%xmm6, %xmm6
    0000043f: 	shufpd	$0x1, %xmm0, %xmm0
    00000444: 	shufpd	$0x1, %xmm3, %xmm3
    00000449: 	movq	%xmm6, %r13
.Ltmp1209:
    0000044e: 	movq	%rbp, %rsi
    00000451: 	movq	%r12, %rdi
    00000454: 	movq	%r13, 0xd8(%rsp)
    0000045c: 	movaps	%xmm3, 0x90(%rsp)
    00000464: 	movaps	%xmm0, 0xa0(%rsp)
    0000046c: 	movlpd	%xmm0, 0xb0(%rsp)
    00000475: 	movups	%xmm2, 0xb8(%rsp)
    0000047d: 	movups	%xmm1, 0xc8(%rsp)
    00000485: 	movsd	%xmm4, 0xe0(%rsp)
    0000048e: 	callq	_Z12check11_sumsIdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1166
    00000493: 	movq	%rbp, %rdi
    00000496: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1174
    0000049b: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000004a2: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000004a9: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000004b0: 	je	.Ltmp1179 # Offset: 1200
.Ltmp1207:
    000004b6: 	movq	-0x20(%rax), %r13
    000004ba: 	callq	clock@PLT # Offset: 1210
    000004bf: 	pxor	%xmm0, %xmm0
    000004c3: 	movq	%rax, end_time(%rip)
    000004ca: 	movq	%r13, %rdi
    000004cd: 	subq	start_time(%rip), %rax
    000004d4: 	cvtsi2sd	%rax, %xmm0
    000004d9: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000004e1: 	callq	_Z13record_resultdPKc # Offset: 1249
    000004e6: 	movq	0x110(%rsp), %rdi
    000004ee: 	cmpq	%rbx, %rdi
    000004f1: 	je	.Ltmp1180 # Offset: 1265
    000004f3: 	movq	0x120(%rsp), %rax
    000004fb: 	leaq	0x1(%rax), %rsi
    000004ff: 	callq	_ZdlPvm@PLT # Offset: 1279
.Ltmp1180:
    00000504: 	pxor	%xmm1, %xmm1
    00000508: 	movq	0x18(%rsp), %rsi
    0000050d: 	leaq	DATAat0x179d0(%rip), %rdx
    00000514: 	movq	%rbp, %rdi
    00000517: 	cvtsi2sdl	init_value(%rip), %xmm1
    0000051f: 	movsd	%xmm1, 0xe0(%rsp)
    00000528: 	movapd	%xmm1, %xmm0
    0000052c: 	unpcklpd	%xmm0, %xmm0
    00000530: 	movaps	%xmm0, 0x90(%rsp)
    00000538: 	movaps	%xmm0, 0xa0(%rsp)
    00000540: 	movaps	%xmm0, 0xb0(%rsp)
    00000548: 	movaps	%xmm0, 0xc0(%rsp)
    00000550: 	movaps	%xmm0, 0xd0(%rsp)
    00000558: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1368
    0000055d: 	movq	%rbp, %rsi
    00000560: 	movq	%r12, %rdi
    00000563: 	callq	_Z16test_struct_arg2IdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1379
    00000568: 	movq	0x110(%rsp), %rdi
    00000570: 	cmpq	%rbx, %rdi
    00000573: 	je	.Ltmp1181 # Offset: 1395
    00000575: 	movq	0x120(%rsp), %rax
    0000057d: 	leaq	0x1(%rax), %rsi
    00000581: 	callq	_ZdlPvm@PLT # Offset: 1409
.Ltmp1181:
    00000586: 	pxor	%xmm1, %xmm1
    0000058a: 	movq	0x18(%rsp), %rsi
    0000058f: 	leaq	DATAat0x17a00(%rip), %rdx
    00000596: 	movq	%rbp, %rdi
    00000599: 	cvtsi2sdl	init_value(%rip), %xmm1
    000005a1: 	movsd	%xmm1, 0xe0(%rsp)
    000005aa: 	movapd	%xmm1, %xmm0
    000005ae: 	unpcklpd	%xmm0, %xmm0
    000005b2: 	movaps	%xmm0, 0x90(%rsp)
    000005ba: 	movaps	%xmm0, 0xa0(%rsp)
    000005c2: 	movaps	%xmm0, 0xb0(%rsp)
    000005ca: 	movaps	%xmm0, 0xc0(%rsp)
    000005d2: 	movaps	%xmm0, 0xd0(%rsp)
    000005da: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1498
    000005df: 	movq	%rbp, %rsi
    000005e2: 	movq	%r12, %rdi
    000005e5: 	callq	_Z15test_struct_argIdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1509
    000005ea: 	movq	0x110(%rsp), %rdi
    000005f2: 	cmpq	%rbx, %rdi
    000005f5: 	je	.Ltmp1182 # Offset: 1525
    000005f7: 	movq	0x120(%rsp), %rax
    000005ff: 	leaq	0x1(%rax), %rsi
    00000603: 	callq	_ZdlPvm@PLT # Offset: 1539
.Ltmp1182:
    00000608: 	pxor	%xmm0, %xmm0
    0000060c: 	movq	0x18(%rsp), %rsi
    00000611: 	leaq	DATAat0x17a28(%rip), %rdx
    00000618: 	movq	%rbp, %rdi
    0000061b: 	cvtsi2sdl	init_value(%rip), %xmm0
    00000623: 	movsd	%xmm0, 0x80(%rsp)
    0000062c: 	movapd	%xmm0, %xmm4
    00000630: 	unpcklpd	%xmm4, %xmm4
    00000634: 	movaps	%xmm4, 0x60(%rsp)
    00000639: 	movaps	%xmm4, (%rsp)
    0000063d: 	movaps	%xmm4, 0x70(%rsp)
    00000642: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1602
    00000647: 	callq	clock@PLT # Offset: 1607
    0000064c: 	pxor	%xmm0, %xmm0
    00000650: 	movapd	(%rsp), %xmm4
    00000655: 	movq	%rbp, %rsi
    00000658: 	cvtsi2sdl	iterations(%rip), %xmm0
    00000660: 	movapd	DATAat0x17e00(%rip), %xmm1
    00000668: 	leaq	0x60(%rsp), %r12
    0000066d: 	movq	%rax, start_time(%rip)
    00000674: 	movq	%r12, %rdi
    00000677: 	unpcklpd	%xmm0, %xmm0
    0000067b: 	mulpd	%xmm0, %xmm1
    0000067f: 	mulpd	DATAat0x17df0(%rip), %xmm0
    00000687: 	addpd	%xmm4, %xmm1
    0000068b: 	addpd	%xmm4, %xmm0
    0000068f: 	movaps	%xmm1, 0x70(%rsp)
    00000694: 	movaps	%xmm0, 0x60(%rsp)
    00000699: 	movlpd	%xmm1, 0x80(%rsp)
    000006a2: 	callq	_Z11check5_sumsIdEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 1698
    000006a7: 	movq	%rbp, %rdi
    000006aa: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 1706
    000006af: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000006b6: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000006bd: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000006c4: 	je	.Ltmp1183 # Offset: 1732
.Ltmp1206:
    000006ca: 	movq	-0x20(%rax), %r13
    000006ce: 	callq	clock@PLT # Offset: 1742
    000006d3: 	pxor	%xmm0, %xmm0
    000006d7: 	movq	%rax, end_time(%rip)
    000006de: 	movq	%r13, %rdi
    000006e1: 	subq	start_time(%rip), %rax
    000006e8: 	cvtsi2sd	%rax, %xmm0
    000006ed: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000006f5: 	callq	_Z13record_resultdPKc # Offset: 1781
    000006fa: 	movq	0x110(%rsp), %rdi
    00000702: 	cmpq	%rbx, %rdi
    00000705: 	je	.Ltmp1184 # Offset: 1797
    00000707: 	movq	0x120(%rsp), %rax
    0000070f: 	leaq	0x1(%rax), %rsi
    00000713: 	callq	_ZdlPvm@PLT # Offset: 1811
.Ltmp1184:
    00000718: 	pxor	%xmm0, %xmm0
    0000071c: 	movq	0x18(%rsp), %rsi
    00000721: 	leaq	DATAat0x17a60(%rip), %rdx
    00000728: 	movq	%rbp, %rdi
    0000072b: 	cvtsi2sdl	init_value(%rip), %xmm0
    00000733: 	movsd	%xmm0, 0x80(%rsp)
    0000073c: 	movapd	%xmm0, %xmm2
    00000740: 	unpcklpd	%xmm2, %xmm2
    00000744: 	movaps	%xmm2, 0x60(%rsp)
    00000749: 	movaps	%xmm2, (%rsp)
    0000074d: 	movaps	%xmm2, 0x70(%rsp)
    00000752: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 1874
    00000757: 	callq	clock@PLT # Offset: 1879
    0000075c: 	movl	iterations(%rip), %edx
    00000762: 	movq	%rax, start_time(%rip)
    00000769: 	testl	%edx, %edx
    0000076b: 	jle	.Ltmp1185 # Offset: 1899
    00000771: 	movapd	(%rsp), %xmm0
    00000776: 	movapd	DATAat0x17dd0(%rip), %xmm5
    0000077e: 	xorl	%eax, %eax
    00000780: 	movapd	DATAat0x17de0(%rip), %xmm4
    00000788: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1186:
    00000790: 	movapd	(%rsp), %xmm6
    00000795: 	addl	$0x1, %eax
    00000798: 	addpd	%xmm4, %xmm0
    0000079c: 	addpd	%xmm5, %xmm6
    000007a0: 	movaps	%xmm6, (%rsp)
    000007a4: 	cmpl	%edx, %eax
    000007a6: 	jne	.Ltmp1186 # Offset: 1958
    000007a8: 	shufpd	$0x1, %xmm0, %xmm0
    000007ad: 	movapd	%xmm6, %xmm1
    000007b1: 	movaps	%xmm0, (%rsp)
    000007b5: 	movapd	%xmm0, %xmm4
    000007b9: 	shufpd	$0x1, %xmm6, %xmm1
.Ltmp1208:
    000007be: 	movq	%rbp, %rsi
    000007c1: 	movq	%r12, %rdi
    000007c4: 	movaps	%xmm4, 0x60(%rsp)
    000007c9: 	movaps	%xmm1, 0x70(%rsp)
    000007ce: 	movlpd	%xmm1, 0x80(%rsp)
    000007d7: 	callq	_Z11check5_sumsIdEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2007
    000007dc: 	movq	%rbp, %rdi
    000007df: 	callq	"_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.constprop.0/1" # Offset: 2015
    000007e4: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    000007eb: 	cmpq	_Z7gLabelsB5cxx11+56(%rip), %rax
    000007f2: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    000007f9: 	je	.Ltmp1187 # Offset: 2041
.Ltmp1205:
    000007ff: 	movq	-0x20(%rax), %r13
    00000803: 	callq	clock@PLT # Offset: 2051
    00000808: 	pxor	%xmm0, %xmm0
    0000080c: 	movq	%rax, end_time(%rip)
    00000813: 	movq	%r13, %rdi
    00000816: 	subq	start_time(%rip), %rax
    0000081d: 	cvtsi2sd	%rax, %xmm0
    00000822: 	divsd	DATAat0x17ca0(%rip), %xmm0
    0000082a: 	callq	_Z13record_resultdPKc # Offset: 2090
    0000082f: 	movq	0x110(%rsp), %rdi
    00000837: 	cmpq	%rbx, %rdi
    0000083a: 	je	.Ltmp1188 # Offset: 2106
    0000083c: 	movq	0x120(%rsp), %rax
    00000844: 	leaq	0x1(%rax), %rsi
    00000848: 	callq	_ZdlPvm@PLT # Offset: 2120
.Ltmp1188:
    0000084d: 	pxor	%xmm0, %xmm0
    00000851: 	movq	0x18(%rsp), %rsi
    00000856: 	leaq	DATAat0x17a98(%rip), %rdx
    0000085d: 	movq	%rbp, %rdi
    00000860: 	cvtsi2sdl	init_value(%rip), %xmm0
    00000868: 	movsd	%xmm0, 0x80(%rsp)
    00000871: 	movapd	%xmm0, %xmm1
    00000875: 	unpcklpd	%xmm1, %xmm1
    00000879: 	movaps	%xmm1, 0x60(%rsp)
    0000087e: 	movaps	%xmm1, 0x70(%rsp)
    00000883: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2179
    00000888: 	movq	%rbp, %rsi
    0000088b: 	movq	%r12, %rdi
    0000088e: 	callq	_Z17test_struct5_arg2IdEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2190
    00000893: 	movq	0x110(%rsp), %rdi
    0000089b: 	cmpq	%rbx, %rdi
    0000089e: 	je	.Ltmp1189 # Offset: 2206
    000008a0: 	movq	0x120(%rsp), %rax
    000008a8: 	leaq	0x1(%rax), %rsi
    000008ac: 	callq	_ZdlPvm@PLT # Offset: 2220
.Ltmp1189:
    000008b1: 	pxor	%xmm0, %xmm0
    000008b5: 	movq	0x18(%rsp), %rsi
    000008ba: 	leaq	DATAat0x17ad0(%rip), %rdx
    000008c1: 	movq	%rbp, %rdi
    000008c4: 	cvtsi2sdl	init_value(%rip), %xmm0
    000008cc: 	movsd	%xmm0, 0x80(%rsp)
    000008d5: 	movapd	%xmm0, %xmm1
    000008d9: 	unpcklpd	%xmm1, %xmm1
    000008dd: 	movaps	%xmm1, 0x60(%rsp)
    000008e2: 	movaps	%xmm1, 0x70(%rsp)
    000008e7: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2279
    000008ec: 	movq	%rbp, %rsi
    000008ef: 	movq	%r12, %rdi
    000008f2: 	callq	_Z16test_struct5_argIdEvP12test_struct5IT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2290
    000008f7: 	movq	0x110(%rsp), %rdi
    000008ff: 	cmpq	%rbx, %rdi
    00000902: 	je	.Ltmp1190 # Offset: 2306
    00000904: 	movq	0x120(%rsp), %rax
    0000090c: 	leaq	0x1(%rax), %rsi
    00000910: 	callq	_ZdlPvm@PLT # Offset: 2320
.Ltmp1190:
    00000915: 	movq	0x18(%rsp), %rsi
    0000091a: 	leaq	DATAat0x17b00(%rip), %rdx
    00000921: 	movq	%rbp, %rdi
    00000924: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2340
    00000929: 	movq	%rbp, %rdi
    0000092c: 	callq	_Z18test_struct_local0IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2348
    00000931: 	movq	0x110(%rsp), %rdi
    00000939: 	cmpq	%rbx, %rdi
    0000093c: 	je	.Ltmp1191 # Offset: 2364
    0000093e: 	movq	0x120(%rsp), %rax
    00000946: 	leaq	0x1(%rax), %rsi
    0000094a: 	callq	_ZdlPvm@PLT # Offset: 2378
.Ltmp1191:
    0000094f: 	movq	0x18(%rsp), %rsi
    00000954: 	leaq	DATAat0x17b30(%rip), %rdx
    0000095b: 	movq	%rbp, %rdi
    0000095e: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2398
    00000963: 	movq	%rbp, %rdi
    00000966: 	callq	_Z18test_struct_local1IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2406
    0000096b: 	movq	0x110(%rsp), %rdi
    00000973: 	cmpq	%rbx, %rdi
    00000976: 	je	.Ltmp1192 # Offset: 2422
    00000978: 	movq	0x120(%rsp), %rax
    00000980: 	leaq	0x1(%rax), %rsi
    00000984: 	callq	_ZdlPvm@PLT # Offset: 2436
.Ltmp1192:
    00000989: 	movq	0x18(%rsp), %rsi
    0000098e: 	leaq	DATAat0x17b60(%rip), %rdx
    00000995: 	movq	%rbp, %rdi
    00000998: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2456
    0000099d: 	movq	%rbp, %rdi
    000009a0: 	callq	_Z18test_struct_local2IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2464
    000009a5: 	movq	0x110(%rsp), %rdi
    000009ad: 	cmpq	%rbx, %rdi
    000009b0: 	je	.Ltmp1193 # Offset: 2480
    000009b2: 	movq	0x120(%rsp), %rax
    000009ba: 	leaq	0x1(%rax), %rsi
    000009be: 	callq	_ZdlPvm@PLT # Offset: 2494
.Ltmp1193:
    000009c3: 	movq	0x18(%rsp), %rsi
    000009c8: 	leaq	DATAat0x17b90(%rip), %rdx
    000009cf: 	movq	%rbp, %rdi
    000009d2: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2514
    000009d7: 	movq	%rbp, %rdi
    000009da: 	callq	_Z17test_struct_localIdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2522
    000009df: 	movq	0x110(%rsp), %rdi
    000009e7: 	cmpq	%rbx, %rdi
    000009ea: 	je	.Ltmp1194 # Offset: 2538
    000009ec: 	movq	0x120(%rsp), %rax
    000009f4: 	leaq	0x1(%rax), %rsi
    000009f8: 	callq	_ZdlPvm@PLT # Offset: 2552
.Ltmp1194:
    000009fd: 	movq	0x18(%rsp), %rsi
    00000a02: 	leaq	DATAat0x17bb8(%rip), %rdx
    00000a09: 	movq	%rbp, %rdi
    00000a0c: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2572
    00000a11: 	movq	%rbp, %rdi
    00000a14: 	callq	_Z19test_struct5_local0IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2580
    00000a19: 	movq	0x110(%rsp), %rdi
    00000a21: 	cmpq	%rbx, %rdi
    00000a24: 	je	.Ltmp1195 # Offset: 2596
    00000a26: 	movq	0x120(%rsp), %rax
    00000a2e: 	leaq	0x1(%rax), %rsi
    00000a32: 	callq	_ZdlPvm@PLT # Offset: 2610
.Ltmp1195:
    00000a37: 	movq	0x18(%rsp), %rsi
    00000a3c: 	leaq	DATAat0x17be8(%rip), %rdx
    00000a43: 	movq	%rbp, %rdi
    00000a46: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2630
    00000a4b: 	movq	%rbp, %rdi
    00000a4e: 	callq	_Z19test_struct5_local1IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2638
    00000a53: 	movq	0x110(%rsp), %rdi
    00000a5b: 	cmpq	%rbx, %rdi
    00000a5e: 	je	.Ltmp1196 # Offset: 2654
    00000a60: 	movq	0x120(%rsp), %rax
    00000a68: 	leaq	0x1(%rax), %rsi
    00000a6c: 	callq	_ZdlPvm@PLT # Offset: 2668
.Ltmp1196:
    00000a71: 	movq	0x18(%rsp), %rsi
    00000a76: 	leaq	DATAat0x17c18(%rip), %rdx
    00000a7d: 	movq	%rbp, %rdi
    00000a80: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2688
    00000a85: 	movq	%rbp, %rdi
    00000a88: 	callq	_Z19test_struct5_local2IdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2696
    00000a8d: 	movq	0x110(%rsp), %rdi
    00000a95: 	cmpq	%rbx, %rdi
    00000a98: 	je	.Ltmp1197 # Offset: 2712
    00000a9a: 	movq	0x120(%rsp), %rax
    00000aa2: 	leaq	0x1(%rax), %rsi
    00000aa6: 	callq	_ZdlPvm@PLT # Offset: 2726
.Ltmp1197:
    00000aab: 	movq	0x18(%rsp), %rsi
    00000ab0: 	leaq	DATAat0x17c48(%rip), %rdx
    00000ab7: 	movq	%rbp, %rdi
    00000aba: 	callq	_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_ # Offset: 2746
    00000abf: 	movq	%rbp, %rdi
    00000ac2: 	callq	_Z18test_struct5_localIdEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2754
    00000ac7: 	movq	0x110(%rsp), %rdi
    00000acf: 	cmpq	%rbx, %rdi
    00000ad2: 	je	.Ltmp1198 # Offset: 2770
    00000ad4: 	movq	0x120(%rsp), %rax
    00000adc: 	leaq	0x1(%rax), %rsi
    00000ae0: 	callq	_ZdlPvm@PLT # Offset: 2784
.Ltmp1198:
    00000ae5: 	movq	0xf0(%rsp), %rdi
    00000aed: 	leaq	0x100(%rsp), %rax
    00000af5: 	cmpq	%rax, %rdi
    00000af8: 	je	.Ltmp1199 # Offset: 2808
    00000afa: 	movq	0x100(%rsp), %rax
    00000b02: 	leaq	0x1(%rax), %rsi
    00000b06: 	callq	_ZdlPvm@PLT # Offset: 2822
.Ltmp1199:
    00000b0b: 	movq	0x138(%rsp), %rax
    00000b13: 	subq	%fs:0x28, %rax
    00000b1c: 	jne	.Ltmp1200 # Offset: 2844
    00000b22: 	addq	$0x148, %rsp
    00000b29: 	popq	%rbx
    00000b2a: 	popq	%rbp
    00000b2b: 	popq	%r12
    00000b2d: 	popq	%r13
    00000b2f: 	popq	%r14
    00000b31: 	popq	%r15
    00000b33: 	retq # Offset: 2867
    00000b34: 	nopl	(%rax) # Size: 4
.Ltmp1201:
    00000b38: 	addq	$0x20, %rbp
.Ltmp1166:
    00000b3c: 	cmpq	%rbp, 0x20(%rsp)
    00000b41: 	je	.Ltmp1170 # Offset: 2881
.Ltmp1202:
    00000b47: 	movq	(%rbp), %rdi
    00000b4b: 	leaq	0x10(%rbp), %rax
    00000b4f: 	cmpq	%rax, %rdi
    00000b52: 	je	.Ltmp1201 # Offset: 2898
    00000b54: 	movq	0x10(%rbp), %rax
    00000b58: 	addq	$0x20, %rbp
    00000b5c: 	leaq	0x1(%rax), %rsi
    00000b60: 	callq	_ZdlPvm@PLT # Offset: 2912
    00000b65: 	cmpq	%rbp, 0x20(%rsp)
    00000b6a: 	jne	.Ltmp1202 # Offset: 2922
    00000b6c: 	jmp	.Ltmp1170 # Offset: 2924
    00000b71: 	nopl	(%rax) # Size: 7
.Ltmp1163:
    00000b78: 	addq	$0x20, %r15
    00000b7c: 	cmpq	%rbx, %r15
    00000b7f: 	jne	.Ltmp1164 # Offset: 2943
    00000b85: 	addq	$0x8, %r13
    00000b89: 	cmpq	%r13, (%rsp)
    00000b8d: 	ja	.Ltmp1165 # Offset: 2957
    00000b93: 	jmp	.Ltmp1162 # Offset: 2963
    00000b98: 	nopl	(%rax,%rax) # Size: 8
.Ltmp1168:
    00000ba0: 	addq	$0x20, %rbp
    00000ba4: 	jmp	.Ltmp1203 # Offset: 2980
    00000ba9: 	nopl	(%rax) # Size: 7
.Ltmp1171:
    00000bb0: 	addq	$0x20, %r14
    00000bb4: 	cmpq	%r14, 0x20(%rsp)
    00000bb9: 	jne	.Ltmp1172 # Offset: 3001
    00000bbf: 	jmp	.Ltmp1170 # Offset: 3007
.Ltmp1175:
    00000bc4: 	movq	-0x8(%rdx), %rax
    00000bc8: 	addq	$0x200, %rax
    00000bce: 	jmp	.Ltmp1204 # Offset: 3022
.Ltmp1187:
    00000bd3: 	movq	-0x8(%rdx), %rax
    00000bd7: 	addq	$0x200, %rax
    00000bdd: 	jmp	.Ltmp1205 # Offset: 3037
.Ltmp1183:
    00000be2: 	movq	-0x8(%rdx), %rax
    00000be6: 	addq	$0x200, %rax
    00000bec: 	jmp	.Ltmp1206 # Offset: 3052
.Ltmp1179:
    00000bf1: 	movq	-0x8(%rdx), %rax
    00000bf5: 	addq	$0x200, %rax
    00000bfb: 	jmp	.Ltmp1207 # Offset: 3067
.Ltmp1185:
    00000c00: 	movapd	(%rsp), %xmm1
    00000c05: 	movapd	%xmm1, %xmm4
    00000c09: 	jmp	.Ltmp1208 # Offset: 3081
.Ltmp1177:
    00000c0e: 	movapd	%xmm1, %xmm2
    00000c12: 	movapd	%xmm1, %xmm0
    00000c16: 	movapd	%xmm1, %xmm3
    00000c1a: 	movq	%r13, %xmm4
    00000c1f: 	jmp	.Ltmp1209 # Offset: 3103
.Ltmp1200:
    00000c24: 	callq	__stack_chk_fail@PLT # Offset: 3108
    00000c29: 	endbr64
.Ltmp1211:
    00000c2d: 	movq	%rax, %rbp
    00000c30: 	jmp	.Ltmp1210 # Offset: 3120
    00000c32: 	endbr64
    00000c36: 	jmp	.Ltmp1211 # Offset: 3126
    00000c38: 	endbr64
    00000c3c: 	jmp	.Ltmp1211 # Offset: 3132
    00000c3e: 	endbr64
    00000c42: 	jmp	.Ltmp1211 # Offset: 3138
    00000c44: 	endbr64
    00000c48: 	jmp	.Ltmp1211 # Offset: 3144
    00000c4a: 	endbr64
    00000c4e: 	movq	%rax, %rbp
    00000c51: 	jmp	.Ltmp1212 # Offset: 3153
    00000c53: 	endbr64
    00000c57: 	jmp	.Ltmp1211 # Offset: 3159
    00000c59: 	endbr64
    00000c5d: 	jmp	.Ltmp1211 # Offset: 3165
    00000c5f: 	endbr64
    00000c63: 	jmp	.Ltmp1211 # Offset: 3171
    00000c65: 	endbr64
    00000c69: 	jmp	.Ltmp1211 # Offset: 3177
.Ltmp1210:
    00000c6b: 	movq	0x110(%rsp), %rdi
    00000c73: 	cmpq	%rbx, %rdi
    00000c76: 	je	.Ltmp1212 # Offset: 3190
.Ltmp1215:
    00000c78: 	movq	0x120(%rsp), %rax
    00000c80: 	leaq	0x1(%rax), %rsi
    00000c84: 	callq	_ZdlPvm@PLT # Offset: 3204
.Ltmp1212:
    00000c89: 	movq	0xf0(%rsp), %rdi
    00000c91: 	leaq	0x100(%rsp), %rax
    00000c99: 	cmpq	%rax, %rdi
    00000c9c: 	je	.Ltmp1213 # Offset: 3228
    00000c9e: 	movq	0x100(%rsp), %rax
    00000ca6: 	leaq	0x1(%rax), %rsi
    00000caa: 	callq	_ZdlPvm@PLT # Offset: 3242
.Ltmp1213:
    00000caf: 	movq	%rbp, %rdi
    00000cb2: 	callq	_Unwind_Resume@PLT # Offset: 3250
    00000cb7: 	endbr64
    00000cbb: 	jmp	.Ltmp1211 # Offset: 3259
    00000cc0: 	endbr64
    00000cc4: 	jmp	.Ltmp1211 # Offset: 3268
    00000cc9: 	endbr64
    00000ccd: 	movq	%rax, %rbp
    00000cd0: 	jmp	.Ltmp1214 # Offset: 3280
    00000cd2: 	endbr64
    00000cd6: 	jmp	.Ltmp1211 # Offset: 3286
.Ltmp1214:
    00000cdb: 	movq	0x110(%rsp), %rdi
    00000ce3: 	leaq	0x120(%rsp), %rax
    00000ceb: 	cmpq	%rax, %rdi
    00000cee: 	jne	.Ltmp1215 # Offset: 3310
    00000cf0: 	jmp	.Ltmp1212 # Offset: 3312
    00000cf2: 	endbr64
    00000cf6: 	jmp	.Ltmp1211 # Offset: 3318
    00000cfb: 	endbr64
    00000cff: 	jmp	.Ltmp1211 # Offset: 3327
    00000d04: 	endbr64
    00000d08: 	jmp	.Ltmp1211 # Offset: 3336
DWARF CFI Instructions:
    <empty>
End of Function "_Z11TestOneTypeIdEvv"

Binary Function "_Z19test_struct_global2Id11test_structIdEXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE" after disassembly {
  Number      : 129
  State       : disassembled
  Address     : 0x15740
  Size        : 0xb69
  MaxSize     : 0xb69
  Offset      : 0x15740
  Section     : .text
  Orc Section : .local.text._Z19test_struct_global2Id11test_structIdEXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0128:
    00000000: 	endbr64
    00000004: 	pushq	%r13
    00000006: 	pushq	%r12
    00000008: 	pushq	%rbp
    00000009: 	movq	%rdi, %rbp
    0000000c: 	pushq	%rbx
    0000000d: 	subq	$0x68, %rsp
    00000011: 	movq	%fs:0x28, %rax
    0000001a: 	movq	%rax, 0x58(%rsp)
    0000001f: 	xorl	%eax, %eax
    00000021: 	callq	clock@PLT # Offset: 33
    00000026: 	movl	iterations(%rip), %esi
    0000002c: 	movsd	dataDouble(%rip), %xmm15
    00000035: 	movq	%rax, start_time(%rip)
    0000003c: 	movq	dataDouble+8(%rip), %r9
    00000043: 	movsd	dataDouble+16(%rip), %xmm3
    0000004b: 	movq	dataDouble+24(%rip), %r8
    00000052: 	movsd	dataDouble+32(%rip), %xmm0
    0000005a: 	movq	dataDouble+40(%rip), %r10
    00000061: 	movsd	dataDouble+48(%rip), %xmm2
    00000069: 	movq	dataDouble+56(%rip), %r11
    00000070: 	movsd	dataDouble+64(%rip), %xmm1
    00000078: 	movq	dataDouble+72(%rip), %rdx
    0000007f: 	movq	dataDouble+80(%rip), %rax
    00000086: 	testl	%esi, %esi
    00000088: 	jle	.Ltmp1216 # Offset: 136
    0000008e: 	leal	-0x1(%rsi), %ecx
    00000091: 	cmpl	$0x1, %ecx
    00000094: 	jbe	.Ltmp1217 # Offset: 148
    0000009a: 	movsd	DATAat0x17d10(%rip), %xmm4
    000000a2: 	movl	%esi, %edi
    000000a4: 	xorl	%ecx, %ecx
    000000a6: 	movsd	DATAat0x17cf0(%rip), %xmm5
    000000ae: 	movsd	DATAat0x17d00(%rip), %xmm13
    000000b7: 	movsd	DATAat0x17ce0(%rip), %xmm6
    000000bf: 	shrl	%edi
    000000c1: 	movsd	%xmm4, 0x20(%rsp)
    000000c7: 	movsd	DATAat0x17cb0(%rip), %xmm4
    000000cf: 	movsd	DATAat0x17cd8(%rip), %xmm12
    000000d8: 	movsd	%xmm5, 0x18(%rsp)
    000000de: 	movsd	DATAat0x17dc0(%rip), %xmm5
    000000e6: 	movsd	DATAat0x17cc0(%rip), %xmm7
    000000ee: 	movsd	DATAat0x17ce8(%rip), %xmm9
    000000f7: 	movsd	%xmm4, 0x10(%rsp)
    000000fd: 	movsd	DATAat0x17d18(%rip), %xmm4
    00000105: 	movsd	DATAat0x17c98(%rip), %xmm14
    0000010e: 	movsd	%xmm13, 0x30(%rsp)
    00000115: 	movsd	DATAat0x17d08(%rip), %xmm13
    0000011e: 	movsd	DATAat0x17dc8(%rip), %xmm10
    00000127: 	movsd	%xmm5, 0x28(%rsp)
    0000012d: 	movsd	DATAat0x17cc8(%rip), %xmm8
    00000136: 	movsd	%xmm4, 0x40(%rsp)
    0000013c: 	movsd	DATAat0x17cd0(%rip), %xmm5
    00000144: 	movsd	DATAat0x17cf8(%rip), %xmm4
    0000014c: 	movsd	DATAat0x17cb8(%rip), %xmm11
    00000155: 	movsd	%xmm13, 0x38(%rsp)
    0000015c: 	movsd	%xmm12, 0x8(%rsp)
    00000163: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1218:
    00000168: 	addsd	%xmm6, %xmm15
    0000016d: 	movsd	0x28(%rsp), %xmm12
    00000174: 	addsd	%xmm14, %xmm0
    00000179: 	addl	$0x1, %ecx
    0000017c: 	movsd	0x20(%rsp), %xmm13
    00000183: 	addsd	%xmm14, %xmm3
    00000188: 	addsd	%xmm5, %xmm2
    0000018c: 	addsd	%xmm7, %xmm15
    00000191: 	addsd	%xmm6, %xmm0
    00000195: 	addsd	%xmm4, %xmm3
    00000199: 	addsd	%xmm4, %xmm2
    0000019d: 	addsd	%xmm9, %xmm15
    000001a2: 	addsd	0x8(%rsp), %xmm15
    000001a9: 	addsd	0x18(%rsp), %xmm15
    000001b0: 	addsd	%xmm4, %xmm0
    000001b4: 	addsd	%xmm7, %xmm3
    000001b8: 	addsd	%xmm6, %xmm2
    000001bc: 	addsd	%xmm12, %xmm15
    000001c1: 	addsd	%xmm5, %xmm0
    000001c5: 	addsd	%xmm9, %xmm3
    000001ca: 	addsd	%xmm14, %xmm2
    000001cf: 	addsd	%xmm6, %xmm15
    000001d4: 	addsd	%xmm7, %xmm0
    000001d8: 	addsd	%xmm10, %xmm3
    000001dd: 	addsd	%xmm6, %xmm2
    000001e1: 	addsd	%xmm7, %xmm15
    000001e6: 	addsd	%xmm11, %xmm0
    000001eb: 	addsd	%xmm8, %xmm3
    000001f0: 	addsd	%xmm4, %xmm2
    000001f4: 	addsd	%xmm9, %xmm15
    000001f9: 	addsd	0x8(%rsp), %xmm15
    00000200: 	addsd	%xmm9, %xmm0
    00000205: 	addsd	%xmm14, %xmm3
    0000020a: 	addsd	%xmm5, %xmm2
    0000020e: 	movq	%xmm15, %rbx
    00000213: 	movq	%r9, %xmm15
    00000218: 	addsd	%xmm5, %xmm15
    0000021d: 	addsd	%xmm13, %xmm0
    00000222: 	addsd	%xmm4, %xmm3
    00000226: 	addsd	%xmm4, %xmm2
    0000022a: 	addsd	%xmm13, %xmm15
    0000022f: 	addsd	0x10(%rsp), %xmm15
    00000236: 	addsd	0x40(%rsp), %xmm15
    0000023d: 	addsd	%xmm14, %xmm0
    00000242: 	addsd	%xmm7, %xmm3
    00000246: 	addsd	%xmm6, %xmm2
    0000024a: 	addsd	%xmm5, %xmm15
    0000024f: 	addsd	%xmm6, %xmm0
    00000253: 	addsd	%xmm9, %xmm3
    00000258: 	addsd	%xmm14, %xmm2
    0000025d: 	addsd	%xmm13, %xmm15
    00000262: 	addsd	%xmm4, %xmm0
    00000266: 	addsd	%xmm6, %xmm2
    0000026a: 	addsd	%xmm10, %xmm3
    0000026f: 	movq	%xmm15, %r9
    00000274: 	movq	%r8, %xmm15
    00000279: 	addsd	%xmm5, %xmm0
    0000027d: 	addsd	%xmm6, %xmm15
    00000282: 	addsd	%xmm4, %xmm2
    00000286: 	addsd	%xmm8, %xmm3
    0000028b: 	addsd	%xmm7, %xmm0
    0000028f: 	addsd	%xmm5, %xmm15
    00000294: 	addsd	%xmm11, %xmm0
    00000299: 	addsd	%xmm11, %xmm15
    0000029e: 	addsd	%xmm9, %xmm0
    000002a3: 	addsd	%xmm13, %xmm15
    000002a8: 	movq	%rbx, %xmm13
    000002ad: 	addsd	0x18(%rsp), %xmm13
    000002b4: 	addsd	%xmm6, %xmm15
    000002b9: 	addsd	%xmm5, %xmm15
    000002be: 	movq	%xmm15, %r8
    000002c3: 	movq	%r10, %xmm15
    000002c8: 	addsd	%xmm4, %xmm15
    000002cd: 	addsd	%xmm4, %xmm15
    000002d2: 	addsd	%xmm4, %xmm15
    000002d7: 	addsd	%xmm4, %xmm15
    000002dc: 	movq	%xmm15, %r10
    000002e1: 	movq	%r11, %xmm15
    000002e6: 	addsd	%xmm7, %xmm15
    000002eb: 	addsd	0x8(%rsp), %xmm15
    000002f2: 	addsd	%xmm12, %xmm15
    000002f7: 	addsd	%xmm7, %xmm15
    000002fc: 	movq	%xmm15, %r11
    00000301: 	movsd	0x10(%rsp), %xmm15
    00000308: 	addsd	%xmm15, %xmm1
    0000030d: 	addsd	%xmm11, %xmm1
    00000312: 	addsd	%xmm7, %xmm1
    00000316: 	addsd	%xmm8, %xmm1
    0000031b: 	addsd	%xmm10, %xmm1
    00000320: 	addsd	%xmm5, %xmm1
    00000324: 	addsd	0x8(%rsp), %xmm1
    0000032a: 	addsd	%xmm15, %xmm1
    0000032f: 	movq	%rdx, %xmm15
    00000334: 	addsd	%xmm9, %xmm15
    00000339: 	addsd	%xmm11, %xmm1
    0000033e: 	addsd	%xmm10, %xmm15
    00000343: 	addsd	%xmm7, %xmm1
    00000347: 	addsd	%xmm8, %xmm15
    0000034c: 	addsd	0x18(%rsp), %xmm15
    00000353: 	addsd	%xmm8, %xmm1
    00000358: 	addsd	%xmm12, %xmm15
    0000035d: 	addsd	%xmm10, %xmm1
    00000362: 	addsd	%xmm9, %xmm15
    00000367: 	addsd	%xmm5, %xmm1
    0000036b: 	addsd	0x8(%rsp), %xmm1
    00000371: 	addsd	%xmm10, %xmm15
    00000376: 	addsd	%xmm8, %xmm15
    0000037b: 	movq	%xmm15, %rdx
    00000380: 	movq	%rax, %xmm15
    00000385: 	addsd	%xmm4, %xmm15
    0000038a: 	addsd	%xmm11, %xmm15
    0000038f: 	addsd	%xmm10, %xmm15
    00000394: 	addsd	%xmm8, %xmm15
    00000399: 	addsd	0x30(%rsp), %xmm15
    000003a0: 	addsd	0x38(%rsp), %xmm15
    000003a7: 	addsd	%xmm4, %xmm15
    000003ac: 	addsd	%xmm11, %xmm15
    000003b1: 	addsd	%xmm10, %xmm15
    000003b6: 	addsd	%xmm8, %xmm15
    000003bb: 	movq	%xmm15, %rax
    000003c0: 	movq	%r10, %xmm15
    000003c5: 	addsd	%xmm4, %xmm15
    000003ca: 	addsd	%xmm4, %xmm15
    000003cf: 	movq	%xmm15, %r10
    000003d4: 	movapd	%xmm13, %xmm15
    000003d9: 	movsd	0x20(%rsp), %xmm13
    000003e0: 	addsd	%xmm12, %xmm15
    000003e5: 	movq	%r8, %xmm12
    000003ea: 	addsd	%xmm11, %xmm12
    000003ef: 	addsd	%xmm13, %xmm0
    000003f4: 	addsd	%xmm13, %xmm12
    000003f9: 	movsd	0x28(%rsp), %xmm13
    00000400: 	movq	%xmm12, %r8
    00000405: 	movq	%r9, %xmm12
    0000040a: 	addsd	0x10(%rsp), %xmm12
    00000411: 	addsd	0x40(%rsp), %xmm12
    00000418: 	movq	%xmm12, %r9
    0000041d: 	movq	%rax, %xmm12
    00000422: 	addsd	0x30(%rsp), %xmm12
    00000429: 	addsd	0x38(%rsp), %xmm12
    00000430: 	movq	%xmm12, %rax
    00000435: 	movq	%r11, %xmm12
    0000043a: 	addsd	0x8(%rsp), %xmm12
    00000441: 	addsd	%xmm13, %xmm12
    00000446: 	movq	%xmm12, %r11
    0000044b: 	movq	%rdx, %xmm12
    00000450: 	addsd	0x18(%rsp), %xmm12
    00000457: 	addsd	%xmm13, %xmm12
    0000045c: 	movq	%xmm12, %rdx
    00000461: 	cmpl	%ecx, %edi
    00000463: 	jne	.Ltmp1218 # Offset: 1123
    00000469: 	movl	%esi, %ecx
    0000046b: 	andl	$-0x2, %ecx
    0000046e: 	testb	$0x1, %sil
    00000472: 	je	.Ltmp1216 # Offset: 1138
.Ltmp1229:
    00000478: 	movq	%rax, %xmm12
    0000047d: 	movsd	0x10(%rsp), %xmm13
    00000484: 	addsd	%xmm5, %xmm2
    00000488: 	addl	$0x1, %ecx
    0000048b: 	addsd	%xmm4, %xmm12
    00000490: 	addsd	%xmm6, %xmm15
    00000495: 	addsd	%xmm13, %xmm1
    0000049a: 	addsd	%xmm14, %xmm0
    0000049f: 	addsd	%xmm14, %xmm3
    000004a4: 	addsd	%xmm4, %xmm2
    000004a8: 	movq	%xmm12, %rax
    000004ad: 	movq	%r9, %xmm12
    000004b2: 	addsd	%xmm7, %xmm15
    000004b7: 	addsd	%xmm5, %xmm12
    000004bc: 	addsd	%xmm6, %xmm0
    000004c0: 	addsd	%xmm11, %xmm1
    000004c5: 	addsd	%xmm4, %xmm3
    000004c9: 	addsd	%xmm9, %xmm15
    000004ce: 	addsd	0x8(%rsp), %xmm15
    000004d5: 	movq	%xmm12, %r9
    000004da: 	movq	%r8, %xmm12
    000004df: 	addsd	%xmm4, %xmm0
    000004e3: 	addsd	%xmm6, %xmm12
    000004e8: 	addsd	%xmm7, %xmm1
    000004ec: 	addsd	%xmm6, %xmm2
    000004f0: 	addsd	%xmm7, %xmm3
    000004f4: 	addsd	%xmm5, %xmm0
    000004f8: 	movq	%xmm12, %r8
    000004fd: 	movq	%r11, %xmm12
    00000502: 	addsd	%xmm8, %xmm1
    00000507: 	addsd	%xmm7, %xmm12
    0000050c: 	addsd	%xmm14, %xmm2
    00000511: 	addsd	%xmm7, %xmm0
    00000515: 	addsd	%xmm9, %xmm3
    0000051a: 	addsd	%xmm10, %xmm1
    0000051f: 	movq	%xmm12, %r11
    00000524: 	movq	%rdx, %xmm12
    00000529: 	addsd	%xmm6, %xmm2
    0000052d: 	addsd	%xmm9, %xmm12
    00000532: 	addsd	%xmm11, %xmm0
    00000537: 	addsd	%xmm10, %xmm3
    0000053c: 	addsd	%xmm5, %xmm1
    00000540: 	addsd	%xmm4, %xmm2
    00000544: 	addsd	0x8(%rsp), %xmm1
    0000054a: 	movq	%xmm12, %rdx
    0000054f: 	movq	%r10, %xmm12
    00000554: 	addsd	%xmm9, %xmm0
    00000559: 	addsd	%xmm4, %xmm12
    0000055e: 	addsd	%xmm8, %xmm3
    00000563: 	addsd	0x20(%rsp), %xmm0
    00000569: 	movq	%xmm12, %r10
    0000056e: 	movq	%r8, %xmm12
    00000573: 	addsd	%xmm5, %xmm12
    00000578: 	movq	%xmm12, %r8
    0000057d: 	movq	%rax, %xmm12
    00000582: 	addsd	%xmm11, %xmm12
    00000587: 	movq	%xmm12, %rax
    0000058c: 	movq	%r9, %xmm12
    00000591: 	addsd	0x20(%rsp), %xmm12
    00000598: 	movq	%xmm12, %r9
    0000059d: 	movq	%rdx, %xmm12
    000005a2: 	addsd	%xmm10, %xmm12
    000005a7: 	movq	%xmm12, %rdx
    000005ac: 	movq	%rax, %xmm12
    000005b1: 	addsd	%xmm10, %xmm12
    000005b6: 	movq	%xmm12, %rax
    000005bb: 	movq	%r10, %xmm12
    000005c0: 	addsd	%xmm4, %xmm12
    000005c5: 	movq	%xmm12, %r10
    000005ca: 	movq	%rax, %xmm12
    000005cf: 	addsd	%xmm8, %xmm12
    000005d4: 	movq	%xmm12, %rax
    000005d9: 	movq	%r9, %xmm12
    000005de: 	addsd	%xmm13, %xmm12
    000005e3: 	movsd	0x18(%rsp), %xmm13
    000005ea: 	addsd	%xmm13, %xmm15
    000005ef: 	movq	%xmm12, %r9
    000005f4: 	movq	%rdx, %xmm12
    000005f9: 	addsd	%xmm8, %xmm12
    000005fe: 	movq	%xmm12, %rdx
    00000603: 	movq	%r8, %xmm12
    00000608: 	addsd	%xmm11, %xmm12
    0000060d: 	movq	%xmm12, %r8
    00000612: 	movq	%rdx, %xmm12
    00000617: 	addsd	%xmm13, %xmm12
    0000061c: 	movsd	0x28(%rsp), %xmm13
    00000623: 	addsd	%xmm13, %xmm15
    00000628: 	movq	%xmm12, %rdx
    0000062d: 	movq	%rax, %xmm12
    00000632: 	addsd	0x30(%rsp), %xmm12
    00000639: 	movq	%xmm12, %rax
    0000063e: 	movq	%r10, %xmm12
    00000643: 	addsd	%xmm4, %xmm12
    00000648: 	movq	%xmm12, %r10
    0000064d: 	movq	%r8, %xmm12
    00000652: 	addsd	0x20(%rsp), %xmm12
    00000659: 	movq	%xmm12, %r8
    0000065e: 	movq	%r11, %xmm12
    00000663: 	addsd	0x8(%rsp), %xmm12
    0000066a: 	movq	%xmm12, %r11
    0000066f: 	movq	%r9, %xmm12
    00000674: 	addsd	0x40(%rsp), %xmm12
    0000067b: 	movq	%xmm12, %r9
    00000680: 	movq	%rax, %xmm12
    00000685: 	addsd	0x38(%rsp), %xmm12
    0000068c: 	movq	%xmm12, %rax
    00000691: 	movq	%r11, %xmm12
    00000696: 	addsd	%xmm13, %xmm12
    0000069b: 	movq	%xmm12, %r11
    000006a0: 	movq	%rdx, %xmm12
    000006a5: 	addsd	%xmm13, %xmm12
    000006aa: 	movq	%xmm12, %rdx
    000006af: 	cmpl	%ecx, %esi
    000006b1: 	jle	.Ltmp1216 # Offset: 1713
    000006b7: 	movq	%rax, %xmm12
    000006bc: 	movsd	0x10(%rsp), %xmm13
    000006c3: 	addsd	%xmm5, %xmm2
    000006c7: 	addsd	%xmm14, %xmm0
    000006cc: 	addsd	%xmm4, %xmm12
    000006d1: 	addsd	%xmm14, %xmm3
    000006d6: 	addsd	%xmm13, %xmm1
    000006db: 	addsd	%xmm6, %xmm15
    000006e0: 	addsd	%xmm4, %xmm2
    000006e4: 	addsd	%xmm6, %xmm0
    000006e8: 	movq	%xmm12, %rax
    000006ed: 	movq	%r9, %xmm12
    000006f2: 	addsd	%xmm4, %xmm3
    000006f6: 	addsd	%xmm5, %xmm12
    000006fb: 	addsd	%xmm11, %xmm1
    00000700: 	addsd	%xmm6, %xmm2
    00000704: 	addsd	%xmm4, %xmm0
    00000708: 	addsd	%xmm7, %xmm15
    0000070d: 	addsd	%xmm7, %xmm3
    00000711: 	movq	%xmm12, %r9
    00000716: 	movq	%r8, %xmm12
    0000071b: 	addsd	%xmm7, %xmm1
    0000071f: 	addsd	%xmm6, %xmm12
    00000724: 	addsd	%xmm14, %xmm2
    00000729: 	addsd	%xmm5, %xmm0
    0000072d: 	addsd	%xmm9, %xmm15
    00000732: 	addsd	%xmm8, %xmm1
    00000737: 	addsd	0x8(%rsp), %xmm15
    0000073e: 	movq	%xmm12, %r8
    00000743: 	movq	%r11, %xmm12
    00000748: 	addsd	%xmm6, %xmm2
    0000074c: 	movsd	0x18(%rsp), %xmm6
    00000752: 	addsd	%xmm7, %xmm12
    00000757: 	addsd	%xmm7, %xmm0
    0000075b: 	addsd	%xmm10, %xmm1
    00000760: 	addsd	%xmm9, %xmm3
    00000765: 	addsd	%xmm6, %xmm15
    0000076a: 	addsd	%xmm4, %xmm2
    0000076e: 	movq	%xmm12, %r11
    00000773: 	movq	%rdx, %xmm12
    00000778: 	addsd	%xmm11, %xmm0
    0000077d: 	addsd	%xmm9, %xmm12
    00000782: 	addsd	%xmm5, %xmm1
    00000786: 	addsd	%xmm10, %xmm3
    0000078b: 	addsd	%xmm9, %xmm0
    00000790: 	movq	%xmm12, %rdx
    00000795: 	movq	%r10, %xmm12
    0000079a: 	addsd	%xmm4, %xmm12
    0000079f: 	addsd	%xmm8, %xmm3
    000007a4: 	movq	%xmm12, %r10
    000007a9: 	movq	%r8, %xmm12
    000007ae: 	addsd	%xmm5, %xmm12
    000007b3: 	movq	%r10, %xmm14
    000007b8: 	addsd	%xmm4, %xmm14
    000007bd: 	movq	%xmm12, %r8
    000007c2: 	movq	%rax, %xmm12
    000007c7: 	addsd	%xmm11, %xmm12
    000007cc: 	movq	%xmm14, %r10
    000007d1: 	movq	%r10, %xmm5
    000007d6: 	addsd	%xmm4, %xmm5
    000007da: 	movq	%xmm12, %rax
    000007df: 	movq	%r9, %xmm12
    000007e4: 	addsd	0x20(%rsp), %xmm12
    000007eb: 	movq	%xmm5, %r10
    000007f0: 	movsd	%xmm12, 0x48(%rsp)
    000007f7: 	movq	%rdx, %xmm12
    000007fc: 	addsd	%xmm10, %xmm12
    00000801: 	movq	%xmm12, %rdx
    00000806: 	movq	%rax, %xmm12
    0000080b: 	addsd	%xmm10, %xmm12
    00000810: 	movsd	0x28(%rsp), %xmm10
    00000817: 	addsd	%xmm10, %xmm15
    0000081c: 	movapd	%xmm12, %xmm14
    00000821: 	movsd	0x48(%rsp), %xmm12
    00000828: 	addsd	%xmm8, %xmm14
    0000082d: 	addsd	%xmm13, %xmm12
    00000832: 	movq	%r8, %xmm13
    00000837: 	addsd	%xmm11, %xmm13
    0000083c: 	movsd	0x20(%rsp), %xmm11
    00000843: 	movsd	%xmm14, 0x10(%rsp)
    0000084a: 	movapd	%xmm12, %xmm14
    0000084f: 	movq	%rdx, %xmm12
    00000854: 	addsd	%xmm11, %xmm0
    00000859: 	movapd	%xmm13, %xmm5
    0000085e: 	addsd	%xmm8, %xmm12
    00000863: 	movsd	0x8(%rsp), %xmm13
    0000086a: 	addsd	0x40(%rsp), %xmm14
    00000871: 	addsd	%xmm11, %xmm5
    00000876: 	addsd	%xmm13, %xmm1
    0000087b: 	movapd	%xmm12, %xmm7
    00000880: 	movq	%xmm14, %r9
    00000885: 	movq	%xmm5, %r8
    0000088a: 	movq	%r11, %xmm5
    0000088f: 	addsd	%xmm6, %xmm7
    00000893: 	movsd	0x10(%rsp), %xmm6
    00000899: 	addsd	%xmm13, %xmm5
    0000089e: 	addsd	0x30(%rsp), %xmm6
    000008a4: 	addsd	0x38(%rsp), %xmm6
    000008aa: 	addsd	%xmm10, %xmm7
    000008af: 	addsd	%xmm10, %xmm5
    000008b4: 	movq	%xmm6, %rax
    000008b9: 	movq	%xmm7, %rdx
    000008be: 	movq	%xmm5, %r11
.Ltmp1216:
    000008c3: 	movq	%rbp, %rsi
    000008c6: 	leaq	dataDouble(%rip), %rdi
    000008cd: 	movq	%rax, dataDouble+80(%rip)
    000008d4: 	movq	%r9, dataDouble+8(%rip)
    000008db: 	movq	%r8, dataDouble+24(%rip)
    000008e2: 	movq	%r10, dataDouble+40(%rip)
    000008e9: 	movq	%r11, dataDouble+56(%rip)
    000008f0: 	movq	%rdx, dataDouble+72(%rip)
    000008f7: 	movsd	%xmm15, dataDouble(%rip)
    00000900: 	movsd	%xmm3, dataDouble+16(%rip)
    00000908: 	movsd	%xmm0, dataDouble+32(%rip)
    00000910: 	movsd	%xmm2, dataDouble+48(%rip)
    00000918: 	movsd	%xmm1, dataDouble+64(%rip)
    00000920: 	callq	_Z12check11_sumsIdEvP11test_structIT_ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE # Offset: 2336
    00000925: 	movq	_Z7gLabelsB5cxx11+64(%rip), %rax
    0000092c: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rbx
    00000933: 	subq	$0x20, %rax
    00000937: 	cmpq	%rax, %rbx
    0000093a: 	je	.Ltmp1219 # Offset: 2362
    00000940: 	leaq	0x10(%rbx), %rdi
    00000944: 	movq	0x8(%rbp), %r12
    00000948: 	movq	%rdi, (%rbx)
    0000094b: 	movq	(%rbp), %r13
    0000094f: 	movq	%r13, %rax
    00000952: 	addq	%r12, %rax
    00000955: 	je	.Ltmp1220 # Offset: 2389
    00000957: 	testq	%r13, %r13
    0000095a: 	je	.Ltmp1221 # Offset: 2394
.Ltmp1220:
    00000960: 	movq	%r12, 0x50(%rsp)
    00000965: 	cmpq	$0xf, %r12
    00000969: 	ja	.Ltmp1222 # Offset: 2409
    0000096f: 	cmpq	$0x1, %r12
    00000973: 	jne	.Ltmp1223 # Offset: 2419
    00000979: 	movzbl	(%r13), %eax
    0000097e: 	movb	%al, 0x10(%rbx)
.Ltmp1226:
    00000981: 	movq	%r12, 0x8(%rbx)
    00000985: 	movb	$0x0, (%rdi,%r12)
    0000098a: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000991: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000998: 	addq	$0x20, %rax
    0000099c: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    000009a3: 	movq	%rax, _Z7gLabelsB5cxx11+48(%rip)
    000009aa: 	je	.Ltmp1224 # Offset: 2474
.Ltmp1227:
    000009b0: 	movq	-0x20(%rax), %rbp
    000009b4: 	callq	clock@PLT # Offset: 2484
    000009b9: 	movq	%rax, end_time(%rip)
    000009c0: 	movq	0x58(%rsp), %rdx
    000009c5: 	subq	%fs:0x28, %rdx
    000009ce: 	jne	.Ltmp1225 # Offset: 2510
    000009d4: 	subq	start_time(%rip), %rax
    000009db: 	pxor	%xmm0, %xmm0
    000009df: 	movq	%rbp, %rdi
    000009e2: 	cvtsi2sd	%rax, %xmm0
    000009e7: 	divsd	DATAat0x17ca0(%rip), %xmm0
    000009ef: 	addq	$0x68, %rsp
    000009f3: 	popq	%rbx
    000009f4: 	popq	%rbp
    000009f5: 	popq	%r12
    000009f7: 	popq	%r13
    000009f9: 	jmp	_Z13record_resultdPKc # TAILCALL  # Offset: 2553
    000009fe: 	nop # Size: 2
.Ltmp1222:
    00000a00: 	movq	%rbx, %rdi
    00000a03: 	leaq	0x50(%rsp), %rsi
    00000a08: 	xorl	%edx, %edx
    00000a0a: 	callq	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm@PLT # Offset: 2570
    00000a0f: 	movq	%rax, (%rbx)
    00000a12: 	movq	%rax, %rdi
    00000a15: 	movq	0x50(%rsp), %rax
    00000a1a: 	movq	%rax, 0x10(%rbx)
.Ltmp1228:
    00000a1e: 	movq	%r12, %rdx
    00000a21: 	movq	%r13, %rsi
    00000a24: 	callq	memcpy@PLT # Offset: 2596
    00000a29: 	movq	0x50(%rsp), %r12
    00000a2e: 	movq	(%rbx), %rdi
    00000a31: 	jmp	.Ltmp1226 # Offset: 2609
    00000a36: 	nopw	%cs:(%rax,%rax) # Size: 10
.Ltmp1219:
    00000a40: 	movq	%rbp, %rsi
    00000a43: 	leaq	_Z7gLabelsB5cxx11(%rip), %rdi
    00000a4a: 	callq	_ZNSt5dequeINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE16_M_push_back_auxIJRKS5_EEEvDpOT_ # Offset: 2634
    00000a4f: 	movq	_Z7gLabelsB5cxx11+48(%rip), %rax
    00000a56: 	cmpq	%rax, _Z7gLabelsB5cxx11+56(%rip)
    00000a5d: 	movq	_Z7gLabelsB5cxx11+72(%rip), %rdx
    00000a64: 	jne	.Ltmp1227 # Offset: 2660
.Ltmp1224:
    00000a6a: 	movq	-0x8(%rdx), %rax
    00000a6e: 	addq	$0x200, %rax
    00000a74: 	jmp	.Ltmp1227 # Offset: 2676
    00000a79: 	nopl	(%rax) # Size: 7
.Ltmp1223:
    00000a80: 	testq	%r12, %r12
    00000a83: 	je	.Ltmp1226 # Offset: 2691
    00000a89: 	jmp	.Ltmp1228 # Offset: 2697
    00000a8b: 	nopl	(%rax,%rax) # Size: 5
.Ltmp1217:
    00000a90: 	movsd	DATAat0x17cd8(%rip), %xmm5
    00000a98: 	movsd	DATAat0x17d10(%rip), %xmm4
    00000aa0: 	xorl	%ecx, %ecx
    00000aa2: 	movsd	DATAat0x17ce0(%rip), %xmm6
    00000aaa: 	movsd	DATAat0x17d00(%rip), %xmm13
    00000ab3: 	movsd	%xmm5, 0x8(%rsp)
    00000ab9: 	movsd	DATAat0x17cf0(%rip), %xmm5
    00000ac1: 	movsd	DATAat0x17cc0(%rip), %xmm7
    00000ac9: 	movsd	DATAat0x17ce8(%rip), %xmm9
    00000ad2: 	movsd	%xmm4, 0x20(%rsp)
    00000ad8: 	movsd	DATAat0x17cb0(%rip), %xmm4
    00000ae0: 	movsd	DATAat0x17c98(%rip), %xmm14
    00000ae9: 	movsd	%xmm5, 0x18(%rsp)
    00000aef: 	movsd	DATAat0x17dc0(%rip), %xmm5
    00000af7: 	movsd	DATAat0x17dc8(%rip), %xmm10
    00000b00: 	movsd	%xmm4, 0x10(%rsp)
    00000b06: 	movsd	DATAat0x17d18(%rip), %xmm4
    00000b0e: 	movsd	DATAat0x17cc8(%rip), %xmm8
    00000b17: 	movsd	%xmm13, 0x30(%rsp)
    00000b1e: 	movsd	DATAat0x17d08(%rip), %xmm13
    00000b27: 	movsd	DATAat0x17cb8(%rip), %xmm11
    00000b30: 	movsd	%xmm5, 0x28(%rsp)
    00000b36: 	movsd	DATAat0x17cd0(%rip), %xmm5
    00000b3e: 	movsd	%xmm4, 0x40(%rsp)
    00000b44: 	movsd	DATAat0x17cf8(%rip), %xmm4
    00000b4c: 	movsd	%xmm13, 0x38(%rsp)
    00000b53: 	jmp	.Ltmp1229 # Offset: 2899
.Ltmp1221:
    00000b58: 	leaq	DATAat0x17018(%rip), %rdi
    00000b5f: 	callq	_ZSt19__throw_logic_errorPKc@PLT # Offset: 2911
.Ltmp1225:
    00000b64: 	callq	__stack_chk_fail@PLT # Offset: 2916
DWARF CFI Instructions:
    <empty>
End of Function "_Z19test_struct_global2Id11test_structIdEXadL_Z10dataDoubleEEEvRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"

Binary Function "_fini" after disassembly {
  Number      : 130
  State       : disassembled
  Address     : 0x162ac
  Size        : 0xd
  MaxSize     : 0xd
  Offset      : 0x162ac
  Section     : .fini
  Orc Section : .local.text._fini
  LSDA        : 0x0
  IsSimple    : 1
  IsMultiEntry: 0
  IsSplit     : 0
  BB Count    : 0
}
.LBB0129:
    00000000: 	endbr64
    00000004: 	subq	$0x8, %rsp
    00000008: 	addq	$0x8, %rsp
    0000000c: 	retq # Offset: 12
DWARF CFI Instructions:
    <empty>
End of Function "_fini"

BOLT-INFO: 0 out of 131 functions in the binary (0.0%) have non-empty execution profile
BOLT-INFO: 959 instructions were shortened
BOLT-INFO: removed 287 empty blocks
BOLT-INFO: patched build-id (flipped last bit)
BOLT: 124 out of 157 functions were overwritten.
BOLT-INFO: rewriting .eh_frame_hdr in-place
BOLT-INFO: setting _end to 0x203958
